
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  080110b0  080110b0  000120b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011660  08011660  000132f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011660  08011660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011668  08011668  000132f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011668  08011668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011670  08011670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08011674  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f80  200002f0  08011964  000132f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002270  08011964  00014270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7ab  00000000  00000000  00013320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004692  00000000  00000000  00031acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128c  00000000  00000000  00037950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e41f  00000000  00000000  00038bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe62  00000000  00000000  00056ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a952  00000000  00000000  00076e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001117af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ec  00000000  00000000  001117f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011094 	.word	0x08011094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	08011094 	.word	0x08011094

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
 **		  TIMER-INTERRUPT	     **
 **********************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	static uint8_t interruptState = readData;
    if (htim->Instance == TIM4)  // Check if the interrupt comes from TIM4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        switch(interruptState)
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d827      	bhi.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f3d 	.word	0x08000f3d
 8000f14:	08000f4b 	.word	0x08000f4b
        {
        	case readData:
        		mpu6050_readData();
 8000f18:	f000 ff7e 	bl	8001e18 <_Z16mpu6050_readDatav>
        		interruptState++;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f26:	701a      	strb	r2, [r3, #0]
        	break;
 8000f28:	e013      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_X_Axis:
        		controlRoll();
 8000f2a:	f000 f901 	bl	8001130 <_Z11controlRollv>
				interruptState++;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f38:	701a      	strb	r2, [r3, #0]
			break;
 8000f3a:	e00a      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Y_Axis:
				interruptState++;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f46:	701a      	strb	r2, [r3, #0]
			break;
 8000f48:	e003      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Z_Axis:
				interruptState = readData;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			break;
 8000f50:	bf00      	nop

        }
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	2000030c 	.word	0x2000030c

08000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>:
 **********************************
 **		  MOTOR-CLASS-DEF	     **
 **********************************
*/

Motor::Motor(TIM_HandleTypeDef *htim, unsigned int Channel, GPIO_TypeDef *motorPort, uint16_t directionPin, uint16_t enablePin, uint16_t brakePin)
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
{
	Motor::timer = htim;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
	Motor::timerChannel = Channel;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
	Motor::motorPort = motorPort;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
	Motor::directionPin = directionPin;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8b3a      	ldrh	r2, [r7, #24]
 8000f88:	819a      	strh	r2, [r3, #12]
	Motor::enablePin = enablePin;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	8bba      	ldrh	r2, [r7, #28]
 8000f8e:	81da      	strh	r2, [r3, #14]
	Motor::brakePin = brakePin;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8c3a      	ldrh	r2, [r7, #32]
 8000f94:	821a      	strh	r2, [r3, #16]

	HAL_TIM_PWM_Start(timer, timerChannel);  // Start PWM
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f007 f93d 	bl	8008220 <HAL_TIM_PWM_Start>

	changeDirection(CCW);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 f86b 	bl	8001084 <_ZN5Motor15changeDirectionEb>

	changeBrakeState(enableBrake);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f87f 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>

	changeMotorState(disableMotor);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f893 	bl	80010e4 <_ZN5Motor16changeMotorStateEb>

}
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN5Motor11changeSpeedEd>:

void Motor::changeSpeed(double newMotorSpeed)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	ed87 0b00 	vstr	d0, [r7]
	speed = newMotorSpeed;
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	e9c1 2306 	strd	r2, r3, [r1, #24]

	uint32_t CCR_Value = (uint32_t)((__HAL_TIM_GET_AUTORELOAD(timer) + 1) * ((100.0 - speed) / 100.0));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa93 	bl	8000514 <__aeabi_ui2d>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4920      	ldr	r1, [pc, #128]	@ (8001080 <_ZN5Motor11changeSpeedEd+0xb8>)
 8000ffe:	f7ff f94b 	bl	8000298 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <_ZN5Motor11changeSpeedEd+0xb8>)
 8001010:	f7ff fc24 	bl	800085c <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff faf4 	bl	8000608 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fdc6 	bl	8000bb8 <__aeabi_d2uiz>
 800102c:	4603      	mov	r3, r0
 800102e:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <_ZN5Motor11changeSpeedEd+0x7c>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001042:	e018      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d105      	bne.n	8001058 <_ZN5Motor11changeSpeedEd+0x90>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001056:	e00e      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b08      	cmp	r3, #8
 800105e:	d105      	bne.n	800106c <_ZN5Motor11changeSpeedEd+0xa4>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800106a:	e004      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	40590000 	.word	0x40590000

08001084 <_ZN5Motor15changeDirectionEb>:

void Motor::changeDirection(bool newMotorDirection)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
	direction = newMotorDirection;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	78fa      	ldrb	r2, [r7, #3]
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_GPIO_WritePin(motorPort, directionPin, (GPIO_PinState)direction);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6898      	ldr	r0, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8999      	ldrh	r1, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f002 fa48 	bl	800353c <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN5Motor16changeBrakeStateEb>:

void Motor::changeBrakeState(bool newBrakeState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	brakeState = newBrakeState;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	HAL_GPIO_WritePin(motorPort, brakePin, (GPIO_PinState)brakeState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	8a19      	ldrh	r1, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010d6:	461a      	mov	r2, r3
 80010d8:	f002 fa30 	bl	800353c <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN5Motor16changeMotorStateEb>:

void Motor::changeMotorState(bool newMotorState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	motorState = newMotorState;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_GPIO_WritePin(motorPort, enablePin, (GPIO_PinState)motorState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	89d9      	ldrh	r1, [r3, #14]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001106:	461a      	mov	r2, r3
 8001108:	f002 fa18 	bl	800353c <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN5Motor12getDirectionEv>:
		}
	}
}

bool Motor::getDirection()
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return direction;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_Z11controlRollv>:
double Kp = 0.1;
double Ki = 0.01;
double Kd = 0.05;

void controlRoll()
{
 8001130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001134:	b08a      	sub	sp, #40	@ 0x28
 8001136:	af00      	add	r7, sp, #0
	double error, errorDerivative, output, absOutput, dt;
	static uint32_t lastTime = 0;
	static double previousError = 0, errorIntegral = 0;

	switch(balanceMode)
 8001138:	4b82      	ldr	r3, [pc, #520]	@ (8001344 <_Z11controlRollv+0x214>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d003      	beq.n	8001148 <_Z11controlRollv+0x18>
 8001140:	2b02      	cmp	r3, #2
 8001142:	f000 80ec 	beq.w	800131e <_Z11controlRollv+0x1ee>
		}
		case threeDimensional:
			error = 45 - filterRoll;
		break;
	}
}
 8001146:	e0f7      	b.n	8001338 <_Z11controlRollv+0x208>
			error = 45 - filterRoll;
 8001148:	4b7f      	ldr	r3, [pc, #508]	@ (8001348 <_Z11controlRollv+0x218>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	497e      	ldr	r1, [pc, #504]	@ (800134c <_Z11controlRollv+0x21c>)
 8001154:	f7ff f8a0 	bl	8000298 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			dt = (HAL_GetTick() - lastTime) / 1000.0;
 8001160:	f001 fb9c 	bl	800289c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	4b7a      	ldr	r3, [pc, #488]	@ (8001350 <_Z11controlRollv+0x220>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9d1 	bl	8000514 <__aeabi_ui2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b77      	ldr	r3, [pc, #476]	@ (8001354 <_Z11controlRollv+0x224>)
 8001178:	f7ff fb70 	bl	800085c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
			errorIntegral += error * dt;
 8001184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001188:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800118c:	f7ff fa3c 	bl	8000608 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	4b6f      	ldr	r3, [pc, #444]	@ (8001358 <_Z11controlRollv+0x228>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f87d 	bl	800029c <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	496c      	ldr	r1, [pc, #432]	@ (8001358 <_Z11controlRollv+0x228>)
 80011a8:	e9c1 2300 	strd	r2, r3, [r1]
			errorDerivative = (error - previousError) / dt;
 80011ac:	4b6b      	ldr	r3, [pc, #428]	@ (800135c <_Z11controlRollv+0x22c>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011b6:	f7ff f86f 	bl	8000298 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011c6:	f7ff fb49 	bl	800085c <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
			previousError = error;
 80011d2:	4962      	ldr	r1, [pc, #392]	@ (800135c <_Z11controlRollv+0x22c>)
 80011d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d8:	e9c1 2300 	strd	r2, r3, [r1]
			lastTime = HAL_GetTick();
 80011dc:	f001 fb5e 	bl	800289c <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <_Z11controlRollv+0x220>)
 80011e4:	6013      	str	r3, [r2, #0]
			output = Kp * error + Ki * errorIntegral + Kd * errorDerivative;
 80011e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <_Z11controlRollv+0x230>)
 80011e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f0:	f7ff fa0a 	bl	8000608 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4690      	mov	r8, r2
 80011fa:	4699      	mov	r9, r3
 80011fc:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <_Z11controlRollv+0x234>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	4b55      	ldr	r3, [pc, #340]	@ (8001358 <_Z11controlRollv+0x228>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4640      	mov	r0, r8
 8001212:	4649      	mov	r1, r9
 8001214:	f7ff f842 	bl	800029c <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4690      	mov	r8, r2
 800121e:	4699      	mov	r9, r3
 8001220:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <_Z11controlRollv+0x238>)
 8001222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122a:	f7ff f9ed 	bl	8000608 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7ff f831 	bl	800029c <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	e9c7 2300 	strd	r2, r3, [r7]
			double absOutput = (output < 0) ? -output : output;
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124e:	f7ff fc4d 	bl	8000aec <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <_Z11controlRollv+0x132>
 8001258:	683c      	ldr	r4, [r7, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001260:	e001      	b.n	8001266 <_Z11controlRollv+0x136>
 8001262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001266:	e9c7 4508 	strd	r4, r5, [r7, #32]
			if(absOutput > 100)
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <_Z11controlRollv+0x23c>)
 8001270:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001274:	f7ff fc58 	bl	8000b28 <__aeabi_dcmpgt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <_Z11controlRollv+0x158>
				absOutput = 100;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <_Z11controlRollv+0x23c>)
 8001284:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(output > 0 && (Motor_3.getDirection() != CCW))
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001294:	f7ff fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <_Z11controlRollv+0x17e>
 800129e:	4834      	ldr	r0, [pc, #208]	@ (8001370 <_Z11controlRollv+0x240>)
 80012a0:	f7ff ff38 	bl	8001114 <_ZN5Motor12getDirectionEv>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <_Z11controlRollv+0x17e>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <_Z11controlRollv+0x180>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <_Z11controlRollv+0x19e>
				Motor_3.changeBrakeState(enableBrake);
 80012b4:	2100      	movs	r1, #0
 80012b6:	482e      	ldr	r0, [pc, #184]	@ (8001370 <_Z11controlRollv+0x240>)
 80012b8:	f7ff fefc 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
				Motor_3.changeDirection(CCW);
 80012bc:	2100      	movs	r1, #0
 80012be:	482c      	ldr	r0, [pc, #176]	@ (8001370 <_Z11controlRollv+0x240>)
 80012c0:	f7ff fee0 	bl	8001084 <_ZN5Motor15changeDirectionEb>
				Motor_3.changeBrakeState(disableBrake);
 80012c4:	2101      	movs	r1, #1
 80012c6:	482a      	ldr	r0, [pc, #168]	@ (8001370 <_Z11controlRollv+0x240>)
 80012c8:	f7ff fef4 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
 80012cc:	e021      	b.n	8001312 <_Z11controlRollv+0x1e2>
			else if(output < 0 && (Motor_3.getDirection() != CW))
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012da:	f7ff fc07 	bl	8000aec <__aeabi_dcmplt>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <_Z11controlRollv+0x1c4>
 80012e4:	4822      	ldr	r0, [pc, #136]	@ (8001370 <_Z11controlRollv+0x240>)
 80012e6:	f7ff ff15 	bl	8001114 <_ZN5Motor12getDirectionEv>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d001      	beq.n	80012f4 <_Z11controlRollv+0x1c4>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <_Z11controlRollv+0x1c6>
 80012f4:	2300      	movs	r3, #0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <_Z11controlRollv+0x1e2>
				Motor_3.changeBrakeState(enableBrake);
 80012fa:	2100      	movs	r1, #0
 80012fc:	481c      	ldr	r0, [pc, #112]	@ (8001370 <_Z11controlRollv+0x240>)
 80012fe:	f7ff fed9 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
				Motor_3.changeDirection(CW);
 8001302:	2101      	movs	r1, #1
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <_Z11controlRollv+0x240>)
 8001306:	f7ff febd 	bl	8001084 <_ZN5Motor15changeDirectionEb>
				Motor_3.changeBrakeState(disableBrake);
 800130a:	2101      	movs	r1, #1
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <_Z11controlRollv+0x240>)
 800130e:	f7ff fed1 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
			Motor_3.changeSpeed(absOutput);
 8001312:	ed97 0b08 	vldr	d0, [r7, #32]
 8001316:	4816      	ldr	r0, [pc, #88]	@ (8001370 <_Z11controlRollv+0x240>)
 8001318:	f7ff fe56 	bl	8000fc8 <_ZN5Motor11changeSpeedEd>
		break;
 800131c:	e00c      	b.n	8001338 <_Z11controlRollv+0x208>
			error = 45 - filterRoll;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <_Z11controlRollv+0x218>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	4908      	ldr	r1, [pc, #32]	@ (800134c <_Z11controlRollv+0x21c>)
 800132a:	f7fe ffb5 	bl	8000298 <__aeabi_dsub>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 2306 	strd	r2, r3, [r7, #24]
		break;
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001342:	bf00      	nop
 8001344:	200004b9 	.word	0x200004b9
 8001348:	20000510 	.word	0x20000510
 800134c:	40468000 	.word	0x40468000
 8001350:	20000310 	.word	0x20000310
 8001354:	408f4000 	.word	0x408f4000
 8001358:	20000320 	.word	0x20000320
 800135c:	20000318 	.word	0x20000318
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000010 	.word	0x20000010
 800136c:	40590000 	.word	0x40590000
 8001370:	200004c0 	.word	0x200004c0

08001374 <_Z9hc05_initv>:
 **		  BT-MODULE INIT	     **
 **********************************
*/

void hc05_init()
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <_Z9hc05_initv+0x40>)
 800137c:	463c      	mov	r4, r7
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001388:	c407      	stmia	r4!, {r0, r1, r2}
 800138a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f7fe ff76 	bl	8000280 <strlen>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4639      	mov	r1, r7
 800139a:	2364      	movs	r3, #100	@ 0x64
 800139c:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <_Z9hc05_initv+0x44>)
 800139e:	f007 fe3b 	bl	8009018 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	4905      	ldr	r1, [pc, #20]	@ (80013bc <_Z9hc05_initv+0x48>)
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <_Z9hc05_initv+0x44>)
 80013a8:	f007 fec1 	bl	800912e <HAL_UART_Receive_IT>
}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	080110b0 	.word	0x080110b0
 80013b8:	20000470 	.word	0x20000470
 80013bc:	20000328 	.word	0x20000328

080013c0 <HAL_UART_RxCpltCallback>:
 **********************************
*/
extern double Kp, Ki, Kd;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a46      	ldr	r2, [pc, #280]	@ (80014e8 <HAL_UART_RxCpltCallback+0x128>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d17b      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x10a>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag_1D)
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <HAL_UART_RxCpltCallback+0x12c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b53      	cmp	r3, #83	@ 0x53
 80013d8:	d109      	bne.n	80013ee <HAL_UART_RxCpltCallback+0x2e>
 80013da:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <HAL_UART_RxCpltCallback+0x130>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag_1D = true;
 80013e8:	4b41      	ldr	r3, [pc, #260]	@ (80014f0 <HAL_UART_RxCpltCallback+0x130>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
		}

		switch(receivedBTData)
 80013ee:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <HAL_UART_RxCpltCallback+0x12c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3b61      	subs	r3, #97	@ 0x61
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d863      	bhi.n	80014c0 <HAL_UART_RxCpltCallback+0x100>
 80013f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001400 <HAL_UART_RxCpltCallback+0x40>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001419 	.word	0x08001419
 8001404:	08001435 	.word	0x08001435
 8001408:	08001451 	.word	0x08001451
 800140c:	0800146d 	.word	0x0800146d
 8001410:	08001489 	.word	0x08001489
 8001414:	080014a5 	.word	0x080014a5
		{
			case 'a':
				Kp += 0.1;
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_UART_RxCpltCallback+0x134>)
 800141a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141e:	a32e      	add	r3, pc, #184	@ (adr r3, 80014d8 <HAL_UART_RxCpltCallback+0x118>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe ff3a 	bl	800029c <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4931      	ldr	r1, [pc, #196]	@ (80014f4 <HAL_UART_RxCpltCallback+0x134>)
 800142e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001432:	e045      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x100>

			case 'b':
				Kp += 0.1;
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <HAL_UART_RxCpltCallback+0x134>)
 8001436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143a:	a327      	add	r3, pc, #156	@ (adr r3, 80014d8 <HAL_UART_RxCpltCallback+0x118>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7fe ff2c 	bl	800029c <__adddf3>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	492a      	ldr	r1, [pc, #168]	@ (80014f4 <HAL_UART_RxCpltCallback+0x134>)
 800144a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800144e:	e037      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x100>

			case 'c':
				Ki += 0.01;
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_UART_RxCpltCallback+0x138>)
 8001452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001456:	a322      	add	r3, pc, #136	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x120>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe ff1e 	bl	800029c <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4924      	ldr	r1, [pc, #144]	@ (80014f8 <HAL_UART_RxCpltCallback+0x138>)
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800146a:	e029      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x100>

			case 'd':
				Ki -= 0.01;
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <HAL_UART_RxCpltCallback+0x138>)
 800146e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001472:	a31b      	add	r3, pc, #108	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x120>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7fe ff0e 	bl	8000298 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	491d      	ldr	r1, [pc, #116]	@ (80014f8 <HAL_UART_RxCpltCallback+0x138>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001486:	e01b      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x100>

			case 'e':
				Kd += 0.01;
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <HAL_UART_RxCpltCallback+0x13c>)
 800148a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148e:	a314      	add	r3, pc, #80	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x120>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe ff02 	bl	800029c <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4917      	ldr	r1, [pc, #92]	@ (80014fc <HAL_UART_RxCpltCallback+0x13c>)
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80014a2:	e00d      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x100>

			case 'f':
				Kd -= 0.01;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_UART_RxCpltCallback+0x13c>)
 80014a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x120>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7fe fef2 	bl	8000298 <__aeabi_dsub>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4910      	ldr	r1, [pc, #64]	@ (80014fc <HAL_UART_RxCpltCallback+0x13c>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80014be:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 80014c0:	2201      	movs	r2, #1
 80014c2:	490a      	ldr	r1, [pc, #40]	@ (80014ec <HAL_UART_RxCpltCallback+0x12c>)
 80014c4:	480e      	ldr	r0, [pc, #56]	@ (8001500 <HAL_UART_RxCpltCallback+0x140>)
 80014c6:	f007 fe32 	bl	800912e <HAL_UART_Receive_IT>
	}
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fb99999 	.word	0x3fb99999
 80014e0:	47ae147b 	.word	0x47ae147b
 80014e4:	3f847ae1 	.word	0x3f847ae1
 80014e8:	40004400 	.word	0x40004400
 80014ec:	20000328 	.word	0x20000328
 80014f0:	200004b8 	.word	0x200004b8
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000470 	.word	0x20000470

08001504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800150c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800151c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <ITM_SendChar+0x2c>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <ITM_SendChar+0x2e>
 8001530:	2300      	movs	r3, #0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d010      	beq.n	8001558 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001536:	e000      	b.n	800153a <ITM_SendChar+0x36>
    {
      __NOP();
 8001538:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800153a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f4      	bne.n	8001538 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800154e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f001 f930 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f8a8 	bl	80016c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f000 fa84 	bl	8001a80 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001578:	f000 fa62 	bl	8001a40 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 800157c:	f00c f82c 	bl	800d5d8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001580:	f000 f912 	bl	80017a8 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001584:	f000 f944 	bl	8001810 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001588:	f000 fa2c 	bl	80019e4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 800158c:	f000 f9ce 	bl	800192c <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  //MPU-6050 Init
  mpu6050_init(false);
 8001590:	2000      	movs	r0, #0
 8001592:	f000 fb5d 	bl	8001c50 <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 8001596:	f7ff feed 	bl	8001374 <_Z9hc05_initv>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
  */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 800159a:	2200      	movs	r2, #0
 800159c:	2101      	movs	r1, #1
 800159e:	483f      	ldr	r0, [pc, #252]	@ (800169c <main+0x134>)
 80015a0:	f001 ffcc 	bl	800353c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	static uint32_t timeSaveBlink = HAL_GetTick();
 80015a4:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <main+0x138>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f3bf 8f5b 	dmb	ish
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d012      	beq.n	80015e4 <main+0x7c>
 80015be:	4838      	ldr	r0, [pc, #224]	@ (80016a0 <main+0x138>)
 80015c0:	f00c fcf4 	bl	800dfac <__cxa_guard_acquire>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <main+0x7c>
 80015d4:	f001 f962 	bl	800289c <HAL_GetTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a32      	ldr	r2, [pc, #200]	@ (80016a4 <main+0x13c>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4830      	ldr	r0, [pc, #192]	@ (80016a0 <main+0x138>)
 80015e0:	f00c fcf0 	bl	800dfc4 <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= 1000) // 1000 ms delay
 80015e4:	f001 f95a 	bl	800289c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <main+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015f4:	4293      	cmp	r3, r2
 80015f6:	bf8c      	ite	hi
 80015f8:	2301      	movhi	r3, #1
 80015fa:	2300      	movls	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <main+0xac>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001602:	2104      	movs	r1, #4
 8001604:	4828      	ldr	r0, [pc, #160]	@ (80016a8 <main+0x140>)
 8001606:	f001 ffb2 	bl	800356e <HAL_GPIO_TogglePin>

		timeSaveBlink = HAL_GetTick();
 800160a:	f001 f947 	bl	800289c <HAL_GetTick>
 800160e:	4603      	mov	r3, r0
 8001610:	4a24      	ldr	r2, [pc, #144]	@ (80016a4 <main+0x13c>)
 8001612:	6013      	str	r3, [r2, #0]
	}

	//Motor_3.testMotor();

	if (receivedStart_Flag_1D)
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <main+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0c3      	beq.n	80015a4 <main+0x3c>
	{
	    static uint32_t timeSaveBuzzer = 0;
	    static bool buzzerActive = false;

	    if (!buzzerActive)  // If the buzzer is not already on, start it
 800161c:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <main+0x148>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00c      	beq.n	8001644 <main+0xdc>
	    {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Turn on buzzer
 800162a:	2200      	movs	r2, #0
 800162c:	2104      	movs	r1, #4
 800162e:	481b      	ldr	r0, [pc, #108]	@ (800169c <main+0x134>)
 8001630:	f001 ff84 	bl	800353c <HAL_GPIO_WritePin>
	        timeSaveBuzzer = HAL_GetTick(); // Save the current time
 8001634:	f001 f932 	bl	800289c <HAL_GetTick>
 8001638:	4603      	mov	r3, r0
 800163a:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <main+0x14c>)
 800163c:	6013      	str	r3, [r2, #0]
	        buzzerActive = true;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <main+0x148>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
	    }

	    if (buzzerActive && (HAL_GetTick() - timeSaveBuzzer >= 500)) // 500 ms delay
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <main+0x148>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <main+0xfa>
 800164c:	f001 f926 	bl	800289c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <main+0x14c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800165c:	d301      	bcc.n	8001662 <main+0xfa>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <main+0xfc>
 8001662:	2300      	movs	r3, #0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d09d      	beq.n	80015a4 <main+0x3c>
	    {
	        printf("Start \n");
 8001668:	4813      	ldr	r0, [pc, #76]	@ (80016b8 <main+0x150>)
 800166a:	f00d fda3 	bl	800f1b4 <puts>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Turn off buzzer
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	480a      	ldr	r0, [pc, #40]	@ (800169c <main+0x134>)
 8001674:	f001 ff62 	bl	800353c <HAL_GPIO_WritePin>
	        buzzerActive = false;  // Reset buzzer state
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <main+0x148>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	        balanceMode = oneDimensional;
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <main+0x154>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
	        Motor_3.changeMotorState(enableMotor);
 8001684:	2100      	movs	r1, #0
 8001686:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <main+0x158>)
 8001688:	f7ff fd2c 	bl	80010e4 <_ZN5Motor16changeMotorStateEb>
	        Motor_3.changeBrakeState(disableBrake);
 800168c:	2101      	movs	r1, #1
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <main+0x158>)
 8001690:	f7ff fd10 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
	        receivedStart_Flag_1D = false; // Reset the Start Flag
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <main+0x144>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800169a:	e783      	b.n	80015a4 <main+0x3c>
 800169c:	40020800 	.word	0x40020800
 80016a0:	200004ec 	.word	0x200004ec
 80016a4:	200004e8 	.word	0x200004e8
 80016a8:	40020400 	.word	0x40020400
 80016ac:	200004b8 	.word	0x200004b8
 80016b0:	200004f4 	.word	0x200004f4
 80016b4:	200004f0 	.word	0x200004f0
 80016b8:	080110d0 	.word	0x080110d0
 80016bc:	200004b9 	.word	0x200004b9
 80016c0:	200004c0 	.word	0x200004c0

080016c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	@ 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00d fe4e 	bl	800f374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <_Z18SystemClock_Configv+0xdc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <_Z18SystemClock_Configv+0xdc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <_Z18SystemClock_Configv+0xdc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <_Z18SystemClock_Configv+0xe0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a25      	ldr	r2, [pc, #148]	@ (80017a4 <_Z18SystemClock_Configv+0xe0>)
 800170e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <_Z18SystemClock_Configv+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001734:	2310      	movs	r3, #16
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4618      	mov	r0, r3
 800174a:	f005 ffc7 	bl	80076dc <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf14      	ite	ne
 8001754:	2301      	movne	r3, #1
 8001756:	2300      	moveq	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800175e:	f000 fa43 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f006 fa25 	bl	8007bcc <HAL_RCC_ClockConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001792:	f000 fa29 	bl	8001be8 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	@ 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017ae:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <_ZL12MX_I2C1_Initv+0x60>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017b4:	4a15      	ldr	r2, [pc, #84]	@ (800180c <_ZL12MX_I2C1_Initv+0x64>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <_ZL12MX_I2C1_Initv+0x5c>)
 80017e6:	f001 fedd 	bl	80035a4 <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80017fa:	f000 f9f5 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000032c 	.word	0x2000032c
 8001808:	40005400 	.word	0x40005400
 800180c:	000186a0 	.word	0x000186a0

08001810 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	@ 0x38
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001840:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001842:	4a39      	ldr	r2, [pc, #228]	@ (8001928 <_ZL12MX_TIM3_Initv+0x118>)
 8001844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001848:	2207      	movs	r2, #7
 800184a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001852:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001854:	2263      	movs	r2, #99	@ 0x63
 8001856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001864:	482f      	ldr	r0, [pc, #188]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001866:	f006 fbcf 	bl	8008008 <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 800187a:	f000 f9b5 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001888:	4619      	mov	r1, r3
 800188a:	4826      	ldr	r0, [pc, #152]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 800188c:	f006 ff2a 	bl	80086e4 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 80018a0:	f000 f9a2 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a4:	481f      	ldr	r0, [pc, #124]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 80018a6:	f006 fc61 	bl	800816c <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80018ba:	f000 f995 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	4619      	mov	r1, r3
 80018cc:	4815      	ldr	r0, [pc, #84]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 80018ce:	f007 fad1 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80018e2:	f000 f981 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	@ 0x60
 80018e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 80018fe:	f006 fe2f 	bl	8008560 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8001912:	f000 f969 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001916:	4803      	ldr	r0, [pc, #12]	@ (8001924 <_ZL12MX_TIM3_Initv+0x114>)
 8001918:	f000 fd7e 	bl	8002418 <HAL_TIM_MspPostInit>

}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	@ 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000380 	.word	0x20000380
 8001928:	40000400 	.word	0x40000400

0800192c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <_ZL12MX_TIM4_Initv+0xb4>)
 800194c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 8001950:	220f      	movs	r2, #15
 8001952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 800195c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196e:	481b      	ldr	r0, [pc, #108]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 8001970:	f006 fb4a 	bl	8008008 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001984:	f000 f930 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 8001996:	f006 fea5 	bl	80086e4 <HAL_TIM_ConfigClockSource>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80019aa:	f000 f91d 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4808      	ldr	r0, [pc, #32]	@ (80019dc <_ZL12MX_TIM4_Initv+0xb0>)
 80019bc:	f007 fa5a 	bl	8008e74 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80019d0:	f000 f90a 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200003c8 	.word	0x200003c8
 80019e0:	40000800 	.word	0x40000800

080019e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019ea:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_ZL19MX_USART2_UART_Initv+0x58>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a1c:	f007 faac 	bl	8008f78 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001a30:	f000 f8da 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000470 	.word	0x20000470
 8001a3c:	40004400 	.word	0x40004400

08001a40 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <_ZL11MX_DMA_Initv+0x3c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <_ZL11MX_DMA_Initv+0x3c>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <_ZL11MX_DMA_Initv+0x3c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	200f      	movs	r0, #15
 8001a68:	f001 f823 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a6c:	200f      	movs	r0, #15
 8001a6e:	f001 f83c 	bl	8002aea <HAL_NVIC_EnableIRQ>

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a39      	ldr	r2, [pc, #228]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b37      	ldr	r3, [pc, #220]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b33      	ldr	r3, [pc, #204]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a32      	ldr	r2, [pc, #200]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <_ZL12MX_GPIO_Initv+0x120>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2107      	movs	r1, #7
 8001b0a:	4826      	ldr	r0, [pc, #152]	@ (8001ba4 <_ZL12MX_GPIO_Initv+0x124>)
 8001b0c:	f001 fd16 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	4824      	ldr	r0, [pc, #144]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x128>)
 8001b16:	f001 fd11 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 7149 	mov.w	r1, #804	@ 0x324
 8001b20:	4822      	ldr	r0, [pc, #136]	@ (8001bac <_ZL12MX_GPIO_Initv+0x12c>)
 8001b22:	f001 fd0b 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b26:	2307      	movs	r3, #7
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4819      	ldr	r0, [pc, #100]	@ (8001ba4 <_ZL12MX_GPIO_Initv+0x124>)
 8001b3e:	f001 fb79 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b42:	2310      	movs	r3, #16
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4813      	ldr	r0, [pc, #76]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x128>)
 8001b5a:	f001 fb6b 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001b5e:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <_ZL12MX_GPIO_Initv+0x12c>)
 8001b78:	f001 fb5c 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <_ZL12MX_GPIO_Initv+0x124>)
 8001b94:	f001 fb4e 	bl	8003234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400

08001bb0 <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e009      	b.n	8001bd6 <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	60ba      	str	r2, [r7, #8]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc9a 	bl	8001504 <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf1      	blt.n	8001bc2 <_write+0x12>
		}
		return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
	}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <Error_Handler+0x8>

08001bf4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d112      	bne.n	8001c2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10d      	bne.n	8001c2a <_Z41__static_initialization_and_destruction_0ii+0x36>
Motor Motor_3(&htim3, TIM_CHANNEL_1, GPIOB, GPIO_PIN_9, GPIO_PIN_5, GPIO_PIN_8);
 8001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	2320      	movs	r3, #32
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	4905      	ldr	r1, [pc, #20]	@ (8001c38 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001c26:	f7ff f99d 	bl	8000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020400 	.word	0x40020400
 8001c38:	20000380 	.word	0x20000380
 8001c3c:	200004c0 	.word	0x200004c0

08001c40 <_GLOBAL__sub_I_hi2c1>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff ffd3 	bl	8001bf4 <_Z41__static_initialization_and_destruction_0ii>
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_Z12mpu6050_initb>:
 **		  IMU-INITIALIZATION	     **
 **********************************
*/

void mpu6050_init(bool interruptEnable)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 8001c5a:	2364      	movs	r3, #100	@ 0x64
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	21d0      	movs	r1, #208	@ 0xd0
 8001c60:	4861      	ldr	r0, [pc, #388]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001c62:	f002 f925 	bl	8003eb0 <HAL_I2C_IsDeviceReady>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 8001c70:	485e      	ldr	r0, [pc, #376]	@ (8001dec <_Z12mpu6050_initb+0x19c>)
 8001c72:	f00d fa9f 	bl	800f1b4 <puts>
 8001c76:	e002      	b.n	8001c7e <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 8001c78:	485d      	ldr	r0, [pc, #372]	@ (8001df0 <_Z12mpu6050_initb+0x1a0>)
 8001c7a:	f00d fa9b 	bl	800f1b4 <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001c82:	2364      	movs	r3, #100	@ 0x64
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	2301      	movs	r3, #1
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	f107 030e 	add.w	r3, r7, #14
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	226b      	movs	r2, #107	@ 0x6b
 8001c94:	21d0      	movs	r1, #208	@ 0xd0
 8001c96:	4854      	ldr	r0, [pc, #336]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001c98:	f001 fdde 	bl	8003858 <HAL_I2C_Mem_Write>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d110      	bne.n	8001cc8 <_Z12mpu6050_initb+0x78>
	{
		printf("Exited sleep mode \n");
 8001ca6:	4853      	ldr	r0, [pc, #332]	@ (8001df4 <_Z12mpu6050_initb+0x1a4>)
 8001ca8:	f00d fa84 	bl	800f1b4 <puts>
		if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8001cac:	4852      	ldr	r0, [pc, #328]	@ (8001df8 <_Z12mpu6050_initb+0x1a8>)
 8001cae:	f006 f9fb 	bl	80080a8 <HAL_TIM_Base_Start_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <_Z12mpu6050_initb+0x7e>
		{
			// Starting Error
			Error_Handler();
 8001cc2:	f7ff ff91 	bl	8001be8 <Error_Handler>
 8001cc6:	e002      	b.n	8001cce <_Z12mpu6050_initb+0x7e>
		}
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 8001cc8:	484c      	ldr	r0, [pc, #304]	@ (8001dfc <_Z12mpu6050_initb+0x1ac>)
 8001cca:	f00d fa73 	bl	800f1b4 <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 8001cce:	2364      	movs	r3, #100	@ 0x64
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f107 030e 	add.w	r3, r7, #14
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	221a      	movs	r2, #26
 8001ce0:	21d1      	movs	r1, #209	@ 0xd1
 8001ce2:	4841      	ldr	r0, [pc, #260]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001ce4:	f001 feb2 	bl	8003a4c <HAL_I2C_Mem_Read>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
 8001cee:	f023 0307 	bic.w	r3, r3, #7
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001cf6:	2364      	movs	r3, #100	@ 0x64
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f107 030e 	add.w	r3, r7, #14
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	221a      	movs	r2, #26
 8001d08:	21d0      	movs	r1, #208	@ 0xd0
 8001d0a:	4837      	ldr	r0, [pc, #220]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001d0c:	f001 fda4 	bl	8003858 <HAL_I2C_Mem_Write>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <_Z12mpu6050_initb+0xd4>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4838      	ldr	r0, [pc, #224]	@ (8001e00 <_Z12mpu6050_initb+0x1b0>)
 8001d1e:	f00d f9e1 	bl	800f0e4 <iprintf>
 8001d22:	e002      	b.n	8001d2a <_Z12mpu6050_initb+0xda>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 8001d24:	4837      	ldr	r0, [pc, #220]	@ (8001e04 <_Z12mpu6050_initb+0x1b4>)
 8001d26:	f00d fa45 	bl	800f1b4 <puts>
	}

	//Interrupt-Enable
	if(interruptEnable)
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d056      	beq.n	8001dde <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 8001d30:	2364      	movs	r3, #100	@ 0x64
 8001d32:	9302      	str	r3, [sp, #8]
 8001d34:	2301      	movs	r3, #1
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	f107 030e 	add.w	r3, r7, #14
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2237      	movs	r2, #55	@ 0x37
 8001d42:	21d1      	movs	r1, #209	@ 0xd1
 8001d44:	4828      	ldr	r0, [pc, #160]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001d46:	f001 fe81 	bl	8003a4c <HAL_I2C_Mem_Read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	f107 030e 	add.w	r3, r7, #14
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	2237      	movs	r2, #55	@ 0x37
 8001d6a:	21d0      	movs	r1, #208	@ 0xd0
 8001d6c:	481e      	ldr	r0, [pc, #120]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001d6e:	f001 fd73 	bl	8003858 <HAL_I2C_Mem_Write>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 8001d7c:	4822      	ldr	r0, [pc, #136]	@ (8001e08 <_Z12mpu6050_initb+0x1b8>)
 8001d7e:	f00d fa19 	bl	800f1b4 <puts>
 8001d82:	e002      	b.n	8001d8a <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 8001d84:	4821      	ldr	r0, [pc, #132]	@ (8001e0c <_Z12mpu6050_initb+0x1bc>)
 8001d86:	f00d fa15 	bl	800f1b4 <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 8001d8a:	2364      	movs	r3, #100	@ 0x64
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	f107 030e 	add.w	r3, r7, #14
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2238      	movs	r2, #56	@ 0x38
 8001d9c:	21d1      	movs	r1, #209	@ 0xd1
 8001d9e:	4812      	ldr	r0, [pc, #72]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001da0:	f001 fe54 	bl	8003a4c <HAL_I2C_Mem_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001dac:	2364      	movs	r3, #100	@ 0x64
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2301      	movs	r3, #1
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	f107 030e 	add.w	r3, r7, #14
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	2238      	movs	r2, #56	@ 0x38
 8001dbe:	21d0      	movs	r1, #208	@ 0xd0
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <_Z12mpu6050_initb+0x198>)
 8001dc2:	f001 fd49 	bl	8003858 <HAL_I2C_Mem_Write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d103      	bne.n	8001dd8 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 8001dd0:	480f      	ldr	r0, [pc, #60]	@ (8001e10 <_Z12mpu6050_initb+0x1c0>)
 8001dd2:	f00d f9ef 	bl	800f1b4 <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8001dd6:	e002      	b.n	8001dde <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8001dd8:	480e      	ldr	r0, [pc, #56]	@ (8001e14 <_Z12mpu6050_initb+0x1c4>)
 8001dda:	f00d f9eb 	bl	800f1b4 <puts>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000032c 	.word	0x2000032c
 8001dec:	080110d8 	.word	0x080110d8
 8001df0:	080110f0 	.word	0x080110f0
 8001df4:	0801110c 	.word	0x0801110c
 8001df8:	200003c8 	.word	0x200003c8
 8001dfc:	08011120 	.word	0x08011120
 8001e00:	0801113c 	.word	0x0801113c
 8001e04:	08011160 	.word	0x08011160
 8001e08:	0801118c 	.word	0x0801118c
 8001e0c:	080111b8 	.word	0x080111b8
 8001e10:	080111d4 	.word	0x080111d4
 8001e14:	080111f4 	.word	0x080111f4

08001e18 <_Z16mpu6050_readDatav>:
 **		  READ IMU-SENSOR	     **
 **********************************
*/

void mpu6050_readData()
{
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b098      	sub	sp, #96	@ 0x60
 8001e1e:	af04      	add	r7, sp, #16
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001e20:	48b9      	ldr	r0, [pc, #740]	@ (8002108 <_Z16mpu6050_readDatav+0x2f0>)
 8001e22:	f002 fbcd 	bl	80045c0 <HAL_I2C_GetState>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 81e0 	beq.w	80021f8 <_Z16mpu6050_readDatav+0x3e0>
	{
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14, 100);
 8001e38:	2364      	movs	r3, #100	@ 0x64
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	230e      	movs	r3, #14
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	4bb2      	ldr	r3, [pc, #712]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	223b      	movs	r2, #59	@ 0x3b
 8001e48:	21d1      	movs	r1, #209	@ 0xd1
 8001e4a:	48af      	ldr	r0, [pc, #700]	@ (8002108 <_Z16mpu6050_readDatav+0x2f0>)
 8001e4c:	f001 fdfe 	bl	8003a4c <HAL_I2C_Mem_Read>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(ret == HAL_OK)
 8001e56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 81cc 	bne.w	80021f8 <_Z16mpu6050_readDatav+0x3e0>
			double accX, accY, accZ, gyroX, gyroY, gyroZ, dt, accRoll, accPitch;
			static double gyroAngleX = 0.0, gyroAngleY = 0.0;
			static uint32_t currentTime, previousTime;

			//Accelerometer Data (Registers 59 to 64)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2110      	movs	r1, #16
 8001e64:	48aa      	ldr	r0, [pc, #680]	@ (8002110 <_Z16mpu6050_readDatav+0x2f8>)
 8001e66:	f001 fb69 	bl	800353c <HAL_GPIO_WritePin>
			accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 8001e6a:	4ba8      	ldr	r3, [pc, #672]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	4ba6      	ldr	r3, [pc, #664]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb59 	bl	8000534 <__aeabi_i2d>
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4ba3      	ldr	r3, [pc, #652]	@ (8002114 <_Z16mpu6050_readDatav+0x2fc>)
 8001e88:	f7fe fce8 	bl	800085c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			//printf("Accel-X [g]: %f \n", accX);

			accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 8001e94:	4b9d      	ldr	r3, [pc, #628]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b9b      	ldr	r3, [pc, #620]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb44 	bl	8000534 <__aeabi_i2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b98      	ldr	r3, [pc, #608]	@ (8002114 <_Z16mpu6050_readDatav+0x2fc>)
 8001eb2:	f7fe fcd3 	bl	800085c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			//printf("Accel-Y [g]: %f \n", accY);

			accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 8001ebe:	4b93      	ldr	r3, [pc, #588]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	4b91      	ldr	r3, [pc, #580]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8001ec8:	795b      	ldrb	r3, [r3, #5]
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb2f 	bl	8000534 <__aeabi_i2d>
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	4b8e      	ldr	r3, [pc, #568]	@ (8002114 <_Z16mpu6050_readDatav+0x2fc>)
 8001edc:	f7fe fcbe 	bl	800085c <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			//printf("Accel-Z [g]: %f \n", accZ);

			//Roll and Pitch Angles from Accelerometer
			accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001ee8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eec:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ef4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001ef8:	f7fe fb86 	bl	8000608 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4690      	mov	r8, r2
 8001f02:	4699      	mov	r9, r3
 8001f04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f0c:	f7fe fb7c 	bl	8000608 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9c0 	bl	800029c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b17 	vmov	d7, r2, r3
 8001f24:	eeb0 0a47 	vmov.f32	s0, s14
 8001f28:	eef0 0a67 	vmov.f32	s1, s15
 8001f2c:	f00c f84f 	bl	800dfce <sqrt>
 8001f30:	eeb0 7a40 	vmov.f32	s14, s0
 8001f34:	eef0 7a60 	vmov.f32	s15, s1
 8001f38:	eeb0 1a47 	vmov.f32	s2, s14
 8001f3c:	eef0 1a67 	vmov.f32	s3, s15
 8001f40:	ec45 4b10 	vmov	d0, r4, r5
 8001f44:	f00c f841 	bl	800dfca <atan2>
 8001f48:	ec51 0b10 	vmov	r0, r1, d0
 8001f4c:	a36a      	add	r3, pc, #424	@ (adr r3, 80020f8 <_Z16mpu6050_readDatav+0x2e0>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fb59 	bl	8000608 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			/*estimation that works only if sensor is level (small pitch angle)
			accRoll = atan2(accY, accZ) * 57.3;
			printf("Roll1: %f \n", accRoll);
			*/
			accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f66:	f7fe fb4f 	bl	8000608 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe f989 	bl	800029c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	ec43 2b17 	vmov	d7, r2, r3
 8001f92:	eeb0 0a47 	vmov.f32	s0, s14
 8001f96:	eef0 0a67 	vmov.f32	s1, s15
 8001f9a:	f00c f818 	bl	800dfce <sqrt>
 8001f9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001fa2:	eef0 7a60 	vmov.f32	s15, s1
 8001fa6:	eeb0 1a47 	vmov.f32	s2, s14
 8001faa:	eef0 1a67 	vmov.f32	s3, s15
 8001fae:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001fb2:	f00c f80a 	bl	800dfca <atan2>
 8001fb6:	ec51 0b10 	vmov	r0, r1, d0
 8001fba:	a34f      	add	r3, pc, #316	@ (adr r3, 80020f8 <_Z16mpu6050_readDatav+0x2e0>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fb22 	bl	8000608 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	e9c7 2308 	strd	r2, r3, [r7, #32]


			//Temperature Data (Registers 65 and 66)

			//Gyroscope Data (Registers 67 to 72)
			currentTime = HAL_GetTick();
 8001fcc:	f000 fc66 	bl	800289c <HAL_GetTick>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a51      	ldr	r2, [pc, #324]	@ (8002118 <_Z16mpu6050_readDatav+0x300>)
 8001fd4:	6013      	str	r3, [r2, #0]
			dt = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8001fd6:	4b50      	ldr	r3, [pc, #320]	@ (8002118 <_Z16mpu6050_readDatav+0x300>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b50      	ldr	r3, [pc, #320]	@ (800211c <_Z16mpu6050_readDatav+0x304>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa97 	bl	8000514 <__aeabi_ui2d>
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <_Z16mpu6050_readDatav+0x308>)
 8001fec:	f7fe fc36 	bl	800085c <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			previousTime = currentTime;
 8001ff8:	4b47      	ldr	r3, [pc, #284]	@ (8002118 <_Z16mpu6050_readDatav+0x300>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a47      	ldr	r2, [pc, #284]	@ (800211c <_Z16mpu6050_readDatav+0x304>)
 8001ffe:	6013      	str	r3, [r2, #0]

			gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8002000:	4b42      	ldr	r3, [pc, #264]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8002002:	7a1b      	ldrb	r3, [r3, #8]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 800200a:	7a5b      	ldrb	r3, [r3, #9]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa8e 	bl	8000534 <__aeabi_i2d>
 8002018:	a339      	add	r3, pc, #228	@ (adr r3, 8002100 <_Z16mpu6050_readDatav+0x2e8>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fc1d 	bl	800085c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	e9c7 2304 	strd	r2, r3, [r7, #16]
			//printf("Gyro-X [°/s]: %f \n", gyroX);

			gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 800202a:	4b38      	ldr	r3, [pc, #224]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 800202c:	7a9b      	ldrb	r3, [r3, #10]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	4b36      	ldr	r3, [pc, #216]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8002034:	7adb      	ldrb	r3, [r3, #11]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21b      	sxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa79 	bl	8000534 <__aeabi_i2d>
 8002042:	a32f      	add	r3, pc, #188	@ (adr r3, 8002100 <_Z16mpu6050_readDatav+0x2e8>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fc08 	bl	800085c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	e9c7 2302 	strd	r2, r3, [r7, #8]
			//printf("Gyro-Y [°/s]: %f \n", gyroY);

			gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 8002054:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <_Z16mpu6050_readDatav+0x2f4>)
 800205e:	7b5b      	ldrb	r3, [r3, #13]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa64 	bl	8000534 <__aeabi_i2d>
 800206c:	a324      	add	r3, pc, #144	@ (adr r3, 8002100 <_Z16mpu6050_readDatav+0x2e8>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fbf3 	bl	800085c <__aeabi_ddiv>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9c7 2300 	strd	r2, r3, [r7]
			//printf("Gyro-Z [°/s]: %f \n", gyroZ);

			//Angles and yaw from Gyroscope
			gyroAngleX += gyroX * dt;
 800207e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002086:	f7fe fabf 	bl	8000608 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <_Z16mpu6050_readDatav+0x30c>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe f900 	bl	800029c <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4920      	ldr	r1, [pc, #128]	@ (8002124 <_Z16mpu6050_readDatav+0x30c>)
 80020a2:	e9c1 2300 	strd	r2, r3, [r1]
			gyroAngleY += gyroY * dt;
 80020a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ae:	f7fe faab 	bl	8000608 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <_Z16mpu6050_readDatav+0x310>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe f8ec 	bl	800029c <__adddf3>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4917      	ldr	r1, [pc, #92]	@ (8002128 <_Z16mpu6050_readDatav+0x310>)
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
			gyroYaw += gyroZ * dt;
 80020ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d6:	f7fe fa97 	bl	8000608 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <_Z16mpu6050_readDatav+0x314>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe f8d8 	bl	800029c <__adddf3>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	e01e      	b.n	8002130 <_Z16mpu6050_readDatav+0x318>
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	c63f1412 	.word	0xc63f1412
 80020fc:	404ca5dc 	.word	0x404ca5dc
 8002100:	00000000 	.word	0x00000000
 8002104:	40606000 	.word	0x40606000
 8002108:	2000032c 	.word	0x2000032c
 800210c:	200004f8 	.word	0x200004f8
 8002110:	40020000 	.word	0x40020000
 8002114:	40d00000 	.word	0x40d00000
 8002118:	20000530 	.word	0x20000530
 800211c:	20000534 	.word	0x20000534
 8002120:	408f4000 	.word	0x408f4000
 8002124:	20000520 	.word	0x20000520
 8002128:	20000528 	.word	0x20000528
 800212c:	20000508 	.word	0x20000508
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <_Z16mpu6050_readDatav+0x400>)
 8002132:	e9c1 2300 	strd	r2, r3, [r1]

			//Complementary Filter
			filterRoll = GYRO_FILTER_WEIGHT * (filterRoll + gyroX * dt) + (1 - GYRO_FILTER_WEIGHT) * accRoll;
 8002136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800213e:	f7fe fa63 	bl	8000608 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	4b34      	ldr	r3, [pc, #208]	@ (800221c <_Z16mpu6050_readDatav+0x404>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe f8a4 	bl	800029c <__adddf3>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	a32a      	add	r3, pc, #168	@ (adr r3, 8002208 <_Z16mpu6050_readDatav+0x3f0>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fa51 	bl	8000608 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4614      	mov	r4, r2
 800216c:	461d      	mov	r5, r3
 800216e:	a328      	add	r3, pc, #160	@ (adr r3, 8002210 <_Z16mpu6050_readDatav+0x3f8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002178:	f7fe fa46 	bl	8000608 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f88a 	bl	800029c <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4923      	ldr	r1, [pc, #140]	@ (800221c <_Z16mpu6050_readDatav+0x404>)
 800218e:	e9c1 2300 	strd	r2, r3, [r1]
			filterPitch = GYRO_FILTER_WEIGHT * (filterPitch + gyroY * dt) + (1 - GYRO_FILTER_WEIGHT) * accPitch;
 8002192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219a:	f7fe fa35 	bl	8000608 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <_Z16mpu6050_readDatav+0x408>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe f876 	bl	800029c <__adddf3>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	a313      	add	r3, pc, #76	@ (adr r3, 8002208 <_Z16mpu6050_readDatav+0x3f0>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe fa23 	bl	8000608 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4614      	mov	r4, r2
 80021c8:	461d      	mov	r5, r3
 80021ca:	a311      	add	r3, pc, #68	@ (adr r3, 8002210 <_Z16mpu6050_readDatav+0x3f8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021d4:	f7fe fa18 	bl	8000608 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4620      	mov	r0, r4
 80021de:	4629      	mov	r1, r5
 80021e0:	f7fe f85c 	bl	800029c <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	490d      	ldr	r1, [pc, #52]	@ (8002220 <_Z16mpu6050_readDatav+0x408>)
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]

			//printf("Roll: %f \n", filterRoll);
			//printf("Pitch: %f \n", filterPitch);
			//printf("Yaw: %f \n", gyroYaw);

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2110      	movs	r1, #16
 80021f2:	480c      	ldr	r0, [pc, #48]	@ (8002224 <_Z16mpu6050_readDatav+0x40c>)
 80021f4:	f001 f9a2 	bl	800353c <HAL_GPIO_WritePin>
		}
	}
}
 80021f8:	bf00      	nop
 80021fa:	3750      	adds	r7, #80	@ 0x50
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	7ae147ae 	.word	0x7ae147ae
 800220c:	3fefae14 	.word	0x3fefae14
 8002210:	47ae1480 	.word	0x47ae1480
 8002214:	3f847ae1 	.word	0x3f847ae1
 8002218:	20000508 	.word	0x20000508
 800221c:	20000510 	.word	0x20000510
 8002220:	20000518 	.word	0x20000518
 8002224:	40020000 	.word	0x40020000

08002228 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_MspInit+0x4c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	@ 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a21      	ldr	r2, [pc, #132]	@ (800231c <HAL_I2C_MspInit+0xa4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d13b      	bne.n	8002312 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b6:	23c0      	movs	r3, #192	@ 0xc0
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c6:	2304      	movs	r3, #4
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4814      	ldr	r0, [pc, #80]	@ (8002324 <HAL_I2C_MspInit+0xac>)
 80022d2:	f000 ffaf 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_I2C_MspInit+0xa8>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	201f      	movs	r0, #31
 80022f8:	f000 fbdb 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022fc:	201f      	movs	r0, #31
 80022fe:	f000 fbf4 	bl	8002aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2020      	movs	r0, #32
 8002308:	f000 fbd3 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800230c:	2020      	movs	r0, #32
 800230e:	f000 fbec 	bl	8002aea <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	@ 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40005400 	.word	0x40005400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020400 	.word	0x40020400

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a33      	ldr	r2, [pc, #204]	@ (8002404 <HAL_TIM_Base_MspInit+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d144      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b32      	ldr	r3, [pc, #200]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002356:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002358:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <HAL_TIM_Base_MspInit+0xe8>)
 800235a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800235e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002362:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002366:	2240      	movs	r2, #64	@ 0x40
 8002368:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002370:	4b26      	ldr	r3, [pc, #152]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002376:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800237a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800237e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002386:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002388:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800238e:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800239a:	481c      	ldr	r0, [pc, #112]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 800239c:	f000 fbc0 	bl	8002b20 <HAL_DMA_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023a6:	f7ff fc1f 	bl	8001be8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a17      	ldr	r2, [pc, #92]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80023b0:	4a16      	ldr	r2, [pc, #88]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a14      	ldr	r2, [pc, #80]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80023bc:	4a13      	ldr	r2, [pc, #76]	@ (800240c <HAL_TIM_Base_MspInit+0xe4>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023c2:	e01a      	b.n	80023fa <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <HAL_TIM_Base_MspInit+0xec>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d115      	bne.n	80023fa <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_TIM_Base_MspInit+0xe0>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	201e      	movs	r0, #30
 80023f0:	f000 fb5f 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023f4:	201e      	movs	r0, #30
 80023f6:	f000 fb78 	bl	8002aea <HAL_NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40000400 	.word	0x40000400
 8002408:	40023800 	.word	0x40023800
 800240c:	20000410 	.word	0x20000410
 8002410:	40026070 	.word	0x40026070
 8002414:	40000800 	.word	0x40000800

08002418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <HAL_TIM_MspPostInit+0x68>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11d      	bne.n	8002476 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_TIM_MspPostInit+0x6c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a10      	ldr	r2, [pc, #64]	@ (8002484 <HAL_TIM_MspPostInit+0x6c>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_TIM_MspPostInit+0x6c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002456:	2310      	movs	r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002466:	2302      	movs	r3, #2
 8002468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	@ (8002488 <HAL_TIM_MspPostInit+0x70>)
 8002472:	f000 fedf 	bl	8003234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40000400 	.word	0x40000400
 8002484:	40023800 	.word	0x40023800
 8002488:	40020400 	.word	0x40020400

0800248c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	@ 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_UART_MspInit+0x94>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d133      	bne.n	8002516 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_UART_MspInit+0x98>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024e6:	230c      	movs	r3, #12
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f6:	2307      	movs	r3, #7
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4809      	ldr	r0, [pc, #36]	@ (8002528 <HAL_UART_MspInit+0x9c>)
 8002502:	f000 fe97 	bl	8003234 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2026      	movs	r0, #38	@ 0x26
 800250c:	f000 fad1 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002510:	2026      	movs	r0, #38	@ 0x26
 8002512:	f000 faea 	bl	8002aea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40004400 	.word	0x40004400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000

0800252c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <NMI_Handler+0x4>

08002534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <MemManage_Handler+0x4>

08002544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <UsageFault_Handler+0x4>

08002554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002582:	f000 f977 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <DMA1_Stream4_IRQHandler+0x10>)
 8002592:	f000 fc05 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000410 	.word	0x20000410

080025a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <TIM4_IRQHandler+0x10>)
 80025a6:	f005 feeb 	bl	8008380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200003c8 	.word	0x200003c8

080025b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <I2C1_EV_IRQHandler+0x10>)
 80025ba:	f001 fda7 	bl	800410c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000032c 	.word	0x2000032c

080025c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025cc:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <I2C1_ER_IRQHandler+0x10>)
 80025ce:	f001 fef0 	bl	80043b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000032c 	.word	0x2000032c

080025dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <USART2_IRQHandler+0x10>)
 80025e2:	f006 fdc9 	bl	8009178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000470 	.word	0x20000470

080025f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <OTG_FS_IRQHandler+0x10>)
 80025f6:	f003 ff62 	bl	80064be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20001a20 	.word	0x20001a20

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261e:	f00c fefb 	bl	800f418 <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <_exit+0x12>

0800264a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00a      	b.n	8002672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265c:	f3af 8000 	nop.w
 8002660:	4601      	mov	r1, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf0      	blt.n	800265c <_read+0x12>
  }

  return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ac:	605a      	str	r2, [r3, #4]
  return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_isatty>:

int _isatty(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f00c fe7c 	bl	800f418 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20020000 	.word	0x20020000
 800274c:	00000400 	.word	0x00000400
 8002750:	20000538 	.word	0x20000538
 8002754:	20002270 	.word	0x20002270

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <SystemInit+0x20>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	4a05      	ldr	r2, [pc, #20]	@ (8002778 <SystemInit+0x20>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002780:	f7ff ffea 	bl	8002758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002784:	480c      	ldr	r0, [pc, #48]	@ (80027b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002786:	490d      	ldr	r1, [pc, #52]	@ (80027bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002788:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800279c:	4c0a      	ldr	r4, [pc, #40]	@ (80027c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027aa:	f00c fe3b 	bl	800f424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ae:	f7fe fedb 	bl	8001568 <main>
  bx  lr    
 80027b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80027c0:	08011674 	.word	0x08011674
  ldr r2, =_sbss
 80027c4:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80027c8:	20002270 	.word	0x20002270

080027cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC_IRQHandler>
	...

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_Init+0x40>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <HAL_Init+0x40>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_Init+0x40>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 f94f 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	200f      	movs	r0, #15
 8002800:	f000 f808 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002804:	f7ff fd10 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <HAL_InitTick+0x54>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_InitTick+0x58>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f967 	bl	8002b06 <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f000 f92f 	bl	8002ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	@ (8002870 <HAL_InitTick+0x5c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000018 	.word	0x20000018
 800286c:	20000020 	.word	0x20000020
 8002870:	2000001c 	.word	0x2000001c

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000020 	.word	0x20000020
 8002898:	2000053c 	.word	0x2000053c

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2000053c 	.word	0x2000053c

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000020 	.word	0x20000020

080028fc <__NVIC_SetPriorityGrouping>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	@ (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	@ (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	@ (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	@ 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Config>:
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a68:	d301      	bcc.n	8002a6e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <SysTick_Config+0x40>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a76:	210f      	movs	r1, #15
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f7ff ff8e 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <SysTick_Config+0x40>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <SysTick_Config+0x40>)
 8002a88:	2207      	movs	r2, #7
 8002a8a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	e000e010 	.word	0xe000e010

08002a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff29 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac4:	f7ff ff3e 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff8e 	bl	80029f0 <NVIC_EncodePriority>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5d 	bl	800299c <__NVIC_SetPriority>
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff31 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffa2 	bl	8002a58 <SysTick_Config>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff feb6 	bl	800289c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e099      	b.n	8002c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5c:	e00f      	b.n	8002b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5e:	f7ff fe9d 	bl	800289c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d908      	bls.n	8002b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e078      	b.n	8002c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e8      	bne.n	8002b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4b38      	ldr	r3, [pc, #224]	@ (8002c78 <HAL_DMA_Init+0x158>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	4313      	orrs	r3, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d117      	bne.n	8002c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa89 	bl	800313c <DMA_CheckFifoParam>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e016      	b.n	8002c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa40 	bl	80030d0 <DMA_CalcBaseAndBitshift>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	223f      	movs	r2, #63	@ 0x3f
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	f010803f 	.word	0xf010803f

08002c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c8a:	f7ff fe07 	bl	800289c <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e052      	b.n	8002d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0216 	bic.w	r2, r2, #22
 8002cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_DMA_Abort+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfe:	e013      	b.n	8002d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d00:	f7ff fdcc 	bl	800289c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d90c      	bls.n	8002d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2203      	movs	r2, #3
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e015      	b.n	8002d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e4      	bne.n	8002d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	223f      	movs	r2, #63	@ 0x3f
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00c      	b.n	8002d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dac:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe8 <HAL_DMA_IRQHandler+0x248>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a8e      	ldr	r2, [pc, #568]	@ (8002fec <HAL_DMA_IRQHandler+0x24c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2208      	movs	r2, #8
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e01f      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2220      	movs	r2, #32
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808f 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8087 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d136      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x1da>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8e:	223f      	movs	r2, #63	@ 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d07e      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
        }
        return;
 8002fb6:	e079      	b.n	80030ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e02c      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002fe6:	bf00      	nop
 8002fe8:	20000018 	.word	0x20000018
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e01e      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0210 	bic.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	d032      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d307      	bcc.n	8003088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f2      	bne.n	800306c <HAL_DMA_IRQHandler+0x2cc>
 8003086:	e000      	b.n	800308a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80030ac:	bf00      	nop
    }
  }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c2:	b2db      	uxtb	r3, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3b10      	subs	r3, #16
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <DMA_CalcBaseAndBitshift+0x64>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ea:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <DMA_CalcBaseAndBitshift+0x68>)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d909      	bls.n	8003112 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	1d1a      	adds	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003110:	e007      	b.n	8003122 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	aaaaaaab 	.word	0xaaaaaaab
 8003138:	08011274 	.word	0x08011274

0800313c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11f      	bne.n	8003196 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d856      	bhi.n	800320a <DMA_CheckFifoParam+0xce>
 800315c:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <DMA_CheckFifoParam+0x28>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	08003187 	.word	0x08003187
 800316c:	08003175 	.word	0x08003175
 8003170:	0800320b 	.word	0x0800320b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d046      	beq.n	800320e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003184:	e043      	b.n	800320e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800318e:	d140      	bne.n	8003212 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003194:	e03d      	b.n	8003212 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319e:	d121      	bne.n	80031e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d837      	bhi.n	8003216 <DMA_CheckFifoParam+0xda>
 80031a6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <DMA_CheckFifoParam+0x70>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031c3 	.word	0x080031c3
 80031b4:	080031bd 	.word	0x080031bd
 80031b8:	080031d5 	.word	0x080031d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      break;
 80031c0:	e030      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d025      	beq.n	800321a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d2:	e022      	b.n	800321a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031dc:	d11f      	bne.n	800321e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031e2:	e01c      	b.n	800321e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d903      	bls.n	80031f2 <DMA_CheckFifoParam+0xb6>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d003      	beq.n	80031f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f0:	e018      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      break;
 80031f6:	e015      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e00b      	b.n	8003222 <DMA_CheckFifoParam+0xe6>
      break;
 800320a:	bf00      	nop
 800320c:	e00a      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;
 800320e:	bf00      	nop
 8003210:	e008      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;
 8003212:	bf00      	nop
 8003214:	e006      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e004      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e002      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;   
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
    }
  } 
  
  return status; 
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop

08003234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e159      	b.n	8003504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003250:	2201      	movs	r2, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	429a      	cmp	r2, r3
 800326a:	f040 8148 	bne.w	80034fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d005      	beq.n	8003286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003282:	2b02      	cmp	r3, #2
 8003284:	d130      	bne.n	80032e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 0201 	and.w	r2, r3, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d017      	beq.n	8003324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d123      	bne.n	8003378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	220f      	movs	r2, #15
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	08da      	lsrs	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3208      	adds	r2, #8
 8003372:	69b9      	ldr	r1, [r7, #24]
 8003374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a2 	beq.w	80034fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	4b57      	ldr	r3, [pc, #348]	@ (800351c <HAL_GPIO_Init+0x2e8>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	4a56      	ldr	r2, [pc, #344]	@ (800351c <HAL_GPIO_Init+0x2e8>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <HAL_GPIO_Init+0x2e8>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d6:	4a52      	ldr	r2, [pc, #328]	@ (8003520 <HAL_GPIO_Init+0x2ec>)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a49      	ldr	r2, [pc, #292]	@ (8003524 <HAL_GPIO_Init+0x2f0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d019      	beq.n	8003436 <HAL_GPIO_Init+0x202>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a48      	ldr	r2, [pc, #288]	@ (8003528 <HAL_GPIO_Init+0x2f4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0x1fe>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a47      	ldr	r2, [pc, #284]	@ (800352c <HAL_GPIO_Init+0x2f8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x1fa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a46      	ldr	r2, [pc, #280]	@ (8003530 <HAL_GPIO_Init+0x2fc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x1f6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a45      	ldr	r2, [pc, #276]	@ (8003534 <HAL_GPIO_Init+0x300>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x1f2>
 8003422:	2304      	movs	r3, #4
 8003424:	e008      	b.n	8003438 <HAL_GPIO_Init+0x204>
 8003426:	2307      	movs	r3, #7
 8003428:	e006      	b.n	8003438 <HAL_GPIO_Init+0x204>
 800342a:	2303      	movs	r3, #3
 800342c:	e004      	b.n	8003438 <HAL_GPIO_Init+0x204>
 800342e:	2302      	movs	r3, #2
 8003430:	e002      	b.n	8003438 <HAL_GPIO_Init+0x204>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x204>
 8003436:	2300      	movs	r3, #0
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f002 0203 	and.w	r2, r2, #3
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	4093      	lsls	r3, r2
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003448:	4935      	ldr	r1, [pc, #212]	@ (8003520 <HAL_GPIO_Init+0x2ec>)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b38      	ldr	r3, [pc, #224]	@ (8003538 <HAL_GPIO_Init+0x304>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a2f      	ldr	r2, [pc, #188]	@ (8003538 <HAL_GPIO_Init+0x304>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b2d      	ldr	r3, [pc, #180]	@ (8003538 <HAL_GPIO_Init+0x304>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a24      	ldr	r2, [pc, #144]	@ (8003538 <HAL_GPIO_Init+0x304>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034aa:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <HAL_GPIO_Init+0x304>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_GPIO_Init+0x304>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d4:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <HAL_GPIO_Init+0x304>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <HAL_GPIO_Init+0x304>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	f67f aea2 	bls.w	8003250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40013c00 	.word	0x40013c00

0800353c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
 8003548:	4613      	mov	r3, r2
 800354a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800354c:	787b      	ldrb	r3, [r7, #1]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003558:	e003      	b.n	8003562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	041a      	lsls	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	619a      	str	r2, [r3, #24]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	041a      	lsls	r2, r3, #16
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43d9      	mvns	r1, r3
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	400b      	ands	r3, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	619a      	str	r2, [r3, #24]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e12b      	b.n	800380e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fe54 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	@ 0x24
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003608:	f004 fcd6 	bl	8007fb8 <HAL_RCC_GetPCLK1Freq>
 800360c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a81      	ldr	r2, [pc, #516]	@ (8003818 <HAL_I2C_Init+0x274>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d807      	bhi.n	8003628 <HAL_I2C_Init+0x84>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a80      	ldr	r2, [pc, #512]	@ (800381c <HAL_I2C_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	bf94      	ite	ls
 8003620:	2301      	movls	r3, #1
 8003622:	2300      	movhi	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e006      	b.n	8003636 <HAL_I2C_Init+0x92>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a7d      	ldr	r2, [pc, #500]	@ (8003820 <HAL_I2C_Init+0x27c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0e7      	b.n	800380e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a78      	ldr	r2, [pc, #480]	@ (8003824 <HAL_I2C_Init+0x280>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0c9b      	lsrs	r3, r3, #18
 8003648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a6a      	ldr	r2, [pc, #424]	@ (8003818 <HAL_I2C_Init+0x274>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d802      	bhi.n	8003678 <HAL_I2C_Init+0xd4>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3301      	adds	r3, #1
 8003676:	e009      	b.n	800368c <HAL_I2C_Init+0xe8>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	4a69      	ldr	r2, [pc, #420]	@ (8003828 <HAL_I2C_Init+0x284>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	3301      	adds	r3, #1
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	430b      	orrs	r3, r1
 8003692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800369e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	495c      	ldr	r1, [pc, #368]	@ (8003818 <HAL_I2C_Init+0x274>)
 80036a8:	428b      	cmp	r3, r1
 80036aa:	d819      	bhi.n	80036e0 <HAL_I2C_Init+0x13c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e59      	subs	r1, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ba:	1c59      	adds	r1, r3, #1
 80036bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c0:	400b      	ands	r3, r1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_I2C_Init+0x138>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e59      	subs	r1, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	e051      	b.n	8003780 <HAL_I2C_Init+0x1dc>
 80036dc:	2304      	movs	r3, #4
 80036de:	e04f      	b.n	8003780 <HAL_I2C_Init+0x1dc>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_I2C_Init+0x168>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e58      	subs	r0, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e012      	b.n	8003732 <HAL_I2C_Init+0x18e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	0099      	lsls	r1, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x196>
 8003736:	2301      	movs	r3, #1
 8003738:	e022      	b.n	8003780 <HAL_I2C_Init+0x1dc>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <HAL_I2C_Init+0x1bc>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e58      	subs	r0, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	440b      	add	r3, r1
 8003750:	fbb0 f3f3 	udiv	r3, r0, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375e:	e00f      	b.n	8003780 <HAL_I2C_Init+0x1dc>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	6809      	ldr	r1, [r1, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6911      	ldr	r1, [r2, #16]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	000186a0 	.word	0x000186a0
 800381c:	001e847f 	.word	0x001e847f
 8003820:	003d08ff 	.word	0x003d08ff
 8003824:	431bde83 	.word	0x431bde83
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d103      	bne.n	800384a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	461a      	mov	r2, r3
 8003866:	4603      	mov	r3, r0
 8003868:	817b      	strh	r3, [r7, #10]
 800386a:	460b      	mov	r3, r1
 800386c:	813b      	strh	r3, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003872:	f7ff f813 	bl	800289c <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	f040 80d9 	bne.w	8003a38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2319      	movs	r3, #25
 800388c:	2201      	movs	r2, #1
 800388e:	496d      	ldr	r1, [pc, #436]	@ (8003a44 <HAL_I2C_Mem_Write+0x1ec>)
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f002 fa4d 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
 800389e:	e0cc      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_I2C_Mem_Write+0x56>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0c5      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d007      	beq.n	80038d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2221      	movs	r2, #33	@ 0x21
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2240      	movs	r2, #64	@ 0x40
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a4d      	ldr	r2, [pc, #308]	@ (8003a48 <HAL_I2C_Mem_Write+0x1f0>)
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003916:	88f8      	ldrh	r0, [r7, #6]
 8003918:	893a      	ldrh	r2, [r7, #8]
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f001 ffdc 	bl	80058e4 <I2C_RequestMemoryWrite>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d052      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e081      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f002 fb12 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	2b04      	cmp	r3, #4
 800394c:	d107      	bne.n	800395e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06b      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d11b      	bne.n	80039d8 <HAL_I2C_Mem_Write+0x180>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d017      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1aa      	bne.n	8003936 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f002 fb05 	bl	8005ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e016      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000

08003a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	@ 0x30
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	4608      	mov	r0, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	817b      	strh	r3, [r7, #10]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	813b      	strh	r3, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a66:	f7fe ff19 	bl	800289c <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	f040 8214 	bne.w	8003ea2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2319      	movs	r3, #25
 8003a80:	2201      	movs	r2, #1
 8003a82:	497b      	ldr	r1, [pc, #492]	@ (8003c70 <HAL_I2C_Mem_Read+0x224>)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f002 f953 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
 8003a92:	e207      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x56>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e200      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d007      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2222      	movs	r2, #34	@ 0x22
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2240      	movs	r2, #64	@ 0x40
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a5b      	ldr	r2, [pc, #364]	@ (8003c74 <HAL_I2C_Mem_Read+0x228>)
 8003b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0a:	88f8      	ldrh	r0, [r7, #6]
 8003b0c:	893a      	ldrh	r2, [r7, #8]
 8003b0e:	8979      	ldrh	r1, [r7, #10]
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	4603      	mov	r3, r0
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f001 ff78 	bl	8005a10 <I2C_RequestMemoryRead>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1bc      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d113      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e190      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d11b      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e170      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d11b      	bne.n	8003bda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	e150      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf0:	e144      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	f200 80f1 	bhi.w	8003dde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d123      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f002 fa6d 	bl	80060e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e145      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c4a:	e117      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d14e      	bne.n	8003cf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4906      	ldr	r1, [pc, #24]	@ (8003c78 <HAL_I2C_Mem_Read+0x22c>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f002 f866 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e11a      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
 8003c6e:	bf00      	nop
 8003c70:	00100002 	.word	0x00100002
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf0:	e0c4      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	496c      	ldr	r1, [pc, #432]	@ (8003eac <HAL_I2C_Mem_Read+0x460>)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f002 f817 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0cb      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	2200      	movs	r2, #0
 8003d56:	4955      	ldr	r1, [pc, #340]	@ (8003eac <HAL_I2C_Mem_Read+0x460>)
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f001 ffe9 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e09d      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ddc:	e04e      	b.n	8003e7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f002 f980 	bl	80060e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e058      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d124      	bne.n	8003e7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d107      	bne.n	8003e4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aeb6 	bne.w	8003bf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	@ 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010004 	.word	0x00010004

08003eb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7fe fcec 	bl	800289c <HAL_GetTick>
 8003ec4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	f040 8111 	bne.w	80040fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2319      	movs	r3, #25
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4988      	ldr	r1, [pc, #544]	@ (8004104 <HAL_I2C_IsDeviceReady+0x254>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f001 ff24 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e104      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_IsDeviceReady+0x50>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0fd      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d007      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2224      	movs	r2, #36	@ 0x24
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a70      	ldr	r2, [pc, #448]	@ (8004108 <HAL_I2C_IsDeviceReady+0x258>)
 8003f48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f001 fee2 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f80:	d103      	bne.n	8003f8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0b6      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fc7d 	bl	800289c <HAL_GetTick>
 8003fa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fd2:	e025      	b.n	8004020 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7fe fc62 	bl	800289c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <HAL_I2C_IsDeviceReady+0x13a>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22a0      	movs	r2, #160	@ 0xa0
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2ba0      	cmp	r3, #160	@ 0xa0
 800402a:	d005      	beq.n	8004038 <HAL_I2C_IsDeviceReady+0x188>
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_I2C_IsDeviceReady+0x188>
 8004032:	7dbb      	ldrb	r3, [r7, #22]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0cd      	beq.n	8003fd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d129      	bne.n	80040a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2319      	movs	r3, #25
 800407a:	2201      	movs	r2, #1
 800407c:	4921      	ldr	r1, [pc, #132]	@ (8004104 <HAL_I2C_IsDeviceReady+0x254>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f001 fe56 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e036      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e02c      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2319      	movs	r3, #25
 80040c2:	2201      	movs	r2, #1
 80040c4:	490f      	ldr	r1, [pc, #60]	@ (8004104 <HAL_I2C_IsDeviceReady+0x254>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f001 fe32 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e012      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3301      	adds	r3, #1
 80040da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	f4ff af32 	bcc.w	8003f4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	00100002 	.word	0x00100002
 8004108:	ffff0000 	.word	0xffff0000

0800410c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800412c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004134:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b10      	cmp	r3, #16
 800413a:	d003      	beq.n	8004144 <HAL_I2C_EV_IRQHandler+0x38>
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	f040 80b1 	bne.w	80042a6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10d      	bne.n	800417a <HAL_I2C_EV_IRQHandler+0x6e>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004164:	d003      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x62>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800416c:	d101      	bne.n	8004172 <HAL_I2C_EV_IRQHandler+0x66>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x68>
 8004172:	2300      	movs	r3, #0
 8004174:	2b01      	cmp	r3, #1
 8004176:	f000 8114 	beq.w	80043a2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x90>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f002 f836 	bl	8006200 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fd88 	bl	8004caa <I2C_Master_SB>
 800419a:	e083      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0xac>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fe00 	bl	8004db6 <I2C_Master_ADD10>
 80041b6:	e075      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fe1c 	bl	8004e0a <I2C_Master_ADDR>
 80041d2:	e067      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ec:	f000 80db 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x10a>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x10a>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9e4 	bl	80045dc <I2C_MasterTransmit_TXE>
 8004214:	e046      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80c2 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80bc 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	2b21      	cmp	r3, #33	@ 0x21
 8004232:	d103      	bne.n	800423c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa6d 	bl	8004714 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423a:	e0b4      	b.n	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	f040 80b1 	bne.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fadb 	bl	8004800 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800424a:	e0ac      	b.n	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425a:	f000 80a4 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x178>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x178>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb57 	bl	8004930 <I2C_MasterReceive_RXNE>
 8004282:	e00f      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 808b 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8085 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fc0f 	bl	8004ac0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	e080      	b.n	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
 80042a4:	e07f      	b.n	80043a6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e007      	b.n	80042c8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ffda 	bl	80052a8 <I2C_Slave_ADDR>
 80042f4:	e05a      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x206>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 f814 	bl	8005338 <I2C_Slave_STOPF>
 8004310:	e04c      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004312:	7bbb      	ldrb	r3, [r7, #14]
 8004314:	2b21      	cmp	r3, #33	@ 0x21
 8004316:	d002      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0x212>
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	2b29      	cmp	r3, #41	@ 0x29
 800431c:	d120      	bne.n	8004360 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_I2C_EV_IRQHandler+0x238>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_I2C_EV_IRQHandler+0x238>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fef5 	bl	800512c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004342:	e032      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02d      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x29e>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d028      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 ff24 	bl	80051a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800435e:	e024      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0x27a>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0x27a>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ff32 	bl	80051e8 <I2C_SlaveReceive_RXNE>
 8004384:	e012      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 ff62 	bl	8005264 <I2C_SlaveReceive_BTF>
 80043a0:	e004      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08a      	sub	sp, #40	@ 0x28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <HAL_I2C_ER_IRQHandler+0x4a>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0x70>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	f043 0302 	orr.w	r3, r3, #2
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004420:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d03e      	beq.n	80044aa <HAL_I2C_ER_IRQHandler+0xf8>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d039      	beq.n	80044aa <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004436:	7efb      	ldrb	r3, [r7, #27]
 8004438:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004450:	7ebb      	ldrb	r3, [r7, #26]
 8004452:	2b20      	cmp	r3, #32
 8004454:	d112      	bne.n	800447c <HAL_I2C_ER_IRQHandler+0xca>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10f      	bne.n	800447c <HAL_I2C_ER_IRQHandler+0xca>
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b21      	cmp	r3, #33	@ 0x21
 8004460:	d008      	beq.n	8004474 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	2b29      	cmp	r3, #41	@ 0x29
 8004466:	d005      	beq.n	8004474 <HAL_I2C_ER_IRQHandler+0xc2>
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b28      	cmp	r3, #40	@ 0x28
 800446c:	d106      	bne.n	800447c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b21      	cmp	r3, #33	@ 0x21
 8004472:	d103      	bne.n	800447c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 f88f 	bl	8005598 <I2C_Slave_AF>
 800447a:	e016      	b.n	80044aa <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004484:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800448e:	7efb      	ldrb	r3, [r7, #27]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d002      	beq.n	800449a <HAL_I2C_ER_IRQHandler+0xe8>
 8004494:	7efb      	ldrb	r3, [r7, #27]
 8004496:	2b40      	cmp	r3, #64	@ 0x40
 8004498:	d107      	bne.n	80044aa <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <HAL_I2C_ER_IRQHandler+0x11e>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	f043 0308 	orr.w	r3, r3, #8
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80044ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 f8cc 	bl	8005680 <I2C_ITError>
  }
}
 80044e8:	bf00      	nop
 80044ea:	3728      	adds	r7, #40	@ 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
 800454c:	4613      	mov	r3, r2
 800454e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ce:	b2db      	uxtb	r3, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d150      	bne.n	80046a4 <I2C_MasterTransmit_TXE+0xc8>
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b21      	cmp	r3, #33	@ 0x21
 8004606:	d14d      	bne.n	80046a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d01d      	beq.n	800464a <I2C_MasterTransmit_TXE+0x6e>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b20      	cmp	r3, #32
 8004612:	d01a      	beq.n	800464a <I2C_MasterTransmit_TXE+0x6e>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800461a:	d016      	beq.n	800464a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800462a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2211      	movs	r2, #17
 8004630:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ff54 	bl	80044f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004648:	e060      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004658:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004668:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	d107      	bne.n	8004694 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff6f 	bl	8004570 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004692:	e03b      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff27 	bl	80044f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046a2:	e033      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b21      	cmp	r3, #33	@ 0x21
 80046a8:	d005      	beq.n	80046b6 <I2C_MasterTransmit_TXE+0xda>
 80046aa:	7bbb      	ldrb	r3, [r7, #14]
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d12d      	bne.n	800470c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b22      	cmp	r3, #34	@ 0x22
 80046b4:	d12a      	bne.n	800470c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046d0:	e01c      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d103      	bne.n	80046e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f88e 	bl	8004800 <I2C_MemoryTransmit_TXE_BTF>
}
 80046e4:	e012      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800470a:	e7ff      	b.n	800470c <I2C_MasterTransmit_TXE+0x130>
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b21      	cmp	r3, #33	@ 0x21
 800472c:	d164      	bne.n	80047f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800475c:	e04c      	b.n	80047f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d01d      	beq.n	80047a0 <I2C_MasterTransmit_BTF+0x8c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b20      	cmp	r3, #32
 8004768:	d01a      	beq.n	80047a0 <I2C_MasterTransmit_BTF+0x8c>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004770:	d016      	beq.n	80047a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004780:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2211      	movs	r2, #17
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fea9 	bl	80044f0 <HAL_I2C_MasterTxCpltCallback>
}
 800479e:	e02b      	b.n	80047f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d107      	bne.n	80047ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fec4 	bl	8004570 <HAL_I2C_MemTxCpltCallback>
}
 80047e8:	e006      	b.n	80047f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fe7c 	bl	80044f0 <HAL_I2C_MasterTxCpltCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11d      	bne.n	8004854 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10b      	bne.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	b2da      	uxtb	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004836:	e077      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483c:	b29b      	uxth	r3, r3
 800483e:	121b      	asrs	r3, r3, #8
 8004840:	b2da      	uxtb	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004852:	e069      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10b      	bne.n	8004874 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004860:	b2da      	uxtb	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004872:	e059      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	2b02      	cmp	r3, #2
 800487a:	d152      	bne.n	8004922 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b22      	cmp	r3, #34	@ 0x22
 8004880:	d10d      	bne.n	800489e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004890:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800489c:	e044      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b21      	cmp	r3, #33	@ 0x21
 80048ac:	d112      	bne.n	80048d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048d2:	e029      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d124      	bne.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b21      	cmp	r3, #33	@ 0x21
 80048e2:	d121      	bne.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004902:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fe28 	bl	8004570 <HAL_I2C_MemTxCpltCallback>
}
 8004920:	e002      	b.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe ff82 	bl	800382c <I2C_Flush_DR>
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b22      	cmp	r3, #34	@ 0x22
 8004942:	f040 80b9 	bne.w	8004ab8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d921      	bls.n	800499e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b03      	cmp	r3, #3
 8004988:	f040 8096 	bne.w	8004ab8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800499c:	e08c      	b.n	8004ab8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d07f      	beq.n	8004aa6 <I2C_MasterReceive_RXNE+0x176>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <I2C_MasterReceive_RXNE+0x82>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d179      	bne.n	8004aa6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f001 fb66 	bl	8006084 <I2C_WaitOnSTOPRequestThroughIT>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d14c      	bne.n	8004a58 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049cc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b40      	cmp	r3, #64	@ 0x40
 8004a16:	d10a      	bne.n	8004a2e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fdac 	bl	8004584 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a2c:	e044      	b.n	8004ab8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d002      	beq.n	8004a42 <I2C_MasterReceive_RXNE+0x112>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d103      	bne.n	8004a4a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a48:	e002      	b.n	8004a50 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2212      	movs	r2, #18
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fd57 	bl	8004504 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a56:	e02f      	b.n	8004ab8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a66:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fd7a 	bl	8004598 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004aa4:	e008      	b.n	8004ab8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab4:	605a      	str	r2, [r3, #4]
}
 8004ab6:	e7ff      	b.n	8004ab8 <I2C_MasterReceive_RXNE+0x188>
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d11b      	bne.n	8004b10 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b0e:	e0c8      	b.n	8004ca2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d129      	bne.n	8004b6e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d00a      	beq.n	8004b46 <I2C_MasterReceive_BTF+0x86>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d007      	beq.n	8004b46 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b6c:	e099      	b.n	8004ca2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	f040 8081 	bne.w	8004c7c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d002      	beq.n	8004b86 <I2C_MasterReceive_BTF+0xc6>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d108      	bne.n	8004b98 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e019      	b.n	8004bcc <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d002      	beq.n	8004ba4 <I2C_MasterReceive_BTF+0xe4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d108      	bne.n	8004bb6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e00a      	b.n	8004bcc <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d007      	beq.n	8004bcc <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	d10a      	bne.n	8004c52 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fc9a 	bl	8004584 <HAL_I2C_MemRxCpltCallback>
}
 8004c50:	e027      	b.n	8004ca2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d002      	beq.n	8004c66 <I2C_MasterReceive_BTF+0x1a6>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d103      	bne.n	8004c6e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c6c:	e002      	b.n	8004c74 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2212      	movs	r2, #18
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fc45 	bl	8004504 <HAL_I2C_MasterRxCpltCallback>
}
 8004c7a:	e012      	b.n	8004ca2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d117      	bne.n	8004cee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004cd8:	e067      	b.n	8004daa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	611a      	str	r2, [r3, #16]
}
 8004cec:	e05d      	b.n	8004daa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf6:	d133      	bne.n	8004d60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b21      	cmp	r3, #33	@ 0x21
 8004d02:	d109      	bne.n	8004d18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d14:	611a      	str	r2, [r3, #16]
 8004d16:	e008      	b.n	8004d2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <I2C_Master_SB+0x92>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d032      	beq.n	8004daa <I2C_Master_SB+0x100>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02d      	beq.n	8004daa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d5c:	605a      	str	r2, [r3, #4]
}
 8004d5e:	e024      	b.n	8004daa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10e      	bne.n	8004d86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	11db      	asrs	r3, r3, #7
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0306 	and.w	r3, r3, #6
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f063 030f 	orn	r3, r3, #15
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	611a      	str	r2, [r3, #16]
}
 8004d84:	e011      	b.n	8004daa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	11db      	asrs	r3, r3, #7
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0306 	and.w	r3, r3, #6
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f063 030e 	orn	r3, r3, #14
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	611a      	str	r2, [r3, #16]
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <I2C_Master_ADD10+0x26>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <I2C_Master_ADD10+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dfc:	605a      	str	r2, [r3, #4]
  }
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b091      	sub	sp, #68	@ 0x44
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b22      	cmp	r3, #34	@ 0x22
 8004e32:	f040 8169 	bne.w	8005108 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <I2C_Master_ADDR+0x54>
 8004e3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d10b      	bne.n	8004e5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e46:	2300      	movs	r3, #0
 8004e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	e160      	b.n	8005120 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11d      	bne.n	8004ea2 <I2C_Master_ADDR+0x98>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e6e:	d118      	bne.n	8004ea2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e70:	2300      	movs	r3, #0
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ea0:	e13e      	b.n	8005120 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d113      	bne.n	8004ed4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eac:	2300      	movs	r3, #0
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e115      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 808a 	bne.w	8004ff4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ee6:	d137      	bne.n	8004f58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f06:	d113      	bne.n	8004f30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	e0e7      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f30:	2300      	movs	r3, #0
 8004f32:	623b      	str	r3, [r7, #32]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e0d3      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d02e      	beq.n	8004fbc <I2C_Master_ADDR+0x1b2>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d02b      	beq.n	8004fbc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f66:	2b12      	cmp	r3, #18
 8004f68:	d102      	bne.n	8004f70 <I2C_Master_ADDR+0x166>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d125      	bne.n	8004fbc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d00e      	beq.n	8004f94 <I2C_Master_ADDR+0x18a>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d00b      	beq.n	8004f94 <I2C_Master_ADDR+0x18a>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d008      	beq.n	8004f94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e007      	b.n	8004fa4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fa2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	e0a1      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e085      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d14d      	bne.n	800509a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	2b04      	cmp	r3, #4
 8005002:	d016      	beq.n	8005032 <I2C_Master_ADDR+0x228>
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	2b02      	cmp	r3, #2
 8005008:	d013      	beq.n	8005032 <I2C_Master_ADDR+0x228>
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	2b10      	cmp	r3, #16
 800500e:	d010      	beq.n	8005032 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e007      	b.n	8005042 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005040:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800504c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005050:	d117      	bne.n	8005082 <I2C_Master_ADDR+0x278>
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005058:	d00b      	beq.n	8005072 <I2C_Master_ADDR+0x268>
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	2b01      	cmp	r3, #1
 800505e:	d008      	beq.n	8005072 <I2C_Master_ADDR+0x268>
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	2b08      	cmp	r3, #8
 8005064:	d005      	beq.n	8005072 <I2C_Master_ADDR+0x268>
 8005066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005068:	2b10      	cmp	r3, #16
 800506a:	d002      	beq.n	8005072 <I2C_Master_ADDR+0x268>
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	2b20      	cmp	r3, #32
 8005070:	d107      	bne.n	8005082 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005080:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	e032      	b.n	8005100 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b8:	d117      	bne.n	80050ea <I2C_Master_ADDR+0x2e0>
 80050ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050c0:	d00b      	beq.n	80050da <I2C_Master_ADDR+0x2d0>
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d008      	beq.n	80050da <I2C_Master_ADDR+0x2d0>
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d005      	beq.n	80050da <I2C_Master_ADDR+0x2d0>
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d002      	beq.n	80050da <I2C_Master_ADDR+0x2d0>
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d107      	bne.n	80050ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005106:	e00b      	b.n	8005120 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
}
 800511e:	e7ff      	b.n	8005120 <I2C_Master_ADDR+0x316>
 8005120:	bf00      	nop
 8005122:	3744      	adds	r7, #68	@ 0x44
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02b      	beq.n	800519e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	781a      	ldrb	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d114      	bne.n	800519e <I2C_SlaveTransmit_TXE+0x72>
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b29      	cmp	r3, #41	@ 0x29
 8005178:	d111      	bne.n	800519e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005188:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2221      	movs	r2, #33	@ 0x21
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2228      	movs	r2, #40	@ 0x28
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff f9bd 	bl	8004518 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d02c      	beq.n	800525c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d114      	bne.n	800525c <I2C_SlaveReceive_RXNE+0x74>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b2a      	cmp	r3, #42	@ 0x2a
 8005236:	d111      	bne.n	800525c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005246:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2222      	movs	r2, #34	@ 0x22
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2228      	movs	r2, #40	@ 0x28
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff f968 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d012      	beq.n	800529c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052c2:	2b28      	cmp	r3, #40	@ 0x28
 80052c4:	d125      	bne.n	8005312 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	81bb      	strh	r3, [r7, #12]
 80052f4:	e002      	b.n	80052fc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005304:	89ba      	ldrh	r2, [r7, #12]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f918 	bl	8004540 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005310:	e00e      	b.n	8005330 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005346:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005356:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005384:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005394:	d172      	bne.n	800547c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b22      	cmp	r3, #34	@ 0x22
 800539a:	d002      	beq.n	80053a2 <I2C_Slave_STOPF+0x6a>
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d135      	bne.n	800540e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f043 0204 	orr.w	r2, r3, #4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fd fe6a 	bl	80030b4 <HAL_DMA_GetState>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d049      	beq.n	800547a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	4a69      	ldr	r2, [pc, #420]	@ (8005590 <I2C_Slave_STOPF+0x258>)
 80053ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fd fcb2 	bl	8002d5c <HAL_DMA_Abort_IT>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03d      	beq.n	800547a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005408:	4610      	mov	r0, r2
 800540a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800540c:	e035      	b.n	800547a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	f043 0204 	orr.w	r2, r3, #4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005440:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fe34 	bl	80030b4 <HAL_DMA_GetState>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d014      	beq.n	800547c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	4a4e      	ldr	r2, [pc, #312]	@ (8005590 <I2C_Slave_STOPF+0x258>)
 8005458:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd fc7c 	bl	8002d5c <HAL_DMA_Abort_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
 8005478:	e000      	b.n	800547c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800547a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03e      	beq.n	8005504 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d112      	bne.n	80054ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d112      	bne.n	80054ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	f043 0204 	orr.w	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8b7 	bl	8005680 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005512:	e039      	b.n	8005588 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b2a      	cmp	r3, #42	@ 0x2a
 8005518:	d109      	bne.n	800552e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2228      	movs	r2, #40	@ 0x28
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fe ffff 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b28      	cmp	r3, #40	@ 0x28
 8005538:	d111      	bne.n	800555e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <I2C_Slave_STOPF+0x25c>)
 800553e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff f800 	bl	800455c <HAL_I2C_ListenCpltCallback>
}
 800555c:	e014      	b.n	8005588 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b22      	cmp	r3, #34	@ 0x22
 8005564:	d002      	beq.n	800556c <I2C_Slave_STOPF+0x234>
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b22      	cmp	r3, #34	@ 0x22
 800556a:	d10d      	bne.n	8005588 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fe ffd2 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	08005be1 	.word	0x08005be1
 8005594:	ffff0000 	.word	0xffff0000

08005598 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d002      	beq.n	80055ba <I2C_Slave_AF+0x22>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d129      	bne.n	800560e <I2C_Slave_AF+0x76>
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d126      	bne.n	800560e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a2e      	ldr	r2, [pc, #184]	@ (800567c <I2C_Slave_AF+0xe4>)
 80055c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fe ffa8 	bl	800455c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800560c:	e031      	b.n	8005672 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b21      	cmp	r3, #33	@ 0x21
 8005612:	d129      	bne.n	8005668 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a19      	ldr	r2, [pc, #100]	@ (800567c <I2C_Slave_AF+0xe4>)
 8005618:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2221      	movs	r2, #33	@ 0x21
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800563e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005648:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005658:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fe f8e6 	bl	800382c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fe ff59 	bl	8004518 <HAL_I2C_SlaveTxCpltCallback>
}
 8005666:	e004      	b.n	8005672 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005670:	615a      	str	r2, [r3, #20]
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	ffff0000 	.word	0xffff0000

08005680 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005696:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005698:	7bbb      	ldrb	r3, [r7, #14]
 800569a:	2b10      	cmp	r3, #16
 800569c:	d002      	beq.n	80056a4 <I2C_ITError+0x24>
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	d10a      	bne.n	80056ba <I2C_ITError+0x3a>
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b22      	cmp	r3, #34	@ 0x22
 80056a8:	d107      	bne.n	80056ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056c0:	2b28      	cmp	r3, #40	@ 0x28
 80056c2:	d107      	bne.n	80056d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2228      	movs	r2, #40	@ 0x28
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056d2:	e015      	b.n	8005700 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e2:	d00a      	beq.n	80056fa <I2C_ITError+0x7a>
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b60      	cmp	r3, #96	@ 0x60
 80056e8:	d007      	beq.n	80056fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570e:	d162      	bne.n	80057d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800571e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d020      	beq.n	8005770 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	4a6a      	ldr	r2, [pc, #424]	@ (80058dc <I2C_ITError+0x25c>)
 8005734:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fb0e 	bl	8002d5c <HAL_DMA_Abort_IT>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8089 	beq.w	800585a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0201 	bic.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800576a:	4610      	mov	r0, r2
 800576c:	4798      	blx	r3
 800576e:	e074      	b.n	800585a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	4a59      	ldr	r2, [pc, #356]	@ (80058dc <I2C_ITError+0x25c>)
 8005776:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	4618      	mov	r0, r3
 800577e:	f7fd faed 	bl	8002d5c <HAL_DMA_Abort_IT>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d068      	beq.n	800585a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d10b      	bne.n	80057ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	e041      	b.n	800585a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b60      	cmp	r3, #96	@ 0x60
 80057e0:	d125      	bne.n	800582e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d10b      	bne.n	8005816 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe fec0 	bl	80045ac <HAL_I2C_AbortCpltCallback>
 800582c:	e015      	b.n	800585a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d10b      	bne.n	8005854 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fe fe9f 	bl	8004598 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10e      	bne.n	8005888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005896:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d113      	bne.n	80058d4 <I2C_ITError+0x254>
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b28      	cmp	r3, #40	@ 0x28
 80058b0:	d110      	bne.n	80058d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <I2C_ITError+0x260>)
 80058b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fe fe44 	bl	800455c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08005be1 	.word	0x08005be1
 80058e0:	ffff0000 	.word	0xffff0000

080058e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	460b      	mov	r3, r1
 80058f8:	813b      	strh	r3, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800590c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2200      	movs	r2, #0
 8005916:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fa08 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005934:	d103      	bne.n	800593e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e05f      	b.n	8005a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005942:	897b      	ldrh	r3, [r7, #10]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	492d      	ldr	r1, [pc, #180]	@ (8005a0c <I2C_RequestMemoryWrite+0x128>)
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fa63 	bl	8005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e04c      	b.n	8005a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	6a39      	ldr	r1, [r7, #32]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 faee 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	2b04      	cmp	r3, #4
 8005994:	d107      	bne.n	80059a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e02b      	b.n	8005a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b0:	893b      	ldrh	r3, [r7, #8]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	e021      	b.n	8005a00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059bc:	893b      	ldrh	r3, [r7, #8]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fac8 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d107      	bne.n	80059f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e005      	b.n	8005a02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	00010002 	.word	0x00010002

08005a10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	817b      	strh	r3, [r7, #10]
 8005a22:	460b      	mov	r3, r1
 8005a24:	813b      	strh	r3, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f96a 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a70:	d103      	bne.n	8005a7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e0aa      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a7e:	897b      	ldrh	r3, [r7, #10]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	4952      	ldr	r1, [pc, #328]	@ (8005bdc <I2C_RequestMemoryRead+0x1cc>)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f9c5 	bl	8005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e097      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005abc:	6a39      	ldr	r1, [r7, #32]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fa50 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00d      	beq.n	8005ae6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d107      	bne.n	8005ae2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e076      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	611a      	str	r2, [r3, #16]
 8005af6:	e021      	b.n	8005b3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005af8:	893b      	ldrh	r3, [r7, #8]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa2a 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d107      	bne.n	8005b2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e050      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b32:	893b      	ldrh	r3, [r7, #8]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fa0f 	bl	8005f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d107      	bne.n	8005b64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e035      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f8d3 	bl	8005d30 <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00d      	beq.n	8005bac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9e:	d103      	bne.n	8005ba8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e013      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bac:	897b      	ldrh	r3, [r7, #10]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	4906      	ldr	r1, [pc, #24]	@ (8005bdc <I2C_RequestMemoryRead+0x1cc>)
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f92e 	bl	8005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	00010002 	.word	0x00010002

08005be0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8005d28 <I2C_DMAAbort+0x148>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	08db      	lsrs	r3, r3, #3
 8005c00:	4a4a      	ldr	r2, [pc, #296]	@ (8005d2c <I2C_DMAAbort+0x14c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0a1a      	lsrs	r2, r3, #8
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	00da      	lsls	r2, r3, #3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c26:	e00a      	b.n	8005c3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c3c:	d0ea      	beq.n	8005c14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2200      	movs	r2, #0
 8005c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c80:	2200      	movs	r2, #0
 8005c82:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	2200      	movs	r2, #0
 8005c92:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b60      	cmp	r3, #96	@ 0x60
 8005cae:	d10e      	bne.n	8005cce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7fe fc70 	bl	80045ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ccc:	e027      	b.n	8005d1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cce:	7cfb      	ldrb	r3, [r7, #19]
 8005cd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cd4:	2b28      	cmp	r3, #40	@ 0x28
 8005cd6:	d117      	bne.n	8005d08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2228      	movs	r2, #40	@ 0x28
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d06:	e007      	b.n	8005d18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d18:	6978      	ldr	r0, [r7, #20]
 8005d1a:	f7fe fc3d 	bl	8004598 <HAL_I2C_ErrorCallback>
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000018 	.word	0x20000018
 8005d2c:	14f8b589 	.word	0x14f8b589

08005d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d40:	e048      	b.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d044      	beq.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fc fda7 	bl	800289c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d139      	bne.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10d      	bne.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	43da      	mvns	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4013      	ands	r3, r2
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	e00c      	b.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	43da      	mvns	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d116      	bne.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	f043 0220 	orr.w	r2, r3, #32
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e023      	b.n	8005e1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	0c1b      	lsrs	r3, r3, #16
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10d      	bne.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	43da      	mvns	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	e00c      	b.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	43da      	mvns	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4013      	ands	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d093      	beq.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e32:	e071      	b.n	8005f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e42:	d123      	bne.n	8005e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e067      	b.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d041      	beq.n	8005f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e94:	f7fc fd02 	bl	800289c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d136      	bne.n	8005f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10c      	bne.n	8005ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	43da      	mvns	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bf14      	ite	ne
 8005ec6:	2301      	movne	r3, #1
 8005ec8:	2300      	moveq	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e00b      	b.n	8005ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	43da      	mvns	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e021      	b.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10c      	bne.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e00b      	b.n	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	43da      	mvns	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f47f af6d 	bne.w	8005e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f70:	e034      	b.n	8005fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f915 	bl	80061a2 <I2C_IsAcknowledgeFailed>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e034      	b.n	8005fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d028      	beq.n	8005fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fc fc87 	bl	800289c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11d      	bne.n	8005fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b80      	cmp	r3, #128	@ 0x80
 8005fac:	d016      	beq.n	8005fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e007      	b.n	8005fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b80      	cmp	r3, #128	@ 0x80
 8005fe8:	d1c3      	bne.n	8005f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006000:	e034      	b.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f8cd 	bl	80061a2 <I2C_IsAcknowledgeFailed>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e034      	b.n	800607c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d028      	beq.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fc fc3f 	bl	800289c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11d      	bne.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d016      	beq.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d1c3      	bne.n	8006002 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006090:	4b13      	ldr	r3, [pc, #76]	@ (80060e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	0a1a      	lsrs	r2, r3, #8
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e008      	b.n	80060d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d0:	d0e9      	beq.n	80060a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000018 	.word	0x20000018
 80060e4:	14f8b589 	.word	0x14f8b589

080060e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f4:	e049      	b.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b10      	cmp	r3, #16
 8006102:	d119      	bne.n	8006138 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0210 	mvn.w	r2, #16
 800610c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e030      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006138:	f7fc fbb0 	bl	800289c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11d      	bne.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d016      	beq.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e007      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006194:	2b40      	cmp	r3, #64	@ 0x40
 8006196:	d1ae      	bne.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b8:	d11b      	bne.n	80061f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	f043 0204 	orr.w	r2, r3, #4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006210:	d103      	bne.n	800621a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006218:	e007      	b.n	800622a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006222:	d102      	bne.n	800622a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2208      	movs	r2, #8
 8006228:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af02      	add	r7, sp, #8
 800623c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e101      	b.n	800644c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f007 fb98 	bl	800d998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006276:	d102      	bne.n	800627e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f003 ffe5 	bl	800a252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7c1a      	ldrb	r2, [r3, #16]
 8006290:	f88d 2000 	strb.w	r2, [sp]
 8006294:	3304      	adds	r3, #4
 8006296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006298:	f003 fec4 	bl	800a024 <USB_CoreInit>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0ce      	b.n	800644c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f003 ffdd 	bl	800a274 <USB_SetCurrentMode>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0bf      	b.n	800644c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e04a      	b.n	8006368 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3315      	adds	r3, #21
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3314      	adds	r3, #20
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	b298      	uxth	r0, r3
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	332e      	adds	r3, #46	@ 0x2e
 800630e:	4602      	mov	r2, r0
 8006310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	3318      	adds	r3, #24
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006326:	7bfa      	ldrb	r2, [r7, #15]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	331c      	adds	r3, #28
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3320      	adds	r3, #32
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3324      	adds	r3, #36	@ 0x24
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	3301      	adds	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	7bfa      	ldrb	r2, [r7, #15]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3af      	bcc.n	80062d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	e044      	b.n	8006402 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ba:	7bfa      	ldrb	r2, [r7, #15]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063d0:	7bfa      	ldrb	r2, [r7, #15]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	3301      	adds	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	791b      	ldrb	r3, [r3, #4]
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	429a      	cmp	r2, r3
 800640a:	d3b5      	bcc.n	8006378 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	7c1a      	ldrb	r2, [r3, #16]
 8006414:	f88d 2000 	strb.w	r2, [sp]
 8006418:	3304      	adds	r3, #4
 800641a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800641c:	f003 ff76 	bl	800a30c <USB_DevInit>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e00c      	b.n	800644c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f004 ffc0 	bl	800b3ca <USB_DevDisconnect>

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_PCD_Start+0x1c>
 800646c:	2302      	movs	r3, #2
 800646e:	e022      	b.n	80064b6 <HAL_PCD_Start+0x62>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006488:	2b01      	cmp	r3, #1
 800648a:	d105      	bne.n	8006498 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f003 fec7 	bl	800a230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f004 ff6e 	bl	800b388 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064be:	b590      	push	{r4, r7, lr}
 80064c0:	b08d      	sub	sp, #52	@ 0x34
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f005 f82c 	bl	800b532 <USB_GetMode>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 848c 	bne.w	8006dfa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f004 ff90 	bl	800b40c <USB_ReadInterrupts>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8482 	beq.w	8006df8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f004 ff7d 	bl	800b40c <USB_ReadInterrupts>
 8006512:	4603      	mov	r3, r0
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d107      	bne.n	800652c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f002 0202 	and.w	r2, r2, #2
 800652a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f004 ff6b 	bl	800b40c <USB_ReadInterrupts>
 8006536:	4603      	mov	r3, r0
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b10      	cmp	r3, #16
 800653e:	d161      	bne.n	8006604 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0210 	bic.w	r2, r2, #16
 800654e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	0c5b      	lsrs	r3, r3, #17
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	2b02      	cmp	r3, #2
 800657a:	d124      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d035      	beq.n	80065f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6a38      	ldr	r0, [r7, #32]
 800659c:	f004 fda2 	bl	800b0e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ac:	441a      	add	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065be:	441a      	add	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	615a      	str	r2, [r3, #20]
 80065c4:	e016      	b.n	80065f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	0c5b      	lsrs	r3, r3, #17
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d110      	bne.n	80065f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065d8:	2208      	movs	r2, #8
 80065da:	4619      	mov	r1, r3
 80065dc:	6a38      	ldr	r0, [r7, #32]
 80065de:	f004 fd81 	bl	800b0e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ee:	441a      	add	r2, r3
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0210 	orr.w	r2, r2, #16
 8006602:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f004 feff 	bl	800b40c <USB_ReadInterrupts>
 800660e:	4603      	mov	r3, r0
 8006610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006614:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006618:	f040 80a7 	bne.w	800676a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f004 ff04 	bl	800b432 <USB_ReadDevAllOutEpInterrupt>
 800662a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800662c:	e099      	b.n	8006762 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 808e 	beq.w	8006756 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f004 ff28 	bl	800b49a <USB_ReadDevOutEPInterrupt>
 800664a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006662:	461a      	mov	r2, r3
 8006664:	2301      	movs	r3, #1
 8006666:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fea4 	bl	80073b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006686:	461a      	mov	r2, r3
 8006688:	2308      	movs	r3, #8
 800668a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800668c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 ff7a 	bl	8007588 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	461a      	mov	r2, r3
 80066ac:	2310      	movs	r3, #16
 80066ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d030      	beq.n	800671c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c2:	2b80      	cmp	r3, #128	@ 0x80
 80066c4:	d109      	bne.n	80066da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80066da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	3304      	adds	r3, #4
 80066ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d108      	bne.n	800670a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2200      	movs	r2, #0
 80066fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f007 fa43 	bl	800db90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006716:	461a      	mov	r2, r3
 8006718:	2302      	movs	r3, #2
 800671a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d008      	beq.n	8006738 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	2320      	movs	r3, #32
 8006736:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674e:	461a      	mov	r2, r3
 8006750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006754:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	3301      	adds	r3, #1
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	f47f af62 	bne.w	800662e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f004 fe4c 	bl	800b40c <USB_ReadInterrupts>
 8006774:	4603      	mov	r3, r0
 8006776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800677a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800677e:	f040 80db 	bne.w	8006938 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f004 fe6d 	bl	800b466 <USB_ReadDevAllInEpInterrupt>
 800678c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006792:	e0cd      	b.n	8006930 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80c2 	beq.w	8006924 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 fe93 	bl	800b4d6 <USB_ReadDevInEPInterrupt>
 80067b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d057      	beq.n	800686c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	2201      	movs	r2, #1
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067dc:	4013      	ands	r3, r2
 80067de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ec:	461a      	mov	r2, r3
 80067ee:	2301      	movs	r3, #1
 80067f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	799b      	ldrb	r3, [r3, #6]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d132      	bne.n	8006860 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3320      	adds	r3, #32
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4403      	add	r3, r0
 800681a:	331c      	adds	r3, #28
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4419      	add	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4403      	add	r3, r0
 800682e:	3320      	adds	r3, #32
 8006830:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d113      	bne.n	8006860 <HAL_PCD_IRQHandler+0x3a2>
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	3324      	adds	r3, #36	@ 0x24
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006858:	461a      	mov	r2, r3
 800685a:	2101      	movs	r1, #1
 800685c:	f004 fe9a 	bl	800b594 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	b2db      	uxtb	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f007 f917 	bl	800da9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006882:	461a      	mov	r2, r3
 8006884:	2308      	movs	r3, #8
 8006886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	2310      	movs	r3, #16
 80068a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d008      	beq.n	80068c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	461a      	mov	r2, r3
 80068bc:	2340      	movs	r3, #64	@ 0x40
 80068be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d023      	beq.n	8006912 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80068ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068cc:	6a38      	ldr	r0, [r7, #32]
 80068ce:	f003 fe81 	bl	800a5d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80068d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	3310      	adds	r3, #16
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	3304      	adds	r3, #4
 80068e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d108      	bne.n	8006900 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f007 f95a 	bl	800dbb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690c:	461a      	mov	r2, r3
 800690e:	2302      	movs	r3, #2
 8006910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800691c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fcbd 	bl	800729e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	3301      	adds	r3, #1
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	f47f af2e 	bne.w	8006794 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f004 fd65 	bl	800b40c <USB_ReadInterrupts>
 8006942:	4603      	mov	r3, r0
 8006944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800694c:	d122      	bne.n	8006994 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006968:	2b01      	cmp	r3, #1
 800696a:	d108      	bne.n	800697e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006974:	2100      	movs	r1, #0
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fea4 	bl	80076c4 <HAL_PCDEx_LPM_Callback>
 800697c:	e002      	b.n	8006984 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f007 f8f8 	bl	800db74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f004 fd37 	bl	800b40c <USB_ReadInterrupts>
 800699e:	4603      	mov	r3, r0
 80069a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a8:	d112      	bne.n	80069d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d102      	bne.n	80069c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f007 f8b4 	bl	800db28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80069ce:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f004 fd19 	bl	800b40c <USB_ReadInterrupts>
 80069da:	4603      	mov	r3, r0
 80069dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e4:	f040 80b7 	bne.w	8006b56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2110      	movs	r1, #16
 8006a02:	4618      	mov	r0, r3
 8006a04:	f003 fde6 	bl	800a5d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a0c:	e046      	b.n	8006a9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	3301      	adds	r3, #1
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	791b      	ldrb	r3, [r3, #4]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d3b2      	bcc.n	8006a0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ab6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006aba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7bdb      	ldrb	r3, [r3, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d016      	beq.n	8006af2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ad4:	f043 030b 	orr.w	r3, r3, #11
 8006ad8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aea:	f043 030b 	orr.w	r3, r3, #11
 8006aee:	6453      	str	r3, [r2, #68]	@ 0x44
 8006af0:	e015      	b.n	8006b1e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006b04:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006b08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b18:	f043 030b 	orr.w	r3, r3, #11
 8006b1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b2c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b40:	461a      	mov	r2, r3
 8006b42:	f004 fd27 	bl	800b594 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f004 fc56 	bl	800b40c <USB_ReadInterrupts>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b6a:	d123      	bne.n	8006bb4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f004 fcec 	bl	800b54e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f003 fda3 	bl	800a6c6 <USB_GetDevSpeed>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681c      	ldr	r4, [r3, #0]
 8006b8c:	f001 fa08 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8006b90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b96:	461a      	mov	r2, r3
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f003 faa7 	bl	800a0ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f006 ffa3 	bl	800daea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f004 fc27 	bl	800b40c <USB_ReadInterrupts>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d10a      	bne.n	8006bde <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f006 ff80 	bl	800dace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f002 0208 	and.w	r2, r2, #8
 8006bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f004 fc12 	bl	800b40c <USB_ReadInterrupts>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b80      	cmp	r3, #128	@ 0x80
 8006bf0:	d123      	bne.n	8006c3a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c02:	e014      	b.n	8006c2e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c08:	4613      	mov	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fb0a 	bl	800723c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	791b      	ldrb	r3, [r3, #4]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d3e4      	bcc.n	8006c04 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f004 fbe4 	bl	800b40c <USB_ReadInterrupts>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c4e:	d13c      	bne.n	8006cca <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c50:	2301      	movs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c54:	e02b      	b.n	8006cae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3318      	adds	r3, #24
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d115      	bne.n	8006ca8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006c7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da12      	bge.n	8006ca8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c86:	4613      	mov	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	3317      	adds	r3, #23
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 faca 	bl	800723c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	3301      	adds	r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	791b      	ldrb	r3, [r3, #4]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d3cd      	bcc.n	8006c56 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695a      	ldr	r2, [r3, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f004 fb9c 	bl	800b40c <USB_ReadInterrupts>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cde:	d156      	bne.n	8006d8e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	e045      	b.n	8006d72 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d12e      	bne.n	8006d6c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da2b      	bge.n	8006d6c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006d20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d121      	bne.n	8006d6c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d68:	6053      	str	r3, [r2, #4]
            break;
 8006d6a:	e008      	b.n	8006d7e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	3301      	adds	r3, #1
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d3b3      	bcc.n	8006ce6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f004 fb3a 	bl	800b40c <USB_ReadInterrupts>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da2:	d10a      	bne.n	8006dba <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f006 ff17 	bl	800dbd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f004 fb24 	bl	800b40c <USB_ReadInterrupts>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d115      	bne.n	8006dfa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f006 ff07 	bl	800dbf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	e000      	b.n	8006dfa <HAL_PCD_IRQHandler+0x93c>
      return;
 8006df8:	bf00      	nop
    }
  }
}
 8006dfa:	3734      	adds	r7, #52	@ 0x34
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd90      	pop	{r4, r7, pc}

08006e00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_PCD_SetAddress+0x1a>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e012      	b.n	8006e40 <HAL_PCD_SetAddress+0x40>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f004 fa83 	bl	800b33c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	461a      	mov	r2, r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	70fb      	strb	r3, [r7, #3]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	803b      	strh	r3, [r7, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da0f      	bge.n	8006e8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	3310      	adds	r3, #16
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	3304      	adds	r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	705a      	strb	r2, [r3, #1]
 8006e8c:	e00f      	b.n	8006eae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	f003 020f 	and.w	r2, r3, #15
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006eba:	883b      	ldrh	r3, [r7, #0]
 8006ebc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	78ba      	ldrb	r2, [r7, #2]
 8006ec8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006edc:	78bb      	ldrb	r3, [r7, #2]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d102      	bne.n	8006ee8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_PCD_EP_Open+0xae>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e00e      	b.n	8006f14 <HAL_PCD_EP_Open+0xcc>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68f9      	ldr	r1, [r7, #12]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f003 fc03 	bl	800a710 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006f12:	7afb      	ldrb	r3, [r7, #11]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da0f      	bge.n	8006f50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	f003 020f 	and.w	r2, r3, #15
 8006f36:	4613      	mov	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	3310      	adds	r3, #16
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	705a      	strb	r2, [r3, #1]
 8006f4e:	e00f      	b.n	8006f70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	3304      	adds	r3, #4
 8006f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_PCD_EP_Close+0x6e>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e00e      	b.n	8006fa8 <HAL_PCD_EP_Close+0x8c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f003 fc41 	bl	800a820 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	799b      	ldrb	r3, [r3, #6]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d102      	bne.n	800700c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	799b      	ldrb	r3, [r3, #6]
 8007014:	461a      	mov	r2, r3
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	f003 fcde 	bl	800a9d8 <USB_EPStartXfer>

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007048:	681b      	ldr	r3, [r3, #0]
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	460b      	mov	r3, r1
 8007064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	f003 020f 	and.w	r2, r3, #15
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	3310      	adds	r3, #16
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2201      	movs	r2, #1
 8007094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	b2da      	uxtb	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	799b      	ldrb	r3, [r3, #6]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d102      	bne.n	80070b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	799b      	ldrb	r3, [r3, #6]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	f003 fc8c 	bl	800a9d8 <USB_EPStartXfer>

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7912      	ldrb	r2, [r2, #4]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e04f      	b.n	8007188 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da0f      	bge.n	8007110 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	f003 020f 	and.w	r2, r3, #15
 80070f6:	4613      	mov	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	3310      	adds	r3, #16
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	705a      	strb	r2, [r3, #1]
 800710e:	e00d      	b.n	800712c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	4613      	mov	r3, r2
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	3304      	adds	r3, #4
 8007124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	b2da      	uxtb	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_PCD_EP_SetStall+0x82>
 8007148:	2302      	movs	r3, #2
 800714a:	e01d      	b.n	8007188 <HAL_PCD_EP_SetStall+0xbe>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	4618      	mov	r0, r3
 800715c:	f004 f81a 	bl	800b194 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7999      	ldrb	r1, [r3, #6]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007178:	461a      	mov	r2, r3
 800717a:	f004 fa0b 	bl	800b594 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	7912      	ldrb	r2, [r2, #4]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e042      	b.n	8007234 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da0f      	bge.n	80071d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	3310      	adds	r3, #16
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	705a      	strb	r2, [r3, #1]
 80071d4:	e00f      	b.n	80071f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	f003 020f 	and.w	r2, r3, #15
 80071dc:	4613      	mov	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4413      	add	r3, r2
 80071ec:	3304      	adds	r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_PCD_EP_ClrStall+0x86>
 8007212:	2302      	movs	r3, #2
 8007214:	e00e      	b.n	8007234 <HAL_PCD_EP_ClrStall+0xa4>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	4618      	mov	r0, r3
 8007226:	f004 f823 	bl	800b270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800724c:	2b00      	cmp	r3, #0
 800724e:	da0c      	bge.n	800726a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	3310      	adds	r3, #16
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	3304      	adds	r3, #4
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e00c      	b.n	8007284 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4413      	add	r3, r2
 8007280:	3304      	adds	r3, #4
 8007282:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	4618      	mov	r0, r3
 800728c:	f003 fe42 	bl	800af14 <USB_EPStopXfer>
 8007290:	4603      	mov	r3, r0
 8007292:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007294:	7afb      	ldrb	r3, [r7, #11]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b08a      	sub	sp, #40	@ 0x28
 80072a2:	af02      	add	r7, sp, #8
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	3310      	adds	r3, #16
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	3304      	adds	r3, #4
 80072c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d901      	bls.n	80072d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e06b      	b.n	80073ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d902      	bls.n	80072f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3303      	adds	r3, #3
 80072f6:	089b      	lsrs	r3, r3, #2
 80072f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072fa:	e02a      	b.n	8007352 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	429a      	cmp	r2, r3
 8007310:	d902      	bls.n	8007318 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3303      	adds	r3, #3
 800731c:	089b      	lsrs	r3, r3, #2
 800731e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68d9      	ldr	r1, [r3, #12]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4603      	mov	r3, r0
 8007334:	6978      	ldr	r0, [r7, #20]
 8007336:	f003 fe97 	bl	800b068 <USB_WritePacket>

    ep->xfer_buff  += len;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	695a      	ldr	r2, [r3, #20]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	d809      	bhi.n	800737c <PCD_WriteEmptyTxFifo+0xde>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007370:	429a      	cmp	r2, r3
 8007372:	d203      	bcs.n	800737c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1bf      	bne.n	80072fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	429a      	cmp	r2, r3
 8007386:	d811      	bhi.n	80073ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a8:	4013      	ands	r3, r2
 80073aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	333c      	adds	r3, #60	@ 0x3c
 80073d0:	3304      	adds	r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	799b      	ldrb	r3, [r3, #6]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d17b      	bne.n	80074e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	4a61      	ldr	r2, [pc, #388]	@ (8007580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	f240 80b9 	bls.w	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80b3 	beq.w	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741a:	461a      	mov	r2, r3
 800741c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007420:	6093      	str	r3, [r2, #8]
 8007422:	e0a7      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	461a      	mov	r2, r3
 800743c:	2320      	movs	r3, #32
 800743e:	6093      	str	r3, [r2, #8]
 8007440:	e098      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 8093 	bne.w	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	4a4b      	ldr	r2, [pc, #300]	@ (8007580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d90f      	bls.n	8007476 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746c:	461a      	mov	r2, r3
 800746e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007472:	6093      	str	r3, [r2, #8]
 8007474:	e07e      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4413      	add	r3, r2
 8007488:	3304      	adds	r3, #4
 800748a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	0159      	lsls	r1, r3, #5
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	440b      	add	r3, r1
 8007498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d114      	bne.n	80074d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074c0:	461a      	mov	r2, r3
 80074c2:	2101      	movs	r1, #1
 80074c4:	f004 f866 	bl	800b594 <USB_EP0_OutStart>
 80074c8:	e006      	b.n	80074d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	441a      	add	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f006 fac0 	bl	800da64 <HAL_PCD_DataOutStageCallback>
 80074e4:	e046      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4a26      	ldr	r2, [pc, #152]	@ (8007584 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d124      	bne.n	8007538 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007504:	461a      	mov	r2, r3
 8007506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800750a:	6093      	str	r3, [r2, #8]
 800750c:	e032      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007524:	461a      	mov	r2, r3
 8007526:	2320      	movs	r3, #32
 8007528:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f006 fa97 	bl	800da64 <HAL_PCD_DataOutStageCallback>
 8007536:	e01d      	b.n	8007574 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d114      	bne.n	8007568 <PCD_EP_OutXfrComplete_int+0x1b0>
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d108      	bne.n	8007568 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007560:	461a      	mov	r2, r3
 8007562:	2100      	movs	r1, #0
 8007564:	f004 f816 	bl	800b594 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f006 fa78 	bl	800da64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	4f54300a 	.word	0x4f54300a
 8007584:	4f54310a 	.word	0x4f54310a

08007588 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	333c      	adds	r3, #60	@ 0x3c
 80075a0:	3304      	adds	r3, #4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a15      	ldr	r2, [pc, #84]	@ (8007610 <PCD_EP_OutSetupPacket_int+0x88>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d90e      	bls.n	80075dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d4:	461a      	mov	r2, r3
 80075d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f006 fa2f 	bl	800da40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007610 <PCD_EP_OutSetupPacket_int+0x88>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d90c      	bls.n	8007604 <PCD_EP_OutSetupPacket_int+0x7c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	799b      	ldrb	r3, [r3, #6]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d108      	bne.n	8007604 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075fc:	461a      	mov	r2, r3
 80075fe:	2101      	movs	r1, #1
 8007600:	f003 ffc8 	bl	800b594 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	4f54300a 	.word	0x4f54300a

08007614 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
 8007620:	4613      	mov	r3, r2
 8007622:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d107      	bne.n	8007642 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007632:	883b      	ldrh	r3, [r7, #0]
 8007634:	0419      	lsls	r1, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	430a      	orrs	r2, r1
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007640:	e028      	b.n	8007694 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4413      	add	r3, r2
 800764e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	e00d      	b.n	8007672 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	3340      	adds	r3, #64	@ 0x40
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	3301      	adds	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	7bfa      	ldrb	r2, [r7, #15]
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	3b01      	subs	r3, #1
 8007678:	429a      	cmp	r2, r3
 800767a:	d3ec      	bcc.n	8007656 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800767c:	883b      	ldrh	r3, [r7, #0]
 800767e:	0418      	lsls	r0, r3, #16
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	3b01      	subs	r3, #1
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	4302      	orrs	r2, r0
 800768c:	3340      	adds	r3, #64	@ 0x40
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	887a      	ldrh	r2, [r7, #2]
 80076b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e267      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d075      	beq.n	80077e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80076fa:	4b88      	ldr	r3, [pc, #544]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b04      	cmp	r3, #4
 8007704:	d00c      	beq.n	8007720 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007706:	4b85      	ldr	r3, [pc, #532]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800770e:	2b08      	cmp	r3, #8
 8007710:	d112      	bne.n	8007738 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007712:	4b82      	ldr	r3, [pc, #520]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800771a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800771e:	d10b      	bne.n	8007738 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007720:	4b7e      	ldr	r3, [pc, #504]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05b      	beq.n	80077e4 <HAL_RCC_OscConfig+0x108>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d157      	bne.n	80077e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e242      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007740:	d106      	bne.n	8007750 <HAL_RCC_OscConfig+0x74>
 8007742:	4b76      	ldr	r3, [pc, #472]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a75      	ldr	r2, [pc, #468]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e01d      	b.n	800778c <HAL_RCC_OscConfig+0xb0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007758:	d10c      	bne.n	8007774 <HAL_RCC_OscConfig+0x98>
 800775a:	4b70      	ldr	r3, [pc, #448]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a6f      	ldr	r2, [pc, #444]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	4b6d      	ldr	r3, [pc, #436]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a6c      	ldr	r2, [pc, #432]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800776c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e00b      	b.n	800778c <HAL_RCC_OscConfig+0xb0>
 8007774:	4b69      	ldr	r3, [pc, #420]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a68      	ldr	r2, [pc, #416]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800777a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4b66      	ldr	r3, [pc, #408]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a65      	ldr	r2, [pc, #404]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800778a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d013      	beq.n	80077bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007794:	f7fb f882 	bl	800289c <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800779c:	f7fb f87e 	bl	800289c <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b64      	cmp	r3, #100	@ 0x64
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e207      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ae:	4b5b      	ldr	r3, [pc, #364]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0f0      	beq.n	800779c <HAL_RCC_OscConfig+0xc0>
 80077ba:	e014      	b.n	80077e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077bc:	f7fb f86e 	bl	800289c <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077c4:	f7fb f86a 	bl	800289c <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b64      	cmp	r3, #100	@ 0x64
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e1f3      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077d6:	4b51      	ldr	r3, [pc, #324]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1f0      	bne.n	80077c4 <HAL_RCC_OscConfig+0xe8>
 80077e2:	e000      	b.n	80077e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d063      	beq.n	80078ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80077f2:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077fe:	4b47      	ldr	r3, [pc, #284]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007806:	2b08      	cmp	r3, #8
 8007808:	d11c      	bne.n	8007844 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800780a:	4b44      	ldr	r3, [pc, #272]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d116      	bne.n	8007844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007816:	4b41      	ldr	r3, [pc, #260]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <HAL_RCC_OscConfig+0x152>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d001      	beq.n	800782e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e1c7      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800782e:	4b3b      	ldr	r3, [pc, #236]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4937      	ldr	r1, [pc, #220]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800783e:	4313      	orrs	r3, r2
 8007840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007842:	e03a      	b.n	80078ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d020      	beq.n	800788e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800784c:	4b34      	ldr	r3, [pc, #208]	@ (8007920 <HAL_RCC_OscConfig+0x244>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007852:	f7fb f823 	bl	800289c <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007858:	e008      	b.n	800786c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800785a:	f7fb f81f 	bl	800289c <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e1a8      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786c:	4b2b      	ldr	r3, [pc, #172]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0f0      	beq.n	800785a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007878:	4b28      	ldr	r3, [pc, #160]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4925      	ldr	r1, [pc, #148]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 8007888:	4313      	orrs	r3, r2
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	e015      	b.n	80078ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800788e:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <HAL_RCC_OscConfig+0x244>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fb f802 	bl	800289c <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789c:	f7fa fffe 	bl	800289c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e187      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ae:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d036      	beq.n	8007934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ce:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <HAL_RCC_OscConfig+0x248>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d4:	f7fa ffe2 	bl	800289c <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078dc:	f7fa ffde 	bl	800289c <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e167      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <HAL_RCC_OscConfig+0x240>)
 80078f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x200>
 80078fa:	e01b      	b.n	8007934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <HAL_RCC_OscConfig+0x248>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007902:	f7fa ffcb 	bl	800289c <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007908:	e00e      	b.n	8007928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800790a:	f7fa ffc7 	bl	800289c <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d907      	bls.n	8007928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e150      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
 800791c:	40023800 	.word	0x40023800
 8007920:	42470000 	.word	0x42470000
 8007924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007928:	4b88      	ldr	r3, [pc, #544]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 800792a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1ea      	bne.n	800790a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8097 	beq.w	8007a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007946:	4b81      	ldr	r3, [pc, #516]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10f      	bne.n	8007972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	4b7d      	ldr	r3, [pc, #500]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	4a7c      	ldr	r2, [pc, #496]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 800795c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007960:	6413      	str	r3, [r2, #64]	@ 0x40
 8007962:	4b7a      	ldr	r3, [pc, #488]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007972:	4b77      	ldr	r3, [pc, #476]	@ (8007b50 <HAL_RCC_OscConfig+0x474>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d118      	bne.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800797e:	4b74      	ldr	r3, [pc, #464]	@ (8007b50 <HAL_RCC_OscConfig+0x474>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a73      	ldr	r2, [pc, #460]	@ (8007b50 <HAL_RCC_OscConfig+0x474>)
 8007984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800798a:	f7fa ff87 	bl	800289c <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007992:	f7fa ff83 	bl	800289c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e10c      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007b50 <HAL_RCC_OscConfig+0x474>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d106      	bne.n	80079c6 <HAL_RCC_OscConfig+0x2ea>
 80079b8:	4b64      	ldr	r3, [pc, #400]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079bc:	4a63      	ldr	r2, [pc, #396]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079c4:	e01c      	b.n	8007a00 <HAL_RCC_OscConfig+0x324>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d10c      	bne.n	80079e8 <HAL_RCC_OscConfig+0x30c>
 80079ce:	4b5f      	ldr	r3, [pc, #380]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d2:	4a5e      	ldr	r2, [pc, #376]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079d4:	f043 0304 	orr.w	r3, r3, #4
 80079d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079da:	4b5c      	ldr	r3, [pc, #368]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079de:	4a5b      	ldr	r2, [pc, #364]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80079e6:	e00b      	b.n	8007a00 <HAL_RCC_OscConfig+0x324>
 80079e8:	4b58      	ldr	r3, [pc, #352]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ec:	4a57      	ldr	r2, [pc, #348]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079f4:	4b55      	ldr	r3, [pc, #340]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f8:	4a54      	ldr	r2, [pc, #336]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 80079fa:	f023 0304 	bic.w	r3, r3, #4
 80079fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d015      	beq.n	8007a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a08:	f7fa ff48 	bl	800289c <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0e:	e00a      	b.n	8007a26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a10:	f7fa ff44 	bl	800289c <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e0cb      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a26:	4b49      	ldr	r3, [pc, #292]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0ee      	beq.n	8007a10 <HAL_RCC_OscConfig+0x334>
 8007a32:	e014      	b.n	8007a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a34:	f7fa ff32 	bl	800289c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fa ff2e 	bl	800289c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e0b5      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a52:	4b3e      	ldr	r3, [pc, #248]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1ee      	bne.n	8007a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d105      	bne.n	8007a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a64:	4b39      	ldr	r3, [pc, #228]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a68:	4a38      	ldr	r2, [pc, #224]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80a1 	beq.w	8007bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a7a:	4b34      	ldr	r3, [pc, #208]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 030c 	and.w	r3, r3, #12
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d05c      	beq.n	8007b40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d141      	bne.n	8007b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8e:	4b31      	ldr	r3, [pc, #196]	@ (8007b54 <HAL_RCC_OscConfig+0x478>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a94:	f7fa ff02 	bl	800289c <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7fa fefe 	bl	800289c <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e087      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aae:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69da      	ldr	r2, [r3, #28]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	019b      	lsls	r3, r3, #6
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	085b      	lsrs	r3, r3, #1
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	041b      	lsls	r3, r3, #16
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	491b      	ldr	r1, [pc, #108]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b54 <HAL_RCC_OscConfig+0x478>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aea:	f7fa fed7 	bl	800289c <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af2:	f7fa fed3 	bl	800289c <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e05c      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b04:	4b11      	ldr	r3, [pc, #68]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0f0      	beq.n	8007af2 <HAL_RCC_OscConfig+0x416>
 8007b10:	e054      	b.n	8007bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b12:	4b10      	ldr	r3, [pc, #64]	@ (8007b54 <HAL_RCC_OscConfig+0x478>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7fa fec0 	bl	800289c <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b20:	f7fa febc 	bl	800289c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e045      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <HAL_RCC_OscConfig+0x470>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x444>
 8007b3e:	e03d      	b.n	8007bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d107      	bne.n	8007b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e038      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	40007000 	.word	0x40007000
 8007b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b58:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc8 <HAL_RCC_OscConfig+0x4ec>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d028      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d121      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d11a      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b88:	4013      	ands	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d111      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d001      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40023800 	.word	0x40023800

08007bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0cc      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007be0:	4b68      	ldr	r3, [pc, #416]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d90c      	bls.n	8007c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bee:	4b65      	ldr	r3, [pc, #404]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf6:	4b63      	ldr	r3, [pc, #396]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d001      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0b8      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d020      	beq.n	8007c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c20:	4b59      	ldr	r3, [pc, #356]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a58      	ldr	r2, [pc, #352]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c38:	4b53      	ldr	r3, [pc, #332]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4a52      	ldr	r2, [pc, #328]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c44:	4b50      	ldr	r3, [pc, #320]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	494d      	ldr	r1, [pc, #308]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d044      	beq.n	8007cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d107      	bne.n	8007c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6a:	4b47      	ldr	r3, [pc, #284]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d119      	bne.n	8007caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e07f      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d003      	beq.n	8007c8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d107      	bne.n	8007c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e06f      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e067      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007caa:	4b37      	ldr	r3, [pc, #220]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f023 0203 	bic.w	r2, r3, #3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4934      	ldr	r1, [pc, #208]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cbc:	f7fa fdee 	bl	800289c <HAL_GetTick>
 8007cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc2:	e00a      	b.n	8007cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cc4:	f7fa fdea 	bl	800289c <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e04f      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cda:	4b2b      	ldr	r3, [pc, #172]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 020c 	and.w	r2, r3, #12
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d1eb      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cec:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d20c      	bcs.n	8007d14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cfa:	4b22      	ldr	r3, [pc, #136]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d02:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <HAL_RCC_ClockConfig+0x1b8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d001      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e032      	b.n	8007d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d20:	4b19      	ldr	r3, [pc, #100]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4916      	ldr	r1, [pc, #88]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d3e:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	490e      	ldr	r1, [pc, #56]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d52:	f000 f821 	bl	8007d98 <HAL_RCC_GetSysClockFreq>
 8007d56:	4602      	mov	r2, r0
 8007d58:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	490a      	ldr	r1, [pc, #40]	@ (8007d8c <HAL_RCC_ClockConfig+0x1c0>)
 8007d64:	5ccb      	ldrb	r3, [r1, r3]
 8007d66:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6a:	4a09      	ldr	r2, [pc, #36]	@ (8007d90 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <HAL_RCC_ClockConfig+0x1c8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fa fd4e 	bl	8002814 <HAL_InitTick>

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40023c00 	.word	0x40023c00
 8007d88:	40023800 	.word	0x40023800
 8007d8c:	0801125c 	.word	0x0801125c
 8007d90:	20000018 	.word	0x20000018
 8007d94:	2000001c 	.word	0x2000001c

08007d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d9c:	b094      	sub	sp, #80	@ 0x50
 8007d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007db0:	4b79      	ldr	r3, [pc, #484]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 030c 	and.w	r3, r3, #12
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d00d      	beq.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	f200 80e1 	bhi.w	8007f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_RCC_GetSysClockFreq+0x34>
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d003      	beq.n	8007dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007dca:	e0db      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dcc:	4b73      	ldr	r3, [pc, #460]	@ (8007f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dd0:	e0db      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dd2:	4b72      	ldr	r3, [pc, #456]	@ (8007f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dd6:	e0d8      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007de0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007de2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d063      	beq.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dee:	4b6a      	ldr	r3, [pc, #424]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	099b      	lsrs	r3, r3, #6
 8007df4:	2200      	movs	r2, #0
 8007df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007df8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e02:	2300      	movs	r3, #0
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	f04f 0000 	mov.w	r0, #0
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	0159      	lsls	r1, r3, #5
 8007e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e1c:	0150      	lsls	r0, r2, #5
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4621      	mov	r1, r4
 8007e24:	1a51      	subs	r1, r2, r1
 8007e26:	6139      	str	r1, [r7, #16]
 8007e28:	4629      	mov	r1, r5
 8007e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	018b      	lsls	r3, r1, #6
 8007e40:	4651      	mov	r1, sl
 8007e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e46:	4651      	mov	r1, sl
 8007e48:	018a      	lsls	r2, r1, #6
 8007e4a:	4651      	mov	r1, sl
 8007e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8007e50:	4659      	mov	r1, fp
 8007e52:	eb63 0901 	sbc.w	r9, r3, r1
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e6a:	4690      	mov	r8, r2
 8007e6c:	4699      	mov	r9, r3
 8007e6e:	4623      	mov	r3, r4
 8007e70:	eb18 0303 	adds.w	r3, r8, r3
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	462b      	mov	r3, r5
 8007e78:	eb49 0303 	adc.w	r3, r9, r3
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	f04f 0200 	mov.w	r2, #0
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	028b      	lsls	r3, r1, #10
 8007e8e:	4621      	mov	r1, r4
 8007e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e94:	4621      	mov	r1, r4
 8007e96:	028a      	lsls	r2, r1, #10
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ea8:	f7f8 fea6 	bl	8000bf8 <__aeabi_uldivmod>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eb4:	e058      	b.n	8007f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb6:	4b38      	ldr	r3, [pc, #224]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	099b      	lsrs	r3, r3, #6
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ec6:	623b      	str	r3, [r7, #32]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	f04f 0000 	mov.w	r0, #0
 8007ed8:	f04f 0100 	mov.w	r1, #0
 8007edc:	0159      	lsls	r1, r3, #5
 8007ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ee2:	0150      	lsls	r0, r2, #5
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4641      	mov	r1, r8
 8007eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8007eee:	4649      	mov	r1, r9
 8007ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f08:	ebb2 040a 	subs.w	r4, r2, sl
 8007f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	00eb      	lsls	r3, r5, #3
 8007f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f1e:	00e2      	lsls	r2, r4, #3
 8007f20:	4614      	mov	r4, r2
 8007f22:	461d      	mov	r5, r3
 8007f24:	4643      	mov	r3, r8
 8007f26:	18e3      	adds	r3, r4, r3
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	464b      	mov	r3, r9
 8007f2c:	eb45 0303 	adc.w	r3, r5, r3
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f3e:	4629      	mov	r1, r5
 8007f40:	028b      	lsls	r3, r1, #10
 8007f42:	4621      	mov	r1, r4
 8007f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f48:	4621      	mov	r1, r4
 8007f4a:	028a      	lsls	r2, r1, #10
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f52:	2200      	movs	r2, #0
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	61fa      	str	r2, [r7, #28]
 8007f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f5c:	f7f8 fe4c 	bl	8000bf8 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4613      	mov	r3, r2
 8007f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007f68:	4b0b      	ldr	r3, [pc, #44]	@ (8007f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	3301      	adds	r3, #1
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f82:	e002      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3750      	adds	r7, #80	@ 0x50
 8007f90:	46bd      	mov	sp, r7
 8007f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f96:	bf00      	nop
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	00f42400 	.word	0x00f42400

08007fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	@ (8007fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000018 	.word	0x20000018

08007fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fbc:	f7ff fff0 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	0a9b      	lsrs	r3, r3, #10
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	4903      	ldr	r1, [pc, #12]	@ (8007fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fce:	5ccb      	ldrb	r3, [r1, r3]
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	0801126c 	.word	0x0801126c

08007fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fe4:	f7ff ffdc 	bl	8007fa0 <HAL_RCC_GetHCLKFreq>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4b05      	ldr	r3, [pc, #20]	@ (8008000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	0b5b      	lsrs	r3, r3, #13
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	4903      	ldr	r1, [pc, #12]	@ (8008004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ff6:	5ccb      	ldrb	r3, [r1, r3]
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40023800 	.word	0x40023800
 8008004:	0801126c 	.word	0x0801126c

08008008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e041      	b.n	800809e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fa f97a 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f000 fc3c 	bl	80088c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d001      	beq.n	80080c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e044      	b.n	800814a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008158 <HAL_TIM_Base_Start_IT+0xb0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x6c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ea:	d013      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x6c>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1a      	ldr	r2, [pc, #104]	@ (800815c <HAL_TIM_Base_Start_IT+0xb4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00e      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x6c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <HAL_TIM_Base_Start_IT+0xb8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x6c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a17      	ldr	r2, [pc, #92]	@ (8008164 <HAL_TIM_Base_Start_IT+0xbc>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0x6c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a16      	ldr	r2, [pc, #88]	@ (8008168 <HAL_TIM_Base_Start_IT+0xc0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d111      	bne.n	8008138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b06      	cmp	r3, #6
 8008124:	d010      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008136:	e007      	b.n	8008148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40014000 	.word	0x40014000

0800816c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e041      	b.n	8008202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f839 	bl	800820a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f000 fb8a 	bl	80088c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <HAL_TIM_PWM_Start+0x24>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	bf14      	ite	ne
 800823c:	2301      	movne	r3, #1
 800823e:	2300      	moveq	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	e022      	b.n	800828a <HAL_TIM_PWM_Start+0x6a>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b04      	cmp	r3, #4
 8008248:	d109      	bne.n	800825e <HAL_TIM_PWM_Start+0x3e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b01      	cmp	r3, #1
 8008254:	bf14      	ite	ne
 8008256:	2301      	movne	r3, #1
 8008258:	2300      	moveq	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	e015      	b.n	800828a <HAL_TIM_PWM_Start+0x6a>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d109      	bne.n	8008278 <HAL_TIM_PWM_Start+0x58>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	bf14      	ite	ne
 8008270:	2301      	movne	r3, #1
 8008272:	2300      	moveq	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	e008      	b.n	800828a <HAL_TIM_PWM_Start+0x6a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	bf14      	ite	ne
 8008284:	2301      	movne	r3, #1
 8008286:	2300      	moveq	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e068      	b.n	8008364 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0x82>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082a0:	e013      	b.n	80082ca <HAL_TIM_PWM_Start+0xaa>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0x92>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_PWM_Start+0xaa>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Start+0xa2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c0:	e003      	b.n	80082ca <HAL_TIM_PWM_Start+0xaa>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2201      	movs	r2, #1
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fda8 	bl	8008e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	@ (800836c <HAL_TIM_PWM_Start+0x14c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d107      	bne.n	80082f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1d      	ldr	r2, [pc, #116]	@ (800836c <HAL_TIM_PWM_Start+0x14c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d018      	beq.n	800832e <HAL_TIM_PWM_Start+0x10e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008304:	d013      	beq.n	800832e <HAL_TIM_PWM_Start+0x10e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <HAL_TIM_PWM_Start+0x150>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <HAL_TIM_PWM_Start+0x10e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a17      	ldr	r2, [pc, #92]	@ (8008374 <HAL_TIM_PWM_Start+0x154>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <HAL_TIM_PWM_Start+0x10e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a16      	ldr	r2, [pc, #88]	@ (8008378 <HAL_TIM_PWM_Start+0x158>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <HAL_TIM_PWM_Start+0x10e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a14      	ldr	r2, [pc, #80]	@ (800837c <HAL_TIM_PWM_Start+0x15c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d111      	bne.n	8008352 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b06      	cmp	r3, #6
 800833e:	d010      	beq.n	8008362 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008350:	e007      	b.n	8008362 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f042 0201 	orr.w	r2, r2, #1
 8008360:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40010000 	.word	0x40010000
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40014000 	.word	0x40014000

08008380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d020      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01b      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f06f 0202 	mvn.w	r2, #2
 80083b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa5b 	bl	8008886 <HAL_TIM_IC_CaptureCallback>
 80083d0:	e005      	b.n	80083de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa4d 	bl	8008872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa5e 	bl	800889a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d020      	beq.n	8008430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01b      	beq.n	8008430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0204 	mvn.w	r2, #4
 8008400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa35 	bl	8008886 <HAL_TIM_IC_CaptureCallback>
 800841c:	e005      	b.n	800842a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa27 	bl	8008872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa38 	bl	800889a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d020      	beq.n	800847c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01b      	beq.n	800847c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0208 	mvn.w	r2, #8
 800844c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2204      	movs	r2, #4
 8008452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa0f 	bl	8008886 <HAL_TIM_IC_CaptureCallback>
 8008468:	e005      	b.n	8008476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa01 	bl	8008872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa12 	bl	800889a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f003 0310 	and.w	r3, r3, #16
 8008482:	2b00      	cmp	r3, #0
 8008484:	d020      	beq.n	80084c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01b      	beq.n	80084c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f06f 0210 	mvn.w	r2, #16
 8008498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2208      	movs	r2, #8
 800849e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9e9 	bl	8008886 <HAL_TIM_IC_CaptureCallback>
 80084b4:	e005      	b.n	80084c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9db 	bl	8008872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f9ec 	bl	800889a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00c      	beq.n	80084ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0201 	mvn.w	r2, #1
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f8 fcfe 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00c      	beq.n	8008510 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd2a 	bl	8008f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9bd 	bl	80088ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0220 	mvn.w	r2, #32
 8008550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fcfc 	bl	8008f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800857a:	2302      	movs	r3, #2
 800857c:	e0ae      	b.n	80086dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	f200 809f 	bhi.w	80086cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085c9 	.word	0x080085c9
 8008598:	080086cd 	.word	0x080086cd
 800859c:	080086cd 	.word	0x080086cd
 80085a0:	080086cd 	.word	0x080086cd
 80085a4:	08008609 	.word	0x08008609
 80085a8:	080086cd 	.word	0x080086cd
 80085ac:	080086cd 	.word	0x080086cd
 80085b0:	080086cd 	.word	0x080086cd
 80085b4:	0800864b 	.word	0x0800864b
 80085b8:	080086cd 	.word	0x080086cd
 80085bc:	080086cd 	.word	0x080086cd
 80085c0:	080086cd 	.word	0x080086cd
 80085c4:	0800868b 	.word	0x0800868b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fa04 	bl	80089dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0208 	orr.w	r2, r2, #8
 80085e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699a      	ldr	r2, [r3, #24]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0204 	bic.w	r2, r2, #4
 80085f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6999      	ldr	r1, [r3, #24]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	619a      	str	r2, [r3, #24]
      break;
 8008606:	e064      	b.n	80086d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fa4a 	bl	8008aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6999      	ldr	r1, [r3, #24]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	021a      	lsls	r2, r3, #8
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	619a      	str	r2, [r3, #24]
      break;
 8008648:	e043      	b.n	80086d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa95 	bl	8008b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0208 	orr.w	r2, r2, #8
 8008664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0204 	bic.w	r2, r2, #4
 8008674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69d9      	ldr	r1, [r3, #28]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	61da      	str	r2, [r3, #28]
      break;
 8008688:	e023      	b.n	80086d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fadf 	bl	8008c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69da      	ldr	r2, [r3, #28]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69d9      	ldr	r1, [r3, #28]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	021a      	lsls	r2, r3, #8
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	61da      	str	r2, [r3, #28]
      break;
 80086ca:	e002      	b.n	80086d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
      break;
 80086d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIM_ConfigClockSource+0x1c>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e0b4      	b.n	800886a <HAL_TIM_ConfigClockSource+0x186>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800871e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008738:	d03e      	beq.n	80087b8 <HAL_TIM_ConfigClockSource+0xd4>
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873e:	f200 8087 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008746:	f000 8086 	beq.w	8008856 <HAL_TIM_ConfigClockSource+0x172>
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800874e:	d87f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008750:	2b70      	cmp	r3, #112	@ 0x70
 8008752:	d01a      	beq.n	800878a <HAL_TIM_ConfigClockSource+0xa6>
 8008754:	2b70      	cmp	r3, #112	@ 0x70
 8008756:	d87b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008758:	2b60      	cmp	r3, #96	@ 0x60
 800875a:	d050      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x11a>
 800875c:	2b60      	cmp	r3, #96	@ 0x60
 800875e:	d877      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008760:	2b50      	cmp	r3, #80	@ 0x50
 8008762:	d03c      	beq.n	80087de <HAL_TIM_ConfigClockSource+0xfa>
 8008764:	2b50      	cmp	r3, #80	@ 0x50
 8008766:	d873      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b40      	cmp	r3, #64	@ 0x40
 800876a:	d058      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x13a>
 800876c:	2b40      	cmp	r3, #64	@ 0x40
 800876e:	d86f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b30      	cmp	r3, #48	@ 0x30
 8008772:	d064      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x15a>
 8008774:	2b30      	cmp	r3, #48	@ 0x30
 8008776:	d86b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d060      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x15a>
 800877c:	2b20      	cmp	r3, #32
 800877e:	d867      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d05c      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x15a>
 8008784:	2b10      	cmp	r3, #16
 8008786:	d05a      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x15a>
 8008788:	e062      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800879a:	f000 fb25 	bl	8008de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	609a      	str	r2, [r3, #8]
      break;
 80087b6:	e04f      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087c8:	f000 fb0e 	bl	8008de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087da:	609a      	str	r2, [r3, #8]
      break;
 80087dc:	e03c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ea:	461a      	mov	r2, r3
 80087ec:	f000 fa82 	bl	8008cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2150      	movs	r1, #80	@ 0x50
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fadb 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 80087fc:	e02c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800880a:	461a      	mov	r2, r3
 800880c:	f000 faa1 	bl	8008d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2160      	movs	r1, #96	@ 0x60
 8008816:	4618      	mov	r0, r3
 8008818:	f000 facb 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 800881c:	e01c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800882a:	461a      	mov	r2, r3
 800882c:	f000 fa62 	bl	8008cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2140      	movs	r1, #64	@ 0x40
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fabb 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 800883c:	e00c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f000 fab2 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 800884e:	e003      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
      break;
 8008854:	e000      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a3a      	ldr	r2, [pc, #232]	@ (80089c0 <TIM_Base_SetConfig+0xfc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00f      	beq.n	80088fc <TIM_Base_SetConfig+0x38>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e2:	d00b      	beq.n	80088fc <TIM_Base_SetConfig+0x38>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a37      	ldr	r2, [pc, #220]	@ (80089c4 <TIM_Base_SetConfig+0x100>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d007      	beq.n	80088fc <TIM_Base_SetConfig+0x38>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a36      	ldr	r2, [pc, #216]	@ (80089c8 <TIM_Base_SetConfig+0x104>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_Base_SetConfig+0x38>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a35      	ldr	r2, [pc, #212]	@ (80089cc <TIM_Base_SetConfig+0x108>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d108      	bne.n	800890e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2b      	ldr	r2, [pc, #172]	@ (80089c0 <TIM_Base_SetConfig+0xfc>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01b      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891c:	d017      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a28      	ldr	r2, [pc, #160]	@ (80089c4 <TIM_Base_SetConfig+0x100>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a27      	ldr	r2, [pc, #156]	@ (80089c8 <TIM_Base_SetConfig+0x104>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a26      	ldr	r2, [pc, #152]	@ (80089cc <TIM_Base_SetConfig+0x108>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a25      	ldr	r2, [pc, #148]	@ (80089d0 <TIM_Base_SetConfig+0x10c>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a24      	ldr	r2, [pc, #144]	@ (80089d4 <TIM_Base_SetConfig+0x110>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_Base_SetConfig+0x8a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a23      	ldr	r2, [pc, #140]	@ (80089d8 <TIM_Base_SetConfig+0x114>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d108      	bne.n	8008960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a0e      	ldr	r2, [pc, #56]	@ (80089c0 <TIM_Base_SetConfig+0xfc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d103      	bne.n	8008994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d105      	bne.n	80089b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f023 0201 	bic.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	611a      	str	r2, [r3, #16]
  }
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800

080089dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	f023 0201 	bic.w	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f023 0302 	bic.w	r3, r3, #2
 8008a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa4 <TIM_OC1_SetConfig+0xc8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d10c      	bne.n	8008a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f023 0308 	bic.w	r3, r3, #8
 8008a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f023 0304 	bic.w	r3, r3, #4
 8008a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a13      	ldr	r2, [pc, #76]	@ (8008aa4 <TIM_OC1_SetConfig+0xc8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d111      	bne.n	8008a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	621a      	str	r2, [r3, #32]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40010000 	.word	0x40010000

08008aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	f023 0210 	bic.w	r2, r3, #16
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f023 0320 	bic.w	r3, r3, #32
 8008af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1e      	ldr	r2, [pc, #120]	@ (8008b7c <TIM_OC2_SetConfig+0xd4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d10d      	bne.n	8008b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <TIM_OC2_SetConfig+0xd4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d113      	bne.n	8008b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40010000 	.word	0x40010000

08008b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c50 <TIM_OC3_SetConfig+0xd0>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d10d      	bne.n	8008bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a14      	ldr	r2, [pc, #80]	@ (8008c50 <TIM_OC3_SetConfig+0xd0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d113      	bne.n	8008c2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	40010000 	.word	0x40010000

08008c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	031b      	lsls	r3, r3, #12
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a10      	ldr	r2, [pc, #64]	@ (8008cf0 <TIM_OC4_SetConfig+0x9c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d109      	bne.n	8008cc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	019b      	lsls	r3, r3, #6
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	621a      	str	r2, [r3, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40010000 	.word	0x40010000

08008cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f023 0201 	bic.w	r2, r3, #1
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 030a 	bic.w	r3, r3, #10
 8008d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	621a      	str	r2, [r3, #32]
}
 8008d46:	bf00      	nop
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b087      	sub	sp, #28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	f023 0210 	bic.w	r2, r3, #16
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	031b      	lsls	r3, r3, #12
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f043 0307 	orr.w	r3, r3, #7
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	bf00      	nop
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e60:	431a      	orrs	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e050      	b.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1c      	ldr	r2, [pc, #112]	@ (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d018      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed8:	d013      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a18      	ldr	r2, [pc, #96]	@ (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00e      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a16      	ldr	r2, [pc, #88]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d009      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a15      	ldr	r2, [pc, #84]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d004      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a13      	ldr	r2, [pc, #76]	@ (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d10c      	bne.n	8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40000400 	.word	0x40000400
 8008f44:	40000800 	.word	0x40000800
 8008f48:	40000c00 	.word	0x40000c00
 8008f4c:	40014000 	.word	0x40014000

08008f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e042      	b.n	8009010 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7f9 fa74 	bl	800248c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2224      	movs	r2, #36	@ 0x24
 8008fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fdbd 	bl	8009b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	695a      	ldr	r2, [r3, #20]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	@ 0x28
 800901c:	af02      	add	r7, sp, #8
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	4613      	mov	r3, r2
 8009026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b20      	cmp	r3, #32
 8009036:	d175      	bne.n	8009124 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_UART_Transmit+0x2c>
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e06e      	b.n	8009126 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2221      	movs	r2, #33	@ 0x21
 8009052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009056:	f7f9 fc21 	bl	800289c <HAL_GetTick>
 800905a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009070:	d108      	bne.n	8009084 <HAL_UART_Transmit+0x6c>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	e003      	b.n	800908c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800908c:	e02e      	b.n	80090ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2200      	movs	r2, #0
 8009096:	2180      	movs	r1, #128	@ 0x80
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fb1f 	bl	80096dc <UART_WaitOnFlagUntilTimeout>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e03a      	b.n	8009126 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	3302      	adds	r3, #2
 80090ca:	61bb      	str	r3, [r7, #24]
 80090cc:	e007      	b.n	80090de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3301      	adds	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1cb      	bne.n	800908e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2200      	movs	r2, #0
 80090fe:	2140      	movs	r1, #64	@ 0x40
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 faeb 	bl	80096dc <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e006      	b.n	8009126 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2220      	movs	r2, #32
 800911c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	e000      	b.n	8009126 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009124:	2302      	movs	r3, #2
  }
}
 8009126:	4618      	mov	r0, r3
 8009128:	3720      	adds	r7, #32
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	4613      	mov	r3, r2
 800913a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b20      	cmp	r3, #32
 8009146:	d112      	bne.n	800916e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_UART_Receive_IT+0x26>
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e00b      	b.n	8009170 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	461a      	mov	r2, r3
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fb12 	bl	800978e <UART_Start_Receive_IT>
 800916a:	4603      	mov	r3, r0
 800916c:	e000      	b.n	8009170 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800916e:	2302      	movs	r3, #2
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b0ba      	sub	sp, #232	@ 0xe8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800919e:	2300      	movs	r3, #0
 80091a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80091b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10f      	bne.n	80091de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <HAL_UART_IRQHandler+0x66>
 80091ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fbf2 	bl	80099c0 <UART_Receive_IT>
      return;
 80091dc:	e25b      	b.n	8009696 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80de 	beq.w	80093a4 <HAL_UART_IRQHandler+0x22c>
 80091e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80d1 	beq.w	80093a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00b      	beq.n	8009226 <HAL_UART_IRQHandler+0xae>
 800920e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009216:	2b00      	cmp	r3, #0
 8009218:	d005      	beq.n	8009226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921e:	f043 0201 	orr.w	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <HAL_UART_IRQHandler+0xd2>
 8009232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009242:	f043 0202 	orr.w	r2, r3, #2
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00b      	beq.n	800926e <HAL_UART_IRQHandler+0xf6>
 8009256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009266:	f043 0204 	orr.w	r2, r3, #4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800926e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d011      	beq.n	800929e <HAL_UART_IRQHandler+0x126>
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d105      	bne.n	8009292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009296:	f043 0208 	orr.w	r2, r3, #8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 81f2 	beq.w	800968c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <HAL_UART_IRQHandler+0x14e>
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fb7d 	bl	80099c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	bf0c      	ite	eq
 80092d4:	2301      	moveq	r3, #1
 80092d6:	2300      	movne	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d103      	bne.n	80092f2 <HAL_UART_IRQHandler+0x17a>
 80092ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04f      	beq.n	8009392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa85 	bl	8009802 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009302:	2b40      	cmp	r3, #64	@ 0x40
 8009304:	d141      	bne.n	800938a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3314      	adds	r3, #20
 800930c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800931c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800933e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800934a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1d9      	bne.n	8009306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d013      	beq.n	8009382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935e:	4a7e      	ldr	r2, [pc, #504]	@ (8009558 <HAL_UART_IRQHandler+0x3e0>)
 8009360:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009366:	4618      	mov	r0, r3
 8009368:	f7f9 fcf8 	bl	8002d5c <HAL_DMA_Abort_IT>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d016      	beq.n	80093a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009380:	e00e      	b.n	80093a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f994 	bl	80096b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009388:	e00a      	b.n	80093a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f990 	bl	80096b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	e006      	b.n	80093a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f98c 	bl	80096b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800939e:	e175      	b.n	800968c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a0:	bf00      	nop
    return;
 80093a2:	e173      	b.n	800968c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	f040 814f 	bne.w	800964c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8148 	beq.w	800964c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8141 	beq.w	800964c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	60bb      	str	r3, [r7, #8]
 80093de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ea:	2b40      	cmp	r3, #64	@ 0x40
 80093ec:	f040 80b6 	bne.w	800955c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8145 	beq.w	8009690 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800940a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800940e:	429a      	cmp	r2, r3
 8009410:	f080 813e 	bcs.w	8009690 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800941a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009426:	f000 8088 	beq.w	800953a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	330c      	adds	r3, #12
 8009452:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009456:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800945a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800946e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1d9      	bne.n	800942a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3314      	adds	r3, #20
 8009496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800949a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800949e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e1      	bne.n	8009476 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3314      	adds	r3, #20
 80094b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3314      	adds	r3, #20
 80094d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e3      	bne.n	80094b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	330c      	adds	r3, #12
 80094fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800950a:	f023 0310 	bic.w	r3, r3, #16
 800950e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	330c      	adds	r3, #12
 8009518:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800951c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800951e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009522:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800952a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e3      	bne.n	80094f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009534:	4618      	mov	r0, r3
 8009536:	f7f9 fba1 	bl	8002c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2202      	movs	r2, #2
 800953e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009548:	b29b      	uxth	r3, r3
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	b29b      	uxth	r3, r3
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f8b7 	bl	80096c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009556:	e09b      	b.n	8009690 <HAL_UART_IRQHandler+0x518>
 8009558:	080098c9 	.word	0x080098c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009564:	b29b      	uxth	r3, r3
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009570:	b29b      	uxth	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 808e 	beq.w	8009694 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 8089 	beq.w	8009694 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	330c      	adds	r3, #12
 8009588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	330c      	adds	r3, #12
 80095a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80095a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80095a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e3      	bne.n	8009582 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3314      	adds	r3, #20
 80095c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	623b      	str	r3, [r7, #32]
   return(result);
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	f023 0301 	bic.w	r3, r3, #1
 80095d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3314      	adds	r3, #20
 80095da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095de:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e3      	bne.n	80095ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0310 	bic.w	r3, r3, #16
 8009616:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	330c      	adds	r3, #12
 8009620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009624:	61fa      	str	r2, [r7, #28]
 8009626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	69b9      	ldr	r1, [r7, #24]
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	617b      	str	r3, [r7, #20]
   return(result);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e3      	bne.n	8009600 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800963e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f83d 	bl	80096c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800964a:	e023      	b.n	8009694 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800964c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <HAL_UART_IRQHandler+0x4f4>
 8009658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800965c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f943 	bl	80098f0 <UART_Transmit_IT>
    return;
 800966a:	e014      	b.n	8009696 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00e      	beq.n	8009696 <HAL_UART_IRQHandler+0x51e>
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800967c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d008      	beq.n	8009696 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f983 	bl	8009990 <UART_EndTransmit_IT>
    return;
 800968a:	e004      	b.n	8009696 <HAL_UART_IRQHandler+0x51e>
    return;
 800968c:	bf00      	nop
 800968e:	e002      	b.n	8009696 <HAL_UART_IRQHandler+0x51e>
      return;
 8009690:	bf00      	nop
 8009692:	e000      	b.n	8009696 <HAL_UART_IRQHandler+0x51e>
      return;
 8009694:	bf00      	nop
  }
}
 8009696:	37e8      	adds	r7, #232	@ 0xe8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	4613      	mov	r3, r2
 80096ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ec:	e03b      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d037      	beq.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f6:	f7f9 f8d1 	bl	800289c <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	6a3a      	ldr	r2, [r7, #32]
 8009702:	429a      	cmp	r2, r3
 8009704:	d302      	bcc.n	800970c <UART_WaitOnFlagUntilTimeout+0x30>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e03a      	b.n	8009786 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d023      	beq.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b80      	cmp	r3, #128	@ 0x80
 8009722:	d020      	beq.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b40      	cmp	r3, #64	@ 0x40
 8009728:	d01d      	beq.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b08      	cmp	r3, #8
 8009736:	d116      	bne.n	8009766 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f857 	bl	8009802 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2208      	movs	r2, #8
 8009758:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e00f      	b.n	8009786 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4013      	ands	r3, r2
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	429a      	cmp	r2, r3
 8009774:	bf0c      	ite	eq
 8009776:	2301      	moveq	r3, #1
 8009778:	2300      	movne	r3, #0
 800977a:	b2db      	uxtb	r3, r3
 800977c:	461a      	mov	r2, r3
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	429a      	cmp	r2, r3
 8009782:	d0b4      	beq.n	80096ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	4613      	mov	r3, r2
 800979a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2222      	movs	r2, #34	@ 0x22
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695a      	ldr	r2, [r3, #20]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0220 	orr.w	r2, r2, #32
 80097f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009802:	b480      	push	{r7}
 8009804:	b095      	sub	sp, #84	@ 0x54
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	330c      	adds	r3, #12
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	330c      	adds	r3, #12
 8009828:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800982a:	643a      	str	r2, [r7, #64]	@ 0x40
 800982c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3314      	adds	r3, #20
 8009844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	61fb      	str	r3, [r7, #28]
   return(result);
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3314      	adds	r3, #20
 800985c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800985e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009860:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009876:	2b01      	cmp	r3, #1
 8009878:	d119      	bne.n	80098ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	330c      	adds	r3, #12
 8009880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	60bb      	str	r3, [r7, #8]
   return(result);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f023 0310 	bic.w	r3, r3, #16
 8009890:	647b      	str	r3, [r7, #68]	@ 0x44
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800989a:	61ba      	str	r2, [r7, #24]
 800989c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6979      	ldr	r1, [r7, #20]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	613b      	str	r3, [r7, #16]
   return(result);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098bc:	bf00      	nop
 80098be:	3754      	adds	r7, #84	@ 0x54
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff fee4 	bl	80096b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b21      	cmp	r3, #33	@ 0x21
 8009902:	d13e      	bne.n	8009982 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800990c:	d114      	bne.n	8009938 <UART_Transmit_IT+0x48>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d110      	bne.n	8009938 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800992a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	1c9a      	adds	r2, r3, #2
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	621a      	str	r2, [r3, #32]
 8009936:	e008      	b.n	800994a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	1c59      	adds	r1, r3, #1
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6211      	str	r1, [r2, #32]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800994e:	b29b      	uxth	r3, r3
 8009950:	3b01      	subs	r3, #1
 8009952:	b29b      	uxth	r3, r3
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	4619      	mov	r1, r3
 8009958:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10f      	bne.n	800997e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800996c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800997c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	e000      	b.n	8009984 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009982:	2302      	movs	r3, #2
  }
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff fe73 	bl	800969c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08c      	sub	sp, #48	@ 0x30
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b22      	cmp	r3, #34	@ 0x22
 80099d2:	f040 80ae 	bne.w	8009b32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099de:	d117      	bne.n	8009a10 <UART_Receive_IT+0x50>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d113      	bne.n	8009a10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a08:	1c9a      	adds	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a0e:	e026      	b.n	8009a5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a22:	d007      	beq.n	8009a34 <UART_Receive_IT+0x74>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <UART_Receive_IT+0x82>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	e008      	b.n	8009a54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d15d      	bne.n	8009b2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0220 	bic.w	r2, r2, #32
 8009a80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695a      	ldr	r2, [r3, #20]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0201 	bic.w	r2, r2, #1
 8009aa0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d135      	bne.n	8009b24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	330c      	adds	r3, #12
 8009ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f023 0310 	bic.w	r3, r3, #16
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	330c      	adds	r3, #12
 8009adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ade:	623a      	str	r2, [r7, #32]
 8009ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	69f9      	ldr	r1, [r7, #28]
 8009ae4:	6a3a      	ldr	r2, [r7, #32]
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e5      	bne.n	8009abe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d10a      	bne.n	8009b16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fdd1 	bl	80096c4 <HAL_UARTEx_RxEventCallback>
 8009b22:	e002      	b.n	8009b2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7f7 fc4b 	bl	80013c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e002      	b.n	8009b34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e000      	b.n	8009b34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b32:	2302      	movs	r3, #2
  }
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3730      	adds	r7, #48	@ 0x30
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b40:	b0c0      	sub	sp, #256	@ 0x100
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	68d9      	ldr	r1, [r3, #12]
 8009b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	ea40 0301 	orr.w	r3, r0, r1
 8009b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	431a      	orrs	r2, r3
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b94:	f021 010c 	bic.w	r1, r1, #12
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb6:	6999      	ldr	r1, [r3, #24]
 8009bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	ea40 0301 	orr.w	r3, r0, r1
 8009bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b8f      	ldr	r3, [pc, #572]	@ (8009e08 <UART_SetConfig+0x2cc>)
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d005      	beq.n	8009bdc <UART_SetConfig+0xa0>
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8009e0c <UART_SetConfig+0x2d0>)
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d104      	bne.n	8009be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bdc:	f7fe fa00 	bl	8007fe0 <HAL_RCC_GetPCLK2Freq>
 8009be0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009be4:	e003      	b.n	8009bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009be6:	f7fe f9e7 	bl	8007fb8 <HAL_RCC_GetPCLK1Freq>
 8009bea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bf8:	f040 810c 	bne.w	8009e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	1891      	adds	r1, r2, r2
 8009c14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c16:	415b      	adcs	r3, r3
 8009c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c1e:	4621      	mov	r1, r4
 8009c20:	eb12 0801 	adds.w	r8, r2, r1
 8009c24:	4629      	mov	r1, r5
 8009c26:	eb43 0901 	adc.w	r9, r3, r1
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	f04f 0300 	mov.w	r3, #0
 8009c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c3e:	4690      	mov	r8, r2
 8009c40:	4699      	mov	r9, r3
 8009c42:	4623      	mov	r3, r4
 8009c44:	eb18 0303 	adds.w	r3, r8, r3
 8009c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	eb49 0303 	adc.w	r3, r9, r3
 8009c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	18db      	adds	r3, r3, r3
 8009c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c70:	4613      	mov	r3, r2
 8009c72:	eb42 0303 	adc.w	r3, r2, r3
 8009c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c80:	f7f6 ffba 	bl	8000bf8 <__aeabi_uldivmod>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4b61      	ldr	r3, [pc, #388]	@ (8009e10 <UART_SetConfig+0x2d4>)
 8009c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	011c      	lsls	r4, r3, #4
 8009c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ca4:	4642      	mov	r2, r8
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	1891      	adds	r1, r2, r2
 8009caa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cac:	415b      	adcs	r3, r3
 8009cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8009cba:	4649      	mov	r1, r9
 8009cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cd4:	4692      	mov	sl, r2
 8009cd6:	469b      	mov	fp, r3
 8009cd8:	4643      	mov	r3, r8
 8009cda:	eb1a 0303 	adds.w	r3, sl, r3
 8009cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8009ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d00:	460b      	mov	r3, r1
 8009d02:	18db      	adds	r3, r3, r3
 8009d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d06:	4613      	mov	r3, r2
 8009d08:	eb42 0303 	adc.w	r3, r2, r3
 8009d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d16:	f7f6 ff6f 	bl	8000bf8 <__aeabi_uldivmod>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4b3b      	ldr	r3, [pc, #236]	@ (8009e10 <UART_SetConfig+0x2d4>)
 8009d22:	fba3 2301 	umull	r2, r3, r3, r1
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	2264      	movs	r2, #100	@ 0x64
 8009d2a:	fb02 f303 	mul.w	r3, r2, r3
 8009d2e:	1acb      	subs	r3, r1, r3
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d36:	4b36      	ldr	r3, [pc, #216]	@ (8009e10 <UART_SetConfig+0x2d4>)
 8009d38:	fba3 2302 	umull	r2, r3, r3, r2
 8009d3c:	095b      	lsrs	r3, r3, #5
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d44:	441c      	add	r4, r3
 8009d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	1891      	adds	r1, r2, r2
 8009d5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d60:	415b      	adcs	r3, r3
 8009d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d68:	4641      	mov	r1, r8
 8009d6a:	1851      	adds	r1, r2, r1
 8009d6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d6e:	4649      	mov	r1, r9
 8009d70:	414b      	adcs	r3, r1
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d74:	f04f 0200 	mov.w	r2, #0
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d80:	4659      	mov	r1, fp
 8009d82:	00cb      	lsls	r3, r1, #3
 8009d84:	4651      	mov	r1, sl
 8009d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d8a:	4651      	mov	r1, sl
 8009d8c:	00ca      	lsls	r2, r1, #3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4619      	mov	r1, r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	4642      	mov	r2, r8
 8009d96:	189b      	adds	r3, r3, r2
 8009d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	460a      	mov	r2, r1
 8009da0:	eb42 0303 	adc.w	r3, r2, r3
 8009da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009db4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	18db      	adds	r3, r3, r3
 8009dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	eb42 0303 	adc.w	r3, r2, r3
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009dd2:	f7f6 ff11 	bl	8000bf8 <__aeabi_uldivmod>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <UART_SetConfig+0x2d4>)
 8009ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8009de0:	095b      	lsrs	r3, r3, #5
 8009de2:	2164      	movs	r1, #100	@ 0x64
 8009de4:	fb01 f303 	mul.w	r3, r1, r3
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	3332      	adds	r3, #50	@ 0x32
 8009dee:	4a08      	ldr	r2, [pc, #32]	@ (8009e10 <UART_SetConfig+0x2d4>)
 8009df0:	fba2 2303 	umull	r2, r3, r2, r3
 8009df4:	095b      	lsrs	r3, r3, #5
 8009df6:	f003 0207 	and.w	r2, r3, #7
 8009dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4422      	add	r2, r4
 8009e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e04:	e106      	b.n	800a014 <UART_SetConfig+0x4d8>
 8009e06:	bf00      	nop
 8009e08:	40011000 	.word	0x40011000
 8009e0c:	40011400 	.word	0x40011400
 8009e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e26:	4642      	mov	r2, r8
 8009e28:	464b      	mov	r3, r9
 8009e2a:	1891      	adds	r1, r2, r2
 8009e2c:	6239      	str	r1, [r7, #32]
 8009e2e:	415b      	adcs	r3, r3
 8009e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e36:	4641      	mov	r1, r8
 8009e38:	1854      	adds	r4, r2, r1
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	eb43 0501 	adc.w	r5, r3, r1
 8009e40:	f04f 0200 	mov.w	r2, #0
 8009e44:	f04f 0300 	mov.w	r3, #0
 8009e48:	00eb      	lsls	r3, r5, #3
 8009e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e4e:	00e2      	lsls	r2, r4, #3
 8009e50:	4614      	mov	r4, r2
 8009e52:	461d      	mov	r5, r3
 8009e54:	4643      	mov	r3, r8
 8009e56:	18e3      	adds	r3, r4, r3
 8009e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	eb45 0303 	adc.w	r3, r5, r3
 8009e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	f04f 0300 	mov.w	r3, #0
 8009e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e82:	4629      	mov	r1, r5
 8009e84:	008b      	lsls	r3, r1, #2
 8009e86:	4621      	mov	r1, r4
 8009e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	008a      	lsls	r2, r1, #2
 8009e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e94:	f7f6 feb0 	bl	8000bf8 <__aeabi_uldivmod>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4b60      	ldr	r3, [pc, #384]	@ (800a020 <UART_SetConfig+0x4e4>)
 8009e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	011c      	lsls	r4, r3, #4
 8009ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	1891      	adds	r1, r2, r2
 8009ebe:	61b9      	str	r1, [r7, #24]
 8009ec0:	415b      	adcs	r3, r3
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ec8:	4641      	mov	r1, r8
 8009eca:	1851      	adds	r1, r2, r1
 8009ecc:	6139      	str	r1, [r7, #16]
 8009ece:	4649      	mov	r1, r9
 8009ed0:	414b      	adcs	r3, r1
 8009ed2:	617b      	str	r3, [r7, #20]
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	f04f 0300 	mov.w	r3, #0
 8009edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ee0:	4659      	mov	r1, fp
 8009ee2:	00cb      	lsls	r3, r1, #3
 8009ee4:	4651      	mov	r1, sl
 8009ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eea:	4651      	mov	r1, sl
 8009eec:	00ca      	lsls	r2, r1, #3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	189b      	adds	r3, r3, r2
 8009ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009efc:	464b      	mov	r3, r9
 8009efe:	460a      	mov	r2, r1
 8009f00:	eb42 0303 	adc.w	r3, r2, r3
 8009f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f20:	4649      	mov	r1, r9
 8009f22:	008b      	lsls	r3, r1, #2
 8009f24:	4641      	mov	r1, r8
 8009f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	008a      	lsls	r2, r1, #2
 8009f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f32:	f7f6 fe61 	bl	8000bf8 <__aeabi_uldivmod>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4b38      	ldr	r3, [pc, #224]	@ (800a020 <UART_SetConfig+0x4e4>)
 8009f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f42:	095b      	lsrs	r3, r3, #5
 8009f44:	2264      	movs	r2, #100	@ 0x64
 8009f46:	fb02 f303 	mul.w	r3, r2, r3
 8009f4a:	1acb      	subs	r3, r1, r3
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	3332      	adds	r3, #50	@ 0x32
 8009f50:	4a33      	ldr	r2, [pc, #204]	@ (800a020 <UART_SetConfig+0x4e4>)
 8009f52:	fba2 2303 	umull	r2, r3, r2, r3
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f5c:	441c      	add	r4, r3
 8009f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f62:	2200      	movs	r2, #0
 8009f64:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	1891      	adds	r1, r2, r2
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	415b      	adcs	r3, r3
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f7c:	4641      	mov	r1, r8
 8009f7e:	1851      	adds	r1, r2, r1
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	4649      	mov	r1, r9
 8009f84:	414b      	adcs	r3, r1
 8009f86:	607b      	str	r3, [r7, #4]
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f94:	4659      	mov	r1, fp
 8009f96:	00cb      	lsls	r3, r1, #3
 8009f98:	4651      	mov	r1, sl
 8009f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f9e:	4651      	mov	r1, sl
 8009fa0:	00ca      	lsls	r2, r1, #3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4642      	mov	r2, r8
 8009faa:	189b      	adds	r3, r3, r2
 8009fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fae:	464b      	mov	r3, r9
 8009fb0:	460a      	mov	r2, r1
 8009fb2:	eb42 0303 	adc.w	r3, r2, r3
 8009fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	008b      	lsls	r3, r1, #2
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fda:	4641      	mov	r1, r8
 8009fdc:	008a      	lsls	r2, r1, #2
 8009fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fe2:	f7f6 fe09 	bl	8000bf8 <__aeabi_uldivmod>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <UART_SetConfig+0x4e4>)
 8009fec:	fba3 1302 	umull	r1, r3, r3, r2
 8009ff0:	095b      	lsrs	r3, r3, #5
 8009ff2:	2164      	movs	r1, #100	@ 0x64
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	3332      	adds	r3, #50	@ 0x32
 8009ffe:	4a08      	ldr	r2, [pc, #32]	@ (800a020 <UART_SetConfig+0x4e4>)
 800a000:	fba2 2303 	umull	r2, r3, r2, r3
 800a004:	095b      	lsrs	r3, r3, #5
 800a006:	f003 020f 	and.w	r2, r3, #15
 800a00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4422      	add	r2, r4
 800a012:	609a      	str	r2, [r3, #8]
}
 800a014:	bf00      	nop
 800a016:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a01a:	46bd      	mov	sp, r7
 800a01c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a020:	51eb851f 	.word	0x51eb851f

0800a024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a024:	b084      	sub	sp, #16
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	f107 001c 	add.w	r0, r7, #28
 800a032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a036:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d123      	bne.n	800a086 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a042:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d105      	bne.n	800a07a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fae8 	bl	800b650 <USB_CoreReset>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]
 800a084:	e01b      	b.n	800a0be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fadc 	bl	800b650 <USB_CoreReset>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a09c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0b0:	e005      	b.n	800a0be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0be:	7fbb      	ldrb	r3, [r7, #30]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d10b      	bne.n	800a0dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f043 0206 	orr.w	r2, r3, #6
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f043 0220 	orr.w	r2, r3, #32
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0e8:	b004      	add	sp, #16
 800a0ea:	4770      	bx	lr

0800a0ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d165      	bne.n	800a1cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4a41      	ldr	r2, [pc, #260]	@ (800a208 <USB_SetTurnaroundTime+0x11c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d906      	bls.n	800a116 <USB_SetTurnaroundTime+0x2a>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4a40      	ldr	r2, [pc, #256]	@ (800a20c <USB_SetTurnaroundTime+0x120>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d202      	bcs.n	800a116 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a110:	230f      	movs	r3, #15
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	e062      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4a3c      	ldr	r2, [pc, #240]	@ (800a20c <USB_SetTurnaroundTime+0x120>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d306      	bcc.n	800a12c <USB_SetTurnaroundTime+0x40>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a3b      	ldr	r2, [pc, #236]	@ (800a210 <USB_SetTurnaroundTime+0x124>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d202      	bcs.n	800a12c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a126:	230e      	movs	r3, #14
 800a128:	617b      	str	r3, [r7, #20]
 800a12a:	e057      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4a38      	ldr	r2, [pc, #224]	@ (800a210 <USB_SetTurnaroundTime+0x124>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d306      	bcc.n	800a142 <USB_SetTurnaroundTime+0x56>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4a37      	ldr	r2, [pc, #220]	@ (800a214 <USB_SetTurnaroundTime+0x128>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d202      	bcs.n	800a142 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a13c:	230d      	movs	r3, #13
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	e04c      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	4a33      	ldr	r2, [pc, #204]	@ (800a214 <USB_SetTurnaroundTime+0x128>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d306      	bcc.n	800a158 <USB_SetTurnaroundTime+0x6c>
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a32      	ldr	r2, [pc, #200]	@ (800a218 <USB_SetTurnaroundTime+0x12c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d802      	bhi.n	800a158 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a152:	230c      	movs	r3, #12
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	e041      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4a2f      	ldr	r2, [pc, #188]	@ (800a218 <USB_SetTurnaroundTime+0x12c>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d906      	bls.n	800a16e <USB_SetTurnaroundTime+0x82>
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4a2e      	ldr	r2, [pc, #184]	@ (800a21c <USB_SetTurnaroundTime+0x130>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d802      	bhi.n	800a16e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a168:	230b      	movs	r3, #11
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	e036      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	4a2a      	ldr	r2, [pc, #168]	@ (800a21c <USB_SetTurnaroundTime+0x130>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d906      	bls.n	800a184 <USB_SetTurnaroundTime+0x98>
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a29      	ldr	r2, [pc, #164]	@ (800a220 <USB_SetTurnaroundTime+0x134>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d802      	bhi.n	800a184 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a17e:	230a      	movs	r3, #10
 800a180:	617b      	str	r3, [r7, #20]
 800a182:	e02b      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4a26      	ldr	r2, [pc, #152]	@ (800a220 <USB_SetTurnaroundTime+0x134>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d906      	bls.n	800a19a <USB_SetTurnaroundTime+0xae>
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4a25      	ldr	r2, [pc, #148]	@ (800a224 <USB_SetTurnaroundTime+0x138>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d202      	bcs.n	800a19a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a194:	2309      	movs	r3, #9
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e020      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4a21      	ldr	r2, [pc, #132]	@ (800a224 <USB_SetTurnaroundTime+0x138>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d306      	bcc.n	800a1b0 <USB_SetTurnaroundTime+0xc4>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4a20      	ldr	r2, [pc, #128]	@ (800a228 <USB_SetTurnaroundTime+0x13c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d802      	bhi.n	800a1b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	e015      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4a1d      	ldr	r2, [pc, #116]	@ (800a228 <USB_SetTurnaroundTime+0x13c>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d906      	bls.n	800a1c6 <USB_SetTurnaroundTime+0xda>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a22c <USB_SetTurnaroundTime+0x140>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d202      	bcs.n	800a1c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1c0:	2307      	movs	r3, #7
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	e00a      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1c6:	2306      	movs	r3, #6
 800a1c8:	617b      	str	r3, [r7, #20]
 800a1ca:	e007      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d102      	bne.n	800a1d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1d2:	2309      	movs	r3, #9
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	e001      	b.n	800a1dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1d8:	2309      	movs	r3, #9
 800a1da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	029b      	lsls	r3, r3, #10
 800a1f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	00d8acbf 	.word	0x00d8acbf
 800a20c:	00e4e1c0 	.word	0x00e4e1c0
 800a210:	00f42400 	.word	0x00f42400
 800a214:	01067380 	.word	0x01067380
 800a218:	011a499f 	.word	0x011a499f
 800a21c:	01312cff 	.word	0x01312cff
 800a220:	014ca43f 	.word	0x014ca43f
 800a224:	016e3600 	.word	0x016e3600
 800a228:	01a6ab1f 	.word	0x01a6ab1f
 800a22c:	01e84800 	.word	0x01e84800

0800a230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f043 0201 	orr.w	r2, r3, #1
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a252:	b480      	push	{r7}
 800a254:	b083      	sub	sp, #12
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f023 0201 	bic.w	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d115      	bne.n	800a2c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2a2:	200a      	movs	r0, #10
 800a2a4:	f7f8 fb06 	bl	80028b4 <HAL_Delay>
      ms += 10U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	330a      	adds	r3, #10
 800a2ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 f93f 	bl	800b532 <USB_GetMode>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d01e      	beq.n	800a2f8 <USB_SetCurrentMode+0x84>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2be:	d9f0      	bls.n	800a2a2 <USB_SetCurrentMode+0x2e>
 800a2c0:	e01a      	b.n	800a2f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d115      	bne.n	800a2f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2d4:	200a      	movs	r0, #10
 800a2d6:	f7f8 faed 	bl	80028b4 <HAL_Delay>
      ms += 10U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	330a      	adds	r3, #10
 800a2de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 f926 	bl	800b532 <USB_GetMode>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <USB_SetCurrentMode+0x84>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2f0:	d9f0      	bls.n	800a2d4 <USB_SetCurrentMode+0x60>
 800a2f2:	e001      	b.n	800a2f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e005      	b.n	800a304 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2bc8      	cmp	r3, #200	@ 0xc8
 800a2fc:	d101      	bne.n	800a302 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a30c:	b084      	sub	sp, #16
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	e009      	b.n	800a340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	3340      	adds	r3, #64	@ 0x40
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3301      	adds	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b0e      	cmp	r3, #14
 800a344:	d9f2      	bls.n	800a32c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d11c      	bne.n	800a388 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a35c:	f043 0302 	orr.w	r3, r3, #2
 800a360:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a366:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a372:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	639a      	str	r2, [r3, #56]	@ 0x38
 800a386:	e00b      	b.n	800a3a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a398:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d10d      	bne.n	800a3d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f968 	bl	800a694 <USB_SetDevSpeed>
 800a3c4:	e008      	b.n	800a3d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f963 	bl	800a694 <USB_SetDevSpeed>
 800a3ce:	e003      	b.n	800a3d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3d0:	2103      	movs	r1, #3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f95e 	bl	800a694 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3d8:	2110      	movs	r1, #16
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f8fa 	bl	800a5d4 <USB_FlushTxFifo>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f924 	bl	800a638 <USB_FlushRxFifo>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a400:	461a      	mov	r2, r3
 800a402:	2300      	movs	r3, #0
 800a404:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	461a      	mov	r2, r3
 800a40e:	2300      	movs	r3, #0
 800a410:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a418:	461a      	mov	r2, r3
 800a41a:	2300      	movs	r3, #0
 800a41c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a41e:	2300      	movs	r3, #0
 800a420:	613b      	str	r3, [r7, #16]
 800a422:	e043      	b.n	800a4ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a43a:	d118      	bne.n	800a46e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10a      	bne.n	800a458 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44e:	461a      	mov	r2, r3
 800a450:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	e013      	b.n	800a480 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a464:	461a      	mov	r2, r3
 800a466:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	e008      	b.n	800a480 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47a:	461a      	mov	r2, r3
 800a47c:	2300      	movs	r3, #0
 800a47e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	461a      	mov	r2, r3
 800a48e:	2300      	movs	r3, #0
 800a490:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	613b      	str	r3, [r7, #16]
 800a4ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d3b5      	bcc.n	800a424 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	613b      	str	r3, [r7, #16]
 800a4bc:	e043      	b.n	800a546 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4d4:	d118      	bne.n	800a508 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	e013      	b.n	800a51a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4fe:	461a      	mov	r2, r3
 800a500:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	e008      	b.n	800a51a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a514:	461a      	mov	r2, r3
 800a516:	2300      	movs	r3, #0
 800a518:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a526:	461a      	mov	r2, r3
 800a528:	2300      	movs	r3, #0
 800a52a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a538:	461a      	mov	r2, r3
 800a53a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a53e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	3301      	adds	r3, #1
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a54a:	461a      	mov	r2, r3
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4293      	cmp	r3, r2
 800a550:	d3b5      	bcc.n	800a4be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a564:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a572:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f043 0210 	orr.w	r2, r3, #16
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	4b10      	ldr	r3, [pc, #64]	@ (800a5d0 <USB_DevInit+0x2c4>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a594:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	f043 0208 	orr.w	r2, r3, #8
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d107      	bne.n	800a5c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5b8:	f043 0304 	orr.w	r3, r3, #4
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5cc:	b004      	add	sp, #16
 800a5ce:	4770      	bx	lr
 800a5d0:	803c3800 	.word	0x803c3800

0800a5d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5ee:	d901      	bls.n	800a5f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e01b      	b.n	800a62c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	daf2      	bge.n	800a5e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	019b      	lsls	r3, r3, #6
 800a604:	f043 0220 	orr.w	r2, r3, #32
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a618:	d901      	bls.n	800a61e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e006      	b.n	800a62c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b20      	cmp	r3, #32
 800a628:	d0f0      	beq.n	800a60c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a650:	d901      	bls.n	800a656 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e018      	b.n	800a688 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	daf2      	bge.n	800a644 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2210      	movs	r2, #16
 800a666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a674:	d901      	bls.n	800a67a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e006      	b.n	800a688 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f003 0310 	and.w	r3, r3, #16
 800a682:	2b10      	cmp	r3, #16
 800a684:	d0f0      	beq.n	800a668 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b087      	sub	sp, #28
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f003 0306 	and.w	r3, r3, #6
 800a6de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]
 800a6ea:	e00a      	b.n	800a702 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d002      	beq.n	800a6f8 <USB_GetDevSpeed+0x32>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b06      	cmp	r3, #6
 800a6f6:	d102      	bne.n	800a6fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	75fb      	strb	r3, [r7, #23]
 800a6fc:	e001      	b.n	800a702 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6fe:	230f      	movs	r3, #15
 800a700:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d13a      	bne.n	800a7a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a732:	69da      	ldr	r2, [r3, #28]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 030f 	and.w	r3, r3, #15
 800a73c:	2101      	movs	r1, #1
 800a73e:	fa01 f303 	lsl.w	r3, r1, r3
 800a742:	b29b      	uxth	r3, r3
 800a744:	68f9      	ldr	r1, [r7, #12]
 800a746:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a74a:	4313      	orrs	r3, r2
 800a74c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d155      	bne.n	800a810 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a780:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	059b      	lsls	r3, r3, #22
 800a786:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a788:	4313      	orrs	r3, r2
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	0151      	lsls	r1, r2, #5
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	440a      	add	r2, r1
 800a792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e036      	b.n	800a810 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7a8:	69da      	ldr	r2, [r3, #28]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b8:	041b      	lsls	r3, r3, #16
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d11a      	bne.n	800a810 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	791b      	ldrb	r3, [r3, #4]
 800a7f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7f6:	430b      	orrs	r3, r1
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	440a      	add	r2, r1
 800a802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a80a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a80e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d161      	bne.n	800a900 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a84e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a852:	d11f      	bne.n	800a894 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	0151      	lsls	r1, r2, #5
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	440a      	add	r2, r1
 800a86a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a86e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a872:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	0151      	lsls	r1, r2, #5
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	440a      	add	r2, r1
 800a88a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a88e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a892:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a89a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 030f 	and.w	r3, r3, #15
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	43db      	mvns	r3, r3
 800a8d2:	68f9      	ldr	r1, [r7, #12]
 800a8d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8d8:	4013      	ands	r3, r2
 800a8da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	0159      	lsls	r1, r3, #5
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	440b      	add	r3, r1
 800a8f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4b35      	ldr	r3, [pc, #212]	@ (800a9d0 <USB_DeactivateEndpoint+0x1b0>)
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	600b      	str	r3, [r1, #0]
 800a8fe:	e060      	b.n	800a9c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a916:	d11f      	bne.n	800a958 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	0151      	lsls	r1, r2, #5
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	440a      	add	r2, r1
 800a92e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a932:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a936:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a956:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a95e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f303 	lsl.w	r3, r1, r3
 800a96e:	041b      	lsls	r3, r3, #16
 800a970:	43db      	mvns	r3, r3
 800a972:	68f9      	ldr	r1, [r7, #12]
 800a974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a978:	4013      	ands	r3, r2
 800a97a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a982:	69da      	ldr	r2, [r3, #28]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	2101      	movs	r1, #1
 800a98e:	fa01 f303 	lsl.w	r3, r1, r3
 800a992:	041b      	lsls	r3, r3, #16
 800a994:	43db      	mvns	r3, r3
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a99c:	4013      	ands	r3, r2
 800a99e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	0159      	lsls	r1, r3, #5
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	440b      	add	r3, r1
 800a9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <USB_DeactivateEndpoint+0x1b4>)
 800a9be:	4013      	ands	r3, r2
 800a9c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	ec337800 	.word	0xec337800
 800a9d4:	eff37800 	.word	0xeff37800

0800a9d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08a      	sub	sp, #40	@ 0x28
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	f040 817f 	bne.w	800acf8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d132      	bne.n	800aa68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	69fa      	ldr	r2, [r7, #28]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	0151      	lsls	r1, r2, #5
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	440a      	add	r2, r1
 800aa5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa60:	0cdb      	lsrs	r3, r3, #19
 800aa62:	04db      	lsls	r3, r3, #19
 800aa64:	6113      	str	r3, [r2, #16]
 800aa66:	e097      	b.n	800ab98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa82:	0cdb      	lsrs	r3, r3, #19
 800aa84:	04db      	lsls	r3, r3, #19
 800aa86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	69fa      	ldr	r2, [r7, #28]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aaa6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aaaa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d11a      	bne.n	800aae8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	691a      	ldr	r2, [r3, #16]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d903      	bls.n	800aac6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	689a      	ldr	r2, [r3, #8]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	0151      	lsls	r1, r2, #5
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	440a      	add	r2, r1
 800aadc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aae4:	6113      	str	r3, [r2, #16]
 800aae6:	e044      	b.n	800ab72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	691a      	ldr	r2, [r3, #16]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	1e5a      	subs	r2, r3, #1
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0a:	691a      	ldr	r2, [r3, #16]
 800ab0c:	8afb      	ldrh	r3, [r7, #22]
 800ab0e:	04d9      	lsls	r1, r3, #19
 800ab10:	4ba4      	ldr	r3, [pc, #656]	@ (800ada4 <USB_EPStartXfer+0x3cc>)
 800ab12:	400b      	ands	r3, r1
 800ab14:	69b9      	ldr	r1, [r7, #24]
 800ab16:	0148      	lsls	r0, r1, #5
 800ab18:	69f9      	ldr	r1, [r7, #28]
 800ab1a:	4401      	add	r1, r0
 800ab1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab20:	4313      	orrs	r3, r2
 800ab22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	791b      	ldrb	r3, [r3, #4]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d122      	bne.n	800ab72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ab4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab58:	691a      	ldr	r2, [r3, #16]
 800ab5a:	8afb      	ldrh	r3, [r7, #22]
 800ab5c:	075b      	lsls	r3, r3, #29
 800ab5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ab62:	69b9      	ldr	r1, [r7, #24]
 800ab64:	0148      	lsls	r0, r1, #5
 800ab66:	69f9      	ldr	r1, [r7, #28]
 800ab68:	4401      	add	r1, r0
 800ab6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab7e:	691a      	ldr	r2, [r3, #16]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab88:	69b9      	ldr	r1, [r7, #24]
 800ab8a:	0148      	lsls	r0, r1, #5
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	4401      	add	r1, r0
 800ab90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab94:	4313      	orrs	r3, r2
 800ab96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d14b      	bne.n	800ac36 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb2:	461a      	mov	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	791b      	ldrb	r3, [r3, #4]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d128      	bne.n	800ac14 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d110      	bne.n	800abf4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	e00f      	b.n	800ac14 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	69fa      	ldr	r2, [r7, #28]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac12:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	e166      	b.n	800af04 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	0151      	lsls	r1, r2, #5
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	440a      	add	r2, r1
 800ac4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	791b      	ldrb	r3, [r3, #4]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d015      	beq.n	800ac8a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 814e 	beq.w	800af04 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	2101      	movs	r1, #1
 800ac7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7e:	69f9      	ldr	r1, [r7, #28]
 800ac80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac84:	4313      	orrs	r3, r2
 800ac86:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac88:	e13c      	b.n	800af04 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d110      	bne.n	800acbc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	e00f      	b.n	800acdc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	0151      	lsls	r1, r2, #5
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	440a      	add	r2, r1
 800acd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acda:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	68d9      	ldr	r1, [r3, #12]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	781a      	ldrb	r2, [r3, #0]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	b298      	uxth	r0, r3
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	4603      	mov	r3, r0
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 f9b9 	bl	800b068 <USB_WritePacket>
 800acf6:	e105      	b.n	800af04 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad12:	0cdb      	lsrs	r3, r3, #19
 800ad14:	04db      	lsls	r3, r3, #19
 800ad16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	69fa      	ldr	r2, [r7, #28]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad3a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d132      	bne.n	800ada8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	015a      	lsls	r2, r3, #5
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	4413      	add	r3, r2
 800ad62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad70:	69b9      	ldr	r1, [r7, #24]
 800ad72:	0148      	lsls	r0, r1, #5
 800ad74:	69f9      	ldr	r1, [r7, #28]
 800ad76:	4401      	add	r1, r0
 800ad78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad9e:	6113      	str	r3, [r2, #16]
 800ada0:	e062      	b.n	800ae68 <USB_EPStartXfer+0x490>
 800ada2:	bf00      	nop
 800ada4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d123      	bne.n	800adf8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adc6:	69b9      	ldr	r1, [r7, #24]
 800adc8:	0148      	lsls	r0, r1, #5
 800adca:	69f9      	ldr	r1, [r7, #28]
 800adcc:	4401      	add	r1, r0
 800adce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800add2:	4313      	orrs	r3, r2
 800add4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adf4:	6113      	str	r3, [r2, #16]
 800adf6:	e037      	b.n	800ae68 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	4413      	add	r3, r2
 800ae02:	1e5a      	subs	r2, r3, #1
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	8afa      	ldrh	r2, [r7, #22]
 800ae14:	fb03 f202 	mul.w	r2, r3, r2
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae28:	691a      	ldr	r2, [r3, #16]
 800ae2a:	8afb      	ldrh	r3, [r7, #22]
 800ae2c:	04d9      	lsls	r1, r3, #19
 800ae2e:	4b38      	ldr	r3, [pc, #224]	@ (800af10 <USB_EPStartXfer+0x538>)
 800ae30:	400b      	ands	r3, r1
 800ae32:	69b9      	ldr	r1, [r7, #24]
 800ae34:	0148      	lsls	r0, r1, #5
 800ae36:	69f9      	ldr	r1, [r7, #28]
 800ae38:	4401      	add	r1, r0
 800ae3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae58:	69b9      	ldr	r1, [r7, #24]
 800ae5a:	0148      	lsls	r0, r1, #5
 800ae5c:	69f9      	ldr	r1, [r7, #28]
 800ae5e:	4401      	add	r1, r0
 800ae60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae64:	4313      	orrs	r3, r2
 800ae66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10d      	bne.n	800ae8a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	68d9      	ldr	r1, [r3, #12]
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae86:	460a      	mov	r2, r1
 800ae88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	791b      	ldrb	r3, [r3, #4]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d128      	bne.n	800aee4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d110      	bne.n	800aec4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	0151      	lsls	r1, r2, #5
 800aeb4:	69fa      	ldr	r2, [r7, #28]
 800aeb6:	440a      	add	r2, r1
 800aeb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	e00f      	b.n	800aee4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69ba      	ldr	r2, [r7, #24]
 800aed4:	0151      	lsls	r1, r2, #5
 800aed6:	69fa      	ldr	r2, [r7, #28]
 800aed8:	440a      	add	r2, r1
 800aeda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aefe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	1ff80000 	.word	0x1ff80000

0800af14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d14a      	bne.n	800afc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af4a:	f040 8086 	bne.w	800b05a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	7812      	ldrb	r2, [r2, #0]
 800af62:	0151      	lsls	r1, r2, #5
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	440a      	add	r2, r1
 800af68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	7812      	ldrb	r2, [r2, #0]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d902      	bls.n	800afac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	75fb      	strb	r3, [r7, #23]
          break;
 800afaa:	e056      	b.n	800b05a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	015a      	lsls	r2, r3, #5
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	4413      	add	r3, r2
 800afb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afc4:	d0e7      	beq.n	800af96 <USB_EPStopXfer+0x82>
 800afc6:	e048      	b.n	800b05a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afe0:	d13b      	bne.n	800b05a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	7812      	ldrb	r2, [r2, #0]
 800aff6:	0151      	lsls	r1, r2, #5
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	440a      	add	r2, r1
 800affc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b000:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b004:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	7812      	ldrb	r2, [r2, #0]
 800b01a:	0151      	lsls	r1, r2, #5
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	440a      	add	r2, r1
 800b020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b024:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b028:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b036:	4293      	cmp	r3, r2
 800b038:	d902      	bls.n	800b040 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	75fb      	strb	r3, [r7, #23]
          break;
 800b03e:	e00c      	b.n	800b05a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b058:	d0e7      	beq.n	800b02a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b068:	b480      	push	{r7}
 800b06a:	b089      	sub	sp, #36	@ 0x24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	4611      	mov	r1, r2
 800b074:	461a      	mov	r2, r3
 800b076:	460b      	mov	r3, r1
 800b078:	71fb      	strb	r3, [r7, #7]
 800b07a:	4613      	mov	r3, r2
 800b07c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b086:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d123      	bne.n	800b0d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b08e:	88bb      	ldrh	r3, [r7, #4]
 800b090:	3303      	adds	r3, #3
 800b092:	089b      	lsrs	r3, r3, #2
 800b094:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b096:	2300      	movs	r3, #0
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	e018      	b.n	800b0ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	031a      	lsls	r2, r3, #12
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d3e2      	bcc.n	800b09c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3724      	adds	r7, #36	@ 0x24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b08b      	sub	sp, #44	@ 0x2c
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	089b      	lsrs	r3, r3, #2
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b10a:	2300      	movs	r3, #0
 800b10c:	623b      	str	r3, [r7, #32]
 800b10e:	e014      	b.n	800b13a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	3301      	adds	r3, #1
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	3301      	adds	r3, #1
 800b126:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12a:	3301      	adds	r3, #1
 800b12c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	3301      	adds	r3, #1
 800b132:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	3301      	adds	r3, #1
 800b138:	623b      	str	r3, [r7, #32]
 800b13a:	6a3a      	ldr	r2, [r7, #32]
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d3e6      	bcc.n	800b110 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b142:	8bfb      	ldrh	r3, [r7, #30]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01e      	beq.n	800b186 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b152:	461a      	mov	r2, r3
 800b154:	f107 0310 	add.w	r3, r7, #16
 800b158:	6812      	ldr	r2, [r2, #0]
 800b15a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	b2db      	uxtb	r3, r3
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	fa22 f303 	lsr.w	r3, r2, r3
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16c:	701a      	strb	r2, [r3, #0]
      i++;
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	3301      	adds	r3, #1
 800b172:	623b      	str	r3, [r7, #32]
      pDest++;
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	3301      	adds	r3, #1
 800b178:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b17a:	8bfb      	ldrh	r3, [r7, #30]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b180:	8bfb      	ldrh	r3, [r7, #30]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1ea      	bne.n	800b15c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b188:	4618      	mov	r0, r3
 800b18a:	372c      	adds	r7, #44	@ 0x2c
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d12c      	bne.n	800b20a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	015a      	lsls	r2, r3, #5
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	db12      	blt.n	800b1e8 <USB_EPSetStall+0x54>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00f      	beq.n	800b1e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	0151      	lsls	r1, r2, #5
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	440a      	add	r2, r1
 800b1de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	0151      	lsls	r1, r2, #5
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e02b      	b.n	800b262 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	db12      	blt.n	800b242 <USB_EPSetStall+0xae>
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00f      	beq.n	800b242 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	440a      	add	r2, r1
 800b238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b23c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b240:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	0151      	lsls	r1, r2, #5
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	440a      	add	r2, r1
 800b258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b25c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	785b      	ldrb	r3, [r3, #1]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d128      	bne.n	800b2de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	0151      	lsls	r1, r2, #5
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	791b      	ldrb	r3, [r3, #4]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d003      	beq.n	800b2bc <USB_EPClearStall+0x4c>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	791b      	ldrb	r3, [r3, #4]
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d138      	bne.n	800b32e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	e027      	b.n	800b32e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	791b      	ldrb	r3, [r3, #4]
 800b302:	2b03      	cmp	r3, #3
 800b304:	d003      	beq.n	800b30e <USB_EPClearStall+0x9e>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	791b      	ldrb	r3, [r3, #4]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d10f      	bne.n	800b32e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	0151      	lsls	r1, r2, #5
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	440a      	add	r2, r1
 800b324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b32c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b35a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b35e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	011b      	lsls	r3, r3, #4
 800b36c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b370:	68f9      	ldr	r1, [r7, #12]
 800b372:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b376:	4313      	orrs	r3, r2
 800b378:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3a2:	f023 0303 	bic.w	r3, r3, #3
 800b3a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3b6:	f023 0302 	bic.w	r3, r3, #2
 800b3ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3e4:	f023 0303 	bic.w	r3, r3, #3
 800b3e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3f8:	f043 0302 	orr.w	r3, r3, #2
 800b3fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4013      	ands	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b424:	68fb      	ldr	r3, [r7, #12]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b432:	b480      	push	{r7}
 800b434:	b085      	sub	sp, #20
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	4013      	ands	r3, r2
 800b454:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	0c1b      	lsrs	r3, r3, #16
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	4013      	ands	r3, r2
 800b488:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	b29b      	uxth	r3, r3
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b085      	sub	sp, #20
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4c8:	68bb      	ldr	r3, [r7, #8]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b087      	sub	sp, #28
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	fa22 f303 	lsr.w	r3, r2, r3
 800b506:	01db      	lsls	r3, r3, #7
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	4013      	ands	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b524:	68bb      	ldr	r3, [r7, #8]
}
 800b526:	4618      	mov	r0, r3
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	f003 0301 	and.w	r3, r3, #1
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b54e:	b480      	push	{r7}
 800b550:	b085      	sub	sp, #20
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b568:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b56c:	f023 0307 	bic.w	r3, r3, #7
 800b570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b594:	b480      	push	{r7}
 800b596:	b087      	sub	sp, #28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	460b      	mov	r3, r1
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	333c      	adds	r3, #60	@ 0x3c
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4a26      	ldr	r2, [pc, #152]	@ (800b64c <USB_EP0_OutStart+0xb8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d90a      	bls.n	800b5ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5c8:	d101      	bne.n	800b5ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e037      	b.n	800b63e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5fc:	f043 0318 	orr.w	r3, r3, #24
 800b600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b610:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b614:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b616:	7afb      	ldrb	r3, [r7, #11]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d10f      	bne.n	800b63c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b622:	461a      	mov	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b636:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b63a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	4f54300a 	.word	0x4f54300a

0800b650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b668:	d901      	bls.n	800b66e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e01b      	b.n	800b6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	daf2      	bge.n	800b65c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	f043 0201 	orr.w	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b692:	d901      	bls.n	800b698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d0f0      	beq.n	800b686 <USB_CoreReset+0x36>

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b6c4:	f002 fc2e 	bl	800df24 <USBD_static_malloc>
 800b6c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	32b0      	adds	r2, #176	@ 0xb0
 800b6da:	2100      	movs	r1, #0
 800b6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e0d4      	b.n	800b88e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b6e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f003 fe42 	bl	800f374 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	32b0      	adds	r2, #176	@ 0xb0
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	32b0      	adds	r2, #176	@ 0xb0
 800b70a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	7c1b      	ldrb	r3, [r3, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d138      	bne.n	800b78e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b71c:	4b5e      	ldr	r3, [pc, #376]	@ (800b898 <USBD_CDC_Init+0x1e4>)
 800b71e:	7819      	ldrb	r1, [r3, #0]
 800b720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b724:	2202      	movs	r2, #2
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f002 fad9 	bl	800dcde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b72c:	4b5a      	ldr	r3, [pc, #360]	@ (800b898 <USBD_CDC_Init+0x1e4>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	3324      	adds	r3, #36	@ 0x24
 800b742:	2201      	movs	r2, #1
 800b744:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b746:	4b55      	ldr	r3, [pc, #340]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b748:	7819      	ldrb	r1, [r3, #0]
 800b74a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b74e:	2202      	movs	r2, #2
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f002 fac4 	bl	800dcde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b756:	4b51      	ldr	r3, [pc, #324]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	f003 020f 	and.w	r2, r3, #15
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b76e:	2201      	movs	r2, #1
 800b770:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b772:	4b4b      	ldr	r3, [pc, #300]	@ (800b8a0 <USBD_CDC_Init+0x1ec>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	f003 020f 	and.w	r2, r3, #15
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	440b      	add	r3, r1
 800b786:	3326      	adds	r3, #38	@ 0x26
 800b788:	2210      	movs	r2, #16
 800b78a:	801a      	strh	r2, [r3, #0]
 800b78c:	e035      	b.n	800b7fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b78e:	4b42      	ldr	r3, [pc, #264]	@ (800b898 <USBD_CDC_Init+0x1e4>)
 800b790:	7819      	ldrb	r1, [r3, #0]
 800b792:	2340      	movs	r3, #64	@ 0x40
 800b794:	2202      	movs	r2, #2
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f002 faa1 	bl	800dcde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b79c:	4b3e      	ldr	r3, [pc, #248]	@ (800b898 <USBD_CDC_Init+0x1e4>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	f003 020f 	and.w	r2, r3, #15
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	440b      	add	r3, r1
 800b7b0:	3324      	adds	r3, #36	@ 0x24
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7b6:	4b39      	ldr	r3, [pc, #228]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b7b8:	7819      	ldrb	r1, [r3, #0]
 800b7ba:	2340      	movs	r3, #64	@ 0x40
 800b7bc:	2202      	movs	r2, #2
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f002 fa8d 	bl	800dcde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7c4:	4b35      	ldr	r3, [pc, #212]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 020f 	and.w	r2, r3, #15
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7dc:	2201      	movs	r2, #1
 800b7de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7e0:	4b2f      	ldr	r3, [pc, #188]	@ (800b8a0 <USBD_CDC_Init+0x1ec>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 020f 	and.w	r2, r3, #15
 800b7e8:	6879      	ldr	r1, [r7, #4]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	440b      	add	r3, r1
 800b7f4:	3326      	adds	r3, #38	@ 0x26
 800b7f6:	2210      	movs	r2, #16
 800b7f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7fa:	4b29      	ldr	r3, [pc, #164]	@ (800b8a0 <USBD_CDC_Init+0x1ec>)
 800b7fc:	7819      	ldrb	r1, [r3, #0]
 800b7fe:	2308      	movs	r3, #8
 800b800:	2203      	movs	r2, #3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f002 fa6b 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b808:	4b25      	ldr	r3, [pc, #148]	@ (800b8a0 <USBD_CDC_Init+0x1ec>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f003 020f 	and.w	r2, r3, #15
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	440b      	add	r3, r1
 800b81c:	3324      	adds	r3, #36	@ 0x24
 800b81e:	2201      	movs	r2, #1
 800b820:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	33b0      	adds	r3, #176	@ 0xb0
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b858:	2302      	movs	r3, #2
 800b85a:	e018      	b.n	800b88e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7c1b      	ldrb	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b864:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b866:	7819      	ldrb	r1, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b86e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f002 fb22 	bl	800debc <USBD_LL_PrepareReceive>
 800b878:	e008      	b.n	800b88c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b87a:	4b08      	ldr	r3, [pc, #32]	@ (800b89c <USBD_CDC_Init+0x1e8>)
 800b87c:	7819      	ldrb	r1, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b884:	2340      	movs	r3, #64	@ 0x40
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f002 fb18 	bl	800debc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	200000ab 	.word	0x200000ab
 800b89c:	200000ac 	.word	0x200000ac
 800b8a0:	200000ad 	.word	0x200000ad

0800b8a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8b0:	4b3a      	ldr	r3, [pc, #232]	@ (800b99c <USBD_CDC_DeInit+0xf8>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f002 fa37 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8bc:	4b37      	ldr	r3, [pc, #220]	@ (800b99c <USBD_CDC_DeInit+0xf8>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	f003 020f 	and.w	r2, r3, #15
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3324      	adds	r3, #36	@ 0x24
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b8d6:	4b32      	ldr	r3, [pc, #200]	@ (800b9a0 <USBD_CDC_DeInit+0xfc>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f002 fa24 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b8e2:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a0 <USBD_CDC_DeInit+0xfc>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 020f 	and.w	r2, r3, #15
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b8fe:	4b29      	ldr	r3, [pc, #164]	@ (800b9a4 <USBD_CDC_DeInit+0x100>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f002 fa10 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b90a:	4b26      	ldr	r3, [pc, #152]	@ (800b9a4 <USBD_CDC_DeInit+0x100>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	f003 020f 	and.w	r2, r3, #15
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	4613      	mov	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	440b      	add	r3, r1
 800b91e:	3324      	adds	r3, #36	@ 0x24
 800b920:	2200      	movs	r2, #0
 800b922:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b924:	4b1f      	ldr	r3, [pc, #124]	@ (800b9a4 <USBD_CDC_DeInit+0x100>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f003 020f 	and.w	r2, r3, #15
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	440b      	add	r3, r1
 800b938:	3326      	adds	r3, #38	@ 0x26
 800b93a:	2200      	movs	r2, #0
 800b93c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	32b0      	adds	r2, #176	@ 0xb0
 800b948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01f      	beq.n	800b990 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	33b0      	adds	r3, #176	@ 0xb0
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32b0      	adds	r2, #176	@ 0xb0
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	4618      	mov	r0, r3
 800b974:	f002 fae4 	bl	800df40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	32b0      	adds	r2, #176	@ 0xb0
 800b982:	2100      	movs	r1, #0
 800b984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	200000ab 	.word	0x200000ab
 800b9a0:	200000ac 	.word	0x200000ac
 800b9a4:	200000ad 	.word	0x200000ad

0800b9a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	32b0      	adds	r2, #176	@ 0xb0
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e0bf      	b.n	800bb58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d050      	beq.n	800ba86 <USBD_CDC_Setup+0xde>
 800b9e4:	2b20      	cmp	r3, #32
 800b9e6:	f040 80af 	bne.w	800bb48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	88db      	ldrh	r3, [r3, #6]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d03a      	beq.n	800ba68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b25b      	sxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	da1b      	bge.n	800ba34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	33b0      	adds	r3, #176	@ 0xb0
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	88d2      	ldrh	r2, [r2, #6]
 800ba18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	88db      	ldrh	r3, [r3, #6]
 800ba1e:	2b07      	cmp	r3, #7
 800ba20:	bf28      	it	cs
 800ba22:	2307      	movcs	r3, #7
 800ba24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	89fa      	ldrh	r2, [r7, #14]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f001 fd53 	bl	800d4d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba32:	e090      	b.n	800bb56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	785a      	ldrb	r2, [r3, #1]
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	88db      	ldrh	r3, [r3, #6]
 800ba42:	2b3f      	cmp	r3, #63	@ 0x3f
 800ba44:	d803      	bhi.n	800ba4e <USBD_CDC_Setup+0xa6>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	88db      	ldrh	r3, [r3, #6]
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	e000      	b.n	800ba50 <USBD_CDC_Setup+0xa8>
 800ba4e:	2240      	movs	r2, #64	@ 0x40
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba56:	6939      	ldr	r1, [r7, #16]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f001 fd65 	bl	800d530 <USBD_CtlPrepareRx>
      break;
 800ba66:	e076      	b.n	800bb56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	33b0      	adds	r3, #176	@ 0xb0
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	7850      	ldrb	r0, [r2, #1]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	4798      	blx	r3
      break;
 800ba84:	e067      	b.n	800bb56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	2b0b      	cmp	r3, #11
 800ba8c:	d851      	bhi.n	800bb32 <USBD_CDC_Setup+0x18a>
 800ba8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba94 <USBD_CDC_Setup+0xec>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800bac5 	.word	0x0800bac5
 800ba98:	0800bb41 	.word	0x0800bb41
 800ba9c:	0800bb33 	.word	0x0800bb33
 800baa0:	0800bb33 	.word	0x0800bb33
 800baa4:	0800bb33 	.word	0x0800bb33
 800baa8:	0800bb33 	.word	0x0800bb33
 800baac:	0800bb33 	.word	0x0800bb33
 800bab0:	0800bb33 	.word	0x0800bb33
 800bab4:	0800bb33 	.word	0x0800bb33
 800bab8:	0800bb33 	.word	0x0800bb33
 800babc:	0800baef 	.word	0x0800baef
 800bac0:	0800bb19 	.word	0x0800bb19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d107      	bne.n	800bae0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bad0:	f107 030a 	add.w	r3, r7, #10
 800bad4:	2202      	movs	r2, #2
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f001 fcfd 	bl	800d4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bade:	e032      	b.n	800bb46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 fc7b 	bl	800d3de <USBD_CtlError>
            ret = USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	75fb      	strb	r3, [r7, #23]
          break;
 800baec:	e02b      	b.n	800bb46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d107      	bne.n	800bb0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bafa:	f107 030d 	add.w	r3, r7, #13
 800bafe:	2201      	movs	r2, #1
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 fce8 	bl	800d4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb08:	e01d      	b.n	800bb46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 fc66 	bl	800d3de <USBD_CtlError>
            ret = USBD_FAIL;
 800bb12:	2303      	movs	r3, #3
 800bb14:	75fb      	strb	r3, [r7, #23]
          break;
 800bb16:	e016      	b.n	800bb46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d00f      	beq.n	800bb44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 fc59 	bl	800d3de <USBD_CtlError>
            ret = USBD_FAIL;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb30:	e008      	b.n	800bb44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fc52 	bl	800d3de <USBD_CtlError>
          ret = USBD_FAIL;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb3e:	e002      	b.n	800bb46 <USBD_CDC_Setup+0x19e>
          break;
 800bb40:	bf00      	nop
 800bb42:	e008      	b.n	800bb56 <USBD_CDC_Setup+0x1ae>
          break;
 800bb44:	bf00      	nop
      }
      break;
 800bb46:	e006      	b.n	800bb56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f001 fc47 	bl	800d3de <USBD_CtlError>
      ret = USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	75fb      	strb	r3, [r7, #23]
      break;
 800bb54:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	32b0      	adds	r2, #176	@ 0xb0
 800bb7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e065      	b.n	800bc56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	32b0      	adds	r2, #176	@ 0xb0
 800bb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	f003 020f 	and.w	r2, r3, #15
 800bba0:	6879      	ldr	r1, [r7, #4]
 800bba2:	4613      	mov	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	440b      	add	r3, r1
 800bbac:	3318      	adds	r3, #24
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02f      	beq.n	800bc14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	f003 020f 	and.w	r2, r3, #15
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	440b      	add	r3, r1
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	f003 010f 	and.w	r1, r3, #15
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	00db      	lsls	r3, r3, #3
 800bbd6:	440b      	add	r3, r1
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4403      	add	r3, r0
 800bbdc:	331c      	adds	r3, #28
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbe4:	fb01 f303 	mul.w	r3, r1, r3
 800bbe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d112      	bne.n	800bc14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	f003 020f 	and.w	r2, r3, #15
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	440b      	add	r3, r1
 800bc00:	3318      	adds	r3, #24
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc06:	78f9      	ldrb	r1, [r7, #3]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f002 f934 	bl	800de7a <USBD_LL_Transmit>
 800bc12:	e01f      	b.n	800bc54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	33b0      	adds	r3, #176	@ 0xb0
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d010      	beq.n	800bc54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	33b0      	adds	r3, #176	@ 0xb0
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bc50:	78fa      	ldrb	r2, [r7, #3]
 800bc52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	32b0      	adds	r2, #176	@ 0xb0
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	32b0      	adds	r2, #176	@ 0xb0
 800bc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e01a      	b.n	800bcc6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f002 f932 	bl	800defe <USBD_LL_GetRxDataSize>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	33b0      	adds	r3, #176	@ 0xb0
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	32b0      	adds	r2, #176	@ 0xb0
 800bce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e024      	b.n	800bd3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	33b0      	adds	r3, #176	@ 0xb0
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d019      	beq.n	800bd38 <USBD_CDC_EP0_RxReady+0x6a>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd0a:	2bff      	cmp	r3, #255	@ 0xff
 800bd0c:	d014      	beq.n	800bd38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	33b0      	adds	r3, #176	@ 0xb0
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	22ff      	movs	r2, #255	@ 0xff
 800bd34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd4c:	2182      	movs	r1, #130	@ 0x82
 800bd4e:	4818      	ldr	r0, [pc, #96]	@ (800bdb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd50:	f000 fd0f 	bl	800c772 <USBD_GetEpDesc>
 800bd54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd56:	2101      	movs	r1, #1
 800bd58:	4815      	ldr	r0, [pc, #84]	@ (800bdb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd5a:	f000 fd0a 	bl	800c772 <USBD_GetEpDesc>
 800bd5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd60:	2181      	movs	r1, #129	@ 0x81
 800bd62:	4813      	ldr	r0, [pc, #76]	@ (800bdb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd64:	f000 fd05 	bl	800c772 <USBD_GetEpDesc>
 800bd68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2210      	movs	r2, #16
 800bd74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d006      	beq.n	800bd8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd84:	711a      	strb	r2, [r3, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d006      	beq.n	800bd9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd98:	711a      	strb	r2, [r3, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2243      	movs	r2, #67	@ 0x43
 800bda2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bda4:	4b02      	ldr	r3, [pc, #8]	@ (800bdb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000068 	.word	0x20000068

0800bdb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdbc:	2182      	movs	r1, #130	@ 0x82
 800bdbe:	4818      	ldr	r0, [pc, #96]	@ (800be20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdc0:	f000 fcd7 	bl	800c772 <USBD_GetEpDesc>
 800bdc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	4815      	ldr	r0, [pc, #84]	@ (800be20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdca:	f000 fcd2 	bl	800c772 <USBD_GetEpDesc>
 800bdce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdd0:	2181      	movs	r1, #129	@ 0x81
 800bdd2:	4813      	ldr	r0, [pc, #76]	@ (800be20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdd4:	f000 fccd 	bl	800c772 <USBD_GetEpDesc>
 800bdd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2210      	movs	r2, #16
 800bde4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d006      	beq.n	800bdfa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	711a      	strb	r2, [r3, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f042 0202 	orr.w	r2, r2, #2
 800bdf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d006      	beq.n	800be0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	711a      	strb	r2, [r3, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f042 0202 	orr.w	r2, r2, #2
 800be0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2243      	movs	r2, #67	@ 0x43
 800be12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be14:	4b02      	ldr	r3, [pc, #8]	@ (800be20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be16:	4618      	mov	r0, r3
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000068 	.word	0x20000068

0800be24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be2c:	2182      	movs	r1, #130	@ 0x82
 800be2e:	4818      	ldr	r0, [pc, #96]	@ (800be90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be30:	f000 fc9f 	bl	800c772 <USBD_GetEpDesc>
 800be34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be36:	2101      	movs	r1, #1
 800be38:	4815      	ldr	r0, [pc, #84]	@ (800be90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be3a:	f000 fc9a 	bl	800c772 <USBD_GetEpDesc>
 800be3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be40:	2181      	movs	r1, #129	@ 0x81
 800be42:	4813      	ldr	r0, [pc, #76]	@ (800be90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be44:	f000 fc95 	bl	800c772 <USBD_GetEpDesc>
 800be48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2210      	movs	r2, #16
 800be54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d006      	beq.n	800be6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2200      	movs	r2, #0
 800be60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be64:	711a      	strb	r2, [r3, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d006      	beq.n	800be7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be78:	711a      	strb	r2, [r3, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2243      	movs	r2, #67	@ 0x43
 800be82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be84:	4b02      	ldr	r3, [pc, #8]	@ (800be90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000068 	.word	0x20000068

0800be94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	220a      	movs	r2, #10
 800bea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bea2:	4b03      	ldr	r3, [pc, #12]	@ (800beb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20000024 	.word	0x20000024

0800beb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bec4:	2303      	movs	r3, #3
 800bec6:	e009      	b.n	800bedc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	33b0      	adds	r3, #176	@ 0xb0
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	32b0      	adds	r2, #176	@ 0xb0
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e008      	b.n	800bf20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	371c      	adds	r7, #28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	32b0      	adds	r2, #176	@ 0xb0
 800bf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e004      	b.n	800bf5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32b0      	adds	r2, #176	@ 0xb0
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	32b0      	adds	r2, #176	@ 0xb0
 800bf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e018      	b.n	800bfc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7c1b      	ldrb	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd0 <USBD_CDC_ReceivePacket+0x68>)
 800bfa0:	7819      	ldrb	r1, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f001 ff85 	bl	800debc <USBD_LL_PrepareReceive>
 800bfb2:	e008      	b.n	800bfc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfb4:	4b06      	ldr	r3, [pc, #24]	@ (800bfd0 <USBD_CDC_ReceivePacket+0x68>)
 800bfb6:	7819      	ldrb	r1, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfbe:	2340      	movs	r3, #64	@ 0x40
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 ff7b 	bl	800debc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	200000ac 	.word	0x200000ac

0800bfd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e01f      	b.n	800c02c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	79fa      	ldrb	r2, [r7, #7]
 800c01e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f001 fdf5 	bl	800dc10 <USBD_LL_Init>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c048:	2303      	movs	r3, #3
 800c04a:	e025      	b.n	800c098 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	32ae      	adds	r2, #174	@ 0xae
 800c05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00f      	beq.n	800c088 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	32ae      	adds	r2, #174	@ 0xae
 800c072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c078:	f107 020e 	add.w	r2, r7, #14
 800c07c:	4610      	mov	r0, r2
 800c07e:	4798      	blx	r3
 800c080:	4602      	mov	r2, r0
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fdfd 	bl	800dca8 <USBD_LL_Start>
 800c0ae:	4603      	mov	r3, r0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d009      	beq.n	800c0fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	78fa      	ldrb	r2, [r7, #3]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	4798      	blx	r3
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	4611      	mov	r1, r2
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c12c:	2303      	movs	r3, #3
 800c12e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f001 f90c 	bl	800d36a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c160:	461a      	mov	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c16e:	f003 031f 	and.w	r3, r3, #31
 800c172:	2b02      	cmp	r3, #2
 800c174:	d01a      	beq.n	800c1ac <USBD_LL_SetupStage+0x72>
 800c176:	2b02      	cmp	r3, #2
 800c178:	d822      	bhi.n	800c1c0 <USBD_LL_SetupStage+0x86>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <USBD_LL_SetupStage+0x4a>
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d00a      	beq.n	800c198 <USBD_LL_SetupStage+0x5e>
 800c182:	e01d      	b.n	800c1c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fb63 	bl	800c858 <USBD_StdDevReq>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
      break;
 800c196:	e020      	b.n	800c1da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fbcb 	bl	800c93c <USBD_StdItfReq>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c1aa:	e016      	b.n	800c1da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fc2d 	bl	800ca14 <USBD_StdEPReq>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1be:	e00c      	b.n	800c1da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 fdca 	bl	800dd68 <USBD_LL_StallEP>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d8:	bf00      	nop
  }

  return ret;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1f6:	7afb      	ldrb	r3, [r7, #11]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d16e      	bne.n	800c2da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c202:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	f040 8098 	bne.w	800c340 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d913      	bls.n	800c244 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	1ad2      	subs	r2, r2, r3
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	4293      	cmp	r3, r2
 800c234:	bf28      	it	cs
 800c236:	4613      	movcs	r3, r2
 800c238:	461a      	mov	r2, r3
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f001 f994 	bl	800d56a <USBD_CtlContinueRx>
 800c242:	e07d      	b.n	800c340 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c24a:	f003 031f 	and.w	r3, r3, #31
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d014      	beq.n	800c27c <USBD_LL_DataOutStage+0x98>
 800c252:	2b02      	cmp	r3, #2
 800c254:	d81d      	bhi.n	800c292 <USBD_LL_DataOutStage+0xae>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <USBD_LL_DataOutStage+0x7c>
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d003      	beq.n	800c266 <USBD_LL_DataOutStage+0x82>
 800c25e:	e018      	b.n	800c292 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	75bb      	strb	r3, [r7, #22]
            break;
 800c264:	e018      	b.n	800c298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	4619      	mov	r1, r3
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 fa64 	bl	800c73e <USBD_CoreFindIF>
 800c276:	4603      	mov	r3, r0
 800c278:	75bb      	strb	r3, [r7, #22]
            break;
 800c27a:	e00d      	b.n	800c298 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c282:	b2db      	uxtb	r3, r3
 800c284:	4619      	mov	r1, r3
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fa66 	bl	800c758 <USBD_CoreFindEP>
 800c28c:	4603      	mov	r3, r0
 800c28e:	75bb      	strb	r3, [r7, #22]
            break;
 800c290:	e002      	b.n	800c298 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	75bb      	strb	r3, [r7, #22]
            break;
 800c296:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c298:	7dbb      	ldrb	r3, [r7, #22]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d119      	bne.n	800c2d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d113      	bne.n	800c2d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c2aa:	7dba      	ldrb	r2, [r7, #22]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	32ae      	adds	r2, #174	@ 0xae
 800c2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00b      	beq.n	800c2d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c2ba:	7dba      	ldrb	r2, [r7, #22]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c2c2:	7dba      	ldrb	r2, [r7, #22]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	32ae      	adds	r2, #174	@ 0xae
 800c2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f001 f95a 	bl	800d58c <USBD_CtlSendStatus>
 800c2d8:	e032      	b.n	800c340 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c2da:	7afb      	ldrb	r3, [r7, #11]
 800c2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 fa37 	bl	800c758 <USBD_CoreFindEP>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ee:	7dbb      	ldrb	r3, [r7, #22]
 800c2f0:	2bff      	cmp	r3, #255	@ 0xff
 800c2f2:	d025      	beq.n	800c340 <USBD_LL_DataOutStage+0x15c>
 800c2f4:	7dbb      	ldrb	r3, [r7, #22]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d122      	bne.n	800c340 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b03      	cmp	r3, #3
 800c304:	d117      	bne.n	800c336 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c306:	7dba      	ldrb	r2, [r7, #22]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	32ae      	adds	r2, #174	@ 0xae
 800c30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00f      	beq.n	800c336 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c316:	7dba      	ldrb	r2, [r7, #22]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c31e:	7dba      	ldrb	r2, [r7, #22]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	32ae      	adds	r2, #174	@ 0xae
 800c324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	7afa      	ldrb	r2, [r7, #11]
 800c32c:	4611      	mov	r1, r2
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	4798      	blx	r3
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	e000      	b.n	800c342 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	460b      	mov	r3, r1
 800c354:	607a      	str	r2, [r7, #4]
 800c356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d16f      	bne.n	800c43e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3314      	adds	r3, #20
 800c362:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d15a      	bne.n	800c424 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	689a      	ldr	r2, [r3, #8]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	429a      	cmp	r2, r3
 800c378:	d914      	bls.n	800c3a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	1ad2      	subs	r2, r2, r3
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	461a      	mov	r2, r3
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f001 f8bc 	bl	800d50e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c396:	2300      	movs	r3, #0
 800c398:	2200      	movs	r2, #0
 800c39a:	2100      	movs	r1, #0
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f001 fd8d 	bl	800debc <USBD_LL_PrepareReceive>
 800c3a2:	e03f      	b.n	800c424 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d11c      	bne.n	800c3ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d316      	bcc.n	800c3ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d20f      	bcs.n	800c3ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f001 f89d 	bl	800d50e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3dc:	2300      	movs	r3, #0
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f001 fd6a 	bl	800debc <USBD_LL_PrepareReceive>
 800c3e8:	e01c      	b.n	800c424 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d10f      	bne.n	800c416 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d009      	beq.n	800c416 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c416:	2180      	movs	r1, #128	@ 0x80
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f001 fca5 	bl	800dd68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f001 f8c7 	bl	800d5b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d03a      	beq.n	800c4a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fe42 	bl	800c0b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c43c:	e032      	b.n	800c4a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c444:	b2db      	uxtb	r3, r3
 800c446:	4619      	mov	r1, r3
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 f985 	bl	800c758 <USBD_CoreFindEP>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	2bff      	cmp	r3, #255	@ 0xff
 800c456:	d025      	beq.n	800c4a4 <USBD_LL_DataInStage+0x15a>
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d122      	bne.n	800c4a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c464:	b2db      	uxtb	r3, r3
 800c466:	2b03      	cmp	r3, #3
 800c468:	d11c      	bne.n	800c4a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c46a:	7dfa      	ldrb	r2, [r7, #23]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	32ae      	adds	r2, #174	@ 0xae
 800c470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d014      	beq.n	800c4a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c47a:	7dfa      	ldrb	r2, [r7, #23]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c482:	7dfa      	ldrb	r2, [r7, #23]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	32ae      	adds	r2, #174	@ 0xae
 800c488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	7afa      	ldrb	r2, [r7, #11]
 800c490:	4611      	mov	r1, r2
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	4798      	blx	r3
 800c496:	4603      	mov	r3, r0
 800c498:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c49a:	7dbb      	ldrb	r3, [r7, #22]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c4a0:	7dbb      	ldrb	r3, [r7, #22]
 800c4a2:	e000      	b.n	800c4a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d014      	beq.n	800c514 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00e      	beq.n	800c514 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6852      	ldr	r2, [r2, #4]
 800c502:	b2d2      	uxtb	r2, r2
 800c504:	4611      	mov	r1, r2
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	4798      	blx	r3
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c510:	2303      	movs	r3, #3
 800c512:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c514:	2340      	movs	r3, #64	@ 0x40
 800c516:	2200      	movs	r2, #0
 800c518:	2100      	movs	r1, #0
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fbdf 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2240      	movs	r2, #64	@ 0x40
 800c52c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c530:	2340      	movs	r3, #64	@ 0x40
 800c532:	2200      	movs	r2, #0
 800c534:	2180      	movs	r1, #128	@ 0x80
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f001 fbd1 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2240      	movs	r2, #64	@ 0x40
 800c546:	621a      	str	r2, [r3, #32]

  return ret;
 800c548:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c552:	b480      	push	{r7}
 800c554:	b083      	sub	sp, #12
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b04      	cmp	r3, #4
 800c584:	d006      	beq.n	800c594 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2204      	movs	r2, #4
 800c598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	d106      	bne.n	800c5cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d110      	bne.n	800c610 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c60a:	69db      	ldr	r3, [r3, #28]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b082      	sub	sp, #8
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	460b      	mov	r3, r1
 800c624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	32ae      	adds	r2, #174	@ 0xae
 800c630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c638:	2303      	movs	r3, #3
 800c63a:	e01c      	b.n	800c676 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b03      	cmp	r3, #3
 800c646:	d115      	bne.n	800c674 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	32ae      	adds	r2, #174	@ 0xae
 800c652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	32ae      	adds	r2, #174	@ 0xae
 800c666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	4611      	mov	r1, r2
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	460b      	mov	r3, r1
 800c688:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	32ae      	adds	r2, #174	@ 0xae
 800c694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e01c      	b.n	800c6da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d115      	bne.n	800c6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	32ae      	adds	r2, #174	@ 0xae
 800c6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	32ae      	adds	r2, #174	@ 0xae
 800c6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d0:	78fa      	ldrb	r2, [r7, #3]
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00e      	beq.n	800c734 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	6852      	ldr	r2, [r2, #4]
 800c722:	b2d2      	uxtb	r2, r2
 800c724:	4611      	mov	r1, r2
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	4798      	blx	r3
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c730:	2303      	movs	r3, #3
 800c732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c734:	7bfb      	ldrb	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c74a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c766:	4618      	mov	r0, r3
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b086      	sub	sp, #24
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	885b      	ldrh	r3, [r3, #2]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	4293      	cmp	r3, r2
 800c796:	d91f      	bls.n	800c7d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c79e:	e013      	b.n	800c7c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c7a0:	f107 030a 	add.w	r3, r7, #10
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6978      	ldr	r0, [r7, #20]
 800c7a8:	f000 f81b 	bl	800c7e2 <USBD_GetNextDesc>
 800c7ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	d108      	bne.n	800c7c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	789b      	ldrb	r3, [r3, #2]
 800c7be:	78fa      	ldrb	r2, [r7, #3]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d008      	beq.n	800c7d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	897b      	ldrh	r3, [r7, #10]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d8e5      	bhi.n	800c7a0 <USBD_GetEpDesc+0x2e>
 800c7d4:	e000      	b.n	800c7d8 <USBD_GetEpDesc+0x66>
          break;
 800c7d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c7d8:	693b      	ldr	r3, [r7, #16]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b085      	sub	sp, #20
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	7812      	ldrb	r2, [r2, #0]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c80c:	68fb      	ldr	r3, [r7, #12]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b087      	sub	sp, #28
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	3301      	adds	r3, #1
 800c830:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c838:	8a3b      	ldrh	r3, [r7, #16]
 800c83a:	021b      	lsls	r3, r3, #8
 800c83c:	b21a      	sxth	r2, r3
 800c83e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c842:	4313      	orrs	r3, r2
 800c844:	b21b      	sxth	r3, r3
 800c846:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c848:	89fb      	ldrh	r3, [r7, #14]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c86e:	2b40      	cmp	r3, #64	@ 0x40
 800c870:	d005      	beq.n	800c87e <USBD_StdDevReq+0x26>
 800c872:	2b40      	cmp	r3, #64	@ 0x40
 800c874:	d857      	bhi.n	800c926 <USBD_StdDevReq+0xce>
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00f      	beq.n	800c89a <USBD_StdDevReq+0x42>
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d153      	bne.n	800c926 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	32ae      	adds	r2, #174	@ 0xae
 800c888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
 800c894:	4603      	mov	r3, r0
 800c896:	73fb      	strb	r3, [r7, #15]
      break;
 800c898:	e04a      	b.n	800c930 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	785b      	ldrb	r3, [r3, #1]
 800c89e:	2b09      	cmp	r3, #9
 800c8a0:	d83b      	bhi.n	800c91a <USBD_StdDevReq+0xc2>
 800c8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a8 <USBD_StdDevReq+0x50>)
 800c8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800c911 	.word	0x0800c911
 800c8b0:	0800c91b 	.word	0x0800c91b
 800c8b4:	0800c907 	.word	0x0800c907
 800c8b8:	0800c91b 	.word	0x0800c91b
 800c8bc:	0800c8db 	.word	0x0800c8db
 800c8c0:	0800c8d1 	.word	0x0800c8d1
 800c8c4:	0800c91b 	.word	0x0800c91b
 800c8c8:	0800c8f3 	.word	0x0800c8f3
 800c8cc:	0800c8e5 	.word	0x0800c8e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa3c 	bl	800cd50 <USBD_GetDescriptor>
          break;
 800c8d8:	e024      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fba1 	bl	800d024 <USBD_SetAddress>
          break;
 800c8e2:	e01f      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fbe0 	bl	800d0ac <USBD_SetConfig>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]
          break;
 800c8f0:	e018      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fc83 	bl	800d200 <USBD_GetConfig>
          break;
 800c8fa:	e013      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fcb4 	bl	800d26c <USBD_GetStatus>
          break;
 800c904:	e00e      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fce3 	bl	800d2d4 <USBD_SetFeature>
          break;
 800c90e:	e009      	b.n	800c924 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fd07 	bl	800d326 <USBD_ClrFeature>
          break;
 800c918:	e004      	b.n	800c924 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fd5e 	bl	800d3de <USBD_CtlError>
          break;
 800c922:	bf00      	nop
      }
      break;
 800c924:	e004      	b.n	800c930 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fd58 	bl	800d3de <USBD_CtlError>
      break;
 800c92e:	bf00      	nop
  }

  return ret;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop

0800c93c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c952:	2b40      	cmp	r3, #64	@ 0x40
 800c954:	d005      	beq.n	800c962 <USBD_StdItfReq+0x26>
 800c956:	2b40      	cmp	r3, #64	@ 0x40
 800c958:	d852      	bhi.n	800ca00 <USBD_StdItfReq+0xc4>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <USBD_StdItfReq+0x26>
 800c95e:	2b20      	cmp	r3, #32
 800c960:	d14e      	bne.n	800ca00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	3b01      	subs	r3, #1
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d840      	bhi.n	800c9f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	889b      	ldrh	r3, [r3, #4]
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b01      	cmp	r3, #1
 800c978:	d836      	bhi.n	800c9e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff fedb 	bl	800c73e <USBD_CoreFindIF>
 800c988:	4603      	mov	r3, r0
 800c98a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	2bff      	cmp	r3, #255	@ 0xff
 800c990:	d01d      	beq.n	800c9ce <USBD_StdItfReq+0x92>
 800c992:	7bbb      	ldrb	r3, [r7, #14]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11a      	bne.n	800c9ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c998:	7bba      	ldrb	r2, [r7, #14]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	32ae      	adds	r2, #174	@ 0xae
 800c99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00f      	beq.n	800c9c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c9a8:	7bba      	ldrb	r2, [r7, #14]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c9b0:	7bba      	ldrb	r2, [r7, #14]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	32ae      	adds	r2, #174	@ 0xae
 800c9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9c6:	e004      	b.n	800c9d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9cc:	e001      	b.n	800c9d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	88db      	ldrh	r3, [r3, #6]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d110      	bne.n	800c9fc <USBD_StdItfReq+0xc0>
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10d      	bne.n	800c9fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fdd3 	bl	800d58c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9e6:	e009      	b.n	800c9fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fcf7 	bl	800d3de <USBD_CtlError>
          break;
 800c9f0:	e004      	b.n	800c9fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fcf2 	bl	800d3de <USBD_CtlError>
          break;
 800c9fa:	e000      	b.n	800c9fe <USBD_StdItfReq+0xc2>
          break;
 800c9fc:	bf00      	nop
      }
      break;
 800c9fe:	e004      	b.n	800ca0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fceb 	bl	800d3de <USBD_CtlError>
      break;
 800ca08:	bf00      	nop
  }

  return ret;
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	889b      	ldrh	r3, [r3, #4]
 800ca26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca30:	2b40      	cmp	r3, #64	@ 0x40
 800ca32:	d007      	beq.n	800ca44 <USBD_StdEPReq+0x30>
 800ca34:	2b40      	cmp	r3, #64	@ 0x40
 800ca36:	f200 817f 	bhi.w	800cd38 <USBD_StdEPReq+0x324>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d02a      	beq.n	800ca94 <USBD_StdEPReq+0x80>
 800ca3e:	2b20      	cmp	r3, #32
 800ca40:	f040 817a 	bne.w	800cd38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff fe85 	bl	800c758 <USBD_CoreFindEP>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca52:	7b7b      	ldrb	r3, [r7, #13]
 800ca54:	2bff      	cmp	r3, #255	@ 0xff
 800ca56:	f000 8174 	beq.w	800cd42 <USBD_StdEPReq+0x32e>
 800ca5a:	7b7b      	ldrb	r3, [r7, #13]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f040 8170 	bne.w	800cd42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca62:	7b7a      	ldrb	r2, [r7, #13]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca6a:	7b7a      	ldrb	r2, [r7, #13]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	32ae      	adds	r2, #174	@ 0xae
 800ca70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 8163 	beq.w	800cd42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca7c:	7b7a      	ldrb	r2, [r7, #13]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	32ae      	adds	r2, #174	@ 0xae
 800ca82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	4798      	blx	r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca92:	e156      	b.n	800cd42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d008      	beq.n	800caae <USBD_StdEPReq+0x9a>
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	f300 8145 	bgt.w	800cd2c <USBD_StdEPReq+0x318>
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 809b 	beq.w	800cbde <USBD_StdEPReq+0x1ca>
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d03c      	beq.n	800cb26 <USBD_StdEPReq+0x112>
 800caac:	e13e      	b.n	800cd2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d002      	beq.n	800cac0 <USBD_StdEPReq+0xac>
 800caba:	2b03      	cmp	r3, #3
 800cabc:	d016      	beq.n	800caec <USBD_StdEPReq+0xd8>
 800cabe:	e02c      	b.n	800cb1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00d      	beq.n	800cae2 <USBD_StdEPReq+0xce>
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	2b80      	cmp	r3, #128	@ 0x80
 800caca:	d00a      	beq.n	800cae2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 f949 	bl	800dd68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cad6:	2180      	movs	r1, #128	@ 0x80
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 f945 	bl	800dd68 <USBD_LL_StallEP>
 800cade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cae0:	e020      	b.n	800cb24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fc7a 	bl	800d3de <USBD_CtlError>
              break;
 800caea:	e01b      	b.n	800cb24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	885b      	ldrh	r3, [r3, #2]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10e      	bne.n	800cb12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <USBD_StdEPReq+0xfe>
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	2b80      	cmp	r3, #128	@ 0x80
 800cafe:	d008      	beq.n	800cb12 <USBD_StdEPReq+0xfe>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	88db      	ldrh	r3, [r3, #6]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d104      	bne.n	800cb12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 f92b 	bl	800dd68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fd3a 	bl	800d58c <USBD_CtlSendStatus>

              break;
 800cb18:	e004      	b.n	800cb24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fc5e 	bl	800d3de <USBD_CtlError>
              break;
 800cb22:	bf00      	nop
          }
          break;
 800cb24:	e107      	b.n	800cd36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d002      	beq.n	800cb38 <USBD_StdEPReq+0x124>
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d016      	beq.n	800cb64 <USBD_StdEPReq+0x150>
 800cb36:	e04b      	b.n	800cbd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00d      	beq.n	800cb5a <USBD_StdEPReq+0x146>
 800cb3e:	7bbb      	ldrb	r3, [r7, #14]
 800cb40:	2b80      	cmp	r3, #128	@ 0x80
 800cb42:	d00a      	beq.n	800cb5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
 800cb46:	4619      	mov	r1, r3
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f001 f90d 	bl	800dd68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb4e:	2180      	movs	r1, #128	@ 0x80
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 f909 	bl	800dd68 <USBD_LL_StallEP>
 800cb56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb58:	e040      	b.n	800cbdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fc3e 	bl	800d3de <USBD_CtlError>
              break;
 800cb62:	e03b      	b.n	800cbdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	885b      	ldrh	r3, [r3, #2]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d136      	bne.n	800cbda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
 800cb6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d004      	beq.n	800cb80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f001 f913 	bl	800dda6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fd03 	bl	800d58c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb86:	7bbb      	ldrb	r3, [r7, #14]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fde4 	bl	800c758 <USBD_CoreFindEP>
 800cb90:	4603      	mov	r3, r0
 800cb92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb94:	7b7b      	ldrb	r3, [r7, #13]
 800cb96:	2bff      	cmp	r3, #255	@ 0xff
 800cb98:	d01f      	beq.n	800cbda <USBD_StdEPReq+0x1c6>
 800cb9a:	7b7b      	ldrb	r3, [r7, #13]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d11c      	bne.n	800cbda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cba0:	7b7a      	ldrb	r2, [r7, #13]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cba8:	7b7a      	ldrb	r2, [r7, #13]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	32ae      	adds	r2, #174	@ 0xae
 800cbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d010      	beq.n	800cbda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cbb8:	7b7a      	ldrb	r2, [r7, #13]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	32ae      	adds	r2, #174	@ 0xae
 800cbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
 800cbca:	4603      	mov	r3, r0
 800cbcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cbce:	e004      	b.n	800cbda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fc03 	bl	800d3de <USBD_CtlError>
              break;
 800cbd8:	e000      	b.n	800cbdc <USBD_StdEPReq+0x1c8>
              break;
 800cbda:	bf00      	nop
          }
          break;
 800cbdc:	e0ab      	b.n	800cd36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d002      	beq.n	800cbf0 <USBD_StdEPReq+0x1dc>
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d032      	beq.n	800cc54 <USBD_StdEPReq+0x240>
 800cbee:	e097      	b.n	800cd20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <USBD_StdEPReq+0x1f2>
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	2b80      	cmp	r3, #128	@ 0x80
 800cbfa:	d004      	beq.n	800cc06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fbed 	bl	800d3de <USBD_CtlError>
                break;
 800cc04:	e091      	b.n	800cd2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	da0b      	bge.n	800cc26 <USBD_StdEPReq+0x212>
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc14:	4613      	mov	r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	4413      	add	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	3310      	adds	r3, #16
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	4413      	add	r3, r2
 800cc22:	3304      	adds	r3, #4
 800cc24:	e00b      	b.n	800cc3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2202      	movs	r2, #2
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fc43 	bl	800d4d8 <USBD_CtlSendData>
              break;
 800cc52:	e06a      	b.n	800cd2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da11      	bge.n	800cc80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	f003 020f 	and.w	r2, r3, #15
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	440b      	add	r3, r1
 800cc6e:	3324      	adds	r3, #36	@ 0x24
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d117      	bne.n	800cca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fbb0 	bl	800d3de <USBD_CtlError>
                  break;
 800cc7e:	e054      	b.n	800cd2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
 800cc82:	f003 020f 	and.w	r2, r3, #15
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	440b      	add	r3, r1
 800cc92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fb9d 	bl	800d3de <USBD_CtlError>
                  break;
 800cca4:	e041      	b.n	800cd2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	da0b      	bge.n	800ccc6 <USBD_StdEPReq+0x2b2>
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
 800ccb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	3310      	adds	r3, #16
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	e00b      	b.n	800ccde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
 800ccc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cccc:	4613      	mov	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	3304      	adds	r3, #4
 800ccde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <USBD_StdEPReq+0x2d8>
 800cce6:	7bbb      	ldrb	r3, [r7, #14]
 800cce8:	2b80      	cmp	r3, #128	@ 0x80
 800ccea:	d103      	bne.n	800ccf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e00e      	b.n	800cd12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 f873 	bl	800dde4 <USBD_LL_IsStallEP>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2201      	movs	r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	e002      	b.n	800cd12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2202      	movs	r2, #2
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fbdd 	bl	800d4d8 <USBD_CtlSendData>
              break;
 800cd1e:	e004      	b.n	800cd2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fb5b 	bl	800d3de <USBD_CtlError>
              break;
 800cd28:	bf00      	nop
          }
          break;
 800cd2a:	e004      	b.n	800cd36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fb55 	bl	800d3de <USBD_CtlError>
          break;
 800cd34:	bf00      	nop
      }
      break;
 800cd36:	e005      	b.n	800cd44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fb4f 	bl	800d3de <USBD_CtlError>
      break;
 800cd40:	e000      	b.n	800cd44 <USBD_StdEPReq+0x330>
      break;
 800cd42:	bf00      	nop
  }

  return ret;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	885b      	ldrh	r3, [r3, #2]
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	2b06      	cmp	r3, #6
 800cd72:	f200 8128 	bhi.w	800cfc6 <USBD_GetDescriptor+0x276>
 800cd76:	a201      	add	r2, pc, #4	@ (adr r2, 800cd7c <USBD_GetDescriptor+0x2c>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd99 	.word	0x0800cd99
 800cd80:	0800cdb1 	.word	0x0800cdb1
 800cd84:	0800cdf1 	.word	0x0800cdf1
 800cd88:	0800cfc7 	.word	0x0800cfc7
 800cd8c:	0800cfc7 	.word	0x0800cfc7
 800cd90:	0800cf67 	.word	0x0800cf67
 800cd94:	0800cf93 	.word	0x0800cf93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	7c12      	ldrb	r2, [r2, #16]
 800cda4:	f107 0108 	add.w	r1, r7, #8
 800cda8:	4610      	mov	r0, r2
 800cdaa:	4798      	blx	r3
 800cdac:	60f8      	str	r0, [r7, #12]
      break;
 800cdae:	e112      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7c1b      	ldrb	r3, [r3, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10d      	bne.n	800cdd4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc0:	f107 0208 	add.w	r2, r7, #8
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
 800cdc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	2202      	movs	r2, #2
 800cdd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdd2:	e100      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	f107 0208 	add.w	r2, r7, #8
 800cde0:	4610      	mov	r0, r2
 800cde2:	4798      	blx	r3
 800cde4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	3301      	adds	r3, #1
 800cdea:	2202      	movs	r2, #2
 800cdec:	701a      	strb	r2, [r3, #0]
      break;
 800cdee:	e0f2      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	885b      	ldrh	r3, [r3, #2]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	f200 80ac 	bhi.w	800cf54 <USBD_GetDescriptor+0x204>
 800cdfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <USBD_GetDescriptor+0xb4>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce1d 	.word	0x0800ce1d
 800ce08:	0800ce51 	.word	0x0800ce51
 800ce0c:	0800ce85 	.word	0x0800ce85
 800ce10:	0800ceb9 	.word	0x0800ceb9
 800ce14:	0800ceed 	.word	0x0800ceed
 800ce18:	0800cf21 	.word	0x0800cf21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00b      	beq.n	800ce40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7c12      	ldrb	r2, [r2, #16]
 800ce34:	f107 0108 	add.w	r1, r7, #8
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4798      	blx	r3
 800ce3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3e:	e091      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 facb 	bl	800d3de <USBD_CtlError>
            err++;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4e:	e089      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7c12      	ldrb	r2, [r2, #16]
 800ce68:	f107 0108 	add.w	r1, r7, #8
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
 800ce70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce72:	e077      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fab1 	bl	800d3de <USBD_CtlError>
            err++;
 800ce7c:	7afb      	ldrb	r3, [r7, #11]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	72fb      	strb	r3, [r7, #11]
          break;
 800ce82:	e06f      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	7c12      	ldrb	r2, [r2, #16]
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
 800cea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea6:	e05d      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa97 	bl	800d3de <USBD_CtlError>
            err++;
 800ceb0:	7afb      	ldrb	r3, [r7, #11]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb6:	e055      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	7c12      	ldrb	r2, [r2, #16]
 800ced0:	f107 0108 	add.w	r1, r7, #8
 800ced4:	4610      	mov	r0, r2
 800ced6:	4798      	blx	r3
 800ced8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceda:	e043      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa7d 	bl	800d3de <USBD_CtlError>
            err++;
 800cee4:	7afb      	ldrb	r3, [r7, #11]
 800cee6:	3301      	adds	r3, #1
 800cee8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceea:	e03b      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	7c12      	ldrb	r2, [r2, #16]
 800cf04:	f107 0108 	add.w	r1, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0e:	e029      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa63 	bl	800d3de <USBD_CtlError>
            err++;
 800cf18:	7afb      	ldrb	r3, [r7, #11]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1e:	e021      	b.n	800cf64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00b      	beq.n	800cf44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	7c12      	ldrb	r2, [r2, #16]
 800cf38:	f107 0108 	add.w	r1, r7, #8
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	4798      	blx	r3
 800cf40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf42:	e00f      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa49 	bl	800d3de <USBD_CtlError>
            err++;
 800cf4c:	7afb      	ldrb	r3, [r7, #11]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	72fb      	strb	r3, [r7, #11]
          break;
 800cf52:	e007      	b.n	800cf64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fa41 	bl	800d3de <USBD_CtlError>
          err++;
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf62:	bf00      	nop
      }
      break;
 800cf64:	e037      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7c1b      	ldrb	r3, [r3, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf76:	f107 0208 	add.w	r2, r7, #8
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	4798      	blx	r3
 800cf7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf80:	e029      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fa2a 	bl	800d3de <USBD_CtlError>
        err++;
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf90:	e021      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	7c1b      	ldrb	r3, [r3, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10d      	bne.n	800cfb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa2:	f107 0208 	add.w	r2, r7, #8
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	4798      	blx	r3
 800cfaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	2207      	movs	r2, #7
 800cfb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfb4:	e00f      	b.n	800cfd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fa10 	bl	800d3de <USBD_CtlError>
        err++;
 800cfbe:	7afb      	ldrb	r3, [r7, #11]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfc4:	e007      	b.n	800cfd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fa08 	bl	800d3de <USBD_CtlError>
      err++;
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfd4:	bf00      	nop
  }

  if (err != 0U)
 800cfd6:	7afb      	ldrb	r3, [r7, #11]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d11e      	bne.n	800d01a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	88db      	ldrh	r3, [r3, #6]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d016      	beq.n	800d012 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cfe4:	893b      	ldrh	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00e      	beq.n	800d008 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88da      	ldrh	r2, [r3, #6]
 800cfee:	893b      	ldrh	r3, [r7, #8]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	bf28      	it	cs
 800cff4:	4613      	movcs	r3, r2
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cffa:	893b      	ldrh	r3, [r7, #8]
 800cffc:	461a      	mov	r2, r3
 800cffe:	68f9      	ldr	r1, [r7, #12]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fa69 	bl	800d4d8 <USBD_CtlSendData>
 800d006:	e009      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f9e7 	bl	800d3de <USBD_CtlError>
 800d010:	e004      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 faba 	bl	800d58c <USBD_CtlSendStatus>
 800d018:	e000      	b.n	800d01c <USBD_GetDescriptor+0x2cc>
    return;
 800d01a:	bf00      	nop
  }
}
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop

0800d024 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	889b      	ldrh	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d131      	bne.n	800d09a <USBD_SetAddress+0x76>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	88db      	ldrh	r3, [r3, #6]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d12d      	bne.n	800d09a <USBD_SetAddress+0x76>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	2b7f      	cmp	r3, #127	@ 0x7f
 800d044:	d829      	bhi.n	800d09a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b03      	cmp	r3, #3
 800d05c:	d104      	bne.n	800d068 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f9bc 	bl	800d3de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d066:	e01d      	b.n	800d0a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7bfa      	ldrb	r2, [r7, #15]
 800d06c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fee1 	bl	800de3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fa86 	bl	800d58c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d080:	7bfb      	ldrb	r3, [r7, #15]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d004      	beq.n	800d090 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2202      	movs	r2, #2
 800d08a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d08e:	e009      	b.n	800d0a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d098:	e004      	b.n	800d0a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f99e 	bl	800d3de <USBD_CtlError>
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	bf00      	nop
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	885b      	ldrh	r3, [r3, #2]
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	4b4e      	ldr	r3, [pc, #312]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d0c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0c4:	4b4d      	ldr	r3, [pc, #308]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d905      	bls.n	800d0d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f985 	bl	800d3de <USBD_CtlError>
    return USBD_FAIL;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e08c      	b.n	800d1f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d002      	beq.n	800d0ea <USBD_SetConfig+0x3e>
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d029      	beq.n	800d13c <USBD_SetConfig+0x90>
 800d0e8:	e075      	b.n	800d1d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0ea:	4b44      	ldr	r3, [pc, #272]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d020      	beq.n	800d134 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d0f2:	4b42      	ldr	r3, [pc, #264]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0fc:	4b3f      	ldr	r3, [pc, #252]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7fe ffe3 	bl	800c0ce <USBD_SetClassConfig>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d008      	beq.n	800d124 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f962 	bl	800d3de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2202      	movs	r2, #2
 800d11e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d122:	e065      	b.n	800d1f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fa31 	bl	800d58c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2203      	movs	r2, #3
 800d12e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d132:	e05d      	b.n	800d1f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fa29 	bl	800d58c <USBD_CtlSendStatus>
      break;
 800d13a:	e059      	b.n	800d1f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d13c:	4b2f      	ldr	r3, [pc, #188]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d112      	bne.n	800d16a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d14c:	4b2b      	ldr	r3, [pc, #172]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	461a      	mov	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d156:	4b29      	ldr	r3, [pc, #164]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7fe ffd2 	bl	800c106 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fa12 	bl	800d58c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d168:	e042      	b.n	800d1f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d16a:	4b24      	ldr	r3, [pc, #144]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d02a      	beq.n	800d1ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7fe ffc0 	bl	800c106 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d186:	4b1d      	ldr	r3, [pc, #116]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d190:	4b1a      	ldr	r3, [pc, #104]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7fe ff99 	bl	800c0ce <USBD_SetClassConfig>
 800d19c:	4603      	mov	r3, r0
 800d19e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00f      	beq.n	800d1c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 f918 	bl	800d3de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fe ffa5 	bl	800c106 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2202      	movs	r2, #2
 800d1c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1c4:	e014      	b.n	800d1f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f9e0 	bl	800d58c <USBD_CtlSendStatus>
      break;
 800d1cc:	e010      	b.n	800d1f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f9dc 	bl	800d58c <USBD_CtlSendStatus>
      break;
 800d1d4:	e00c      	b.n	800d1f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f900 	bl	800d3de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1de:	4b07      	ldr	r3, [pc, #28]	@ (800d1fc <USBD_SetConfig+0x150>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7fe ff8e 	bl	800c106 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ee:	bf00      	nop
  }

  return ret;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000540 	.word	0x20000540

0800d200 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	88db      	ldrh	r3, [r3, #6]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d004      	beq.n	800d21c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f8e2 	bl	800d3de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d21a:	e023      	b.n	800d264 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b02      	cmp	r3, #2
 800d226:	dc02      	bgt.n	800d22e <USBD_GetConfig+0x2e>
 800d228:	2b00      	cmp	r3, #0
 800d22a:	dc03      	bgt.n	800d234 <USBD_GetConfig+0x34>
 800d22c:	e015      	b.n	800d25a <USBD_GetConfig+0x5a>
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d00b      	beq.n	800d24a <USBD_GetConfig+0x4a>
 800d232:	e012      	b.n	800d25a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3308      	adds	r3, #8
 800d23e:	2201      	movs	r2, #1
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f948 	bl	800d4d8 <USBD_CtlSendData>
        break;
 800d248:	e00c      	b.n	800d264 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3304      	adds	r3, #4
 800d24e:	2201      	movs	r2, #1
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f940 	bl	800d4d8 <USBD_CtlSendData>
        break;
 800d258:	e004      	b.n	800d264 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f8be 	bl	800d3de <USBD_CtlError>
        break;
 800d262:	bf00      	nop
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	3b01      	subs	r3, #1
 800d280:	2b02      	cmp	r3, #2
 800d282:	d81e      	bhi.n	800d2c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	88db      	ldrh	r3, [r3, #6]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d004      	beq.n	800d296 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 f8a5 	bl	800d3de <USBD_CtlError>
        break;
 800d294:	e01a      	b.n	800d2cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f043 0202 	orr.w	r2, r3, #2
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	330c      	adds	r3, #12
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f90c 	bl	800d4d8 <USBD_CtlSendData>
      break;
 800d2c0:	e004      	b.n	800d2cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f88a 	bl	800d3de <USBD_CtlError>
      break;
 800d2ca:	bf00      	nop
  }
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	885b      	ldrh	r3, [r3, #2]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d107      	bne.n	800d2f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f94c 	bl	800d58c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d2f4:	e013      	b.n	800d31e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d10b      	bne.n	800d316 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	889b      	ldrh	r3, [r3, #4]
 800d302:	0a1b      	lsrs	r3, r3, #8
 800d304:	b29b      	uxth	r3, r3
 800d306:	b2da      	uxtb	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f93c 	bl	800d58c <USBD_CtlSendStatus>
}
 800d314:	e003      	b.n	800d31e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f860 	bl	800d3de <USBD_CtlError>
}
 800d31e:	bf00      	nop
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b082      	sub	sp, #8
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d336:	b2db      	uxtb	r3, r3
 800d338:	3b01      	subs	r3, #1
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d80b      	bhi.n	800d356 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	885b      	ldrh	r3, [r3, #2]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d10c      	bne.n	800d360 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f91c 	bl	800d58c <USBD_CtlSendStatus>
      }
      break;
 800d354:	e004      	b.n	800d360 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f840 	bl	800d3de <USBD_CtlError>
      break;
 800d35e:	e000      	b.n	800d362 <USBD_ClrFeature+0x3c>
      break;
 800d360:	bf00      	nop
  }
}
 800d362:	bf00      	nop
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b084      	sub	sp, #16
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3301      	adds	r3, #1
 800d384:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	781a      	ldrb	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3301      	adds	r3, #1
 800d392:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f7ff fa40 	bl	800c81a <SWAPBYTE>
 800d39a:	4603      	mov	r3, r0
 800d39c:	461a      	mov	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f7ff fa33 	bl	800c81a <SWAPBYTE>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7ff fa26 	bl	800c81a <SWAPBYTE>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	80da      	strh	r2, [r3, #6]
}
 800d3d6:	bf00      	nop
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b082      	sub	sp, #8
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3e8:	2180      	movs	r1, #128	@ 0x80
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fcbc 	bl	800dd68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fcb8 	bl	800dd68 <USBD_LL_StallEP>
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d40c:	2300      	movs	r3, #0
 800d40e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d042      	beq.n	800d49c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d41a:	6938      	ldr	r0, [r7, #16]
 800d41c:	f000 f842 	bl	800d4a4 <USBD_GetLen>
 800d420:	4603      	mov	r3, r0
 800d422:	3301      	adds	r3, #1
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d42a:	d808      	bhi.n	800d43e <USBD_GetString+0x3e>
 800d42c:	6938      	ldr	r0, [r7, #16]
 800d42e:	f000 f839 	bl	800d4a4 <USBD_GetLen>
 800d432:	4603      	mov	r3, r0
 800d434:	3301      	adds	r3, #1
 800d436:	b29b      	uxth	r3, r3
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	e001      	b.n	800d442 <USBD_GetString+0x42>
 800d43e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	4413      	add	r3, r2
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	701a      	strb	r2, [r3, #0]
  idx++;
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	3301      	adds	r3, #1
 800d456:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	4413      	add	r3, r2
 800d45e:	2203      	movs	r2, #3
 800d460:	701a      	strb	r2, [r3, #0]
  idx++;
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	3301      	adds	r3, #1
 800d466:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d468:	e013      	b.n	800d492 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	4413      	add	r3, r2
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	7812      	ldrb	r2, [r2, #0]
 800d474:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	3301      	adds	r3, #1
 800d47a:	613b      	str	r3, [r7, #16]
    idx++;
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	3301      	adds	r3, #1
 800d480:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d482:	7dfb      	ldrb	r3, [r7, #23]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	4413      	add	r3, r2
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	3301      	adds	r3, #1
 800d490:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e7      	bne.n	800d46a <USBD_GetString+0x6a>
 800d49a:	e000      	b.n	800d49e <USBD_GetString+0x9e>
    return;
 800d49c:	bf00      	nop
  }
}
 800d49e:	3718      	adds	r7, #24
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d4b4:	e005      	b.n	800d4c2 <USBD_GetLen+0x1e>
  {
    len++;
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1f5      	bne.n	800d4b6 <USBD_GetLen+0x12>
  }

  return len;
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f000 fcbb 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	60b9      	str	r1, [r7, #8]
 800d518:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	2100      	movs	r1, #0
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 fcaa 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2203      	movs	r2, #3
 800d540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	2100      	movs	r1, #0
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f000 fcae 	bl	800debc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b084      	sub	sp, #16
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	2100      	movs	r1, #0
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 fc9d 	bl	800debc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2204      	movs	r2, #4
 800d598:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d59c:	2300      	movs	r3, #0
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fc69 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2205      	movs	r2, #5
 800d5be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fc77 	bl	800debc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4912      	ldr	r1, [pc, #72]	@ (800d628 <MX_USB_DEVICE_Init+0x50>)
 800d5e0:	4812      	ldr	r0, [pc, #72]	@ (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d5e2:	f7fe fcf7 	bl	800bfd4 <USBD_Init>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5ec:	f7f4 fafc 	bl	8001be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5f0:	490f      	ldr	r1, [pc, #60]	@ (800d630 <MX_USB_DEVICE_Init+0x58>)
 800d5f2:	480e      	ldr	r0, [pc, #56]	@ (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d5f4:	f7fe fd1e 	bl	800c034 <USBD_RegisterClass>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d5fe:	f7f4 faf3 	bl	8001be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d602:	490c      	ldr	r1, [pc, #48]	@ (800d634 <MX_USB_DEVICE_Init+0x5c>)
 800d604:	4809      	ldr	r0, [pc, #36]	@ (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d606:	f7fe fc55 	bl	800beb4 <USBD_CDC_RegisterInterface>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d610:	f7f4 faea 	bl	8001be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d614:	4805      	ldr	r0, [pc, #20]	@ (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d616:	f7fe fd43 	bl	800c0a0 <USBD_Start>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d620:	f7f4 fae2 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}
 800d628:	200000c4 	.word	0x200000c4
 800d62c:	20000544 	.word	0x20000544
 800d630:	20000030 	.word	0x20000030
 800d634:	200000b0 	.word	0x200000b0

0800d638 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d63c:	2200      	movs	r2, #0
 800d63e:	4905      	ldr	r1, [pc, #20]	@ (800d654 <CDC_Init_FS+0x1c>)
 800d640:	4805      	ldr	r0, [pc, #20]	@ (800d658 <CDC_Init_FS+0x20>)
 800d642:	f7fe fc51 	bl	800bee8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d646:	4905      	ldr	r1, [pc, #20]	@ (800d65c <CDC_Init_FS+0x24>)
 800d648:	4803      	ldr	r0, [pc, #12]	@ (800d658 <CDC_Init_FS+0x20>)
 800d64a:	f7fe fc6f 	bl	800bf2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d64e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d650:	4618      	mov	r0, r3
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20001020 	.word	0x20001020
 800d658:	20000544 	.word	0x20000544
 800d65c:	20000820 	.word	0x20000820

0800d660 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d660:	b480      	push	{r7}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d664:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d666:	4618      	mov	r0, r3
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	4613      	mov	r3, r2
 800d67e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	2b23      	cmp	r3, #35	@ 0x23
 800d684:	d84a      	bhi.n	800d71c <CDC_Control_FS+0xac>
 800d686:	a201      	add	r2, pc, #4	@ (adr r2, 800d68c <CDC_Control_FS+0x1c>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d71d 	.word	0x0800d71d
 800d690:	0800d71d 	.word	0x0800d71d
 800d694:	0800d71d 	.word	0x0800d71d
 800d698:	0800d71d 	.word	0x0800d71d
 800d69c:	0800d71d 	.word	0x0800d71d
 800d6a0:	0800d71d 	.word	0x0800d71d
 800d6a4:	0800d71d 	.word	0x0800d71d
 800d6a8:	0800d71d 	.word	0x0800d71d
 800d6ac:	0800d71d 	.word	0x0800d71d
 800d6b0:	0800d71d 	.word	0x0800d71d
 800d6b4:	0800d71d 	.word	0x0800d71d
 800d6b8:	0800d71d 	.word	0x0800d71d
 800d6bc:	0800d71d 	.word	0x0800d71d
 800d6c0:	0800d71d 	.word	0x0800d71d
 800d6c4:	0800d71d 	.word	0x0800d71d
 800d6c8:	0800d71d 	.word	0x0800d71d
 800d6cc:	0800d71d 	.word	0x0800d71d
 800d6d0:	0800d71d 	.word	0x0800d71d
 800d6d4:	0800d71d 	.word	0x0800d71d
 800d6d8:	0800d71d 	.word	0x0800d71d
 800d6dc:	0800d71d 	.word	0x0800d71d
 800d6e0:	0800d71d 	.word	0x0800d71d
 800d6e4:	0800d71d 	.word	0x0800d71d
 800d6e8:	0800d71d 	.word	0x0800d71d
 800d6ec:	0800d71d 	.word	0x0800d71d
 800d6f0:	0800d71d 	.word	0x0800d71d
 800d6f4:	0800d71d 	.word	0x0800d71d
 800d6f8:	0800d71d 	.word	0x0800d71d
 800d6fc:	0800d71d 	.word	0x0800d71d
 800d700:	0800d71d 	.word	0x0800d71d
 800d704:	0800d71d 	.word	0x0800d71d
 800d708:	0800d71d 	.word	0x0800d71d
 800d70c:	0800d71d 	.word	0x0800d71d
 800d710:	0800d71d 	.word	0x0800d71d
 800d714:	0800d71d 	.word	0x0800d71d
 800d718:	0800d71d 	.word	0x0800d71d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d71c:	bf00      	nop
  }

  return (USBD_OK);
 800d71e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d736:	6879      	ldr	r1, [r7, #4]
 800d738:	4805      	ldr	r0, [pc, #20]	@ (800d750 <CDC_Receive_FS+0x24>)
 800d73a:	f7fe fbf7 	bl	800bf2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d73e:	4804      	ldr	r0, [pc, #16]	@ (800d750 <CDC_Receive_FS+0x24>)
 800d740:	f7fe fc12 	bl	800bf68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d744:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20000544 	.word	0x20000544

0800d754 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	4613      	mov	r3, r2
 800d760:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	371c      	adds	r7, #28
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
	...

0800d778 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	6039      	str	r1, [r7, #0]
 800d782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2212      	movs	r2, #18
 800d788:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d78a:	4b03      	ldr	r3, [pc, #12]	@ (800d798 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	200000e0 	.word	0x200000e0

0800d79c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	6039      	str	r1, [r7, #0]
 800d7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7ae:	4b03      	ldr	r3, [pc, #12]	@ (800d7bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	200000f4 	.word	0x200000f4

0800d7c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	6039      	str	r1, [r7, #0]
 800d7ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d105      	bne.n	800d7de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	4907      	ldr	r1, [pc, #28]	@ (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7d6:	4808      	ldr	r0, [pc, #32]	@ (800d7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7d8:	f7ff fe12 	bl	800d400 <USBD_GetString>
 800d7dc:	e004      	b.n	800d7e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	4904      	ldr	r1, [pc, #16]	@ (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7e2:	4805      	ldr	r0, [pc, #20]	@ (800d7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e4:	f7ff fe0c 	bl	800d400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7e8:	4b02      	ldr	r3, [pc, #8]	@ (800d7f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20001820 	.word	0x20001820
 800d7f8:	08011214 	.word	0x08011214

0800d7fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	6039      	str	r1, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	4904      	ldr	r1, [pc, #16]	@ (800d81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d80c:	4804      	ldr	r0, [pc, #16]	@ (800d820 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d80e:	f7ff fdf7 	bl	800d400 <USBD_GetString>
  return USBD_StrDesc;
 800d812:	4b02      	ldr	r3, [pc, #8]	@ (800d81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20001820 	.word	0x20001820
 800d820:	0801122c 	.word	0x0801122c

0800d824 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	221a      	movs	r2, #26
 800d834:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d836:	f000 f843 	bl	800d8c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d83a:	4b02      	ldr	r3, [pc, #8]	@ (800d844 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	200000f8 	.word	0x200000f8

0800d848 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	4603      	mov	r3, r0
 800d850:	6039      	str	r1, [r7, #0]
 800d852:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d105      	bne.n	800d866 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	4907      	ldr	r1, [pc, #28]	@ (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d85e:	4808      	ldr	r0, [pc, #32]	@ (800d880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d860:	f7ff fdce 	bl	800d400 <USBD_GetString>
 800d864:	e004      	b.n	800d870 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4904      	ldr	r1, [pc, #16]	@ (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d86a:	4805      	ldr	r0, [pc, #20]	@ (800d880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d86c:	f7ff fdc8 	bl	800d400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d870:	4b02      	ldr	r3, [pc, #8]	@ (800d87c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20001820 	.word	0x20001820
 800d880:	08011240 	.word	0x08011240

0800d884 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	6039      	str	r1, [r7, #0]
 800d88e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d105      	bne.n	800d8a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	4907      	ldr	r1, [pc, #28]	@ (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d89a:	4808      	ldr	r0, [pc, #32]	@ (800d8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d89c:	f7ff fdb0 	bl	800d400 <USBD_GetString>
 800d8a0:	e004      	b.n	800d8ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	4904      	ldr	r1, [pc, #16]	@ (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8a6:	4805      	ldr	r0, [pc, #20]	@ (800d8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8a8:	f7ff fdaa 	bl	800d400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8ac:	4b02      	ldr	r3, [pc, #8]	@ (800d8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20001820 	.word	0x20001820
 800d8bc:	0801124c 	.word	0x0801124c

0800d8c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d904 <Get_SerialNum+0x44>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d908 <Get_SerialNum+0x48>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d90c <Get_SerialNum+0x4c>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8e6:	2208      	movs	r2, #8
 800d8e8:	4909      	ldr	r1, [pc, #36]	@ (800d910 <Get_SerialNum+0x50>)
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f000 f814 	bl	800d918 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8f0:	2204      	movs	r2, #4
 800d8f2:	4908      	ldr	r1, [pc, #32]	@ (800d914 <Get_SerialNum+0x54>)
 800d8f4:	68b8      	ldr	r0, [r7, #8]
 800d8f6:	f000 f80f 	bl	800d918 <IntToUnicode>
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	1fff7a10 	.word	0x1fff7a10
 800d908:	1fff7a14 	.word	0x1fff7a14
 800d90c:	1fff7a18 	.word	0x1fff7a18
 800d910:	200000fa 	.word	0x200000fa
 800d914:	2000010a 	.word	0x2000010a

0800d918 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	4613      	mov	r3, r2
 800d924:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d92a:	2300      	movs	r3, #0
 800d92c:	75fb      	strb	r3, [r7, #23]
 800d92e:	e027      	b.n	800d980 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	0f1b      	lsrs	r3, r3, #28
 800d934:	2b09      	cmp	r3, #9
 800d936:	d80b      	bhi.n	800d950 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0f1b      	lsrs	r3, r3, #28
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	4619      	mov	r1, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	440b      	add	r3, r1
 800d948:	3230      	adds	r2, #48	@ 0x30
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	701a      	strb	r2, [r3, #0]
 800d94e:	e00a      	b.n	800d966 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	0f1b      	lsrs	r3, r3, #28
 800d954:	b2da      	uxtb	r2, r3
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	4619      	mov	r1, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	440b      	add	r3, r1
 800d960:	3237      	adds	r2, #55	@ 0x37
 800d962:	b2d2      	uxtb	r2, r2
 800d964:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	011b      	lsls	r3, r3, #4
 800d96a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d96c:	7dfb      	ldrb	r3, [r7, #23]
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	3301      	adds	r3, #1
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	4413      	add	r3, r2
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d97a:	7dfb      	ldrb	r3, [r7, #23]
 800d97c:	3301      	adds	r3, #1
 800d97e:	75fb      	strb	r3, [r7, #23]
 800d980:	7dfa      	ldrb	r2, [r7, #23]
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	429a      	cmp	r2, r3
 800d986:	d3d3      	bcc.n	800d930 <IntToUnicode+0x18>
  }
}
 800d988:	bf00      	nop
 800d98a:	bf00      	nop
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
	...

0800d998 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	@ 0x28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a0:	f107 0314 	add.w	r3, r7, #20
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	605a      	str	r2, [r3, #4]
 800d9aa:	609a      	str	r2, [r3, #8]
 800d9ac:	60da      	str	r2, [r3, #12]
 800d9ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9b8:	d13a      	bne.n	800da30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	613b      	str	r3, [r7, #16]
 800d9be:	4b1e      	ldr	r3, [pc, #120]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c2:	4a1d      	ldr	r2, [pc, #116]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800d9c4:	f043 0301 	orr.w	r3, r3, #1
 800d9c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800d9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d9d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d9da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9dc:	2302      	movs	r3, #2
 800d9de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9e8:	230a      	movs	r3, #10
 800d9ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9ec:	f107 0314 	add.w	r3, r7, #20
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4812      	ldr	r0, [pc, #72]	@ (800da3c <HAL_PCD_MspInit+0xa4>)
 800d9f4:	f7f5 fc1e 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800d9fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9fc:	4a0e      	ldr	r2, [pc, #56]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800d9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da02:	6353      	str	r3, [r2, #52]	@ 0x34
 800da04:	2300      	movs	r3, #0
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	4b0b      	ldr	r3, [pc, #44]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800da0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da0c:	4a0a      	ldr	r2, [pc, #40]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800da0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da12:	6453      	str	r3, [r2, #68]	@ 0x44
 800da14:	4b08      	ldr	r3, [pc, #32]	@ (800da38 <HAL_PCD_MspInit+0xa0>)
 800da16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da1c:	60fb      	str	r3, [r7, #12]
 800da1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da20:	2200      	movs	r2, #0
 800da22:	2100      	movs	r1, #0
 800da24:	2043      	movs	r0, #67	@ 0x43
 800da26:	f7f5 f844 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da2a:	2043      	movs	r0, #67	@ 0x43
 800da2c:	f7f5 f85d 	bl	8002aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da30:	bf00      	nop
 800da32:	3728      	adds	r7, #40	@ 0x28
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	40023800 	.word	0x40023800
 800da3c:	40020000 	.word	0x40020000

0800da40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da54:	4619      	mov	r1, r3
 800da56:	4610      	mov	r0, r2
 800da58:	f7fe fb6f 	bl	800c13a <USBD_LL_SetupStage>
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da76:	78fa      	ldrb	r2, [r7, #3]
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	4613      	mov	r3, r2
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	4413      	add	r3, r2
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	440b      	add	r3, r1
 800da84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	78fb      	ldrb	r3, [r7, #3]
 800da8c:	4619      	mov	r1, r3
 800da8e:	f7fe fba9 	bl	800c1e4 <USBD_LL_DataOutStage>
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	460b      	mov	r3, r1
 800daa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800daac:	78fa      	ldrb	r2, [r7, #3]
 800daae:	6879      	ldr	r1, [r7, #4]
 800dab0:	4613      	mov	r3, r2
 800dab2:	00db      	lsls	r3, r3, #3
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	440b      	add	r3, r1
 800daba:	3320      	adds	r3, #32
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	78fb      	ldrb	r3, [r7, #3]
 800dac0:	4619      	mov	r1, r3
 800dac2:	f7fe fc42 	bl	800c34a <USBD_LL_DataInStage>
}
 800dac6:	bf00      	nop
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b082      	sub	sp, #8
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fe fd7c 	bl	800c5da <USBD_LL_SOF>
}
 800dae2:	bf00      	nop
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b084      	sub	sp, #16
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800daf2:	2301      	movs	r3, #1
 800daf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	79db      	ldrb	r3, [r3, #7]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d001      	beq.n	800db02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dafe:	f7f4 f873 	bl	8001be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db08:	7bfa      	ldrb	r2, [r7, #15]
 800db0a:	4611      	mov	r1, r2
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fe fd20 	bl	800c552 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fe fcc8 	bl	800c4ae <USBD_LL_Reset>
}
 800db1e:	bf00      	nop
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fd1b 	bl	800c572 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	6812      	ldr	r2, [r2, #0]
 800db4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db4e:	f043 0301 	orr.w	r3, r3, #1
 800db52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7adb      	ldrb	r3, [r3, #11]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d005      	beq.n	800db68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db5c:	4b04      	ldr	r3, [pc, #16]	@ (800db70 <HAL_PCD_SuspendCallback+0x48>)
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	4a03      	ldr	r2, [pc, #12]	@ (800db70 <HAL_PCD_SuspendCallback+0x48>)
 800db62:	f043 0306 	orr.w	r3, r3, #6
 800db66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	e000ed00 	.word	0xe000ed00

0800db74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe fd11 	bl	800c5aa <USBD_LL_Resume>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dba2:	78fa      	ldrb	r2, [r7, #3]
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fd69 	bl	800c67e <USBD_LL_IsoOUTIncomplete>
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbc6:	78fa      	ldrb	r2, [r7, #3]
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fe fd25 	bl	800c61a <USBD_LL_IsoINIncomplete>
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe fd7b 	bl	800c6e2 <USBD_LL_DevConnected>
}
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fd78 	bl	800c6f8 <USBD_LL_DevDisconnected>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d13c      	bne.n	800dc9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc20:	4a20      	ldr	r2, [pc, #128]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a1e      	ldr	r2, [pc, #120]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc30:	4b1c      	ldr	r3, [pc, #112]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dc38:	4b1a      	ldr	r3, [pc, #104]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc3a:	2204      	movs	r2, #4
 800dc3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc3e:	4b19      	ldr	r3, [pc, #100]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc40:	2202      	movs	r2, #2
 800dc42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc44:	4b17      	ldr	r3, [pc, #92]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc46:	2200      	movs	r2, #0
 800dc48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc4a:	4b16      	ldr	r3, [pc, #88]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc50:	4b14      	ldr	r3, [pc, #80]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc56:	4b13      	ldr	r3, [pc, #76]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc5c:	4b11      	ldr	r3, [pc, #68]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc62:	4b10      	ldr	r3, [pc, #64]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc68:	4b0e      	ldr	r3, [pc, #56]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc6e:	480d      	ldr	r0, [pc, #52]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc70:	f7f8 fae1 	bl	8006236 <HAL_PCD_Init>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc7a:	f7f3 ffb5 	bl	8001be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc7e:	2180      	movs	r1, #128	@ 0x80
 800dc80:	4808      	ldr	r0, [pc, #32]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc82:	f7f9 fd0e 	bl	80076a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc86:	2240      	movs	r2, #64	@ 0x40
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4806      	ldr	r0, [pc, #24]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc8c:	f7f9 fcc2 	bl	8007614 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc90:	2280      	movs	r2, #128	@ 0x80
 800dc92:	2101      	movs	r1, #1
 800dc94:	4803      	ldr	r0, [pc, #12]	@ (800dca4 <USBD_LL_Init+0x94>)
 800dc96:	f7f9 fcbd 	bl	8007614 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20001a20 	.word	0x20001a20

0800dca8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f8 fbc8 	bl	8006454 <HAL_PCD_Start>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 f942 	bl	800df54 <USBD_Get_USB_Status>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b084      	sub	sp, #16
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	4608      	mov	r0, r1
 800dce8:	4611      	mov	r1, r2
 800dcea:	461a      	mov	r2, r3
 800dcec:	4603      	mov	r3, r0
 800dcee:	70fb      	strb	r3, [r7, #3]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70bb      	strb	r3, [r7, #2]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd06:	78bb      	ldrb	r3, [r7, #2]
 800dd08:	883a      	ldrh	r2, [r7, #0]
 800dd0a:	78f9      	ldrb	r1, [r7, #3]
 800dd0c:	f7f9 f89c 	bl	8006e48 <HAL_PCD_EP_Open>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 f91c 	bl	800df54 <USBD_Get_USB_Status>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd44:	78fa      	ldrb	r2, [r7, #3]
 800dd46:	4611      	mov	r1, r2
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7f9 f8e7 	bl	8006f1c <HAL_PCD_EP_Close>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd52:	7bfb      	ldrb	r3, [r7, #15]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 f8fd 	bl	800df54 <USBD_Get_USB_Status>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd82:	78fa      	ldrb	r2, [r7, #3]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f9 f99f 	bl	80070ca <HAL_PCD_EP_SetStall>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 f8de 	bl	800df54 <USBD_Get_USB_Status>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddc0:	78fa      	ldrb	r2, [r7, #3]
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f9 f9e3 	bl	8007190 <HAL_PCD_EP_ClrStall>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 f8bf 	bl	800df54 <USBD_Get_USB_Status>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ddf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	da0b      	bge.n	800de18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de06:	68f9      	ldr	r1, [r7, #12]
 800de08:	4613      	mov	r3, r2
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	440b      	add	r3, r1
 800de12:	3316      	adds	r3, #22
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	e00b      	b.n	800de30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de18:	78fb      	ldrb	r3, [r7, #3]
 800de1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de1e:	68f9      	ldr	r1, [r7, #12]
 800de20:	4613      	mov	r3, r2
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	4413      	add	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	440b      	add	r3, r1
 800de2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f8 ffd0 	bl	8006e00 <HAL_PCD_SetAddress>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f874 	bl	800df54 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b086      	sub	sp, #24
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	460b      	mov	r3, r1
 800de88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de98:	7af9      	ldrb	r1, [r7, #11]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	f7f9 f8da 	bl	8007056 <HAL_PCD_EP_Transmit>
 800dea2:	4603      	mov	r3, r0
 800dea4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 f853 	bl	800df54 <USBD_Get_USB_Status>
 800deae:	4603      	mov	r3, r0
 800deb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	607a      	str	r2, [r7, #4]
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	460b      	mov	r3, r1
 800deca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800deda:	7af9      	ldrb	r1, [r7, #11]
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	f7f9 f866 	bl	8006fb0 <HAL_PCD_EP_Receive>
 800dee4:	4603      	mov	r3, r0
 800dee6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee8:	7dfb      	ldrb	r3, [r7, #23]
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f832 	bl	800df54 <USBD_Get_USB_Status>
 800def0:	4603      	mov	r3, r0
 800def2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800def4:	7dbb      	ldrb	r3, [r7, #22]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b082      	sub	sp, #8
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	460b      	mov	r3, r1
 800df08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df10:	78fa      	ldrb	r2, [r7, #3]
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f7f9 f886 	bl	8007026 <HAL_PCD_EP_GetRxCount>
 800df1a:	4603      	mov	r3, r0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df2c:	4b03      	ldr	r3, [pc, #12]	@ (800df3c <USBD_static_malloc+0x18>)
}
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	20001f04 	.word	0x20001f04

0800df40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]

}
 800df48:	bf00      	nop
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df5e:	2300      	movs	r3, #0
 800df60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	2b03      	cmp	r3, #3
 800df66:	d817      	bhi.n	800df98 <USBD_Get_USB_Status+0x44>
 800df68:	a201      	add	r2, pc, #4	@ (adr r2, 800df70 <USBD_Get_USB_Status+0x1c>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800df81 	.word	0x0800df81
 800df74:	0800df87 	.word	0x0800df87
 800df78:	0800df8d 	.word	0x0800df8d
 800df7c:	0800df93 	.word	0x0800df93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	73fb      	strb	r3, [r7, #15]
    break;
 800df84:	e00b      	b.n	800df9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df86:	2303      	movs	r3, #3
 800df88:	73fb      	strb	r3, [r7, #15]
    break;
 800df8a:	e008      	b.n	800df9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df8c:	2301      	movs	r3, #1
 800df8e:	73fb      	strb	r3, [r7, #15]
    break;
 800df90:	e005      	b.n	800df9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df92:	2303      	movs	r3, #3
 800df94:	73fb      	strb	r3, [r7, #15]
    break;
 800df96:	e002      	b.n	800df9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df98:	2303      	movs	r3, #3
 800df9a:	73fb      	strb	r3, [r7, #15]
    break;
 800df9c:	bf00      	nop
  }
  return usb_status;
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <__cxa_guard_acquire>:
 800dfac:	6802      	ldr	r2, [r0, #0]
 800dfae:	07d2      	lsls	r2, r2, #31
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	d405      	bmi.n	800dfc0 <__cxa_guard_acquire+0x14>
 800dfb4:	7842      	ldrb	r2, [r0, #1]
 800dfb6:	b102      	cbz	r2, 800dfba <__cxa_guard_acquire+0xe>
 800dfb8:	deff      	udf	#255	@ 0xff
 800dfba:	2001      	movs	r0, #1
 800dfbc:	7058      	strb	r0, [r3, #1]
 800dfbe:	4770      	bx	lr
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	4770      	bx	lr

0800dfc4 <__cxa_guard_release>:
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	6003      	str	r3, [r0, #0]
 800dfc8:	4770      	bx	lr

0800dfca <atan2>:
 800dfca:	f000 b909 	b.w	800e1e0 <__ieee754_atan2>

0800dfce <sqrt>:
 800dfce:	b538      	push	{r3, r4, r5, lr}
 800dfd0:	ed2d 8b02 	vpush	{d8}
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	f000 f826 	bl	800e028 <__ieee754_sqrt>
 800dfdc:	4622      	mov	r2, r4
 800dfde:	462b      	mov	r3, r5
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	eeb0 8a40 	vmov.f32	s16, s0
 800dfe8:	eef0 8a60 	vmov.f32	s17, s1
 800dfec:	f7f2 fda6 	bl	8000b3c <__aeabi_dcmpun>
 800dff0:	b990      	cbnz	r0, 800e018 <sqrt+0x4a>
 800dff2:	2200      	movs	r2, #0
 800dff4:	2300      	movs	r3, #0
 800dff6:	4620      	mov	r0, r4
 800dff8:	4629      	mov	r1, r5
 800dffa:	f7f2 fd77 	bl	8000aec <__aeabi_dcmplt>
 800dffe:	b158      	cbz	r0, 800e018 <sqrt+0x4a>
 800e000:	f001 fa0a 	bl	800f418 <__errno>
 800e004:	2321      	movs	r3, #33	@ 0x21
 800e006:	6003      	str	r3, [r0, #0]
 800e008:	2200      	movs	r2, #0
 800e00a:	2300      	movs	r3, #0
 800e00c:	4610      	mov	r0, r2
 800e00e:	4619      	mov	r1, r3
 800e010:	f7f2 fc24 	bl	800085c <__aeabi_ddiv>
 800e014:	ec41 0b18 	vmov	d8, r0, r1
 800e018:	eeb0 0a48 	vmov.f32	s0, s16
 800e01c:	eef0 0a68 	vmov.f32	s1, s17
 800e020:	ecbd 8b02 	vpop	{d8}
 800e024:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e028 <__ieee754_sqrt>:
 800e028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	4a68      	ldr	r2, [pc, #416]	@ (800e1d0 <__ieee754_sqrt+0x1a8>)
 800e02e:	ec55 4b10 	vmov	r4, r5, d0
 800e032:	43aa      	bics	r2, r5
 800e034:	462b      	mov	r3, r5
 800e036:	4621      	mov	r1, r4
 800e038:	d110      	bne.n	800e05c <__ieee754_sqrt+0x34>
 800e03a:	4622      	mov	r2, r4
 800e03c:	4620      	mov	r0, r4
 800e03e:	4629      	mov	r1, r5
 800e040:	f7f2 fae2 	bl	8000608 <__aeabi_dmul>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4620      	mov	r0, r4
 800e04a:	4629      	mov	r1, r5
 800e04c:	f7f2 f926 	bl	800029c <__adddf3>
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	ec45 4b10 	vmov	d0, r4, r5
 800e058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	2d00      	cmp	r5, #0
 800e05e:	dc0e      	bgt.n	800e07e <__ieee754_sqrt+0x56>
 800e060:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e064:	4322      	orrs	r2, r4
 800e066:	d0f5      	beq.n	800e054 <__ieee754_sqrt+0x2c>
 800e068:	b19d      	cbz	r5, 800e092 <__ieee754_sqrt+0x6a>
 800e06a:	4622      	mov	r2, r4
 800e06c:	4620      	mov	r0, r4
 800e06e:	4629      	mov	r1, r5
 800e070:	f7f2 f912 	bl	8000298 <__aeabi_dsub>
 800e074:	4602      	mov	r2, r0
 800e076:	460b      	mov	r3, r1
 800e078:	f7f2 fbf0 	bl	800085c <__aeabi_ddiv>
 800e07c:	e7e8      	b.n	800e050 <__ieee754_sqrt+0x28>
 800e07e:	152a      	asrs	r2, r5, #20
 800e080:	d115      	bne.n	800e0ae <__ieee754_sqrt+0x86>
 800e082:	2000      	movs	r0, #0
 800e084:	e009      	b.n	800e09a <__ieee754_sqrt+0x72>
 800e086:	0acb      	lsrs	r3, r1, #11
 800e088:	3a15      	subs	r2, #21
 800e08a:	0549      	lsls	r1, r1, #21
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0fa      	beq.n	800e086 <__ieee754_sqrt+0x5e>
 800e090:	e7f7      	b.n	800e082 <__ieee754_sqrt+0x5a>
 800e092:	462a      	mov	r2, r5
 800e094:	e7fa      	b.n	800e08c <__ieee754_sqrt+0x64>
 800e096:	005b      	lsls	r3, r3, #1
 800e098:	3001      	adds	r0, #1
 800e09a:	02dc      	lsls	r4, r3, #11
 800e09c:	d5fb      	bpl.n	800e096 <__ieee754_sqrt+0x6e>
 800e09e:	1e44      	subs	r4, r0, #1
 800e0a0:	1b12      	subs	r2, r2, r4
 800e0a2:	f1c0 0420 	rsb	r4, r0, #32
 800e0a6:	fa21 f404 	lsr.w	r4, r1, r4
 800e0aa:	4323      	orrs	r3, r4
 800e0ac:	4081      	lsls	r1, r0
 800e0ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e0b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ba:	07d2      	lsls	r2, r2, #31
 800e0bc:	bf5c      	itt	pl
 800e0be:	005b      	lslpl	r3, r3, #1
 800e0c0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e0c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0c8:	bf58      	it	pl
 800e0ca:	0049      	lslpl	r1, r1, #1
 800e0cc:	2600      	movs	r6, #0
 800e0ce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e0d2:	106d      	asrs	r5, r5, #1
 800e0d4:	0049      	lsls	r1, r1, #1
 800e0d6:	2016      	movs	r0, #22
 800e0d8:	4632      	mov	r2, r6
 800e0da:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e0de:	1917      	adds	r7, r2, r4
 800e0e0:	429f      	cmp	r7, r3
 800e0e2:	bfde      	ittt	le
 800e0e4:	193a      	addle	r2, r7, r4
 800e0e6:	1bdb      	suble	r3, r3, r7
 800e0e8:	1936      	addle	r6, r6, r4
 800e0ea:	0fcf      	lsrs	r7, r1, #31
 800e0ec:	3801      	subs	r0, #1
 800e0ee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e0f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e0fa:	d1f0      	bne.n	800e0de <__ieee754_sqrt+0xb6>
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	2720      	movs	r7, #32
 800e100:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e104:	429a      	cmp	r2, r3
 800e106:	eb00 0e0c 	add.w	lr, r0, ip
 800e10a:	db02      	blt.n	800e112 <__ieee754_sqrt+0xea>
 800e10c:	d113      	bne.n	800e136 <__ieee754_sqrt+0x10e>
 800e10e:	458e      	cmp	lr, r1
 800e110:	d811      	bhi.n	800e136 <__ieee754_sqrt+0x10e>
 800e112:	f1be 0f00 	cmp.w	lr, #0
 800e116:	eb0e 000c 	add.w	r0, lr, ip
 800e11a:	da42      	bge.n	800e1a2 <__ieee754_sqrt+0x17a>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	db40      	blt.n	800e1a2 <__ieee754_sqrt+0x17a>
 800e120:	f102 0801 	add.w	r8, r2, #1
 800e124:	1a9b      	subs	r3, r3, r2
 800e126:	458e      	cmp	lr, r1
 800e128:	bf88      	it	hi
 800e12a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e12e:	eba1 010e 	sub.w	r1, r1, lr
 800e132:	4464      	add	r4, ip
 800e134:	4642      	mov	r2, r8
 800e136:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e13a:	3f01      	subs	r7, #1
 800e13c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e140:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e144:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e148:	d1dc      	bne.n	800e104 <__ieee754_sqrt+0xdc>
 800e14a:	4319      	orrs	r1, r3
 800e14c:	d01b      	beq.n	800e186 <__ieee754_sqrt+0x15e>
 800e14e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e1d4 <__ieee754_sqrt+0x1ac>
 800e152:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e1d8 <__ieee754_sqrt+0x1b0>
 800e156:	e9da 0100 	ldrd	r0, r1, [sl]
 800e15a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e15e:	f7f2 f89b 	bl	8000298 <__aeabi_dsub>
 800e162:	e9da 8900 	ldrd	r8, r9, [sl]
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	4640      	mov	r0, r8
 800e16c:	4649      	mov	r1, r9
 800e16e:	f7f2 fcc7 	bl	8000b00 <__aeabi_dcmple>
 800e172:	b140      	cbz	r0, 800e186 <__ieee754_sqrt+0x15e>
 800e174:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e178:	e9da 0100 	ldrd	r0, r1, [sl]
 800e17c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e180:	d111      	bne.n	800e1a6 <__ieee754_sqrt+0x17e>
 800e182:	3601      	adds	r6, #1
 800e184:	463c      	mov	r4, r7
 800e186:	1072      	asrs	r2, r6, #1
 800e188:	0863      	lsrs	r3, r4, #1
 800e18a:	07f1      	lsls	r1, r6, #31
 800e18c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e190:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e194:	bf48      	it	mi
 800e196:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e19a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e19e:	4618      	mov	r0, r3
 800e1a0:	e756      	b.n	800e050 <__ieee754_sqrt+0x28>
 800e1a2:	4690      	mov	r8, r2
 800e1a4:	e7be      	b.n	800e124 <__ieee754_sqrt+0xfc>
 800e1a6:	f7f2 f879 	bl	800029c <__adddf3>
 800e1aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	4649      	mov	r1, r9
 800e1b6:	f7f2 fc99 	bl	8000aec <__aeabi_dcmplt>
 800e1ba:	b120      	cbz	r0, 800e1c6 <__ieee754_sqrt+0x19e>
 800e1bc:	1ca0      	adds	r0, r4, #2
 800e1be:	bf08      	it	eq
 800e1c0:	3601      	addeq	r6, #1
 800e1c2:	3402      	adds	r4, #2
 800e1c4:	e7df      	b.n	800e186 <__ieee754_sqrt+0x15e>
 800e1c6:	1c63      	adds	r3, r4, #1
 800e1c8:	f023 0401 	bic.w	r4, r3, #1
 800e1cc:	e7db      	b.n	800e186 <__ieee754_sqrt+0x15e>
 800e1ce:	bf00      	nop
 800e1d0:	7ff00000 	.word	0x7ff00000
 800e1d4:	20000120 	.word	0x20000120
 800e1d8:	20000118 	.word	0x20000118
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <__ieee754_atan2>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	ec57 6b11 	vmov	r6, r7, d1
 800e1e8:	4273      	negs	r3, r6
 800e1ea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e368 <__ieee754_atan2+0x188>
 800e1ee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e1f2:	4333      	orrs	r3, r6
 800e1f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	ec51 0b10 	vmov	r0, r1, d0
 800e1fe:	4635      	mov	r5, r6
 800e200:	d809      	bhi.n	800e216 <__ieee754_atan2+0x36>
 800e202:	4244      	negs	r4, r0
 800e204:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e208:	4304      	orrs	r4, r0
 800e20a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e20e:	4544      	cmp	r4, r8
 800e210:	468e      	mov	lr, r1
 800e212:	4681      	mov	r9, r0
 800e214:	d907      	bls.n	800e226 <__ieee754_atan2+0x46>
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	f7f2 f83f 	bl	800029c <__adddf3>
 800e21e:	ec41 0b10 	vmov	d0, r0, r1
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e22a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e22e:	4334      	orrs	r4, r6
 800e230:	d103      	bne.n	800e23a <__ieee754_atan2+0x5a>
 800e232:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e236:	f000 b89b 	b.w	800e370 <atan>
 800e23a:	17bc      	asrs	r4, r7, #30
 800e23c:	f004 0402 	and.w	r4, r4, #2
 800e240:	ea53 0909 	orrs.w	r9, r3, r9
 800e244:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e248:	d107      	bne.n	800e25a <__ieee754_atan2+0x7a>
 800e24a:	2c02      	cmp	r4, #2
 800e24c:	d05f      	beq.n	800e30e <__ieee754_atan2+0x12e>
 800e24e:	2c03      	cmp	r4, #3
 800e250:	d1e5      	bne.n	800e21e <__ieee754_atan2+0x3e>
 800e252:	a141      	add	r1, pc, #260	@ (adr r1, 800e358 <__ieee754_atan2+0x178>)
 800e254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e258:	e7e1      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e25a:	4315      	orrs	r5, r2
 800e25c:	d106      	bne.n	800e26c <__ieee754_atan2+0x8c>
 800e25e:	f1be 0f00 	cmp.w	lr, #0
 800e262:	da5f      	bge.n	800e324 <__ieee754_atan2+0x144>
 800e264:	a13e      	add	r1, pc, #248	@ (adr r1, 800e360 <__ieee754_atan2+0x180>)
 800e266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26a:	e7d8      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e26c:	4542      	cmp	r2, r8
 800e26e:	d10f      	bne.n	800e290 <__ieee754_atan2+0xb0>
 800e270:	4293      	cmp	r3, r2
 800e272:	f104 34ff 	add.w	r4, r4, #4294967295
 800e276:	d107      	bne.n	800e288 <__ieee754_atan2+0xa8>
 800e278:	2c02      	cmp	r4, #2
 800e27a:	d84c      	bhi.n	800e316 <__ieee754_atan2+0x136>
 800e27c:	4b34      	ldr	r3, [pc, #208]	@ (800e350 <__ieee754_atan2+0x170>)
 800e27e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e282:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e286:	e7ca      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e288:	2c02      	cmp	r4, #2
 800e28a:	d848      	bhi.n	800e31e <__ieee754_atan2+0x13e>
 800e28c:	4b31      	ldr	r3, [pc, #196]	@ (800e354 <__ieee754_atan2+0x174>)
 800e28e:	e7f6      	b.n	800e27e <__ieee754_atan2+0x9e>
 800e290:	4543      	cmp	r3, r8
 800e292:	d0e4      	beq.n	800e25e <__ieee754_atan2+0x7e>
 800e294:	1a9b      	subs	r3, r3, r2
 800e296:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e29a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e29e:	da1e      	bge.n	800e2de <__ieee754_atan2+0xfe>
 800e2a0:	2f00      	cmp	r7, #0
 800e2a2:	da01      	bge.n	800e2a8 <__ieee754_atan2+0xc8>
 800e2a4:	323c      	adds	r2, #60	@ 0x3c
 800e2a6:	db1e      	blt.n	800e2e6 <__ieee754_atan2+0x106>
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	f7f2 fad6 	bl	800085c <__aeabi_ddiv>
 800e2b0:	ec41 0b10 	vmov	d0, r0, r1
 800e2b4:	f000 f9f4 	bl	800e6a0 <fabs>
 800e2b8:	f000 f85a 	bl	800e370 <atan>
 800e2bc:	ec51 0b10 	vmov	r0, r1, d0
 800e2c0:	2c01      	cmp	r4, #1
 800e2c2:	d013      	beq.n	800e2ec <__ieee754_atan2+0x10c>
 800e2c4:	2c02      	cmp	r4, #2
 800e2c6:	d015      	beq.n	800e2f4 <__ieee754_atan2+0x114>
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	d0a8      	beq.n	800e21e <__ieee754_atan2+0x3e>
 800e2cc:	a318      	add	r3, pc, #96	@ (adr r3, 800e330 <__ieee754_atan2+0x150>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	f7f1 ffe1 	bl	8000298 <__aeabi_dsub>
 800e2d6:	a318      	add	r3, pc, #96	@ (adr r3, 800e338 <__ieee754_atan2+0x158>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	e014      	b.n	800e308 <__ieee754_atan2+0x128>
 800e2de:	a118      	add	r1, pc, #96	@ (adr r1, 800e340 <__ieee754_atan2+0x160>)
 800e2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2e4:	e7ec      	b.n	800e2c0 <__ieee754_atan2+0xe0>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	e7e9      	b.n	800e2c0 <__ieee754_atan2+0xe0>
 800e2ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	e794      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e2f4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e330 <__ieee754_atan2+0x150>)
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	f7f1 ffcd 	bl	8000298 <__aeabi_dsub>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	a10d      	add	r1, pc, #52	@ (adr r1, 800e338 <__ieee754_atan2+0x158>)
 800e304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e308:	f7f1 ffc6 	bl	8000298 <__aeabi_dsub>
 800e30c:	e787      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e30e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e338 <__ieee754_atan2+0x158>)
 800e310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e314:	e783      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e316:	a10c      	add	r1, pc, #48	@ (adr r1, 800e348 <__ieee754_atan2+0x168>)
 800e318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e31c:	e77f      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e31e:	2000      	movs	r0, #0
 800e320:	2100      	movs	r1, #0
 800e322:	e77c      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e324:	a106      	add	r1, pc, #24	@ (adr r1, 800e340 <__ieee754_atan2+0x160>)
 800e326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32a:	e778      	b.n	800e21e <__ieee754_atan2+0x3e>
 800e32c:	f3af 8000 	nop.w
 800e330:	33145c07 	.word	0x33145c07
 800e334:	3ca1a626 	.word	0x3ca1a626
 800e338:	54442d18 	.word	0x54442d18
 800e33c:	400921fb 	.word	0x400921fb
 800e340:	54442d18 	.word	0x54442d18
 800e344:	3ff921fb 	.word	0x3ff921fb
 800e348:	54442d18 	.word	0x54442d18
 800e34c:	3fe921fb 	.word	0x3fe921fb
 800e350:	08011298 	.word	0x08011298
 800e354:	08011280 	.word	0x08011280
 800e358:	54442d18 	.word	0x54442d18
 800e35c:	c00921fb 	.word	0xc00921fb
 800e360:	54442d18 	.word	0x54442d18
 800e364:	bff921fb 	.word	0xbff921fb
 800e368:	7ff00000 	.word	0x7ff00000
 800e36c:	00000000 	.word	0x00000000

0800e370 <atan>:
 800e370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	ec55 4b10 	vmov	r4, r5, d0
 800e378:	4bbf      	ldr	r3, [pc, #764]	@ (800e678 <atan+0x308>)
 800e37a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e37e:	429e      	cmp	r6, r3
 800e380:	46ab      	mov	fp, r5
 800e382:	d918      	bls.n	800e3b6 <atan+0x46>
 800e384:	4bbd      	ldr	r3, [pc, #756]	@ (800e67c <atan+0x30c>)
 800e386:	429e      	cmp	r6, r3
 800e388:	d801      	bhi.n	800e38e <atan+0x1e>
 800e38a:	d109      	bne.n	800e3a0 <atan+0x30>
 800e38c:	b144      	cbz	r4, 800e3a0 <atan+0x30>
 800e38e:	4622      	mov	r2, r4
 800e390:	462b      	mov	r3, r5
 800e392:	4620      	mov	r0, r4
 800e394:	4629      	mov	r1, r5
 800e396:	f7f1 ff81 	bl	800029c <__adddf3>
 800e39a:	4604      	mov	r4, r0
 800e39c:	460d      	mov	r5, r1
 800e39e:	e006      	b.n	800e3ae <atan+0x3e>
 800e3a0:	f1bb 0f00 	cmp.w	fp, #0
 800e3a4:	f340 812b 	ble.w	800e5fe <atan+0x28e>
 800e3a8:	a597      	add	r5, pc, #604	@ (adr r5, 800e608 <atan+0x298>)
 800e3aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3ae:	ec45 4b10 	vmov	d0, r4, r5
 800e3b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	4bb2      	ldr	r3, [pc, #712]	@ (800e680 <atan+0x310>)
 800e3b8:	429e      	cmp	r6, r3
 800e3ba:	d813      	bhi.n	800e3e4 <atan+0x74>
 800e3bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e3c0:	429e      	cmp	r6, r3
 800e3c2:	d80c      	bhi.n	800e3de <atan+0x6e>
 800e3c4:	a392      	add	r3, pc, #584	@ (adr r3, 800e610 <atan+0x2a0>)
 800e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	f7f1 ff65 	bl	800029c <__adddf3>
 800e3d2:	4bac      	ldr	r3, [pc, #688]	@ (800e684 <atan+0x314>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f7f2 fba7 	bl	8000b28 <__aeabi_dcmpgt>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d1e7      	bne.n	800e3ae <atan+0x3e>
 800e3de:	f04f 3aff 	mov.w	sl, #4294967295
 800e3e2:	e029      	b.n	800e438 <atan+0xc8>
 800e3e4:	f000 f95c 	bl	800e6a0 <fabs>
 800e3e8:	4ba7      	ldr	r3, [pc, #668]	@ (800e688 <atan+0x318>)
 800e3ea:	429e      	cmp	r6, r3
 800e3ec:	ec55 4b10 	vmov	r4, r5, d0
 800e3f0:	f200 80bc 	bhi.w	800e56c <atan+0x1fc>
 800e3f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e3f8:	429e      	cmp	r6, r3
 800e3fa:	f200 809e 	bhi.w	800e53a <atan+0x1ca>
 800e3fe:	4622      	mov	r2, r4
 800e400:	462b      	mov	r3, r5
 800e402:	4620      	mov	r0, r4
 800e404:	4629      	mov	r1, r5
 800e406:	f7f1 ff49 	bl	800029c <__adddf3>
 800e40a:	4b9e      	ldr	r3, [pc, #632]	@ (800e684 <atan+0x314>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	f7f1 ff43 	bl	8000298 <__aeabi_dsub>
 800e412:	2200      	movs	r2, #0
 800e414:	4606      	mov	r6, r0
 800e416:	460f      	mov	r7, r1
 800e418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e41c:	4620      	mov	r0, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	f7f1 ff3c 	bl	800029c <__adddf3>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4630      	mov	r0, r6
 800e42a:	4639      	mov	r1, r7
 800e42c:	f7f2 fa16 	bl	800085c <__aeabi_ddiv>
 800e430:	f04f 0a00 	mov.w	sl, #0
 800e434:	4604      	mov	r4, r0
 800e436:	460d      	mov	r5, r1
 800e438:	4622      	mov	r2, r4
 800e43a:	462b      	mov	r3, r5
 800e43c:	4620      	mov	r0, r4
 800e43e:	4629      	mov	r1, r5
 800e440:	f7f2 f8e2 	bl	8000608 <__aeabi_dmul>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4680      	mov	r8, r0
 800e44a:	4689      	mov	r9, r1
 800e44c:	f7f2 f8dc 	bl	8000608 <__aeabi_dmul>
 800e450:	a371      	add	r3, pc, #452	@ (adr r3, 800e618 <atan+0x2a8>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	4606      	mov	r6, r0
 800e458:	460f      	mov	r7, r1
 800e45a:	f7f2 f8d5 	bl	8000608 <__aeabi_dmul>
 800e45e:	a370      	add	r3, pc, #448	@ (adr r3, 800e620 <atan+0x2b0>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	f7f1 ff1a 	bl	800029c <__adddf3>
 800e468:	4632      	mov	r2, r6
 800e46a:	463b      	mov	r3, r7
 800e46c:	f7f2 f8cc 	bl	8000608 <__aeabi_dmul>
 800e470:	a36d      	add	r3, pc, #436	@ (adr r3, 800e628 <atan+0x2b8>)
 800e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e476:	f7f1 ff11 	bl	800029c <__adddf3>
 800e47a:	4632      	mov	r2, r6
 800e47c:	463b      	mov	r3, r7
 800e47e:	f7f2 f8c3 	bl	8000608 <__aeabi_dmul>
 800e482:	a36b      	add	r3, pc, #428	@ (adr r3, 800e630 <atan+0x2c0>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	f7f1 ff08 	bl	800029c <__adddf3>
 800e48c:	4632      	mov	r2, r6
 800e48e:	463b      	mov	r3, r7
 800e490:	f7f2 f8ba 	bl	8000608 <__aeabi_dmul>
 800e494:	a368      	add	r3, pc, #416	@ (adr r3, 800e638 <atan+0x2c8>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f7f1 feff 	bl	800029c <__adddf3>
 800e49e:	4632      	mov	r2, r6
 800e4a0:	463b      	mov	r3, r7
 800e4a2:	f7f2 f8b1 	bl	8000608 <__aeabi_dmul>
 800e4a6:	a366      	add	r3, pc, #408	@ (adr r3, 800e640 <atan+0x2d0>)
 800e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ac:	f7f1 fef6 	bl	800029c <__adddf3>
 800e4b0:	4642      	mov	r2, r8
 800e4b2:	464b      	mov	r3, r9
 800e4b4:	f7f2 f8a8 	bl	8000608 <__aeabi_dmul>
 800e4b8:	a363      	add	r3, pc, #396	@ (adr r3, 800e648 <atan+0x2d8>)
 800e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4be:	4680      	mov	r8, r0
 800e4c0:	4689      	mov	r9, r1
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	f7f2 f89f 	bl	8000608 <__aeabi_dmul>
 800e4ca:	a361      	add	r3, pc, #388	@ (adr r3, 800e650 <atan+0x2e0>)
 800e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d0:	f7f1 fee2 	bl	8000298 <__aeabi_dsub>
 800e4d4:	4632      	mov	r2, r6
 800e4d6:	463b      	mov	r3, r7
 800e4d8:	f7f2 f896 	bl	8000608 <__aeabi_dmul>
 800e4dc:	a35e      	add	r3, pc, #376	@ (adr r3, 800e658 <atan+0x2e8>)
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	f7f1 fed9 	bl	8000298 <__aeabi_dsub>
 800e4e6:	4632      	mov	r2, r6
 800e4e8:	463b      	mov	r3, r7
 800e4ea:	f7f2 f88d 	bl	8000608 <__aeabi_dmul>
 800e4ee:	a35c      	add	r3, pc, #368	@ (adr r3, 800e660 <atan+0x2f0>)
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f7f1 fed0 	bl	8000298 <__aeabi_dsub>
 800e4f8:	4632      	mov	r2, r6
 800e4fa:	463b      	mov	r3, r7
 800e4fc:	f7f2 f884 	bl	8000608 <__aeabi_dmul>
 800e500:	a359      	add	r3, pc, #356	@ (adr r3, 800e668 <atan+0x2f8>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 fec7 	bl	8000298 <__aeabi_dsub>
 800e50a:	4632      	mov	r2, r6
 800e50c:	463b      	mov	r3, r7
 800e50e:	f7f2 f87b 	bl	8000608 <__aeabi_dmul>
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	4640      	mov	r0, r8
 800e518:	4649      	mov	r1, r9
 800e51a:	f7f1 febf 	bl	800029c <__adddf3>
 800e51e:	4622      	mov	r2, r4
 800e520:	462b      	mov	r3, r5
 800e522:	f7f2 f871 	bl	8000608 <__aeabi_dmul>
 800e526:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	d148      	bne.n	800e5c2 <atan+0x252>
 800e530:	4620      	mov	r0, r4
 800e532:	4629      	mov	r1, r5
 800e534:	f7f1 feb0 	bl	8000298 <__aeabi_dsub>
 800e538:	e72f      	b.n	800e39a <atan+0x2a>
 800e53a:	4b52      	ldr	r3, [pc, #328]	@ (800e684 <atan+0x314>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f1 fea9 	bl	8000298 <__aeabi_dsub>
 800e546:	4b4f      	ldr	r3, [pc, #316]	@ (800e684 <atan+0x314>)
 800e548:	4606      	mov	r6, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	2200      	movs	r2, #0
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	f7f1 fea3 	bl	800029c <__adddf3>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4630      	mov	r0, r6
 800e55c:	4639      	mov	r1, r7
 800e55e:	f7f2 f97d 	bl	800085c <__aeabi_ddiv>
 800e562:	f04f 0a01 	mov.w	sl, #1
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	e765      	b.n	800e438 <atan+0xc8>
 800e56c:	4b47      	ldr	r3, [pc, #284]	@ (800e68c <atan+0x31c>)
 800e56e:	429e      	cmp	r6, r3
 800e570:	d21c      	bcs.n	800e5ac <atan+0x23c>
 800e572:	4b47      	ldr	r3, [pc, #284]	@ (800e690 <atan+0x320>)
 800e574:	2200      	movs	r2, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f1 fe8d 	bl	8000298 <__aeabi_dsub>
 800e57e:	4b44      	ldr	r3, [pc, #272]	@ (800e690 <atan+0x320>)
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	2200      	movs	r2, #0
 800e586:	4620      	mov	r0, r4
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f2 f83d 	bl	8000608 <__aeabi_dmul>
 800e58e:	4b3d      	ldr	r3, [pc, #244]	@ (800e684 <atan+0x314>)
 800e590:	2200      	movs	r2, #0
 800e592:	f7f1 fe83 	bl	800029c <__adddf3>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4630      	mov	r0, r6
 800e59c:	4639      	mov	r1, r7
 800e59e:	f7f2 f95d 	bl	800085c <__aeabi_ddiv>
 800e5a2:	f04f 0a02 	mov.w	sl, #2
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	460d      	mov	r5, r1
 800e5aa:	e745      	b.n	800e438 <atan+0xc8>
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	462b      	mov	r3, r5
 800e5b0:	4938      	ldr	r1, [pc, #224]	@ (800e694 <atan+0x324>)
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7f2 f952 	bl	800085c <__aeabi_ddiv>
 800e5b8:	f04f 0a03 	mov.w	sl, #3
 800e5bc:	4604      	mov	r4, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	e73a      	b.n	800e438 <atan+0xc8>
 800e5c2:	4b35      	ldr	r3, [pc, #212]	@ (800e698 <atan+0x328>)
 800e5c4:	4e35      	ldr	r6, [pc, #212]	@ (800e69c <atan+0x32c>)
 800e5c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f1 fe63 	bl	8000298 <__aeabi_dsub>
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	462b      	mov	r3, r5
 800e5d6:	f7f1 fe5f 	bl	8000298 <__aeabi_dsub>
 800e5da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e5e6:	f7f1 fe57 	bl	8000298 <__aeabi_dsub>
 800e5ea:	f1bb 0f00 	cmp.w	fp, #0
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	f6bf aedc 	bge.w	800e3ae <atan+0x3e>
 800e5f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5fa:	461d      	mov	r5, r3
 800e5fc:	e6d7      	b.n	800e3ae <atan+0x3e>
 800e5fe:	a51c      	add	r5, pc, #112	@ (adr r5, 800e670 <atan+0x300>)
 800e600:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e604:	e6d3      	b.n	800e3ae <atan+0x3e>
 800e606:	bf00      	nop
 800e608:	54442d18 	.word	0x54442d18
 800e60c:	3ff921fb 	.word	0x3ff921fb
 800e610:	8800759c 	.word	0x8800759c
 800e614:	7e37e43c 	.word	0x7e37e43c
 800e618:	e322da11 	.word	0xe322da11
 800e61c:	3f90ad3a 	.word	0x3f90ad3a
 800e620:	24760deb 	.word	0x24760deb
 800e624:	3fa97b4b 	.word	0x3fa97b4b
 800e628:	a0d03d51 	.word	0xa0d03d51
 800e62c:	3fb10d66 	.word	0x3fb10d66
 800e630:	c54c206e 	.word	0xc54c206e
 800e634:	3fb745cd 	.word	0x3fb745cd
 800e638:	920083ff 	.word	0x920083ff
 800e63c:	3fc24924 	.word	0x3fc24924
 800e640:	5555550d 	.word	0x5555550d
 800e644:	3fd55555 	.word	0x3fd55555
 800e648:	2c6a6c2f 	.word	0x2c6a6c2f
 800e64c:	bfa2b444 	.word	0xbfa2b444
 800e650:	52defd9a 	.word	0x52defd9a
 800e654:	3fadde2d 	.word	0x3fadde2d
 800e658:	af749a6d 	.word	0xaf749a6d
 800e65c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e660:	fe231671 	.word	0xfe231671
 800e664:	3fbc71c6 	.word	0x3fbc71c6
 800e668:	9998ebc4 	.word	0x9998ebc4
 800e66c:	3fc99999 	.word	0x3fc99999
 800e670:	54442d18 	.word	0x54442d18
 800e674:	bff921fb 	.word	0xbff921fb
 800e678:	440fffff 	.word	0x440fffff
 800e67c:	7ff00000 	.word	0x7ff00000
 800e680:	3fdbffff 	.word	0x3fdbffff
 800e684:	3ff00000 	.word	0x3ff00000
 800e688:	3ff2ffff 	.word	0x3ff2ffff
 800e68c:	40038000 	.word	0x40038000
 800e690:	3ff80000 	.word	0x3ff80000
 800e694:	bff00000 	.word	0xbff00000
 800e698:	080112b0 	.word	0x080112b0
 800e69c:	080112d0 	.word	0x080112d0

0800e6a0 <fabs>:
 800e6a0:	ec51 0b10 	vmov	r0, r1, d0
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e6aa:	ec43 2b10 	vmov	d0, r2, r3
 800e6ae:	4770      	bx	lr

0800e6b0 <__cvt>:
 800e6b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b4:	ec57 6b10 	vmov	r6, r7, d0
 800e6b8:	2f00      	cmp	r7, #0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	4619      	mov	r1, r3
 800e6be:	463b      	mov	r3, r7
 800e6c0:	bfbb      	ittet	lt
 800e6c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e6c6:	461f      	movlt	r7, r3
 800e6c8:	2300      	movge	r3, #0
 800e6ca:	232d      	movlt	r3, #45	@ 0x2d
 800e6cc:	700b      	strb	r3, [r1, #0]
 800e6ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e6d4:	4691      	mov	r9, r2
 800e6d6:	f023 0820 	bic.w	r8, r3, #32
 800e6da:	bfbc      	itt	lt
 800e6dc:	4632      	movlt	r2, r6
 800e6de:	4616      	movlt	r6, r2
 800e6e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6e4:	d005      	beq.n	800e6f2 <__cvt+0x42>
 800e6e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e6ea:	d100      	bne.n	800e6ee <__cvt+0x3e>
 800e6ec:	3401      	adds	r4, #1
 800e6ee:	2102      	movs	r1, #2
 800e6f0:	e000      	b.n	800e6f4 <__cvt+0x44>
 800e6f2:	2103      	movs	r1, #3
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	ab02      	add	r3, sp, #8
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	ec47 6b10 	vmov	d0, r6, r7
 800e700:	4653      	mov	r3, sl
 800e702:	4622      	mov	r2, r4
 800e704:	f000 ff40 	bl	800f588 <_dtoa_r>
 800e708:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e70c:	4605      	mov	r5, r0
 800e70e:	d119      	bne.n	800e744 <__cvt+0x94>
 800e710:	f019 0f01 	tst.w	r9, #1
 800e714:	d00e      	beq.n	800e734 <__cvt+0x84>
 800e716:	eb00 0904 	add.w	r9, r0, r4
 800e71a:	2200      	movs	r2, #0
 800e71c:	2300      	movs	r3, #0
 800e71e:	4630      	mov	r0, r6
 800e720:	4639      	mov	r1, r7
 800e722:	f7f2 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e726:	b108      	cbz	r0, 800e72c <__cvt+0x7c>
 800e728:	f8cd 900c 	str.w	r9, [sp, #12]
 800e72c:	2230      	movs	r2, #48	@ 0x30
 800e72e:	9b03      	ldr	r3, [sp, #12]
 800e730:	454b      	cmp	r3, r9
 800e732:	d31e      	bcc.n	800e772 <__cvt+0xc2>
 800e734:	9b03      	ldr	r3, [sp, #12]
 800e736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e738:	1b5b      	subs	r3, r3, r5
 800e73a:	4628      	mov	r0, r5
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	b004      	add	sp, #16
 800e740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e748:	eb00 0904 	add.w	r9, r0, r4
 800e74c:	d1e5      	bne.n	800e71a <__cvt+0x6a>
 800e74e:	7803      	ldrb	r3, [r0, #0]
 800e750:	2b30      	cmp	r3, #48	@ 0x30
 800e752:	d10a      	bne.n	800e76a <__cvt+0xba>
 800e754:	2200      	movs	r2, #0
 800e756:	2300      	movs	r3, #0
 800e758:	4630      	mov	r0, r6
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 800e760:	b918      	cbnz	r0, 800e76a <__cvt+0xba>
 800e762:	f1c4 0401 	rsb	r4, r4, #1
 800e766:	f8ca 4000 	str.w	r4, [sl]
 800e76a:	f8da 3000 	ldr.w	r3, [sl]
 800e76e:	4499      	add	r9, r3
 800e770:	e7d3      	b.n	800e71a <__cvt+0x6a>
 800e772:	1c59      	adds	r1, r3, #1
 800e774:	9103      	str	r1, [sp, #12]
 800e776:	701a      	strb	r2, [r3, #0]
 800e778:	e7d9      	b.n	800e72e <__cvt+0x7e>

0800e77a <__exponent>:
 800e77a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e77c:	2900      	cmp	r1, #0
 800e77e:	bfba      	itte	lt
 800e780:	4249      	neglt	r1, r1
 800e782:	232d      	movlt	r3, #45	@ 0x2d
 800e784:	232b      	movge	r3, #43	@ 0x2b
 800e786:	2909      	cmp	r1, #9
 800e788:	7002      	strb	r2, [r0, #0]
 800e78a:	7043      	strb	r3, [r0, #1]
 800e78c:	dd29      	ble.n	800e7e2 <__exponent+0x68>
 800e78e:	f10d 0307 	add.w	r3, sp, #7
 800e792:	461d      	mov	r5, r3
 800e794:	270a      	movs	r7, #10
 800e796:	461a      	mov	r2, r3
 800e798:	fbb1 f6f7 	udiv	r6, r1, r7
 800e79c:	fb07 1416 	mls	r4, r7, r6, r1
 800e7a0:	3430      	adds	r4, #48	@ 0x30
 800e7a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	2c63      	cmp	r4, #99	@ 0x63
 800e7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7ae:	4631      	mov	r1, r6
 800e7b0:	dcf1      	bgt.n	800e796 <__exponent+0x1c>
 800e7b2:	3130      	adds	r1, #48	@ 0x30
 800e7b4:	1e94      	subs	r4, r2, #2
 800e7b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7ba:	1c41      	adds	r1, r0, #1
 800e7bc:	4623      	mov	r3, r4
 800e7be:	42ab      	cmp	r3, r5
 800e7c0:	d30a      	bcc.n	800e7d8 <__exponent+0x5e>
 800e7c2:	f10d 0309 	add.w	r3, sp, #9
 800e7c6:	1a9b      	subs	r3, r3, r2
 800e7c8:	42ac      	cmp	r4, r5
 800e7ca:	bf88      	it	hi
 800e7cc:	2300      	movhi	r3, #0
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	4403      	add	r3, r0
 800e7d2:	1a18      	subs	r0, r3, r0
 800e7d4:	b003      	add	sp, #12
 800e7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7e0:	e7ed      	b.n	800e7be <__exponent+0x44>
 800e7e2:	2330      	movs	r3, #48	@ 0x30
 800e7e4:	3130      	adds	r1, #48	@ 0x30
 800e7e6:	7083      	strb	r3, [r0, #2]
 800e7e8:	70c1      	strb	r1, [r0, #3]
 800e7ea:	1d03      	adds	r3, r0, #4
 800e7ec:	e7f1      	b.n	800e7d2 <__exponent+0x58>
	...

0800e7f0 <_printf_float>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	b08d      	sub	sp, #52	@ 0x34
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	461f      	mov	r7, r3
 800e800:	4605      	mov	r5, r0
 800e802:	f000 fdbf 	bl	800f384 <_localeconv_r>
 800e806:	6803      	ldr	r3, [r0, #0]
 800e808:	9304      	str	r3, [sp, #16]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7f1 fd38 	bl	8000280 <strlen>
 800e810:	2300      	movs	r3, #0
 800e812:	930a      	str	r3, [sp, #40]	@ 0x28
 800e814:	f8d8 3000 	ldr.w	r3, [r8]
 800e818:	9005      	str	r0, [sp, #20]
 800e81a:	3307      	adds	r3, #7
 800e81c:	f023 0307 	bic.w	r3, r3, #7
 800e820:	f103 0208 	add.w	r2, r3, #8
 800e824:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e828:	f8d4 b000 	ldr.w	fp, [r4]
 800e82c:	f8c8 2000 	str.w	r2, [r8]
 800e830:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e834:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e838:	9307      	str	r3, [sp, #28]
 800e83a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e83e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e846:	4b9c      	ldr	r3, [pc, #624]	@ (800eab8 <_printf_float+0x2c8>)
 800e848:	f04f 32ff 	mov.w	r2, #4294967295
 800e84c:	f7f2 f976 	bl	8000b3c <__aeabi_dcmpun>
 800e850:	bb70      	cbnz	r0, 800e8b0 <_printf_float+0xc0>
 800e852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e856:	4b98      	ldr	r3, [pc, #608]	@ (800eab8 <_printf_float+0x2c8>)
 800e858:	f04f 32ff 	mov.w	r2, #4294967295
 800e85c:	f7f2 f950 	bl	8000b00 <__aeabi_dcmple>
 800e860:	bb30      	cbnz	r0, 800e8b0 <_printf_float+0xc0>
 800e862:	2200      	movs	r2, #0
 800e864:	2300      	movs	r3, #0
 800e866:	4640      	mov	r0, r8
 800e868:	4649      	mov	r1, r9
 800e86a:	f7f2 f93f 	bl	8000aec <__aeabi_dcmplt>
 800e86e:	b110      	cbz	r0, 800e876 <_printf_float+0x86>
 800e870:	232d      	movs	r3, #45	@ 0x2d
 800e872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e876:	4a91      	ldr	r2, [pc, #580]	@ (800eabc <_printf_float+0x2cc>)
 800e878:	4b91      	ldr	r3, [pc, #580]	@ (800eac0 <_printf_float+0x2d0>)
 800e87a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e87e:	bf94      	ite	ls
 800e880:	4690      	movls	r8, r2
 800e882:	4698      	movhi	r8, r3
 800e884:	2303      	movs	r3, #3
 800e886:	6123      	str	r3, [r4, #16]
 800e888:	f02b 0304 	bic.w	r3, fp, #4
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	f04f 0900 	mov.w	r9, #0
 800e892:	9700      	str	r7, [sp, #0]
 800e894:	4633      	mov	r3, r6
 800e896:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e898:	4621      	mov	r1, r4
 800e89a:	4628      	mov	r0, r5
 800e89c:	f000 f9d2 	bl	800ec44 <_printf_common>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	f040 808d 	bne.w	800e9c0 <_printf_float+0x1d0>
 800e8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8aa:	b00d      	add	sp, #52	@ 0x34
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b0:	4642      	mov	r2, r8
 800e8b2:	464b      	mov	r3, r9
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	f7f2 f940 	bl	8000b3c <__aeabi_dcmpun>
 800e8bc:	b140      	cbz	r0, 800e8d0 <_printf_float+0xe0>
 800e8be:	464b      	mov	r3, r9
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	bfbc      	itt	lt
 800e8c4:	232d      	movlt	r3, #45	@ 0x2d
 800e8c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e8ca:	4a7e      	ldr	r2, [pc, #504]	@ (800eac4 <_printf_float+0x2d4>)
 800e8cc:	4b7e      	ldr	r3, [pc, #504]	@ (800eac8 <_printf_float+0x2d8>)
 800e8ce:	e7d4      	b.n	800e87a <_printf_float+0x8a>
 800e8d0:	6863      	ldr	r3, [r4, #4]
 800e8d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e8d6:	9206      	str	r2, [sp, #24]
 800e8d8:	1c5a      	adds	r2, r3, #1
 800e8da:	d13b      	bne.n	800e954 <_printf_float+0x164>
 800e8dc:	2306      	movs	r3, #6
 800e8de:	6063      	str	r3, [r4, #4]
 800e8e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	6022      	str	r2, [r4, #0]
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e8f0:	ab09      	add	r3, sp, #36	@ 0x24
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	6861      	ldr	r1, [r4, #4]
 800e8f6:	ec49 8b10 	vmov	d0, r8, r9
 800e8fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e8fe:	4628      	mov	r0, r5
 800e900:	f7ff fed6 	bl	800e6b0 <__cvt>
 800e904:	9b06      	ldr	r3, [sp, #24]
 800e906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e908:	2b47      	cmp	r3, #71	@ 0x47
 800e90a:	4680      	mov	r8, r0
 800e90c:	d129      	bne.n	800e962 <_printf_float+0x172>
 800e90e:	1cc8      	adds	r0, r1, #3
 800e910:	db02      	blt.n	800e918 <_printf_float+0x128>
 800e912:	6863      	ldr	r3, [r4, #4]
 800e914:	4299      	cmp	r1, r3
 800e916:	dd41      	ble.n	800e99c <_printf_float+0x1ac>
 800e918:	f1aa 0a02 	sub.w	sl, sl, #2
 800e91c:	fa5f fa8a 	uxtb.w	sl, sl
 800e920:	3901      	subs	r1, #1
 800e922:	4652      	mov	r2, sl
 800e924:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e928:	9109      	str	r1, [sp, #36]	@ 0x24
 800e92a:	f7ff ff26 	bl	800e77a <__exponent>
 800e92e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e930:	1813      	adds	r3, r2, r0
 800e932:	2a01      	cmp	r2, #1
 800e934:	4681      	mov	r9, r0
 800e936:	6123      	str	r3, [r4, #16]
 800e938:	dc02      	bgt.n	800e940 <_printf_float+0x150>
 800e93a:	6822      	ldr	r2, [r4, #0]
 800e93c:	07d2      	lsls	r2, r2, #31
 800e93e:	d501      	bpl.n	800e944 <_printf_float+0x154>
 800e940:	3301      	adds	r3, #1
 800e942:	6123      	str	r3, [r4, #16]
 800e944:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d0a2      	beq.n	800e892 <_printf_float+0xa2>
 800e94c:	232d      	movs	r3, #45	@ 0x2d
 800e94e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e952:	e79e      	b.n	800e892 <_printf_float+0xa2>
 800e954:	9a06      	ldr	r2, [sp, #24]
 800e956:	2a47      	cmp	r2, #71	@ 0x47
 800e958:	d1c2      	bne.n	800e8e0 <_printf_float+0xf0>
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1c0      	bne.n	800e8e0 <_printf_float+0xf0>
 800e95e:	2301      	movs	r3, #1
 800e960:	e7bd      	b.n	800e8de <_printf_float+0xee>
 800e962:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e966:	d9db      	bls.n	800e920 <_printf_float+0x130>
 800e968:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e96c:	d118      	bne.n	800e9a0 <_printf_float+0x1b0>
 800e96e:	2900      	cmp	r1, #0
 800e970:	6863      	ldr	r3, [r4, #4]
 800e972:	dd0b      	ble.n	800e98c <_printf_float+0x19c>
 800e974:	6121      	str	r1, [r4, #16]
 800e976:	b913      	cbnz	r3, 800e97e <_printf_float+0x18e>
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	07d0      	lsls	r0, r2, #31
 800e97c:	d502      	bpl.n	800e984 <_printf_float+0x194>
 800e97e:	3301      	adds	r3, #1
 800e980:	440b      	add	r3, r1
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e986:	f04f 0900 	mov.w	r9, #0
 800e98a:	e7db      	b.n	800e944 <_printf_float+0x154>
 800e98c:	b913      	cbnz	r3, 800e994 <_printf_float+0x1a4>
 800e98e:	6822      	ldr	r2, [r4, #0]
 800e990:	07d2      	lsls	r2, r2, #31
 800e992:	d501      	bpl.n	800e998 <_printf_float+0x1a8>
 800e994:	3302      	adds	r3, #2
 800e996:	e7f4      	b.n	800e982 <_printf_float+0x192>
 800e998:	2301      	movs	r3, #1
 800e99a:	e7f2      	b.n	800e982 <_printf_float+0x192>
 800e99c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9a2:	4299      	cmp	r1, r3
 800e9a4:	db05      	blt.n	800e9b2 <_printf_float+0x1c2>
 800e9a6:	6823      	ldr	r3, [r4, #0]
 800e9a8:	6121      	str	r1, [r4, #16]
 800e9aa:	07d8      	lsls	r0, r3, #31
 800e9ac:	d5ea      	bpl.n	800e984 <_printf_float+0x194>
 800e9ae:	1c4b      	adds	r3, r1, #1
 800e9b0:	e7e7      	b.n	800e982 <_printf_float+0x192>
 800e9b2:	2900      	cmp	r1, #0
 800e9b4:	bfd4      	ite	le
 800e9b6:	f1c1 0202 	rsble	r2, r1, #2
 800e9ba:	2201      	movgt	r2, #1
 800e9bc:	4413      	add	r3, r2
 800e9be:	e7e0      	b.n	800e982 <_printf_float+0x192>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	055a      	lsls	r2, r3, #21
 800e9c4:	d407      	bmi.n	800e9d6 <_printf_float+0x1e6>
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	47b8      	blx	r7
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d12b      	bne.n	800ea2c <_printf_float+0x23c>
 800e9d4:	e767      	b.n	800e8a6 <_printf_float+0xb6>
 800e9d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9da:	f240 80dd 	bls.w	800eb98 <_printf_float+0x3a8>
 800e9de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f7f2 f877 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d033      	beq.n	800ea56 <_printf_float+0x266>
 800e9ee:	4a37      	ldr	r2, [pc, #220]	@ (800eacc <_printf_float+0x2dc>)
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4631      	mov	r1, r6
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	47b8      	blx	r7
 800e9f8:	3001      	adds	r0, #1
 800e9fa:	f43f af54 	beq.w	800e8a6 <_printf_float+0xb6>
 800e9fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea02:	4543      	cmp	r3, r8
 800ea04:	db02      	blt.n	800ea0c <_printf_float+0x21c>
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	07d8      	lsls	r0, r3, #31
 800ea0a:	d50f      	bpl.n	800ea2c <_printf_float+0x23c>
 800ea0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea10:	4631      	mov	r1, r6
 800ea12:	4628      	mov	r0, r5
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f af45 	beq.w	800e8a6 <_printf_float+0xb6>
 800ea1c:	f04f 0900 	mov.w	r9, #0
 800ea20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea24:	f104 0a1a 	add.w	sl, r4, #26
 800ea28:	45c8      	cmp	r8, r9
 800ea2a:	dc09      	bgt.n	800ea40 <_printf_float+0x250>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	079b      	lsls	r3, r3, #30
 800ea30:	f100 8103 	bmi.w	800ec3a <_printf_float+0x44a>
 800ea34:	68e0      	ldr	r0, [r4, #12]
 800ea36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea38:	4298      	cmp	r0, r3
 800ea3a:	bfb8      	it	lt
 800ea3c:	4618      	movlt	r0, r3
 800ea3e:	e734      	b.n	800e8aa <_printf_float+0xba>
 800ea40:	2301      	movs	r3, #1
 800ea42:	4652      	mov	r2, sl
 800ea44:	4631      	mov	r1, r6
 800ea46:	4628      	mov	r0, r5
 800ea48:	47b8      	blx	r7
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	f43f af2b 	beq.w	800e8a6 <_printf_float+0xb6>
 800ea50:	f109 0901 	add.w	r9, r9, #1
 800ea54:	e7e8      	b.n	800ea28 <_printf_float+0x238>
 800ea56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	dc39      	bgt.n	800ead0 <_printf_float+0x2e0>
 800ea5c:	4a1b      	ldr	r2, [pc, #108]	@ (800eacc <_printf_float+0x2dc>)
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4631      	mov	r1, r6
 800ea62:	4628      	mov	r0, r5
 800ea64:	47b8      	blx	r7
 800ea66:	3001      	adds	r0, #1
 800ea68:	f43f af1d 	beq.w	800e8a6 <_printf_float+0xb6>
 800ea6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea70:	ea59 0303 	orrs.w	r3, r9, r3
 800ea74:	d102      	bne.n	800ea7c <_printf_float+0x28c>
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	07d9      	lsls	r1, r3, #31
 800ea7a:	d5d7      	bpl.n	800ea2c <_printf_float+0x23c>
 800ea7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f af0d 	beq.w	800e8a6 <_printf_float+0xb6>
 800ea8c:	f04f 0a00 	mov.w	sl, #0
 800ea90:	f104 0b1a 	add.w	fp, r4, #26
 800ea94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea96:	425b      	negs	r3, r3
 800ea98:	4553      	cmp	r3, sl
 800ea9a:	dc01      	bgt.n	800eaa0 <_printf_float+0x2b0>
 800ea9c:	464b      	mov	r3, r9
 800ea9e:	e793      	b.n	800e9c8 <_printf_float+0x1d8>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	465a      	mov	r2, fp
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	f43f aefb 	beq.w	800e8a6 <_printf_float+0xb6>
 800eab0:	f10a 0a01 	add.w	sl, sl, #1
 800eab4:	e7ee      	b.n	800ea94 <_printf_float+0x2a4>
 800eab6:	bf00      	nop
 800eab8:	7fefffff 	.word	0x7fefffff
 800eabc:	080112f0 	.word	0x080112f0
 800eac0:	080112f4 	.word	0x080112f4
 800eac4:	080112f8 	.word	0x080112f8
 800eac8:	080112fc 	.word	0x080112fc
 800eacc:	08011300 	.word	0x08011300
 800ead0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ead2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ead6:	4553      	cmp	r3, sl
 800ead8:	bfa8      	it	ge
 800eada:	4653      	movge	r3, sl
 800eadc:	2b00      	cmp	r3, #0
 800eade:	4699      	mov	r9, r3
 800eae0:	dc36      	bgt.n	800eb50 <_printf_float+0x360>
 800eae2:	f04f 0b00 	mov.w	fp, #0
 800eae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaea:	f104 021a 	add.w	r2, r4, #26
 800eaee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eaf0:	9306      	str	r3, [sp, #24]
 800eaf2:	eba3 0309 	sub.w	r3, r3, r9
 800eaf6:	455b      	cmp	r3, fp
 800eaf8:	dc31      	bgt.n	800eb5e <_printf_float+0x36e>
 800eafa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eafc:	459a      	cmp	sl, r3
 800eafe:	dc3a      	bgt.n	800eb76 <_printf_float+0x386>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	07da      	lsls	r2, r3, #31
 800eb04:	d437      	bmi.n	800eb76 <_printf_float+0x386>
 800eb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb08:	ebaa 0903 	sub.w	r9, sl, r3
 800eb0c:	9b06      	ldr	r3, [sp, #24]
 800eb0e:	ebaa 0303 	sub.w	r3, sl, r3
 800eb12:	4599      	cmp	r9, r3
 800eb14:	bfa8      	it	ge
 800eb16:	4699      	movge	r9, r3
 800eb18:	f1b9 0f00 	cmp.w	r9, #0
 800eb1c:	dc33      	bgt.n	800eb86 <_printf_float+0x396>
 800eb1e:	f04f 0800 	mov.w	r8, #0
 800eb22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb26:	f104 0b1a 	add.w	fp, r4, #26
 800eb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2c:	ebaa 0303 	sub.w	r3, sl, r3
 800eb30:	eba3 0309 	sub.w	r3, r3, r9
 800eb34:	4543      	cmp	r3, r8
 800eb36:	f77f af79 	ble.w	800ea2c <_printf_float+0x23c>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	465a      	mov	r2, fp
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f aeae 	beq.w	800e8a6 <_printf_float+0xb6>
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	e7ec      	b.n	800eb2a <_printf_float+0x33a>
 800eb50:	4642      	mov	r2, r8
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	d1c2      	bne.n	800eae2 <_printf_float+0x2f2>
 800eb5c:	e6a3      	b.n	800e8a6 <_printf_float+0xb6>
 800eb5e:	2301      	movs	r3, #1
 800eb60:	4631      	mov	r1, r6
 800eb62:	4628      	mov	r0, r5
 800eb64:	9206      	str	r2, [sp, #24]
 800eb66:	47b8      	blx	r7
 800eb68:	3001      	adds	r0, #1
 800eb6a:	f43f ae9c 	beq.w	800e8a6 <_printf_float+0xb6>
 800eb6e:	9a06      	ldr	r2, [sp, #24]
 800eb70:	f10b 0b01 	add.w	fp, fp, #1
 800eb74:	e7bb      	b.n	800eaee <_printf_float+0x2fe>
 800eb76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b8      	blx	r7
 800eb80:	3001      	adds	r0, #1
 800eb82:	d1c0      	bne.n	800eb06 <_printf_float+0x316>
 800eb84:	e68f      	b.n	800e8a6 <_printf_float+0xb6>
 800eb86:	9a06      	ldr	r2, [sp, #24]
 800eb88:	464b      	mov	r3, r9
 800eb8a:	4442      	add	r2, r8
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b8      	blx	r7
 800eb92:	3001      	adds	r0, #1
 800eb94:	d1c3      	bne.n	800eb1e <_printf_float+0x32e>
 800eb96:	e686      	b.n	800e8a6 <_printf_float+0xb6>
 800eb98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb9c:	f1ba 0f01 	cmp.w	sl, #1
 800eba0:	dc01      	bgt.n	800eba6 <_printf_float+0x3b6>
 800eba2:	07db      	lsls	r3, r3, #31
 800eba4:	d536      	bpl.n	800ec14 <_printf_float+0x424>
 800eba6:	2301      	movs	r3, #1
 800eba8:	4642      	mov	r2, r8
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4628      	mov	r0, r5
 800ebae:	47b8      	blx	r7
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f43f ae78 	beq.w	800e8a6 <_printf_float+0xb6>
 800ebb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebba:	4631      	mov	r1, r6
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	47b8      	blx	r7
 800ebc0:	3001      	adds	r0, #1
 800ebc2:	f43f ae70 	beq.w	800e8a6 <_printf_float+0xb6>
 800ebc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebd2:	f7f1 ff81 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebd6:	b9c0      	cbnz	r0, 800ec0a <_printf_float+0x41a>
 800ebd8:	4653      	mov	r3, sl
 800ebda:	f108 0201 	add.w	r2, r8, #1
 800ebde:	4631      	mov	r1, r6
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b8      	blx	r7
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d10c      	bne.n	800ec02 <_printf_float+0x412>
 800ebe8:	e65d      	b.n	800e8a6 <_printf_float+0xb6>
 800ebea:	2301      	movs	r3, #1
 800ebec:	465a      	mov	r2, fp
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	47b8      	blx	r7
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	f43f ae56 	beq.w	800e8a6 <_printf_float+0xb6>
 800ebfa:	f108 0801 	add.w	r8, r8, #1
 800ebfe:	45d0      	cmp	r8, sl
 800ec00:	dbf3      	blt.n	800ebea <_printf_float+0x3fa>
 800ec02:	464b      	mov	r3, r9
 800ec04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec08:	e6df      	b.n	800e9ca <_printf_float+0x1da>
 800ec0a:	f04f 0800 	mov.w	r8, #0
 800ec0e:	f104 0b1a 	add.w	fp, r4, #26
 800ec12:	e7f4      	b.n	800ebfe <_printf_float+0x40e>
 800ec14:	2301      	movs	r3, #1
 800ec16:	4642      	mov	r2, r8
 800ec18:	e7e1      	b.n	800ebde <_printf_float+0x3ee>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	464a      	mov	r2, r9
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	f43f ae3e 	beq.w	800e8a6 <_printf_float+0xb6>
 800ec2a:	f108 0801 	add.w	r8, r8, #1
 800ec2e:	68e3      	ldr	r3, [r4, #12]
 800ec30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec32:	1a5b      	subs	r3, r3, r1
 800ec34:	4543      	cmp	r3, r8
 800ec36:	dcf0      	bgt.n	800ec1a <_printf_float+0x42a>
 800ec38:	e6fc      	b.n	800ea34 <_printf_float+0x244>
 800ec3a:	f04f 0800 	mov.w	r8, #0
 800ec3e:	f104 0919 	add.w	r9, r4, #25
 800ec42:	e7f4      	b.n	800ec2e <_printf_float+0x43e>

0800ec44 <_printf_common>:
 800ec44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec48:	4616      	mov	r6, r2
 800ec4a:	4698      	mov	r8, r3
 800ec4c:	688a      	ldr	r2, [r1, #8]
 800ec4e:	690b      	ldr	r3, [r1, #16]
 800ec50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec54:	4293      	cmp	r3, r2
 800ec56:	bfb8      	it	lt
 800ec58:	4613      	movlt	r3, r2
 800ec5a:	6033      	str	r3, [r6, #0]
 800ec5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec60:	4607      	mov	r7, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	b10a      	cbz	r2, 800ec6a <_printf_common+0x26>
 800ec66:	3301      	adds	r3, #1
 800ec68:	6033      	str	r3, [r6, #0]
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	0699      	lsls	r1, r3, #26
 800ec6e:	bf42      	ittt	mi
 800ec70:	6833      	ldrmi	r3, [r6, #0]
 800ec72:	3302      	addmi	r3, #2
 800ec74:	6033      	strmi	r3, [r6, #0]
 800ec76:	6825      	ldr	r5, [r4, #0]
 800ec78:	f015 0506 	ands.w	r5, r5, #6
 800ec7c:	d106      	bne.n	800ec8c <_printf_common+0x48>
 800ec7e:	f104 0a19 	add.w	sl, r4, #25
 800ec82:	68e3      	ldr	r3, [r4, #12]
 800ec84:	6832      	ldr	r2, [r6, #0]
 800ec86:	1a9b      	subs	r3, r3, r2
 800ec88:	42ab      	cmp	r3, r5
 800ec8a:	dc26      	bgt.n	800ecda <_printf_common+0x96>
 800ec8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec90:	6822      	ldr	r2, [r4, #0]
 800ec92:	3b00      	subs	r3, #0
 800ec94:	bf18      	it	ne
 800ec96:	2301      	movne	r3, #1
 800ec98:	0692      	lsls	r2, r2, #26
 800ec9a:	d42b      	bmi.n	800ecf4 <_printf_common+0xb0>
 800ec9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eca0:	4641      	mov	r1, r8
 800eca2:	4638      	mov	r0, r7
 800eca4:	47c8      	blx	r9
 800eca6:	3001      	adds	r0, #1
 800eca8:	d01e      	beq.n	800ece8 <_printf_common+0xa4>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	6922      	ldr	r2, [r4, #16]
 800ecae:	f003 0306 	and.w	r3, r3, #6
 800ecb2:	2b04      	cmp	r3, #4
 800ecb4:	bf02      	ittt	eq
 800ecb6:	68e5      	ldreq	r5, [r4, #12]
 800ecb8:	6833      	ldreq	r3, [r6, #0]
 800ecba:	1aed      	subeq	r5, r5, r3
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	bf0c      	ite	eq
 800ecc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecc4:	2500      	movne	r5, #0
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	bfc4      	itt	gt
 800ecca:	1a9b      	subgt	r3, r3, r2
 800eccc:	18ed      	addgt	r5, r5, r3
 800ecce:	2600      	movs	r6, #0
 800ecd0:	341a      	adds	r4, #26
 800ecd2:	42b5      	cmp	r5, r6
 800ecd4:	d11a      	bne.n	800ed0c <_printf_common+0xc8>
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e008      	b.n	800ecec <_printf_common+0xa8>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	4652      	mov	r2, sl
 800ecde:	4641      	mov	r1, r8
 800ece0:	4638      	mov	r0, r7
 800ece2:	47c8      	blx	r9
 800ece4:	3001      	adds	r0, #1
 800ece6:	d103      	bne.n	800ecf0 <_printf_common+0xac>
 800ece8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf0:	3501      	adds	r5, #1
 800ecf2:	e7c6      	b.n	800ec82 <_printf_common+0x3e>
 800ecf4:	18e1      	adds	r1, r4, r3
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	2030      	movs	r0, #48	@ 0x30
 800ecfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecfe:	4422      	add	r2, r4
 800ed00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed08:	3302      	adds	r3, #2
 800ed0a:	e7c7      	b.n	800ec9c <_printf_common+0x58>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	4622      	mov	r2, r4
 800ed10:	4641      	mov	r1, r8
 800ed12:	4638      	mov	r0, r7
 800ed14:	47c8      	blx	r9
 800ed16:	3001      	adds	r0, #1
 800ed18:	d0e6      	beq.n	800ece8 <_printf_common+0xa4>
 800ed1a:	3601      	adds	r6, #1
 800ed1c:	e7d9      	b.n	800ecd2 <_printf_common+0x8e>
	...

0800ed20 <_printf_i>:
 800ed20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed24:	7e0f      	ldrb	r7, [r1, #24]
 800ed26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed28:	2f78      	cmp	r7, #120	@ 0x78
 800ed2a:	4691      	mov	r9, r2
 800ed2c:	4680      	mov	r8, r0
 800ed2e:	460c      	mov	r4, r1
 800ed30:	469a      	mov	sl, r3
 800ed32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed36:	d807      	bhi.n	800ed48 <_printf_i+0x28>
 800ed38:	2f62      	cmp	r7, #98	@ 0x62
 800ed3a:	d80a      	bhi.n	800ed52 <_printf_i+0x32>
 800ed3c:	2f00      	cmp	r7, #0
 800ed3e:	f000 80d2 	beq.w	800eee6 <_printf_i+0x1c6>
 800ed42:	2f58      	cmp	r7, #88	@ 0x58
 800ed44:	f000 80b9 	beq.w	800eeba <_printf_i+0x19a>
 800ed48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed50:	e03a      	b.n	800edc8 <_printf_i+0xa8>
 800ed52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed56:	2b15      	cmp	r3, #21
 800ed58:	d8f6      	bhi.n	800ed48 <_printf_i+0x28>
 800ed5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ed60 <_printf_i+0x40>)
 800ed5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed60:	0800edb9 	.word	0x0800edb9
 800ed64:	0800edcd 	.word	0x0800edcd
 800ed68:	0800ed49 	.word	0x0800ed49
 800ed6c:	0800ed49 	.word	0x0800ed49
 800ed70:	0800ed49 	.word	0x0800ed49
 800ed74:	0800ed49 	.word	0x0800ed49
 800ed78:	0800edcd 	.word	0x0800edcd
 800ed7c:	0800ed49 	.word	0x0800ed49
 800ed80:	0800ed49 	.word	0x0800ed49
 800ed84:	0800ed49 	.word	0x0800ed49
 800ed88:	0800ed49 	.word	0x0800ed49
 800ed8c:	0800eecd 	.word	0x0800eecd
 800ed90:	0800edf7 	.word	0x0800edf7
 800ed94:	0800ee87 	.word	0x0800ee87
 800ed98:	0800ed49 	.word	0x0800ed49
 800ed9c:	0800ed49 	.word	0x0800ed49
 800eda0:	0800eeef 	.word	0x0800eeef
 800eda4:	0800ed49 	.word	0x0800ed49
 800eda8:	0800edf7 	.word	0x0800edf7
 800edac:	0800ed49 	.word	0x0800ed49
 800edb0:	0800ed49 	.word	0x0800ed49
 800edb4:	0800ee8f 	.word	0x0800ee8f
 800edb8:	6833      	ldr	r3, [r6, #0]
 800edba:	1d1a      	adds	r2, r3, #4
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	6032      	str	r2, [r6, #0]
 800edc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edc8:	2301      	movs	r3, #1
 800edca:	e09d      	b.n	800ef08 <_printf_i+0x1e8>
 800edcc:	6833      	ldr	r3, [r6, #0]
 800edce:	6820      	ldr	r0, [r4, #0]
 800edd0:	1d19      	adds	r1, r3, #4
 800edd2:	6031      	str	r1, [r6, #0]
 800edd4:	0606      	lsls	r6, r0, #24
 800edd6:	d501      	bpl.n	800eddc <_printf_i+0xbc>
 800edd8:	681d      	ldr	r5, [r3, #0]
 800edda:	e003      	b.n	800ede4 <_printf_i+0xc4>
 800eddc:	0645      	lsls	r5, r0, #25
 800edde:	d5fb      	bpl.n	800edd8 <_printf_i+0xb8>
 800ede0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	da03      	bge.n	800edf0 <_printf_i+0xd0>
 800ede8:	232d      	movs	r3, #45	@ 0x2d
 800edea:	426d      	negs	r5, r5
 800edec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf0:	4859      	ldr	r0, [pc, #356]	@ (800ef58 <_printf_i+0x238>)
 800edf2:	230a      	movs	r3, #10
 800edf4:	e011      	b.n	800ee1a <_printf_i+0xfa>
 800edf6:	6821      	ldr	r1, [r4, #0]
 800edf8:	6833      	ldr	r3, [r6, #0]
 800edfa:	0608      	lsls	r0, r1, #24
 800edfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee00:	d402      	bmi.n	800ee08 <_printf_i+0xe8>
 800ee02:	0649      	lsls	r1, r1, #25
 800ee04:	bf48      	it	mi
 800ee06:	b2ad      	uxthmi	r5, r5
 800ee08:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee0a:	4853      	ldr	r0, [pc, #332]	@ (800ef58 <_printf_i+0x238>)
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	bf14      	ite	ne
 800ee10:	230a      	movne	r3, #10
 800ee12:	2308      	moveq	r3, #8
 800ee14:	2100      	movs	r1, #0
 800ee16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee1a:	6866      	ldr	r6, [r4, #4]
 800ee1c:	60a6      	str	r6, [r4, #8]
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	bfa2      	ittt	ge
 800ee22:	6821      	ldrge	r1, [r4, #0]
 800ee24:	f021 0104 	bicge.w	r1, r1, #4
 800ee28:	6021      	strge	r1, [r4, #0]
 800ee2a:	b90d      	cbnz	r5, 800ee30 <_printf_i+0x110>
 800ee2c:	2e00      	cmp	r6, #0
 800ee2e:	d04b      	beq.n	800eec8 <_printf_i+0x1a8>
 800ee30:	4616      	mov	r6, r2
 800ee32:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee36:	fb03 5711 	mls	r7, r3, r1, r5
 800ee3a:	5dc7      	ldrb	r7, [r0, r7]
 800ee3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee40:	462f      	mov	r7, r5
 800ee42:	42bb      	cmp	r3, r7
 800ee44:	460d      	mov	r5, r1
 800ee46:	d9f4      	bls.n	800ee32 <_printf_i+0x112>
 800ee48:	2b08      	cmp	r3, #8
 800ee4a:	d10b      	bne.n	800ee64 <_printf_i+0x144>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	07df      	lsls	r7, r3, #31
 800ee50:	d508      	bpl.n	800ee64 <_printf_i+0x144>
 800ee52:	6923      	ldr	r3, [r4, #16]
 800ee54:	6861      	ldr	r1, [r4, #4]
 800ee56:	4299      	cmp	r1, r3
 800ee58:	bfde      	ittt	le
 800ee5a:	2330      	movle	r3, #48	@ 0x30
 800ee5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee64:	1b92      	subs	r2, r2, r6
 800ee66:	6122      	str	r2, [r4, #16]
 800ee68:	f8cd a000 	str.w	sl, [sp]
 800ee6c:	464b      	mov	r3, r9
 800ee6e:	aa03      	add	r2, sp, #12
 800ee70:	4621      	mov	r1, r4
 800ee72:	4640      	mov	r0, r8
 800ee74:	f7ff fee6 	bl	800ec44 <_printf_common>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d14a      	bne.n	800ef12 <_printf_i+0x1f2>
 800ee7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee80:	b004      	add	sp, #16
 800ee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	f043 0320 	orr.w	r3, r3, #32
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	4833      	ldr	r0, [pc, #204]	@ (800ef5c <_printf_i+0x23c>)
 800ee90:	2778      	movs	r7, #120	@ 0x78
 800ee92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	6831      	ldr	r1, [r6, #0]
 800ee9a:	061f      	lsls	r7, r3, #24
 800ee9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800eea0:	d402      	bmi.n	800eea8 <_printf_i+0x188>
 800eea2:	065f      	lsls	r7, r3, #25
 800eea4:	bf48      	it	mi
 800eea6:	b2ad      	uxthmi	r5, r5
 800eea8:	6031      	str	r1, [r6, #0]
 800eeaa:	07d9      	lsls	r1, r3, #31
 800eeac:	bf44      	itt	mi
 800eeae:	f043 0320 	orrmi.w	r3, r3, #32
 800eeb2:	6023      	strmi	r3, [r4, #0]
 800eeb4:	b11d      	cbz	r5, 800eebe <_printf_i+0x19e>
 800eeb6:	2310      	movs	r3, #16
 800eeb8:	e7ac      	b.n	800ee14 <_printf_i+0xf4>
 800eeba:	4827      	ldr	r0, [pc, #156]	@ (800ef58 <_printf_i+0x238>)
 800eebc:	e7e9      	b.n	800ee92 <_printf_i+0x172>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	f023 0320 	bic.w	r3, r3, #32
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	e7f6      	b.n	800eeb6 <_printf_i+0x196>
 800eec8:	4616      	mov	r6, r2
 800eeca:	e7bd      	b.n	800ee48 <_printf_i+0x128>
 800eecc:	6833      	ldr	r3, [r6, #0]
 800eece:	6825      	ldr	r5, [r4, #0]
 800eed0:	6961      	ldr	r1, [r4, #20]
 800eed2:	1d18      	adds	r0, r3, #4
 800eed4:	6030      	str	r0, [r6, #0]
 800eed6:	062e      	lsls	r6, r5, #24
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	d501      	bpl.n	800eee0 <_printf_i+0x1c0>
 800eedc:	6019      	str	r1, [r3, #0]
 800eede:	e002      	b.n	800eee6 <_printf_i+0x1c6>
 800eee0:	0668      	lsls	r0, r5, #25
 800eee2:	d5fb      	bpl.n	800eedc <_printf_i+0x1bc>
 800eee4:	8019      	strh	r1, [r3, #0]
 800eee6:	2300      	movs	r3, #0
 800eee8:	6123      	str	r3, [r4, #16]
 800eeea:	4616      	mov	r6, r2
 800eeec:	e7bc      	b.n	800ee68 <_printf_i+0x148>
 800eeee:	6833      	ldr	r3, [r6, #0]
 800eef0:	1d1a      	adds	r2, r3, #4
 800eef2:	6032      	str	r2, [r6, #0]
 800eef4:	681e      	ldr	r6, [r3, #0]
 800eef6:	6862      	ldr	r2, [r4, #4]
 800eef8:	2100      	movs	r1, #0
 800eefa:	4630      	mov	r0, r6
 800eefc:	f7f1 f970 	bl	80001e0 <memchr>
 800ef00:	b108      	cbz	r0, 800ef06 <_printf_i+0x1e6>
 800ef02:	1b80      	subs	r0, r0, r6
 800ef04:	6060      	str	r0, [r4, #4]
 800ef06:	6863      	ldr	r3, [r4, #4]
 800ef08:	6123      	str	r3, [r4, #16]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef10:	e7aa      	b.n	800ee68 <_printf_i+0x148>
 800ef12:	6923      	ldr	r3, [r4, #16]
 800ef14:	4632      	mov	r2, r6
 800ef16:	4649      	mov	r1, r9
 800ef18:	4640      	mov	r0, r8
 800ef1a:	47d0      	blx	sl
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	d0ad      	beq.n	800ee7c <_printf_i+0x15c>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	079b      	lsls	r3, r3, #30
 800ef24:	d413      	bmi.n	800ef4e <_printf_i+0x22e>
 800ef26:	68e0      	ldr	r0, [r4, #12]
 800ef28:	9b03      	ldr	r3, [sp, #12]
 800ef2a:	4298      	cmp	r0, r3
 800ef2c:	bfb8      	it	lt
 800ef2e:	4618      	movlt	r0, r3
 800ef30:	e7a6      	b.n	800ee80 <_printf_i+0x160>
 800ef32:	2301      	movs	r3, #1
 800ef34:	4632      	mov	r2, r6
 800ef36:	4649      	mov	r1, r9
 800ef38:	4640      	mov	r0, r8
 800ef3a:	47d0      	blx	sl
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d09d      	beq.n	800ee7c <_printf_i+0x15c>
 800ef40:	3501      	adds	r5, #1
 800ef42:	68e3      	ldr	r3, [r4, #12]
 800ef44:	9903      	ldr	r1, [sp, #12]
 800ef46:	1a5b      	subs	r3, r3, r1
 800ef48:	42ab      	cmp	r3, r5
 800ef4a:	dcf2      	bgt.n	800ef32 <_printf_i+0x212>
 800ef4c:	e7eb      	b.n	800ef26 <_printf_i+0x206>
 800ef4e:	2500      	movs	r5, #0
 800ef50:	f104 0619 	add.w	r6, r4, #25
 800ef54:	e7f5      	b.n	800ef42 <_printf_i+0x222>
 800ef56:	bf00      	nop
 800ef58:	08011302 	.word	0x08011302
 800ef5c:	08011313 	.word	0x08011313

0800ef60 <std>:
 800ef60:	2300      	movs	r3, #0
 800ef62:	b510      	push	{r4, lr}
 800ef64:	4604      	mov	r4, r0
 800ef66:	e9c0 3300 	strd	r3, r3, [r0]
 800ef6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef6e:	6083      	str	r3, [r0, #8]
 800ef70:	8181      	strh	r1, [r0, #12]
 800ef72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef74:	81c2      	strh	r2, [r0, #14]
 800ef76:	6183      	str	r3, [r0, #24]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	2208      	movs	r2, #8
 800ef7c:	305c      	adds	r0, #92	@ 0x5c
 800ef7e:	f000 f9f9 	bl	800f374 <memset>
 800ef82:	4b0d      	ldr	r3, [pc, #52]	@ (800efb8 <std+0x58>)
 800ef84:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef86:	4b0d      	ldr	r3, [pc, #52]	@ (800efbc <std+0x5c>)
 800ef88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef8a:	4b0d      	ldr	r3, [pc, #52]	@ (800efc0 <std+0x60>)
 800ef8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <std+0x64>)
 800ef90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef92:	4b0d      	ldr	r3, [pc, #52]	@ (800efc8 <std+0x68>)
 800ef94:	6224      	str	r4, [r4, #32]
 800ef96:	429c      	cmp	r4, r3
 800ef98:	d006      	beq.n	800efa8 <std+0x48>
 800ef9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef9e:	4294      	cmp	r4, r2
 800efa0:	d002      	beq.n	800efa8 <std+0x48>
 800efa2:	33d0      	adds	r3, #208	@ 0xd0
 800efa4:	429c      	cmp	r4, r3
 800efa6:	d105      	bne.n	800efb4 <std+0x54>
 800efa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	f000 ba5c 	b.w	800f46c <__retarget_lock_init_recursive>
 800efb4:	bd10      	pop	{r4, pc}
 800efb6:	bf00      	nop
 800efb8:	0800f1c5 	.word	0x0800f1c5
 800efbc:	0800f1e7 	.word	0x0800f1e7
 800efc0:	0800f21f 	.word	0x0800f21f
 800efc4:	0800f243 	.word	0x0800f243
 800efc8:	20002124 	.word	0x20002124

0800efcc <stdio_exit_handler>:
 800efcc:	4a02      	ldr	r2, [pc, #8]	@ (800efd8 <stdio_exit_handler+0xc>)
 800efce:	4903      	ldr	r1, [pc, #12]	@ (800efdc <stdio_exit_handler+0x10>)
 800efd0:	4803      	ldr	r0, [pc, #12]	@ (800efe0 <stdio_exit_handler+0x14>)
 800efd2:	f000 b869 	b.w	800f0a8 <_fwalk_sglue>
 800efd6:	bf00      	nop
 800efd8:	20000128 	.word	0x20000128
 800efdc:	08010da1 	.word	0x08010da1
 800efe0:	20000138 	.word	0x20000138

0800efe4 <cleanup_stdio>:
 800efe4:	6841      	ldr	r1, [r0, #4]
 800efe6:	4b0c      	ldr	r3, [pc, #48]	@ (800f018 <cleanup_stdio+0x34>)
 800efe8:	4299      	cmp	r1, r3
 800efea:	b510      	push	{r4, lr}
 800efec:	4604      	mov	r4, r0
 800efee:	d001      	beq.n	800eff4 <cleanup_stdio+0x10>
 800eff0:	f001 fed6 	bl	8010da0 <_fflush_r>
 800eff4:	68a1      	ldr	r1, [r4, #8]
 800eff6:	4b09      	ldr	r3, [pc, #36]	@ (800f01c <cleanup_stdio+0x38>)
 800eff8:	4299      	cmp	r1, r3
 800effa:	d002      	beq.n	800f002 <cleanup_stdio+0x1e>
 800effc:	4620      	mov	r0, r4
 800effe:	f001 fecf 	bl	8010da0 <_fflush_r>
 800f002:	68e1      	ldr	r1, [r4, #12]
 800f004:	4b06      	ldr	r3, [pc, #24]	@ (800f020 <cleanup_stdio+0x3c>)
 800f006:	4299      	cmp	r1, r3
 800f008:	d004      	beq.n	800f014 <cleanup_stdio+0x30>
 800f00a:	4620      	mov	r0, r4
 800f00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f010:	f001 bec6 	b.w	8010da0 <_fflush_r>
 800f014:	bd10      	pop	{r4, pc}
 800f016:	bf00      	nop
 800f018:	20002124 	.word	0x20002124
 800f01c:	2000218c 	.word	0x2000218c
 800f020:	200021f4 	.word	0x200021f4

0800f024 <global_stdio_init.part.0>:
 800f024:	b510      	push	{r4, lr}
 800f026:	4b0b      	ldr	r3, [pc, #44]	@ (800f054 <global_stdio_init.part.0+0x30>)
 800f028:	4c0b      	ldr	r4, [pc, #44]	@ (800f058 <global_stdio_init.part.0+0x34>)
 800f02a:	4a0c      	ldr	r2, [pc, #48]	@ (800f05c <global_stdio_init.part.0+0x38>)
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	4620      	mov	r0, r4
 800f030:	2200      	movs	r2, #0
 800f032:	2104      	movs	r1, #4
 800f034:	f7ff ff94 	bl	800ef60 <std>
 800f038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f03c:	2201      	movs	r2, #1
 800f03e:	2109      	movs	r1, #9
 800f040:	f7ff ff8e 	bl	800ef60 <std>
 800f044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f048:	2202      	movs	r2, #2
 800f04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f04e:	2112      	movs	r1, #18
 800f050:	f7ff bf86 	b.w	800ef60 <std>
 800f054:	2000225c 	.word	0x2000225c
 800f058:	20002124 	.word	0x20002124
 800f05c:	0800efcd 	.word	0x0800efcd

0800f060 <__sfp_lock_acquire>:
 800f060:	4801      	ldr	r0, [pc, #4]	@ (800f068 <__sfp_lock_acquire+0x8>)
 800f062:	f000 ba04 	b.w	800f46e <__retarget_lock_acquire_recursive>
 800f066:	bf00      	nop
 800f068:	20002265 	.word	0x20002265

0800f06c <__sfp_lock_release>:
 800f06c:	4801      	ldr	r0, [pc, #4]	@ (800f074 <__sfp_lock_release+0x8>)
 800f06e:	f000 b9ff 	b.w	800f470 <__retarget_lock_release_recursive>
 800f072:	bf00      	nop
 800f074:	20002265 	.word	0x20002265

0800f078 <__sinit>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	4604      	mov	r4, r0
 800f07c:	f7ff fff0 	bl	800f060 <__sfp_lock_acquire>
 800f080:	6a23      	ldr	r3, [r4, #32]
 800f082:	b11b      	cbz	r3, 800f08c <__sinit+0x14>
 800f084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f088:	f7ff bff0 	b.w	800f06c <__sfp_lock_release>
 800f08c:	4b04      	ldr	r3, [pc, #16]	@ (800f0a0 <__sinit+0x28>)
 800f08e:	6223      	str	r3, [r4, #32]
 800f090:	4b04      	ldr	r3, [pc, #16]	@ (800f0a4 <__sinit+0x2c>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1f5      	bne.n	800f084 <__sinit+0xc>
 800f098:	f7ff ffc4 	bl	800f024 <global_stdio_init.part.0>
 800f09c:	e7f2      	b.n	800f084 <__sinit+0xc>
 800f09e:	bf00      	nop
 800f0a0:	0800efe5 	.word	0x0800efe5
 800f0a4:	2000225c 	.word	0x2000225c

0800f0a8 <_fwalk_sglue>:
 800f0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ac:	4607      	mov	r7, r0
 800f0ae:	4688      	mov	r8, r1
 800f0b0:	4614      	mov	r4, r2
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f0bc:	d505      	bpl.n	800f0ca <_fwalk_sglue+0x22>
 800f0be:	6824      	ldr	r4, [r4, #0]
 800f0c0:	2c00      	cmp	r4, #0
 800f0c2:	d1f7      	bne.n	800f0b4 <_fwalk_sglue+0xc>
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d907      	bls.n	800f0e0 <_fwalk_sglue+0x38>
 800f0d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	d003      	beq.n	800f0e0 <_fwalk_sglue+0x38>
 800f0d8:	4629      	mov	r1, r5
 800f0da:	4638      	mov	r0, r7
 800f0dc:	47c0      	blx	r8
 800f0de:	4306      	orrs	r6, r0
 800f0e0:	3568      	adds	r5, #104	@ 0x68
 800f0e2:	e7e9      	b.n	800f0b8 <_fwalk_sglue+0x10>

0800f0e4 <iprintf>:
 800f0e4:	b40f      	push	{r0, r1, r2, r3}
 800f0e6:	b507      	push	{r0, r1, r2, lr}
 800f0e8:	4906      	ldr	r1, [pc, #24]	@ (800f104 <iprintf+0x20>)
 800f0ea:	ab04      	add	r3, sp, #16
 800f0ec:	6808      	ldr	r0, [r1, #0]
 800f0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f2:	6881      	ldr	r1, [r0, #8]
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	f001 fcb7 	bl	8010a68 <_vfiprintf_r>
 800f0fa:	b003      	add	sp, #12
 800f0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f100:	b004      	add	sp, #16
 800f102:	4770      	bx	lr
 800f104:	20000134 	.word	0x20000134

0800f108 <_puts_r>:
 800f108:	6a03      	ldr	r3, [r0, #32]
 800f10a:	b570      	push	{r4, r5, r6, lr}
 800f10c:	6884      	ldr	r4, [r0, #8]
 800f10e:	4605      	mov	r5, r0
 800f110:	460e      	mov	r6, r1
 800f112:	b90b      	cbnz	r3, 800f118 <_puts_r+0x10>
 800f114:	f7ff ffb0 	bl	800f078 <__sinit>
 800f118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f11a:	07db      	lsls	r3, r3, #31
 800f11c:	d405      	bmi.n	800f12a <_puts_r+0x22>
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	0598      	lsls	r0, r3, #22
 800f122:	d402      	bmi.n	800f12a <_puts_r+0x22>
 800f124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f126:	f000 f9a2 	bl	800f46e <__retarget_lock_acquire_recursive>
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	0719      	lsls	r1, r3, #28
 800f12e:	d502      	bpl.n	800f136 <_puts_r+0x2e>
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d135      	bne.n	800f1a2 <_puts_r+0x9a>
 800f136:	4621      	mov	r1, r4
 800f138:	4628      	mov	r0, r5
 800f13a:	f000 f8c5 	bl	800f2c8 <__swsetup_r>
 800f13e:	b380      	cbz	r0, 800f1a2 <_puts_r+0x9a>
 800f140:	f04f 35ff 	mov.w	r5, #4294967295
 800f144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f146:	07da      	lsls	r2, r3, #31
 800f148:	d405      	bmi.n	800f156 <_puts_r+0x4e>
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	059b      	lsls	r3, r3, #22
 800f14e:	d402      	bmi.n	800f156 <_puts_r+0x4e>
 800f150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f152:	f000 f98d 	bl	800f470 <__retarget_lock_release_recursive>
 800f156:	4628      	mov	r0, r5
 800f158:	bd70      	pop	{r4, r5, r6, pc}
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	da04      	bge.n	800f168 <_puts_r+0x60>
 800f15e:	69a2      	ldr	r2, [r4, #24]
 800f160:	429a      	cmp	r2, r3
 800f162:	dc17      	bgt.n	800f194 <_puts_r+0x8c>
 800f164:	290a      	cmp	r1, #10
 800f166:	d015      	beq.n	800f194 <_puts_r+0x8c>
 800f168:	6823      	ldr	r3, [r4, #0]
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	6022      	str	r2, [r4, #0]
 800f16e:	7019      	strb	r1, [r3, #0]
 800f170:	68a3      	ldr	r3, [r4, #8]
 800f172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f176:	3b01      	subs	r3, #1
 800f178:	60a3      	str	r3, [r4, #8]
 800f17a:	2900      	cmp	r1, #0
 800f17c:	d1ed      	bne.n	800f15a <_puts_r+0x52>
 800f17e:	2b00      	cmp	r3, #0
 800f180:	da11      	bge.n	800f1a6 <_puts_r+0x9e>
 800f182:	4622      	mov	r2, r4
 800f184:	210a      	movs	r1, #10
 800f186:	4628      	mov	r0, r5
 800f188:	f000 f85f 	bl	800f24a <__swbuf_r>
 800f18c:	3001      	adds	r0, #1
 800f18e:	d0d7      	beq.n	800f140 <_puts_r+0x38>
 800f190:	250a      	movs	r5, #10
 800f192:	e7d7      	b.n	800f144 <_puts_r+0x3c>
 800f194:	4622      	mov	r2, r4
 800f196:	4628      	mov	r0, r5
 800f198:	f000 f857 	bl	800f24a <__swbuf_r>
 800f19c:	3001      	adds	r0, #1
 800f19e:	d1e7      	bne.n	800f170 <_puts_r+0x68>
 800f1a0:	e7ce      	b.n	800f140 <_puts_r+0x38>
 800f1a2:	3e01      	subs	r6, #1
 800f1a4:	e7e4      	b.n	800f170 <_puts_r+0x68>
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	1c5a      	adds	r2, r3, #1
 800f1aa:	6022      	str	r2, [r4, #0]
 800f1ac:	220a      	movs	r2, #10
 800f1ae:	701a      	strb	r2, [r3, #0]
 800f1b0:	e7ee      	b.n	800f190 <_puts_r+0x88>
	...

0800f1b4 <puts>:
 800f1b4:	4b02      	ldr	r3, [pc, #8]	@ (800f1c0 <puts+0xc>)
 800f1b6:	4601      	mov	r1, r0
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f7ff bfa5 	b.w	800f108 <_puts_r>
 800f1be:	bf00      	nop
 800f1c0:	20000134 	.word	0x20000134

0800f1c4 <__sread>:
 800f1c4:	b510      	push	{r4, lr}
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1cc:	f000 f900 	bl	800f3d0 <_read_r>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	bfab      	itete	ge
 800f1d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f1d8:	181b      	addge	r3, r3, r0
 800f1da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1de:	bfac      	ite	ge
 800f1e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1e2:	81a3      	strhlt	r3, [r4, #12]
 800f1e4:	bd10      	pop	{r4, pc}

0800f1e6 <__swrite>:
 800f1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ea:	461f      	mov	r7, r3
 800f1ec:	898b      	ldrh	r3, [r1, #12]
 800f1ee:	05db      	lsls	r3, r3, #23
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	4616      	mov	r6, r2
 800f1f6:	d505      	bpl.n	800f204 <__swrite+0x1e>
 800f1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	2200      	movs	r2, #0
 800f200:	f000 f8d4 	bl	800f3ac <_lseek_r>
 800f204:	89a3      	ldrh	r3, [r4, #12]
 800f206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f20a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f20e:	81a3      	strh	r3, [r4, #12]
 800f210:	4632      	mov	r2, r6
 800f212:	463b      	mov	r3, r7
 800f214:	4628      	mov	r0, r5
 800f216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f21a:	f000 b8eb 	b.w	800f3f4 <_write_r>

0800f21e <__sseek>:
 800f21e:	b510      	push	{r4, lr}
 800f220:	460c      	mov	r4, r1
 800f222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f226:	f000 f8c1 	bl	800f3ac <_lseek_r>
 800f22a:	1c43      	adds	r3, r0, #1
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	bf15      	itete	ne
 800f230:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f23a:	81a3      	strheq	r3, [r4, #12]
 800f23c:	bf18      	it	ne
 800f23e:	81a3      	strhne	r3, [r4, #12]
 800f240:	bd10      	pop	{r4, pc}

0800f242 <__sclose>:
 800f242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f246:	f000 b8a1 	b.w	800f38c <_close_r>

0800f24a <__swbuf_r>:
 800f24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24c:	460e      	mov	r6, r1
 800f24e:	4614      	mov	r4, r2
 800f250:	4605      	mov	r5, r0
 800f252:	b118      	cbz	r0, 800f25c <__swbuf_r+0x12>
 800f254:	6a03      	ldr	r3, [r0, #32]
 800f256:	b90b      	cbnz	r3, 800f25c <__swbuf_r+0x12>
 800f258:	f7ff ff0e 	bl	800f078 <__sinit>
 800f25c:	69a3      	ldr	r3, [r4, #24]
 800f25e:	60a3      	str	r3, [r4, #8]
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	071a      	lsls	r2, r3, #28
 800f264:	d501      	bpl.n	800f26a <__swbuf_r+0x20>
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	b943      	cbnz	r3, 800f27c <__swbuf_r+0x32>
 800f26a:	4621      	mov	r1, r4
 800f26c:	4628      	mov	r0, r5
 800f26e:	f000 f82b 	bl	800f2c8 <__swsetup_r>
 800f272:	b118      	cbz	r0, 800f27c <__swbuf_r+0x32>
 800f274:	f04f 37ff 	mov.w	r7, #4294967295
 800f278:	4638      	mov	r0, r7
 800f27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	6922      	ldr	r2, [r4, #16]
 800f280:	1a98      	subs	r0, r3, r2
 800f282:	6963      	ldr	r3, [r4, #20]
 800f284:	b2f6      	uxtb	r6, r6
 800f286:	4283      	cmp	r3, r0
 800f288:	4637      	mov	r7, r6
 800f28a:	dc05      	bgt.n	800f298 <__swbuf_r+0x4e>
 800f28c:	4621      	mov	r1, r4
 800f28e:	4628      	mov	r0, r5
 800f290:	f001 fd86 	bl	8010da0 <_fflush_r>
 800f294:	2800      	cmp	r0, #0
 800f296:	d1ed      	bne.n	800f274 <__swbuf_r+0x2a>
 800f298:	68a3      	ldr	r3, [r4, #8]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	60a3      	str	r3, [r4, #8]
 800f29e:	6823      	ldr	r3, [r4, #0]
 800f2a0:	1c5a      	adds	r2, r3, #1
 800f2a2:	6022      	str	r2, [r4, #0]
 800f2a4:	701e      	strb	r6, [r3, #0]
 800f2a6:	6962      	ldr	r2, [r4, #20]
 800f2a8:	1c43      	adds	r3, r0, #1
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d004      	beq.n	800f2b8 <__swbuf_r+0x6e>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	07db      	lsls	r3, r3, #31
 800f2b2:	d5e1      	bpl.n	800f278 <__swbuf_r+0x2e>
 800f2b4:	2e0a      	cmp	r6, #10
 800f2b6:	d1df      	bne.n	800f278 <__swbuf_r+0x2e>
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f001 fd70 	bl	8010da0 <_fflush_r>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d0d9      	beq.n	800f278 <__swbuf_r+0x2e>
 800f2c4:	e7d6      	b.n	800f274 <__swbuf_r+0x2a>
	...

0800f2c8 <__swsetup_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4b29      	ldr	r3, [pc, #164]	@ (800f370 <__swsetup_r+0xa8>)
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	b118      	cbz	r0, 800f2dc <__swsetup_r+0x14>
 800f2d4:	6a03      	ldr	r3, [r0, #32]
 800f2d6:	b90b      	cbnz	r3, 800f2dc <__swsetup_r+0x14>
 800f2d8:	f7ff fece 	bl	800f078 <__sinit>
 800f2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e0:	0719      	lsls	r1, r3, #28
 800f2e2:	d422      	bmi.n	800f32a <__swsetup_r+0x62>
 800f2e4:	06da      	lsls	r2, r3, #27
 800f2e6:	d407      	bmi.n	800f2f8 <__swsetup_r+0x30>
 800f2e8:	2209      	movs	r2, #9
 800f2ea:	602a      	str	r2, [r5, #0]
 800f2ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2f0:	81a3      	strh	r3, [r4, #12]
 800f2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f6:	e033      	b.n	800f360 <__swsetup_r+0x98>
 800f2f8:	0758      	lsls	r0, r3, #29
 800f2fa:	d512      	bpl.n	800f322 <__swsetup_r+0x5a>
 800f2fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2fe:	b141      	cbz	r1, 800f312 <__swsetup_r+0x4a>
 800f300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f304:	4299      	cmp	r1, r3
 800f306:	d002      	beq.n	800f30e <__swsetup_r+0x46>
 800f308:	4628      	mov	r0, r5
 800f30a:	f000 ff01 	bl	8010110 <_free_r>
 800f30e:	2300      	movs	r3, #0
 800f310:	6363      	str	r3, [r4, #52]	@ 0x34
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f318:	81a3      	strh	r3, [r4, #12]
 800f31a:	2300      	movs	r3, #0
 800f31c:	6063      	str	r3, [r4, #4]
 800f31e:	6923      	ldr	r3, [r4, #16]
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	f043 0308 	orr.w	r3, r3, #8
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	6923      	ldr	r3, [r4, #16]
 800f32c:	b94b      	cbnz	r3, 800f342 <__swsetup_r+0x7a>
 800f32e:	89a3      	ldrh	r3, [r4, #12]
 800f330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f338:	d003      	beq.n	800f342 <__swsetup_r+0x7a>
 800f33a:	4621      	mov	r1, r4
 800f33c:	4628      	mov	r0, r5
 800f33e:	f001 fd7d 	bl	8010e3c <__smakebuf_r>
 800f342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f346:	f013 0201 	ands.w	r2, r3, #1
 800f34a:	d00a      	beq.n	800f362 <__swsetup_r+0x9a>
 800f34c:	2200      	movs	r2, #0
 800f34e:	60a2      	str	r2, [r4, #8]
 800f350:	6962      	ldr	r2, [r4, #20]
 800f352:	4252      	negs	r2, r2
 800f354:	61a2      	str	r2, [r4, #24]
 800f356:	6922      	ldr	r2, [r4, #16]
 800f358:	b942      	cbnz	r2, 800f36c <__swsetup_r+0xa4>
 800f35a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f35e:	d1c5      	bne.n	800f2ec <__swsetup_r+0x24>
 800f360:	bd38      	pop	{r3, r4, r5, pc}
 800f362:	0799      	lsls	r1, r3, #30
 800f364:	bf58      	it	pl
 800f366:	6962      	ldrpl	r2, [r4, #20]
 800f368:	60a2      	str	r2, [r4, #8]
 800f36a:	e7f4      	b.n	800f356 <__swsetup_r+0x8e>
 800f36c:	2000      	movs	r0, #0
 800f36e:	e7f7      	b.n	800f360 <__swsetup_r+0x98>
 800f370:	20000134 	.word	0x20000134

0800f374 <memset>:
 800f374:	4402      	add	r2, r0
 800f376:	4603      	mov	r3, r0
 800f378:	4293      	cmp	r3, r2
 800f37a:	d100      	bne.n	800f37e <memset+0xa>
 800f37c:	4770      	bx	lr
 800f37e:	f803 1b01 	strb.w	r1, [r3], #1
 800f382:	e7f9      	b.n	800f378 <memset+0x4>

0800f384 <_localeconv_r>:
 800f384:	4800      	ldr	r0, [pc, #0]	@ (800f388 <_localeconv_r+0x4>)
 800f386:	4770      	bx	lr
 800f388:	20000274 	.word	0x20000274

0800f38c <_close_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d06      	ldr	r5, [pc, #24]	@ (800f3a8 <_close_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	602b      	str	r3, [r5, #0]
 800f398:	f7f3 f974 	bl	8002684 <_close>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_close_r+0x1a>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_close_r+0x1a>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	20002260 	.word	0x20002260

0800f3ac <_lseek_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d07      	ldr	r5, [pc, #28]	@ (800f3cc <_lseek_r+0x20>)
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	602a      	str	r2, [r5, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f7f3 f989 	bl	80026d2 <_lseek>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_lseek_r+0x1e>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_lseek_r+0x1e>
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	20002260 	.word	0x20002260

0800f3d0 <_read_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	@ (800f3f0 <_read_r+0x20>)
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4611      	mov	r1, r2
 800f3da:	2200      	movs	r2, #0
 800f3dc:	602a      	str	r2, [r5, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f7f3 f933 	bl	800264a <_read>
 800f3e4:	1c43      	adds	r3, r0, #1
 800f3e6:	d102      	bne.n	800f3ee <_read_r+0x1e>
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	b103      	cbz	r3, 800f3ee <_read_r+0x1e>
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	20002260 	.word	0x20002260

0800f3f4 <_write_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d07      	ldr	r5, [pc, #28]	@ (800f414 <_write_r+0x20>)
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	602a      	str	r2, [r5, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	f7f2 fbd4 	bl	8001bb0 <_write>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d102      	bne.n	800f412 <_write_r+0x1e>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b103      	cbz	r3, 800f412 <_write_r+0x1e>
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	20002260 	.word	0x20002260

0800f418 <__errno>:
 800f418:	4b01      	ldr	r3, [pc, #4]	@ (800f420 <__errno+0x8>)
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	20000134 	.word	0x20000134

0800f424 <__libc_init_array>:
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	4d0d      	ldr	r5, [pc, #52]	@ (800f45c <__libc_init_array+0x38>)
 800f428:	4c0d      	ldr	r4, [pc, #52]	@ (800f460 <__libc_init_array+0x3c>)
 800f42a:	1b64      	subs	r4, r4, r5
 800f42c:	10a4      	asrs	r4, r4, #2
 800f42e:	2600      	movs	r6, #0
 800f430:	42a6      	cmp	r6, r4
 800f432:	d109      	bne.n	800f448 <__libc_init_array+0x24>
 800f434:	4d0b      	ldr	r5, [pc, #44]	@ (800f464 <__libc_init_array+0x40>)
 800f436:	4c0c      	ldr	r4, [pc, #48]	@ (800f468 <__libc_init_array+0x44>)
 800f438:	f001 fe2c 	bl	8011094 <_init>
 800f43c:	1b64      	subs	r4, r4, r5
 800f43e:	10a4      	asrs	r4, r4, #2
 800f440:	2600      	movs	r6, #0
 800f442:	42a6      	cmp	r6, r4
 800f444:	d105      	bne.n	800f452 <__libc_init_array+0x2e>
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	f855 3b04 	ldr.w	r3, [r5], #4
 800f44c:	4798      	blx	r3
 800f44e:	3601      	adds	r6, #1
 800f450:	e7ee      	b.n	800f430 <__libc_init_array+0xc>
 800f452:	f855 3b04 	ldr.w	r3, [r5], #4
 800f456:	4798      	blx	r3
 800f458:	3601      	adds	r6, #1
 800f45a:	e7f2      	b.n	800f442 <__libc_init_array+0x1e>
 800f45c:	08011668 	.word	0x08011668
 800f460:	08011668 	.word	0x08011668
 800f464:	08011668 	.word	0x08011668
 800f468:	08011670 	.word	0x08011670

0800f46c <__retarget_lock_init_recursive>:
 800f46c:	4770      	bx	lr

0800f46e <__retarget_lock_acquire_recursive>:
 800f46e:	4770      	bx	lr

0800f470 <__retarget_lock_release_recursive>:
 800f470:	4770      	bx	lr

0800f472 <quorem>:
 800f472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f476:	6903      	ldr	r3, [r0, #16]
 800f478:	690c      	ldr	r4, [r1, #16]
 800f47a:	42a3      	cmp	r3, r4
 800f47c:	4607      	mov	r7, r0
 800f47e:	db7e      	blt.n	800f57e <quorem+0x10c>
 800f480:	3c01      	subs	r4, #1
 800f482:	f101 0814 	add.w	r8, r1, #20
 800f486:	00a3      	lsls	r3, r4, #2
 800f488:	f100 0514 	add.w	r5, r0, #20
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f492:	9301      	str	r3, [sp, #4]
 800f494:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f49c:	3301      	adds	r3, #1
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4a8:	d32e      	bcc.n	800f508 <quorem+0x96>
 800f4aa:	f04f 0a00 	mov.w	sl, #0
 800f4ae:	46c4      	mov	ip, r8
 800f4b0:	46ae      	mov	lr, r5
 800f4b2:	46d3      	mov	fp, sl
 800f4b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4b8:	b298      	uxth	r0, r3
 800f4ba:	fb06 a000 	mla	r0, r6, r0, sl
 800f4be:	0c02      	lsrs	r2, r0, #16
 800f4c0:	0c1b      	lsrs	r3, r3, #16
 800f4c2:	fb06 2303 	mla	r3, r6, r3, r2
 800f4c6:	f8de 2000 	ldr.w	r2, [lr]
 800f4ca:	b280      	uxth	r0, r0
 800f4cc:	b292      	uxth	r2, r2
 800f4ce:	1a12      	subs	r2, r2, r0
 800f4d0:	445a      	add	r2, fp
 800f4d2:	f8de 0000 	ldr.w	r0, [lr]
 800f4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f4e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f4e4:	b292      	uxth	r2, r2
 800f4e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f4ea:	45e1      	cmp	r9, ip
 800f4ec:	f84e 2b04 	str.w	r2, [lr], #4
 800f4f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f4f4:	d2de      	bcs.n	800f4b4 <quorem+0x42>
 800f4f6:	9b00      	ldr	r3, [sp, #0]
 800f4f8:	58eb      	ldr	r3, [r5, r3]
 800f4fa:	b92b      	cbnz	r3, 800f508 <quorem+0x96>
 800f4fc:	9b01      	ldr	r3, [sp, #4]
 800f4fe:	3b04      	subs	r3, #4
 800f500:	429d      	cmp	r5, r3
 800f502:	461a      	mov	r2, r3
 800f504:	d32f      	bcc.n	800f566 <quorem+0xf4>
 800f506:	613c      	str	r4, [r7, #16]
 800f508:	4638      	mov	r0, r7
 800f50a:	f001 f97b 	bl	8010804 <__mcmp>
 800f50e:	2800      	cmp	r0, #0
 800f510:	db25      	blt.n	800f55e <quorem+0xec>
 800f512:	4629      	mov	r1, r5
 800f514:	2000      	movs	r0, #0
 800f516:	f858 2b04 	ldr.w	r2, [r8], #4
 800f51a:	f8d1 c000 	ldr.w	ip, [r1]
 800f51e:	fa1f fe82 	uxth.w	lr, r2
 800f522:	fa1f f38c 	uxth.w	r3, ip
 800f526:	eba3 030e 	sub.w	r3, r3, lr
 800f52a:	4403      	add	r3, r0
 800f52c:	0c12      	lsrs	r2, r2, #16
 800f52e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f532:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f536:	b29b      	uxth	r3, r3
 800f538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f53c:	45c1      	cmp	r9, r8
 800f53e:	f841 3b04 	str.w	r3, [r1], #4
 800f542:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f546:	d2e6      	bcs.n	800f516 <quorem+0xa4>
 800f548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f54c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f550:	b922      	cbnz	r2, 800f55c <quorem+0xea>
 800f552:	3b04      	subs	r3, #4
 800f554:	429d      	cmp	r5, r3
 800f556:	461a      	mov	r2, r3
 800f558:	d30b      	bcc.n	800f572 <quorem+0x100>
 800f55a:	613c      	str	r4, [r7, #16]
 800f55c:	3601      	adds	r6, #1
 800f55e:	4630      	mov	r0, r6
 800f560:	b003      	add	sp, #12
 800f562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f566:	6812      	ldr	r2, [r2, #0]
 800f568:	3b04      	subs	r3, #4
 800f56a:	2a00      	cmp	r2, #0
 800f56c:	d1cb      	bne.n	800f506 <quorem+0x94>
 800f56e:	3c01      	subs	r4, #1
 800f570:	e7c6      	b.n	800f500 <quorem+0x8e>
 800f572:	6812      	ldr	r2, [r2, #0]
 800f574:	3b04      	subs	r3, #4
 800f576:	2a00      	cmp	r2, #0
 800f578:	d1ef      	bne.n	800f55a <quorem+0xe8>
 800f57a:	3c01      	subs	r4, #1
 800f57c:	e7ea      	b.n	800f554 <quorem+0xe2>
 800f57e:	2000      	movs	r0, #0
 800f580:	e7ee      	b.n	800f560 <quorem+0xee>
 800f582:	0000      	movs	r0, r0
 800f584:	0000      	movs	r0, r0
	...

0800f588 <_dtoa_r>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	69c7      	ldr	r7, [r0, #28]
 800f58e:	b099      	sub	sp, #100	@ 0x64
 800f590:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f594:	ec55 4b10 	vmov	r4, r5, d0
 800f598:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f59a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f59c:	4683      	mov	fp, r0
 800f59e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5a2:	b97f      	cbnz	r7, 800f5c4 <_dtoa_r+0x3c>
 800f5a4:	2010      	movs	r0, #16
 800f5a6:	f000 fdfd 	bl	80101a4 <malloc>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800f5b0:	b920      	cbnz	r0, 800f5bc <_dtoa_r+0x34>
 800f5b2:	4ba7      	ldr	r3, [pc, #668]	@ (800f850 <_dtoa_r+0x2c8>)
 800f5b4:	21ef      	movs	r1, #239	@ 0xef
 800f5b6:	48a7      	ldr	r0, [pc, #668]	@ (800f854 <_dtoa_r+0x2cc>)
 800f5b8:	f001 fcbc 	bl	8010f34 <__assert_func>
 800f5bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f5c0:	6007      	str	r7, [r0, #0]
 800f5c2:	60c7      	str	r7, [r0, #12]
 800f5c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5c8:	6819      	ldr	r1, [r3, #0]
 800f5ca:	b159      	cbz	r1, 800f5e4 <_dtoa_r+0x5c>
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	604a      	str	r2, [r1, #4]
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	4093      	lsls	r3, r2
 800f5d4:	608b      	str	r3, [r1, #8]
 800f5d6:	4658      	mov	r0, fp
 800f5d8:	f000 feda 	bl	8010390 <_Bfree>
 800f5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	1e2b      	subs	r3, r5, #0
 800f5e6:	bfb9      	ittee	lt
 800f5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f5ec:	9303      	strlt	r3, [sp, #12]
 800f5ee:	2300      	movge	r3, #0
 800f5f0:	6033      	strge	r3, [r6, #0]
 800f5f2:	9f03      	ldr	r7, [sp, #12]
 800f5f4:	4b98      	ldr	r3, [pc, #608]	@ (800f858 <_dtoa_r+0x2d0>)
 800f5f6:	bfbc      	itt	lt
 800f5f8:	2201      	movlt	r2, #1
 800f5fa:	6032      	strlt	r2, [r6, #0]
 800f5fc:	43bb      	bics	r3, r7
 800f5fe:	d112      	bne.n	800f626 <_dtoa_r+0x9e>
 800f600:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f602:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f606:	6013      	str	r3, [r2, #0]
 800f608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f60c:	4323      	orrs	r3, r4
 800f60e:	f000 854d 	beq.w	80100ac <_dtoa_r+0xb24>
 800f612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f614:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f86c <_dtoa_r+0x2e4>
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 854f 	beq.w	80100bc <_dtoa_r+0xb34>
 800f61e:	f10a 0303 	add.w	r3, sl, #3
 800f622:	f000 bd49 	b.w	80100b8 <_dtoa_r+0xb30>
 800f626:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f62a:	2200      	movs	r2, #0
 800f62c:	ec51 0b17 	vmov	r0, r1, d7
 800f630:	2300      	movs	r3, #0
 800f632:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f636:	f7f1 fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f63a:	4680      	mov	r8, r0
 800f63c:	b158      	cbz	r0, 800f656 <_dtoa_r+0xce>
 800f63e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f640:	2301      	movs	r3, #1
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f646:	b113      	cbz	r3, 800f64e <_dtoa_r+0xc6>
 800f648:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f64a:	4b84      	ldr	r3, [pc, #528]	@ (800f85c <_dtoa_r+0x2d4>)
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f870 <_dtoa_r+0x2e8>
 800f652:	f000 bd33 	b.w	80100bc <_dtoa_r+0xb34>
 800f656:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f65a:	aa16      	add	r2, sp, #88	@ 0x58
 800f65c:	a917      	add	r1, sp, #92	@ 0x5c
 800f65e:	4658      	mov	r0, fp
 800f660:	f001 f980 	bl	8010964 <__d2b>
 800f664:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f668:	4681      	mov	r9, r0
 800f66a:	2e00      	cmp	r6, #0
 800f66c:	d077      	beq.n	800f75e <_dtoa_r+0x1d6>
 800f66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f670:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f67c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f680:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f684:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f688:	4619      	mov	r1, r3
 800f68a:	2200      	movs	r2, #0
 800f68c:	4b74      	ldr	r3, [pc, #464]	@ (800f860 <_dtoa_r+0x2d8>)
 800f68e:	f7f0 fe03 	bl	8000298 <__aeabi_dsub>
 800f692:	a369      	add	r3, pc, #420	@ (adr r3, 800f838 <_dtoa_r+0x2b0>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	f7f0 ffb6 	bl	8000608 <__aeabi_dmul>
 800f69c:	a368      	add	r3, pc, #416	@ (adr r3, 800f840 <_dtoa_r+0x2b8>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f7f0 fdfb 	bl	800029c <__adddf3>
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	460d      	mov	r5, r1
 800f6ac:	f7f0 ff42 	bl	8000534 <__aeabi_i2d>
 800f6b0:	a365      	add	r3, pc, #404	@ (adr r3, 800f848 <_dtoa_r+0x2c0>)
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f7f0 ffa7 	bl	8000608 <__aeabi_dmul>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	4620      	mov	r0, r4
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	f7f0 fdeb 	bl	800029c <__adddf3>
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	460d      	mov	r5, r1
 800f6ca:	f7f1 fa4d 	bl	8000b68 <__aeabi_d2iz>
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	f7f1 fa08 	bl	8000aec <__aeabi_dcmplt>
 800f6dc:	b140      	cbz	r0, 800f6f0 <_dtoa_r+0x168>
 800f6de:	4638      	mov	r0, r7
 800f6e0:	f7f0 ff28 	bl	8000534 <__aeabi_i2d>
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	462b      	mov	r3, r5
 800f6e8:	f7f1 f9f6 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6ec:	b900      	cbnz	r0, 800f6f0 <_dtoa_r+0x168>
 800f6ee:	3f01      	subs	r7, #1
 800f6f0:	2f16      	cmp	r7, #22
 800f6f2:	d851      	bhi.n	800f798 <_dtoa_r+0x210>
 800f6f4:	4b5b      	ldr	r3, [pc, #364]	@ (800f864 <_dtoa_r+0x2dc>)
 800f6f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f702:	f7f1 f9f3 	bl	8000aec <__aeabi_dcmplt>
 800f706:	2800      	cmp	r0, #0
 800f708:	d048      	beq.n	800f79c <_dtoa_r+0x214>
 800f70a:	3f01      	subs	r7, #1
 800f70c:	2300      	movs	r3, #0
 800f70e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f710:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f712:	1b9b      	subs	r3, r3, r6
 800f714:	1e5a      	subs	r2, r3, #1
 800f716:	bf44      	itt	mi
 800f718:	f1c3 0801 	rsbmi	r8, r3, #1
 800f71c:	2300      	movmi	r3, #0
 800f71e:	9208      	str	r2, [sp, #32]
 800f720:	bf54      	ite	pl
 800f722:	f04f 0800 	movpl.w	r8, #0
 800f726:	9308      	strmi	r3, [sp, #32]
 800f728:	2f00      	cmp	r7, #0
 800f72a:	db39      	blt.n	800f7a0 <_dtoa_r+0x218>
 800f72c:	9b08      	ldr	r3, [sp, #32]
 800f72e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f730:	443b      	add	r3, r7
 800f732:	9308      	str	r3, [sp, #32]
 800f734:	2300      	movs	r3, #0
 800f736:	930a      	str	r3, [sp, #40]	@ 0x28
 800f738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d864      	bhi.n	800f808 <_dtoa_r+0x280>
 800f73e:	2b05      	cmp	r3, #5
 800f740:	bfc4      	itt	gt
 800f742:	3b04      	subgt	r3, #4
 800f744:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f748:	f1a3 0302 	sub.w	r3, r3, #2
 800f74c:	bfcc      	ite	gt
 800f74e:	2400      	movgt	r4, #0
 800f750:	2401      	movle	r4, #1
 800f752:	2b03      	cmp	r3, #3
 800f754:	d863      	bhi.n	800f81e <_dtoa_r+0x296>
 800f756:	e8df f003 	tbb	[pc, r3]
 800f75a:	372a      	.short	0x372a
 800f75c:	5535      	.short	0x5535
 800f75e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f762:	441e      	add	r6, r3
 800f764:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f768:	2b20      	cmp	r3, #32
 800f76a:	bfc1      	itttt	gt
 800f76c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f770:	409f      	lslgt	r7, r3
 800f772:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f776:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f77a:	bfd6      	itet	le
 800f77c:	f1c3 0320 	rsble	r3, r3, #32
 800f780:	ea47 0003 	orrgt.w	r0, r7, r3
 800f784:	fa04 f003 	lslle.w	r0, r4, r3
 800f788:	f7f0 fec4 	bl	8000514 <__aeabi_ui2d>
 800f78c:	2201      	movs	r2, #1
 800f78e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f792:	3e01      	subs	r6, #1
 800f794:	9214      	str	r2, [sp, #80]	@ 0x50
 800f796:	e777      	b.n	800f688 <_dtoa_r+0x100>
 800f798:	2301      	movs	r3, #1
 800f79a:	e7b8      	b.n	800f70e <_dtoa_r+0x186>
 800f79c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f79e:	e7b7      	b.n	800f710 <_dtoa_r+0x188>
 800f7a0:	427b      	negs	r3, r7
 800f7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	eba8 0807 	sub.w	r8, r8, r7
 800f7aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7ac:	e7c4      	b.n	800f738 <_dtoa_r+0x1b0>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dc35      	bgt.n	800f824 <_dtoa_r+0x29c>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	9307      	str	r3, [sp, #28]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7c2:	e00b      	b.n	800f7dc <_dtoa_r+0x254>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e7f3      	b.n	800f7b0 <_dtoa_r+0x228>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7ce:	18fb      	adds	r3, r7, r3
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	9307      	str	r3, [sp, #28]
 800f7d8:	bfb8      	it	lt
 800f7da:	2301      	movlt	r3, #1
 800f7dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	2204      	movs	r2, #4
 800f7e4:	f102 0514 	add.w	r5, r2, #20
 800f7e8:	429d      	cmp	r5, r3
 800f7ea:	d91f      	bls.n	800f82c <_dtoa_r+0x2a4>
 800f7ec:	6041      	str	r1, [r0, #4]
 800f7ee:	4658      	mov	r0, fp
 800f7f0:	f000 fd8e 	bl	8010310 <_Balloc>
 800f7f4:	4682      	mov	sl, r0
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d13c      	bne.n	800f874 <_dtoa_r+0x2ec>
 800f7fa:	4b1b      	ldr	r3, [pc, #108]	@ (800f868 <_dtoa_r+0x2e0>)
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800f802:	e6d8      	b.n	800f5b6 <_dtoa_r+0x2e>
 800f804:	2301      	movs	r3, #1
 800f806:	e7e0      	b.n	800f7ca <_dtoa_r+0x242>
 800f808:	2401      	movs	r4, #1
 800f80a:	2300      	movs	r3, #0
 800f80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f80e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f810:	f04f 33ff 	mov.w	r3, #4294967295
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	9307      	str	r3, [sp, #28]
 800f818:	2200      	movs	r2, #0
 800f81a:	2312      	movs	r3, #18
 800f81c:	e7d0      	b.n	800f7c0 <_dtoa_r+0x238>
 800f81e:	2301      	movs	r3, #1
 800f820:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f822:	e7f5      	b.n	800f810 <_dtoa_r+0x288>
 800f824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	9307      	str	r3, [sp, #28]
 800f82a:	e7d7      	b.n	800f7dc <_dtoa_r+0x254>
 800f82c:	3101      	adds	r1, #1
 800f82e:	0052      	lsls	r2, r2, #1
 800f830:	e7d8      	b.n	800f7e4 <_dtoa_r+0x25c>
 800f832:	bf00      	nop
 800f834:	f3af 8000 	nop.w
 800f838:	636f4361 	.word	0x636f4361
 800f83c:	3fd287a7 	.word	0x3fd287a7
 800f840:	8b60c8b3 	.word	0x8b60c8b3
 800f844:	3fc68a28 	.word	0x3fc68a28
 800f848:	509f79fb 	.word	0x509f79fb
 800f84c:	3fd34413 	.word	0x3fd34413
 800f850:	08011331 	.word	0x08011331
 800f854:	08011348 	.word	0x08011348
 800f858:	7ff00000 	.word	0x7ff00000
 800f85c:	08011301 	.word	0x08011301
 800f860:	3ff80000 	.word	0x3ff80000
 800f864:	08011440 	.word	0x08011440
 800f868:	080113a0 	.word	0x080113a0
 800f86c:	0801132d 	.word	0x0801132d
 800f870:	08011300 	.word	0x08011300
 800f874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f878:	6018      	str	r0, [r3, #0]
 800f87a:	9b07      	ldr	r3, [sp, #28]
 800f87c:	2b0e      	cmp	r3, #14
 800f87e:	f200 80a4 	bhi.w	800f9ca <_dtoa_r+0x442>
 800f882:	2c00      	cmp	r4, #0
 800f884:	f000 80a1 	beq.w	800f9ca <_dtoa_r+0x442>
 800f888:	2f00      	cmp	r7, #0
 800f88a:	dd33      	ble.n	800f8f4 <_dtoa_r+0x36c>
 800f88c:	4bad      	ldr	r3, [pc, #692]	@ (800fb44 <_dtoa_r+0x5bc>)
 800f88e:	f007 020f 	and.w	r2, r7, #15
 800f892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f896:	ed93 7b00 	vldr	d7, [r3]
 800f89a:	05f8      	lsls	r0, r7, #23
 800f89c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f8a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f8a4:	d516      	bpl.n	800f8d4 <_dtoa_r+0x34c>
 800f8a6:	4ba8      	ldr	r3, [pc, #672]	@ (800fb48 <_dtoa_r+0x5c0>)
 800f8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8b0:	f7f0 ffd4 	bl	800085c <__aeabi_ddiv>
 800f8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b8:	f004 040f 	and.w	r4, r4, #15
 800f8bc:	2603      	movs	r6, #3
 800f8be:	4da2      	ldr	r5, [pc, #648]	@ (800fb48 <_dtoa_r+0x5c0>)
 800f8c0:	b954      	cbnz	r4, 800f8d8 <_dtoa_r+0x350>
 800f8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8ca:	f7f0 ffc7 	bl	800085c <__aeabi_ddiv>
 800f8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8d2:	e028      	b.n	800f926 <_dtoa_r+0x39e>
 800f8d4:	2602      	movs	r6, #2
 800f8d6:	e7f2      	b.n	800f8be <_dtoa_r+0x336>
 800f8d8:	07e1      	lsls	r1, r4, #31
 800f8da:	d508      	bpl.n	800f8ee <_dtoa_r+0x366>
 800f8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8e4:	f7f0 fe90 	bl	8000608 <__aeabi_dmul>
 800f8e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8ec:	3601      	adds	r6, #1
 800f8ee:	1064      	asrs	r4, r4, #1
 800f8f0:	3508      	adds	r5, #8
 800f8f2:	e7e5      	b.n	800f8c0 <_dtoa_r+0x338>
 800f8f4:	f000 80d2 	beq.w	800fa9c <_dtoa_r+0x514>
 800f8f8:	427c      	negs	r4, r7
 800f8fa:	4b92      	ldr	r3, [pc, #584]	@ (800fb44 <_dtoa_r+0x5bc>)
 800f8fc:	4d92      	ldr	r5, [pc, #584]	@ (800fb48 <_dtoa_r+0x5c0>)
 800f8fe:	f004 020f 	and.w	r2, r4, #15
 800f902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f90e:	f7f0 fe7b 	bl	8000608 <__aeabi_dmul>
 800f912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f916:	1124      	asrs	r4, r4, #4
 800f918:	2300      	movs	r3, #0
 800f91a:	2602      	movs	r6, #2
 800f91c:	2c00      	cmp	r4, #0
 800f91e:	f040 80b2 	bne.w	800fa86 <_dtoa_r+0x4fe>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d1d3      	bne.n	800f8ce <_dtoa_r+0x346>
 800f926:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f928:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 80b7 	beq.w	800faa0 <_dtoa_r+0x518>
 800f932:	4b86      	ldr	r3, [pc, #536]	@ (800fb4c <_dtoa_r+0x5c4>)
 800f934:	2200      	movs	r2, #0
 800f936:	4620      	mov	r0, r4
 800f938:	4629      	mov	r1, r5
 800f93a:	f7f1 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800f93e:	2800      	cmp	r0, #0
 800f940:	f000 80ae 	beq.w	800faa0 <_dtoa_r+0x518>
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 80aa 	beq.w	800faa0 <_dtoa_r+0x518>
 800f94c:	9b00      	ldr	r3, [sp, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	dd37      	ble.n	800f9c2 <_dtoa_r+0x43a>
 800f952:	1e7b      	subs	r3, r7, #1
 800f954:	9304      	str	r3, [sp, #16]
 800f956:	4620      	mov	r0, r4
 800f958:	4b7d      	ldr	r3, [pc, #500]	@ (800fb50 <_dtoa_r+0x5c8>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f0 fe53 	bl	8000608 <__aeabi_dmul>
 800f962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f966:	9c00      	ldr	r4, [sp, #0]
 800f968:	3601      	adds	r6, #1
 800f96a:	4630      	mov	r0, r6
 800f96c:	f7f0 fde2 	bl	8000534 <__aeabi_i2d>
 800f970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f974:	f7f0 fe48 	bl	8000608 <__aeabi_dmul>
 800f978:	4b76      	ldr	r3, [pc, #472]	@ (800fb54 <_dtoa_r+0x5cc>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	f7f0 fc8e 	bl	800029c <__adddf3>
 800f980:	4605      	mov	r5, r0
 800f982:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f986:	2c00      	cmp	r4, #0
 800f988:	f040 808d 	bne.w	800faa6 <_dtoa_r+0x51e>
 800f98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f990:	4b71      	ldr	r3, [pc, #452]	@ (800fb58 <_dtoa_r+0x5d0>)
 800f992:	2200      	movs	r2, #0
 800f994:	f7f0 fc80 	bl	8000298 <__aeabi_dsub>
 800f998:	4602      	mov	r2, r0
 800f99a:	460b      	mov	r3, r1
 800f99c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9a0:	462a      	mov	r2, r5
 800f9a2:	4633      	mov	r3, r6
 800f9a4:	f7f1 f8c0 	bl	8000b28 <__aeabi_dcmpgt>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f040 828b 	bne.w	800fec4 <_dtoa_r+0x93c>
 800f9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f9b8:	f7f1 f898 	bl	8000aec <__aeabi_dcmplt>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	f040 8128 	bne.w	800fc12 <_dtoa_r+0x68a>
 800f9c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f9c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f9ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f2c0 815a 	blt.w	800fc86 <_dtoa_r+0x6fe>
 800f9d2:	2f0e      	cmp	r7, #14
 800f9d4:	f300 8157 	bgt.w	800fc86 <_dtoa_r+0x6fe>
 800f9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800fb44 <_dtoa_r+0x5bc>)
 800f9da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f9de:	ed93 7b00 	vldr	d7, [r3]
 800f9e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	ed8d 7b00 	vstr	d7, [sp]
 800f9ea:	da03      	bge.n	800f9f4 <_dtoa_r+0x46c>
 800f9ec:	9b07      	ldr	r3, [sp, #28]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f340 8101 	ble.w	800fbf6 <_dtoa_r+0x66e>
 800f9f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f9f8:	4656      	mov	r6, sl
 800f9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9fe:	4620      	mov	r0, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	f7f0 ff2b 	bl	800085c <__aeabi_ddiv>
 800fa06:	f7f1 f8af 	bl	8000b68 <__aeabi_d2iz>
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	f7f0 fd92 	bl	8000534 <__aeabi_i2d>
 800fa10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa14:	f7f0 fdf8 	bl	8000608 <__aeabi_dmul>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	4629      	mov	r1, r5
 800fa20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fa24:	f7f0 fc38 	bl	8000298 <__aeabi_dsub>
 800fa28:	f806 4b01 	strb.w	r4, [r6], #1
 800fa2c:	9d07      	ldr	r5, [sp, #28]
 800fa2e:	eba6 040a 	sub.w	r4, r6, sl
 800fa32:	42a5      	cmp	r5, r4
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	f040 8117 	bne.w	800fc6a <_dtoa_r+0x6e2>
 800fa3c:	f7f0 fc2e 	bl	800029c <__adddf3>
 800fa40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa44:	4604      	mov	r4, r0
 800fa46:	460d      	mov	r5, r1
 800fa48:	f7f1 f86e 	bl	8000b28 <__aeabi_dcmpgt>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	f040 80f9 	bne.w	800fc44 <_dtoa_r+0x6bc>
 800fa52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa56:	4620      	mov	r0, r4
 800fa58:	4629      	mov	r1, r5
 800fa5a:	f7f1 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa5e:	b118      	cbz	r0, 800fa68 <_dtoa_r+0x4e0>
 800fa60:	f018 0f01 	tst.w	r8, #1
 800fa64:	f040 80ee 	bne.w	800fc44 <_dtoa_r+0x6bc>
 800fa68:	4649      	mov	r1, r9
 800fa6a:	4658      	mov	r0, fp
 800fa6c:	f000 fc90 	bl	8010390 <_Bfree>
 800fa70:	2300      	movs	r3, #0
 800fa72:	7033      	strb	r3, [r6, #0]
 800fa74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa76:	3701      	adds	r7, #1
 800fa78:	601f      	str	r7, [r3, #0]
 800fa7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 831d 	beq.w	80100bc <_dtoa_r+0xb34>
 800fa82:	601e      	str	r6, [r3, #0]
 800fa84:	e31a      	b.n	80100bc <_dtoa_r+0xb34>
 800fa86:	07e2      	lsls	r2, r4, #31
 800fa88:	d505      	bpl.n	800fa96 <_dtoa_r+0x50e>
 800fa8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa8e:	f7f0 fdbb 	bl	8000608 <__aeabi_dmul>
 800fa92:	3601      	adds	r6, #1
 800fa94:	2301      	movs	r3, #1
 800fa96:	1064      	asrs	r4, r4, #1
 800fa98:	3508      	adds	r5, #8
 800fa9a:	e73f      	b.n	800f91c <_dtoa_r+0x394>
 800fa9c:	2602      	movs	r6, #2
 800fa9e:	e742      	b.n	800f926 <_dtoa_r+0x39e>
 800faa0:	9c07      	ldr	r4, [sp, #28]
 800faa2:	9704      	str	r7, [sp, #16]
 800faa4:	e761      	b.n	800f96a <_dtoa_r+0x3e2>
 800faa6:	4b27      	ldr	r3, [pc, #156]	@ (800fb44 <_dtoa_r+0x5bc>)
 800faa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800faaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800faae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fab2:	4454      	add	r4, sl
 800fab4:	2900      	cmp	r1, #0
 800fab6:	d053      	beq.n	800fb60 <_dtoa_r+0x5d8>
 800fab8:	4928      	ldr	r1, [pc, #160]	@ (800fb5c <_dtoa_r+0x5d4>)
 800faba:	2000      	movs	r0, #0
 800fabc:	f7f0 fece 	bl	800085c <__aeabi_ddiv>
 800fac0:	4633      	mov	r3, r6
 800fac2:	462a      	mov	r2, r5
 800fac4:	f7f0 fbe8 	bl	8000298 <__aeabi_dsub>
 800fac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800facc:	4656      	mov	r6, sl
 800face:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad2:	f7f1 f849 	bl	8000b68 <__aeabi_d2iz>
 800fad6:	4605      	mov	r5, r0
 800fad8:	f7f0 fd2c 	bl	8000534 <__aeabi_i2d>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fae4:	f7f0 fbd8 	bl	8000298 <__aeabi_dsub>
 800fae8:	3530      	adds	r5, #48	@ 0x30
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800faf2:	f806 5b01 	strb.w	r5, [r6], #1
 800faf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fafa:	f7f0 fff7 	bl	8000aec <__aeabi_dcmplt>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d171      	bne.n	800fbe6 <_dtoa_r+0x65e>
 800fb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb06:	4911      	ldr	r1, [pc, #68]	@ (800fb4c <_dtoa_r+0x5c4>)
 800fb08:	2000      	movs	r0, #0
 800fb0a:	f7f0 fbc5 	bl	8000298 <__aeabi_dsub>
 800fb0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb12:	f7f0 ffeb 	bl	8000aec <__aeabi_dcmplt>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f040 8095 	bne.w	800fc46 <_dtoa_r+0x6be>
 800fb1c:	42a6      	cmp	r6, r4
 800fb1e:	f43f af50 	beq.w	800f9c2 <_dtoa_r+0x43a>
 800fb22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb26:	4b0a      	ldr	r3, [pc, #40]	@ (800fb50 <_dtoa_r+0x5c8>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f7f0 fd6d 	bl	8000608 <__aeabi_dmul>
 800fb2e:	4b08      	ldr	r3, [pc, #32]	@ (800fb50 <_dtoa_r+0x5c8>)
 800fb30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb34:	2200      	movs	r2, #0
 800fb36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb3a:	f7f0 fd65 	bl	8000608 <__aeabi_dmul>
 800fb3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb42:	e7c4      	b.n	800face <_dtoa_r+0x546>
 800fb44:	08011440 	.word	0x08011440
 800fb48:	08011418 	.word	0x08011418
 800fb4c:	3ff00000 	.word	0x3ff00000
 800fb50:	40240000 	.word	0x40240000
 800fb54:	401c0000 	.word	0x401c0000
 800fb58:	40140000 	.word	0x40140000
 800fb5c:	3fe00000 	.word	0x3fe00000
 800fb60:	4631      	mov	r1, r6
 800fb62:	4628      	mov	r0, r5
 800fb64:	f7f0 fd50 	bl	8000608 <__aeabi_dmul>
 800fb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fb6e:	4656      	mov	r6, sl
 800fb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb74:	f7f0 fff8 	bl	8000b68 <__aeabi_d2iz>
 800fb78:	4605      	mov	r5, r0
 800fb7a:	f7f0 fcdb 	bl	8000534 <__aeabi_i2d>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb86:	f7f0 fb87 	bl	8000298 <__aeabi_dsub>
 800fb8a:	3530      	adds	r5, #48	@ 0x30
 800fb8c:	f806 5b01 	strb.w	r5, [r6], #1
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	42a6      	cmp	r6, r4
 800fb96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb9a:	f04f 0200 	mov.w	r2, #0
 800fb9e:	d124      	bne.n	800fbea <_dtoa_r+0x662>
 800fba0:	4bac      	ldr	r3, [pc, #688]	@ (800fe54 <_dtoa_r+0x8cc>)
 800fba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fba6:	f7f0 fb79 	bl	800029c <__adddf3>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbb2:	f7f0 ffb9 	bl	8000b28 <__aeabi_dcmpgt>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d145      	bne.n	800fc46 <_dtoa_r+0x6be>
 800fbba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fbbe:	49a5      	ldr	r1, [pc, #660]	@ (800fe54 <_dtoa_r+0x8cc>)
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	f7f0 fb69 	bl	8000298 <__aeabi_dsub>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbce:	f7f0 ff8d 	bl	8000aec <__aeabi_dcmplt>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	f43f aef5 	beq.w	800f9c2 <_dtoa_r+0x43a>
 800fbd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fbda:	1e73      	subs	r3, r6, #1
 800fbdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800fbde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbe2:	2b30      	cmp	r3, #48	@ 0x30
 800fbe4:	d0f8      	beq.n	800fbd8 <_dtoa_r+0x650>
 800fbe6:	9f04      	ldr	r7, [sp, #16]
 800fbe8:	e73e      	b.n	800fa68 <_dtoa_r+0x4e0>
 800fbea:	4b9b      	ldr	r3, [pc, #620]	@ (800fe58 <_dtoa_r+0x8d0>)
 800fbec:	f7f0 fd0c 	bl	8000608 <__aeabi_dmul>
 800fbf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbf4:	e7bc      	b.n	800fb70 <_dtoa_r+0x5e8>
 800fbf6:	d10c      	bne.n	800fc12 <_dtoa_r+0x68a>
 800fbf8:	4b98      	ldr	r3, [pc, #608]	@ (800fe5c <_dtoa_r+0x8d4>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc00:	f7f0 fd02 	bl	8000608 <__aeabi_dmul>
 800fc04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc08:	f7f0 ff84 	bl	8000b14 <__aeabi_dcmpge>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	f000 8157 	beq.w	800fec0 <_dtoa_r+0x938>
 800fc12:	2400      	movs	r4, #0
 800fc14:	4625      	mov	r5, r4
 800fc16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc18:	43db      	mvns	r3, r3
 800fc1a:	9304      	str	r3, [sp, #16]
 800fc1c:	4656      	mov	r6, sl
 800fc1e:	2700      	movs	r7, #0
 800fc20:	4621      	mov	r1, r4
 800fc22:	4658      	mov	r0, fp
 800fc24:	f000 fbb4 	bl	8010390 <_Bfree>
 800fc28:	2d00      	cmp	r5, #0
 800fc2a:	d0dc      	beq.n	800fbe6 <_dtoa_r+0x65e>
 800fc2c:	b12f      	cbz	r7, 800fc3a <_dtoa_r+0x6b2>
 800fc2e:	42af      	cmp	r7, r5
 800fc30:	d003      	beq.n	800fc3a <_dtoa_r+0x6b2>
 800fc32:	4639      	mov	r1, r7
 800fc34:	4658      	mov	r0, fp
 800fc36:	f000 fbab 	bl	8010390 <_Bfree>
 800fc3a:	4629      	mov	r1, r5
 800fc3c:	4658      	mov	r0, fp
 800fc3e:	f000 fba7 	bl	8010390 <_Bfree>
 800fc42:	e7d0      	b.n	800fbe6 <_dtoa_r+0x65e>
 800fc44:	9704      	str	r7, [sp, #16]
 800fc46:	4633      	mov	r3, r6
 800fc48:	461e      	mov	r6, r3
 800fc4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc4e:	2a39      	cmp	r2, #57	@ 0x39
 800fc50:	d107      	bne.n	800fc62 <_dtoa_r+0x6da>
 800fc52:	459a      	cmp	sl, r3
 800fc54:	d1f8      	bne.n	800fc48 <_dtoa_r+0x6c0>
 800fc56:	9a04      	ldr	r2, [sp, #16]
 800fc58:	3201      	adds	r2, #1
 800fc5a:	9204      	str	r2, [sp, #16]
 800fc5c:	2230      	movs	r2, #48	@ 0x30
 800fc5e:	f88a 2000 	strb.w	r2, [sl]
 800fc62:	781a      	ldrb	r2, [r3, #0]
 800fc64:	3201      	adds	r2, #1
 800fc66:	701a      	strb	r2, [r3, #0]
 800fc68:	e7bd      	b.n	800fbe6 <_dtoa_r+0x65e>
 800fc6a:	4b7b      	ldr	r3, [pc, #492]	@ (800fe58 <_dtoa_r+0x8d0>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f7f0 fccb 	bl	8000608 <__aeabi_dmul>
 800fc72:	2200      	movs	r2, #0
 800fc74:	2300      	movs	r3, #0
 800fc76:	4604      	mov	r4, r0
 800fc78:	460d      	mov	r5, r1
 800fc7a:	f7f0 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	f43f aebb 	beq.w	800f9fa <_dtoa_r+0x472>
 800fc84:	e6f0      	b.n	800fa68 <_dtoa_r+0x4e0>
 800fc86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc88:	2a00      	cmp	r2, #0
 800fc8a:	f000 80db 	beq.w	800fe44 <_dtoa_r+0x8bc>
 800fc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc90:	2a01      	cmp	r2, #1
 800fc92:	f300 80bf 	bgt.w	800fe14 <_dtoa_r+0x88c>
 800fc96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fc98:	2a00      	cmp	r2, #0
 800fc9a:	f000 80b7 	beq.w	800fe0c <_dtoa_r+0x884>
 800fc9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fca2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fca4:	4646      	mov	r6, r8
 800fca6:	9a08      	ldr	r2, [sp, #32]
 800fca8:	2101      	movs	r1, #1
 800fcaa:	441a      	add	r2, r3
 800fcac:	4658      	mov	r0, fp
 800fcae:	4498      	add	r8, r3
 800fcb0:	9208      	str	r2, [sp, #32]
 800fcb2:	f000 fc21 	bl	80104f8 <__i2b>
 800fcb6:	4605      	mov	r5, r0
 800fcb8:	b15e      	cbz	r6, 800fcd2 <_dtoa_r+0x74a>
 800fcba:	9b08      	ldr	r3, [sp, #32]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	dd08      	ble.n	800fcd2 <_dtoa_r+0x74a>
 800fcc0:	42b3      	cmp	r3, r6
 800fcc2:	9a08      	ldr	r2, [sp, #32]
 800fcc4:	bfa8      	it	ge
 800fcc6:	4633      	movge	r3, r6
 800fcc8:	eba8 0803 	sub.w	r8, r8, r3
 800fccc:	1af6      	subs	r6, r6, r3
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	9308      	str	r3, [sp, #32]
 800fcd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcd4:	b1f3      	cbz	r3, 800fd14 <_dtoa_r+0x78c>
 800fcd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 80b7 	beq.w	800fe4c <_dtoa_r+0x8c4>
 800fcde:	b18c      	cbz	r4, 800fd04 <_dtoa_r+0x77c>
 800fce0:	4629      	mov	r1, r5
 800fce2:	4622      	mov	r2, r4
 800fce4:	4658      	mov	r0, fp
 800fce6:	f000 fcc7 	bl	8010678 <__pow5mult>
 800fcea:	464a      	mov	r2, r9
 800fcec:	4601      	mov	r1, r0
 800fcee:	4605      	mov	r5, r0
 800fcf0:	4658      	mov	r0, fp
 800fcf2:	f000 fc17 	bl	8010524 <__multiply>
 800fcf6:	4649      	mov	r1, r9
 800fcf8:	9004      	str	r0, [sp, #16]
 800fcfa:	4658      	mov	r0, fp
 800fcfc:	f000 fb48 	bl	8010390 <_Bfree>
 800fd00:	9b04      	ldr	r3, [sp, #16]
 800fd02:	4699      	mov	r9, r3
 800fd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd06:	1b1a      	subs	r2, r3, r4
 800fd08:	d004      	beq.n	800fd14 <_dtoa_r+0x78c>
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	4658      	mov	r0, fp
 800fd0e:	f000 fcb3 	bl	8010678 <__pow5mult>
 800fd12:	4681      	mov	r9, r0
 800fd14:	2101      	movs	r1, #1
 800fd16:	4658      	mov	r0, fp
 800fd18:	f000 fbee 	bl	80104f8 <__i2b>
 800fd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd1e:	4604      	mov	r4, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 81cf 	beq.w	80100c4 <_dtoa_r+0xb3c>
 800fd26:	461a      	mov	r2, r3
 800fd28:	4601      	mov	r1, r0
 800fd2a:	4658      	mov	r0, fp
 800fd2c:	f000 fca4 	bl	8010678 <__pow5mult>
 800fd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	4604      	mov	r4, r0
 800fd36:	f300 8095 	bgt.w	800fe64 <_dtoa_r+0x8dc>
 800fd3a:	9b02      	ldr	r3, [sp, #8]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f040 8087 	bne.w	800fe50 <_dtoa_r+0x8c8>
 800fd42:	9b03      	ldr	r3, [sp, #12]
 800fd44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f040 8089 	bne.w	800fe60 <_dtoa_r+0x8d8>
 800fd4e:	9b03      	ldr	r3, [sp, #12]
 800fd50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd54:	0d1b      	lsrs	r3, r3, #20
 800fd56:	051b      	lsls	r3, r3, #20
 800fd58:	b12b      	cbz	r3, 800fd66 <_dtoa_r+0x7de>
 800fd5a:	9b08      	ldr	r3, [sp, #32]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	9308      	str	r3, [sp, #32]
 800fd60:	f108 0801 	add.w	r8, r8, #1
 800fd64:	2301      	movs	r3, #1
 800fd66:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f000 81b0 	beq.w	80100d0 <_dtoa_r+0xb48>
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd76:	6918      	ldr	r0, [r3, #16]
 800fd78:	f000 fb72 	bl	8010460 <__hi0bits>
 800fd7c:	f1c0 0020 	rsb	r0, r0, #32
 800fd80:	9b08      	ldr	r3, [sp, #32]
 800fd82:	4418      	add	r0, r3
 800fd84:	f010 001f 	ands.w	r0, r0, #31
 800fd88:	d077      	beq.n	800fe7a <_dtoa_r+0x8f2>
 800fd8a:	f1c0 0320 	rsb	r3, r0, #32
 800fd8e:	2b04      	cmp	r3, #4
 800fd90:	dd6b      	ble.n	800fe6a <_dtoa_r+0x8e2>
 800fd92:	9b08      	ldr	r3, [sp, #32]
 800fd94:	f1c0 001c 	rsb	r0, r0, #28
 800fd98:	4403      	add	r3, r0
 800fd9a:	4480      	add	r8, r0
 800fd9c:	4406      	add	r6, r0
 800fd9e:	9308      	str	r3, [sp, #32]
 800fda0:	f1b8 0f00 	cmp.w	r8, #0
 800fda4:	dd05      	ble.n	800fdb2 <_dtoa_r+0x82a>
 800fda6:	4649      	mov	r1, r9
 800fda8:	4642      	mov	r2, r8
 800fdaa:	4658      	mov	r0, fp
 800fdac:	f000 fcbe 	bl	801072c <__lshift>
 800fdb0:	4681      	mov	r9, r0
 800fdb2:	9b08      	ldr	r3, [sp, #32]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dd05      	ble.n	800fdc4 <_dtoa_r+0x83c>
 800fdb8:	4621      	mov	r1, r4
 800fdba:	461a      	mov	r2, r3
 800fdbc:	4658      	mov	r0, fp
 800fdbe:	f000 fcb5 	bl	801072c <__lshift>
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d059      	beq.n	800fe7e <_dtoa_r+0x8f6>
 800fdca:	4621      	mov	r1, r4
 800fdcc:	4648      	mov	r0, r9
 800fdce:	f000 fd19 	bl	8010804 <__mcmp>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	da53      	bge.n	800fe7e <_dtoa_r+0x8f6>
 800fdd6:	1e7b      	subs	r3, r7, #1
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	4649      	mov	r1, r9
 800fddc:	2300      	movs	r3, #0
 800fdde:	220a      	movs	r2, #10
 800fde0:	4658      	mov	r0, fp
 800fde2:	f000 faf7 	bl	80103d4 <__multadd>
 800fde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fde8:	4681      	mov	r9, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 8172 	beq.w	80100d4 <_dtoa_r+0xb4c>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	220a      	movs	r2, #10
 800fdf6:	4658      	mov	r0, fp
 800fdf8:	f000 faec 	bl	80103d4 <__multadd>
 800fdfc:	9b00      	ldr	r3, [sp, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	4605      	mov	r5, r0
 800fe02:	dc67      	bgt.n	800fed4 <_dtoa_r+0x94c>
 800fe04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	dc41      	bgt.n	800fe8e <_dtoa_r+0x906>
 800fe0a:	e063      	b.n	800fed4 <_dtoa_r+0x94c>
 800fe0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe12:	e746      	b.n	800fca2 <_dtoa_r+0x71a>
 800fe14:	9b07      	ldr	r3, [sp, #28]
 800fe16:	1e5c      	subs	r4, r3, #1
 800fe18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe1a:	42a3      	cmp	r3, r4
 800fe1c:	bfbf      	itttt	lt
 800fe1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fe20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fe22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fe24:	1ae3      	sublt	r3, r4, r3
 800fe26:	bfb4      	ite	lt
 800fe28:	18d2      	addlt	r2, r2, r3
 800fe2a:	1b1c      	subge	r4, r3, r4
 800fe2c:	9b07      	ldr	r3, [sp, #28]
 800fe2e:	bfbc      	itt	lt
 800fe30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fe32:	2400      	movlt	r4, #0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	bfb5      	itete	lt
 800fe38:	eba8 0603 	sublt.w	r6, r8, r3
 800fe3c:	9b07      	ldrge	r3, [sp, #28]
 800fe3e:	2300      	movlt	r3, #0
 800fe40:	4646      	movge	r6, r8
 800fe42:	e730      	b.n	800fca6 <_dtoa_r+0x71e>
 800fe44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fe48:	4646      	mov	r6, r8
 800fe4a:	e735      	b.n	800fcb8 <_dtoa_r+0x730>
 800fe4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe4e:	e75c      	b.n	800fd0a <_dtoa_r+0x782>
 800fe50:	2300      	movs	r3, #0
 800fe52:	e788      	b.n	800fd66 <_dtoa_r+0x7de>
 800fe54:	3fe00000 	.word	0x3fe00000
 800fe58:	40240000 	.word	0x40240000
 800fe5c:	40140000 	.word	0x40140000
 800fe60:	9b02      	ldr	r3, [sp, #8]
 800fe62:	e780      	b.n	800fd66 <_dtoa_r+0x7de>
 800fe64:	2300      	movs	r3, #0
 800fe66:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe68:	e782      	b.n	800fd70 <_dtoa_r+0x7e8>
 800fe6a:	d099      	beq.n	800fda0 <_dtoa_r+0x818>
 800fe6c:	9a08      	ldr	r2, [sp, #32]
 800fe6e:	331c      	adds	r3, #28
 800fe70:	441a      	add	r2, r3
 800fe72:	4498      	add	r8, r3
 800fe74:	441e      	add	r6, r3
 800fe76:	9208      	str	r2, [sp, #32]
 800fe78:	e792      	b.n	800fda0 <_dtoa_r+0x818>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	e7f6      	b.n	800fe6c <_dtoa_r+0x8e4>
 800fe7e:	9b07      	ldr	r3, [sp, #28]
 800fe80:	9704      	str	r7, [sp, #16]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	dc20      	bgt.n	800fec8 <_dtoa_r+0x940>
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	dd1e      	ble.n	800fecc <_dtoa_r+0x944>
 800fe8e:	9b00      	ldr	r3, [sp, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f47f aec0 	bne.w	800fc16 <_dtoa_r+0x68e>
 800fe96:	4621      	mov	r1, r4
 800fe98:	2205      	movs	r2, #5
 800fe9a:	4658      	mov	r0, fp
 800fe9c:	f000 fa9a 	bl	80103d4 <__multadd>
 800fea0:	4601      	mov	r1, r0
 800fea2:	4604      	mov	r4, r0
 800fea4:	4648      	mov	r0, r9
 800fea6:	f000 fcad 	bl	8010804 <__mcmp>
 800feaa:	2800      	cmp	r0, #0
 800feac:	f77f aeb3 	ble.w	800fc16 <_dtoa_r+0x68e>
 800feb0:	4656      	mov	r6, sl
 800feb2:	2331      	movs	r3, #49	@ 0x31
 800feb4:	f806 3b01 	strb.w	r3, [r6], #1
 800feb8:	9b04      	ldr	r3, [sp, #16]
 800feba:	3301      	adds	r3, #1
 800febc:	9304      	str	r3, [sp, #16]
 800febe:	e6ae      	b.n	800fc1e <_dtoa_r+0x696>
 800fec0:	9c07      	ldr	r4, [sp, #28]
 800fec2:	9704      	str	r7, [sp, #16]
 800fec4:	4625      	mov	r5, r4
 800fec6:	e7f3      	b.n	800feb0 <_dtoa_r+0x928>
 800fec8:	9b07      	ldr	r3, [sp, #28]
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	f000 8104 	beq.w	80100dc <_dtoa_r+0xb54>
 800fed4:	2e00      	cmp	r6, #0
 800fed6:	dd05      	ble.n	800fee4 <_dtoa_r+0x95c>
 800fed8:	4629      	mov	r1, r5
 800feda:	4632      	mov	r2, r6
 800fedc:	4658      	mov	r0, fp
 800fede:	f000 fc25 	bl	801072c <__lshift>
 800fee2:	4605      	mov	r5, r0
 800fee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d05a      	beq.n	800ffa0 <_dtoa_r+0xa18>
 800feea:	6869      	ldr	r1, [r5, #4]
 800feec:	4658      	mov	r0, fp
 800feee:	f000 fa0f 	bl	8010310 <_Balloc>
 800fef2:	4606      	mov	r6, r0
 800fef4:	b928      	cbnz	r0, 800ff02 <_dtoa_r+0x97a>
 800fef6:	4b84      	ldr	r3, [pc, #528]	@ (8010108 <_dtoa_r+0xb80>)
 800fef8:	4602      	mov	r2, r0
 800fefa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fefe:	f7ff bb5a 	b.w	800f5b6 <_dtoa_r+0x2e>
 800ff02:	692a      	ldr	r2, [r5, #16]
 800ff04:	3202      	adds	r2, #2
 800ff06:	0092      	lsls	r2, r2, #2
 800ff08:	f105 010c 	add.w	r1, r5, #12
 800ff0c:	300c      	adds	r0, #12
 800ff0e:	f001 f803 	bl	8010f18 <memcpy>
 800ff12:	2201      	movs	r2, #1
 800ff14:	4631      	mov	r1, r6
 800ff16:	4658      	mov	r0, fp
 800ff18:	f000 fc08 	bl	801072c <__lshift>
 800ff1c:	f10a 0301 	add.w	r3, sl, #1
 800ff20:	9307      	str	r3, [sp, #28]
 800ff22:	9b00      	ldr	r3, [sp, #0]
 800ff24:	4453      	add	r3, sl
 800ff26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff28:	9b02      	ldr	r3, [sp, #8]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	462f      	mov	r7, r5
 800ff30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff32:	4605      	mov	r5, r0
 800ff34:	9b07      	ldr	r3, [sp, #28]
 800ff36:	4621      	mov	r1, r4
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	4648      	mov	r0, r9
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	f7ff fa98 	bl	800f472 <quorem>
 800ff42:	4639      	mov	r1, r7
 800ff44:	9002      	str	r0, [sp, #8]
 800ff46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ff4a:	4648      	mov	r0, r9
 800ff4c:	f000 fc5a 	bl	8010804 <__mcmp>
 800ff50:	462a      	mov	r2, r5
 800ff52:	9008      	str	r0, [sp, #32]
 800ff54:	4621      	mov	r1, r4
 800ff56:	4658      	mov	r0, fp
 800ff58:	f000 fc70 	bl	801083c <__mdiff>
 800ff5c:	68c2      	ldr	r2, [r0, #12]
 800ff5e:	4606      	mov	r6, r0
 800ff60:	bb02      	cbnz	r2, 800ffa4 <_dtoa_r+0xa1c>
 800ff62:	4601      	mov	r1, r0
 800ff64:	4648      	mov	r0, r9
 800ff66:	f000 fc4d 	bl	8010804 <__mcmp>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	4631      	mov	r1, r6
 800ff6e:	4658      	mov	r0, fp
 800ff70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff72:	f000 fa0d 	bl	8010390 <_Bfree>
 800ff76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff7a:	9e07      	ldr	r6, [sp, #28]
 800ff7c:	ea43 0102 	orr.w	r1, r3, r2
 800ff80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff82:	4319      	orrs	r1, r3
 800ff84:	d110      	bne.n	800ffa8 <_dtoa_r+0xa20>
 800ff86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ff8a:	d029      	beq.n	800ffe0 <_dtoa_r+0xa58>
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	dd02      	ble.n	800ff98 <_dtoa_r+0xa10>
 800ff92:	9b02      	ldr	r3, [sp, #8]
 800ff94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ff98:	9b00      	ldr	r3, [sp, #0]
 800ff9a:	f883 8000 	strb.w	r8, [r3]
 800ff9e:	e63f      	b.n	800fc20 <_dtoa_r+0x698>
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	e7bb      	b.n	800ff1c <_dtoa_r+0x994>
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	e7e1      	b.n	800ff6c <_dtoa_r+0x9e4>
 800ffa8:	9b08      	ldr	r3, [sp, #32]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	db04      	blt.n	800ffb8 <_dtoa_r+0xa30>
 800ffae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffb0:	430b      	orrs	r3, r1
 800ffb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ffb4:	430b      	orrs	r3, r1
 800ffb6:	d120      	bne.n	800fffa <_dtoa_r+0xa72>
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	dded      	ble.n	800ff98 <_dtoa_r+0xa10>
 800ffbc:	4649      	mov	r1, r9
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	4658      	mov	r0, fp
 800ffc2:	f000 fbb3 	bl	801072c <__lshift>
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4681      	mov	r9, r0
 800ffca:	f000 fc1b 	bl	8010804 <__mcmp>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	dc03      	bgt.n	800ffda <_dtoa_r+0xa52>
 800ffd2:	d1e1      	bne.n	800ff98 <_dtoa_r+0xa10>
 800ffd4:	f018 0f01 	tst.w	r8, #1
 800ffd8:	d0de      	beq.n	800ff98 <_dtoa_r+0xa10>
 800ffda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffde:	d1d8      	bne.n	800ff92 <_dtoa_r+0xa0a>
 800ffe0:	9a00      	ldr	r2, [sp, #0]
 800ffe2:	2339      	movs	r3, #57	@ 0x39
 800ffe4:	7013      	strb	r3, [r2, #0]
 800ffe6:	4633      	mov	r3, r6
 800ffe8:	461e      	mov	r6, r3
 800ffea:	3b01      	subs	r3, #1
 800ffec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fff0:	2a39      	cmp	r2, #57	@ 0x39
 800fff2:	d052      	beq.n	801009a <_dtoa_r+0xb12>
 800fff4:	3201      	adds	r2, #1
 800fff6:	701a      	strb	r2, [r3, #0]
 800fff8:	e612      	b.n	800fc20 <_dtoa_r+0x698>
 800fffa:	2a00      	cmp	r2, #0
 800fffc:	dd07      	ble.n	801000e <_dtoa_r+0xa86>
 800fffe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010002:	d0ed      	beq.n	800ffe0 <_dtoa_r+0xa58>
 8010004:	9a00      	ldr	r2, [sp, #0]
 8010006:	f108 0301 	add.w	r3, r8, #1
 801000a:	7013      	strb	r3, [r2, #0]
 801000c:	e608      	b.n	800fc20 <_dtoa_r+0x698>
 801000e:	9b07      	ldr	r3, [sp, #28]
 8010010:	9a07      	ldr	r2, [sp, #28]
 8010012:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010018:	4293      	cmp	r3, r2
 801001a:	d028      	beq.n	801006e <_dtoa_r+0xae6>
 801001c:	4649      	mov	r1, r9
 801001e:	2300      	movs	r3, #0
 8010020:	220a      	movs	r2, #10
 8010022:	4658      	mov	r0, fp
 8010024:	f000 f9d6 	bl	80103d4 <__multadd>
 8010028:	42af      	cmp	r7, r5
 801002a:	4681      	mov	r9, r0
 801002c:	f04f 0300 	mov.w	r3, #0
 8010030:	f04f 020a 	mov.w	r2, #10
 8010034:	4639      	mov	r1, r7
 8010036:	4658      	mov	r0, fp
 8010038:	d107      	bne.n	801004a <_dtoa_r+0xac2>
 801003a:	f000 f9cb 	bl	80103d4 <__multadd>
 801003e:	4607      	mov	r7, r0
 8010040:	4605      	mov	r5, r0
 8010042:	9b07      	ldr	r3, [sp, #28]
 8010044:	3301      	adds	r3, #1
 8010046:	9307      	str	r3, [sp, #28]
 8010048:	e774      	b.n	800ff34 <_dtoa_r+0x9ac>
 801004a:	f000 f9c3 	bl	80103d4 <__multadd>
 801004e:	4629      	mov	r1, r5
 8010050:	4607      	mov	r7, r0
 8010052:	2300      	movs	r3, #0
 8010054:	220a      	movs	r2, #10
 8010056:	4658      	mov	r0, fp
 8010058:	f000 f9bc 	bl	80103d4 <__multadd>
 801005c:	4605      	mov	r5, r0
 801005e:	e7f0      	b.n	8010042 <_dtoa_r+0xaba>
 8010060:	9b00      	ldr	r3, [sp, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	bfcc      	ite	gt
 8010066:	461e      	movgt	r6, r3
 8010068:	2601      	movle	r6, #1
 801006a:	4456      	add	r6, sl
 801006c:	2700      	movs	r7, #0
 801006e:	4649      	mov	r1, r9
 8010070:	2201      	movs	r2, #1
 8010072:	4658      	mov	r0, fp
 8010074:	f000 fb5a 	bl	801072c <__lshift>
 8010078:	4621      	mov	r1, r4
 801007a:	4681      	mov	r9, r0
 801007c:	f000 fbc2 	bl	8010804 <__mcmp>
 8010080:	2800      	cmp	r0, #0
 8010082:	dcb0      	bgt.n	800ffe6 <_dtoa_r+0xa5e>
 8010084:	d102      	bne.n	801008c <_dtoa_r+0xb04>
 8010086:	f018 0f01 	tst.w	r8, #1
 801008a:	d1ac      	bne.n	800ffe6 <_dtoa_r+0xa5e>
 801008c:	4633      	mov	r3, r6
 801008e:	461e      	mov	r6, r3
 8010090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010094:	2a30      	cmp	r2, #48	@ 0x30
 8010096:	d0fa      	beq.n	801008e <_dtoa_r+0xb06>
 8010098:	e5c2      	b.n	800fc20 <_dtoa_r+0x698>
 801009a:	459a      	cmp	sl, r3
 801009c:	d1a4      	bne.n	800ffe8 <_dtoa_r+0xa60>
 801009e:	9b04      	ldr	r3, [sp, #16]
 80100a0:	3301      	adds	r3, #1
 80100a2:	9304      	str	r3, [sp, #16]
 80100a4:	2331      	movs	r3, #49	@ 0x31
 80100a6:	f88a 3000 	strb.w	r3, [sl]
 80100aa:	e5b9      	b.n	800fc20 <_dtoa_r+0x698>
 80100ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801010c <_dtoa_r+0xb84>
 80100b2:	b11b      	cbz	r3, 80100bc <_dtoa_r+0xb34>
 80100b4:	f10a 0308 	add.w	r3, sl, #8
 80100b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80100ba:	6013      	str	r3, [r2, #0]
 80100bc:	4650      	mov	r0, sl
 80100be:	b019      	add	sp, #100	@ 0x64
 80100c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	f77f ae37 	ble.w	800fd3a <_dtoa_r+0x7b2>
 80100cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80100d0:	2001      	movs	r0, #1
 80100d2:	e655      	b.n	800fd80 <_dtoa_r+0x7f8>
 80100d4:	9b00      	ldr	r3, [sp, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f77f aed6 	ble.w	800fe88 <_dtoa_r+0x900>
 80100dc:	4656      	mov	r6, sl
 80100de:	4621      	mov	r1, r4
 80100e0:	4648      	mov	r0, r9
 80100e2:	f7ff f9c6 	bl	800f472 <quorem>
 80100e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80100ea:	f806 8b01 	strb.w	r8, [r6], #1
 80100ee:	9b00      	ldr	r3, [sp, #0]
 80100f0:	eba6 020a 	sub.w	r2, r6, sl
 80100f4:	4293      	cmp	r3, r2
 80100f6:	ddb3      	ble.n	8010060 <_dtoa_r+0xad8>
 80100f8:	4649      	mov	r1, r9
 80100fa:	2300      	movs	r3, #0
 80100fc:	220a      	movs	r2, #10
 80100fe:	4658      	mov	r0, fp
 8010100:	f000 f968 	bl	80103d4 <__multadd>
 8010104:	4681      	mov	r9, r0
 8010106:	e7ea      	b.n	80100de <_dtoa_r+0xb56>
 8010108:	080113a0 	.word	0x080113a0
 801010c:	08011324 	.word	0x08011324

08010110 <_free_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4605      	mov	r5, r0
 8010114:	2900      	cmp	r1, #0
 8010116:	d041      	beq.n	801019c <_free_r+0x8c>
 8010118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801011c:	1f0c      	subs	r4, r1, #4
 801011e:	2b00      	cmp	r3, #0
 8010120:	bfb8      	it	lt
 8010122:	18e4      	addlt	r4, r4, r3
 8010124:	f000 f8e8 	bl	80102f8 <__malloc_lock>
 8010128:	4a1d      	ldr	r2, [pc, #116]	@ (80101a0 <_free_r+0x90>)
 801012a:	6813      	ldr	r3, [r2, #0]
 801012c:	b933      	cbnz	r3, 801013c <_free_r+0x2c>
 801012e:	6063      	str	r3, [r4, #4]
 8010130:	6014      	str	r4, [r2, #0]
 8010132:	4628      	mov	r0, r5
 8010134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010138:	f000 b8e4 	b.w	8010304 <__malloc_unlock>
 801013c:	42a3      	cmp	r3, r4
 801013e:	d908      	bls.n	8010152 <_free_r+0x42>
 8010140:	6820      	ldr	r0, [r4, #0]
 8010142:	1821      	adds	r1, r4, r0
 8010144:	428b      	cmp	r3, r1
 8010146:	bf01      	itttt	eq
 8010148:	6819      	ldreq	r1, [r3, #0]
 801014a:	685b      	ldreq	r3, [r3, #4]
 801014c:	1809      	addeq	r1, r1, r0
 801014e:	6021      	streq	r1, [r4, #0]
 8010150:	e7ed      	b.n	801012e <_free_r+0x1e>
 8010152:	461a      	mov	r2, r3
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	b10b      	cbz	r3, 801015c <_free_r+0x4c>
 8010158:	42a3      	cmp	r3, r4
 801015a:	d9fa      	bls.n	8010152 <_free_r+0x42>
 801015c:	6811      	ldr	r1, [r2, #0]
 801015e:	1850      	adds	r0, r2, r1
 8010160:	42a0      	cmp	r0, r4
 8010162:	d10b      	bne.n	801017c <_free_r+0x6c>
 8010164:	6820      	ldr	r0, [r4, #0]
 8010166:	4401      	add	r1, r0
 8010168:	1850      	adds	r0, r2, r1
 801016a:	4283      	cmp	r3, r0
 801016c:	6011      	str	r1, [r2, #0]
 801016e:	d1e0      	bne.n	8010132 <_free_r+0x22>
 8010170:	6818      	ldr	r0, [r3, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	6053      	str	r3, [r2, #4]
 8010176:	4408      	add	r0, r1
 8010178:	6010      	str	r0, [r2, #0]
 801017a:	e7da      	b.n	8010132 <_free_r+0x22>
 801017c:	d902      	bls.n	8010184 <_free_r+0x74>
 801017e:	230c      	movs	r3, #12
 8010180:	602b      	str	r3, [r5, #0]
 8010182:	e7d6      	b.n	8010132 <_free_r+0x22>
 8010184:	6820      	ldr	r0, [r4, #0]
 8010186:	1821      	adds	r1, r4, r0
 8010188:	428b      	cmp	r3, r1
 801018a:	bf04      	itt	eq
 801018c:	6819      	ldreq	r1, [r3, #0]
 801018e:	685b      	ldreq	r3, [r3, #4]
 8010190:	6063      	str	r3, [r4, #4]
 8010192:	bf04      	itt	eq
 8010194:	1809      	addeq	r1, r1, r0
 8010196:	6021      	streq	r1, [r4, #0]
 8010198:	6054      	str	r4, [r2, #4]
 801019a:	e7ca      	b.n	8010132 <_free_r+0x22>
 801019c:	bd38      	pop	{r3, r4, r5, pc}
 801019e:	bf00      	nop
 80101a0:	2000226c 	.word	0x2000226c

080101a4 <malloc>:
 80101a4:	4b02      	ldr	r3, [pc, #8]	@ (80101b0 <malloc+0xc>)
 80101a6:	4601      	mov	r1, r0
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f000 b825 	b.w	80101f8 <_malloc_r>
 80101ae:	bf00      	nop
 80101b0:	20000134 	.word	0x20000134

080101b4 <sbrk_aligned>:
 80101b4:	b570      	push	{r4, r5, r6, lr}
 80101b6:	4e0f      	ldr	r6, [pc, #60]	@ (80101f4 <sbrk_aligned+0x40>)
 80101b8:	460c      	mov	r4, r1
 80101ba:	6831      	ldr	r1, [r6, #0]
 80101bc:	4605      	mov	r5, r0
 80101be:	b911      	cbnz	r1, 80101c6 <sbrk_aligned+0x12>
 80101c0:	f000 fe9a 	bl	8010ef8 <_sbrk_r>
 80101c4:	6030      	str	r0, [r6, #0]
 80101c6:	4621      	mov	r1, r4
 80101c8:	4628      	mov	r0, r5
 80101ca:	f000 fe95 	bl	8010ef8 <_sbrk_r>
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	d103      	bne.n	80101da <sbrk_aligned+0x26>
 80101d2:	f04f 34ff 	mov.w	r4, #4294967295
 80101d6:	4620      	mov	r0, r4
 80101d8:	bd70      	pop	{r4, r5, r6, pc}
 80101da:	1cc4      	adds	r4, r0, #3
 80101dc:	f024 0403 	bic.w	r4, r4, #3
 80101e0:	42a0      	cmp	r0, r4
 80101e2:	d0f8      	beq.n	80101d6 <sbrk_aligned+0x22>
 80101e4:	1a21      	subs	r1, r4, r0
 80101e6:	4628      	mov	r0, r5
 80101e8:	f000 fe86 	bl	8010ef8 <_sbrk_r>
 80101ec:	3001      	adds	r0, #1
 80101ee:	d1f2      	bne.n	80101d6 <sbrk_aligned+0x22>
 80101f0:	e7ef      	b.n	80101d2 <sbrk_aligned+0x1e>
 80101f2:	bf00      	nop
 80101f4:	20002268 	.word	0x20002268

080101f8 <_malloc_r>:
 80101f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101fc:	1ccd      	adds	r5, r1, #3
 80101fe:	f025 0503 	bic.w	r5, r5, #3
 8010202:	3508      	adds	r5, #8
 8010204:	2d0c      	cmp	r5, #12
 8010206:	bf38      	it	cc
 8010208:	250c      	movcc	r5, #12
 801020a:	2d00      	cmp	r5, #0
 801020c:	4606      	mov	r6, r0
 801020e:	db01      	blt.n	8010214 <_malloc_r+0x1c>
 8010210:	42a9      	cmp	r1, r5
 8010212:	d904      	bls.n	801021e <_malloc_r+0x26>
 8010214:	230c      	movs	r3, #12
 8010216:	6033      	str	r3, [r6, #0]
 8010218:	2000      	movs	r0, #0
 801021a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801021e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80102f4 <_malloc_r+0xfc>
 8010222:	f000 f869 	bl	80102f8 <__malloc_lock>
 8010226:	f8d8 3000 	ldr.w	r3, [r8]
 801022a:	461c      	mov	r4, r3
 801022c:	bb44      	cbnz	r4, 8010280 <_malloc_r+0x88>
 801022e:	4629      	mov	r1, r5
 8010230:	4630      	mov	r0, r6
 8010232:	f7ff ffbf 	bl	80101b4 <sbrk_aligned>
 8010236:	1c43      	adds	r3, r0, #1
 8010238:	4604      	mov	r4, r0
 801023a:	d158      	bne.n	80102ee <_malloc_r+0xf6>
 801023c:	f8d8 4000 	ldr.w	r4, [r8]
 8010240:	4627      	mov	r7, r4
 8010242:	2f00      	cmp	r7, #0
 8010244:	d143      	bne.n	80102ce <_malloc_r+0xd6>
 8010246:	2c00      	cmp	r4, #0
 8010248:	d04b      	beq.n	80102e2 <_malloc_r+0xea>
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	4639      	mov	r1, r7
 801024e:	4630      	mov	r0, r6
 8010250:	eb04 0903 	add.w	r9, r4, r3
 8010254:	f000 fe50 	bl	8010ef8 <_sbrk_r>
 8010258:	4581      	cmp	r9, r0
 801025a:	d142      	bne.n	80102e2 <_malloc_r+0xea>
 801025c:	6821      	ldr	r1, [r4, #0]
 801025e:	1a6d      	subs	r5, r5, r1
 8010260:	4629      	mov	r1, r5
 8010262:	4630      	mov	r0, r6
 8010264:	f7ff ffa6 	bl	80101b4 <sbrk_aligned>
 8010268:	3001      	adds	r0, #1
 801026a:	d03a      	beq.n	80102e2 <_malloc_r+0xea>
 801026c:	6823      	ldr	r3, [r4, #0]
 801026e:	442b      	add	r3, r5
 8010270:	6023      	str	r3, [r4, #0]
 8010272:	f8d8 3000 	ldr.w	r3, [r8]
 8010276:	685a      	ldr	r2, [r3, #4]
 8010278:	bb62      	cbnz	r2, 80102d4 <_malloc_r+0xdc>
 801027a:	f8c8 7000 	str.w	r7, [r8]
 801027e:	e00f      	b.n	80102a0 <_malloc_r+0xa8>
 8010280:	6822      	ldr	r2, [r4, #0]
 8010282:	1b52      	subs	r2, r2, r5
 8010284:	d420      	bmi.n	80102c8 <_malloc_r+0xd0>
 8010286:	2a0b      	cmp	r2, #11
 8010288:	d917      	bls.n	80102ba <_malloc_r+0xc2>
 801028a:	1961      	adds	r1, r4, r5
 801028c:	42a3      	cmp	r3, r4
 801028e:	6025      	str	r5, [r4, #0]
 8010290:	bf18      	it	ne
 8010292:	6059      	strne	r1, [r3, #4]
 8010294:	6863      	ldr	r3, [r4, #4]
 8010296:	bf08      	it	eq
 8010298:	f8c8 1000 	streq.w	r1, [r8]
 801029c:	5162      	str	r2, [r4, r5]
 801029e:	604b      	str	r3, [r1, #4]
 80102a0:	4630      	mov	r0, r6
 80102a2:	f000 f82f 	bl	8010304 <__malloc_unlock>
 80102a6:	f104 000b 	add.w	r0, r4, #11
 80102aa:	1d23      	adds	r3, r4, #4
 80102ac:	f020 0007 	bic.w	r0, r0, #7
 80102b0:	1ac2      	subs	r2, r0, r3
 80102b2:	bf1c      	itt	ne
 80102b4:	1a1b      	subne	r3, r3, r0
 80102b6:	50a3      	strne	r3, [r4, r2]
 80102b8:	e7af      	b.n	801021a <_malloc_r+0x22>
 80102ba:	6862      	ldr	r2, [r4, #4]
 80102bc:	42a3      	cmp	r3, r4
 80102be:	bf0c      	ite	eq
 80102c0:	f8c8 2000 	streq.w	r2, [r8]
 80102c4:	605a      	strne	r2, [r3, #4]
 80102c6:	e7eb      	b.n	80102a0 <_malloc_r+0xa8>
 80102c8:	4623      	mov	r3, r4
 80102ca:	6864      	ldr	r4, [r4, #4]
 80102cc:	e7ae      	b.n	801022c <_malloc_r+0x34>
 80102ce:	463c      	mov	r4, r7
 80102d0:	687f      	ldr	r7, [r7, #4]
 80102d2:	e7b6      	b.n	8010242 <_malloc_r+0x4a>
 80102d4:	461a      	mov	r2, r3
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	42a3      	cmp	r3, r4
 80102da:	d1fb      	bne.n	80102d4 <_malloc_r+0xdc>
 80102dc:	2300      	movs	r3, #0
 80102de:	6053      	str	r3, [r2, #4]
 80102e0:	e7de      	b.n	80102a0 <_malloc_r+0xa8>
 80102e2:	230c      	movs	r3, #12
 80102e4:	6033      	str	r3, [r6, #0]
 80102e6:	4630      	mov	r0, r6
 80102e8:	f000 f80c 	bl	8010304 <__malloc_unlock>
 80102ec:	e794      	b.n	8010218 <_malloc_r+0x20>
 80102ee:	6005      	str	r5, [r0, #0]
 80102f0:	e7d6      	b.n	80102a0 <_malloc_r+0xa8>
 80102f2:	bf00      	nop
 80102f4:	2000226c 	.word	0x2000226c

080102f8 <__malloc_lock>:
 80102f8:	4801      	ldr	r0, [pc, #4]	@ (8010300 <__malloc_lock+0x8>)
 80102fa:	f7ff b8b8 	b.w	800f46e <__retarget_lock_acquire_recursive>
 80102fe:	bf00      	nop
 8010300:	20002264 	.word	0x20002264

08010304 <__malloc_unlock>:
 8010304:	4801      	ldr	r0, [pc, #4]	@ (801030c <__malloc_unlock+0x8>)
 8010306:	f7ff b8b3 	b.w	800f470 <__retarget_lock_release_recursive>
 801030a:	bf00      	nop
 801030c:	20002264 	.word	0x20002264

08010310 <_Balloc>:
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	69c6      	ldr	r6, [r0, #28]
 8010314:	4604      	mov	r4, r0
 8010316:	460d      	mov	r5, r1
 8010318:	b976      	cbnz	r6, 8010338 <_Balloc+0x28>
 801031a:	2010      	movs	r0, #16
 801031c:	f7ff ff42 	bl	80101a4 <malloc>
 8010320:	4602      	mov	r2, r0
 8010322:	61e0      	str	r0, [r4, #28]
 8010324:	b920      	cbnz	r0, 8010330 <_Balloc+0x20>
 8010326:	4b18      	ldr	r3, [pc, #96]	@ (8010388 <_Balloc+0x78>)
 8010328:	4818      	ldr	r0, [pc, #96]	@ (801038c <_Balloc+0x7c>)
 801032a:	216b      	movs	r1, #107	@ 0x6b
 801032c:	f000 fe02 	bl	8010f34 <__assert_func>
 8010330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010334:	6006      	str	r6, [r0, #0]
 8010336:	60c6      	str	r6, [r0, #12]
 8010338:	69e6      	ldr	r6, [r4, #28]
 801033a:	68f3      	ldr	r3, [r6, #12]
 801033c:	b183      	cbz	r3, 8010360 <_Balloc+0x50>
 801033e:	69e3      	ldr	r3, [r4, #28]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010346:	b9b8      	cbnz	r0, 8010378 <_Balloc+0x68>
 8010348:	2101      	movs	r1, #1
 801034a:	fa01 f605 	lsl.w	r6, r1, r5
 801034e:	1d72      	adds	r2, r6, #5
 8010350:	0092      	lsls	r2, r2, #2
 8010352:	4620      	mov	r0, r4
 8010354:	f000 fe0c 	bl	8010f70 <_calloc_r>
 8010358:	b160      	cbz	r0, 8010374 <_Balloc+0x64>
 801035a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801035e:	e00e      	b.n	801037e <_Balloc+0x6e>
 8010360:	2221      	movs	r2, #33	@ 0x21
 8010362:	2104      	movs	r1, #4
 8010364:	4620      	mov	r0, r4
 8010366:	f000 fe03 	bl	8010f70 <_calloc_r>
 801036a:	69e3      	ldr	r3, [r4, #28]
 801036c:	60f0      	str	r0, [r6, #12]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1e4      	bne.n	801033e <_Balloc+0x2e>
 8010374:	2000      	movs	r0, #0
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	6802      	ldr	r2, [r0, #0]
 801037a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801037e:	2300      	movs	r3, #0
 8010380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010384:	e7f7      	b.n	8010376 <_Balloc+0x66>
 8010386:	bf00      	nop
 8010388:	08011331 	.word	0x08011331
 801038c:	080113b1 	.word	0x080113b1

08010390 <_Bfree>:
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	69c6      	ldr	r6, [r0, #28]
 8010394:	4605      	mov	r5, r0
 8010396:	460c      	mov	r4, r1
 8010398:	b976      	cbnz	r6, 80103b8 <_Bfree+0x28>
 801039a:	2010      	movs	r0, #16
 801039c:	f7ff ff02 	bl	80101a4 <malloc>
 80103a0:	4602      	mov	r2, r0
 80103a2:	61e8      	str	r0, [r5, #28]
 80103a4:	b920      	cbnz	r0, 80103b0 <_Bfree+0x20>
 80103a6:	4b09      	ldr	r3, [pc, #36]	@ (80103cc <_Bfree+0x3c>)
 80103a8:	4809      	ldr	r0, [pc, #36]	@ (80103d0 <_Bfree+0x40>)
 80103aa:	218f      	movs	r1, #143	@ 0x8f
 80103ac:	f000 fdc2 	bl	8010f34 <__assert_func>
 80103b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103b4:	6006      	str	r6, [r0, #0]
 80103b6:	60c6      	str	r6, [r0, #12]
 80103b8:	b13c      	cbz	r4, 80103ca <_Bfree+0x3a>
 80103ba:	69eb      	ldr	r3, [r5, #28]
 80103bc:	6862      	ldr	r2, [r4, #4]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103c4:	6021      	str	r1, [r4, #0]
 80103c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103ca:	bd70      	pop	{r4, r5, r6, pc}
 80103cc:	08011331 	.word	0x08011331
 80103d0:	080113b1 	.word	0x080113b1

080103d4 <__multadd>:
 80103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	690d      	ldr	r5, [r1, #16]
 80103da:	4607      	mov	r7, r0
 80103dc:	460c      	mov	r4, r1
 80103de:	461e      	mov	r6, r3
 80103e0:	f101 0c14 	add.w	ip, r1, #20
 80103e4:	2000      	movs	r0, #0
 80103e6:	f8dc 3000 	ldr.w	r3, [ip]
 80103ea:	b299      	uxth	r1, r3
 80103ec:	fb02 6101 	mla	r1, r2, r1, r6
 80103f0:	0c1e      	lsrs	r6, r3, #16
 80103f2:	0c0b      	lsrs	r3, r1, #16
 80103f4:	fb02 3306 	mla	r3, r2, r6, r3
 80103f8:	b289      	uxth	r1, r1
 80103fa:	3001      	adds	r0, #1
 80103fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010400:	4285      	cmp	r5, r0
 8010402:	f84c 1b04 	str.w	r1, [ip], #4
 8010406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801040a:	dcec      	bgt.n	80103e6 <__multadd+0x12>
 801040c:	b30e      	cbz	r6, 8010452 <__multadd+0x7e>
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	42ab      	cmp	r3, r5
 8010412:	dc19      	bgt.n	8010448 <__multadd+0x74>
 8010414:	6861      	ldr	r1, [r4, #4]
 8010416:	4638      	mov	r0, r7
 8010418:	3101      	adds	r1, #1
 801041a:	f7ff ff79 	bl	8010310 <_Balloc>
 801041e:	4680      	mov	r8, r0
 8010420:	b928      	cbnz	r0, 801042e <__multadd+0x5a>
 8010422:	4602      	mov	r2, r0
 8010424:	4b0c      	ldr	r3, [pc, #48]	@ (8010458 <__multadd+0x84>)
 8010426:	480d      	ldr	r0, [pc, #52]	@ (801045c <__multadd+0x88>)
 8010428:	21ba      	movs	r1, #186	@ 0xba
 801042a:	f000 fd83 	bl	8010f34 <__assert_func>
 801042e:	6922      	ldr	r2, [r4, #16]
 8010430:	3202      	adds	r2, #2
 8010432:	f104 010c 	add.w	r1, r4, #12
 8010436:	0092      	lsls	r2, r2, #2
 8010438:	300c      	adds	r0, #12
 801043a:	f000 fd6d 	bl	8010f18 <memcpy>
 801043e:	4621      	mov	r1, r4
 8010440:	4638      	mov	r0, r7
 8010442:	f7ff ffa5 	bl	8010390 <_Bfree>
 8010446:	4644      	mov	r4, r8
 8010448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801044c:	3501      	adds	r5, #1
 801044e:	615e      	str	r6, [r3, #20]
 8010450:	6125      	str	r5, [r4, #16]
 8010452:	4620      	mov	r0, r4
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	080113a0 	.word	0x080113a0
 801045c:	080113b1 	.word	0x080113b1

08010460 <__hi0bits>:
 8010460:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010464:	4603      	mov	r3, r0
 8010466:	bf36      	itet	cc
 8010468:	0403      	lslcc	r3, r0, #16
 801046a:	2000      	movcs	r0, #0
 801046c:	2010      	movcc	r0, #16
 801046e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010472:	bf3c      	itt	cc
 8010474:	021b      	lslcc	r3, r3, #8
 8010476:	3008      	addcc	r0, #8
 8010478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801047c:	bf3c      	itt	cc
 801047e:	011b      	lslcc	r3, r3, #4
 8010480:	3004      	addcc	r0, #4
 8010482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010486:	bf3c      	itt	cc
 8010488:	009b      	lslcc	r3, r3, #2
 801048a:	3002      	addcc	r0, #2
 801048c:	2b00      	cmp	r3, #0
 801048e:	db05      	blt.n	801049c <__hi0bits+0x3c>
 8010490:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010494:	f100 0001 	add.w	r0, r0, #1
 8010498:	bf08      	it	eq
 801049a:	2020      	moveq	r0, #32
 801049c:	4770      	bx	lr

0801049e <__lo0bits>:
 801049e:	6803      	ldr	r3, [r0, #0]
 80104a0:	4602      	mov	r2, r0
 80104a2:	f013 0007 	ands.w	r0, r3, #7
 80104a6:	d00b      	beq.n	80104c0 <__lo0bits+0x22>
 80104a8:	07d9      	lsls	r1, r3, #31
 80104aa:	d421      	bmi.n	80104f0 <__lo0bits+0x52>
 80104ac:	0798      	lsls	r0, r3, #30
 80104ae:	bf49      	itett	mi
 80104b0:	085b      	lsrmi	r3, r3, #1
 80104b2:	089b      	lsrpl	r3, r3, #2
 80104b4:	2001      	movmi	r0, #1
 80104b6:	6013      	strmi	r3, [r2, #0]
 80104b8:	bf5c      	itt	pl
 80104ba:	6013      	strpl	r3, [r2, #0]
 80104bc:	2002      	movpl	r0, #2
 80104be:	4770      	bx	lr
 80104c0:	b299      	uxth	r1, r3
 80104c2:	b909      	cbnz	r1, 80104c8 <__lo0bits+0x2a>
 80104c4:	0c1b      	lsrs	r3, r3, #16
 80104c6:	2010      	movs	r0, #16
 80104c8:	b2d9      	uxtb	r1, r3
 80104ca:	b909      	cbnz	r1, 80104d0 <__lo0bits+0x32>
 80104cc:	3008      	adds	r0, #8
 80104ce:	0a1b      	lsrs	r3, r3, #8
 80104d0:	0719      	lsls	r1, r3, #28
 80104d2:	bf04      	itt	eq
 80104d4:	091b      	lsreq	r3, r3, #4
 80104d6:	3004      	addeq	r0, #4
 80104d8:	0799      	lsls	r1, r3, #30
 80104da:	bf04      	itt	eq
 80104dc:	089b      	lsreq	r3, r3, #2
 80104de:	3002      	addeq	r0, #2
 80104e0:	07d9      	lsls	r1, r3, #31
 80104e2:	d403      	bmi.n	80104ec <__lo0bits+0x4e>
 80104e4:	085b      	lsrs	r3, r3, #1
 80104e6:	f100 0001 	add.w	r0, r0, #1
 80104ea:	d003      	beq.n	80104f4 <__lo0bits+0x56>
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	4770      	bx	lr
 80104f0:	2000      	movs	r0, #0
 80104f2:	4770      	bx	lr
 80104f4:	2020      	movs	r0, #32
 80104f6:	4770      	bx	lr

080104f8 <__i2b>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	460c      	mov	r4, r1
 80104fc:	2101      	movs	r1, #1
 80104fe:	f7ff ff07 	bl	8010310 <_Balloc>
 8010502:	4602      	mov	r2, r0
 8010504:	b928      	cbnz	r0, 8010512 <__i2b+0x1a>
 8010506:	4b05      	ldr	r3, [pc, #20]	@ (801051c <__i2b+0x24>)
 8010508:	4805      	ldr	r0, [pc, #20]	@ (8010520 <__i2b+0x28>)
 801050a:	f240 1145 	movw	r1, #325	@ 0x145
 801050e:	f000 fd11 	bl	8010f34 <__assert_func>
 8010512:	2301      	movs	r3, #1
 8010514:	6144      	str	r4, [r0, #20]
 8010516:	6103      	str	r3, [r0, #16]
 8010518:	bd10      	pop	{r4, pc}
 801051a:	bf00      	nop
 801051c:	080113a0 	.word	0x080113a0
 8010520:	080113b1 	.word	0x080113b1

08010524 <__multiply>:
 8010524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010528:	4614      	mov	r4, r2
 801052a:	690a      	ldr	r2, [r1, #16]
 801052c:	6923      	ldr	r3, [r4, #16]
 801052e:	429a      	cmp	r2, r3
 8010530:	bfa8      	it	ge
 8010532:	4623      	movge	r3, r4
 8010534:	460f      	mov	r7, r1
 8010536:	bfa4      	itt	ge
 8010538:	460c      	movge	r4, r1
 801053a:	461f      	movge	r7, r3
 801053c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010540:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	6861      	ldr	r1, [r4, #4]
 8010548:	eb0a 0609 	add.w	r6, sl, r9
 801054c:	42b3      	cmp	r3, r6
 801054e:	b085      	sub	sp, #20
 8010550:	bfb8      	it	lt
 8010552:	3101      	addlt	r1, #1
 8010554:	f7ff fedc 	bl	8010310 <_Balloc>
 8010558:	b930      	cbnz	r0, 8010568 <__multiply+0x44>
 801055a:	4602      	mov	r2, r0
 801055c:	4b44      	ldr	r3, [pc, #272]	@ (8010670 <__multiply+0x14c>)
 801055e:	4845      	ldr	r0, [pc, #276]	@ (8010674 <__multiply+0x150>)
 8010560:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010564:	f000 fce6 	bl	8010f34 <__assert_func>
 8010568:	f100 0514 	add.w	r5, r0, #20
 801056c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010570:	462b      	mov	r3, r5
 8010572:	2200      	movs	r2, #0
 8010574:	4543      	cmp	r3, r8
 8010576:	d321      	bcc.n	80105bc <__multiply+0x98>
 8010578:	f107 0114 	add.w	r1, r7, #20
 801057c:	f104 0214 	add.w	r2, r4, #20
 8010580:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010584:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010588:	9302      	str	r3, [sp, #8]
 801058a:	1b13      	subs	r3, r2, r4
 801058c:	3b15      	subs	r3, #21
 801058e:	f023 0303 	bic.w	r3, r3, #3
 8010592:	3304      	adds	r3, #4
 8010594:	f104 0715 	add.w	r7, r4, #21
 8010598:	42ba      	cmp	r2, r7
 801059a:	bf38      	it	cc
 801059c:	2304      	movcc	r3, #4
 801059e:	9301      	str	r3, [sp, #4]
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	9103      	str	r1, [sp, #12]
 80105a4:	428b      	cmp	r3, r1
 80105a6:	d80c      	bhi.n	80105c2 <__multiply+0x9e>
 80105a8:	2e00      	cmp	r6, #0
 80105aa:	dd03      	ble.n	80105b4 <__multiply+0x90>
 80105ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d05b      	beq.n	801066c <__multiply+0x148>
 80105b4:	6106      	str	r6, [r0, #16]
 80105b6:	b005      	add	sp, #20
 80105b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105bc:	f843 2b04 	str.w	r2, [r3], #4
 80105c0:	e7d8      	b.n	8010574 <__multiply+0x50>
 80105c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80105c6:	f1ba 0f00 	cmp.w	sl, #0
 80105ca:	d024      	beq.n	8010616 <__multiply+0xf2>
 80105cc:	f104 0e14 	add.w	lr, r4, #20
 80105d0:	46a9      	mov	r9, r5
 80105d2:	f04f 0c00 	mov.w	ip, #0
 80105d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105da:	f8d9 3000 	ldr.w	r3, [r9]
 80105de:	fa1f fb87 	uxth.w	fp, r7
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80105e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80105ec:	f8d9 7000 	ldr.w	r7, [r9]
 80105f0:	4463      	add	r3, ip
 80105f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80105f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80105fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80105fe:	b29b      	uxth	r3, r3
 8010600:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010604:	4572      	cmp	r2, lr
 8010606:	f849 3b04 	str.w	r3, [r9], #4
 801060a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801060e:	d8e2      	bhi.n	80105d6 <__multiply+0xb2>
 8010610:	9b01      	ldr	r3, [sp, #4]
 8010612:	f845 c003 	str.w	ip, [r5, r3]
 8010616:	9b03      	ldr	r3, [sp, #12]
 8010618:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801061c:	3104      	adds	r1, #4
 801061e:	f1b9 0f00 	cmp.w	r9, #0
 8010622:	d021      	beq.n	8010668 <__multiply+0x144>
 8010624:	682b      	ldr	r3, [r5, #0]
 8010626:	f104 0c14 	add.w	ip, r4, #20
 801062a:	46ae      	mov	lr, r5
 801062c:	f04f 0a00 	mov.w	sl, #0
 8010630:	f8bc b000 	ldrh.w	fp, [ip]
 8010634:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010638:	fb09 770b 	mla	r7, r9, fp, r7
 801063c:	4457      	add	r7, sl
 801063e:	b29b      	uxth	r3, r3
 8010640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010644:	f84e 3b04 	str.w	r3, [lr], #4
 8010648:	f85c 3b04 	ldr.w	r3, [ip], #4
 801064c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010650:	f8be 3000 	ldrh.w	r3, [lr]
 8010654:	fb09 330a 	mla	r3, r9, sl, r3
 8010658:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801065c:	4562      	cmp	r2, ip
 801065e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010662:	d8e5      	bhi.n	8010630 <__multiply+0x10c>
 8010664:	9f01      	ldr	r7, [sp, #4]
 8010666:	51eb      	str	r3, [r5, r7]
 8010668:	3504      	adds	r5, #4
 801066a:	e799      	b.n	80105a0 <__multiply+0x7c>
 801066c:	3e01      	subs	r6, #1
 801066e:	e79b      	b.n	80105a8 <__multiply+0x84>
 8010670:	080113a0 	.word	0x080113a0
 8010674:	080113b1 	.word	0x080113b1

08010678 <__pow5mult>:
 8010678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801067c:	4615      	mov	r5, r2
 801067e:	f012 0203 	ands.w	r2, r2, #3
 8010682:	4607      	mov	r7, r0
 8010684:	460e      	mov	r6, r1
 8010686:	d007      	beq.n	8010698 <__pow5mult+0x20>
 8010688:	4c25      	ldr	r4, [pc, #148]	@ (8010720 <__pow5mult+0xa8>)
 801068a:	3a01      	subs	r2, #1
 801068c:	2300      	movs	r3, #0
 801068e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010692:	f7ff fe9f 	bl	80103d4 <__multadd>
 8010696:	4606      	mov	r6, r0
 8010698:	10ad      	asrs	r5, r5, #2
 801069a:	d03d      	beq.n	8010718 <__pow5mult+0xa0>
 801069c:	69fc      	ldr	r4, [r7, #28]
 801069e:	b97c      	cbnz	r4, 80106c0 <__pow5mult+0x48>
 80106a0:	2010      	movs	r0, #16
 80106a2:	f7ff fd7f 	bl	80101a4 <malloc>
 80106a6:	4602      	mov	r2, r0
 80106a8:	61f8      	str	r0, [r7, #28]
 80106aa:	b928      	cbnz	r0, 80106b8 <__pow5mult+0x40>
 80106ac:	4b1d      	ldr	r3, [pc, #116]	@ (8010724 <__pow5mult+0xac>)
 80106ae:	481e      	ldr	r0, [pc, #120]	@ (8010728 <__pow5mult+0xb0>)
 80106b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80106b4:	f000 fc3e 	bl	8010f34 <__assert_func>
 80106b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106bc:	6004      	str	r4, [r0, #0]
 80106be:	60c4      	str	r4, [r0, #12]
 80106c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80106c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106c8:	b94c      	cbnz	r4, 80106de <__pow5mult+0x66>
 80106ca:	f240 2171 	movw	r1, #625	@ 0x271
 80106ce:	4638      	mov	r0, r7
 80106d0:	f7ff ff12 	bl	80104f8 <__i2b>
 80106d4:	2300      	movs	r3, #0
 80106d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80106da:	4604      	mov	r4, r0
 80106dc:	6003      	str	r3, [r0, #0]
 80106de:	f04f 0900 	mov.w	r9, #0
 80106e2:	07eb      	lsls	r3, r5, #31
 80106e4:	d50a      	bpl.n	80106fc <__pow5mult+0x84>
 80106e6:	4631      	mov	r1, r6
 80106e8:	4622      	mov	r2, r4
 80106ea:	4638      	mov	r0, r7
 80106ec:	f7ff ff1a 	bl	8010524 <__multiply>
 80106f0:	4631      	mov	r1, r6
 80106f2:	4680      	mov	r8, r0
 80106f4:	4638      	mov	r0, r7
 80106f6:	f7ff fe4b 	bl	8010390 <_Bfree>
 80106fa:	4646      	mov	r6, r8
 80106fc:	106d      	asrs	r5, r5, #1
 80106fe:	d00b      	beq.n	8010718 <__pow5mult+0xa0>
 8010700:	6820      	ldr	r0, [r4, #0]
 8010702:	b938      	cbnz	r0, 8010714 <__pow5mult+0x9c>
 8010704:	4622      	mov	r2, r4
 8010706:	4621      	mov	r1, r4
 8010708:	4638      	mov	r0, r7
 801070a:	f7ff ff0b 	bl	8010524 <__multiply>
 801070e:	6020      	str	r0, [r4, #0]
 8010710:	f8c0 9000 	str.w	r9, [r0]
 8010714:	4604      	mov	r4, r0
 8010716:	e7e4      	b.n	80106e2 <__pow5mult+0x6a>
 8010718:	4630      	mov	r0, r6
 801071a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801071e:	bf00      	nop
 8010720:	0801140c 	.word	0x0801140c
 8010724:	08011331 	.word	0x08011331
 8010728:	080113b1 	.word	0x080113b1

0801072c <__lshift>:
 801072c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010730:	460c      	mov	r4, r1
 8010732:	6849      	ldr	r1, [r1, #4]
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801073a:	68a3      	ldr	r3, [r4, #8]
 801073c:	4607      	mov	r7, r0
 801073e:	4691      	mov	r9, r2
 8010740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010744:	f108 0601 	add.w	r6, r8, #1
 8010748:	42b3      	cmp	r3, r6
 801074a:	db0b      	blt.n	8010764 <__lshift+0x38>
 801074c:	4638      	mov	r0, r7
 801074e:	f7ff fddf 	bl	8010310 <_Balloc>
 8010752:	4605      	mov	r5, r0
 8010754:	b948      	cbnz	r0, 801076a <__lshift+0x3e>
 8010756:	4602      	mov	r2, r0
 8010758:	4b28      	ldr	r3, [pc, #160]	@ (80107fc <__lshift+0xd0>)
 801075a:	4829      	ldr	r0, [pc, #164]	@ (8010800 <__lshift+0xd4>)
 801075c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010760:	f000 fbe8 	bl	8010f34 <__assert_func>
 8010764:	3101      	adds	r1, #1
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	e7ee      	b.n	8010748 <__lshift+0x1c>
 801076a:	2300      	movs	r3, #0
 801076c:	f100 0114 	add.w	r1, r0, #20
 8010770:	f100 0210 	add.w	r2, r0, #16
 8010774:	4618      	mov	r0, r3
 8010776:	4553      	cmp	r3, sl
 8010778:	db33      	blt.n	80107e2 <__lshift+0xb6>
 801077a:	6920      	ldr	r0, [r4, #16]
 801077c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010780:	f104 0314 	add.w	r3, r4, #20
 8010784:	f019 091f 	ands.w	r9, r9, #31
 8010788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801078c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010790:	d02b      	beq.n	80107ea <__lshift+0xbe>
 8010792:	f1c9 0e20 	rsb	lr, r9, #32
 8010796:	468a      	mov	sl, r1
 8010798:	2200      	movs	r2, #0
 801079a:	6818      	ldr	r0, [r3, #0]
 801079c:	fa00 f009 	lsl.w	r0, r0, r9
 80107a0:	4310      	orrs	r0, r2
 80107a2:	f84a 0b04 	str.w	r0, [sl], #4
 80107a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107aa:	459c      	cmp	ip, r3
 80107ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80107b0:	d8f3      	bhi.n	801079a <__lshift+0x6e>
 80107b2:	ebac 0304 	sub.w	r3, ip, r4
 80107b6:	3b15      	subs	r3, #21
 80107b8:	f023 0303 	bic.w	r3, r3, #3
 80107bc:	3304      	adds	r3, #4
 80107be:	f104 0015 	add.w	r0, r4, #21
 80107c2:	4584      	cmp	ip, r0
 80107c4:	bf38      	it	cc
 80107c6:	2304      	movcc	r3, #4
 80107c8:	50ca      	str	r2, [r1, r3]
 80107ca:	b10a      	cbz	r2, 80107d0 <__lshift+0xa4>
 80107cc:	f108 0602 	add.w	r6, r8, #2
 80107d0:	3e01      	subs	r6, #1
 80107d2:	4638      	mov	r0, r7
 80107d4:	612e      	str	r6, [r5, #16]
 80107d6:	4621      	mov	r1, r4
 80107d8:	f7ff fdda 	bl	8010390 <_Bfree>
 80107dc:	4628      	mov	r0, r5
 80107de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80107e6:	3301      	adds	r3, #1
 80107e8:	e7c5      	b.n	8010776 <__lshift+0x4a>
 80107ea:	3904      	subs	r1, #4
 80107ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80107f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80107f4:	459c      	cmp	ip, r3
 80107f6:	d8f9      	bhi.n	80107ec <__lshift+0xc0>
 80107f8:	e7ea      	b.n	80107d0 <__lshift+0xa4>
 80107fa:	bf00      	nop
 80107fc:	080113a0 	.word	0x080113a0
 8010800:	080113b1 	.word	0x080113b1

08010804 <__mcmp>:
 8010804:	690a      	ldr	r2, [r1, #16]
 8010806:	4603      	mov	r3, r0
 8010808:	6900      	ldr	r0, [r0, #16]
 801080a:	1a80      	subs	r0, r0, r2
 801080c:	b530      	push	{r4, r5, lr}
 801080e:	d10e      	bne.n	801082e <__mcmp+0x2a>
 8010810:	3314      	adds	r3, #20
 8010812:	3114      	adds	r1, #20
 8010814:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010818:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801081c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010820:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010824:	4295      	cmp	r5, r2
 8010826:	d003      	beq.n	8010830 <__mcmp+0x2c>
 8010828:	d205      	bcs.n	8010836 <__mcmp+0x32>
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	bd30      	pop	{r4, r5, pc}
 8010830:	42a3      	cmp	r3, r4
 8010832:	d3f3      	bcc.n	801081c <__mcmp+0x18>
 8010834:	e7fb      	b.n	801082e <__mcmp+0x2a>
 8010836:	2001      	movs	r0, #1
 8010838:	e7f9      	b.n	801082e <__mcmp+0x2a>
	...

0801083c <__mdiff>:
 801083c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	4689      	mov	r9, r1
 8010842:	4606      	mov	r6, r0
 8010844:	4611      	mov	r1, r2
 8010846:	4648      	mov	r0, r9
 8010848:	4614      	mov	r4, r2
 801084a:	f7ff ffdb 	bl	8010804 <__mcmp>
 801084e:	1e05      	subs	r5, r0, #0
 8010850:	d112      	bne.n	8010878 <__mdiff+0x3c>
 8010852:	4629      	mov	r1, r5
 8010854:	4630      	mov	r0, r6
 8010856:	f7ff fd5b 	bl	8010310 <_Balloc>
 801085a:	4602      	mov	r2, r0
 801085c:	b928      	cbnz	r0, 801086a <__mdiff+0x2e>
 801085e:	4b3f      	ldr	r3, [pc, #252]	@ (801095c <__mdiff+0x120>)
 8010860:	f240 2137 	movw	r1, #567	@ 0x237
 8010864:	483e      	ldr	r0, [pc, #248]	@ (8010960 <__mdiff+0x124>)
 8010866:	f000 fb65 	bl	8010f34 <__assert_func>
 801086a:	2301      	movs	r3, #1
 801086c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010870:	4610      	mov	r0, r2
 8010872:	b003      	add	sp, #12
 8010874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010878:	bfbc      	itt	lt
 801087a:	464b      	movlt	r3, r9
 801087c:	46a1      	movlt	r9, r4
 801087e:	4630      	mov	r0, r6
 8010880:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010884:	bfba      	itte	lt
 8010886:	461c      	movlt	r4, r3
 8010888:	2501      	movlt	r5, #1
 801088a:	2500      	movge	r5, #0
 801088c:	f7ff fd40 	bl	8010310 <_Balloc>
 8010890:	4602      	mov	r2, r0
 8010892:	b918      	cbnz	r0, 801089c <__mdiff+0x60>
 8010894:	4b31      	ldr	r3, [pc, #196]	@ (801095c <__mdiff+0x120>)
 8010896:	f240 2145 	movw	r1, #581	@ 0x245
 801089a:	e7e3      	b.n	8010864 <__mdiff+0x28>
 801089c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80108a0:	6926      	ldr	r6, [r4, #16]
 80108a2:	60c5      	str	r5, [r0, #12]
 80108a4:	f109 0310 	add.w	r3, r9, #16
 80108a8:	f109 0514 	add.w	r5, r9, #20
 80108ac:	f104 0e14 	add.w	lr, r4, #20
 80108b0:	f100 0b14 	add.w	fp, r0, #20
 80108b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80108b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80108bc:	9301      	str	r3, [sp, #4]
 80108be:	46d9      	mov	r9, fp
 80108c0:	f04f 0c00 	mov.w	ip, #0
 80108c4:	9b01      	ldr	r3, [sp, #4]
 80108c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80108ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	fa1f f38a 	uxth.w	r3, sl
 80108d4:	4619      	mov	r1, r3
 80108d6:	b283      	uxth	r3, r0
 80108d8:	1acb      	subs	r3, r1, r3
 80108da:	0c00      	lsrs	r0, r0, #16
 80108dc:	4463      	add	r3, ip
 80108de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80108e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80108ec:	4576      	cmp	r6, lr
 80108ee:	f849 3b04 	str.w	r3, [r9], #4
 80108f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80108f6:	d8e5      	bhi.n	80108c4 <__mdiff+0x88>
 80108f8:	1b33      	subs	r3, r6, r4
 80108fa:	3b15      	subs	r3, #21
 80108fc:	f023 0303 	bic.w	r3, r3, #3
 8010900:	3415      	adds	r4, #21
 8010902:	3304      	adds	r3, #4
 8010904:	42a6      	cmp	r6, r4
 8010906:	bf38      	it	cc
 8010908:	2304      	movcc	r3, #4
 801090a:	441d      	add	r5, r3
 801090c:	445b      	add	r3, fp
 801090e:	461e      	mov	r6, r3
 8010910:	462c      	mov	r4, r5
 8010912:	4544      	cmp	r4, r8
 8010914:	d30e      	bcc.n	8010934 <__mdiff+0xf8>
 8010916:	f108 0103 	add.w	r1, r8, #3
 801091a:	1b49      	subs	r1, r1, r5
 801091c:	f021 0103 	bic.w	r1, r1, #3
 8010920:	3d03      	subs	r5, #3
 8010922:	45a8      	cmp	r8, r5
 8010924:	bf38      	it	cc
 8010926:	2100      	movcc	r1, #0
 8010928:	440b      	add	r3, r1
 801092a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801092e:	b191      	cbz	r1, 8010956 <__mdiff+0x11a>
 8010930:	6117      	str	r7, [r2, #16]
 8010932:	e79d      	b.n	8010870 <__mdiff+0x34>
 8010934:	f854 1b04 	ldr.w	r1, [r4], #4
 8010938:	46e6      	mov	lr, ip
 801093a:	0c08      	lsrs	r0, r1, #16
 801093c:	fa1c fc81 	uxtah	ip, ip, r1
 8010940:	4471      	add	r1, lr
 8010942:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010946:	b289      	uxth	r1, r1
 8010948:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801094c:	f846 1b04 	str.w	r1, [r6], #4
 8010950:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010954:	e7dd      	b.n	8010912 <__mdiff+0xd6>
 8010956:	3f01      	subs	r7, #1
 8010958:	e7e7      	b.n	801092a <__mdiff+0xee>
 801095a:	bf00      	nop
 801095c:	080113a0 	.word	0x080113a0
 8010960:	080113b1 	.word	0x080113b1

08010964 <__d2b>:
 8010964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010968:	460f      	mov	r7, r1
 801096a:	2101      	movs	r1, #1
 801096c:	ec59 8b10 	vmov	r8, r9, d0
 8010970:	4616      	mov	r6, r2
 8010972:	f7ff fccd 	bl	8010310 <_Balloc>
 8010976:	4604      	mov	r4, r0
 8010978:	b930      	cbnz	r0, 8010988 <__d2b+0x24>
 801097a:	4602      	mov	r2, r0
 801097c:	4b23      	ldr	r3, [pc, #140]	@ (8010a0c <__d2b+0xa8>)
 801097e:	4824      	ldr	r0, [pc, #144]	@ (8010a10 <__d2b+0xac>)
 8010980:	f240 310f 	movw	r1, #783	@ 0x30f
 8010984:	f000 fad6 	bl	8010f34 <__assert_func>
 8010988:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801098c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010990:	b10d      	cbz	r5, 8010996 <__d2b+0x32>
 8010992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010996:	9301      	str	r3, [sp, #4]
 8010998:	f1b8 0300 	subs.w	r3, r8, #0
 801099c:	d023      	beq.n	80109e6 <__d2b+0x82>
 801099e:	4668      	mov	r0, sp
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	f7ff fd7c 	bl	801049e <__lo0bits>
 80109a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80109aa:	b1d0      	cbz	r0, 80109e2 <__d2b+0x7e>
 80109ac:	f1c0 0320 	rsb	r3, r0, #32
 80109b0:	fa02 f303 	lsl.w	r3, r2, r3
 80109b4:	430b      	orrs	r3, r1
 80109b6:	40c2      	lsrs	r2, r0
 80109b8:	6163      	str	r3, [r4, #20]
 80109ba:	9201      	str	r2, [sp, #4]
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	61a3      	str	r3, [r4, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	bf0c      	ite	eq
 80109c4:	2201      	moveq	r2, #1
 80109c6:	2202      	movne	r2, #2
 80109c8:	6122      	str	r2, [r4, #16]
 80109ca:	b1a5      	cbz	r5, 80109f6 <__d2b+0x92>
 80109cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80109d0:	4405      	add	r5, r0
 80109d2:	603d      	str	r5, [r7, #0]
 80109d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80109d8:	6030      	str	r0, [r6, #0]
 80109da:	4620      	mov	r0, r4
 80109dc:	b003      	add	sp, #12
 80109de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109e2:	6161      	str	r1, [r4, #20]
 80109e4:	e7ea      	b.n	80109bc <__d2b+0x58>
 80109e6:	a801      	add	r0, sp, #4
 80109e8:	f7ff fd59 	bl	801049e <__lo0bits>
 80109ec:	9b01      	ldr	r3, [sp, #4]
 80109ee:	6163      	str	r3, [r4, #20]
 80109f0:	3020      	adds	r0, #32
 80109f2:	2201      	movs	r2, #1
 80109f4:	e7e8      	b.n	80109c8 <__d2b+0x64>
 80109f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80109fe:	6038      	str	r0, [r7, #0]
 8010a00:	6918      	ldr	r0, [r3, #16]
 8010a02:	f7ff fd2d 	bl	8010460 <__hi0bits>
 8010a06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a0a:	e7e5      	b.n	80109d8 <__d2b+0x74>
 8010a0c:	080113a0 	.word	0x080113a0
 8010a10:	080113b1 	.word	0x080113b1

08010a14 <__sfputc_r>:
 8010a14:	6893      	ldr	r3, [r2, #8]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	b410      	push	{r4}
 8010a1c:	6093      	str	r3, [r2, #8]
 8010a1e:	da08      	bge.n	8010a32 <__sfputc_r+0x1e>
 8010a20:	6994      	ldr	r4, [r2, #24]
 8010a22:	42a3      	cmp	r3, r4
 8010a24:	db01      	blt.n	8010a2a <__sfputc_r+0x16>
 8010a26:	290a      	cmp	r1, #10
 8010a28:	d103      	bne.n	8010a32 <__sfputc_r+0x1e>
 8010a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a2e:	f7fe bc0c 	b.w	800f24a <__swbuf_r>
 8010a32:	6813      	ldr	r3, [r2, #0]
 8010a34:	1c58      	adds	r0, r3, #1
 8010a36:	6010      	str	r0, [r2, #0]
 8010a38:	7019      	strb	r1, [r3, #0]
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <__sfputs_r>:
 8010a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a44:	4606      	mov	r6, r0
 8010a46:	460f      	mov	r7, r1
 8010a48:	4614      	mov	r4, r2
 8010a4a:	18d5      	adds	r5, r2, r3
 8010a4c:	42ac      	cmp	r4, r5
 8010a4e:	d101      	bne.n	8010a54 <__sfputs_r+0x12>
 8010a50:	2000      	movs	r0, #0
 8010a52:	e007      	b.n	8010a64 <__sfputs_r+0x22>
 8010a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a58:	463a      	mov	r2, r7
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7ff ffda 	bl	8010a14 <__sfputc_r>
 8010a60:	1c43      	adds	r3, r0, #1
 8010a62:	d1f3      	bne.n	8010a4c <__sfputs_r+0xa>
 8010a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a68 <_vfiprintf_r>:
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	460d      	mov	r5, r1
 8010a6e:	b09d      	sub	sp, #116	@ 0x74
 8010a70:	4614      	mov	r4, r2
 8010a72:	4698      	mov	r8, r3
 8010a74:	4606      	mov	r6, r0
 8010a76:	b118      	cbz	r0, 8010a80 <_vfiprintf_r+0x18>
 8010a78:	6a03      	ldr	r3, [r0, #32]
 8010a7a:	b90b      	cbnz	r3, 8010a80 <_vfiprintf_r+0x18>
 8010a7c:	f7fe fafc 	bl	800f078 <__sinit>
 8010a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a82:	07d9      	lsls	r1, r3, #31
 8010a84:	d405      	bmi.n	8010a92 <_vfiprintf_r+0x2a>
 8010a86:	89ab      	ldrh	r3, [r5, #12]
 8010a88:	059a      	lsls	r2, r3, #22
 8010a8a:	d402      	bmi.n	8010a92 <_vfiprintf_r+0x2a>
 8010a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a8e:	f7fe fcee 	bl	800f46e <__retarget_lock_acquire_recursive>
 8010a92:	89ab      	ldrh	r3, [r5, #12]
 8010a94:	071b      	lsls	r3, r3, #28
 8010a96:	d501      	bpl.n	8010a9c <_vfiprintf_r+0x34>
 8010a98:	692b      	ldr	r3, [r5, #16]
 8010a9a:	b99b      	cbnz	r3, 8010ac4 <_vfiprintf_r+0x5c>
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7fe fc12 	bl	800f2c8 <__swsetup_r>
 8010aa4:	b170      	cbz	r0, 8010ac4 <_vfiprintf_r+0x5c>
 8010aa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aa8:	07dc      	lsls	r4, r3, #31
 8010aaa:	d504      	bpl.n	8010ab6 <_vfiprintf_r+0x4e>
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	b01d      	add	sp, #116	@ 0x74
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	89ab      	ldrh	r3, [r5, #12]
 8010ab8:	0598      	lsls	r0, r3, #22
 8010aba:	d4f7      	bmi.n	8010aac <_vfiprintf_r+0x44>
 8010abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010abe:	f7fe fcd7 	bl	800f470 <__retarget_lock_release_recursive>
 8010ac2:	e7f3      	b.n	8010aac <_vfiprintf_r+0x44>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ac8:	2320      	movs	r3, #32
 8010aca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ad2:	2330      	movs	r3, #48	@ 0x30
 8010ad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c84 <_vfiprintf_r+0x21c>
 8010ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010adc:	f04f 0901 	mov.w	r9, #1
 8010ae0:	4623      	mov	r3, r4
 8010ae2:	469a      	mov	sl, r3
 8010ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae8:	b10a      	cbz	r2, 8010aee <_vfiprintf_r+0x86>
 8010aea:	2a25      	cmp	r2, #37	@ 0x25
 8010aec:	d1f9      	bne.n	8010ae2 <_vfiprintf_r+0x7a>
 8010aee:	ebba 0b04 	subs.w	fp, sl, r4
 8010af2:	d00b      	beq.n	8010b0c <_vfiprintf_r+0xa4>
 8010af4:	465b      	mov	r3, fp
 8010af6:	4622      	mov	r2, r4
 8010af8:	4629      	mov	r1, r5
 8010afa:	4630      	mov	r0, r6
 8010afc:	f7ff ffa1 	bl	8010a42 <__sfputs_r>
 8010b00:	3001      	adds	r0, #1
 8010b02:	f000 80a7 	beq.w	8010c54 <_vfiprintf_r+0x1ec>
 8010b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b08:	445a      	add	r2, fp
 8010b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 809f 	beq.w	8010c54 <_vfiprintf_r+0x1ec>
 8010b16:	2300      	movs	r3, #0
 8010b18:	f04f 32ff 	mov.w	r2, #4294967295
 8010b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b20:	f10a 0a01 	add.w	sl, sl, #1
 8010b24:	9304      	str	r3, [sp, #16]
 8010b26:	9307      	str	r3, [sp, #28]
 8010b28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b2e:	4654      	mov	r4, sl
 8010b30:	2205      	movs	r2, #5
 8010b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b36:	4853      	ldr	r0, [pc, #332]	@ (8010c84 <_vfiprintf_r+0x21c>)
 8010b38:	f7ef fb52 	bl	80001e0 <memchr>
 8010b3c:	9a04      	ldr	r2, [sp, #16]
 8010b3e:	b9d8      	cbnz	r0, 8010b78 <_vfiprintf_r+0x110>
 8010b40:	06d1      	lsls	r1, r2, #27
 8010b42:	bf44      	itt	mi
 8010b44:	2320      	movmi	r3, #32
 8010b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b4a:	0713      	lsls	r3, r2, #28
 8010b4c:	bf44      	itt	mi
 8010b4e:	232b      	movmi	r3, #43	@ 0x2b
 8010b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b54:	f89a 3000 	ldrb.w	r3, [sl]
 8010b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b5a:	d015      	beq.n	8010b88 <_vfiprintf_r+0x120>
 8010b5c:	9a07      	ldr	r2, [sp, #28]
 8010b5e:	4654      	mov	r4, sl
 8010b60:	2000      	movs	r0, #0
 8010b62:	f04f 0c0a 	mov.w	ip, #10
 8010b66:	4621      	mov	r1, r4
 8010b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b6c:	3b30      	subs	r3, #48	@ 0x30
 8010b6e:	2b09      	cmp	r3, #9
 8010b70:	d94b      	bls.n	8010c0a <_vfiprintf_r+0x1a2>
 8010b72:	b1b0      	cbz	r0, 8010ba2 <_vfiprintf_r+0x13a>
 8010b74:	9207      	str	r2, [sp, #28]
 8010b76:	e014      	b.n	8010ba2 <_vfiprintf_r+0x13a>
 8010b78:	eba0 0308 	sub.w	r3, r0, r8
 8010b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8010b80:	4313      	orrs	r3, r2
 8010b82:	9304      	str	r3, [sp, #16]
 8010b84:	46a2      	mov	sl, r4
 8010b86:	e7d2      	b.n	8010b2e <_vfiprintf_r+0xc6>
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	1d19      	adds	r1, r3, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	9103      	str	r1, [sp, #12]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	bfbb      	ittet	lt
 8010b94:	425b      	neglt	r3, r3
 8010b96:	f042 0202 	orrlt.w	r2, r2, #2
 8010b9a:	9307      	strge	r3, [sp, #28]
 8010b9c:	9307      	strlt	r3, [sp, #28]
 8010b9e:	bfb8      	it	lt
 8010ba0:	9204      	strlt	r2, [sp, #16]
 8010ba2:	7823      	ldrb	r3, [r4, #0]
 8010ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ba6:	d10a      	bne.n	8010bbe <_vfiprintf_r+0x156>
 8010ba8:	7863      	ldrb	r3, [r4, #1]
 8010baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bac:	d132      	bne.n	8010c14 <_vfiprintf_r+0x1ac>
 8010bae:	9b03      	ldr	r3, [sp, #12]
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	9203      	str	r2, [sp, #12]
 8010bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bba:	3402      	adds	r4, #2
 8010bbc:	9305      	str	r3, [sp, #20]
 8010bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c94 <_vfiprintf_r+0x22c>
 8010bc2:	7821      	ldrb	r1, [r4, #0]
 8010bc4:	2203      	movs	r2, #3
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	f7ef fb0a 	bl	80001e0 <memchr>
 8010bcc:	b138      	cbz	r0, 8010bde <_vfiprintf_r+0x176>
 8010bce:	9b04      	ldr	r3, [sp, #16]
 8010bd0:	eba0 000a 	sub.w	r0, r0, sl
 8010bd4:	2240      	movs	r2, #64	@ 0x40
 8010bd6:	4082      	lsls	r2, r0
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	3401      	adds	r4, #1
 8010bdc:	9304      	str	r3, [sp, #16]
 8010bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010be2:	4829      	ldr	r0, [pc, #164]	@ (8010c88 <_vfiprintf_r+0x220>)
 8010be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010be8:	2206      	movs	r2, #6
 8010bea:	f7ef faf9 	bl	80001e0 <memchr>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d03f      	beq.n	8010c72 <_vfiprintf_r+0x20a>
 8010bf2:	4b26      	ldr	r3, [pc, #152]	@ (8010c8c <_vfiprintf_r+0x224>)
 8010bf4:	bb1b      	cbnz	r3, 8010c3e <_vfiprintf_r+0x1d6>
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	3307      	adds	r3, #7
 8010bfa:	f023 0307 	bic.w	r3, r3, #7
 8010bfe:	3308      	adds	r3, #8
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c04:	443b      	add	r3, r7
 8010c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c08:	e76a      	b.n	8010ae0 <_vfiprintf_r+0x78>
 8010c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c0e:	460c      	mov	r4, r1
 8010c10:	2001      	movs	r0, #1
 8010c12:	e7a8      	b.n	8010b66 <_vfiprintf_r+0xfe>
 8010c14:	2300      	movs	r3, #0
 8010c16:	3401      	adds	r4, #1
 8010c18:	9305      	str	r3, [sp, #20]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	f04f 0c0a 	mov.w	ip, #10
 8010c20:	4620      	mov	r0, r4
 8010c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c26:	3a30      	subs	r2, #48	@ 0x30
 8010c28:	2a09      	cmp	r2, #9
 8010c2a:	d903      	bls.n	8010c34 <_vfiprintf_r+0x1cc>
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d0c6      	beq.n	8010bbe <_vfiprintf_r+0x156>
 8010c30:	9105      	str	r1, [sp, #20]
 8010c32:	e7c4      	b.n	8010bbe <_vfiprintf_r+0x156>
 8010c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c38:	4604      	mov	r4, r0
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e7f0      	b.n	8010c20 <_vfiprintf_r+0x1b8>
 8010c3e:	ab03      	add	r3, sp, #12
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	462a      	mov	r2, r5
 8010c44:	4b12      	ldr	r3, [pc, #72]	@ (8010c90 <_vfiprintf_r+0x228>)
 8010c46:	a904      	add	r1, sp, #16
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f7fd fdd1 	bl	800e7f0 <_printf_float>
 8010c4e:	4607      	mov	r7, r0
 8010c50:	1c78      	adds	r0, r7, #1
 8010c52:	d1d6      	bne.n	8010c02 <_vfiprintf_r+0x19a>
 8010c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c56:	07d9      	lsls	r1, r3, #31
 8010c58:	d405      	bmi.n	8010c66 <_vfiprintf_r+0x1fe>
 8010c5a:	89ab      	ldrh	r3, [r5, #12]
 8010c5c:	059a      	lsls	r2, r3, #22
 8010c5e:	d402      	bmi.n	8010c66 <_vfiprintf_r+0x1fe>
 8010c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c62:	f7fe fc05 	bl	800f470 <__retarget_lock_release_recursive>
 8010c66:	89ab      	ldrh	r3, [r5, #12]
 8010c68:	065b      	lsls	r3, r3, #25
 8010c6a:	f53f af1f 	bmi.w	8010aac <_vfiprintf_r+0x44>
 8010c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c70:	e71e      	b.n	8010ab0 <_vfiprintf_r+0x48>
 8010c72:	ab03      	add	r3, sp, #12
 8010c74:	9300      	str	r3, [sp, #0]
 8010c76:	462a      	mov	r2, r5
 8010c78:	4b05      	ldr	r3, [pc, #20]	@ (8010c90 <_vfiprintf_r+0x228>)
 8010c7a:	a904      	add	r1, sp, #16
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f7fe f84f 	bl	800ed20 <_printf_i>
 8010c82:	e7e4      	b.n	8010c4e <_vfiprintf_r+0x1e6>
 8010c84:	08011508 	.word	0x08011508
 8010c88:	08011512 	.word	0x08011512
 8010c8c:	0800e7f1 	.word	0x0800e7f1
 8010c90:	08010a43 	.word	0x08010a43
 8010c94:	0801150e 	.word	0x0801150e

08010c98 <__sflush_r>:
 8010c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	0716      	lsls	r6, r2, #28
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	460c      	mov	r4, r1
 8010ca6:	d454      	bmi.n	8010d52 <__sflush_r+0xba>
 8010ca8:	684b      	ldr	r3, [r1, #4]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	dc02      	bgt.n	8010cb4 <__sflush_r+0x1c>
 8010cae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	dd48      	ble.n	8010d46 <__sflush_r+0xae>
 8010cb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cb6:	2e00      	cmp	r6, #0
 8010cb8:	d045      	beq.n	8010d46 <__sflush_r+0xae>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010cc0:	682f      	ldr	r7, [r5, #0]
 8010cc2:	6a21      	ldr	r1, [r4, #32]
 8010cc4:	602b      	str	r3, [r5, #0]
 8010cc6:	d030      	beq.n	8010d2a <__sflush_r+0x92>
 8010cc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	0759      	lsls	r1, r3, #29
 8010cce:	d505      	bpl.n	8010cdc <__sflush_r+0x44>
 8010cd0:	6863      	ldr	r3, [r4, #4]
 8010cd2:	1ad2      	subs	r2, r2, r3
 8010cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010cd6:	b10b      	cbz	r3, 8010cdc <__sflush_r+0x44>
 8010cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010cda:	1ad2      	subs	r2, r2, r3
 8010cdc:	2300      	movs	r3, #0
 8010cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ce0:	6a21      	ldr	r1, [r4, #32]
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	47b0      	blx	r6
 8010ce6:	1c43      	adds	r3, r0, #1
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	d106      	bne.n	8010cfa <__sflush_r+0x62>
 8010cec:	6829      	ldr	r1, [r5, #0]
 8010cee:	291d      	cmp	r1, #29
 8010cf0:	d82b      	bhi.n	8010d4a <__sflush_r+0xb2>
 8010cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8010d9c <__sflush_r+0x104>)
 8010cf4:	410a      	asrs	r2, r1
 8010cf6:	07d6      	lsls	r6, r2, #31
 8010cf8:	d427      	bmi.n	8010d4a <__sflush_r+0xb2>
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	6062      	str	r2, [r4, #4]
 8010cfe:	04d9      	lsls	r1, r3, #19
 8010d00:	6922      	ldr	r2, [r4, #16]
 8010d02:	6022      	str	r2, [r4, #0]
 8010d04:	d504      	bpl.n	8010d10 <__sflush_r+0x78>
 8010d06:	1c42      	adds	r2, r0, #1
 8010d08:	d101      	bne.n	8010d0e <__sflush_r+0x76>
 8010d0a:	682b      	ldr	r3, [r5, #0]
 8010d0c:	b903      	cbnz	r3, 8010d10 <__sflush_r+0x78>
 8010d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d12:	602f      	str	r7, [r5, #0]
 8010d14:	b1b9      	cbz	r1, 8010d46 <__sflush_r+0xae>
 8010d16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d1a:	4299      	cmp	r1, r3
 8010d1c:	d002      	beq.n	8010d24 <__sflush_r+0x8c>
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f7ff f9f6 	bl	8010110 <_free_r>
 8010d24:	2300      	movs	r3, #0
 8010d26:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d28:	e00d      	b.n	8010d46 <__sflush_r+0xae>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	47b0      	blx	r6
 8010d30:	4602      	mov	r2, r0
 8010d32:	1c50      	adds	r0, r2, #1
 8010d34:	d1c9      	bne.n	8010cca <__sflush_r+0x32>
 8010d36:	682b      	ldr	r3, [r5, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d0c6      	beq.n	8010cca <__sflush_r+0x32>
 8010d3c:	2b1d      	cmp	r3, #29
 8010d3e:	d001      	beq.n	8010d44 <__sflush_r+0xac>
 8010d40:	2b16      	cmp	r3, #22
 8010d42:	d11e      	bne.n	8010d82 <__sflush_r+0xea>
 8010d44:	602f      	str	r7, [r5, #0]
 8010d46:	2000      	movs	r0, #0
 8010d48:	e022      	b.n	8010d90 <__sflush_r+0xf8>
 8010d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d4e:	b21b      	sxth	r3, r3
 8010d50:	e01b      	b.n	8010d8a <__sflush_r+0xf2>
 8010d52:	690f      	ldr	r7, [r1, #16]
 8010d54:	2f00      	cmp	r7, #0
 8010d56:	d0f6      	beq.n	8010d46 <__sflush_r+0xae>
 8010d58:	0793      	lsls	r3, r2, #30
 8010d5a:	680e      	ldr	r6, [r1, #0]
 8010d5c:	bf08      	it	eq
 8010d5e:	694b      	ldreq	r3, [r1, #20]
 8010d60:	600f      	str	r7, [r1, #0]
 8010d62:	bf18      	it	ne
 8010d64:	2300      	movne	r3, #0
 8010d66:	eba6 0807 	sub.w	r8, r6, r7
 8010d6a:	608b      	str	r3, [r1, #8]
 8010d6c:	f1b8 0f00 	cmp.w	r8, #0
 8010d70:	dde9      	ble.n	8010d46 <__sflush_r+0xae>
 8010d72:	6a21      	ldr	r1, [r4, #32]
 8010d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d76:	4643      	mov	r3, r8
 8010d78:	463a      	mov	r2, r7
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	47b0      	blx	r6
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	dc08      	bgt.n	8010d94 <__sflush_r+0xfc>
 8010d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d8a:	81a3      	strh	r3, [r4, #12]
 8010d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d94:	4407      	add	r7, r0
 8010d96:	eba8 0800 	sub.w	r8, r8, r0
 8010d9a:	e7e7      	b.n	8010d6c <__sflush_r+0xd4>
 8010d9c:	dfbffffe 	.word	0xdfbffffe

08010da0 <_fflush_r>:
 8010da0:	b538      	push	{r3, r4, r5, lr}
 8010da2:	690b      	ldr	r3, [r1, #16]
 8010da4:	4605      	mov	r5, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	b913      	cbnz	r3, 8010db0 <_fflush_r+0x10>
 8010daa:	2500      	movs	r5, #0
 8010dac:	4628      	mov	r0, r5
 8010dae:	bd38      	pop	{r3, r4, r5, pc}
 8010db0:	b118      	cbz	r0, 8010dba <_fflush_r+0x1a>
 8010db2:	6a03      	ldr	r3, [r0, #32]
 8010db4:	b90b      	cbnz	r3, 8010dba <_fflush_r+0x1a>
 8010db6:	f7fe f95f 	bl	800f078 <__sinit>
 8010dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0f3      	beq.n	8010daa <_fflush_r+0xa>
 8010dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010dc4:	07d0      	lsls	r0, r2, #31
 8010dc6:	d404      	bmi.n	8010dd2 <_fflush_r+0x32>
 8010dc8:	0599      	lsls	r1, r3, #22
 8010dca:	d402      	bmi.n	8010dd2 <_fflush_r+0x32>
 8010dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dce:	f7fe fb4e 	bl	800f46e <__retarget_lock_acquire_recursive>
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	f7ff ff5f 	bl	8010c98 <__sflush_r>
 8010dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ddc:	07da      	lsls	r2, r3, #31
 8010dde:	4605      	mov	r5, r0
 8010de0:	d4e4      	bmi.n	8010dac <_fflush_r+0xc>
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	059b      	lsls	r3, r3, #22
 8010de6:	d4e1      	bmi.n	8010dac <_fflush_r+0xc>
 8010de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dea:	f7fe fb41 	bl	800f470 <__retarget_lock_release_recursive>
 8010dee:	e7dd      	b.n	8010dac <_fflush_r+0xc>

08010df0 <__swhatbuf_r>:
 8010df0:	b570      	push	{r4, r5, r6, lr}
 8010df2:	460c      	mov	r4, r1
 8010df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df8:	2900      	cmp	r1, #0
 8010dfa:	b096      	sub	sp, #88	@ 0x58
 8010dfc:	4615      	mov	r5, r2
 8010dfe:	461e      	mov	r6, r3
 8010e00:	da0d      	bge.n	8010e1e <__swhatbuf_r+0x2e>
 8010e02:	89a3      	ldrh	r3, [r4, #12]
 8010e04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e08:	f04f 0100 	mov.w	r1, #0
 8010e0c:	bf14      	ite	ne
 8010e0e:	2340      	movne	r3, #64	@ 0x40
 8010e10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e14:	2000      	movs	r0, #0
 8010e16:	6031      	str	r1, [r6, #0]
 8010e18:	602b      	str	r3, [r5, #0]
 8010e1a:	b016      	add	sp, #88	@ 0x58
 8010e1c:	bd70      	pop	{r4, r5, r6, pc}
 8010e1e:	466a      	mov	r2, sp
 8010e20:	f000 f848 	bl	8010eb4 <_fstat_r>
 8010e24:	2800      	cmp	r0, #0
 8010e26:	dbec      	blt.n	8010e02 <__swhatbuf_r+0x12>
 8010e28:	9901      	ldr	r1, [sp, #4]
 8010e2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e32:	4259      	negs	r1, r3
 8010e34:	4159      	adcs	r1, r3
 8010e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e3a:	e7eb      	b.n	8010e14 <__swhatbuf_r+0x24>

08010e3c <__smakebuf_r>:
 8010e3c:	898b      	ldrh	r3, [r1, #12]
 8010e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e40:	079d      	lsls	r5, r3, #30
 8010e42:	4606      	mov	r6, r0
 8010e44:	460c      	mov	r4, r1
 8010e46:	d507      	bpl.n	8010e58 <__smakebuf_r+0x1c>
 8010e48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	6123      	str	r3, [r4, #16]
 8010e50:	2301      	movs	r3, #1
 8010e52:	6163      	str	r3, [r4, #20]
 8010e54:	b003      	add	sp, #12
 8010e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e58:	ab01      	add	r3, sp, #4
 8010e5a:	466a      	mov	r2, sp
 8010e5c:	f7ff ffc8 	bl	8010df0 <__swhatbuf_r>
 8010e60:	9f00      	ldr	r7, [sp, #0]
 8010e62:	4605      	mov	r5, r0
 8010e64:	4639      	mov	r1, r7
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff f9c6 	bl	80101f8 <_malloc_r>
 8010e6c:	b948      	cbnz	r0, 8010e82 <__smakebuf_r+0x46>
 8010e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e72:	059a      	lsls	r2, r3, #22
 8010e74:	d4ee      	bmi.n	8010e54 <__smakebuf_r+0x18>
 8010e76:	f023 0303 	bic.w	r3, r3, #3
 8010e7a:	f043 0302 	orr.w	r3, r3, #2
 8010e7e:	81a3      	strh	r3, [r4, #12]
 8010e80:	e7e2      	b.n	8010e48 <__smakebuf_r+0xc>
 8010e82:	89a3      	ldrh	r3, [r4, #12]
 8010e84:	6020      	str	r0, [r4, #0]
 8010e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	9b01      	ldr	r3, [sp, #4]
 8010e8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e92:	b15b      	cbz	r3, 8010eac <__smakebuf_r+0x70>
 8010e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f000 f81d 	bl	8010ed8 <_isatty_r>
 8010e9e:	b128      	cbz	r0, 8010eac <__smakebuf_r+0x70>
 8010ea0:	89a3      	ldrh	r3, [r4, #12]
 8010ea2:	f023 0303 	bic.w	r3, r3, #3
 8010ea6:	f043 0301 	orr.w	r3, r3, #1
 8010eaa:	81a3      	strh	r3, [r4, #12]
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	431d      	orrs	r5, r3
 8010eb0:	81a5      	strh	r5, [r4, #12]
 8010eb2:	e7cf      	b.n	8010e54 <__smakebuf_r+0x18>

08010eb4 <_fstat_r>:
 8010eb4:	b538      	push	{r3, r4, r5, lr}
 8010eb6:	4d07      	ldr	r5, [pc, #28]	@ (8010ed4 <_fstat_r+0x20>)
 8010eb8:	2300      	movs	r3, #0
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4608      	mov	r0, r1
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f7f1 fbeb 	bl	800269c <_fstat>
 8010ec6:	1c43      	adds	r3, r0, #1
 8010ec8:	d102      	bne.n	8010ed0 <_fstat_r+0x1c>
 8010eca:	682b      	ldr	r3, [r5, #0]
 8010ecc:	b103      	cbz	r3, 8010ed0 <_fstat_r+0x1c>
 8010ece:	6023      	str	r3, [r4, #0]
 8010ed0:	bd38      	pop	{r3, r4, r5, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20002260 	.word	0x20002260

08010ed8 <_isatty_r>:
 8010ed8:	b538      	push	{r3, r4, r5, lr}
 8010eda:	4d06      	ldr	r5, [pc, #24]	@ (8010ef4 <_isatty_r+0x1c>)
 8010edc:	2300      	movs	r3, #0
 8010ede:	4604      	mov	r4, r0
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	602b      	str	r3, [r5, #0]
 8010ee4:	f7f1 fbea 	bl	80026bc <_isatty>
 8010ee8:	1c43      	adds	r3, r0, #1
 8010eea:	d102      	bne.n	8010ef2 <_isatty_r+0x1a>
 8010eec:	682b      	ldr	r3, [r5, #0]
 8010eee:	b103      	cbz	r3, 8010ef2 <_isatty_r+0x1a>
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	bd38      	pop	{r3, r4, r5, pc}
 8010ef4:	20002260 	.word	0x20002260

08010ef8 <_sbrk_r>:
 8010ef8:	b538      	push	{r3, r4, r5, lr}
 8010efa:	4d06      	ldr	r5, [pc, #24]	@ (8010f14 <_sbrk_r+0x1c>)
 8010efc:	2300      	movs	r3, #0
 8010efe:	4604      	mov	r4, r0
 8010f00:	4608      	mov	r0, r1
 8010f02:	602b      	str	r3, [r5, #0]
 8010f04:	f7f1 fbf2 	bl	80026ec <_sbrk>
 8010f08:	1c43      	adds	r3, r0, #1
 8010f0a:	d102      	bne.n	8010f12 <_sbrk_r+0x1a>
 8010f0c:	682b      	ldr	r3, [r5, #0]
 8010f0e:	b103      	cbz	r3, 8010f12 <_sbrk_r+0x1a>
 8010f10:	6023      	str	r3, [r4, #0]
 8010f12:	bd38      	pop	{r3, r4, r5, pc}
 8010f14:	20002260 	.word	0x20002260

08010f18 <memcpy>:
 8010f18:	440a      	add	r2, r1
 8010f1a:	4291      	cmp	r1, r2
 8010f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f20:	d100      	bne.n	8010f24 <memcpy+0xc>
 8010f22:	4770      	bx	lr
 8010f24:	b510      	push	{r4, lr}
 8010f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f2e:	4291      	cmp	r1, r2
 8010f30:	d1f9      	bne.n	8010f26 <memcpy+0xe>
 8010f32:	bd10      	pop	{r4, pc}

08010f34 <__assert_func>:
 8010f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f36:	4614      	mov	r4, r2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4b09      	ldr	r3, [pc, #36]	@ (8010f60 <__assert_func+0x2c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4605      	mov	r5, r0
 8010f40:	68d8      	ldr	r0, [r3, #12]
 8010f42:	b954      	cbnz	r4, 8010f5a <__assert_func+0x26>
 8010f44:	4b07      	ldr	r3, [pc, #28]	@ (8010f64 <__assert_func+0x30>)
 8010f46:	461c      	mov	r4, r3
 8010f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f4c:	9100      	str	r1, [sp, #0]
 8010f4e:	462b      	mov	r3, r5
 8010f50:	4905      	ldr	r1, [pc, #20]	@ (8010f68 <__assert_func+0x34>)
 8010f52:	f000 f841 	bl	8010fd8 <fiprintf>
 8010f56:	f000 f851 	bl	8010ffc <abort>
 8010f5a:	4b04      	ldr	r3, [pc, #16]	@ (8010f6c <__assert_func+0x38>)
 8010f5c:	e7f4      	b.n	8010f48 <__assert_func+0x14>
 8010f5e:	bf00      	nop
 8010f60:	20000134 	.word	0x20000134
 8010f64:	0801155e 	.word	0x0801155e
 8010f68:	08011530 	.word	0x08011530
 8010f6c:	08011523 	.word	0x08011523

08010f70 <_calloc_r>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	fba1 5402 	umull	r5, r4, r1, r2
 8010f76:	b93c      	cbnz	r4, 8010f88 <_calloc_r+0x18>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	f7ff f93d 	bl	80101f8 <_malloc_r>
 8010f7e:	4606      	mov	r6, r0
 8010f80:	b928      	cbnz	r0, 8010f8e <_calloc_r+0x1e>
 8010f82:	2600      	movs	r6, #0
 8010f84:	4630      	mov	r0, r6
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	220c      	movs	r2, #12
 8010f8a:	6002      	str	r2, [r0, #0]
 8010f8c:	e7f9      	b.n	8010f82 <_calloc_r+0x12>
 8010f8e:	462a      	mov	r2, r5
 8010f90:	4621      	mov	r1, r4
 8010f92:	f7fe f9ef 	bl	800f374 <memset>
 8010f96:	e7f5      	b.n	8010f84 <_calloc_r+0x14>

08010f98 <__ascii_mbtowc>:
 8010f98:	b082      	sub	sp, #8
 8010f9a:	b901      	cbnz	r1, 8010f9e <__ascii_mbtowc+0x6>
 8010f9c:	a901      	add	r1, sp, #4
 8010f9e:	b142      	cbz	r2, 8010fb2 <__ascii_mbtowc+0x1a>
 8010fa0:	b14b      	cbz	r3, 8010fb6 <__ascii_mbtowc+0x1e>
 8010fa2:	7813      	ldrb	r3, [r2, #0]
 8010fa4:	600b      	str	r3, [r1, #0]
 8010fa6:	7812      	ldrb	r2, [r2, #0]
 8010fa8:	1e10      	subs	r0, r2, #0
 8010faa:	bf18      	it	ne
 8010fac:	2001      	movne	r0, #1
 8010fae:	b002      	add	sp, #8
 8010fb0:	4770      	bx	lr
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	e7fb      	b.n	8010fae <__ascii_mbtowc+0x16>
 8010fb6:	f06f 0001 	mvn.w	r0, #1
 8010fba:	e7f8      	b.n	8010fae <__ascii_mbtowc+0x16>

08010fbc <__ascii_wctomb>:
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	4608      	mov	r0, r1
 8010fc0:	b141      	cbz	r1, 8010fd4 <__ascii_wctomb+0x18>
 8010fc2:	2aff      	cmp	r2, #255	@ 0xff
 8010fc4:	d904      	bls.n	8010fd0 <__ascii_wctomb+0x14>
 8010fc6:	228a      	movs	r2, #138	@ 0x8a
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	f04f 30ff 	mov.w	r0, #4294967295
 8010fce:	4770      	bx	lr
 8010fd0:	700a      	strb	r2, [r1, #0]
 8010fd2:	2001      	movs	r0, #1
 8010fd4:	4770      	bx	lr
	...

08010fd8 <fiprintf>:
 8010fd8:	b40e      	push	{r1, r2, r3}
 8010fda:	b503      	push	{r0, r1, lr}
 8010fdc:	4601      	mov	r1, r0
 8010fde:	ab03      	add	r3, sp, #12
 8010fe0:	4805      	ldr	r0, [pc, #20]	@ (8010ff8 <fiprintf+0x20>)
 8010fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fe6:	6800      	ldr	r0, [r0, #0]
 8010fe8:	9301      	str	r3, [sp, #4]
 8010fea:	f7ff fd3d 	bl	8010a68 <_vfiprintf_r>
 8010fee:	b002      	add	sp, #8
 8010ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ff4:	b003      	add	sp, #12
 8010ff6:	4770      	bx	lr
 8010ff8:	20000134 	.word	0x20000134

08010ffc <abort>:
 8010ffc:	b508      	push	{r3, lr}
 8010ffe:	2006      	movs	r0, #6
 8011000:	f000 f82c 	bl	801105c <raise>
 8011004:	2001      	movs	r0, #1
 8011006:	f7f1 fb15 	bl	8002634 <_exit>

0801100a <_raise_r>:
 801100a:	291f      	cmp	r1, #31
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4605      	mov	r5, r0
 8011010:	460c      	mov	r4, r1
 8011012:	d904      	bls.n	801101e <_raise_r+0x14>
 8011014:	2316      	movs	r3, #22
 8011016:	6003      	str	r3, [r0, #0]
 8011018:	f04f 30ff 	mov.w	r0, #4294967295
 801101c:	bd38      	pop	{r3, r4, r5, pc}
 801101e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011020:	b112      	cbz	r2, 8011028 <_raise_r+0x1e>
 8011022:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011026:	b94b      	cbnz	r3, 801103c <_raise_r+0x32>
 8011028:	4628      	mov	r0, r5
 801102a:	f000 f831 	bl	8011090 <_getpid_r>
 801102e:	4622      	mov	r2, r4
 8011030:	4601      	mov	r1, r0
 8011032:	4628      	mov	r0, r5
 8011034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011038:	f000 b818 	b.w	801106c <_kill_r>
 801103c:	2b01      	cmp	r3, #1
 801103e:	d00a      	beq.n	8011056 <_raise_r+0x4c>
 8011040:	1c59      	adds	r1, r3, #1
 8011042:	d103      	bne.n	801104c <_raise_r+0x42>
 8011044:	2316      	movs	r3, #22
 8011046:	6003      	str	r3, [r0, #0]
 8011048:	2001      	movs	r0, #1
 801104a:	e7e7      	b.n	801101c <_raise_r+0x12>
 801104c:	2100      	movs	r1, #0
 801104e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011052:	4620      	mov	r0, r4
 8011054:	4798      	blx	r3
 8011056:	2000      	movs	r0, #0
 8011058:	e7e0      	b.n	801101c <_raise_r+0x12>
	...

0801105c <raise>:
 801105c:	4b02      	ldr	r3, [pc, #8]	@ (8011068 <raise+0xc>)
 801105e:	4601      	mov	r1, r0
 8011060:	6818      	ldr	r0, [r3, #0]
 8011062:	f7ff bfd2 	b.w	801100a <_raise_r>
 8011066:	bf00      	nop
 8011068:	20000134 	.word	0x20000134

0801106c <_kill_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d07      	ldr	r5, [pc, #28]	@ (801108c <_kill_r+0x20>)
 8011070:	2300      	movs	r3, #0
 8011072:	4604      	mov	r4, r0
 8011074:	4608      	mov	r0, r1
 8011076:	4611      	mov	r1, r2
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	f7f1 facb 	bl	8002614 <_kill>
 801107e:	1c43      	adds	r3, r0, #1
 8011080:	d102      	bne.n	8011088 <_kill_r+0x1c>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	b103      	cbz	r3, 8011088 <_kill_r+0x1c>
 8011086:	6023      	str	r3, [r4, #0]
 8011088:	bd38      	pop	{r3, r4, r5, pc}
 801108a:	bf00      	nop
 801108c:	20002260 	.word	0x20002260

08011090 <_getpid_r>:
 8011090:	f7f1 bab8 	b.w	8002604 <_getpid>

08011094 <_init>:
 8011094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011096:	bf00      	nop
 8011098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801109a:	bc08      	pop	{r3}
 801109c:	469e      	mov	lr, r3
 801109e:	4770      	bx	lr

080110a0 <_fini>:
 80110a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a2:	bf00      	nop
 80110a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110a6:	bc08      	pop	{r3}
 80110a8:	469e      	mov	lr, r3
 80110aa:	4770      	bx	lr
