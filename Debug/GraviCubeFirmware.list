
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bd0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08011d70  08011d70  00012d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012328  08012328  000142f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012328  08012328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012330  08012330  000142f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012330  08012330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012334  08012334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08012338  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fdc  200002f0  08012628  000142f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022cc  08012628  000152cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020357  00000000  00000000  00014320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a82  00000000  00000000  00034677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00039100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001369  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fcef  00000000  00000000  0003bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002220e  00000000  00000000  0005ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66db  00000000  00000000  0007dc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bec  00000000  00000000  00124394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0012bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011d58 	.word	0x08011d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	08011d58 	.word	0x08011d58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
 **		  TIMER-INTERRUPT	     **
 **********************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	static uint8_t interruptState = readData;
    if (htim->Instance == TIM4)  // Check if the interrupt comes from TIM4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        switch(interruptState)
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d827      	bhi.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f3d 	.word	0x08000f3d
 8000f14:	08000f4b 	.word	0x08000f4b
        {
        	case readData:
        		mpu6050_readData();
 8000f18:	f001 f9c6 	bl	80022a8 <_Z16mpu6050_readDatav>
        		interruptState++;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f26:	701a      	strb	r2, [r3, #0]
        	break;
 8000f28:	e013      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_X_Axis:
        		controlRoll();
 8000f2a:	f000 f965 	bl	80011f8 <_Z11controlRollv>
				interruptState++;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f38:	701a      	strb	r2, [r3, #0]
			break;
 8000f3a:	e00a      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Y_Axis:
				interruptState++;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f46:	701a      	strb	r2, [r3, #0]
			break;
 8000f48:	e003      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Z_Axis:
				interruptState = readData;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			break;
 8000f50:	bf00      	nop

        }
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	2000030c 	.word	0x2000030c
 8000f64:	00000000 	.word	0x00000000

08000f68 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>:
 **********************************
 **		  MOTOR-CLASS-DEF	     **
 **********************************
*/

Motor::Motor(TIM_HandleTypeDef *htim, unsigned int Channel, GPIO_TypeDef *motorPort, uint16_t directionPin, uint16_t enablePin, uint16_t brakePin)
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
{
	Motor::timer = htim;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	601a      	str	r2, [r3, #0]
	Motor::timerChannel = Channel;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
	Motor::motorPort = motorPort;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	609a      	str	r2, [r3, #8]
	Motor::directionPin = directionPin;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8b3a      	ldrh	r2, [r7, #24]
 8000f8c:	819a      	strh	r2, [r3, #12]
	Motor::enablePin = enablePin;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8bba      	ldrh	r2, [r7, #28]
 8000f92:	81da      	strh	r2, [r3, #14]
	Motor::brakePin = brakePin;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8c3a      	ldrh	r2, [r7, #32]
 8000f98:	821a      	strh	r2, [r3, #16]

	changeSpeed(MOTOR_BASE_SPEED);
 8000f9a:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8000fd8 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt+0x70>
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f81e 	bl	8000fe0 <_ZN5Motor11changeSpeedEd>

	HAL_TIM_PWM_Start(timer, timerChannel);  // Start PWM
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f007 ff82 	bl	8008eb8 <HAL_TIM_PWM_Start>

	changeDirection(CCW);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f870 	bl	800109c <_ZN5Motor15changeDirectionEb>

	changeBrakeState(enableBrake);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f884 	bl	80010cc <_ZN5Motor16changeBrakeStateEb>

	changeMotorState(disableMotor);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f898 	bl	80010fc <_ZN5Motor16changeMotorStateEb>
}
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40490000 	.word	0x40490000

08000fe0 <_ZN5Motor11changeSpeedEd>:

void Motor::changeSpeed(double newMotorSpeed)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	ed87 0b00 	vstr	d0, [r7]
	speed = newMotorSpeed;
 8000fec:	68f9      	ldr	r1, [r7, #12]
 8000fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff2:	e9c1 2306 	strd	r2, r3, [r1, #24]

	uint32_t CCR_Value = (uint32_t)((double)(__HAL_TIM_GET_AUTORELOAD(timer) + 1) * ((100.0 - speed) / 100.0));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffe:	3301      	adds	r3, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa87 	bl	8000514 <__aeabi_ui2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4920      	ldr	r1, [pc, #128]	@ (8001098 <_ZN5Motor11changeSpeedEd+0xb8>)
 8001016:	f7ff f93f 	bl	8000298 <__aeabi_dsub>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <_ZN5Motor11changeSpeedEd+0xb8>)
 8001028:	f7ff fc18 	bl	800085c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff fae8 	bl	8000608 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdba 	bl	8000bb8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <_ZN5Motor11changeSpeedEd+0x7c>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800105a:	e018      	b.n	800108e <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d105      	bne.n	8001070 <_ZN5Motor11changeSpeedEd+0x90>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800106e:	e00e      	b.n	800108e <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b08      	cmp	r3, #8
 8001076:	d105      	bne.n	8001084 <_ZN5Motor11changeSpeedEd+0xa4>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001082:	e004      	b.n	800108e <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bdb0      	pop	{r4, r5, r7, pc}
 8001096:	bf00      	nop
 8001098:	40590000 	.word	0x40590000

0800109c <_ZN5Motor15changeDirectionEb>:

void Motor::changeDirection(bool newMotorDirection)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	direction = newMotorDirection;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_GPIO_WritePin(motorPort, directionPin, (GPIO_PinState)direction);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6898      	ldr	r0, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	8999      	ldrh	r1, [r3, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	461a      	mov	r2, r3
 80010c0:	f003 f888 	bl	80041d4 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN5Motor16changeBrakeStateEb>:

void Motor::changeBrakeState(bool newBrakeState)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	brakeState = newBrakeState;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	HAL_GPIO_WritePin(motorPort, brakePin, (GPIO_PinState)brakeState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6898      	ldr	r0, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8a19      	ldrh	r1, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010ee:	461a      	mov	r2, r3
 80010f0:	f003 f870 	bl	80041d4 <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN5Motor16changeMotorStateEb>:

void Motor::changeMotorState(bool newMotorState)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
	motorState = newMotorState;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_GPIO_WritePin(motorPort, enablePin, (GPIO_PinState)motorState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	89d9      	ldrh	r1, [r3, #14]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800111e:	461a      	mov	r2, r3
 8001120:	f003 f858 	bl	80041d4 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZN5Motor9testMotorEv>:

void Motor::testMotor()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	static uint8_t PWMspeed = 0;
	static uint32_t timeSaveMotorTest = 0;
	if(HAL_GetTick() - timeSaveMotorTest >= 10000)
 8001134:	f001 fe40 	bl	8002db8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	4b2c      	ldr	r3, [pc, #176]	@ (80011ec <_ZN5Motor9testMotorEv+0xc0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001144:	4293      	cmp	r3, r2
 8001146:	bf8c      	ite	hi
 8001148:	2301      	movhi	r3, #1
 800114a:	2300      	movls	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d048      	beq.n	80011e4 <_ZN5Motor9testMotorEv+0xb8>
	{
		uint8_t newSpeed; // in %
		switch(PWMspeed)
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d02e      	beq.n	80011b8 <_ZN5Motor9testMotorEv+0x8c>
 800115a:	2b02      	cmp	r3, #2
 800115c:	dc3d      	bgt.n	80011da <_ZN5Motor9testMotorEv+0xae>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <_ZN5Motor9testMotorEv+0x3c>
 8001162:	2b01      	cmp	r3, #1
 8001164:	d014      	beq.n	8001190 <_ZN5Motor9testMotorEv+0x64>
 8001166:	e038      	b.n	80011da <_ZN5Motor9testMotorEv+0xae>
		{
			case 0:
				newSpeed = 50;
 8001168:	2332      	movs	r3, #50	@ 0x32
 800116a:	73fb      	strb	r3, [r7, #15]
				changeSpeed(newSpeed);
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9d0 	bl	8000514 <__aeabi_ui2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	ec43 2b10 	vmov	d0, r2, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff2f 	bl	8000fe0 <_ZN5Motor11changeSpeedEd>
				PWMspeed++;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 800118c:	701a      	strb	r2, [r3, #0]
			break;
 800118e:	e024      	b.n	80011da <_ZN5Motor9testMotorEv+0xae>

			case 1:
				newSpeed = 60;
 8001190:	233c      	movs	r3, #60	@ 0x3c
 8001192:	73fb      	strb	r3, [r7, #15]
				changeSpeed(newSpeed);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9bc 	bl	8000514 <__aeabi_ui2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff1b 	bl	8000fe0 <_ZN5Motor11changeSpeedEd>
				PWMspeed++;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 80011b4:	701a      	strb	r2, [r3, #0]
			break;
 80011b6:	e010      	b.n	80011da <_ZN5Motor9testMotorEv+0xae>

			case 2:
				newSpeed = 25;
 80011b8:	2319      	movs	r3, #25
 80011ba:	73fb      	strb	r3, [r7, #15]
				changeSpeed(newSpeed);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9a8 	bl	8000514 <__aeabi_ui2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b10 	vmov	d0, r2, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff07 	bl	8000fe0 <_ZN5Motor11changeSpeedEd>
				PWMspeed = 0;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_ZN5Motor9testMotorEv+0xc4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
			break;
 80011d8:	bf00      	nop
		}
		timeSaveMotorTest = HAL_GetTick();
 80011da:	f001 fded 	bl	8002db8 <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a02      	ldr	r2, [pc, #8]	@ (80011ec <_ZN5Motor9testMotorEv+0xc0>)
 80011e2:	6013      	str	r3, [r2, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000310 	.word	0x20000310
 80011f0:	2000030d 	.word	0x2000030d
 80011f4:	00000000 	.word	0x00000000

080011f8 <_Z11controlRollv>:
double Ki = 0.0;
double Kd = 2.0;
double alpha = 0.8;

void controlRoll()
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0
	double error, output, dt;
	static uint32_t lastTime = 0;
	static double errorIntegral = 0, previousOutput = 0, filteredGyroX = 0;

	switch(balanceMode)
 80011fe:	4b90      	ldr	r3, [pc, #576]	@ (8001440 <_Z11controlRollv+0x248>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b03      	cmp	r3, #3
 8001204:	f000 818c 	beq.w	8001520 <_Z11controlRollv+0x328>
 8001208:	2b03      	cmp	r3, #3
 800120a:	f300 819c 	bgt.w	8001546 <_Z11controlRollv+0x34e>
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8193 	beq.w	800153a <_Z11controlRollv+0x342>
 8001214:	2b02      	cmp	r3, #2
 8001216:	f040 8196 	bne.w	8001546 <_Z11controlRollv+0x34e>
	{
		case oneDimensional:
		{
			//PID
			uint32_t currentTime = HAL_GetTick();
 800121a:	f001 fdcd 	bl	8002db8 <HAL_GetTick>
 800121e:	6178      	str	r0, [r7, #20]
			if (lastTime == 0)
 8001220:	4b88      	ldr	r3, [pc, #544]	@ (8001444 <_Z11controlRollv+0x24c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <_Z11controlRollv+0x38>
			{
				lastTime = currentTime;
 8001228:	4a86      	ldr	r2, [pc, #536]	@ (8001444 <_Z11controlRollv+0x24c>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	6013      	str	r3, [r2, #0]
				return; // Skip first iteration
 800122e:	e18a      	b.n	8001546 <_Z11controlRollv+0x34e>
			}

			dt = (currentTime - lastTime) / 1000.0;
 8001230:	4b84      	ldr	r3, [pc, #528]	@ (8001444 <_Z11controlRollv+0x24c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f96b 	bl	8000514 <__aeabi_ui2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <_Z11controlRollv+0x250>)
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			lastTime = currentTime;
 8001250:	4a7c      	ldr	r2, [pc, #496]	@ (8001444 <_Z11controlRollv+0x24c>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	6013      	str	r3, [r2, #0]

			// Skip if dt is too large (system was paused)
			if (dt > 0.1)
 8001256:	a376      	add	r3, pc, #472	@ (adr r3, 8001430 <_Z11controlRollv+0x238>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001260:	f7ff fc62 	bl	8000b28 <__aeabi_dcmpgt>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <_Z11controlRollv+0x82>
			{
			    errorIntegral = 0;
 800126a:	4978      	ldr	r1, [pc, #480]	@ (800144c <_Z11controlRollv+0x254>)
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
			    return;
 8001278:	e165      	b.n	8001546 <_Z11controlRollv+0x34e>
			}

			error = 46.3 - filterRoll; //links = 90°, rechts = 0° => links negativer Fehler
 800127a:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <_Z11controlRollv+0x258>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	a16d      	add	r1, pc, #436	@ (adr r1, 8001438 <_Z11controlRollv+0x240>)
 8001282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001286:	f7ff f807 	bl	8000298 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2306 	strd	r2, r3, [r7, #24]

			//deadband to reduce noise
			if (gyroX > -0.5 && gyroX < 0.5) {
 8001292:	4b70      	ldr	r3, [pc, #448]	@ (8001454 <_Z11controlRollv+0x25c>)
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b6e      	ldr	r3, [pc, #440]	@ (8001458 <_Z11controlRollv+0x260>)
 800129e:	f7ff fc43 	bl	8000b28 <__aeabi_dcmpgt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d011      	beq.n	80012cc <_Z11controlRollv+0xd4>
 80012a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001454 <_Z11controlRollv+0x25c>)
 80012aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b6a      	ldr	r3, [pc, #424]	@ (800145c <_Z11controlRollv+0x264>)
 80012b4:	f7ff fc1a 	bl	8000aec <__aeabi_dcmplt>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <_Z11controlRollv+0xd4>
			    gyroX = 0;
 80012be:	4965      	ldr	r1, [pc, #404]	@ (8001454 <_Z11controlRollv+0x25c>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
			}

			filteredGyroX = alpha * gyroX + (1 - alpha) * filteredGyroX;
 80012cc:	4b64      	ldr	r3, [pc, #400]	@ (8001460 <_Z11controlRollv+0x268>)
 80012ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d2:	4b60      	ldr	r3, [pc, #384]	@ (8001454 <_Z11controlRollv+0x25c>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f996 	bl	8000608 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	461d      	mov	r5, r3
 80012e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001460 <_Z11controlRollv+0x268>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f04f 0000 	mov.w	r0, #0
 80012ee:	495d      	ldr	r1, [pc, #372]	@ (8001464 <_Z11controlRollv+0x26c>)
 80012f0:	f7fe ffd2 	bl	8000298 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001468 <_Z11controlRollv+0x270>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f981 	bl	8000608 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffc5 	bl	800029c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4954      	ldr	r1, [pc, #336]	@ (8001468 <_Z11controlRollv+0x270>)
 8001318:	e9c1 2300 	strd	r2, r3, [r1]

			errorIntegral += error * dt;
 800131c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001320:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001324:	f7ff f970 	bl	8000608 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	4b46      	ldr	r3, [pc, #280]	@ (800144c <_Z11controlRollv+0x254>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ffb1 	bl	800029c <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4943      	ldr	r1, [pc, #268]	@ (800144c <_Z11controlRollv+0x254>)
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

			// Integral windup protection
			if (errorIntegral > 50) errorIntegral = 50;
 8001344:	4b41      	ldr	r3, [pc, #260]	@ (800144c <_Z11controlRollv+0x254>)
 8001346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b47      	ldr	r3, [pc, #284]	@ (800146c <_Z11controlRollv+0x274>)
 8001350:	f7ff fbea 	bl	8000b28 <__aeabi_dcmpgt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <_Z11controlRollv+0x16e>
 800135a:	493c      	ldr	r1, [pc, #240]	@ (800144c <_Z11controlRollv+0x254>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b42      	ldr	r3, [pc, #264]	@ (800146c <_Z11controlRollv+0x274>)
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
			if (errorIntegral < -50) errorIntegral = -50;
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <_Z11controlRollv+0x254>)
 8001368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <_Z11controlRollv+0x278>)
 8001372:	f7ff fbbb 	bl	8000aec <__aeabi_dcmplt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <_Z11controlRollv+0x190>
 800137c:	4933      	ldr	r1, [pc, #204]	@ (800144c <_Z11controlRollv+0x254>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <_Z11controlRollv+0x278>)
 8001384:	e9c1 2300 	strd	r2, r3, [r1]

			output = Kp * error + Ki * errorIntegral - Kd * filteredGyroX;
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <_Z11controlRollv+0x27c>)
 800138a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001392:	f7ff f939 	bl	8000608 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <_Z11controlRollv+0x280>)
 80013a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a4:	4b29      	ldr	r3, [pc, #164]	@ (800144c <_Z11controlRollv+0x254>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f92d 	bl	8000608 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7fe ff71 	bl	800029c <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4614      	mov	r4, r2
 80013c0:	461d      	mov	r5, r3
 80013c2:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <_Z11controlRollv+0x284>)
 80013c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <_Z11controlRollv+0x270>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff f91b 	bl	8000608 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7fe ff5d 	bl	8000298 <__aeabi_dsub>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			// Rate limiting for smooth transitions
			double outputChange = output - previousOutput;
 80013e6:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <_Z11controlRollv+0x288>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013f0:	f7fe ff52 	bl	8000298 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	e9c7 2300 	strd	r2, r3, [r7]
			if (outputChange > MAX_PWM_CHANGE_RATE)
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <_Z11controlRollv+0x28c>)
 8001402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001406:	f7ff fb8f 	bl	8000b28 <__aeabi_dcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d03b      	beq.n	8001488 <_Z11controlRollv+0x290>
			{
				output = previousOutput + MAX_PWM_CHANGE_RATE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <_Z11controlRollv+0x288>)
 8001412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <_Z11controlRollv+0x28c>)
 800141c:	f7fe ff3e 	bl	800029c <__adddf3>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001428:	e044      	b.n	80014b4 <_Z11controlRollv+0x2bc>
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	9999999a 	.word	0x9999999a
 8001434:	3fb99999 	.word	0x3fb99999
 8001438:	66666666 	.word	0x66666666
 800143c:	40472666 	.word	0x40472666
 8001440:	20000018 	.word	0x20000018
 8001444:	20000320 	.word	0x20000320
 8001448:	408f4000 	.word	0x408f4000
 800144c:	20000328 	.word	0x20000328
 8001450:	20000568 	.word	0x20000568
 8001454:	20000560 	.word	0x20000560
 8001458:	bfe00000 	.word	0xbfe00000
 800145c:	3fe00000 	.word	0x3fe00000
 8001460:	20000010 	.word	0x20000010
 8001464:	3ff00000 	.word	0x3ff00000
 8001468:	20000338 	.word	0x20000338
 800146c:	40490000 	.word	0x40490000
 8001470:	c0490000 	.word	0xc0490000
 8001474:	20000000 	.word	0x20000000
 8001478:	20000318 	.word	0x20000318
 800147c:	20000008 	.word	0x20000008
 8001480:	20000330 	.word	0x20000330
 8001484:	40440000 	.word	0x40440000
			}
			else if (outputChange < -MAX_PWM_CHANGE_RATE)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <_Z11controlRollv+0x354>)
 800148e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001492:	f7ff fb2b 	bl	8000aec <__aeabi_dcmplt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <_Z11controlRollv+0x2bc>
			{
				output = previousOutput - MAX_PWM_CHANGE_RATE;
 800149c:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <_Z11controlRollv+0x358>)
 800149e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <_Z11controlRollv+0x35c>)
 80014a8:	f7fe fef6 	bl	8000298 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			}

			previousOutput = output;
 80014b4:	4926      	ldr	r1, [pc, #152]	@ (8001550 <_Z11controlRollv+0x358>)
 80014b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]

			double targetSpeed = MOTOR_BASE_SPEED + output;
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <_Z11controlRollv+0x360>)
 80014c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014c8:	f7fe fee8 	bl	800029c <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	e9c7 2308 	strd	r2, r3, [r7, #32]

			//The reaction wheel is spinning to the right
			//faster speed = correction to the left
			//slower speed = correction to the right

			if (targetSpeed > MOTOR_MAX_SPEED) targetSpeed = MOTOR_MAX_SPEED;
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <_Z11controlRollv+0x364>)
 80014da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014de:	f7ff fb23 	bl	8000b28 <__aeabi_dcmpgt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <_Z11controlRollv+0x2fa>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <_Z11controlRollv+0x364>)
 80014ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if (targetSpeed < MOTOR_MIN_SPEED) targetSpeed = MOTOR_MIN_SPEED;
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <_Z11controlRollv+0x368>)
 80014f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014fc:	f7ff faf6 	bl	8000aec <__aeabi_dcmplt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <_Z11controlRollv+0x318>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <_Z11controlRollv+0x368>)
 800150c:	e9c7 2308 	strd	r2, r3, [r7, #32]

			Motor_3->changeSpeed(targetSpeed);
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <_Z11controlRollv+0x36c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	ed97 0b08 	vldr	d0, [r7, #32]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fd61 	bl	8000fe0 <_ZN5Motor11changeSpeedEd>

		break;
 800151e:	e012      	b.n	8001546 <_Z11controlRollv+0x34e>
		}
		case threeDimensional:
			error = 45 - filterRoll;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <_Z11controlRollv+0x370>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f04f 0000 	mov.w	r0, #0
 800152a:	4910      	ldr	r1, [pc, #64]	@ (800156c <_Z11controlRollv+0x374>)
 800152c:	f7fe feb4 	bl	8000298 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 2306 	strd	r2, r3, [r7, #24]
		break;
 8001538:	e005      	b.n	8001546 <_Z11controlRollv+0x34e>

		case test:
			Motor_3->testMotor();
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <_Z11controlRollv+0x36c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fdf4 	bl	800112c <_ZN5Motor9testMotorEv>
		break;
 8001544:	bf00      	nop
	}
}
 8001546:	3730      	adds	r7, #48	@ 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	c0440000 	.word	0xc0440000
 8001550:	20000330 	.word	0x20000330
 8001554:	40440000 	.word	0x40440000
 8001558:	40490000 	.word	0x40490000
 800155c:	40554000 	.word	0x40554000
 8001560:	402e0000 	.word	0x402e0000
 8001564:	20000524 	.word	0x20000524
 8001568:	20000568 	.word	0x20000568
 800156c:	40468000 	.word	0x40468000

08001570 <_Z8blinkLEDm>:
#include "functions.h"

extern ADC_HandleTypeDef hadc1;

void blinkLED(uint32_t interval = 1000)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	static uint32_t timeSaveBlink = HAL_GetTick();
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <_Z8blinkLEDm+0x80>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f3bf 8f5b 	dmb	ish
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <_Z8blinkLEDm+0x48>
 8001592:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <_Z8blinkLEDm+0x80>)
 8001594:	f00d fb56 	bl	800ec44 <__cxa_guard_acquire>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <_Z8blinkLEDm+0x48>
 80015a8:	f001 fc06 	bl	8002db8 <HAL_GetTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <_Z8blinkLEDm+0x84>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	480f      	ldr	r0, [pc, #60]	@ (80015f0 <_Z8blinkLEDm+0x80>)
 80015b4:	f00d fb52 	bl	800ec5c <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= interval)
 80015b8:	f001 fbfe 	bl	8002db8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <_Z8blinkLEDm+0x84>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	bf94      	ite	ls
 80015ca:	2301      	movls	r3, #1
 80015cc:	2300      	movhi	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <_Z8blinkLEDm+0x76>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <_Z8blinkLEDm+0x88>)
 80015d8:	f002 fe15 	bl	8004206 <HAL_GPIO_TogglePin>
		timeSaveBlink = HAL_GetTick();
 80015dc:	f001 fbec 	bl	8002db8 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <_Z8blinkLEDm+0x84>)
 80015e4:	6013      	str	r3, [r2, #0]
	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000344 	.word	0x20000344
 80015f4:	20000340 	.word	0x20000340
 80015f8:	40020400 	.word	0x40020400

080015fc <_Z18readBatteryVoltagev>:

float readBatteryVoltage()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
  uint32_t adcValue;
  float voltage;

  // Start ADC conversion
  HAL_ADC_Start(&hadc1);
 8001602:	4813      	ldr	r0, [pc, #76]	@ (8001650 <_Z18readBatteryVoltagev+0x54>)
 8001604:	f001 fc4c 	bl	8002ea0 <HAL_ADC_Start>

  // Wait for conversion to complete
  HAL_ADC_PollForConversion(&hadc1, 100);
 8001608:	2164      	movs	r1, #100	@ 0x64
 800160a:	4811      	ldr	r0, [pc, #68]	@ (8001650 <_Z18readBatteryVoltagev+0x54>)
 800160c:	f001 fcfc 	bl	8003008 <HAL_ADC_PollForConversion>

  // Read ADC value
  adcValue = HAL_ADC_GetValue(&hadc1);
 8001610:	480f      	ldr	r0, [pc, #60]	@ (8001650 <_Z18readBatteryVoltagev+0x54>)
 8001612:	f001 fd84 	bl	800311e <HAL_ADC_GetValue>
 8001616:	60f8      	str	r0, [r7, #12]

  // Convert ADC value to voltage
  // For 12-bit ADC (0-4095), reference voltage 3.3V
  voltage = (float)adcValue * (3.3f / 4095.0f);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001654 <_Z18readBatteryVoltagev+0x58>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	edc7 7a02 	vstr	s15, [r7, #8]

  // Scale back to actual battery voltage using voltage divider ratio
  // Total resistance: 9.1kΩ + 3.3kΩ = 12.4kΩ
  // Division ratio: 12.4 / 3.3 = 3.76
  float batteryVoltage = voltage * (12.4f / 3.3f);
 800162e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001632:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001658 <_Z18readBatteryVoltagev+0x5c>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	edc7 7a01 	vstr	s15, [r7, #4]

  return batteryVoltage;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	ee07 3a90 	vmov	s15, r3
}
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000034c 	.word	0x2000034c
 8001654:	3a534067 	.word	0x3a534067
 8001658:	40707c1f 	.word	0x40707c1f

0800165c <_Z9hc05_initv>:
 **		  BT-MODULE INIT	     **
 **********************************
*/

void hc05_init()
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <_Z9hc05_initv+0x40>)
 8001664:	463c      	mov	r4, r7
 8001666:	461d      	mov	r5, r3
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001670:	c407      	stmia	r4!, {r0, r1, r2}
 8001672:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 8001674:	463b      	mov	r3, r7
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fe02 	bl	8000280 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4639      	mov	r1, r7
 8001682:	2364      	movs	r3, #100	@ 0x64
 8001684:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <_Z9hc05_initv+0x44>)
 8001686:	f008 fb13 	bl	8009cb0 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	4905      	ldr	r1, [pc, #20]	@ (80016a4 <_Z9hc05_initv+0x48>)
 800168e:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <_Z9hc05_initv+0x44>)
 8001690:	f008 fb99 	bl	8009dc6 <HAL_UART_Receive_IT>
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	08011d70 	.word	0x08011d70
 80016a0:	200004d8 	.word	0x200004d8
 80016a4:	20000348 	.word	0x20000348

080016a8 <HAL_UART_RxCpltCallback>:
 **********************************
*/
extern double Kp, Ki, Kd;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <HAL_UART_RxCpltCallback+0x120>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d17b      	bne.n	80017b2 <HAL_UART_RxCpltCallback+0x10a>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag_1D)
 80016ba:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <HAL_UART_RxCpltCallback+0x124>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b53      	cmp	r3, #83	@ 0x53
 80016c0:	d109      	bne.n	80016d6 <HAL_UART_RxCpltCallback+0x2e>
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <HAL_UART_RxCpltCallback+0x128>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag_1D = true;
 80016d0:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <HAL_UART_RxCpltCallback+0x128>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		switch(receivedBTData)
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_UART_RxCpltCallback+0x124>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3b61      	subs	r3, #97	@ 0x61
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d863      	bhi.n	80017a8 <HAL_UART_RxCpltCallback+0x100>
 80016e0:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <HAL_UART_RxCpltCallback+0x40>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001701 	.word	0x08001701
 80016ec:	0800171d 	.word	0x0800171d
 80016f0:	08001739 	.word	0x08001739
 80016f4:	08001755 	.word	0x08001755
 80016f8:	08001771 	.word	0x08001771
 80016fc:	0800178d 	.word	0x0800178d
		{
			case 'a':
				Kp += 1.0;
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <HAL_UART_RxCpltCallback+0x12c>)
 8001702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <HAL_UART_RxCpltCallback+0x130>)
 800170c:	f7fe fdc6 	bl	800029c <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	492f      	ldr	r1, [pc, #188]	@ (80017d4 <HAL_UART_RxCpltCallback+0x12c>)
 8001716:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800171a:	e045      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x100>

			case 'b':
				Kp += 1.0;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_UART_RxCpltCallback+0x12c>)
 800171e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_UART_RxCpltCallback+0x130>)
 8001728:	f7fe fdb8 	bl	800029c <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4928      	ldr	r1, [pc, #160]	@ (80017d4 <HAL_UART_RxCpltCallback+0x12c>)
 8001732:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001736:	e037      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x100>

			case 'c':
				Ki += 0.001;
 8001738:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <HAL_UART_RxCpltCallback+0x134>)
 800173a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173e:	a320      	add	r3, pc, #128	@ (adr r3, 80017c0 <HAL_UART_RxCpltCallback+0x118>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fdaa 	bl	800029c <__adddf3>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4923      	ldr	r1, [pc, #140]	@ (80017dc <HAL_UART_RxCpltCallback+0x134>)
 800174e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001752:	e029      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x100>

			case 'd':
				Ki -= 0.001;
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <HAL_UART_RxCpltCallback+0x134>)
 8001756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800175a:	a319      	add	r3, pc, #100	@ (adr r3, 80017c0 <HAL_UART_RxCpltCallback+0x118>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe fd9a 	bl	8000298 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	491c      	ldr	r1, [pc, #112]	@ (80017dc <HAL_UART_RxCpltCallback+0x134>)
 800176a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800176e:	e01b      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x100>

			case 'e':
				Kd += 1.0;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_UART_RxCpltCallback+0x138>)
 8001772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <HAL_UART_RxCpltCallback+0x130>)
 800177c:	f7fe fd8e 	bl	800029c <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4916      	ldr	r1, [pc, #88]	@ (80017e0 <HAL_UART_RxCpltCallback+0x138>)
 8001786:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800178a:	e00d      	b.n	80017a8 <HAL_UART_RxCpltCallback+0x100>

			case 'f':
				Kd -= 1.0;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_UART_RxCpltCallback+0x138>)
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_UART_RxCpltCallback+0x130>)
 8001798:	f7fe fd7e 	bl	8000298 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	490f      	ldr	r1, [pc, #60]	@ (80017e0 <HAL_UART_RxCpltCallback+0x138>)
 80017a2:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80017a6:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 80017a8:	2201      	movs	r2, #1
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <HAL_UART_RxCpltCallback+0x124>)
 80017ac:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <HAL_UART_RxCpltCallback+0x13c>)
 80017ae:	f008 fb0a 	bl	8009dc6 <HAL_UART_Receive_IT>
	}
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017c4:	3f50624d 	.word	0x3f50624d
 80017c8:	40004400 	.word	0x40004400
 80017cc:	20000348 	.word	0x20000348
 80017d0:	20000520 	.word	0x20000520
 80017d4:	20000000 	.word	0x20000000
 80017d8:	3ff00000 	.word	0x3ff00000
 80017dc:	20000318 	.word	0x20000318
 80017e0:	20000008 	.word	0x20000008
 80017e4:	200004d8 	.word	0x200004d8

080017e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001800:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001804:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001808:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <ITM_SendChar+0x2c>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <ITM_SendChar+0x2e>
 8001814:	2300      	movs	r3, #0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d010      	beq.n	800183c <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800181a:	e000      	b.n	800181e <ITM_SendChar+0x36>
    {
      __NOP();
 800181c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800181e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f4      	bne.n	800181c <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001832:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f001 fa4b 	bl	8002cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f94f 	bl	8001af8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f000 fb87 	bl	8001f6c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800185e:	f000 fb65 	bl	8001f2c <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8001862:	f00c fd05 	bl	800e270 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001866:	f000 fa15 	bl	8001c94 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 800186a:	f000 fa47 	bl	8001cfc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800186e:	f000 fb2f 	bl	8001ed0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8001872:	f000 fad1 	bl	8001e18 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 8001876:	f000 f9b1 	bl	8001bdc <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */

  Motor_3 = new Motor(&htim3, TIM_CHANNEL_1, GPIOB, GPIO_PIN_9, GPIO_PIN_5, GPIO_PIN_8);
 800187a:	2028      	movs	r0, #40	@ 0x28
 800187c:	f00d f9f1 	bl	800ec62 <_Znwj>
 8001880:	4603      	mov	r3, r0
 8001882:	461c      	mov	r4, r3
 8001884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2320      	movs	r3, #32
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4b88      	ldr	r3, [pc, #544]	@ (8001ab8 <main+0x26c>)
 8001896:	2200      	movs	r2, #0
 8001898:	4988      	ldr	r1, [pc, #544]	@ (8001abc <main+0x270>)
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff fb64 	bl	8000f68 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>
 80018a0:	4b87      	ldr	r3, [pc, #540]	@ (8001ac0 <main+0x274>)
 80018a2:	601c      	str	r4, [r3, #0]

  //MPU-6050 Init
  mpu6050_init(false);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 fc1b 	bl	80020e0 <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 80018aa:	f7ff fed7 	bl	800165c <_Z9hc05_initv>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
  */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	4884      	ldr	r0, [pc, #528]	@ (8001ac4 <main+0x278>)
 80018b4:	f002 fc8e 	bl	80041d4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	blinkLED(500);
 80018b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018bc:	f7ff fe58 	bl	8001570 <_Z8blinkLEDm>

	float batteryVoltage = readBatteryVoltage();
 80018c0:	f7ff fe9c 	bl	80015fc <_Z18readBatteryVoltagev>
 80018c4:	ed87 0a01 	vstr	s0, [r7, #4]

	static bool beepState = false;
	static bool startState = false;
	if(batteryVoltage < 10.0)
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d551      	bpl.n	800197e <main+0x132>
	{
		static uint32_t timeStart = HAL_GetTick();
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <main+0x27c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f3bf 8f5b 	dmb	ish
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <main+0xce>
 80018f4:	4874      	ldr	r0, [pc, #464]	@ (8001ac8 <main+0x27c>)
 80018f6:	f00d f9a5 	bl	800ec44 <__cxa_guard_acquire>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <main+0xce>
 800190a:	f001 fa55 	bl	8002db8 <HAL_GetTick>
 800190e:	4603      	mov	r3, r0
 8001910:	4a6e      	ldr	r2, [pc, #440]	@ (8001acc <main+0x280>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	486c      	ldr	r0, [pc, #432]	@ (8001ac8 <main+0x27c>)
 8001916:	f00d f9a1 	bl	800ec5c <__cxa_guard_release>
		if(!startState)
 800191a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad0 <main+0x284>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <main+0xec>
		{
			timeStart = HAL_GetTick();
 8001928:	f001 fa46 	bl	8002db8 <HAL_GetTick>
 800192c:	4603      	mov	r3, r0
 800192e:	4a67      	ldr	r2, [pc, #412]	@ (8001acc <main+0x280>)
 8001930:	6013      	str	r3, [r2, #0]
			startState = true;
 8001932:	4b67      	ldr	r3, [pc, #412]	@ (8001ad0 <main+0x284>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - timeStart >= 2000 && startState)
 8001938:	f001 fa3e 	bl	8002db8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <main+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001948:	d305      	bcc.n	8001956 <main+0x10a>
 800194a:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <main+0x284>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <main+0x10a>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <main+0x10c>
 8001956:	2300      	movs	r3, #0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d016      	beq.n	800198a <main+0x13e>
		{
			timeStart = HAL_GetTick();
 800195c:	f001 fa2c 	bl	8002db8 <HAL_GetTick>
 8001960:	4603      	mov	r3, r0
 8001962:	4a5a      	ldr	r2, [pc, #360]	@ (8001acc <main+0x280>)
 8001964:	6013      	str	r3, [r2, #0]
			beepState = true;
 8001966:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <main+0x288>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
			printf("%f \n", batteryVoltage);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7fe fdf3 	bl	8000558 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4858      	ldr	r0, [pc, #352]	@ (8001ad8 <main+0x28c>)
 8001978:	f00e fad6 	bl	800ff28 <iprintf>
 800197c:	e005      	b.n	800198a <main+0x13e>
		}
	}
	else
	{
		beepState = false;
 800197e:	4b55      	ldr	r3, [pc, #340]	@ (8001ad4 <main+0x288>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		startState = false;
 8001984:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <main+0x284>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	}

	static bool buzzerActive = false;

	static uint32_t timeSaveBeep = HAL_GetTick();
 800198a:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <main+0x290>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3bf 8f5b 	dmb	ish
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <main+0x17e>
 80019a4:	484d      	ldr	r0, [pc, #308]	@ (8001adc <main+0x290>)
 80019a6:	f00d f94d 	bl	800ec44 <__cxa_guard_acquire>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <main+0x17e>
 80019ba:	f001 f9fd 	bl	8002db8 <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <main+0x294>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4845      	ldr	r0, [pc, #276]	@ (8001adc <main+0x290>)
 80019c6:	f00d f949 	bl	800ec5c <__cxa_guard_release>
	if (beepState)
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <main+0x288>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <main+0x1b4>
	{
		if(HAL_GetTick() - timeSaveBeep >= 200)
 80019d2:	f001 f9f1 	bl	8002db8 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <main+0x294>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2bc7      	cmp	r3, #199	@ 0xc7
 80019e0:	bf8c      	ite	hi
 80019e2:	2301      	movhi	r3, #1
 80019e4:	2300      	movls	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <main+0x1cc>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 80019ec:	2104      	movs	r1, #4
 80019ee:	4835      	ldr	r0, [pc, #212]	@ (8001ac4 <main+0x278>)
 80019f0:	f002 fc09 	bl	8004206 <HAL_GPIO_TogglePin>
			timeSaveBeep = HAL_GetTick();
 80019f4:	f001 f9e0 	bl	8002db8 <HAL_GetTick>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a39      	ldr	r2, [pc, #228]	@ (8001ae0 <main+0x294>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <main+0x1cc>
		}
	}
	else if(!buzzerActive)
 8001a00:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <main+0x298>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <main+0x1cc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2104      	movs	r1, #4
 8001a12:	482c      	ldr	r0, [pc, #176]	@ (8001ac4 <main+0x278>)
 8001a14:	f002 fbde 	bl	80041d4 <HAL_GPIO_WritePin>
	}

	if (receivedStart_Flag_1D && balanceMode == idle)
 8001a18:	4b33      	ldr	r3, [pc, #204]	@ (8001ae8 <main+0x29c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f43f af4b 	beq.w	80018b8 <main+0x6c>
 8001a22:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <main+0x2a0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f47f af46 	bne.w	80018b8 <main+0x6c>
	{
	    static uint32_t timeSaveBuzzer = 0;

	    if (!buzzerActive)  // If the buzzer is not already on, start it
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <main+0x298>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00c      	beq.n	8001a54 <main+0x208>
	    {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Turn on buzzer
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4821      	ldr	r0, [pc, #132]	@ (8001ac4 <main+0x278>)
 8001a40:	f002 fbc8 	bl	80041d4 <HAL_GPIO_WritePin>
	        timeSaveBuzzer = HAL_GetTick(); // Save the current time
 8001a44:	f001 f9b8 	bl	8002db8 <HAL_GetTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a29      	ldr	r2, [pc, #164]	@ (8001af0 <main+0x2a4>)
 8001a4c:	6013      	str	r3, [r2, #0]
	        buzzerActive = true;
 8001a4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <main+0x298>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
	    }

	    if (buzzerActive && (HAL_GetTick() - timeSaveBuzzer >= 500)) // 500 ms delay
 8001a54:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <main+0x298>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00a      	beq.n	8001a72 <main+0x226>
 8001a5c:	f001 f9ac 	bl	8002db8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <main+0x2a4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a6c:	d301      	bcc.n	8001a72 <main+0x226>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <main+0x228>
 8001a72:	2300      	movs	r3, #0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f43f af1f 	beq.w	80018b8 <main+0x6c>
	    {
	        printf("Start \n");
 8001a7a:	481e      	ldr	r0, [pc, #120]	@ (8001af4 <main+0x2a8>)
 8001a7c:	f00e fabc 	bl	800fff8 <puts>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Turn off buzzer
 8001a80:	2201      	movs	r2, #1
 8001a82:	2104      	movs	r1, #4
 8001a84:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <main+0x278>)
 8001a86:	f002 fba5 	bl	80041d4 <HAL_GPIO_WritePin>
	        buzzerActive = false;  // Reset buzzer state
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <main+0x298>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	        {
	        	balanceMode = test;
	        }
	        else
	        {
	        	balanceMode = oneDimensional;
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <main+0x2a0>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
	        }

        	Motor_3->changeMotorState(enableMotor);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <main+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb2d 	bl	80010fc <_ZN5Motor16changeMotorStateEb>
        	Motor_3->changeBrakeState(disableBrake);
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <main+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb0f 	bl	80010cc <_ZN5Motor16changeBrakeStateEb>

	        receivedStart_Flag_1D = false; // Reset the Start Flag
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <main+0x29c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001ab4:	e700      	b.n	80018b8 <main+0x6c>
 8001ab6:	bf00      	nop
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	200003e8 	.word	0x200003e8
 8001ac0:	20000524 	.word	0x20000524
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	20000530 	.word	0x20000530
 8001acc:	2000052c 	.word	0x2000052c
 8001ad0:	20000529 	.word	0x20000529
 8001ad4:	20000528 	.word	0x20000528
 8001ad8:	08011d90 	.word	0x08011d90
 8001adc:	2000053c 	.word	0x2000053c
 8001ae0:	20000538 	.word	0x20000538
 8001ae4:	20000534 	.word	0x20000534
 8001ae8:	20000520 	.word	0x20000520
 8001aec:	20000018 	.word	0x20000018
 8001af0:	20000540 	.word	0x20000540
 8001af4:	08011d98 	.word	0x08011d98

08001af8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b094      	sub	sp, #80	@ 0x50
 8001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2230      	movs	r2, #48	@ 0x30
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00e fb56 	bl	80101b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <_Z18SystemClock_Configv+0xdc>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <_Z18SystemClock_Configv+0xdc>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <_Z18SystemClock_Configv+0xdc>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <_Z18SystemClock_Configv+0xe0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a25      	ldr	r2, [pc, #148]	@ (8001bd8 <_Z18SystemClock_Configv+0xe0>)
 8001b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <_Z18SystemClock_Configv+0xe0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b6c:	23c0      	movs	r3, #192	@ 0xc0
 8001b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 fbf9 	bl	8008374 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001b92:	f000 fa9f 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fe57 	bl	8008864 <HAL_RCC_ClockConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001bc6:	f000 fa85 	bl	80020d4 <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3750      	adds	r7, #80	@ 0x50
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000

08001bdc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bee:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001bf0:	4a26      	ldr	r2, [pc, #152]	@ (8001c8c <_ZL12MX_ADC1_Initv+0xb0>)
 8001bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c00:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <_ZL12MX_ADC1_Initv+0xb4>)
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c3a:	4813      	ldr	r0, [pc, #76]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c3c:	f001 f8ec 	bl	8002e18 <HAL_ADC_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001c50:	f000 fa40 	bl	80020d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c54:	230e      	movs	r3, #14
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <_ZL12MX_ADC1_Initv+0xac>)
 8001c66:	f001 fa67 	bl	8003138 <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001c7a:	f000 fa2b 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000034c 	.word	0x2000034c
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	0f000001 	.word	0x0f000001

08001c94 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c9a:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <_ZL12MX_I2C1_Initv+0x60>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <_ZL12MX_I2C1_Initv+0x64>)
 8001ca2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cd0:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001cd2:	f002 fab3 	bl	800423c <HAL_I2C_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001ce6:	f000 f9f5 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000394 	.word	0x20000394
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	000186a0 	.word	0x000186a0

08001cfc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08e      	sub	sp, #56	@ 0x38
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d2c:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d2e:	4a39      	ldr	r2, [pc, #228]	@ (8001e14 <_ZL12MX_TIM3_Initv+0x118>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001d32:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d40:	2263      	movs	r2, #99	@ 0x63
 8001d42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d50:	482f      	ldr	r0, [pc, #188]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d52:	f006 ffa5 	bl	8008ca0 <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001d66:	f000 f9b5 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	4826      	ldr	r0, [pc, #152]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d78:	f007 fb00 	bl	800937c <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001d8c:	f000 f9a2 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d90:	481f      	ldr	r0, [pc, #124]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001d92:	f007 f837 	bl	8008e04 <HAL_TIM_PWM_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001da6:	f000 f995 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	4619      	mov	r1, r3
 8001db8:	4815      	ldr	r0, [pc, #84]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001dba:	f007 fea7 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8001dce:	f000 f981 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd2:	2360      	movs	r3, #96	@ 0x60
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	4619      	mov	r1, r3
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001dea:	f007 fa05 	bl	80091f8 <HAL_TIM_PWM_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8001dfe:	f000 f969 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e02:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <_ZL12MX_TIM3_Initv+0x114>)
 8001e04:	f000 fd96 	bl	8002934 <HAL_TIM_MspPostInit>

}
 8001e08:	bf00      	nop
 8001e0a:	3738      	adds	r7, #56	@ 0x38
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200003e8 	.word	0x200003e8
 8001e14:	40000400 	.word	0x40000400

08001e18 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e36:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <_ZL12MX_TIM4_Initv+0xb4>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e5a:	481b      	ldr	r0, [pc, #108]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e5c:	f006 ff20 	bl	8008ca0 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001e70:	f000 f930 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4811      	ldr	r0, [pc, #68]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001e82:	f007 fa7b 	bl	800937c <HAL_TIM_ConfigClockSource>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001e96:	f000 f91d 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4808      	ldr	r0, [pc, #32]	@ (8001ec8 <_ZL12MX_TIM4_Initv+0xb0>)
 8001ea8:	f007 fe30 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001ebc:	f000 f90a 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000430 	.word	0x20000430
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ed6:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001eda:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001edc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f08:	f007 fe82 	bl	8009c10 <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf14      	ite	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	2300      	moveq	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001f1c:	f000 f8da 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200004d8 	.word	0x200004d8
 8001f28:	40004400 	.word	0x40004400

08001f2c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <_ZL11MX_DMA_Initv+0x3c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <_ZL11MX_DMA_Initv+0x3c>)
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <_ZL11MX_DMA_Initv+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	200f      	movs	r0, #15
 8001f54:	f001 fbf9 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f58:	200f      	movs	r0, #15
 8001f5a:	f001 fc12 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	@ 0x28
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b41      	ldr	r3, [pc, #260]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a40      	ldr	r2, [pc, #256]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a39      	ldr	r2, [pc, #228]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b37      	ldr	r3, [pc, #220]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b33      	ldr	r3, [pc, #204]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a32      	ldr	r2, [pc, #200]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b30      	ldr	r3, [pc, #192]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b29      	ldr	r3, [pc, #164]	@ (800208c <_ZL12MX_GPIO_Initv+0x120>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	4826      	ldr	r0, [pc, #152]	@ (8002090 <_ZL12MX_GPIO_Initv+0x124>)
 8001ff8:	f002 f8ec 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2110      	movs	r1, #16
 8002000:	4824      	ldr	r0, [pc, #144]	@ (8002094 <_ZL12MX_GPIO_Initv+0x128>)
 8002002:	f002 f8e7 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 7149 	mov.w	r1, #804	@ 0x324
 800200c:	4822      	ldr	r0, [pc, #136]	@ (8002098 <_ZL12MX_GPIO_Initv+0x12c>)
 800200e:	f002 f8e1 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002012:	2307      	movs	r3, #7
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4819      	ldr	r0, [pc, #100]	@ (8002090 <_ZL12MX_GPIO_Initv+0x124>)
 800202a:	f001 ff4f 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800202e:	2310      	movs	r3, #16
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4813      	ldr	r0, [pc, #76]	@ (8002094 <_ZL12MX_GPIO_Initv+0x128>)
 8002046:	f001 ff41 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800204a:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	@ (8002098 <_ZL12MX_GPIO_Initv+0x12c>)
 8002064:	f001 ff32 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800206e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4804      	ldr	r0, [pc, #16]	@ (8002090 <_ZL12MX_GPIO_Initv+0x124>)
 8002080:	f001 ff24 	bl	8003ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	40020800 	.word	0x40020800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020400 	.word	0x40020400

0800209c <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e009      	b.n	80020c2 <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb96 	bl	80017e8 <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbf1      	blt.n	80020ae <_write+0x12>
		}
		return len;
 80020ca:	687b      	ldr	r3, [r7, #4]
	}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <Error_Handler+0x8>

080020e0 <_Z12mpu6050_initb>:
 **		  IMU-INITIALIZATION	     **
 **********************************
*/

void mpu6050_init(bool interruptEnable)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 80020ea:	2364      	movs	r3, #100	@ 0x64
 80020ec:	2201      	movs	r2, #1
 80020ee:	21d0      	movs	r1, #208	@ 0xd0
 80020f0:	4861      	ldr	r0, [pc, #388]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 80020f2:	f002 fd29 	bl	8004b48 <HAL_I2C_IsDeviceReady>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 8002100:	485e      	ldr	r0, [pc, #376]	@ (800227c <_Z12mpu6050_initb+0x19c>)
 8002102:	f00d ff79 	bl	800fff8 <puts>
 8002106:	e002      	b.n	800210e <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 8002108:	485d      	ldr	r0, [pc, #372]	@ (8002280 <_Z12mpu6050_initb+0x1a0>)
 800210a:	f00d ff75 	bl	800fff8 <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 800210e:	2300      	movs	r3, #0
 8002110:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8002112:	2364      	movs	r3, #100	@ 0x64
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2301      	movs	r3, #1
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	f107 030e 	add.w	r3, r7, #14
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2301      	movs	r3, #1
 8002122:	226b      	movs	r2, #107	@ 0x6b
 8002124:	21d0      	movs	r1, #208	@ 0xd0
 8002126:	4854      	ldr	r0, [pc, #336]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 8002128:	f002 f9e2 	bl	80044f0 <HAL_I2C_Mem_Write>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d110      	bne.n	8002158 <_Z12mpu6050_initb+0x78>
	{
		printf("Exited sleep mode \n");
 8002136:	4853      	ldr	r0, [pc, #332]	@ (8002284 <_Z12mpu6050_initb+0x1a4>)
 8002138:	f00d ff5e 	bl	800fff8 <puts>
		if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 800213c:	4852      	ldr	r0, [pc, #328]	@ (8002288 <_Z12mpu6050_initb+0x1a8>)
 800213e:	f006 fdff 	bl	8008d40 <HAL_TIM_Base_Start_IT>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <_Z12mpu6050_initb+0x7e>
		{
			// Starting Error
			Error_Handler();
 8002152:	f7ff ffbf 	bl	80020d4 <Error_Handler>
 8002156:	e002      	b.n	800215e <_Z12mpu6050_initb+0x7e>
		}
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 8002158:	484c      	ldr	r0, [pc, #304]	@ (800228c <_Z12mpu6050_initb+0x1ac>)
 800215a:	f00d ff4d 	bl	800fff8 <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 800215e:	2364      	movs	r3, #100	@ 0x64
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2301      	movs	r3, #1
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	f107 030e 	add.w	r3, r7, #14
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	221a      	movs	r2, #26
 8002170:	21d1      	movs	r1, #209	@ 0xd1
 8002172:	4841      	ldr	r0, [pc, #260]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 8002174:	f002 fab6 	bl	80046e4 <HAL_I2C_Mem_Read>
 8002178:	4603      	mov	r3, r0
 800217a:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	f023 0306 	bic.w	r3, r3, #6
 8002182:	b2db      	uxtb	r3, r3
 8002184:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8002186:	2364      	movs	r3, #100	@ 0x64
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	2301      	movs	r3, #1
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	f107 030e 	add.w	r3, r7, #14
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2301      	movs	r3, #1
 8002196:	221a      	movs	r2, #26
 8002198:	21d0      	movs	r1, #208	@ 0xd0
 800219a:	4837      	ldr	r0, [pc, #220]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 800219c:	f002 f9a8 	bl	80044f0 <HAL_I2C_Mem_Write>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <_Z12mpu6050_initb+0xd4>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 80021aa:	2101      	movs	r1, #1
 80021ac:	4838      	ldr	r0, [pc, #224]	@ (8002290 <_Z12mpu6050_initb+0x1b0>)
 80021ae:	f00d febb 	bl	800ff28 <iprintf>
 80021b2:	e002      	b.n	80021ba <_Z12mpu6050_initb+0xda>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 80021b4:	4837      	ldr	r0, [pc, #220]	@ (8002294 <_Z12mpu6050_initb+0x1b4>)
 80021b6:	f00d ff1f 	bl	800fff8 <puts>
	}

	//Interrupt-Enable
	if(interruptEnable)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d056      	beq.n	800226e <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 80021c0:	2364      	movs	r3, #100	@ 0x64
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2301      	movs	r3, #1
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f107 030e 	add.w	r3, r7, #14
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	2237      	movs	r2, #55	@ 0x37
 80021d2:	21d1      	movs	r1, #209	@ 0xd1
 80021d4:	4828      	ldr	r0, [pc, #160]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 80021d6:	f002 fa85 	bl	80046e4 <HAL_I2C_Mem_Read>
 80021da:	4603      	mov	r3, r0
 80021dc:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80021e8:	2364      	movs	r3, #100	@ 0x64
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2301      	movs	r3, #1
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	f107 030e 	add.w	r3, r7, #14
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	2237      	movs	r2, #55	@ 0x37
 80021fa:	21d0      	movs	r1, #208	@ 0xd0
 80021fc:	481e      	ldr	r0, [pc, #120]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 80021fe:	f002 f977 	bl	80044f0 <HAL_I2C_Mem_Write>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 800220c:	4822      	ldr	r0, [pc, #136]	@ (8002298 <_Z12mpu6050_initb+0x1b8>)
 800220e:	f00d fef3 	bl	800fff8 <puts>
 8002212:	e002      	b.n	800221a <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 8002214:	4821      	ldr	r0, [pc, #132]	@ (800229c <_Z12mpu6050_initb+0x1bc>)
 8002216:	f00d feef 	bl	800fff8 <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 800221a:	2364      	movs	r3, #100	@ 0x64
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f107 030e 	add.w	r3, r7, #14
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	2238      	movs	r2, #56	@ 0x38
 800222c:	21d1      	movs	r1, #209	@ 0xd1
 800222e:	4812      	ldr	r0, [pc, #72]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 8002230:	f002 fa58 	bl	80046e4 <HAL_I2C_Mem_Read>
 8002234:	4603      	mov	r3, r0
 8002236:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 800223c:	2364      	movs	r3, #100	@ 0x64
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 030e 	add.w	r3, r7, #14
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	2238      	movs	r2, #56	@ 0x38
 800224e:	21d0      	movs	r1, #208	@ 0xd0
 8002250:	4809      	ldr	r0, [pc, #36]	@ (8002278 <_Z12mpu6050_initb+0x198>)
 8002252:	f002 f94d 	bl	80044f0 <HAL_I2C_Mem_Write>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 8002260:	480f      	ldr	r0, [pc, #60]	@ (80022a0 <_Z12mpu6050_initb+0x1c0>)
 8002262:	f00d fec9 	bl	800fff8 <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8002266:	e002      	b.n	800226e <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8002268:	480e      	ldr	r0, [pc, #56]	@ (80022a4 <_Z12mpu6050_initb+0x1c4>)
 800226a:	f00d fec5 	bl	800fff8 <puts>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000394 	.word	0x20000394
 800227c:	08011da0 	.word	0x08011da0
 8002280:	08011db8 	.word	0x08011db8
 8002284:	08011dd4 	.word	0x08011dd4
 8002288:	20000430 	.word	0x20000430
 800228c:	08011de8 	.word	0x08011de8
 8002290:	08011e04 	.word	0x08011e04
 8002294:	08011e28 	.word	0x08011e28
 8002298:	08011e54 	.word	0x08011e54
 800229c:	08011e80 	.word	0x08011e80
 80022a0:	08011e9c 	.word	0x08011e9c
 80022a4:	08011ebc 	.word	0x08011ebc

080022a8 <_Z16mpu6050_readDatav>:
 **		  READ IMU-SENSOR	     **
 **********************************
*/

void mpu6050_readData()
{
 80022a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022ac:	b096      	sub	sp, #88	@ 0x58
 80022ae:	af04      	add	r7, sp, #16
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 80022b0:	48b7      	ldr	r0, [pc, #732]	@ (8002590 <_Z16mpu6050_readDatav+0x2e8>)
 80022b2:	f002 ffd1 	bl	8005258 <HAL_I2C_GetState>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 81e3 	beq.w	800268e <_Z16mpu6050_readDatav+0x3e6>
	{
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14, 100);
 80022c8:	2364      	movs	r3, #100	@ 0x64
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	230e      	movs	r3, #14
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	4bb0      	ldr	r3, [pc, #704]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	223b      	movs	r2, #59	@ 0x3b
 80022d8:	21d1      	movs	r1, #209	@ 0xd1
 80022da:	48ad      	ldr	r0, [pc, #692]	@ (8002590 <_Z16mpu6050_readDatav+0x2e8>)
 80022dc:	f002 fa02 	bl	80046e4 <HAL_I2C_Mem_Read>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		if(ret == HAL_OK)
 80022e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 81cf 	bne.w	800268e <_Z16mpu6050_readDatav+0x3e6>
			double accX, accY, accZ, gyroY, gyroZ, dt, accRoll, accPitch;
			static double gyroAngleX = 0.0, gyroAngleY = 0.0;
			static uint32_t currentTime, previousTime;

			//Accelerometer Data (Registers 59 to 64)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2110      	movs	r1, #16
 80022f4:	48a8      	ldr	r0, [pc, #672]	@ (8002598 <_Z16mpu6050_readDatav+0x2f0>)
 80022f6:	f001 ff6d 	bl	80041d4 <HAL_GPIO_WritePin>
			accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 80022fa:	4ba6      	ldr	r3, [pc, #664]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	4ba4      	ldr	r3, [pc, #656]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	b21b      	sxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b21b      	sxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f911 	bl	8000534 <__aeabi_i2d>
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4ba1      	ldr	r3, [pc, #644]	@ (800259c <_Z16mpu6050_readDatav+0x2f4>)
 8002318:	f7fe faa0 	bl	800085c <__aeabi_ddiv>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			//printf("Accel-X [g]: %f \n", accX);

			accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 8002324:	4b9b      	ldr	r3, [pc, #620]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b21a      	sxth	r2, r3
 800232c:	4b99      	ldr	r3, [pc, #612]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 800232e:	78db      	ldrb	r3, [r3, #3]
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21b      	sxth	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f8fc 	bl	8000534 <__aeabi_i2d>
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b96      	ldr	r3, [pc, #600]	@ (800259c <_Z16mpu6050_readDatav+0x2f4>)
 8002342:	f7fe fa8b 	bl	800085c <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			//printf("Accel-Y [g]: %f \n", accY);

			accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 800234e:	4b91      	ldr	r3, [pc, #580]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b8f      	ldr	r3, [pc, #572]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 8002358:	795b      	ldrb	r3, [r3, #5]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f8e7 	bl	8000534 <__aeabi_i2d>
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b8c      	ldr	r3, [pc, #560]	@ (800259c <_Z16mpu6050_readDatav+0x2f4>)
 800236c:	f7fe fa76 	bl	800085c <__aeabi_ddiv>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			//printf("Accel-Z [g]: %f \n", accZ);

			//Roll and Pitch Angles from Accelerometer
			accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8002378:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800237a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800237c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002384:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002388:	f7fe f93e 	bl	8000608 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4690      	mov	r8, r2
 8002392:	4699      	mov	r9, r3
 8002394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002398:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800239c:	f7fe f934 	bl	8000608 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4640      	mov	r0, r8
 80023a6:	4649      	mov	r1, r9
 80023a8:	f7fd ff78 	bl	800029c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	ec43 2b17 	vmov	d7, r2, r3
 80023b4:	eeb0 0a47 	vmov.f32	s0, s14
 80023b8:	eef0 0a67 	vmov.f32	s1, s15
 80023bc:	f00c fc6c 	bl	800ec98 <sqrt>
 80023c0:	eeb0 7a40 	vmov.f32	s14, s0
 80023c4:	eef0 7a60 	vmov.f32	s15, s1
 80023c8:	eeb0 1a47 	vmov.f32	s2, s14
 80023cc:	eef0 1a67 	vmov.f32	s3, s15
 80023d0:	ec45 4b10 	vmov	d0, r4, r5
 80023d4:	f00c fc5e 	bl	800ec94 <atan2>
 80023d8:	ec51 0b10 	vmov	r0, r1, d0
 80023dc:	a368      	add	r3, pc, #416	@ (adr r3, 8002580 <_Z16mpu6050_readDatav+0x2d8>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe f911 	bl	8000608 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	e9c7 2308 	strd	r2, r3, [r7, #32]

			/*estimation that works only if sensor is level (small pitch angle)
			accRoll = atan2(accY, accZ) * 57.3;
			printf("Roll1: %f \n", accRoll);
			*/
			accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 80023ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80023f6:	f7fe f907 	bl	8000608 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4614      	mov	r4, r2
 8002400:	461d      	mov	r5, r3
 8002402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800240a:	f7fe f8fd 	bl	8000608 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f7fd ff41 	bl	800029c <__adddf3>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	ec43 2b17 	vmov	d7, r2, r3
 8002422:	eeb0 0a47 	vmov.f32	s0, s14
 8002426:	eef0 0a67 	vmov.f32	s1, s15
 800242a:	f00c fc35 	bl	800ec98 <sqrt>
 800242e:	eeb0 7a40 	vmov.f32	s14, s0
 8002432:	eef0 7a60 	vmov.f32	s15, s1
 8002436:	eeb0 1a47 	vmov.f32	s2, s14
 800243a:	eef0 1a67 	vmov.f32	s3, s15
 800243e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8002442:	f00c fc27 	bl	800ec94 <atan2>
 8002446:	ec51 0b10 	vmov	r0, r1, d0
 800244a:	a34d      	add	r3, pc, #308	@ (adr r3, 8002580 <_Z16mpu6050_readDatav+0x2d8>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fe f8da 	bl	8000608 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	e9c7 2306 	strd	r2, r3, [r7, #24]


			//Temperature Data (Registers 65 and 66)

			//Gyroscope Data (Registers 67 to 72)
			currentTime = HAL_GetTick();
 800245c:	f000 fcac 	bl	8002db8 <HAL_GetTick>
 8002460:	4603      	mov	r3, r0
 8002462:	4a4f      	ldr	r2, [pc, #316]	@ (80025a0 <_Z16mpu6050_readDatav+0x2f8>)
 8002464:	6013      	str	r3, [r2, #0]
			dt = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8002466:	4b4e      	ldr	r3, [pc, #312]	@ (80025a0 <_Z16mpu6050_readDatav+0x2f8>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <_Z16mpu6050_readDatav+0x2fc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f84f 	bl	8000514 <__aeabi_ui2d>
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b4b      	ldr	r3, [pc, #300]	@ (80025a8 <_Z16mpu6050_readDatav+0x300>)
 800247c:	f7fe f9ee 	bl	800085c <__aeabi_ddiv>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	e9c7 2304 	strd	r2, r3, [r7, #16]
			previousTime = currentTime;
 8002488:	4b45      	ldr	r3, [pc, #276]	@ (80025a0 <_Z16mpu6050_readDatav+0x2f8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a45      	ldr	r2, [pc, #276]	@ (80025a4 <_Z16mpu6050_readDatav+0x2fc>)
 800248e:	6013      	str	r3, [r2, #0]

			gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 8002492:	7a1b      	ldrb	r3, [r3, #8]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 800249a:	7a5b      	ldrb	r3, [r3, #9]
 800249c:	b21b      	sxth	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f846 	bl	8000534 <__aeabi_i2d>
 80024a8:	a337      	add	r3, pc, #220	@ (adr r3, 8002588 <_Z16mpu6050_readDatav+0x2e0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f9d5 	bl	800085c <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	493d      	ldr	r1, [pc, #244]	@ (80025ac <_Z16mpu6050_readDatav+0x304>)
 80024b8:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("Gyro-X [°/s]: %f \n", gyroX);

			gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 80024bc:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80024be:	7a9b      	ldrb	r3, [r3, #10]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	4b33      	ldr	r3, [pc, #204]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80024c6:	7adb      	ldrb	r3, [r3, #11]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f830 	bl	8000534 <__aeabi_i2d>
 80024d4:	a32c      	add	r3, pc, #176	@ (adr r3, 8002588 <_Z16mpu6050_readDatav+0x2e0>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f9bf 	bl	800085c <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			//printf("Gyro-Y [°/s]: %f \n", gyroY);

			gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80024e8:	7b1b      	ldrb	r3, [r3, #12]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <_Z16mpu6050_readDatav+0x2ec>)
 80024f0:	7b5b      	ldrb	r3, [r3, #13]
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f81b 	bl	8000534 <__aeabi_i2d>
 80024fe:	a322      	add	r3, pc, #136	@ (adr r3, 8002588 <_Z16mpu6050_readDatav+0x2e0>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe f9aa 	bl	800085c <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	e9c7 2300 	strd	r2, r3, [r7]
			//printf("Gyro-Z [°/s]: %f \n", gyroZ);

			//Angles and yaw from Gyroscope
			gyroAngleX += gyroX * dt;
 8002510:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <_Z16mpu6050_readDatav+0x304>)
 8002512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002516:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800251a:	f7fe f875 	bl	8000608 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <_Z16mpu6050_readDatav+0x308>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fd feb6 	bl	800029c <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	491e      	ldr	r1, [pc, #120]	@ (80025b0 <_Z16mpu6050_readDatav+0x308>)
 8002536:	e9c1 2300 	strd	r2, r3, [r1]
			gyroAngleY += gyroY * dt;
 800253a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800253e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002542:	f7fe f861 	bl	8000608 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <_Z16mpu6050_readDatav+0x30c>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fd fea2 	bl	800029c <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4915      	ldr	r1, [pc, #84]	@ (80025b4 <_Z16mpu6050_readDatav+0x30c>)
 800255e:	e9c1 2300 	strd	r2, r3, [r1]
			gyroYaw += gyroZ * dt;
 8002562:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800256a:	f7fe f84d 	bl	8000608 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <_Z16mpu6050_readDatav+0x310>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	e01e      	b.n	80025bc <_Z16mpu6050_readDatav+0x314>
 800257e:	bf00      	nop
 8002580:	c63f1412 	.word	0xc63f1412
 8002584:	404ca5dc 	.word	0x404ca5dc
 8002588:	00000000 	.word	0x00000000
 800258c:	40606000 	.word	0x40606000
 8002590:	20000394 	.word	0x20000394
 8002594:	20000544 	.word	0x20000544
 8002598:	40020000 	.word	0x40020000
 800259c:	40d00000 	.word	0x40d00000
 80025a0:	20000588 	.word	0x20000588
 80025a4:	2000058c 	.word	0x2000058c
 80025a8:	408f4000 	.word	0x408f4000
 80025ac:	20000560 	.word	0x20000560
 80025b0:	20000578 	.word	0x20000578
 80025b4:	20000580 	.word	0x20000580
 80025b8:	20000558 	.word	0x20000558
 80025bc:	f7fd fe6e 	bl	800029c <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4938      	ldr	r1, [pc, #224]	@ (80026a8 <_Z16mpu6050_readDatav+0x400>)
 80025c6:	e9c1 2300 	strd	r2, r3, [r1]

			//Complementary Filter
			filterRoll = GYRO_FILTER_WEIGHT * (filterRoll + gyroX * dt) + (1 - GYRO_FILTER_WEIGHT) * accRoll;
 80025ca:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <_Z16mpu6050_readDatav+0x404>)
 80025cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025d4:	f7fe f818 	bl	8000608 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	4b33      	ldr	r3, [pc, #204]	@ (80026b0 <_Z16mpu6050_readDatav+0x408>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fd fe59 	bl	800029c <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	a329      	add	r3, pc, #164	@ (adr r3, 8002698 <_Z16mpu6050_readDatav+0x3f0>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f806 	bl	8000608 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	a326      	add	r3, pc, #152	@ (adr r3, 80026a0 <_Z16mpu6050_readDatav+0x3f8>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800260e:	f7fd fffb 	bl	8000608 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fd fe3f 	bl	800029c <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4923      	ldr	r1, [pc, #140]	@ (80026b0 <_Z16mpu6050_readDatav+0x408>)
 8002624:	e9c1 2300 	strd	r2, r3, [r1]
			filterPitch = GYRO_FILTER_WEIGHT * (filterPitch + gyroY * dt) + (1 - GYRO_FILTER_WEIGHT) * accPitch;
 8002628:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800262c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002630:	f7fd ffea 	bl	8000608 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <_Z16mpu6050_readDatav+0x40c>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd fe2b 	bl	800029c <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	a312      	add	r3, pc, #72	@ (adr r3, 8002698 <_Z16mpu6050_readDatav+0x3f0>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ffd8 	bl	8000608 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	a30f      	add	r3, pc, #60	@ (adr r3, 80026a0 <_Z16mpu6050_readDatav+0x3f8>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800266a:	f7fd ffcd 	bl	8000608 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe11 	bl	800029c <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	490d      	ldr	r1, [pc, #52]	@ (80026b4 <_Z16mpu6050_readDatav+0x40c>)
 8002680:	e9c1 2300 	strd	r2, r3, [r1]

			//printf("Roll: %f \n", filterRoll);
			//printf("Pitch: %f \n", filterPitch);
			//printf("Yaw: %f \n", gyroYaw);

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2110      	movs	r1, #16
 8002688:	480b      	ldr	r0, [pc, #44]	@ (80026b8 <_Z16mpu6050_readDatav+0x410>)
 800268a:	f001 fda3 	bl	80041d4 <HAL_GPIO_WritePin>
		}
	}
}
 800268e:	bf00      	nop
 8002690:	3748      	adds	r7, #72	@ 0x48
 8002692:	46bd      	mov	sp, r7
 8002694:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002698:	f5c28f5c 	.word	0xf5c28f5c
 800269c:	3fef5c28 	.word	0x3fef5c28
 80026a0:	47ae1480 	.word	0x47ae1480
 80026a4:	3f947ae1 	.word	0x3f947ae1
 80026a8:	20000558 	.word	0x20000558
 80026ac:	20000560 	.word	0x20000560
 80026b0:	20000568 	.word	0x20000568
 80026b4:	20000570 	.word	0x20000570
 80026b8:	40020000 	.word	0x40020000

080026bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_MspInit+0x4c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_MspInit+0x4c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <HAL_MspInit+0x4c>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_MspInit+0x4c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	@ 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_ADC_MspInit+0x7c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d127      	bne.n	800277e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_ADC_MspInit+0x80>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a15      	ldr	r2, [pc, #84]	@ (800278c <HAL_ADC_MspInit+0x80>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_ADC_MspInit+0x80>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_ADC_MspInit+0x80>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_ADC_MspInit+0x80>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <HAL_ADC_MspInit+0x80>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002766:	2310      	movs	r3, #16
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276a:	2303      	movs	r3, #3
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	@ (8002790 <HAL_ADC_MspInit+0x84>)
 800277a:	f001 fba7 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	@ 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40012000 	.word	0x40012000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020800 	.word	0x40020800

08002794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_I2C_MspInit+0xa4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d13b      	bne.n	800282e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027d2:	23c0      	movs	r3, #192	@ 0xc0
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d6:	2312      	movs	r3, #18
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e2:	2304      	movs	r3, #4
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4814      	ldr	r0, [pc, #80]	@ (8002840 <HAL_I2C_MspInit+0xac>)
 80027ee:	f001 fb6d 	bl	8003ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a10      	ldr	r2, [pc, #64]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 80027fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_I2C_MspInit+0xa8>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	201f      	movs	r0, #31
 8002814:	f000 ff99 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002818:	201f      	movs	r0, #31
 800281a:	f000 ffb2 	bl	8003782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2020      	movs	r0, #32
 8002824:	f000 ff91 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002828:	2020      	movs	r0, #32
 800282a:	f000 ffaa 	bl	8003782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40005400 	.word	0x40005400
 800283c:	40023800 	.word	0x40023800
 8002840:	40020400 	.word	0x40020400

08002844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a33      	ldr	r2, [pc, #204]	@ (8002920 <HAL_TIM_Base_MspInit+0xdc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d144      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6413      	str	r3, [r2, #64]	@ 0x40
 8002866:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002872:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 8002874:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <HAL_TIM_Base_MspInit+0xe8>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 800287a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800287e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002880:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 8002882:	2240      	movs	r2, #64	@ 0x40
 8002884:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002886:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800288c:	4b26      	ldr	r3, [pc, #152]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 800288e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002892:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 8002896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800289a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800289c:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 800289e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80028b6:	481c      	ldr	r0, [pc, #112]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028b8:	f000 ff7e 	bl	80037b8 <HAL_DMA_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80028c2:	f7ff fc07 	bl	80020d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80028cc:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <HAL_TIM_Base_MspInit+0xe4>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028de:	e01a      	b.n	8002916 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a12      	ldr	r2, [pc, #72]	@ (8002930 <HAL_TIM_Base_MspInit+0xec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d115      	bne.n	8002916 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_TIM_Base_MspInit+0xe0>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	201e      	movs	r0, #30
 800290c:	f000 ff1d 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002910:	201e      	movs	r0, #30
 8002912:	f000 ff36 	bl	8003782 <HAL_NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40000400 	.word	0x40000400
 8002924:	40023800 	.word	0x40023800
 8002928:	20000478 	.word	0x20000478
 800292c:	40026070 	.word	0x40026070
 8002930:	40000800 	.word	0x40000800

08002934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_TIM_MspPostInit+0x68>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11d      	bne.n	8002992 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_TIM_MspPostInit+0x6c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <HAL_TIM_MspPostInit+0x6c>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <HAL_TIM_MspPostInit+0x6c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002972:	2310      	movs	r3, #16
 8002974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002982:	2302      	movs	r3, #2
 8002984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <HAL_TIM_MspPostInit+0x70>)
 800298e:	f001 fa9d 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40000400 	.word	0x40000400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a3c <HAL_UART_MspInit+0x94>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d133      	bne.n	8002a32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_UART_MspInit+0x98>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a02:	230c      	movs	r3, #12
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a12:	2307      	movs	r3, #7
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4809      	ldr	r0, [pc, #36]	@ (8002a44 <HAL_UART_MspInit+0x9c>)
 8002a1e:	f001 fa55 	bl	8003ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2026      	movs	r0, #38	@ 0x26
 8002a28:	f000 fe8f 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a2c:	2026      	movs	r0, #38	@ 0x26
 8002a2e:	f000 fea8 	bl	8003782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40004400 	.word	0x40004400
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <NMI_Handler+0x4>

08002a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <HardFault_Handler+0x4>

08002a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <MemManage_Handler+0x4>

08002a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <BusFault_Handler+0x4>

08002a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <UsageFault_Handler+0x4>

08002a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a9e:	f000 f977 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <DMA1_Stream4_IRQHandler+0x10>)
 8002aae:	f000 ffc3 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000478 	.word	0x20000478

08002abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <TIM4_IRQHandler+0x10>)
 8002ac2:	f006 faa9 	bl	8009018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000430 	.word	0x20000430

08002ad0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <I2C1_EV_IRQHandler+0x10>)
 8002ad6:	f002 f965 	bl	8004da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000394 	.word	0x20000394

08002ae4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <I2C1_ER_IRQHandler+0x10>)
 8002aea:	f002 faae 	bl	800504a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000394 	.word	0x20000394

08002af8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <USART2_IRQHandler+0x10>)
 8002afe:	f007 f987 	bl	8009e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200004d8 	.word	0x200004d8

08002b0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b10:	4802      	ldr	r0, [pc, #8]	@ (8002b1c <OTG_FS_IRQHandler+0x10>)
 8002b12:	f004 fb20 	bl	8007156 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001a78 	.word	0x20001a78

08002b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_kill>:

int _kill(int pid, int sig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b3a:	f00d fbe3 	bl	8010304 <__errno>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2216      	movs	r2, #22
 8002b42:	601a      	str	r2, [r3, #0]
  return -1;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_exit>:

void _exit (int status)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe7 	bl	8002b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b62:	bf00      	nop
 8002b64:	e7fd      	b.n	8002b62 <_exit+0x12>

08002b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e00a      	b.n	8002b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b78:	f3af 8000 	nop.w
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	dbf0      	blt.n	8002b78 <_read+0x12>
  }

  return len;
 8002b96:	687b      	ldr	r3, [r7, #4]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_isatty>:

int _isatty(int file)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <_sbrk+0x5c>)
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <_sbrk+0x60>)
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c1c:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <_sbrk+0x64>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c24:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <_sbrk+0x64>)
 8002c26:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <_sbrk+0x68>)
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d207      	bcs.n	8002c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c38:	f00d fb64 	bl	8010304 <__errno>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	220c      	movs	r2, #12
 8002c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
 8002c46:	e009      	b.n	8002c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c48:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <_sbrk+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <_sbrk+0x64>)
 8002c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20020000 	.word	0x20020000
 8002c68:	00000400 	.word	0x00000400
 8002c6c:	20000590 	.word	0x20000590
 8002c70:	200022d0 	.word	0x200022d0

08002c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <SystemInit+0x20>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <SystemInit+0x20>)
 8002c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c9c:	f7ff ffea 	bl	8002c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca0:	480c      	ldr	r0, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ca2:	490d      	ldr	r1, [pc, #52]	@ (8002cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca8:	e002      	b.n	8002cb0 <LoopCopyDataInit>

08002caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cae:	3304      	adds	r3, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb4:	d3f9      	bcc.n	8002caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cbc:	e001      	b.n	8002cc2 <LoopFillZerobss>

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc0:	3204      	adds	r2, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f00d fb23 	bl	8010310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cca:	f7fe fdbf 	bl	800184c <main>
  bx  lr    
 8002cce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8002cdc:	08012338 	.word	0x08012338
  ldr r2, =_sbss
 8002ce0:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8002ce4:	200022cc 	.word	0x200022cc

08002ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC_IRQHandler>
	...

08002cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <HAL_Init+0x40>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <HAL_Init+0x40>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_Init+0x40>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 fd0d 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	200f      	movs	r0, #15
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff fccc 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd25 	bl	800379e <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 fced 	bl	800374a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	@ (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000001c 	.word	0x2000001c
 8002d88:	20000024 	.word	0x20000024
 8002d8c:	20000020 	.word	0x20000020

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000024 	.word	0x20000024
 8002db4:	20000594 	.word	0x20000594

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000594 	.word	0x20000594

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000024 	.word	0x20000024

08002e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e033      	b.n	8002e96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fc68 	bl	800270c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e5e:	f023 0302 	bic.w	r3, r3, #2
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa96 	bl	800339c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Start+0x1a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e097      	b.n	8002fea <HAL_ADC_Start+0x14a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d018      	beq.n	8002f02 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <HAL_ADC_Start+0x158>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a45      	ldr	r2, [pc, #276]	@ (8002ffc <HAL_ADC_Start+0x15c>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9a      	lsrs	r2, r3, #18
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d15f      	bne.n	8002fd0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4e:	d106      	bne.n	8002f5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	f023 0206 	bic.w	r2, r3, #6
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_ADC_Start+0x160>)
 8002f6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f78:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d129      	bne.n	8002fe8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e020      	b.n	8002fe8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <HAL_ADC_Start+0x164>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_ADC_Start+0x148>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d114      	bne.n	8002fe8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e00b      	b.n	8002fe8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000001c 	.word	0x2000001c
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	40012300 	.word	0x40012300
 8003004:	40012000 	.word	0x40012000

08003008 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d113      	bne.n	800304e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003034:	d10b      	bne.n	800304e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e063      	b.n	8003116 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800304e:	f7ff feb3 	bl	8002db8 <HAL_GetTick>
 8003052:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003054:	e021      	b.n	800309a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d01d      	beq.n	800309a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_ADC_PollForConversion+0x6c>
 8003064:	f7ff fea8 	bl	8002db8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d212      	bcs.n	800309a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d00b      	beq.n	800309a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f043 0204 	orr.w	r2, r3, #4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e03d      	b.n	8003116 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d1d6      	bne.n	8003056 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0212 	mvn.w	r2, #18
 80030b0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d123      	bne.n	8003114 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11f      	bne.n	8003114 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e113      	b.n	800337c <HAL_ADC_ConfigChannel+0x244>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b09      	cmp	r3, #9
 8003162:	d925      	bls.n	80031b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68d9      	ldr	r1, [r3, #12]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	3b1e      	subs	r3, #30
 800317a:	2207      	movs	r2, #7
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	4603      	mov	r3, r0
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4403      	add	r3, r0
 80031a2:	3b1e      	subs	r3, #30
 80031a4:	409a      	lsls	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	e022      	b.n	80031f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	2207      	movs	r2, #7
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	400a      	ands	r2, r1
 80031d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4403      	add	r3, r0
 80031ec:	409a      	lsls	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d824      	bhi.n	8003248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b05      	subs	r3, #5
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b05      	subs	r3, #5
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34
 8003246:	e04c      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d824      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b23      	subs	r3, #35	@ 0x23
 8003262:	221f      	movs	r2, #31
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b23      	subs	r3, #35	@ 0x23
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
 8003298:	e023      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b41      	subs	r3, #65	@ 0x41
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b41      	subs	r3, #65	@ 0x41
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_ADC_ConfigChannel+0x250>)
 80032e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a28      	ldr	r2, [pc, #160]	@ (800338c <HAL_ADC_ConfigChannel+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10f      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b12      	cmp	r3, #18
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_ADC_ConfigChannel+0x254>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12b      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_ADC_ConfigChannel+0x258>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_ADC_ConfigChannel+0x1f4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b11      	cmp	r3, #17
 800332a:	d122      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <HAL_ADC_ConfigChannel+0x258>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800334e:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <HAL_ADC_ConfigChannel+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_ADC_ConfigChannel+0x260>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9a      	lsrs	r2, r3, #18
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003364:	e002      	b.n	800336c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	40012000 	.word	0x40012000
 8003390:	10000012 	.word	0x10000012
 8003394:	2000001c 	.word	0x2000001c
 8003398:	431bde83 	.word	0x431bde83

0800339c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a4:	4b79      	ldr	r3, [pc, #484]	@ (800358c <ADC_Init+0x1f0>)
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	4a58      	ldr	r2, [pc, #352]	@ (8003590 <ADC_Init+0x1f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e00f      	b.n	800349a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0202 	bic.w	r2, r2, #2
 80034a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e1b      	ldrb	r3, [r3, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	3b01      	subs	r3, #1
 80034f4:	035a      	lsls	r2, r3, #13
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e007      	b.n	8003510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	3b01      	subs	r3, #1
 800352c:	051a      	lsls	r2, r3, #20
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003552:	025a      	lsls	r2, r3, #9
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	029a      	lsls	r2, r3, #10
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	0f000001 	.word	0x0f000001

08003594 <__NVIC_SetPriorityGrouping>:
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	@ (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	@ (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	@ (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	@ (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	@ 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	@ 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <SysTick_Config>:
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003700:	d301      	bcc.n	8003706 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <SysTick_Config+0x40>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370e:	210f      	movs	r1, #15
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f7ff ff8e 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <SysTick_Config+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <SysTick_Config+0x40>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff29 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff3e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff8e 	bl	8003688 <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5d 	bl	8003634 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff31 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa2 	bl	80036f0 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff faf8 	bl	8002db8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e099      	b.n	8003908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	e00f      	b.n	8003816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f6:	f7ff fadf 	bl	8002db8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d908      	bls.n	8003816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e078      	b.n	8003908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e8      	bne.n	80037f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4b38      	ldr	r3, [pc, #224]	@ (8003910 <HAL_DMA_Init+0x158>)
 8003830:	4013      	ands	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	2b04      	cmp	r3, #4
 800386e:	d107      	bne.n	8003880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	4313      	orrs	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d117      	bne.n	80038da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fa89 	bl	8003dd4 <DMA_CheckFifoParam>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038d6:	2301      	movs	r3, #1
 80038d8:	e016      	b.n	8003908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa40 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	223f      	movs	r2, #63	@ 0x3f
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	f010803f 	.word	0xf010803f

08003914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7ff fa49 	bl	8002db8 <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e052      	b.n	80039ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0216 	bic.w	r2, r2, #22
 8003954:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_DMA_Abort+0x62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0208 	bic.w	r2, r2, #8
 8003984:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003996:	e013      	b.n	80039c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003998:	f7ff fa0e 	bl	8002db8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d90c      	bls.n	80039c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e015      	b.n	80039ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	223f      	movs	r2, #63	@ 0x3f
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00c      	b.n	8003a2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a44:	4b8e      	ldr	r3, [pc, #568]	@ (8003c80 <HAL_DMA_IRQHandler+0x248>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a8e      	ldr	r2, [pc, #568]	@ (8003c84 <HAL_DMA_IRQHandler+0x24c>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	2208      	movs	r2, #8
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	2208      	movs	r2, #8
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d012      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2204      	movs	r2, #4
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2210      	movs	r2, #16
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d043      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	2210      	movs	r2, #16
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
 8003b66:	e01f      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
 8003b78:	e016      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0208 	bic.w	r2, r2, #8
 8003b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	2220      	movs	r2, #32
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 808f 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8087 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	2220      	movs	r2, #32
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d136      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0216 	bic.w	r2, r2, #22
 8003bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x1da>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0208 	bic.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	223f      	movs	r2, #63	@ 0x3f
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07e      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
        }
        return;
 8003c4e:	e079      	b.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d031      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e02c      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
 8003c7e:	bf00      	nop
 8003c80:	2000001c 	.word	0x2000001c
 8003c84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01e      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0210 	bic.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d032      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2205      	movs	r2, #5
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d307      	bcc.n	8003d20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f2      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x2cc>
 8003d1e:	e000      	b.n	8003d22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e000      	b.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d44:	bf00      	nop
    }
  }
}
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d5a:	b2db      	uxtb	r3, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3b10      	subs	r3, #16
 8003d78:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <DMA_CalcBaseAndBitshift+0x64>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d82:	4a13      	ldr	r2, [pc, #76]	@ (8003dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d909      	bls.n	8003daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003da8:	e007      	b.n	8003dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	aaaaaaab 	.word	0xaaaaaaab
 8003dd0:	08011f3c 	.word	0x08011f3c

08003dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d856      	bhi.n	8003ea2 <DMA_CheckFifoParam+0xce>
 8003df4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <DMA_CheckFifoParam+0x28>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e1f 	.word	0x08003e1f
 8003e04:	08003e0d 	.word	0x08003e0d
 8003e08:	08003ea3 	.word	0x08003ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d046      	beq.n	8003ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1c:	e043      	b.n	8003ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e26:	d140      	bne.n	8003eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e03d      	b.n	8003eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e36:	d121      	bne.n	8003e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d837      	bhi.n	8003eae <DMA_CheckFifoParam+0xda>
 8003e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <DMA_CheckFifoParam+0x70>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e5b 	.word	0x08003e5b
 8003e4c:	08003e55 	.word	0x08003e55
 8003e50:	08003e6d 	.word	0x08003e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e030      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d025      	beq.n	8003eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6a:	e022      	b.n	8003eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e74:	d11f      	bne.n	8003eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e7a:	e01c      	b.n	8003eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d903      	bls.n	8003e8a <DMA_CheckFifoParam+0xb6>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d003      	beq.n	8003e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e88:	e018      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8e:	e015      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e00b      	b.n	8003eba <DMA_CheckFifoParam+0xe6>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e00a      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e008      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e006      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <DMA_CheckFifoParam+0xe8>
      break;
 8003eba:	bf00      	nop
    }
  } 
  
  return status; 
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	@ 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e159      	b.n	800419c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 8148 	bne.w	8004196 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d005      	beq.n	8003f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d130      	bne.n	8003f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f54:	2201      	movs	r2, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 0201 	and.w	r2, r3, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d017      	beq.n	8003fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d123      	bne.n	8004010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0203 	and.w	r2, r3, #3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a2 	beq.w	8004196 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 800405c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004060:	6453      	str	r3, [r2, #68]	@ 0x44
 8004062:	4b54      	ldr	r3, [pc, #336]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406e:	4a52      	ldr	r2, [pc, #328]	@ (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a49      	ldr	r2, [pc, #292]	@ (80041bc <HAL_GPIO_Init+0x2f0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x202>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a48      	ldr	r2, [pc, #288]	@ (80041c0 <HAL_GPIO_Init+0x2f4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x1fe>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a47      	ldr	r2, [pc, #284]	@ (80041c4 <HAL_GPIO_Init+0x2f8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a46      	ldr	r2, [pc, #280]	@ (80041c8 <HAL_GPIO_Init+0x2fc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x1f6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a45      	ldr	r2, [pc, #276]	@ (80041cc <HAL_GPIO_Init+0x300>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x1f2>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e008      	b.n	80040d0 <HAL_GPIO_Init+0x204>
 80040be:	2307      	movs	r3, #7
 80040c0:	e006      	b.n	80040d0 <HAL_GPIO_Init+0x204>
 80040c2:	2303      	movs	r3, #3
 80040c4:	e004      	b.n	80040d0 <HAL_GPIO_Init+0x204>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_Init+0x204>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_GPIO_Init+0x204>
 80040ce:	2300      	movs	r3, #0
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f002 0203 	and.w	r2, r2, #3
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	4093      	lsls	r3, r2
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e0:	4935      	ldr	r1, [pc, #212]	@ (80041b8 <HAL_GPIO_Init+0x2ec>)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	3302      	adds	r3, #2
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ee:	4b38      	ldr	r3, [pc, #224]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004112:	4a2f      	ldr	r2, [pc, #188]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004118:	4b2d      	ldr	r3, [pc, #180]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800413c:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004142:	4b23      	ldr	r3, [pc, #140]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800416c:	4b18      	ldr	r3, [pc, #96]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004190:	4a0f      	ldr	r2, [pc, #60]	@ (80041d0 <HAL_GPIO_Init+0x304>)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3301      	adds	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	f67f aea2 	bls.w	8003ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40013800 	.word	0x40013800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40020400 	.word	0x40020400
 80041c4:	40020800 	.word	0x40020800
 80041c8:	40020c00 	.word	0x40020c00
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40013c00 	.word	0x40013c00

080041d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
 80041e0:	4613      	mov	r3, r2
 80041e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e4:	787b      	ldrb	r3, [r7, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f0:	e003      	b.n	80041fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f2:	887b      	ldrh	r3, [r7, #2]
 80041f4:	041a      	lsls	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	041a      	lsls	r2, r3, #16
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43d9      	mvns	r1, r3
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	400b      	ands	r3, r1
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	619a      	str	r2, [r3, #24]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e12b      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe fa96 	bl	8002794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800428e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800429e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a0:	f004 fcd6 	bl	8008c50 <HAL_RCC_GetPCLK1Freq>
 80042a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a81      	ldr	r2, [pc, #516]	@ (80044b0 <HAL_I2C_Init+0x274>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d807      	bhi.n	80042c0 <HAL_I2C_Init+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a80      	ldr	r2, [pc, #512]	@ (80044b4 <HAL_I2C_Init+0x278>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	bf94      	ite	ls
 80042b8:	2301      	movls	r3, #1
 80042ba:	2300      	movhi	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e006      	b.n	80042ce <HAL_I2C_Init+0x92>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a7d      	ldr	r2, [pc, #500]	@ (80044b8 <HAL_I2C_Init+0x27c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bf94      	ite	ls
 80042c8:	2301      	movls	r3, #1
 80042ca:	2300      	movhi	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0e7      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a78      	ldr	r2, [pc, #480]	@ (80044bc <HAL_I2C_Init+0x280>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a6a      	ldr	r2, [pc, #424]	@ (80044b0 <HAL_I2C_Init+0x274>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <HAL_I2C_Init+0xd4>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	e009      	b.n	8004324 <HAL_I2C_Init+0xe8>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	4a69      	ldr	r2, [pc, #420]	@ (80044c0 <HAL_I2C_Init+0x284>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	3301      	adds	r3, #1
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004336:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	495c      	ldr	r1, [pc, #368]	@ (80044b0 <HAL_I2C_Init+0x274>)
 8004340:	428b      	cmp	r3, r1
 8004342:	d819      	bhi.n	8004378 <HAL_I2C_Init+0x13c>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e59      	subs	r1, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004358:	400b      	ands	r3, r1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_I2C_Init+0x138>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1e59      	subs	r1, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fbb1 f3f3 	udiv	r3, r1, r3
 800436c:	3301      	adds	r3, #1
 800436e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004372:	e051      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004374:	2304      	movs	r3, #4
 8004376:	e04f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <HAL_I2C_Init+0x168>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e012      	b.n	80043ca <HAL_I2C_Init+0x18e>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	0099      	lsls	r1, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ba:	3301      	adds	r3, #1
 80043bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Init+0x196>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e022      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10e      	bne.n	80043f8 <HAL_I2C_Init+0x1bc>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e58      	subs	r0, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	440b      	add	r3, r1
 80043e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f6:	e00f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6809      	ldr	r1, [r1, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004446:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6911      	ldr	r1, [r2, #16]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	000186a0 	.word	0x000186a0
 80044b4:	001e847f 	.word	0x001e847f
 80044b8:	003d08ff 	.word	0x003d08ff
 80044bc:	431bde83 	.word	0x431bde83
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d103      	bne.n	80044e2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  }
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	460b      	mov	r3, r1
 8004504:	813b      	strh	r3, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800450a:	f7fe fc55 	bl	8002db8 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	f040 80d9 	bne.w	80046d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2319      	movs	r3, #25
 8004524:	2201      	movs	r2, #1
 8004526:	496d      	ldr	r1, [pc, #436]	@ (80046dc <HAL_I2C_Mem_Write+0x1ec>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f002 fa4d 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
 8004536:	e0cc      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Mem_Write+0x56>
 8004542:	2302      	movs	r3, #2
 8004544:	e0c5      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d007      	beq.n	800456c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	@ 0x21
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2240      	movs	r2, #64	@ 0x40
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800459c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a4d      	ldr	r2, [pc, #308]	@ (80046e0 <HAL_I2C_Mem_Write+0x1f0>)
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ae:	88f8      	ldrh	r0, [r7, #6]
 80045b0:	893a      	ldrh	r2, [r7, #8]
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 ffdc 	bl	800657c <I2C_RequestMemoryWrite>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d052      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e081      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f002 fb12 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_I2C_Mem_Write+0x180>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1aa      	bne.n	80045ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f002 fb05 	bl	8006c8c <I2C_WaitOnBTFFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e016      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	460b      	mov	r3, r1
 80046f8:	813b      	strh	r3, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7fe fb5b 	bl	8002db8 <HAL_GetTick>
 8004702:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 8214 	bne.w	8004b3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	497b      	ldr	r1, [pc, #492]	@ (8004908 <HAL_I2C_Mem_Read+0x224>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f002 f953 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e207      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Read+0x56>
 8004736:	2302      	movs	r3, #2
 8004738:	e200      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	@ 0x22
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	@ 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_I2C_Mem_Read+0x228>)
 80047a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 ff78 	bl	80066a8 <I2C_RequestMemoryRead>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1bc      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e190      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11b      	bne.n	8004832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e170      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11b      	bne.n	8004872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	e150      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e144      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 80f1 	bhi.w	8004a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f002 fa6d 	bl	8006d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e145      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048e2:	e117      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d14e      	bne.n	800498a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	@ (8004910 <HAL_I2C_Mem_Read+0x22c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f002 f866 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e11a      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004988:	e0c4      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	496c      	ldr	r1, [pc, #432]	@ (8004b44 <HAL_I2C_Mem_Read+0x460>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f002 f817 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cb      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	4955      	ldr	r1, [pc, #340]	@ (8004b44 <HAL_I2C_Mem_Read+0x460>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f001 ffe9 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09d      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a74:	e04e      	b.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f002 f980 	bl	8006d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e058      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d124      	bne.n	8004b14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f aeb6 	bne.w	800488a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3728      	adds	r7, #40	@ 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	00010004 	.word	0x00010004

08004b48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	@ 0x28
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7fe f92e 	bl	8002db8 <HAL_GetTick>
 8004b5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	f040 8111 	bne.w	8004d92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2319      	movs	r3, #25
 8004b76:	2201      	movs	r2, #1
 8004b78:	4988      	ldr	r1, [pc, #544]	@ (8004d9c <HAL_I2C_IsDeviceReady+0x254>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f001 ff24 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e104      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_I2C_IsDeviceReady+0x50>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0fd      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d007      	beq.n	8004bbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2224      	movs	r2, #36	@ 0x24
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a70      	ldr	r2, [pc, #448]	@ (8004da0 <HAL_I2C_IsDeviceReady+0x258>)
 8004be0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f001 fee2 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c18:	d103      	bne.n	8004c22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c20:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0b6      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fe f8bf 	bl	8002db8 <HAL_GetTick>
 8004c3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c6a:	e025      	b.n	8004cb8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7fe f8a4 	bl	8002db8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <HAL_I2C_IsDeviceReady+0x13a>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22a0      	movs	r2, #160	@ 0xa0
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_I2C_IsDeviceReady+0x188>
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <HAL_I2C_IsDeviceReady+0x188>
 8004cca:	7dbb      	ldrb	r3, [r7, #22]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0cd      	beq.n	8004c6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d129      	bne.n	8004d3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2319      	movs	r3, #25
 8004d12:	2201      	movs	r2, #1
 8004d14:	4921      	ldr	r1, [pc, #132]	@ (8004d9c <HAL_I2C_IsDeviceReady+0x254>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f001 fe56 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e036      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e02c      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2319      	movs	r3, #25
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	490f      	ldr	r1, [pc, #60]	@ (8004d9c <HAL_I2C_IsDeviceReady+0x254>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f001 fe32 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e012      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f4ff af32 	bcc.w	8004be2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	00100002 	.word	0x00100002
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d003      	beq.n	8004ddc <HAL_I2C_EV_IRQHandler+0x38>
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b40      	cmp	r3, #64	@ 0x40
 8004dd8:	f040 80b1 	bne.w	8004f3e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10d      	bne.n	8004e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dfc:	d003      	beq.n	8004e06 <HAL_I2C_EV_IRQHandler+0x62>
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e04:	d101      	bne.n	8004e0a <HAL_I2C_EV_IRQHandler+0x66>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_I2C_EV_IRQHandler+0x68>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f000 8114 	beq.w	800503a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_I2C_EV_IRQHandler+0x90>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f002 f836 	bl	8006e98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fd88 	bl	8005942 <I2C_Master_SB>
 8004e32:	e083      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_I2C_EV_IRQHandler+0xac>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fe00 	bl	8005a4e <I2C_Master_ADD10>
 8004e4e:	e075      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0xc8>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fe1c 	bl	8005aa2 <I2C_Master_ADDR>
 8004e6a:	e067      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e84:	f000 80db 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x10a>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x10a>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9e4 	bl	8005274 <I2C_MasterTransmit_TXE>
 8004eac:	e046      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80c2 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80bc 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	2b21      	cmp	r3, #33	@ 0x21
 8004eca:	d103      	bne.n	8004ed4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa6d 	bl	80053ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ed2:	e0b4      	b.n	800503e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	f040 80b1 	bne.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fadb 	bl	8005498 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee2:	e0ac      	b.n	800503e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef2:	f000 80a4 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00d      	beq.n	8004f1c <HAL_I2C_EV_IRQHandler+0x178>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_I2C_EV_IRQHandler+0x178>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fb57 	bl	80055c8 <I2C_MasterReceive_RXNE>
 8004f1a:	e00f      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 808b 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8085 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fc0f 	bl	8005758 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f3a:	e080      	b.n	800503e <HAL_I2C_EV_IRQHandler+0x29a>
 8004f3c:	e07f      	b.n	800503e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e007      	b.n	8004f60 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x1ea>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 ffda 	bl	8005f40 <I2C_Slave_ADDR>
 8004f8c:	e05a      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_I2C_EV_IRQHandler+0x206>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 f814 	bl	8005fd0 <I2C_Slave_STOPF>
 8004fa8:	e04c      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	2b21      	cmp	r3, #33	@ 0x21
 8004fae:	d002      	beq.n	8004fb6 <HAL_I2C_EV_IRQHandler+0x212>
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b29      	cmp	r3, #41	@ 0x29
 8004fb4:	d120      	bne.n	8004ff8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_I2C_EV_IRQHandler+0x238>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_I2C_EV_IRQHandler+0x238>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fef5 	bl	8005dc4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fda:	e032      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02d      	beq.n	8005042 <HAL_I2C_EV_IRQHandler+0x29e>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d028      	beq.n	8005042 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 ff24 	bl	8005e3e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ff6:	e024      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <HAL_I2C_EV_IRQHandler+0x27a>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_I2C_EV_IRQHandler+0x27a>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 ff32 	bl	8005e80 <I2C_SlaveReceive_RXNE>
 800501c:	e012      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 ff62 	bl	8005efc <I2C_SlaveReceive_BTF>
 8005038:	e004      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005042:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08a      	sub	sp, #40	@ 0x28
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800506c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <HAL_I2C_ER_IRQHandler+0x4a>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005092:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_I2C_ER_IRQHandler+0x70>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80050b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03e      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0xf8>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d039      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80050ce:	7efb      	ldrb	r3, [r7, #27]
 80050d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050e8:	7ebb      	ldrb	r3, [r7, #26]
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d112      	bne.n	8005114 <HAL_I2C_ER_IRQHandler+0xca>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10f      	bne.n	8005114 <HAL_I2C_ER_IRQHandler+0xca>
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b21      	cmp	r3, #33	@ 0x21
 80050f8:	d008      	beq.n	800510c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050fa:	7cfb      	ldrb	r3, [r7, #19]
 80050fc:	2b29      	cmp	r3, #41	@ 0x29
 80050fe:	d005      	beq.n	800510c <HAL_I2C_ER_IRQHandler+0xc2>
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	2b28      	cmp	r3, #40	@ 0x28
 8005104:	d106      	bne.n	8005114 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b21      	cmp	r3, #33	@ 0x21
 800510a:	d103      	bne.n	8005114 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 f88f 	bl	8006230 <I2C_Slave_AF>
 8005112:	e016      	b.n	8005142 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800511c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005126:	7efb      	ldrb	r3, [r7, #27]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d002      	beq.n	8005132 <HAL_I2C_ER_IRQHandler+0xe8>
 800512c:	7efb      	ldrb	r3, [r7, #27]
 800512e:	2b40      	cmp	r3, #64	@ 0x40
 8005130:	d107      	bne.n	8005142 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005140:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <HAL_I2C_ER_IRQHandler+0x11e>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005166:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 f8cc 	bl	8006318 <I2C_ITError>
  }
}
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	@ 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
 80051e4:	4613      	mov	r3, r2
 80051e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005266:	b2db      	uxtb	r3, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005282:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800528a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d150      	bne.n	800533c <I2C_MasterTransmit_TXE+0xc8>
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b21      	cmp	r3, #33	@ 0x21
 800529e:	d14d      	bne.n	800533c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d01d      	beq.n	80052e2 <I2C_MasterTransmit_TXE+0x6e>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d01a      	beq.n	80052e2 <I2C_MasterTransmit_TXE+0x6e>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b2:	d016      	beq.n	80052e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2211      	movs	r2, #17
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff54 	bl	8005188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052e0:	e060      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005300:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d107      	bne.n	800532c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff6f 	bl	8005208 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800532a:	e03b      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff ff27 	bl	8005188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800533a:	e033      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b21      	cmp	r3, #33	@ 0x21
 8005340:	d005      	beq.n	800534e <I2C_MasterTransmit_TXE+0xda>
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d12d      	bne.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b22      	cmp	r3, #34	@ 0x22
 800534c:	d12a      	bne.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005366:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005368:	e01c      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b40      	cmp	r3, #64	@ 0x40
 8005374:	d103      	bne.n	800537e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f88e 	bl	8005498 <I2C_MemoryTransmit_TXE_BTF>
}
 800537c:	e012      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80053a2:	e7ff      	b.n	80053a4 <I2C_MasterTransmit_TXE+0x130>
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b21      	cmp	r3, #33	@ 0x21
 80053c4:	d164      	bne.n	8005490 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053f4:	e04c      	b.n	8005490 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d01d      	beq.n	8005438 <I2C_MasterTransmit_BTF+0x8c>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d01a      	beq.n	8005438 <I2C_MasterTransmit_BTF+0x8c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005408:	d016      	beq.n	8005438 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005418:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2211      	movs	r2, #17
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fea9 	bl	8005188 <HAL_I2C_MasterTxCpltCallback>
}
 8005436:	e02b      	b.n	8005490 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005446:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005456:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b40      	cmp	r3, #64	@ 0x40
 8005470:	d107      	bne.n	8005482 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff fec4 	bl	8005208 <HAL_I2C_MemTxCpltCallback>
}
 8005480:	e006      	b.n	8005490 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fe7c 	bl	8005188 <HAL_I2C_MasterTxCpltCallback>
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11d      	bne.n	80054ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10b      	bne.n	80054d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	1c9a      	adds	r2, r3, #2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80054ce:	e077      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	121b      	asrs	r3, r3, #8
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054ea:	e069      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10b      	bne.n	800550c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800550a:	e059      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005510:	2b02      	cmp	r3, #2
 8005512:	d152      	bne.n	80055ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b22      	cmp	r3, #34	@ 0x22
 8005518:	d10d      	bne.n	8005536 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005528:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005534:	e044      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b21      	cmp	r3, #33	@ 0x21
 8005544:	d112      	bne.n	800556c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800556a:	e029      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d124      	bne.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b21      	cmp	r3, #33	@ 0x21
 800557a:	d121      	bne.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800558a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fe28 	bl	8005208 <HAL_I2C_MemTxCpltCallback>
}
 80055b8:	e002      	b.n	80055c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fe ff82 	bl	80044c4 <I2C_Flush_DR>
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b22      	cmp	r3, #34	@ 0x22
 80055da:	f040 80b9 	bne.w	8005750 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d921      	bls.n	8005636 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b03      	cmp	r3, #3
 8005620:	f040 8096 	bne.w	8005750 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005632:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005634:	e08c      	b.n	8005750 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	2b02      	cmp	r3, #2
 800563c:	d07f      	beq.n	800573e <I2C_MasterReceive_RXNE+0x176>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d002      	beq.n	800564a <I2C_MasterReceive_RXNE+0x82>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d179      	bne.n	800573e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 fb66 	bl	8006d1c <I2C_WaitOnSTOPRequestThroughIT>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d14c      	bne.n	80056f0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005674:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d10a      	bne.n	80056c6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fdac 	bl	800521c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056c4:	e044      	b.n	8005750 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d002      	beq.n	80056da <I2C_MasterReceive_RXNE+0x112>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d103      	bne.n	80056e2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
 80056e0:	e002      	b.n	80056e8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2212      	movs	r2, #18
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fd57 	bl	800519c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056ee:	e02f      	b.n	8005750 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fd7a 	bl	8005230 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800573c:	e008      	b.n	8005750 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574c:	605a      	str	r2, [r3, #4]
}
 800574e:	e7ff      	b.n	8005750 <I2C_MasterReceive_RXNE+0x188>
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b04      	cmp	r3, #4
 800576e:	d11b      	bne.n	80057a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80057a6:	e0c8      	b.n	800593a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d129      	bne.n	8005806 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d00a      	beq.n	80057de <I2C_MasterReceive_BTF+0x86>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d007      	beq.n	80057de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005804:	e099      	b.n	800593a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	f040 8081 	bne.w	8005914 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d002      	beq.n	800581e <I2C_MasterReceive_BTF+0xc6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b10      	cmp	r3, #16
 800581c:	d108      	bne.n	8005830 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	e019      	b.n	8005864 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d002      	beq.n	800583c <I2C_MasterReceive_BTF+0xe4>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d108      	bne.n	800584e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e00a      	b.n	8005864 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b10      	cmp	r3, #16
 8005852:	d007      	beq.n	8005864 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005862:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80058be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	d10a      	bne.n	80058ea <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fc9a 	bl	800521c <HAL_I2C_MemRxCpltCallback>
}
 80058e8:	e027      	b.n	800593a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d002      	beq.n	80058fe <I2C_MasterReceive_BTF+0x1a6>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d103      	bne.n	8005906 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
 8005904:	e002      	b.n	800590c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2212      	movs	r2, #18
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fc45 	bl	800519c <HAL_I2C_MasterRxCpltCallback>
}
 8005912:	e012      	b.n	800593a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b40      	cmp	r3, #64	@ 0x40
 8005954:	d117      	bne.n	8005986 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800596e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005970:	e067      	b.n	8005a42 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	b2da      	uxtb	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]
}
 8005984:	e05d      	b.n	8005a42 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800598e:	d133      	bne.n	80059f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b21      	cmp	r3, #33	@ 0x21
 800599a:	d109      	bne.n	80059b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	e008      	b.n	80059c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <I2C_Master_SB+0x92>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d032      	beq.n	8005a42 <I2C_Master_SB+0x100>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d02d      	beq.n	8005a42 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059f4:	605a      	str	r2, [r3, #4]
}
 80059f6:	e024      	b.n	8005a42 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10e      	bne.n	8005a1e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	11db      	asrs	r3, r3, #7
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f003 0306 	and.w	r3, r3, #6
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f063 030f 	orn	r3, r3, #15
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	611a      	str	r2, [r3, #16]
}
 8005a1c:	e011      	b.n	8005a42 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10d      	bne.n	8005a42 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	11db      	asrs	r3, r3, #7
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f063 030e 	orn	r3, r3, #14
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	611a      	str	r2, [r3, #16]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <I2C_Master_ADD10+0x26>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <I2C_Master_ADD10+0x48>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a94:	605a      	str	r2, [r3, #4]
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b091      	sub	sp, #68	@ 0x44
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ab0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b22      	cmp	r3, #34	@ 0x22
 8005aca:	f040 8169 	bne.w	8005da0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <I2C_Master_ADDR+0x54>
 8005ad6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d10b      	bne.n	8005af6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	e160      	b.n	8005db8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11d      	bne.n	8005b3a <I2C_Master_ADDR+0x98>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b06:	d118      	bne.n	8005b3a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b2c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b38:	e13e      	b.n	8005db8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d113      	bne.n	8005b6c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b44:	2300      	movs	r3, #0
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e115      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	f040 808a 	bne.w	8005c8c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b7e:	d137      	bne.n	8005bf0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9e:	d113      	bne.n	8005bc8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	e0e7      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e0d3      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d02e      	beq.n	8005c54 <I2C_Master_ADDR+0x1b2>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d02b      	beq.n	8005c54 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	2b12      	cmp	r3, #18
 8005c00:	d102      	bne.n	8005c08 <I2C_Master_ADDR+0x166>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d125      	bne.n	8005c54 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d00e      	beq.n	8005c2c <I2C_Master_ADDR+0x18a>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d00b      	beq.n	8005c2c <I2C_Master_ADDR+0x18a>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d008      	beq.n	8005c2c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e007      	b.n	8005c3c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c3a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	e0a1      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c62:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e085      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d14d      	bne.n	8005d32 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d016      	beq.n	8005cca <I2C_Master_ADDR+0x228>
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d013      	beq.n	8005cca <I2C_Master_ADDR+0x228>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d010      	beq.n	8005cca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e007      	b.n	8005cda <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cd8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce8:	d117      	bne.n	8005d1a <I2C_Master_ADDR+0x278>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cf0:	d00b      	beq.n	8005d0a <I2C_Master_ADDR+0x268>
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d008      	beq.n	8005d0a <I2C_Master_ADDR+0x268>
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d005      	beq.n	8005d0a <I2C_Master_ADDR+0x268>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d002      	beq.n	8005d0a <I2C_Master_ADDR+0x268>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d107      	bne.n	8005d1a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	e032      	b.n	8005d98 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d40:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d50:	d117      	bne.n	8005d82 <I2C_Master_ADDR+0x2e0>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d58:	d00b      	beq.n	8005d72 <I2C_Master_ADDR+0x2d0>
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d008      	beq.n	8005d72 <I2C_Master_ADDR+0x2d0>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d005      	beq.n	8005d72 <I2C_Master_ADDR+0x2d0>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d002      	beq.n	8005d72 <I2C_Master_ADDR+0x2d0>
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d107      	bne.n	8005d82 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d9e:	e00b      	b.n	8005db8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	e7ff      	b.n	8005db8 <I2C_Master_ADDR+0x316>
 8005db8:	bf00      	nop
 8005dba:	3744      	adds	r7, #68	@ 0x44
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d02b      	beq.n	8005e36 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d114      	bne.n	8005e36 <I2C_SlaveTransmit_TXE+0x72>
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b29      	cmp	r3, #41	@ 0x29
 8005e10:	d111      	bne.n	8005e36 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e20:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2221      	movs	r2, #33	@ 0x21
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2228      	movs	r2, #40	@ 0x28
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff f9bd 	bl	80051b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d011      	beq.n	8005e74 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02c      	beq.n	8005ef4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d114      	bne.n	8005ef4 <I2C_SlaveReceive_RXNE+0x74>
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ece:	d111      	bne.n	8005ef4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ede:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2222      	movs	r2, #34	@ 0x22
 8005ee4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2228      	movs	r2, #40	@ 0x28
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff f968 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d012      	beq.n	8005f34 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f5a:	2b28      	cmp	r3, #40	@ 0x28
 8005f5c:	d125      	bne.n	8005faa <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	81bb      	strh	r3, [r7, #12]
 8005f8c:	e002      	b.n	8005f94 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f9c:	89ba      	ldrh	r2, [r7, #12]
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff f918 	bl	80051d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fa8:	e00e      	b.n	8005fc8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005faa:	2300      	movs	r3, #0
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fde:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800601c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602c:	d172      	bne.n	8006114 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2b22      	cmp	r3, #34	@ 0x22
 8006032:	d002      	beq.n	800603a <I2C_Slave_STOPF+0x6a>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b2a      	cmp	r3, #42	@ 0x2a
 8006038:	d135      	bne.n	80060a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b29a      	uxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	f043 0204 	orr.w	r2, r3, #4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800606c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006072:	4618      	mov	r0, r3
 8006074:	f7fd fe6a 	bl	8003d4c <HAL_DMA_GetState>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d049      	beq.n	8006112 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	4a69      	ldr	r2, [pc, #420]	@ (8006228 <I2C_Slave_STOPF+0x258>)
 8006084:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd fcb2 	bl	80039f4 <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03d      	beq.n	8006112 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060a4:	e035      	b.n	8006112 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd fe34 	bl	8003d4c <HAL_DMA_GetState>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d014      	beq.n	8006114 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ee:	4a4e      	ldr	r2, [pc, #312]	@ (8006228 <I2C_Slave_STOPF+0x258>)
 80060f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fd fc7c 	bl	80039f4 <HAL_DMA_Abort_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800610c:	4610      	mov	r0, r2
 800610e:	4798      	blx	r3
 8006110:	e000      	b.n	8006114 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006112:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d03e      	beq.n	800619c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d112      	bne.n	8006152 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615c:	2b40      	cmp	r3, #64	@ 0x40
 800615e:	d112      	bne.n	8006186 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006194:	f043 0204 	orr.w	r2, r3, #4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f8b7 	bl	8006318 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80061aa:	e039      	b.n	8006220 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b0:	d109      	bne.n	80061c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2228      	movs	r2, #40	@ 0x28
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fe ffff 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b28      	cmp	r3, #40	@ 0x28
 80061d0:	d111      	bne.n	80061f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <I2C_Slave_STOPF+0x25c>)
 80061d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff f800 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
}
 80061f4:	e014      	b.n	8006220 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	2b22      	cmp	r3, #34	@ 0x22
 80061fc:	d002      	beq.n	8006204 <I2C_Slave_STOPF+0x234>
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b22      	cmp	r3, #34	@ 0x22
 8006202:	d10d      	bne.n	8006220 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fe ffd2 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08006879 	.word	0x08006879
 800622c:	ffff0000 	.word	0xffff0000

08006230 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d002      	beq.n	8006252 <I2C_Slave_AF+0x22>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b20      	cmp	r3, #32
 8006250:	d129      	bne.n	80062a6 <I2C_Slave_AF+0x76>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b28      	cmp	r3, #40	@ 0x28
 8006256:	d126      	bne.n	80062a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a2e      	ldr	r2, [pc, #184]	@ (8006314 <I2C_Slave_AF+0xe4>)
 800625c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800626c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006276:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fe ffa8 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80062a4:	e031      	b.n	800630a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b21      	cmp	r3, #33	@ 0x21
 80062aa:	d129      	bne.n	8006300 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <I2C_Slave_AF+0xe4>)
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2221      	movs	r2, #33	@ 0x21
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fe f8e6 	bl	80044c4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fe ff59 	bl	80051b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80062fe:	e004      	b.n	800630a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	ffff0000 	.word	0xffff0000

08006318 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800632e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b10      	cmp	r3, #16
 8006334:	d002      	beq.n	800633c <I2C_ITError+0x24>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d10a      	bne.n	8006352 <I2C_ITError+0x3a>
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b22      	cmp	r3, #34	@ 0x22
 8006340:	d107      	bne.n	8006352 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006350:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006358:	2b28      	cmp	r3, #40	@ 0x28
 800635a:	d107      	bne.n	800636c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2228      	movs	r2, #40	@ 0x28
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800636a:	e015      	b.n	8006398 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800637a:	d00a      	beq.n	8006392 <I2C_ITError+0x7a>
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b60      	cmp	r3, #96	@ 0x60
 8006380:	d007      	beq.n	8006392 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a6:	d162      	bne.n	800646e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d020      	beq.n	8006408 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006574 <I2C_ITError+0x25c>)
 80063cc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd fb0e 	bl	80039f4 <HAL_DMA_Abort_IT>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8089 	beq.w	80064f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006402:	4610      	mov	r0, r2
 8006404:	4798      	blx	r3
 8006406:	e074      	b.n	80064f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	4a59      	ldr	r2, [pc, #356]	@ (8006574 <I2C_ITError+0x25c>)
 800640e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	4618      	mov	r0, r3
 8006416:	f7fd faed 	bl	80039f4 <HAL_DMA_Abort_IT>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d068      	beq.n	80064f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d10b      	bne.n	8006446 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	e041      	b.n	80064f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b60      	cmp	r3, #96	@ 0x60
 8006478:	d125      	bne.n	80064c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006492:	2b40      	cmp	r3, #64	@ 0x40
 8006494:	d10b      	bne.n	80064ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe fec0 	bl	8005244 <HAL_I2C_AbortCpltCallback>
 80064c4:	e015      	b.n	80064f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d10b      	bne.n	80064ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fe fe9f 	bl	8005230 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10e      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006536:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d113      	bne.n	800656c <I2C_ITError+0x254>
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b28      	cmp	r3, #40	@ 0x28
 8006548:	d110      	bne.n	800656c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a0a      	ldr	r2, [pc, #40]	@ (8006578 <I2C_ITError+0x260>)
 800654e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fe fe44 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	08006879 	.word	0x08006879
 8006578:	ffff0000 	.word	0xffff0000

0800657c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	461a      	mov	r2, r3
 800658a:	4603      	mov	r3, r0
 800658c:	817b      	strh	r3, [r7, #10]
 800658e:	460b      	mov	r3, r1
 8006590:	813b      	strh	r3, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fa08 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065cc:	d103      	bne.n	80065d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e05f      	b.n	800669a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	6a3a      	ldr	r2, [r7, #32]
 80065ee:	492d      	ldr	r1, [pc, #180]	@ (80066a4 <I2C_RequestMemoryWrite+0x128>)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fa63 	bl	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e04c      	b.n	800669a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006618:	6a39      	ldr	r1, [r7, #32]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 faee 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	2b04      	cmp	r3, #4
 800662c:	d107      	bne.n	800663e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e02b      	b.n	800669a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	611a      	str	r2, [r3, #16]
 8006652:	e021      	b.n	8006698 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b29b      	uxth	r3, r3
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006664:	6a39      	ldr	r1, [r7, #32]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fac8 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	2b04      	cmp	r3, #4
 8006678:	d107      	bne.n	800668a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e005      	b.n	800669a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800668e:	893b      	ldrh	r3, [r7, #8]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	00010002 	.word	0x00010002

080066a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	817b      	strh	r3, [r7, #10]
 80066ba:	460b      	mov	r3, r1
 80066bc:	813b      	strh	r3, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f96a 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006708:	d103      	bne.n	8006712 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e0aa      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006716:	897b      	ldrh	r3, [r7, #10]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	4952      	ldr	r1, [pc, #328]	@ (8006874 <I2C_RequestMemoryRead+0x1cc>)
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f9c5 	bl	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e097      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fa50 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00d      	beq.n	800677e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	2b04      	cmp	r3, #4
 8006768:	d107      	bne.n	800677a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e076      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006784:	893b      	ldrh	r3, [r7, #8]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	611a      	str	r2, [r3, #16]
 800678e:	e021      	b.n	80067d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	6a39      	ldr	r1, [r7, #32]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa2a 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d107      	bne.n	80067c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e050      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ca:	893b      	ldrh	r3, [r7, #8]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d6:	6a39      	ldr	r1, [r7, #32]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fa0f 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d107      	bne.n	80067fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e035      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800680e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	2200      	movs	r2, #0
 8006818:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f8d3 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00d      	beq.n	8006844 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006836:	d103      	bne.n	8006840 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800683e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e013      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006844:	897b      	ldrh	r3, [r7, #10]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	6a3a      	ldr	r2, [r7, #32]
 8006858:	4906      	ldr	r1, [pc, #24]	@ (8006874 <I2C_RequestMemoryRead+0x1cc>)
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f92e 	bl	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	00010002 	.word	0x00010002

08006878 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006890:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006892:	4b4b      	ldr	r3, [pc, #300]	@ (80069c0 <I2C_DMAAbort+0x148>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	08db      	lsrs	r3, r3, #3
 8006898:	4a4a      	ldr	r2, [pc, #296]	@ (80069c4 <I2C_DMAAbort+0x14c>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0a1a      	lsrs	r2, r3, #8
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	00da      	lsls	r2, r3, #3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	f043 0220 	orr.w	r2, r3, #32
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80068be:	e00a      	b.n	80068d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d0ea      	beq.n	80068ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e2:	2200      	movs	r2, #0
 80068e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	2200      	movs	r2, #0
 80068f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006904:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006918:	2200      	movs	r2, #0
 800691a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	2200      	movs	r2, #0
 800692a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b60      	cmp	r3, #96	@ 0x60
 8006946:	d10e      	bne.n	8006966 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f7fe fc70 	bl	8005244 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006964:	e027      	b.n	80069b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006966:	7cfb      	ldrb	r3, [r7, #19]
 8006968:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800696c:	2b28      	cmp	r3, #40	@ 0x28
 800696e:	d117      	bne.n	80069a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800698e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2228      	movs	r2, #40	@ 0x28
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800699e:	e007      	b.n	80069b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069b0:	6978      	ldr	r0, [r7, #20]
 80069b2:	f7fe fc3d 	bl	8005230 <HAL_I2C_ErrorCallback>
}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000001c 	.word	0x2000001c
 80069c4:	14f8b589 	.word	0x14f8b589

080069c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d8:	e048      	b.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d044      	beq.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fc f9e9 	bl	8002db8 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d139      	bne.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10d      	bne.n	8006a1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	43da      	mvns	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	e00c      	b.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	43da      	mvns	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d116      	bne.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e023      	b.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10d      	bne.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	43da      	mvns	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	e00c      	b.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d093      	beq.n	80069da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aca:	e071      	b.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ada:	d123      	bne.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e067      	b.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d041      	beq.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fc f944 	bl	8002db8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d136      	bne.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10c      	bne.n	8006b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	43da      	mvns	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	e00b      	b.n	8006b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	43da      	mvns	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4013      	ands	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d016      	beq.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9c:	f043 0220 	orr.w	r2, r3, #32
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e021      	b.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	0c1b      	lsrs	r3, r3, #16
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d10c      	bne.n	8006bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	43da      	mvns	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e00b      	b.n	8006bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f47f af6d 	bne.w	8006acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c08:	e034      	b.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f915 	bl	8006e3a <I2C_IsAcknowledgeFailed>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e034      	b.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d028      	beq.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c22:	f7fc f8c9 	bl	8002db8 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d302      	bcc.n	8006c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11d      	bne.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c42:	2b80      	cmp	r3, #128	@ 0x80
 8006c44:	d016      	beq.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c60:	f043 0220 	orr.w	r2, r3, #32
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e007      	b.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7e:	2b80      	cmp	r3, #128	@ 0x80
 8006c80:	d1c3      	bne.n	8006c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c98:	e034      	b.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f8cd 	bl	8006e3a <I2C_IsAcknowledgeFailed>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e034      	b.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d028      	beq.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fc f881 	bl	8002db8 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d11d      	bne.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d016      	beq.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e007      	b.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d1c3      	bne.n	8006c9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d28:	4b13      	ldr	r3, [pc, #76]	@ (8006d78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	4a13      	ldr	r2, [pc, #76]	@ (8006d7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d30:	fba2 2303 	umull	r2, r3, r2, r3
 8006d34:	0a1a      	lsrs	r2, r3, #8
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	f043 0220 	orr.w	r2, r3, #32
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e008      	b.n	8006d6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d68:	d0e9      	beq.n	8006d3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	2000001c 	.word	0x2000001c
 8006d7c:	14f8b589 	.word	0x14f8b589

08006d80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d8c:	e049      	b.n	8006e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d119      	bne.n	8006dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0210 	mvn.w	r2, #16
 8006da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e030      	b.n	8006e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd0:	f7fb fff2 	bl	8002db8 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d302      	bcc.n	8006de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d11d      	bne.n	8006e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df0:	2b40      	cmp	r3, #64	@ 0x40
 8006df2:	d016      	beq.n	8006e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	f043 0220 	orr.w	r2, r3, #32
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e007      	b.n	8006e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2c:	2b40      	cmp	r3, #64	@ 0x40
 8006e2e:	d1ae      	bne.n	8006d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e50:	d11b      	bne.n	8006e8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006ea8:	d103      	bne.n	8006eb2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006eb0:	e007      	b.n	8006ec2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006eba:	d102      	bne.n	8006ec2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af02      	add	r7, sp, #8
 8006ed4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e101      	b.n	80070e4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f007 fb98 	bl	800e630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2203      	movs	r2, #3
 8006f04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f0e:	d102      	bne.n	8006f16 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 ffe5 	bl	800aeea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	7c1a      	ldrb	r2, [r3, #16]
 8006f28:	f88d 2000 	strb.w	r2, [sp]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f30:	f003 fec4 	bl	800acbc <USB_CoreInit>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0ce      	b.n	80070e4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f003 ffdd 	bl	800af0c <USB_SetCurrentMode>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0bf      	b.n	80070e4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	e04a      	b.n	8007000 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3315      	adds	r3, #21
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3314      	adds	r3, #20
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f92:	7bfa      	ldrb	r2, [r7, #15]
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	b298      	uxth	r0, r3
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	332e      	adds	r3, #46	@ 0x2e
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006faa:	7bfa      	ldrb	r2, [r7, #15]
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3318      	adds	r3, #24
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006fbe:	7bfa      	ldrb	r2, [r7, #15]
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	331c      	adds	r3, #28
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fd2:	7bfa      	ldrb	r2, [r7, #15]
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3320      	adds	r3, #32
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fe6:	7bfa      	ldrb	r2, [r7, #15]
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3324      	adds	r3, #36	@ 0x24
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	73fb      	strb	r3, [r7, #15]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	429a      	cmp	r2, r3
 8007008:	d3af      	bcc.n	8006f6a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
 800700e:	e044      	b.n	800709a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007026:	7bfa      	ldrb	r2, [r7, #15]
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007038:	7bfa      	ldrb	r2, [r7, #15]
 800703a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800703c:	7bfa      	ldrb	r2, [r7, #15]
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	3301      	adds	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	7bfa      	ldrb	r2, [r7, #15]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d3b5      	bcc.n	8007010 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1a      	ldrb	r2, [r3, #16]
 80070ac:	f88d 2000 	strb.w	r2, [sp]
 80070b0:	3304      	adds	r3, #4
 80070b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070b4:	f003 ff76 	bl	800afa4 <USB_DevInit>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e00c      	b.n	80070e4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f004 ffc0 	bl	800c062 <USB_DevDisconnect>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_PCD_Start+0x1c>
 8007104:	2302      	movs	r3, #2
 8007106:	e022      	b.n	800714e <HAL_PCD_Start+0x62>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007120:	2b01      	cmp	r3, #1
 8007122:	d105      	bne.n	8007130 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f003 fec7 	bl	800aec8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f004 ff6e 	bl	800c020 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007156:	b590      	push	{r4, r7, lr}
 8007158:	b08d      	sub	sp, #52	@ 0x34
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f005 f82c 	bl	800c1ca <USB_GetMode>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 848c 	bne.w	8007a92 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f004 ff90 	bl	800c0a4 <USB_ReadInterrupts>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 8482 	beq.w	8007a90 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f004 ff7d 	bl	800c0a4 <USB_ReadInterrupts>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d107      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f002 0202 	and.w	r2, r2, #2
 80071c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f004 ff6b 	bl	800c0a4 <USB_ReadInterrupts>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d161      	bne.n	800729c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0210 	bic.w	r2, r2, #16
 80071e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	4613      	mov	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	3304      	adds	r3, #4
 8007206:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	0c5b      	lsrs	r3, r3, #17
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	2b02      	cmp	r3, #2
 8007212:	d124      	bne.n	800725e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d035      	beq.n	800728c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800722a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	6a38      	ldr	r0, [r7, #32]
 8007234:	f004 fda2 	bl	800bd7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007244:	441a      	add	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007256:	441a      	add	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	615a      	str	r2, [r3, #20]
 800725c:	e016      	b.n	800728c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	0c5b      	lsrs	r3, r3, #17
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	2b06      	cmp	r3, #6
 8007268:	d110      	bne.n	800728c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007270:	2208      	movs	r2, #8
 8007272:	4619      	mov	r1, r3
 8007274:	6a38      	ldr	r0, [r7, #32]
 8007276:	f004 fd81 	bl	800bd7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007286:	441a      	add	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0210 	orr.w	r2, r2, #16
 800729a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f004 feff 	bl	800c0a4 <USB_ReadInterrupts>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072b0:	f040 80a7 	bne.w	8007402 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f004 ff04 	bl	800c0ca <USB_ReadDevAllOutEpInterrupt>
 80072c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80072c4:	e099      	b.n	80073fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 808e 	beq.w	80073ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f004 ff28 	bl	800c132 <USB_ReadDevOutEPInterrupt>
 80072e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072fa:	461a      	mov	r2, r3
 80072fc:	2301      	movs	r3, #1
 80072fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fea4 	bl	8008050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731e:	461a      	mov	r2, r3
 8007320:	2308      	movs	r3, #8
 8007322:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff7a 	bl	8008220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	d008      	beq.n	8007348 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	2310      	movs	r3, #16
 8007346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d030      	beq.n	80073b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735a:	2b80      	cmp	r3, #128	@ 0x80
 800735c:	d109      	bne.n	8007372 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800736c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007370:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	3304      	adds	r3, #4
 8007386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	78db      	ldrb	r3, [r3, #3]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d108      	bne.n	80073a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2200      	movs	r2, #0
 8007394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f007 fa43 	bl	800e828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ae:	461a      	mov	r2, r3
 80073b0:	2302      	movs	r3, #2
 80073b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	461a      	mov	r2, r3
 80073cc:	2320      	movs	r3, #32
 80073ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	3301      	adds	r3, #1
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f47f af62 	bne.w	80072c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f004 fe4c 	bl	800c0a4 <USB_ReadInterrupts>
 800740c:	4603      	mov	r3, r0
 800740e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007416:	f040 80db 	bne.w	80075d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f004 fe6d 	bl	800c0fe <USB_ReadDevAllInEpInterrupt>
 8007424:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800742a:	e0cd      	b.n	80075c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80c2 	beq.w	80075bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f004 fe93 	bl	800c16e <USB_ReadDevInEPInterrupt>
 8007448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d057      	beq.n	8007504 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	2201      	movs	r2, #1
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	43db      	mvns	r3, r3
 800746e:	69f9      	ldr	r1, [r7, #28]
 8007470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007474:	4013      	ands	r3, r2
 8007476:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	2301      	movs	r3, #1
 8007488:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	799b      	ldrb	r3, [r3, #6]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d132      	bne.n	80074f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007496:	4613      	mov	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3320      	adds	r3, #32
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a8:	4613      	mov	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4403      	add	r3, r0
 80074b2:	331c      	adds	r3, #28
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4419      	add	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	4613      	mov	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4403      	add	r3, r0
 80074c6:	3320      	adds	r3, #32
 80074c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d113      	bne.n	80074f8 <HAL_PCD_IRQHandler+0x3a2>
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	3324      	adds	r3, #36	@ 0x24
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074f0:	461a      	mov	r2, r3
 80074f2:	2101      	movs	r1, #1
 80074f4:	f004 fe9a 	bl	800c22c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f007 f917 	bl	800e732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800751a:	461a      	mov	r2, r3
 800751c:	2308      	movs	r3, #8
 800751e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007536:	461a      	mov	r2, r3
 8007538:	2310      	movs	r3, #16
 800753a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007552:	461a      	mov	r2, r3
 8007554:	2340      	movs	r3, #64	@ 0x40
 8007556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d023      	beq.n	80075aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007564:	6a38      	ldr	r0, [r7, #32]
 8007566:	f003 fe81 	bl	800b26c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800756a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3310      	adds	r3, #16
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d108      	bne.n	8007598 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2200      	movs	r2, #0
 800758a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f007 f95a 	bl	800e84c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a4:	461a      	mov	r2, r3
 80075a6:	2302      	movs	r3, #2
 80075a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80075b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fcbd 	bl	8007f36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	3301      	adds	r3, #1
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80075c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f47f af2e 	bne.w	800742c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f004 fd65 	bl	800c0a4 <USB_ReadInterrupts>
 80075da:	4603      	mov	r3, r0
 80075dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075e4:	d122      	bne.n	800762c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007600:	2b01      	cmp	r3, #1
 8007602:	d108      	bne.n	8007616 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800760c:	2100      	movs	r1, #0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fea4 	bl	800835c <HAL_PCDEx_LPM_Callback>
 8007614:	e002      	b.n	800761c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f007 f8f8 	bl	800e80c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695a      	ldr	r2, [r3, #20]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800762a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f004 fd37 	bl	800c0a4 <USB_ReadInterrupts>
 8007636:	4603      	mov	r3, r0
 8007638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007640:	d112      	bne.n	8007668 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b01      	cmp	r3, #1
 8007650:	d102      	bne.n	8007658 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f007 f8b4 	bl	800e7c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695a      	ldr	r2, [r3, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007666:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4618      	mov	r0, r3
 800766e:	f004 fd19 	bl	800c0a4 <USB_ReadInterrupts>
 8007672:	4603      	mov	r3, r0
 8007674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767c:	f040 80b7 	bne.w	80077ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2110      	movs	r1, #16
 800769a:	4618      	mov	r0, r3
 800769c:	f003 fde6 	bl	800b26c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076a0:	2300      	movs	r3, #0
 80076a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076a4:	e046      	b.n	8007734 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b2:	461a      	mov	r2, r3
 80076b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ca:	0151      	lsls	r1, r2, #5
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	440a      	add	r2, r1
 80076d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	461a      	mov	r2, r3
 80076e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007708:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800770c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007728:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800772c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800772e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007730:	3301      	adds	r3, #1
 8007732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	791b      	ldrb	r3, [r3, #4]
 8007738:	461a      	mov	r2, r3
 800773a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773c:	4293      	cmp	r3, r2
 800773e:	d3b2      	bcc.n	80076a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007752:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7bdb      	ldrb	r3, [r3, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d016      	beq.n	800778a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800776c:	f043 030b 	orr.w	r3, r3, #11
 8007770:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007782:	f043 030b 	orr.w	r3, r3, #11
 8007786:	6453      	str	r3, [r2, #68]	@ 0x44
 8007788:	e015      	b.n	80077b6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800779c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80077a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b0:	f043 030b 	orr.w	r3, r3, #11
 80077b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80077c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077d8:	461a      	mov	r2, r3
 80077da:	f004 fd27 	bl	800c22c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80077ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f004 fc56 	bl	800c0a4 <USB_ReadInterrupts>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007802:	d123      	bne.n	800784c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f004 fcec 	bl	800c1e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f003 fda3 	bl	800b35e <USB_GetDevSpeed>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	f001 fa08 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8007828:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800782e:	461a      	mov	r2, r3
 8007830:	4620      	mov	r0, r4
 8007832:	f003 faa7 	bl	800ad84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f006 ffa3 	bl	800e782 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800784a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f004 fc27 	bl	800c0a4 <USB_ReadInterrupts>
 8007856:	4603      	mov	r3, r0
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10a      	bne.n	8007876 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f006 ff80 	bl	800e766 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f002 0208 	and.w	r2, r2, #8
 8007874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f004 fc12 	bl	800c0a4 <USB_ReadInterrupts>
 8007880:	4603      	mov	r3, r0
 8007882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007886:	2b80      	cmp	r3, #128	@ 0x80
 8007888:	d123      	bne.n	80078d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007896:	2301      	movs	r3, #1
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
 800789a:	e014      	b.n	80078c6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078a0:	4613      	mov	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb0a 	bl	8007ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d3e4      	bcc.n	800789c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f004 fbe4 	bl	800c0a4 <USB_ReadInterrupts>
 80078dc:	4603      	mov	r3, r0
 80078de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e6:	d13c      	bne.n	8007962 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078e8:	2301      	movs	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ec:	e02b      	b.n	8007946 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007902:	4613      	mov	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	3318      	adds	r3, #24
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d115      	bne.n	8007940 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007916:	2b00      	cmp	r3, #0
 8007918:	da12      	bge.n	8007940 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800791e:	4613      	mov	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3317      	adds	r3, #23
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007936:	b2db      	uxtb	r3, r3
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 faca 	bl	8007ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	3301      	adds	r3, #1
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	461a      	mov	r2, r3
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	4293      	cmp	r3, r2
 8007950:	d3cd      	bcc.n	80078ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f004 fb9c 	bl	800c0a4 <USB_ReadInterrupts>
 800796c:	4603      	mov	r3, r0
 800796e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007976:	d156      	bne.n	8007a26 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007978:	2301      	movs	r3, #1
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
 800797c:	e045      	b.n	8007a0a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007992:	4613      	mov	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d12e      	bne.n	8007a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80079a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da2b      	bge.n	8007a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80079b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80079bc:	429a      	cmp	r2, r3
 80079be:	d121      	bne.n	8007a04 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a00:	6053      	str	r3, [r2, #4]
            break;
 8007a02:	e008      	b.n	8007a16 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	3301      	adds	r3, #1
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d3b3      	bcc.n	800797e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695a      	ldr	r2, [r3, #20]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f004 fb3a 	bl	800c0a4 <USB_ReadInterrupts>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3a:	d10a      	bne.n	8007a52 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f006 ff17 	bl	800e870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695a      	ldr	r2, [r3, #20]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f004 fb24 	bl	800c0a4 <USB_ReadInterrupts>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d115      	bne.n	8007a92 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f006 ff07 	bl	800e88c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6859      	ldr	r1, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	e000      	b.n	8007a92 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007a90:	bf00      	nop
    }
  }
}
 8007a92:	3734      	adds	r7, #52	@ 0x34
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd90      	pop	{r4, r7, pc}

08007a98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_PCD_SetAddress+0x1a>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e012      	b.n	8007ad8 <HAL_PCD_SetAddress+0x40>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f004 fa83 	bl	800bfd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	461a      	mov	r2, r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	70fb      	strb	r3, [r7, #3]
 8007af2:	460b      	mov	r3, r1
 8007af4:	803b      	strh	r3, [r7, #0]
 8007af6:	4613      	mov	r3, r2
 8007af8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da0f      	bge.n	8007b26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	3310      	adds	r3, #16
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	705a      	strb	r2, [r3, #1]
 8007b24:	e00f      	b.n	8007b46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	f003 020f 	and.w	r2, r3, #15
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007b52:	883b      	ldrh	r3, [r7, #0]
 8007b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	78ba      	ldrb	r2, [r7, #2]
 8007b60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007b74:	78bb      	ldrb	r3, [r7, #2]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d102      	bne.n	8007b80 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_PCD_EP_Open+0xae>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e00e      	b.n	8007bac <HAL_PCD_EP_Open+0xcc>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f003 fc03 	bl	800b3a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007baa:	7afb      	ldrb	r3, [r7, #11]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da0f      	bge.n	8007be8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	f003 020f 	and.w	r2, r3, #15
 8007bce:	4613      	mov	r3, r2
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	3304      	adds	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	705a      	strb	r2, [r3, #1]
 8007be6:	e00f      	b.n	8007c08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	f003 020f 	and.w	r2, r3, #15
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_PCD_EP_Close+0x6e>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e00e      	b.n	8007c40 <HAL_PCD_EP_Close+0x8c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f003 fc41 	bl	800b4b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	4613      	mov	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2200      	movs	r2, #0
 8007c82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2200      	movs	r2, #0
 8007c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	799b      	ldrb	r3, [r3, #6]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d102      	bne.n	8007ca4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	799b      	ldrb	r3, [r3, #6]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6979      	ldr	r1, [r7, #20]
 8007cb0:	f003 fcde 	bl	800b670 <USB_EPStartXfer>

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007ce0:	681b      	ldr	r3, [r3, #0]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	f003 020f 	and.w	r2, r3, #15
 8007d04:	4613      	mov	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	3310      	adds	r3, #16
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	3304      	adds	r3, #4
 8007d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	799b      	ldrb	r3, [r3, #6]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	799b      	ldrb	r3, [r3, #6]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6979      	ldr	r1, [r7, #20]
 8007d54:	f003 fc8c 	bl	800b670 <USB_EPStartXfer>

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7912      	ldrb	r2, [r2, #4]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e04f      	b.n	8007e20 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da0f      	bge.n	8007da8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	f003 020f 	and.w	r2, r3, #15
 8007d8e:	4613      	mov	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	3310      	adds	r3, #16
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	705a      	strb	r2, [r3, #1]
 8007da6:	e00d      	b.n	8007dc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_PCD_EP_SetStall+0x82>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e01d      	b.n	8007e20 <HAL_PCD_EP_SetStall+0xbe>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68f9      	ldr	r1, [r7, #12]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f004 f81a 	bl	800be2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7999      	ldrb	r1, [r3, #6]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e10:	461a      	mov	r2, r3
 8007e12:	f004 fa0b 	bl	800c22c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	7912      	ldrb	r2, [r2, #4]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d901      	bls.n	8007e46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e042      	b.n	8007ecc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da0f      	bge.n	8007e6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	3310      	adds	r3, #16
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	3304      	adds	r3, #4
 8007e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	705a      	strb	r2, [r3, #1]
 8007e6c:	e00f      	b.n	8007e8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	f003 020f 	and.w	r2, r3, #15
 8007e74:	4613      	mov	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	3304      	adds	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_PCD_EP_ClrStall+0x86>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e00e      	b.n	8007ecc <HAL_PCD_EP_ClrStall+0xa4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f004 f823 	bl	800bf08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	da0c      	bge.n	8007f02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	f003 020f 	and.w	r2, r3, #15
 8007eee:	4613      	mov	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	3310      	adds	r3, #16
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4413      	add	r3, r2
 8007efc:	3304      	adds	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	e00c      	b.n	8007f1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f003 fe42 	bl	800bbac <USB_EPStopXfer>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b08a      	sub	sp, #40	@ 0x28
 8007f3a:	af02      	add	r7, sp, #8
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	3310      	adds	r3, #16
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d901      	bls.n	8007f6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e06b      	b.n	8008046 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d902      	bls.n	8007f8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3303      	adds	r3, #3
 8007f8e:	089b      	lsrs	r3, r3, #2
 8007f90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f92:	e02a      	b.n	8007fea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d902      	bls.n	8007fb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3303      	adds	r3, #3
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68d9      	ldr	r1, [r3, #12]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6978      	ldr	r0, [r7, #20]
 8007fce:	f003 fe97 	bl	800bd00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	441a      	add	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	695a      	ldr	r2, [r3, #20]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d809      	bhi.n	8008014 <PCD_WriteEmptyTxFifo+0xde>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008008:	429a      	cmp	r2, r3
 800800a:	d203      	bcs.n	8008014 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1bf      	bne.n	8007f94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	429a      	cmp	r2, r3
 800801e:	d811      	bhi.n	8008044 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	2201      	movs	r2, #1
 8008028:	fa02 f303 	lsl.w	r3, r2, r3
 800802c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	43db      	mvns	r3, r3
 800803a:	6939      	ldr	r1, [r7, #16]
 800803c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008040:	4013      	ands	r3, r2
 8008042:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	333c      	adds	r3, #60	@ 0x3c
 8008068:	3304      	adds	r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	799b      	ldrb	r3, [r3, #6]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d17b      	bne.n	800817e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d015      	beq.n	80080bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4a61      	ldr	r2, [pc, #388]	@ (8008218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	f240 80b9 	bls.w	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80b3 	beq.w	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b2:	461a      	mov	r2, r3
 80080b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080b8:	6093      	str	r3, [r2, #8]
 80080ba:	e0a7      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d2:	461a      	mov	r2, r3
 80080d4:	2320      	movs	r3, #32
 80080d6:	6093      	str	r3, [r2, #8]
 80080d8:	e098      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 8093 	bne.w	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4a4b      	ldr	r2, [pc, #300]	@ (8008218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d90f      	bls.n	800810e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	e07e      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4613      	mov	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	4413      	add	r3, r2
 8008120:	3304      	adds	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	0159      	lsls	r1, r3, #5
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	440b      	add	r3, r1
 8008130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d114      	bne.n	8008170 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008158:	461a      	mov	r2, r3
 800815a:	2101      	movs	r1, #1
 800815c:	f004 f866 	bl	800c22c <USB_EP0_OutStart>
 8008160:	e006      	b.n	8008170 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	441a      	add	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f006 fac0 	bl	800e6fc <HAL_PCD_DataOutStageCallback>
 800817c:	e046      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	4a26      	ldr	r2, [pc, #152]	@ (800821c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d124      	bne.n	80081d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819c:	461a      	mov	r2, r3
 800819e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a2:	6093      	str	r3, [r2, #8]
 80081a4:	e032      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	461a      	mov	r2, r3
 80081be:	2320      	movs	r3, #32
 80081c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f006 fa97 	bl	800e6fc <HAL_PCD_DataOutStageCallback>
 80081ce:	e01d      	b.n	800820c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d114      	bne.n	8008200 <PCD_EP_OutXfrComplete_int+0x1b0>
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081f8:	461a      	mov	r2, r3
 80081fa:	2100      	movs	r1, #0
 80081fc:	f004 f816 	bl	800c22c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f006 fa78 	bl	800e6fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	4f54300a 	.word	0x4f54300a
 800821c:	4f54310a 	.word	0x4f54310a

08008220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	333c      	adds	r3, #60	@ 0x3c
 8008238:	3304      	adds	r3, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a15      	ldr	r2, [pc, #84]	@ (80082a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d90e      	bls.n	8008274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	461a      	mov	r2, r3
 800826e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f006 fa2f 	bl	800e6d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a0a      	ldr	r2, [pc, #40]	@ (80082a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d90c      	bls.n	800829c <PCD_EP_OutSetupPacket_int+0x7c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	799b      	ldrb	r3, [r3, #6]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d108      	bne.n	800829c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008294:	461a      	mov	r2, r3
 8008296:	2101      	movs	r1, #1
 8008298:	f003 ffc8 	bl	800c22c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	4f54300a 	.word	0x4f54300a

080082ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
 80082b8:	4613      	mov	r3, r2
 80082ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d107      	bne.n	80082da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80082ca:	883b      	ldrh	r3, [r7, #0]
 80082cc:	0419      	lsls	r1, r3, #16
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80082d8:	e028      	b.n	800832c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
 80082ec:	e00d      	b.n	800830a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	3340      	adds	r3, #64	@ 0x40
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	0c1b      	lsrs	r3, r3, #16
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	3301      	adds	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	7bfa      	ldrb	r2, [r7, #15]
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	3b01      	subs	r3, #1
 8008310:	429a      	cmp	r2, r3
 8008312:	d3ec      	bcc.n	80082ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008314:	883b      	ldrh	r3, [r7, #0]
 8008316:	0418      	lsls	r0, r3, #16
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6819      	ldr	r1, [r3, #0]
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	3b01      	subs	r3, #1
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4302      	orrs	r2, r0
 8008324:	3340      	adds	r3, #64	@ 0x40
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	887a      	ldrh	r2, [r7, #2]
 800834c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e267      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d075      	beq.n	800847e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008392:	4b88      	ldr	r3, [pc, #544]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 030c 	and.w	r3, r3, #12
 800839a:	2b04      	cmp	r3, #4
 800839c:	d00c      	beq.n	80083b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800839e:	4b85      	ldr	r3, [pc, #532]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d112      	bne.n	80083d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083aa:	4b82      	ldr	r3, [pc, #520]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083b6:	d10b      	bne.n	80083d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b8:	4b7e      	ldr	r3, [pc, #504]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d05b      	beq.n	800847c <HAL_RCC_OscConfig+0x108>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d157      	bne.n	800847c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e242      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d8:	d106      	bne.n	80083e8 <HAL_RCC_OscConfig+0x74>
 80083da:	4b76      	ldr	r3, [pc, #472]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a75      	ldr	r2, [pc, #468]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e01d      	b.n	8008424 <HAL_RCC_OscConfig+0xb0>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083f0:	d10c      	bne.n	800840c <HAL_RCC_OscConfig+0x98>
 80083f2:	4b70      	ldr	r3, [pc, #448]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a6f      	ldr	r2, [pc, #444]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80083f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	4b6d      	ldr	r3, [pc, #436]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a6c      	ldr	r2, [pc, #432]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e00b      	b.n	8008424 <HAL_RCC_OscConfig+0xb0>
 800840c:	4b69      	ldr	r3, [pc, #420]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a68      	ldr	r2, [pc, #416]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b66      	ldr	r3, [pc, #408]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a65      	ldr	r2, [pc, #404]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 800841e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d013      	beq.n	8008454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842c:	f7fa fcc4 	bl	8002db8 <HAL_GetTick>
 8008430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008434:	f7fa fcc0 	bl	8002db8 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b64      	cmp	r3, #100	@ 0x64
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e207      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008446:	4b5b      	ldr	r3, [pc, #364]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f0      	beq.n	8008434 <HAL_RCC_OscConfig+0xc0>
 8008452:	e014      	b.n	800847e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008454:	f7fa fcb0 	bl	8002db8 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800845c:	f7fa fcac 	bl	8002db8 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b64      	cmp	r3, #100	@ 0x64
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e1f3      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800846e:	4b51      	ldr	r3, [pc, #324]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f0      	bne.n	800845c <HAL_RCC_OscConfig+0xe8>
 800847a:	e000      	b.n	800847e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800847c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d063      	beq.n	8008552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800848a:	4b4a      	ldr	r3, [pc, #296]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 030c 	and.w	r3, r3, #12
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008496:	4b47      	ldr	r3, [pc, #284]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800849e:	2b08      	cmp	r3, #8
 80084a0:	d11c      	bne.n	80084dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084a2:	4b44      	ldr	r3, [pc, #272]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d116      	bne.n	80084dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ae:	4b41      	ldr	r3, [pc, #260]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <HAL_RCC_OscConfig+0x152>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d001      	beq.n	80084c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e1c7      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c6:	4b3b      	ldr	r3, [pc, #236]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4937      	ldr	r1, [pc, #220]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084da:	e03a      	b.n	8008552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d020      	beq.n	8008526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084e4:	4b34      	ldr	r3, [pc, #208]	@ (80085b8 <HAL_RCC_OscConfig+0x244>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ea:	f7fa fc65 	bl	8002db8 <HAL_GetTick>
 80084ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f0:	e008      	b.n	8008504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f2:	f7fa fc61 	bl	8002db8 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e1a8      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008504:	4b2b      	ldr	r3, [pc, #172]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f0      	beq.n	80084f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008510:	4b28      	ldr	r3, [pc, #160]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4925      	ldr	r1, [pc, #148]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008520:	4313      	orrs	r3, r2
 8008522:	600b      	str	r3, [r1, #0]
 8008524:	e015      	b.n	8008552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008526:	4b24      	ldr	r3, [pc, #144]	@ (80085b8 <HAL_RCC_OscConfig+0x244>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852c:	f7fa fc44 	bl	8002db8 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008534:	f7fa fc40 	bl	8002db8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e187      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008546:	4b1b      	ldr	r3, [pc, #108]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f0      	bne.n	8008534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d036      	beq.n	80085cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d016      	beq.n	8008594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008566:	4b15      	ldr	r3, [pc, #84]	@ (80085bc <HAL_RCC_OscConfig+0x248>)
 8008568:	2201      	movs	r2, #1
 800856a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800856c:	f7fa fc24 	bl	8002db8 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008572:	e008      	b.n	8008586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008574:	f7fa fc20 	bl	8002db8 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e167      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008586:	4b0b      	ldr	r3, [pc, #44]	@ (80085b4 <HAL_RCC_OscConfig+0x240>)
 8008588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f0      	beq.n	8008574 <HAL_RCC_OscConfig+0x200>
 8008592:	e01b      	b.n	80085cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <HAL_RCC_OscConfig+0x248>)
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800859a:	f7fa fc0d 	bl	8002db8 <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085a0:	e00e      	b.n	80085c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a2:	f7fa fc09 	bl	8002db8 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d907      	bls.n	80085c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e150      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
 80085b4:	40023800 	.word	0x40023800
 80085b8:	42470000 	.word	0x42470000
 80085bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c0:	4b88      	ldr	r3, [pc, #544]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80085c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1ea      	bne.n	80085a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8097 	beq.w	8008708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085de:	4b81      	ldr	r3, [pc, #516]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10f      	bne.n	800860a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ea:	2300      	movs	r3, #0
 80085ec:	60bb      	str	r3, [r7, #8]
 80085ee:	4b7d      	ldr	r3, [pc, #500]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	4a7c      	ldr	r2, [pc, #496]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80085f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80085fa:	4b7a      	ldr	r3, [pc, #488]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008602:	60bb      	str	r3, [r7, #8]
 8008604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800860a:	4b77      	ldr	r3, [pc, #476]	@ (80087e8 <HAL_RCC_OscConfig+0x474>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d118      	bne.n	8008648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008616:	4b74      	ldr	r3, [pc, #464]	@ (80087e8 <HAL_RCC_OscConfig+0x474>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a73      	ldr	r2, [pc, #460]	@ (80087e8 <HAL_RCC_OscConfig+0x474>)
 800861c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008622:	f7fa fbc9 	bl	8002db8 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800862a:	f7fa fbc5 	bl	8002db8 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e10c      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863c:	4b6a      	ldr	r3, [pc, #424]	@ (80087e8 <HAL_RCC_OscConfig+0x474>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d106      	bne.n	800865e <HAL_RCC_OscConfig+0x2ea>
 8008650:	4b64      	ldr	r3, [pc, #400]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008654:	4a63      	ldr	r2, [pc, #396]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	6713      	str	r3, [r2, #112]	@ 0x70
 800865c:	e01c      	b.n	8008698 <HAL_RCC_OscConfig+0x324>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b05      	cmp	r3, #5
 8008664:	d10c      	bne.n	8008680 <HAL_RCC_OscConfig+0x30c>
 8008666:	4b5f      	ldr	r3, [pc, #380]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866a:	4a5e      	ldr	r2, [pc, #376]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 800866c:	f043 0304 	orr.w	r3, r3, #4
 8008670:	6713      	str	r3, [r2, #112]	@ 0x70
 8008672:	4b5c      	ldr	r3, [pc, #368]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008676:	4a5b      	ldr	r2, [pc, #364]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	6713      	str	r3, [r2, #112]	@ 0x70
 800867e:	e00b      	b.n	8008698 <HAL_RCC_OscConfig+0x324>
 8008680:	4b58      	ldr	r3, [pc, #352]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008684:	4a57      	ldr	r2, [pc, #348]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6713      	str	r3, [r2, #112]	@ 0x70
 800868c:	4b55      	ldr	r3, [pc, #340]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008690:	4a54      	ldr	r2, [pc, #336]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008692:	f023 0304 	bic.w	r3, r3, #4
 8008696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d015      	beq.n	80086cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a0:	f7fa fb8a 	bl	8002db8 <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086a6:	e00a      	b.n	80086be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a8:	f7fa fb86 	bl	8002db8 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d901      	bls.n	80086be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e0cb      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086be:	4b49      	ldr	r3, [pc, #292]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0ee      	beq.n	80086a8 <HAL_RCC_OscConfig+0x334>
 80086ca:	e014      	b.n	80086f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086cc:	f7fa fb74 	bl	8002db8 <HAL_GetTick>
 80086d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086d2:	e00a      	b.n	80086ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d4:	f7fa fb70 	bl	8002db8 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e0b5      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086ea:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1ee      	bne.n	80086d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d105      	bne.n	8008708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086fc:	4b39      	ldr	r3, [pc, #228]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80086fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008700:	4a38      	ldr	r2, [pc, #224]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80a1 	beq.w	8008854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008712:	4b34      	ldr	r3, [pc, #208]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 030c 	and.w	r3, r3, #12
 800871a:	2b08      	cmp	r3, #8
 800871c:	d05c      	beq.n	80087d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d141      	bne.n	80087aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008726:	4b31      	ldr	r3, [pc, #196]	@ (80087ec <HAL_RCC_OscConfig+0x478>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800872c:	f7fa fb44 	bl	8002db8 <HAL_GetTick>
 8008730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008734:	f7fa fb40 	bl	8002db8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e087      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008746:	4b27      	ldr	r3, [pc, #156]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f0      	bne.n	8008734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008760:	019b      	lsls	r3, r3, #6
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	3b01      	subs	r3, #1
 800876c:	041b      	lsls	r3, r3, #16
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008774:	061b      	lsls	r3, r3, #24
 8008776:	491b      	ldr	r1, [pc, #108]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 8008778:	4313      	orrs	r3, r2
 800877a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800877c:	4b1b      	ldr	r3, [pc, #108]	@ (80087ec <HAL_RCC_OscConfig+0x478>)
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008782:	f7fa fb19 	bl	8002db8 <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878a:	f7fa fb15 	bl	8002db8 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e05c      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800879c:	4b11      	ldr	r3, [pc, #68]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f0      	beq.n	800878a <HAL_RCC_OscConfig+0x416>
 80087a8:	e054      	b.n	8008854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087aa:	4b10      	ldr	r3, [pc, #64]	@ (80087ec <HAL_RCC_OscConfig+0x478>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087b0:	f7fa fb02 	bl	8002db8 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087b8:	f7fa fafe 	bl	8002db8 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e045      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ca:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <HAL_RCC_OscConfig+0x470>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x444>
 80087d6:	e03d      	b.n	8008854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d107      	bne.n	80087f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e038      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
 80087e4:	40023800 	.word	0x40023800
 80087e8:	40007000 	.word	0x40007000
 80087ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <HAL_RCC_OscConfig+0x4ec>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d028      	beq.n	8008850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008808:	429a      	cmp	r2, r3
 800880a:	d121      	bne.n	8008850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008816:	429a      	cmp	r2, r3
 8008818:	d11a      	bne.n	8008850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008820:	4013      	ands	r3, r2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008828:	4293      	cmp	r3, r2
 800882a:	d111      	bne.n	8008850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	3b01      	subs	r3, #1
 800883a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800883c:	429a      	cmp	r2, r3
 800883e:	d107      	bne.n	8008850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800884c:	429a      	cmp	r2, r3
 800884e:	d001      	beq.n	8008854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40023800 	.word	0x40023800

08008864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0cc      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008878:	4b68      	ldr	r3, [pc, #416]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d90c      	bls.n	80088a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008886:	4b65      	ldr	r3, [pc, #404]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800888e:	4b63      	ldr	r3, [pc, #396]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e0b8      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d020      	beq.n	80088ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088b8:	4b59      	ldr	r3, [pc, #356]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	4a58      	ldr	r2, [pc, #352]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80088c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088d0:	4b53      	ldr	r3, [pc, #332]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4a52      	ldr	r2, [pc, #328]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80088da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088dc:	4b50      	ldr	r3, [pc, #320]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	494d      	ldr	r1, [pc, #308]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d044      	beq.n	8008984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d107      	bne.n	8008912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008902:	4b47      	ldr	r3, [pc, #284]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d119      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e07f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d003      	beq.n	8008922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800891e:	2b03      	cmp	r3, #3
 8008920:	d107      	bne.n	8008932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008922:	4b3f      	ldr	r3, [pc, #252]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e06f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008932:	4b3b      	ldr	r3, [pc, #236]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e067      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008942:	4b37      	ldr	r3, [pc, #220]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f023 0203 	bic.w	r2, r3, #3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4934      	ldr	r1, [pc, #208]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	4313      	orrs	r3, r2
 8008952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008954:	f7fa fa30 	bl	8002db8 <HAL_GetTick>
 8008958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895a:	e00a      	b.n	8008972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800895c:	f7fa fa2c 	bl	8002db8 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e04f      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008972:	4b2b      	ldr	r3, [pc, #172]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 020c 	and.w	r2, r3, #12
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	429a      	cmp	r2, r3
 8008982:	d1eb      	bne.n	800895c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008984:	4b25      	ldr	r3, [pc, #148]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d20c      	bcs.n	80089ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008992:	4b22      	ldr	r3, [pc, #136]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b20      	ldr	r3, [pc, #128]	@ (8008a1c <HAL_RCC_ClockConfig+0x1b8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e032      	b.n	8008a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b8:	4b19      	ldr	r3, [pc, #100]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	4916      	ldr	r1, [pc, #88]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089d6:	4b12      	ldr	r3, [pc, #72]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	490e      	ldr	r1, [pc, #56]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80089ea:	f000 f821 	bl	8008a30 <HAL_RCC_GetSysClockFreq>
 80089ee:	4602      	mov	r2, r0
 80089f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	490a      	ldr	r1, [pc, #40]	@ (8008a24 <HAL_RCC_ClockConfig+0x1c0>)
 80089fc:	5ccb      	ldrb	r3, [r1, r3]
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	4a09      	ldr	r2, [pc, #36]	@ (8008a28 <HAL_RCC_ClockConfig+0x1c4>)
 8008a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008a06:	4b09      	ldr	r3, [pc, #36]	@ (8008a2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fa f990 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40023c00 	.word	0x40023c00
 8008a20:	40023800 	.word	0x40023800
 8008a24:	08011f24 	.word	0x08011f24
 8008a28:	2000001c 	.word	0x2000001c
 8008a2c:	20000020 	.word	0x20000020

08008a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a34:	b094      	sub	sp, #80	@ 0x50
 8008a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a48:	4b79      	ldr	r3, [pc, #484]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d00d      	beq.n	8008a70 <HAL_RCC_GetSysClockFreq+0x40>
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	f200 80e1 	bhi.w	8008c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_RCC_GetSysClockFreq+0x34>
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d003      	beq.n	8008a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8008a62:	e0db      	b.n	8008c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a64:	4b73      	ldr	r3, [pc, #460]	@ (8008c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a68:	e0db      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a6a:	4b72      	ldr	r3, [pc, #456]	@ (8008c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a6e:	e0d8      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a70:	4b6f      	ldr	r3, [pc, #444]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d063      	beq.n	8008b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a86:	4b6a      	ldr	r3, [pc, #424]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	099b      	lsrs	r3, r3, #6
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	f04f 0000 	mov.w	r0, #0
 8008aaa:	f04f 0100 	mov.w	r1, #0
 8008aae:	0159      	lsls	r1, r3, #5
 8008ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ab4:	0150      	lsls	r0, r2, #5
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4621      	mov	r1, r4
 8008abc:	1a51      	subs	r1, r2, r1
 8008abe:	6139      	str	r1, [r7, #16]
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	018b      	lsls	r3, r1, #6
 8008ad8:	4651      	mov	r1, sl
 8008ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ade:	4651      	mov	r1, sl
 8008ae0:	018a      	lsls	r2, r1, #6
 8008ae2:	4651      	mov	r1, sl
 8008ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8008ae8:	4659      	mov	r1, fp
 8008aea:	eb63 0901 	sbc.w	r9, r3, r1
 8008aee:	f04f 0200 	mov.w	r2, #0
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b02:	4690      	mov	r8, r2
 8008b04:	4699      	mov	r9, r3
 8008b06:	4623      	mov	r3, r4
 8008b08:	eb18 0303 	adds.w	r3, r8, r3
 8008b0c:	60bb      	str	r3, [r7, #8]
 8008b0e:	462b      	mov	r3, r5
 8008b10:	eb49 0303 	adc.w	r3, r9, r3
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b22:	4629      	mov	r1, r5
 8008b24:	028b      	lsls	r3, r1, #10
 8008b26:	4621      	mov	r1, r4
 8008b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	028a      	lsls	r2, r1, #10
 8008b30:	4610      	mov	r0, r2
 8008b32:	4619      	mov	r1, r3
 8008b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b36:	2200      	movs	r2, #0
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b40:	f7f8 f85a 	bl	8000bf8 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4613      	mov	r3, r2
 8008b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b4c:	e058      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b4e:	4b38      	ldr	r3, [pc, #224]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	099b      	lsrs	r3, r3, #6
 8008b54:	2200      	movs	r2, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	4611      	mov	r1, r2
 8008b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	2300      	movs	r3, #0
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	f04f 0000 	mov.w	r0, #0
 8008b70:	f04f 0100 	mov.w	r1, #0
 8008b74:	0159      	lsls	r1, r3, #5
 8008b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b7a:	0150      	lsls	r0, r2, #5
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4641      	mov	r1, r8
 8008b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b86:	4649      	mov	r1, r9
 8008b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8008ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	00eb      	lsls	r3, r5, #3
 8008bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bb6:	00e2      	lsls	r2, r4, #3
 8008bb8:	4614      	mov	r4, r2
 8008bba:	461d      	mov	r5, r3
 8008bbc:	4643      	mov	r3, r8
 8008bbe:	18e3      	adds	r3, r4, r3
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	eb45 0303 	adc.w	r3, r5, r3
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	028b      	lsls	r3, r1, #10
 8008bda:	4621      	mov	r1, r4
 8008bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008be0:	4621      	mov	r1, r4
 8008be2:	028a      	lsls	r2, r1, #10
 8008be4:	4610      	mov	r0, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bea:	2200      	movs	r2, #0
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	61fa      	str	r2, [r7, #28]
 8008bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bf4:	f7f8 f800 	bl	8000bf8 <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008c00:	4b0b      	ldr	r3, [pc, #44]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c1a:	e002      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3750      	adds	r7, #80	@ 0x50
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800
 8008c34:	00f42400 	.word	0x00f42400

08008c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c3c:	4b03      	ldr	r3, [pc, #12]	@ (8008c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	2000001c 	.word	0x2000001c

08008c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c54:	f7ff fff0 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	0a9b      	lsrs	r3, r3, #10
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	4903      	ldr	r1, [pc, #12]	@ (8008c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c66:	5ccb      	ldrb	r3, [r1, r3]
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40023800 	.word	0x40023800
 8008c74:	08011f34 	.word	0x08011f34

08008c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c7c:	f7ff ffdc 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008c80:	4602      	mov	r2, r0
 8008c82:	4b05      	ldr	r3, [pc, #20]	@ (8008c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	0b5b      	lsrs	r3, r3, #13
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	4903      	ldr	r1, [pc, #12]	@ (8008c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c8e:	5ccb      	ldrb	r3, [r1, r3]
 8008c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	08011f34 	.word	0x08011f34

08008ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e041      	b.n	8008d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7f9 fdbc 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f000 fc3c 	bl	800955c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d001      	beq.n	8008d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e044      	b.n	8008de2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1e      	ldr	r2, [pc, #120]	@ (8008df0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x6c>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d82:	d013      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x6c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1a      	ldr	r2, [pc, #104]	@ (8008df4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x6c>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x6c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a17      	ldr	r2, [pc, #92]	@ (8008dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_TIM_Base_Start_IT+0x6c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a16      	ldr	r2, [pc, #88]	@ (8008e00 <HAL_TIM_Base_Start_IT+0xc0>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d111      	bne.n	8008dd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b06      	cmp	r3, #6
 8008dbc:	d010      	beq.n	8008de0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0201 	orr.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dce:	e007      	b.n	8008de0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40010000 	.word	0x40010000
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40000800 	.word	0x40000800
 8008dfc:	40000c00 	.word	0x40000c00
 8008e00:	40014000 	.word	0x40014000

08008e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e041      	b.n	8008e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f839 	bl	8008ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f000 fb8a 	bl	800955c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008eaa:	bf00      	nop
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
	...

08008eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <HAL_TIM_PWM_Start+0x24>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	bf14      	ite	ne
 8008ed4:	2301      	movne	r3, #1
 8008ed6:	2300      	moveq	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	e022      	b.n	8008f22 <HAL_TIM_PWM_Start+0x6a>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d109      	bne.n	8008ef6 <HAL_TIM_PWM_Start+0x3e>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	bf14      	ite	ne
 8008eee:	2301      	movne	r3, #1
 8008ef0:	2300      	moveq	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	e015      	b.n	8008f22 <HAL_TIM_PWM_Start+0x6a>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d109      	bne.n	8008f10 <HAL_TIM_PWM_Start+0x58>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e008      	b.n	8008f22 <HAL_TIM_PWM_Start+0x6a>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e068      	b.n	8008ffc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <HAL_TIM_PWM_Start+0x82>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f38:	e013      	b.n	8008f62 <HAL_TIM_PWM_Start+0xaa>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d104      	bne.n	8008f4a <HAL_TIM_PWM_Start+0x92>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f48:	e00b      	b.n	8008f62 <HAL_TIM_PWM_Start+0xaa>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d104      	bne.n	8008f5a <HAL_TIM_PWM_Start+0xa2>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f58:	e003      	b.n	8008f62 <HAL_TIM_PWM_Start+0xaa>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2201      	movs	r2, #1
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fda8 	bl	8009ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a23      	ldr	r2, [pc, #140]	@ (8009004 <HAL_TIM_PWM_Start+0x14c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d107      	bne.n	8008f8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009004 <HAL_TIM_PWM_Start+0x14c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d018      	beq.n	8008fc6 <HAL_TIM_PWM_Start+0x10e>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9c:	d013      	beq.n	8008fc6 <HAL_TIM_PWM_Start+0x10e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a19      	ldr	r2, [pc, #100]	@ (8009008 <HAL_TIM_PWM_Start+0x150>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_TIM_PWM_Start+0x10e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a17      	ldr	r2, [pc, #92]	@ (800900c <HAL_TIM_PWM_Start+0x154>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d009      	beq.n	8008fc6 <HAL_TIM_PWM_Start+0x10e>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a16      	ldr	r2, [pc, #88]	@ (8009010 <HAL_TIM_PWM_Start+0x158>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <HAL_TIM_PWM_Start+0x10e>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a14      	ldr	r2, [pc, #80]	@ (8009014 <HAL_TIM_PWM_Start+0x15c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d111      	bne.n	8008fea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b06      	cmp	r3, #6
 8008fd6:	d010      	beq.n	8008ffa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0201 	orr.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe8:	e007      	b.n	8008ffa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f042 0201 	orr.w	r2, r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40010000 	.word	0x40010000
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40014000 	.word	0x40014000

08009018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	d020      	beq.n	800907c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01b      	beq.n	800907c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0202 	mvn.w	r2, #2
 800904c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa5b 	bl	800951e <HAL_TIM_IC_CaptureCallback>
 8009068:	e005      	b.n	8009076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa4d 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa5e 	bl	8009532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d020      	beq.n	80090c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01b      	beq.n	80090c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0204 	mvn.w	r2, #4
 8009098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2202      	movs	r2, #2
 800909e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa35 	bl	800951e <HAL_TIM_IC_CaptureCallback>
 80090b4:	e005      	b.n	80090c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa27 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa38 	bl	8009532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d020      	beq.n	8009114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f003 0308 	and.w	r3, r3, #8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0208 	mvn.w	r2, #8
 80090e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2204      	movs	r2, #4
 80090ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa0f 	bl	800951e <HAL_TIM_IC_CaptureCallback>
 8009100:	e005      	b.n	800910e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa01 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa12 	bl	8009532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f003 0310 	and.w	r3, r3, #16
 800911a:	2b00      	cmp	r3, #0
 800911c:	d020      	beq.n	8009160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01b      	beq.n	8009160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f06f 0210 	mvn.w	r2, #16
 8009130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2208      	movs	r2, #8
 8009136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9e9 	bl	800951e <HAL_TIM_IC_CaptureCallback>
 800914c:	e005      	b.n	800915a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9db 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9ec 	bl	8009532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00c      	beq.n	8009184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0201 	mvn.w	r2, #1
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7f7 feb2 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80091a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fd2a 	bl	8009bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00c      	beq.n	80091cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9bd 	bl	8009546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00c      	beq.n	80091f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0220 	mvn.w	r2, #32
 80091e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fcfc 	bl	8009be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009212:	2302      	movs	r3, #2
 8009214:	e0ae      	b.n	8009374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b0c      	cmp	r3, #12
 8009222:	f200 809f 	bhi.w	8009364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	08009261 	.word	0x08009261
 8009230:	08009365 	.word	0x08009365
 8009234:	08009365 	.word	0x08009365
 8009238:	08009365 	.word	0x08009365
 800923c:	080092a1 	.word	0x080092a1
 8009240:	08009365 	.word	0x08009365
 8009244:	08009365 	.word	0x08009365
 8009248:	08009365 	.word	0x08009365
 800924c:	080092e3 	.word	0x080092e3
 8009250:	08009365 	.word	0x08009365
 8009254:	08009365 	.word	0x08009365
 8009258:	08009365 	.word	0x08009365
 800925c:	08009323 	.word	0x08009323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fa04 	bl	8009674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0208 	orr.w	r2, r2, #8
 800927a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0204 	bic.w	r2, r2, #4
 800928a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6999      	ldr	r1, [r3, #24]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	619a      	str	r2, [r3, #24]
      break;
 800929e:	e064      	b.n	800936a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fa4a 	bl	8009740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699a      	ldr	r2, [r3, #24]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6999      	ldr	r1, [r3, #24]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	619a      	str	r2, [r3, #24]
      break;
 80092e0:	e043      	b.n	800936a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fa95 	bl	8009818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69da      	ldr	r2, [r3, #28]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0208 	orr.w	r2, r2, #8
 80092fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0204 	bic.w	r2, r2, #4
 800930c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69d9      	ldr	r1, [r3, #28]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	61da      	str	r2, [r3, #28]
      break;
 8009320:	e023      	b.n	800936a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fadf 	bl	80098ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800933c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800934c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69d9      	ldr	r1, [r3, #28]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	021a      	lsls	r2, r3, #8
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	61da      	str	r2, [r3, #28]
      break;
 8009362:	e002      	b.n	800936a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	75fb      	strb	r3, [r7, #23]
      break;
 8009368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_TIM_ConfigClockSource+0x1c>
 8009394:	2302      	movs	r3, #2
 8009396:	e0b4      	b.n	8009502 <HAL_TIM_ConfigClockSource+0x186>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80093b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093d0:	d03e      	beq.n	8009450 <HAL_TIM_ConfigClockSource+0xd4>
 80093d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093d6:	f200 8087 	bhi.w	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 80093da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093de:	f000 8086 	beq.w	80094ee <HAL_TIM_ConfigClockSource+0x172>
 80093e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093e6:	d87f      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 80093e8:	2b70      	cmp	r3, #112	@ 0x70
 80093ea:	d01a      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0xa6>
 80093ec:	2b70      	cmp	r3, #112	@ 0x70
 80093ee:	d87b      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 80093f0:	2b60      	cmp	r3, #96	@ 0x60
 80093f2:	d050      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0x11a>
 80093f4:	2b60      	cmp	r3, #96	@ 0x60
 80093f6:	d877      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 80093f8:	2b50      	cmp	r3, #80	@ 0x50
 80093fa:	d03c      	beq.n	8009476 <HAL_TIM_ConfigClockSource+0xfa>
 80093fc:	2b50      	cmp	r3, #80	@ 0x50
 80093fe:	d873      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009400:	2b40      	cmp	r3, #64	@ 0x40
 8009402:	d058      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x13a>
 8009404:	2b40      	cmp	r3, #64	@ 0x40
 8009406:	d86f      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009408:	2b30      	cmp	r3, #48	@ 0x30
 800940a:	d064      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0x15a>
 800940c:	2b30      	cmp	r3, #48	@ 0x30
 800940e:	d86b      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009410:	2b20      	cmp	r3, #32
 8009412:	d060      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009414:	2b20      	cmp	r3, #32
 8009416:	d867      	bhi.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d05c      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0x15a>
 800941c:	2b10      	cmp	r3, #16
 800941e:	d05a      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009420:	e062      	b.n	80094e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009432:	f000 fb25 	bl	8009a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	609a      	str	r2, [r3, #8]
      break;
 800944e:	e04f      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009460:	f000 fb0e 	bl	8009a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009472:	609a      	str	r2, [r3, #8]
      break;
 8009474:	e03c      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009482:	461a      	mov	r2, r3
 8009484:	f000 fa82 	bl	800998c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2150      	movs	r1, #80	@ 0x50
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fadb 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 8009494:	e02c      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094a2:	461a      	mov	r2, r3
 80094a4:	f000 faa1 	bl	80099ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2160      	movs	r1, #96	@ 0x60
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 facb 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 80094b4:	e01c      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c2:	461a      	mov	r2, r3
 80094c4:	f000 fa62 	bl	800998c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2140      	movs	r1, #64	@ 0x40
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fabb 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 80094d4:	e00c      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f000 fab2 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 80094e6:	e003      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
      break;
 80094ec:	e000      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80094ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
	...

0800955c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a3a      	ldr	r2, [pc, #232]	@ (8009658 <TIM_Base_SetConfig+0xfc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00f      	beq.n	8009594 <TIM_Base_SetConfig+0x38>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800957a:	d00b      	beq.n	8009594 <TIM_Base_SetConfig+0x38>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a37      	ldr	r2, [pc, #220]	@ (800965c <TIM_Base_SetConfig+0x100>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d007      	beq.n	8009594 <TIM_Base_SetConfig+0x38>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a36      	ldr	r2, [pc, #216]	@ (8009660 <TIM_Base_SetConfig+0x104>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d003      	beq.n	8009594 <TIM_Base_SetConfig+0x38>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a35      	ldr	r2, [pc, #212]	@ (8009664 <TIM_Base_SetConfig+0x108>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d108      	bne.n	80095a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800959a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009658 <TIM_Base_SetConfig+0xfc>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01b      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b4:	d017      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a28      	ldr	r2, [pc, #160]	@ (800965c <TIM_Base_SetConfig+0x100>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d013      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a27      	ldr	r2, [pc, #156]	@ (8009660 <TIM_Base_SetConfig+0x104>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00f      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a26      	ldr	r2, [pc, #152]	@ (8009664 <TIM_Base_SetConfig+0x108>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00b      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a25      	ldr	r2, [pc, #148]	@ (8009668 <TIM_Base_SetConfig+0x10c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a24      	ldr	r2, [pc, #144]	@ (800966c <TIM_Base_SetConfig+0x110>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d003      	beq.n	80095e6 <TIM_Base_SetConfig+0x8a>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a23      	ldr	r2, [pc, #140]	@ (8009670 <TIM_Base_SetConfig+0x114>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d108      	bne.n	80095f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a0e      	ldr	r2, [pc, #56]	@ (8009658 <TIM_Base_SetConfig+0xfc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d103      	bne.n	800962c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b01      	cmp	r3, #1
 800963c:	d105      	bne.n	800964a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	f023 0201 	bic.w	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	611a      	str	r2, [r3, #16]
  }
}
 800964a:	bf00      	nop
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40010000 	.word	0x40010000
 800965c:	40000400 	.word	0x40000400
 8009660:	40000800 	.word	0x40000800
 8009664:	40000c00 	.word	0x40000c00
 8009668:	40014000 	.word	0x40014000
 800966c:	40014400 	.word	0x40014400
 8009670:	40014800 	.word	0x40014800

08009674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f023 0201 	bic.w	r2, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f023 0302 	bic.w	r3, r3, #2
 80096bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a1c      	ldr	r2, [pc, #112]	@ (800973c <TIM_OC1_SetConfig+0xc8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10c      	bne.n	80096ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f023 0308 	bic.w	r3, r3, #8
 80096d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f023 0304 	bic.w	r3, r3, #4
 80096e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a13      	ldr	r2, [pc, #76]	@ (800973c <TIM_OC1_SetConfig+0xc8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d111      	bne.n	8009716 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	621a      	str	r2, [r3, #32]
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	40010000 	.word	0x40010000

08009740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	f023 0210 	bic.w	r2, r3, #16
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800976e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0320 	bic.w	r3, r3, #32
 800978a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a1e      	ldr	r2, [pc, #120]	@ (8009814 <TIM_OC2_SetConfig+0xd4>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10d      	bne.n	80097bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a15      	ldr	r2, [pc, #84]	@ (8009814 <TIM_OC2_SetConfig+0xd4>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d113      	bne.n	80097ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40010000 	.word	0x40010000

08009818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	021b      	lsls	r3, r3, #8
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a1d      	ldr	r2, [pc, #116]	@ (80098e8 <TIM_OC3_SetConfig+0xd0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d10d      	bne.n	8009892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800987c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a14      	ldr	r2, [pc, #80]	@ (80098e8 <TIM_OC3_SetConfig+0xd0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d113      	bne.n	80098c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	40010000 	.word	0x40010000

080098ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	031b      	lsls	r3, r3, #12
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4313      	orrs	r3, r2
 8009942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a10      	ldr	r2, [pc, #64]	@ (8009988 <TIM_OC4_SetConfig+0x9c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d109      	bne.n	8009960 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	019b      	lsls	r3, r3, #6
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40010000 	.word	0x40010000

0800998c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f023 0201 	bic.w	r2, r3, #1
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f023 030a 	bic.w	r3, r3, #10
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	f023 0210 	bic.w	r2, r3, #16
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	031b      	lsls	r3, r3, #12
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f043 0307 	orr.w	r3, r3, #7
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	609a      	str	r2, [r3, #8]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	021a      	lsls	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	609a      	str	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
}
 8009afe:	bf00      	nop
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e050      	b.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d018      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b70:	d013      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a18      	ldr	r2, [pc, #96]	@ (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00e      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a16      	ldr	r2, [pc, #88]	@ (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d009      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a15      	ldr	r2, [pc, #84]	@ (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d004      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a13      	ldr	r2, [pc, #76]	@ (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d10c      	bne.n	8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	40000800 	.word	0x40000800
 8009be0:	40000c00 	.word	0x40000c00
 8009be4:	40014000 	.word	0x40014000

08009be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e042      	b.n	8009ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7f8 feb6 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2224      	movs	r2, #36	@ 0x24
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fdbd 	bl	800a7d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	695a      	ldr	r2, [r3, #20]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	@ 0x28
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d175      	bne.n	8009dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_UART_Transmit+0x2c>
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e06e      	b.n	8009dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2221      	movs	r2, #33	@ 0x21
 8009cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cee:	f7f9 f863 	bl	8002db8 <HAL_GetTick>
 8009cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	88fa      	ldrh	r2, [r7, #6]
 8009cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	88fa      	ldrh	r2, [r7, #6]
 8009cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d08:	d108      	bne.n	8009d1c <HAL_UART_Transmit+0x6c>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	e003      	b.n	8009d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d24:	e02e      	b.n	8009d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2180      	movs	r1, #128	@ 0x80
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fb1f 	bl	800a374 <UART_WaitOnFlagUntilTimeout>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e03a      	b.n	8009dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10b      	bne.n	8009d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	3302      	adds	r3, #2
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	e007      	b.n	8009d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	781a      	ldrb	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3301      	adds	r3, #1
 8009d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1cb      	bne.n	8009d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2200      	movs	r2, #0
 8009d96:	2140      	movs	r1, #64	@ 0x40
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 faeb 	bl	800a374 <UART_WaitOnFlagUntilTimeout>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e006      	b.n	8009dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	e000      	b.n	8009dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009dbc:	2302      	movs	r3, #2
  }
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d112      	bne.n	8009e06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_UART_Receive_IT+0x26>
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e00b      	b.n	8009e08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009df6:	88fb      	ldrh	r3, [r7, #6]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fb12 	bl	800a426 <UART_Start_Receive_IT>
 8009e02:	4603      	mov	r3, r0
 8009e04:	e000      	b.n	8009e08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009e06:	2302      	movs	r3, #2
  }
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b0ba      	sub	sp, #232	@ 0xe8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10f      	bne.n	8009e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <HAL_UART_IRQHandler+0x66>
 8009e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fbf2 	bl	800a658 <UART_Receive_IT>
      return;
 8009e74:	e25b      	b.n	800a32e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80de 	beq.w	800a03c <HAL_UART_IRQHandler+0x22c>
 8009e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80d1 	beq.w	800a03c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <HAL_UART_IRQHandler+0xae>
 8009ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d005      	beq.n	8009ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb6:	f043 0201 	orr.w	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <HAL_UART_IRQHandler+0xd2>
 8009eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eda:	f043 0202 	orr.w	r2, r3, #2
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <HAL_UART_IRQHandler+0xf6>
 8009eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d005      	beq.n	8009f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efe:	f043 0204 	orr.w	r2, r3, #4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d011      	beq.n	8009f36 <HAL_UART_IRQHandler+0x126>
 8009f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2e:	f043 0208 	orr.w	r2, r3, #8
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 81f2 	beq.w	800a324 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_UART_IRQHandler+0x14e>
 8009f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f50:	f003 0320 	and.w	r3, r3, #32
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb7d 	bl	800a658 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f68:	2b40      	cmp	r3, #64	@ 0x40
 8009f6a:	bf0c      	ite	eq
 8009f6c:	2301      	moveq	r3, #1
 8009f6e:	2300      	movne	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f7a:	f003 0308 	and.w	r3, r3, #8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <HAL_UART_IRQHandler+0x17a>
 8009f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d04f      	beq.n	800a02a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa85 	bl	800a49a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9a:	2b40      	cmp	r3, #64	@ 0x40
 8009f9c:	d141      	bne.n	800a022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3314      	adds	r3, #20
 8009fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009fca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1d9      	bne.n	8009f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d013      	beq.n	800a01a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff6:	4a7e      	ldr	r2, [pc, #504]	@ (800a1f0 <HAL_UART_IRQHandler+0x3e0>)
 8009ff8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f9 fcf8 	bl	80039f4 <HAL_DMA_Abort_IT>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d016      	beq.n	800a038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a014:	4610      	mov	r0, r2
 800a016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a018:	e00e      	b.n	800a038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f994 	bl	800a348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a020:	e00a      	b.n	800a038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f990 	bl	800a348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a028:	e006      	b.n	800a038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f98c 	bl	800a348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a036:	e175      	b.n	800a324 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a038:	bf00      	nop
    return;
 800a03a:	e173      	b.n	800a324 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a040:	2b01      	cmp	r3, #1
 800a042:	f040 814f 	bne.w	800a2e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8148 	beq.w	800a2e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8141 	beq.w	800a2e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a062:	2300      	movs	r3, #0
 800a064:	60bb      	str	r3, [r7, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60bb      	str	r3, [r7, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a082:	2b40      	cmp	r3, #64	@ 0x40
 800a084:	f040 80b6 	bne.w	800a1f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 8145 	beq.w	800a328 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	f080 813e 	bcs.w	800a328 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0be:	f000 8088 	beq.w	800a1d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	330c      	adds	r3, #12
 800a0c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a0d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	330c      	adds	r3, #12
 800a0ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a0ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a0fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1d9      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3314      	adds	r3, #20
 800a114:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a11e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a120:	f023 0301 	bic.w	r3, r3, #1
 800a124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a132:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a136:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a13a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e1      	bne.n	800a10e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3314      	adds	r3, #20
 800a150:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a15a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a15c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3314      	adds	r3, #20
 800a16a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a16e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a170:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a174:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a17c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e3      	bne.n	800a14a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	330c      	adds	r3, #12
 800a196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1a2:	f023 0310 	bic.w	r3, r3, #16
 800a1a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a1b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a1b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e3      	bne.n	800a190 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f9 fba1 	bl	8003914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f8b7 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1ee:	e09b      	b.n	800a328 <HAL_UART_IRQHandler+0x518>
 800a1f0:	0800a561 	.word	0x0800a561
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 808e 	beq.w	800a32c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 8089 	beq.w	800a32c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	330c      	adds	r3, #12
 800a220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a23e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a24c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e3      	bne.n	800a21a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3314      	adds	r3, #20
 800a258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	623b      	str	r3, [r7, #32]
   return(result);
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	f023 0301 	bic.w	r3, r3, #1
 800a268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3314      	adds	r3, #20
 800a272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a276:	633a      	str	r2, [r7, #48]	@ 0x30
 800a278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e3      	bne.n	800a252 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0310 	bic.w	r3, r3, #16
 800a2ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	330c      	adds	r3, #12
 800a2b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a2bc:	61fa      	str	r2, [r7, #28]
 800a2be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	69b9      	ldr	r1, [r7, #24]
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e3      	bne.n	800a298 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f83d 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2e2:	e023      	b.n	800a32c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d009      	beq.n	800a304 <HAL_UART_IRQHandler+0x4f4>
 800a2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f943 	bl	800a588 <UART_Transmit_IT>
    return;
 800a302:	e014      	b.n	800a32e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00e      	beq.n	800a32e <HAL_UART_IRQHandler+0x51e>
 800a310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d008      	beq.n	800a32e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f983 	bl	800a628 <UART_EndTransmit_IT>
    return;
 800a322:	e004      	b.n	800a32e <HAL_UART_IRQHandler+0x51e>
    return;
 800a324:	bf00      	nop
 800a326:	e002      	b.n	800a32e <HAL_UART_IRQHandler+0x51e>
      return;
 800a328:	bf00      	nop
 800a32a:	e000      	b.n	800a32e <HAL_UART_IRQHandler+0x51e>
      return;
 800a32c:	bf00      	nop
  }
}
 800a32e:	37e8      	adds	r7, #232	@ 0xe8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	4613      	mov	r3, r2
 800a382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a384:	e03b      	b.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38c:	d037      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38e:	f7f8 fd13 	bl	8002db8 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	6a3a      	ldr	r2, [r7, #32]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e03a      	b.n	800a41e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f003 0304 	and.w	r3, r3, #4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d023      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b80      	cmp	r3, #128	@ 0x80
 800a3ba:	d020      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b40      	cmp	r3, #64	@ 0x40
 800a3c0:	d01d      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b08      	cmp	r3, #8
 800a3ce:	d116      	bne.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 f857 	bl	800a49a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e00f      	b.n	800a41e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4013      	ands	r3, r2
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	bf0c      	ite	eq
 800a40e:	2301      	moveq	r3, #1
 800a410:	2300      	movne	r3, #0
 800a412:	b2db      	uxtb	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d0b4      	beq.n	800a386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	4613      	mov	r3, r2
 800a432:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	88fa      	ldrh	r2, [r7, #6]
 800a43e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	88fa      	ldrh	r2, [r7, #6]
 800a444:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2222      	movs	r2, #34	@ 0x22
 800a450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a46a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	695a      	ldr	r2, [r3, #20]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f042 0220 	orr.w	r2, r2, #32
 800a48a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b095      	sub	sp, #84	@ 0x54
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	330c      	adds	r3, #12
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4c2:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e5      	bne.n	800a4a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3314      	adds	r3, #20
 800a4dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3314      	adds	r3, #20
 800a4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e5      	bne.n	800a4d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d119      	bne.n	800a546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	330c      	adds	r3, #12
 800a518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	60bb      	str	r3, [r7, #8]
   return(result);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f023 0310 	bic.w	r3, r3, #16
 800a528:	647b      	str	r3, [r7, #68]	@ 0x44
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	330c      	adds	r3, #12
 800a530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a532:	61ba      	str	r2, [r7, #24]
 800a534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	6979      	ldr	r1, [r7, #20]
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	613b      	str	r3, [r7, #16]
   return(result);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e5      	bne.n	800a512 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a554:	bf00      	nop
 800a556:	3754      	adds	r7, #84	@ 0x54
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a56c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7ff fee4 	bl	800a348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b21      	cmp	r3, #33	@ 0x21
 800a59a:	d13e      	bne.n	800a61a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5a4:	d114      	bne.n	800a5d0 <UART_Transmit_IT+0x48>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d110      	bne.n	800a5d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	1c9a      	adds	r2, r3, #2
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	621a      	str	r2, [r3, #32]
 800a5ce:	e008      	b.n	800a5e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	1c59      	adds	r1, r3, #1
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6211      	str	r1, [r2, #32]
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10f      	bne.n	800a616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68da      	ldr	r2, [r3, #12]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68da      	ldr	r2, [r3, #12]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	e000      	b.n	800a61c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a61a:	2302      	movs	r3, #2
  }
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a63e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fe73 	bl	800a334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08c      	sub	sp, #48	@ 0x30
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b22      	cmp	r3, #34	@ 0x22
 800a66a:	f040 80ae 	bne.w	800a7ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a676:	d117      	bne.n	800a6a8 <UART_Receive_IT+0x50>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d113      	bne.n	800a6a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a688:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	b29b      	uxth	r3, r3
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	b29a      	uxth	r2, r3
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a0:	1c9a      	adds	r2, r3, #2
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6a6:	e026      	b.n	800a6f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ba:	d007      	beq.n	800a6cc <UART_Receive_IT+0x74>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <UART_Receive_IT+0x82>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e008      	b.n	800a6ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4619      	mov	r1, r3
 800a704:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a706:	2b00      	cmp	r3, #0
 800a708:	d15d      	bne.n	800a7c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0220 	bic.w	r2, r2, #32
 800a718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695a      	ldr	r2, [r3, #20]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0201 	bic.w	r2, r2, #1
 800a738:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d135      	bne.n	800a7bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	330c      	adds	r3, #12
 800a75c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	613b      	str	r3, [r7, #16]
   return(result);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f023 0310 	bic.w	r3, r3, #16
 800a76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a776:	623a      	str	r2, [r7, #32]
 800a778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	69f9      	ldr	r1, [r7, #28]
 800a77c:	6a3a      	ldr	r2, [r7, #32]
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	61bb      	str	r3, [r7, #24]
   return(result);
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e5      	bne.n	800a756 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b10      	cmp	r3, #16
 800a796:	d10a      	bne.n	800a7ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fdd1 	bl	800a35c <HAL_UARTEx_RxEventCallback>
 800a7ba:	e002      	b.n	800a7c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7f6 ff73 	bl	80016a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e002      	b.n	800a7cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e000      	b.n	800a7cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a7ca:	2302      	movs	r3, #2
  }
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3730      	adds	r7, #48	@ 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7d8:	b0c0      	sub	sp, #256	@ 0x100
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f0:	68d9      	ldr	r1, [r3, #12]
 800a7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	ea40 0301 	orr.w	r3, r0, r1
 800a7fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	431a      	orrs	r2, r3
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a82c:	f021 010c 	bic.w	r1, r1, #12
 800a830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a83a:	430b      	orrs	r3, r1
 800a83c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a84e:	6999      	ldr	r1, [r3, #24]
 800a850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	ea40 0301 	orr.w	r3, r0, r1
 800a85a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b8f      	ldr	r3, [pc, #572]	@ (800aaa0 <UART_SetConfig+0x2cc>)
 800a864:	429a      	cmp	r2, r3
 800a866:	d005      	beq.n	800a874 <UART_SetConfig+0xa0>
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b8d      	ldr	r3, [pc, #564]	@ (800aaa4 <UART_SetConfig+0x2d0>)
 800a870:	429a      	cmp	r2, r3
 800a872:	d104      	bne.n	800a87e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a874:	f7fe fa00 	bl	8008c78 <HAL_RCC_GetPCLK2Freq>
 800a878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a87c:	e003      	b.n	800a886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a87e:	f7fe f9e7 	bl	8008c50 <HAL_RCC_GetPCLK1Freq>
 800a882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a890:	f040 810c 	bne.w	800aaac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a89e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a8a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	1891      	adds	r1, r2, r2
 800a8ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a8ae:	415b      	adcs	r3, r3
 800a8b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	eb12 0801 	adds.w	r8, r2, r1
 800a8bc:	4629      	mov	r1, r5
 800a8be:	eb43 0901 	adc.w	r9, r3, r1
 800a8c2:	f04f 0200 	mov.w	r2, #0
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8d6:	4690      	mov	r8, r2
 800a8d8:	4699      	mov	r9, r3
 800a8da:	4623      	mov	r3, r4
 800a8dc:	eb18 0303 	adds.w	r3, r8, r3
 800a8e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	eb49 0303 	adc.w	r3, r9, r3
 800a8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a8ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a8fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a902:	460b      	mov	r3, r1
 800a904:	18db      	adds	r3, r3, r3
 800a906:	653b      	str	r3, [r7, #80]	@ 0x50
 800a908:	4613      	mov	r3, r2
 800a90a:	eb42 0303 	adc.w	r3, r2, r3
 800a90e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a918:	f7f6 f96e 	bl	8000bf8 <__aeabi_uldivmod>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4b61      	ldr	r3, [pc, #388]	@ (800aaa8 <UART_SetConfig+0x2d4>)
 800a922:	fba3 2302 	umull	r2, r3, r3, r2
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	011c      	lsls	r4, r3, #4
 800a92a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a93c:	4642      	mov	r2, r8
 800a93e:	464b      	mov	r3, r9
 800a940:	1891      	adds	r1, r2, r2
 800a942:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a944:	415b      	adcs	r3, r3
 800a946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a94c:	4641      	mov	r1, r8
 800a94e:	eb12 0a01 	adds.w	sl, r2, r1
 800a952:	4649      	mov	r1, r9
 800a954:	eb43 0b01 	adc.w	fp, r3, r1
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 0300 	mov.w	r3, #0
 800a960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a96c:	4692      	mov	sl, r2
 800a96e:	469b      	mov	fp, r3
 800a970:	4643      	mov	r3, r8
 800a972:	eb1a 0303 	adds.w	r3, sl, r3
 800a976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a97a:	464b      	mov	r3, r9
 800a97c:	eb4b 0303 	adc.w	r3, fp, r3
 800a980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a998:	460b      	mov	r3, r1
 800a99a:	18db      	adds	r3, r3, r3
 800a99c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a99e:	4613      	mov	r3, r2
 800a9a0:	eb42 0303 	adc.w	r3, r2, r3
 800a9a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a9aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a9ae:	f7f6 f923 	bl	8000bf8 <__aeabi_uldivmod>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4b3b      	ldr	r3, [pc, #236]	@ (800aaa8 <UART_SetConfig+0x2d4>)
 800a9ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	2264      	movs	r2, #100	@ 0x64
 800a9c2:	fb02 f303 	mul.w	r3, r2, r3
 800a9c6:	1acb      	subs	r3, r1, r3
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a9ce:	4b36      	ldr	r3, [pc, #216]	@ (800aaa8 <UART_SetConfig+0x2d4>)
 800a9d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a9dc:	441c      	add	r4, r3
 800a9de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a9ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	1891      	adds	r1, r2, r2
 800a9f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a9f8:	415b      	adcs	r3, r3
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa00:	4641      	mov	r1, r8
 800aa02:	1851      	adds	r1, r2, r1
 800aa04:	6339      	str	r1, [r7, #48]	@ 0x30
 800aa06:	4649      	mov	r1, r9
 800aa08:	414b      	adcs	r3, r1
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aa18:	4659      	mov	r1, fp
 800aa1a:	00cb      	lsls	r3, r1, #3
 800aa1c:	4651      	mov	r1, sl
 800aa1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa22:	4651      	mov	r1, sl
 800aa24:	00ca      	lsls	r2, r1, #3
 800aa26:	4610      	mov	r0, r2
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	4642      	mov	r2, r8
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa34:	464b      	mov	r3, r9
 800aa36:	460a      	mov	r2, r1
 800aa38:	eb42 0303 	adc.w	r3, r2, r3
 800aa3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aa4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aa50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aa54:	460b      	mov	r3, r1
 800aa56:	18db      	adds	r3, r3, r3
 800aa58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	eb42 0303 	adc.w	r3, r2, r3
 800aa60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aa66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aa6a:	f7f6 f8c5 	bl	8000bf8 <__aeabi_uldivmod>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa8 <UART_SetConfig+0x2d4>)
 800aa74:	fba3 1302 	umull	r1, r3, r3, r2
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	2164      	movs	r1, #100	@ 0x64
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	3332      	adds	r3, #50	@ 0x32
 800aa86:	4a08      	ldr	r2, [pc, #32]	@ (800aaa8 <UART_SetConfig+0x2d4>)
 800aa88:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	f003 0207 	and.w	r2, r3, #7
 800aa92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4422      	add	r2, r4
 800aa9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa9c:	e106      	b.n	800acac <UART_SetConfig+0x4d8>
 800aa9e:	bf00      	nop
 800aaa0:	40011000 	.word	0x40011000
 800aaa4:	40011400 	.word	0x40011400
 800aaa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aaba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800aabe:	4642      	mov	r2, r8
 800aac0:	464b      	mov	r3, r9
 800aac2:	1891      	adds	r1, r2, r2
 800aac4:	6239      	str	r1, [r7, #32]
 800aac6:	415b      	adcs	r3, r3
 800aac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aace:	4641      	mov	r1, r8
 800aad0:	1854      	adds	r4, r2, r1
 800aad2:	4649      	mov	r1, r9
 800aad4:	eb43 0501 	adc.w	r5, r3, r1
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	00eb      	lsls	r3, r5, #3
 800aae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aae6:	00e2      	lsls	r2, r4, #3
 800aae8:	4614      	mov	r4, r2
 800aaea:	461d      	mov	r5, r3
 800aaec:	4643      	mov	r3, r8
 800aaee:	18e3      	adds	r3, r4, r3
 800aaf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	eb45 0303 	adc.w	r3, r5, r3
 800aafa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	008b      	lsls	r3, r1, #2
 800ab1e:	4621      	mov	r1, r4
 800ab20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab24:	4621      	mov	r1, r4
 800ab26:	008a      	lsls	r2, r1, #2
 800ab28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ab2c:	f7f6 f864 	bl	8000bf8 <__aeabi_uldivmod>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4b60      	ldr	r3, [pc, #384]	@ (800acb8 <UART_SetConfig+0x4e4>)
 800ab36:	fba3 2302 	umull	r2, r3, r3, r2
 800ab3a:	095b      	lsrs	r3, r3, #5
 800ab3c:	011c      	lsls	r4, r3, #4
 800ab3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ab4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	1891      	adds	r1, r2, r2
 800ab56:	61b9      	str	r1, [r7, #24]
 800ab58:	415b      	adcs	r3, r3
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab60:	4641      	mov	r1, r8
 800ab62:	1851      	adds	r1, r2, r1
 800ab64:	6139      	str	r1, [r7, #16]
 800ab66:	4649      	mov	r1, r9
 800ab68:	414b      	adcs	r3, r1
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab78:	4659      	mov	r1, fp
 800ab7a:	00cb      	lsls	r3, r1, #3
 800ab7c:	4651      	mov	r1, sl
 800ab7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab82:	4651      	mov	r1, sl
 800ab84:	00ca      	lsls	r2, r1, #3
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab94:	464b      	mov	r3, r9
 800ab96:	460a      	mov	r2, r1
 800ab98:	eb42 0303 	adc.w	r3, r2, r3
 800ab9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 0300 	mov.w	r3, #0
 800abb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800abb8:	4649      	mov	r1, r9
 800abba:	008b      	lsls	r3, r1, #2
 800abbc:	4641      	mov	r1, r8
 800abbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abc2:	4641      	mov	r1, r8
 800abc4:	008a      	lsls	r2, r1, #2
 800abc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800abca:	f7f6 f815 	bl	8000bf8 <__aeabi_uldivmod>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	4b38      	ldr	r3, [pc, #224]	@ (800acb8 <UART_SetConfig+0x4e4>)
 800abd6:	fba3 2301 	umull	r2, r3, r3, r1
 800abda:	095b      	lsrs	r3, r3, #5
 800abdc:	2264      	movs	r2, #100	@ 0x64
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	1acb      	subs	r3, r1, r3
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	3332      	adds	r3, #50	@ 0x32
 800abe8:	4a33      	ldr	r2, [pc, #204]	@ (800acb8 <UART_SetConfig+0x4e4>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	095b      	lsrs	r3, r3, #5
 800abf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abf4:	441c      	add	r4, r3
 800abf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abfa:	2200      	movs	r2, #0
 800abfc:	673b      	str	r3, [r7, #112]	@ 0x70
 800abfe:	677a      	str	r2, [r7, #116]	@ 0x74
 800ac00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	1891      	adds	r1, r2, r2
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	415b      	adcs	r3, r3
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac14:	4641      	mov	r1, r8
 800ac16:	1851      	adds	r1, r2, r1
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	414b      	adcs	r3, r1
 800ac1e:	607b      	str	r3, [r7, #4]
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	00cb      	lsls	r3, r1, #3
 800ac30:	4651      	mov	r1, sl
 800ac32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac36:	4651      	mov	r1, sl
 800ac38:	00ca      	lsls	r2, r1, #3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4642      	mov	r2, r8
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac46:	464b      	mov	r3, r9
 800ac48:	460a      	mov	r2, r1
 800ac4a:	eb42 0303 	adc.w	r3, r2, r3
 800ac4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac5a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ac68:	4649      	mov	r1, r9
 800ac6a:	008b      	lsls	r3, r1, #2
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac72:	4641      	mov	r1, r8
 800ac74:	008a      	lsls	r2, r1, #2
 800ac76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ac7a:	f7f5 ffbd 	bl	8000bf8 <__aeabi_uldivmod>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <UART_SetConfig+0x4e4>)
 800ac84:	fba3 1302 	umull	r1, r3, r3, r2
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	2164      	movs	r1, #100	@ 0x64
 800ac8c:	fb01 f303 	mul.w	r3, r1, r3
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	3332      	adds	r3, #50	@ 0x32
 800ac96:	4a08      	ldr	r2, [pc, #32]	@ (800acb8 <UART_SetConfig+0x4e4>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4422      	add	r2, r4
 800acaa:	609a      	str	r2, [r3, #8]
}
 800acac:	bf00      	nop
 800acae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800acb2:	46bd      	mov	sp, r7
 800acb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb8:	51eb851f 	.word	0x51eb851f

0800acbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acbc:	b084      	sub	sp, #16
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	f107 001c 	add.w	r0, r7, #28
 800acca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d123      	bne.n	800ad1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800acea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d105      	bne.n	800ad12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 fae8 	bl	800c2e8 <USB_CoreReset>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
 800ad1c:	e01b      	b.n	800ad56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fadc 	bl	800c2e8 <USB_CoreReset>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d106      	bne.n	800ad4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad48:	e005      	b.n	800ad56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad56:	7fbb      	ldrb	r3, [r7, #30]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d10b      	bne.n	800ad74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f043 0206 	orr.w	r2, r3, #6
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f043 0220 	orr.w	r2, r3, #32
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad80:	b004      	add	sp, #16
 800ad82:	4770      	bx	lr

0800ad84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d165      	bne.n	800ae64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	4a41      	ldr	r2, [pc, #260]	@ (800aea0 <USB_SetTurnaroundTime+0x11c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d906      	bls.n	800adae <USB_SetTurnaroundTime+0x2a>
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4a40      	ldr	r2, [pc, #256]	@ (800aea4 <USB_SetTurnaroundTime+0x120>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d202      	bcs.n	800adae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ada8:	230f      	movs	r3, #15
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e062      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	4a3c      	ldr	r2, [pc, #240]	@ (800aea4 <USB_SetTurnaroundTime+0x120>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d306      	bcc.n	800adc4 <USB_SetTurnaroundTime+0x40>
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4a3b      	ldr	r2, [pc, #236]	@ (800aea8 <USB_SetTurnaroundTime+0x124>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d202      	bcs.n	800adc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800adbe:	230e      	movs	r3, #14
 800adc0:	617b      	str	r3, [r7, #20]
 800adc2:	e057      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4a38      	ldr	r2, [pc, #224]	@ (800aea8 <USB_SetTurnaroundTime+0x124>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d306      	bcc.n	800adda <USB_SetTurnaroundTime+0x56>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4a37      	ldr	r2, [pc, #220]	@ (800aeac <USB_SetTurnaroundTime+0x128>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d202      	bcs.n	800adda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800add4:	230d      	movs	r3, #13
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	e04c      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	4a33      	ldr	r2, [pc, #204]	@ (800aeac <USB_SetTurnaroundTime+0x128>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d306      	bcc.n	800adf0 <USB_SetTurnaroundTime+0x6c>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4a32      	ldr	r2, [pc, #200]	@ (800aeb0 <USB_SetTurnaroundTime+0x12c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d802      	bhi.n	800adf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800adea:	230c      	movs	r3, #12
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	e041      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4a2f      	ldr	r2, [pc, #188]	@ (800aeb0 <USB_SetTurnaroundTime+0x12c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d906      	bls.n	800ae06 <USB_SetTurnaroundTime+0x82>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	4a2e      	ldr	r2, [pc, #184]	@ (800aeb4 <USB_SetTurnaroundTime+0x130>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d802      	bhi.n	800ae06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae00:	230b      	movs	r3, #11
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	e036      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	4a2a      	ldr	r2, [pc, #168]	@ (800aeb4 <USB_SetTurnaroundTime+0x130>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d906      	bls.n	800ae1c <USB_SetTurnaroundTime+0x98>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4a29      	ldr	r2, [pc, #164]	@ (800aeb8 <USB_SetTurnaroundTime+0x134>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d802      	bhi.n	800ae1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae16:	230a      	movs	r3, #10
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	e02b      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4a26      	ldr	r2, [pc, #152]	@ (800aeb8 <USB_SetTurnaroundTime+0x134>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d906      	bls.n	800ae32 <USB_SetTurnaroundTime+0xae>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	4a25      	ldr	r2, [pc, #148]	@ (800aebc <USB_SetTurnaroundTime+0x138>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d202      	bcs.n	800ae32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae2c:	2309      	movs	r3, #9
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	e020      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	4a21      	ldr	r2, [pc, #132]	@ (800aebc <USB_SetTurnaroundTime+0x138>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d306      	bcc.n	800ae48 <USB_SetTurnaroundTime+0xc4>
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	4a20      	ldr	r2, [pc, #128]	@ (800aec0 <USB_SetTurnaroundTime+0x13c>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d802      	bhi.n	800ae48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae42:	2308      	movs	r3, #8
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	e015      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4a1d      	ldr	r2, [pc, #116]	@ (800aec0 <USB_SetTurnaroundTime+0x13c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d906      	bls.n	800ae5e <USB_SetTurnaroundTime+0xda>
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4a1c      	ldr	r2, [pc, #112]	@ (800aec4 <USB_SetTurnaroundTime+0x140>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d202      	bcs.n	800ae5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae58:	2307      	movs	r3, #7
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	e00a      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae5e:	2306      	movs	r3, #6
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	e007      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae6a:	2309      	movs	r3, #9
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	e001      	b.n	800ae74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae70:	2309      	movs	r3, #9
 800ae72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	029b      	lsls	r3, r3, #10
 800ae88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	00d8acbf 	.word	0x00d8acbf
 800aea4:	00e4e1c0 	.word	0x00e4e1c0
 800aea8:	00f42400 	.word	0x00f42400
 800aeac:	01067380 	.word	0x01067380
 800aeb0:	011a499f 	.word	0x011a499f
 800aeb4:	01312cff 	.word	0x01312cff
 800aeb8:	014ca43f 	.word	0x014ca43f
 800aebc:	016e3600 	.word	0x016e3600
 800aec0:	01a6ab1f 	.word	0x01a6ab1f
 800aec4:	01e84800 	.word	0x01e84800

0800aec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	f043 0201 	orr.w	r2, r3, #1
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f023 0201 	bic.w	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d115      	bne.n	800af5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800af3a:	200a      	movs	r0, #10
 800af3c:	f7f7 ff48 	bl	8002dd0 <HAL_Delay>
      ms += 10U;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	330a      	adds	r3, #10
 800af44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 f93f 	bl	800c1ca <USB_GetMode>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d01e      	beq.n	800af90 <USB_SetCurrentMode+0x84>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2bc7      	cmp	r3, #199	@ 0xc7
 800af56:	d9f0      	bls.n	800af3a <USB_SetCurrentMode+0x2e>
 800af58:	e01a      	b.n	800af90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d115      	bne.n	800af8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800af6c:	200a      	movs	r0, #10
 800af6e:	f7f7 ff2f 	bl	8002dd0 <HAL_Delay>
      ms += 10U;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	330a      	adds	r3, #10
 800af76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 f926 	bl	800c1ca <USB_GetMode>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <USB_SetCurrentMode+0x84>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2bc7      	cmp	r3, #199	@ 0xc7
 800af88:	d9f0      	bls.n	800af6c <USB_SetCurrentMode+0x60>
 800af8a:	e001      	b.n	800af90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e005      	b.n	800af9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2bc8      	cmp	r3, #200	@ 0xc8
 800af94:	d101      	bne.n	800af9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e000      	b.n	800af9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afa4:	b084      	sub	sp, #16
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b086      	sub	sp, #24
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800afb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	e009      	b.n	800afd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	3340      	adds	r3, #64	@ 0x40
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	3301      	adds	r3, #1
 800afd6:	613b      	str	r3, [r7, #16]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b0e      	cmp	r3, #14
 800afdc:	d9f2      	bls.n	800afc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800afde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d11c      	bne.n	800b020 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aff4:	f043 0302 	orr.w	r3, r3, #2
 800aff8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b00a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b016:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b01e:	e00b      	b.n	800b038 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b024:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b030:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b03e:	461a      	mov	r2, r3
 800b040:	2300      	movs	r3, #0
 800b042:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b044:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d10d      	bne.n	800b068 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b04c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b050:	2b00      	cmp	r3, #0
 800b052:	d104      	bne.n	800b05e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f968 	bl	800b32c <USB_SetDevSpeed>
 800b05c:	e008      	b.n	800b070 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b05e:	2101      	movs	r1, #1
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f963 	bl	800b32c <USB_SetDevSpeed>
 800b066:	e003      	b.n	800b070 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b068:	2103      	movs	r1, #3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f95e 	bl	800b32c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b070:	2110      	movs	r1, #16
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f8fa 	bl	800b26c <USB_FlushTxFifo>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f924 	bl	800b2d0 <USB_FlushRxFifo>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b098:	461a      	mov	r2, r3
 800b09a:	2300      	movs	r3, #0
 800b09c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
 800b0ba:	e043      	b.n	800b144 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	015a      	lsls	r2, r3, #5
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0d2:	d118      	bne.n	800b106 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	e013      	b.n	800b118 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	e008      	b.n	800b118 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b112:	461a      	mov	r2, r3
 800b114:	2300      	movs	r3, #0
 800b116:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b124:	461a      	mov	r2, r3
 800b126:	2300      	movs	r3, #0
 800b128:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b136:	461a      	mov	r2, r3
 800b138:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b13c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	3301      	adds	r3, #1
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b148:	461a      	mov	r2, r3
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d3b5      	bcc.n	800b0bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	e043      	b.n	800b1de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b16c:	d118      	bne.n	800b1a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10a      	bne.n	800b18a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b180:	461a      	mov	r2, r3
 800b182:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	e013      	b.n	800b1b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b196:	461a      	mov	r2, r3
 800b198:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	e008      	b.n	800b1b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1be:	461a      	mov	r2, r3
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d3b5      	bcc.n	800b156 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b20a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b20c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f043 0210 	orr.w	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	4b10      	ldr	r3, [pc, #64]	@ (800b268 <USB_DevInit+0x2c4>)
 800b226:	4313      	orrs	r3, r2
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b22c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	f043 0208 	orr.w	r2, r3, #8
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b240:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b244:	2b01      	cmp	r3, #1
 800b246:	d107      	bne.n	800b258 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b250:	f043 0304 	orr.w	r3, r3, #4
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b264:	b004      	add	sp, #16
 800b266:	4770      	bx	lr
 800b268:	803c3800 	.word	0x803c3800

0800b26c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3301      	adds	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b286:	d901      	bls.n	800b28c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e01b      	b.n	800b2c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	daf2      	bge.n	800b27a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	019b      	lsls	r3, r3, #6
 800b29c:	f043 0220 	orr.w	r2, r3, #32
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2b0:	d901      	bls.n	800b2b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e006      	b.n	800b2c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0320 	and.w	r3, r3, #32
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d0f0      	beq.n	800b2a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2e8:	d901      	bls.n	800b2ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e018      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	daf2      	bge.n	800b2dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2210      	movs	r2, #16
 800b2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b30c:	d901      	bls.n	800b312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e006      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	2b10      	cmp	r3, #16
 800b31c:	d0f0      	beq.n	800b300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	68f9      	ldr	r1, [r7, #12]
 800b348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b34c:	4313      	orrs	r3, r2
 800b34e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b35e:	b480      	push	{r7}
 800b360:	b087      	sub	sp, #28
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f003 0306 	and.w	r3, r3, #6
 800b376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
 800b382:	e00a      	b.n	800b39a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d002      	beq.n	800b390 <USB_GetDevSpeed+0x32>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b06      	cmp	r3, #6
 800b38e:	d102      	bne.n	800b396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b390:	2302      	movs	r3, #2
 800b392:	75fb      	strb	r3, [r7, #23]
 800b394:	e001      	b.n	800b39a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b396:	230f      	movs	r3, #15
 800b398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	785b      	ldrb	r3, [r3, #1]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d13a      	bne.n	800b43a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ca:	69da      	ldr	r2, [r3, #28]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	68f9      	ldr	r1, [r7, #12]
 800b3de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d155      	bne.n	800b4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	791b      	ldrb	r3, [r3, #4]
 800b416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	059b      	lsls	r3, r3, #22
 800b41e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b420:	4313      	orrs	r3, r2
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	e036      	b.n	800b4a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b440:	69da      	ldr	r2, [r3, #28]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	2101      	movs	r1, #1
 800b44c:	fa01 f303 	lsl.w	r3, r1, r3
 800b450:	041b      	lsls	r3, r3, #16
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b458:	4313      	orrs	r3, r2
 800b45a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d11a      	bne.n	800b4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b48e:	430b      	orrs	r3, r1
 800b490:	4313      	orrs	r3, r2
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b49e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	785b      	ldrb	r3, [r3, #1]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d161      	bne.n	800b598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4ea:	d11f      	bne.n	800b52c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	0151      	lsls	r1, r2, #5
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	440a      	add	r2, r1
 800b502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b506:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b50a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	0151      	lsls	r1, r2, #5
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	440a      	add	r2, r1
 800b522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b52a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 030f 	and.w	r3, r3, #15
 800b53c:	2101      	movs	r1, #1
 800b53e:	fa01 f303 	lsl.w	r3, r1, r3
 800b542:	b29b      	uxth	r3, r3
 800b544:	43db      	mvns	r3, r3
 800b546:	68f9      	ldr	r1, [r7, #12]
 800b548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b54c:	4013      	ands	r3, r2
 800b54e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b556:	69da      	ldr	r2, [r3, #28]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	f003 030f 	and.w	r3, r3, #15
 800b560:	2101      	movs	r1, #1
 800b562:	fa01 f303 	lsl.w	r3, r1, r3
 800b566:	b29b      	uxth	r3, r3
 800b568:	43db      	mvns	r3, r3
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b570:	4013      	ands	r3, r2
 800b572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	0159      	lsls	r1, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	440b      	add	r3, r1
 800b58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58e:	4619      	mov	r1, r3
 800b590:	4b35      	ldr	r3, [pc, #212]	@ (800b668 <USB_DeactivateEndpoint+0x1b0>)
 800b592:	4013      	ands	r3, r2
 800b594:	600b      	str	r3, [r1, #0]
 800b596:	e060      	b.n	800b65a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ae:	d11f      	bne.n	800b5f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	0151      	lsls	r1, r2, #5
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	0151      	lsls	r1, r2, #5
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	440a      	add	r2, r1
 800b5e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f003 030f 	and.w	r3, r3, #15
 800b600:	2101      	movs	r1, #1
 800b602:	fa01 f303 	lsl.w	r3, r1, r3
 800b606:	041b      	lsls	r3, r3, #16
 800b608:	43db      	mvns	r3, r3
 800b60a:	68f9      	ldr	r1, [r7, #12]
 800b60c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b610:	4013      	ands	r3, r2
 800b612:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b61a:	69da      	ldr	r2, [r3, #28]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 030f 	and.w	r3, r3, #15
 800b624:	2101      	movs	r1, #1
 800b626:	fa01 f303 	lsl.w	r3, r1, r3
 800b62a:	041b      	lsls	r3, r3, #16
 800b62c:	43db      	mvns	r3, r3
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b634:	4013      	ands	r3, r2
 800b636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	0159      	lsls	r1, r3, #5
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	440b      	add	r3, r1
 800b64e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b652:	4619      	mov	r1, r3
 800b654:	4b05      	ldr	r3, [pc, #20]	@ (800b66c <USB_DeactivateEndpoint+0x1b4>)
 800b656:	4013      	ands	r3, r2
 800b658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	ec337800 	.word	0xec337800
 800b66c:	eff37800 	.word	0xeff37800

0800b670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	@ 0x28
 800b674:	af02      	add	r7, sp, #8
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	4613      	mov	r3, r2
 800b67c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	f040 817f 	bne.w	800b990 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d132      	bne.n	800b700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b6b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b6bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	015a      	lsls	r2, r3, #5
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	0151      	lsls	r1, r2, #5
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	440a      	add	r2, r1
 800b6d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	0151      	lsls	r1, r2, #5
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	440a      	add	r2, r1
 800b6f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6f8:	0cdb      	lsrs	r3, r3, #19
 800b6fa:	04db      	lsls	r3, r3, #19
 800b6fc:	6113      	str	r3, [r2, #16]
 800b6fe:	e097      	b.n	800b830 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	0151      	lsls	r1, r2, #5
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	440a      	add	r2, r1
 800b716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b71a:	0cdb      	lsrs	r3, r3, #19
 800b71c:	04db      	lsls	r3, r3, #19
 800b71e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	015a      	lsls	r2, r3, #5
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	4413      	add	r3, r2
 800b728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	0151      	lsls	r1, r2, #5
 800b732:	69fa      	ldr	r2, [r7, #28]
 800b734:	440a      	add	r2, r1
 800b736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b73a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b73e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b742:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d11a      	bne.n	800b780 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	691a      	ldr	r2, [r3, #16]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	429a      	cmp	r2, r3
 800b754:	d903      	bls.n	800b75e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	689a      	ldr	r2, [r3, #8]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	440a      	add	r2, r1
 800b774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b77c:	6113      	str	r3, [r2, #16]
 800b77e:	e044      	b.n	800b80a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	691a      	ldr	r2, [r3, #16]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	1e5a      	subs	r2, r3, #1
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	fbb2 f3f3 	udiv	r3, r2, r3
 800b794:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	015a      	lsls	r2, r3, #5
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a2:	691a      	ldr	r2, [r3, #16]
 800b7a4:	8afb      	ldrh	r3, [r7, #22]
 800b7a6:	04d9      	lsls	r1, r3, #19
 800b7a8:	4ba4      	ldr	r3, [pc, #656]	@ (800ba3c <USB_EPStartXfer+0x3cc>)
 800b7aa:	400b      	ands	r3, r1
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	0148      	lsls	r0, r1, #5
 800b7b0:	69f9      	ldr	r1, [r7, #28]
 800b7b2:	4401      	add	r1, r0
 800b7b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	791b      	ldrb	r3, [r3, #4]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d122      	bne.n	800b80a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	015a      	lsls	r2, r3, #5
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	69ba      	ldr	r2, [r7, #24]
 800b7d4:	0151      	lsls	r1, r2, #5
 800b7d6:	69fa      	ldr	r2, [r7, #28]
 800b7d8:	440a      	add	r2, r1
 800b7da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b7e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	8afb      	ldrh	r3, [r7, #22]
 800b7f4:	075b      	lsls	r3, r3, #29
 800b7f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b7fa:	69b9      	ldr	r1, [r7, #24]
 800b7fc:	0148      	lsls	r0, r1, #5
 800b7fe:	69f9      	ldr	r1, [r7, #28]
 800b800:	4401      	add	r1, r0
 800b802:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b806:	4313      	orrs	r3, r2
 800b808:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b816:	691a      	ldr	r2, [r3, #16]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b820:	69b9      	ldr	r1, [r7, #24]
 800b822:	0148      	lsls	r0, r1, #5
 800b824:	69f9      	ldr	r1, [r7, #28]
 800b826:	4401      	add	r1, r0
 800b828:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b82c:	4313      	orrs	r3, r2
 800b82e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b830:	79fb      	ldrb	r3, [r7, #7]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d14b      	bne.n	800b8ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b84a:	461a      	mov	r2, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d128      	bne.n	800b8ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b866:	2b00      	cmp	r3, #0
 800b868:	d110      	bne.n	800b88c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	0151      	lsls	r1, r2, #5
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	440a      	add	r2, r1
 800b880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b884:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	e00f      	b.n	800b8ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	0151      	lsls	r1, r2, #5
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	440a      	add	r2, r1
 800b8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	0151      	lsls	r1, r2, #5
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	440a      	add	r2, r1
 800b8c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	e166      	b.n	800bb9c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	015a      	lsls	r2, r3, #5
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	0151      	lsls	r1, r2, #5
 800b8e0:	69fa      	ldr	r2, [r7, #28]
 800b8e2:	440a      	add	r2, r1
 800b8e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b8ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d015      	beq.n	800b922 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 814e 	beq.w	800bb9c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	2101      	movs	r1, #1
 800b912:	fa01 f303 	lsl.w	r3, r1, r3
 800b916:	69f9      	ldr	r1, [r7, #28]
 800b918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b91c:	4313      	orrs	r3, r2
 800b91e:	634b      	str	r3, [r1, #52]	@ 0x34
 800b920:	e13c      	b.n	800bb9c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d110      	bne.n	800b954 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	0151      	lsls	r1, r2, #5
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	440a      	add	r2, r1
 800b948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b94c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	e00f      	b.n	800b974 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	0151      	lsls	r1, r2, #5
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	440a      	add	r2, r1
 800b96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b96e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b972:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	68d9      	ldr	r1, [r3, #12]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	b298      	uxth	r0, r3
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4603      	mov	r3, r0
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 f9b9 	bl	800bd00 <USB_WritePacket>
 800b98e:	e105      	b.n	800bb9c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9aa:	0cdb      	lsrs	r3, r3, #19
 800b9ac:	04db      	lsls	r3, r3, #19
 800b9ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	0151      	lsls	r1, r2, #5
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	440a      	add	r2, r1
 800b9c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b9ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b9d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d132      	bne.n	800ba40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba08:	69b9      	ldr	r1, [r7, #24]
 800ba0a:	0148      	lsls	r0, r1, #5
 800ba0c:	69f9      	ldr	r1, [r7, #28]
 800ba0e:	4401      	add	r1, r0
 800ba10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba14:	4313      	orrs	r3, r2
 800ba16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	015a      	lsls	r2, r3, #5
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	4413      	add	r3, r2
 800ba20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	0151      	lsls	r1, r2, #5
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	440a      	add	r2, r1
 800ba2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba36:	6113      	str	r3, [r2, #16]
 800ba38:	e062      	b.n	800bb00 <USB_EPStartXfer+0x490>
 800ba3a:	bf00      	nop
 800ba3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d123      	bne.n	800ba90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba54:	691a      	ldr	r2, [r3, #16]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba5e:	69b9      	ldr	r1, [r7, #24]
 800ba60:	0148      	lsls	r0, r1, #5
 800ba62:	69f9      	ldr	r1, [r7, #28]
 800ba64:	4401      	add	r1, r0
 800ba66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	015a      	lsls	r2, r3, #5
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	4413      	add	r3, r2
 800ba76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	0151      	lsls	r1, r2, #5
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	440a      	add	r2, r1
 800ba84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba8c:	6113      	str	r3, [r2, #16]
 800ba8e:	e037      	b.n	800bb00 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	691a      	ldr	r2, [r3, #16]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	4413      	add	r3, r2
 800ba9a:	1e5a      	subs	r2, r3, #1
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	8afa      	ldrh	r2, [r7, #22]
 800baac:	fb03 f202 	mul.w	r2, r3, r2
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac0:	691a      	ldr	r2, [r3, #16]
 800bac2:	8afb      	ldrh	r3, [r7, #22]
 800bac4:	04d9      	lsls	r1, r3, #19
 800bac6:	4b38      	ldr	r3, [pc, #224]	@ (800bba8 <USB_EPStartXfer+0x538>)
 800bac8:	400b      	ands	r3, r1
 800baca:	69b9      	ldr	r1, [r7, #24]
 800bacc:	0148      	lsls	r0, r1, #5
 800bace:	69f9      	ldr	r1, [r7, #28]
 800bad0:	4401      	add	r1, r0
 800bad2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bad6:	4313      	orrs	r3, r2
 800bad8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	015a      	lsls	r2, r3, #5
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae6:	691a      	ldr	r2, [r3, #16]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baf0:	69b9      	ldr	r1, [r7, #24]
 800baf2:	0148      	lsls	r0, r1, #5
 800baf4:	69f9      	ldr	r1, [r7, #28]
 800baf6:	4401      	add	r1, r0
 800baf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bafc:	4313      	orrs	r3, r2
 800bafe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d10d      	bne.n	800bb22 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d009      	beq.n	800bb22 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	68d9      	ldr	r1, [r3, #12]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	015a      	lsls	r2, r3, #5
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb1e:	460a      	mov	r2, r1
 800bb20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	791b      	ldrb	r3, [r3, #4]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d128      	bne.n	800bb7c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d110      	bne.n	800bb5c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	0151      	lsls	r1, r2, #5
 800bb4c:	69fa      	ldr	r2, [r7, #28]
 800bb4e:	440a      	add	r2, r1
 800bb50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	e00f      	b.n	800bb7c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	015a      	lsls	r2, r3, #5
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	0151      	lsls	r1, r2, #5
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	440a      	add	r2, r1
 800bb92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	1ff80000 	.word	0x1ff80000

0800bbac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	785b      	ldrb	r3, [r3, #1]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d14a      	bne.n	800bc60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	015a      	lsls	r2, r3, #5
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbe2:	f040 8086 	bne.w	800bcf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	7812      	ldrb	r2, [r2, #0]
 800bbfa:	0151      	lsls	r1, r2, #5
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	440a      	add	r2, r1
 800bc00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	7812      	ldrb	r2, [r2, #0]
 800bc1e:	0151      	lsls	r1, r2, #5
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	440a      	add	r2, r1
 800bc24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d902      	bls.n	800bc44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	75fb      	strb	r3, [r7, #23]
          break;
 800bc42:	e056      	b.n	800bcf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc5c:	d0e7      	beq.n	800bc2e <USB_EPStopXfer+0x82>
 800bc5e:	e048      	b.n	800bcf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc78:	d13b      	bne.n	800bcf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	7812      	ldrb	r2, [r2, #0]
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	015a      	lsls	r2, r3, #5
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	4413      	add	r3, r2
 800bca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bcc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d902      	bls.n	800bcd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	75fb      	strb	r3, [r7, #23]
          break;
 800bcd6:	e00c      	b.n	800bcf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	015a      	lsls	r2, r3, #5
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	4413      	add	r3, r2
 800bce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcf0:	d0e7      	beq.n	800bcc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	371c      	adds	r7, #28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b089      	sub	sp, #36	@ 0x24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	460b      	mov	r3, r1
 800bd10:	71fb      	strb	r3, [r7, #7]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bd1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d123      	bne.n	800bd6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd26:	88bb      	ldrh	r3, [r7, #4]
 800bd28:	3303      	adds	r3, #3
 800bd2a:	089b      	lsrs	r3, r3, #2
 800bd2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61bb      	str	r3, [r7, #24]
 800bd32:	e018      	b.n	800bd66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd34:	79fb      	ldrb	r3, [r7, #7]
 800bd36:	031a      	lsls	r2, r3, #12
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd40:	461a      	mov	r2, r3
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3301      	adds	r3, #1
 800bd52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	3301      	adds	r3, #1
 800bd58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	3301      	adds	r3, #1
 800bd64:	61bb      	str	r3, [r7, #24]
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d3e2      	bcc.n	800bd34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3724      	adds	r7, #36	@ 0x24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b08b      	sub	sp, #44	@ 0x2c
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	089b      	lsrs	r3, r3, #2
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	f003 0303 	and.w	r3, r3, #3
 800bda0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bda2:	2300      	movs	r3, #0
 800bda4:	623b      	str	r3, [r7, #32]
 800bda6:	e014      	b.n	800bdd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	3301      	adds	r3, #1
 800bdca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	623b      	str	r3, [r7, #32]
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d3e6      	bcc.n	800bda8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bdda:	8bfb      	ldrh	r3, [r7, #30]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01e      	beq.n	800be1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdea:	461a      	mov	r2, r3
 800bdec:	f107 0310 	add.w	r3, r7, #16
 800bdf0:	6812      	ldr	r2, [r2, #0]
 800bdf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800be00:	b2da      	uxtb	r2, r3
 800be02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be04:	701a      	strb	r2, [r3, #0]
      i++;
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	3301      	adds	r3, #1
 800be0a:	623b      	str	r3, [r7, #32]
      pDest++;
 800be0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0e:	3301      	adds	r3, #1
 800be10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800be12:	8bfb      	ldrh	r3, [r7, #30]
 800be14:	3b01      	subs	r3, #1
 800be16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be18:	8bfb      	ldrh	r3, [r7, #30]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1ea      	bne.n	800bdf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800be1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be20:	4618      	mov	r0, r3
 800be22:	372c      	adds	r7, #44	@ 0x2c
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	785b      	ldrb	r3, [r3, #1]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d12c      	bne.n	800bea2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	015a      	lsls	r2, r3, #5
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	db12      	blt.n	800be80 <USB_EPSetStall+0x54>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00f      	beq.n	800be80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	0151      	lsls	r1, r2, #5
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	440a      	add	r2, r1
 800be76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800be7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	0151      	lsls	r1, r2, #5
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	440a      	add	r2, r1
 800be96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	e02b      	b.n	800befa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	015a      	lsls	r2, r3, #5
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db12      	blt.n	800beda <USB_EPSetStall+0xae>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00f      	beq.n	800beda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	0151      	lsls	r1, r2, #5
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	440a      	add	r2, r1
 800bed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bed4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bed8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bef4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bef8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d128      	bne.n	800bf76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	0151      	lsls	r1, r2, #5
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	440a      	add	r2, r1
 800bf3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	791b      	ldrb	r3, [r3, #4]
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d003      	beq.n	800bf54 <USB_EPClearStall+0x4c>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	791b      	ldrb	r3, [r3, #4]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d138      	bne.n	800bfc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	0151      	lsls	r1, r2, #5
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	440a      	add	r2, r1
 800bf6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	e027      	b.n	800bfc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	015a      	lsls	r2, r3, #5
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	0151      	lsls	r1, r2, #5
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	440a      	add	r2, r1
 800bf8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	791b      	ldrb	r3, [r3, #4]
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d003      	beq.n	800bfa6 <USB_EPClearStall+0x9e>
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d10f      	bne.n	800bfc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	0151      	lsls	r1, r2, #5
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	440a      	add	r2, r1
 800bfbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	460b      	mov	r3, r1
 800bfde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bff2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bff6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	011b      	lsls	r3, r3, #4
 800c004:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c008:	68f9      	ldr	r1, [r7, #12]
 800c00a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c00e:	4313      	orrs	r3, r2
 800c010:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c04e:	f023 0302 	bic.w	r3, r3, #2
 800c052:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c062:	b480      	push	{r7}
 800c064:	b085      	sub	sp, #20
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c07c:	f023 0303 	bic.w	r3, r3, #3
 800c080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c090:	f043 0302 	orr.w	r3, r3, #2
 800c094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b085      	sub	sp, #20
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	0c1b      	lsrs	r3, r3, #16
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b085      	sub	sp, #20
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c11a:	69db      	ldr	r3, [r3, #28]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	4013      	ands	r3, r2
 800c120:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	b29b      	uxth	r3, r3
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c160:	68bb      	ldr	r3, [r7, #8]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c16e:	b480      	push	{r7}
 800c170:	b087      	sub	sp, #28
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c190:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c192:	78fb      	ldrb	r3, [r7, #3]
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	fa22 f303 	lsr.w	r3, r2, r3
 800c19e:	01db      	lsls	r3, r3, #7
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c1a8:	78fb      	ldrb	r3, [r7, #3]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	371c      	adds	r7, #28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	f003 0301 	and.w	r3, r3, #1
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c200:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c204:	f023 0307 	bic.w	r3, r3, #7
 800c208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c21c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	460b      	mov	r3, r1
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	333c      	adds	r3, #60	@ 0x3c
 800c242:	3304      	adds	r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	4a26      	ldr	r2, [pc, #152]	@ (800c2e4 <USB_EP0_OutStart+0xb8>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d90a      	bls.n	800c266 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c25c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c260:	d101      	bne.n	800c266 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	e037      	b.n	800c2d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c26c:	461a      	mov	r2, r3
 800c26e:	2300      	movs	r3, #0
 800c270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c280:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c294:	f043 0318 	orr.w	r3, r3, #24
 800c298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c2ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d10f      	bne.n	800c2d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c2d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	371c      	adds	r7, #28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	4f54300a 	.word	0x4f54300a

0800c2e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c300:	d901      	bls.n	800c306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e01b      	b.n	800c33e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	daf2      	bge.n	800c2f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f043 0201 	orr.w	r2, r3, #1
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3301      	adds	r3, #1
 800c322:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c32a:	d901      	bls.n	800c330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e006      	b.n	800c33e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d0f0      	beq.n	800c31e <USB_CoreReset+0x36>

  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
	...

0800c34c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c358:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c35c:	f002 fc2e 	bl	800ebbc <USBD_static_malloc>
 800c360:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	32b0      	adds	r2, #176	@ 0xb0
 800c372:	2100      	movs	r1, #0
 800c374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c378:	2302      	movs	r3, #2
 800c37a:	e0d4      	b.n	800c526 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c37c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c380:	2100      	movs	r1, #0
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f003 ff18 	bl	80101b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	32b0      	adds	r2, #176	@ 0xb0
 800c392:	68f9      	ldr	r1, [r7, #12]
 800c394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	32b0      	adds	r2, #176	@ 0xb0
 800c3a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7c1b      	ldrb	r3, [r3, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d138      	bne.n	800c426 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3b4:	4b5e      	ldr	r3, [pc, #376]	@ (800c530 <USBD_CDC_Init+0x1e4>)
 800c3b6:	7819      	ldrb	r1, [r3, #0]
 800c3b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3bc:	2202      	movs	r2, #2
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f002 fad9 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c3c4:	4b5a      	ldr	r3, [pc, #360]	@ (800c530 <USBD_CDC_Init+0x1e4>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	f003 020f 	and.w	r2, r3, #15
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	440b      	add	r3, r1
 800c3d8:	3324      	adds	r3, #36	@ 0x24
 800c3da:	2201      	movs	r2, #1
 800c3dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c3de:	4b55      	ldr	r3, [pc, #340]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c3e0:	7819      	ldrb	r1, [r3, #0]
 800c3e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f002 fac4 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3ee:	4b51      	ldr	r3, [pc, #324]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	f003 020f 	and.w	r2, r3, #15
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	440b      	add	r3, r1
 800c402:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c406:	2201      	movs	r2, #1
 800c408:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c40a:	4b4b      	ldr	r3, [pc, #300]	@ (800c538 <USBD_CDC_Init+0x1ec>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 020f 	and.w	r2, r3, #15
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	4613      	mov	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	440b      	add	r3, r1
 800c41e:	3326      	adds	r3, #38	@ 0x26
 800c420:	2210      	movs	r2, #16
 800c422:	801a      	strh	r2, [r3, #0]
 800c424:	e035      	b.n	800c492 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c426:	4b42      	ldr	r3, [pc, #264]	@ (800c530 <USBD_CDC_Init+0x1e4>)
 800c428:	7819      	ldrb	r1, [r3, #0]
 800c42a:	2340      	movs	r3, #64	@ 0x40
 800c42c:	2202      	movs	r2, #2
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f002 faa1 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c434:	4b3e      	ldr	r3, [pc, #248]	@ (800c530 <USBD_CDC_Init+0x1e4>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 020f 	and.w	r2, r3, #15
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	440b      	add	r3, r1
 800c448:	3324      	adds	r3, #36	@ 0x24
 800c44a:	2201      	movs	r2, #1
 800c44c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c44e:	4b39      	ldr	r3, [pc, #228]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c450:	7819      	ldrb	r1, [r3, #0]
 800c452:	2340      	movs	r3, #64	@ 0x40
 800c454:	2202      	movs	r2, #2
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f002 fa8d 	bl	800e976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c45c:	4b35      	ldr	r3, [pc, #212]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	f003 020f 	and.w	r2, r3, #15
 800c464:	6879      	ldr	r1, [r7, #4]
 800c466:	4613      	mov	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	440b      	add	r3, r1
 800c470:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c474:	2201      	movs	r2, #1
 800c476:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c478:	4b2f      	ldr	r3, [pc, #188]	@ (800c538 <USBD_CDC_Init+0x1ec>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 020f 	and.w	r2, r3, #15
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	4613      	mov	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	440b      	add	r3, r1
 800c48c:	3326      	adds	r3, #38	@ 0x26
 800c48e:	2210      	movs	r2, #16
 800c490:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c492:	4b29      	ldr	r3, [pc, #164]	@ (800c538 <USBD_CDC_Init+0x1ec>)
 800c494:	7819      	ldrb	r1, [r3, #0]
 800c496:	2308      	movs	r3, #8
 800c498:	2203      	movs	r2, #3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f002 fa6b 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c4a0:	4b25      	ldr	r3, [pc, #148]	@ (800c538 <USBD_CDC_Init+0x1ec>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 020f 	and.w	r2, r3, #15
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3324      	adds	r3, #36	@ 0x24
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	33b0      	adds	r3, #176	@ 0xb0
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c4f0:	2302      	movs	r3, #2
 800c4f2:	e018      	b.n	800c526 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7c1b      	ldrb	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c4fe:	7819      	ldrb	r1, [r3, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f002 fb22 	bl	800eb54 <USBD_LL_PrepareReceive>
 800c510:	e008      	b.n	800c524 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c512:	4b08      	ldr	r3, [pc, #32]	@ (800c534 <USBD_CDC_Init+0x1e8>)
 800c514:	7819      	ldrb	r1, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c51c:	2340      	movs	r3, #64	@ 0x40
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f002 fb18 	bl	800eb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	200000af 	.word	0x200000af
 800c534:	200000b0 	.word	0x200000b0
 800c538:	200000b1 	.word	0x200000b1

0800c53c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c548:	4b3a      	ldr	r3, [pc, #232]	@ (800c634 <USBD_CDC_DeInit+0xf8>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f002 fa37 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c554:	4b37      	ldr	r3, [pc, #220]	@ (800c634 <USBD_CDC_DeInit+0xf8>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	f003 020f 	and.w	r2, r3, #15
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	4613      	mov	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	440b      	add	r3, r1
 800c568:	3324      	adds	r3, #36	@ 0x24
 800c56a:	2200      	movs	r2, #0
 800c56c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c56e:	4b32      	ldr	r3, [pc, #200]	@ (800c638 <USBD_CDC_DeInit+0xfc>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f002 fa24 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c57a:	4b2f      	ldr	r3, [pc, #188]	@ (800c638 <USBD_CDC_DeInit+0xfc>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f003 020f 	and.w	r2, r3, #15
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c592:	2200      	movs	r2, #0
 800c594:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c596:	4b29      	ldr	r3, [pc, #164]	@ (800c63c <USBD_CDC_DeInit+0x100>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f002 fa10 	bl	800e9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c5a2:	4b26      	ldr	r3, [pc, #152]	@ (800c63c <USBD_CDC_DeInit+0x100>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	f003 020f 	and.w	r2, r3, #15
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	440b      	add	r3, r1
 800c5b6:	3324      	adds	r3, #36	@ 0x24
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c5bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c63c <USBD_CDC_DeInit+0x100>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	f003 020f 	and.w	r2, r3, #15
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	3326      	adds	r3, #38	@ 0x26
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	32b0      	adds	r2, #176	@ 0xb0
 800c5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01f      	beq.n	800c628 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	33b0      	adds	r3, #176	@ 0xb0
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	32b0      	adds	r2, #176	@ 0xb0
 800c606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f002 fae4 	bl	800ebd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	32b0      	adds	r2, #176	@ 0xb0
 800c61a:	2100      	movs	r1, #0
 800c61c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	200000af 	.word	0x200000af
 800c638:	200000b0 	.word	0x200000b0
 800c63c:	200000b1 	.word	0x200000b1

0800c640 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	32b0      	adds	r2, #176	@ 0xb0
 800c654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c658:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e0bf      	b.n	800c7f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d050      	beq.n	800c71e <USBD_CDC_Setup+0xde>
 800c67c:	2b20      	cmp	r3, #32
 800c67e:	f040 80af 	bne.w	800c7e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	88db      	ldrh	r3, [r3, #6]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d03a      	beq.n	800c700 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	b25b      	sxtb	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	da1b      	bge.n	800c6cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	33b0      	adds	r3, #176	@ 0xb0
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c6aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6ac:	683a      	ldr	r2, [r7, #0]
 800c6ae:	88d2      	ldrh	r2, [r2, #6]
 800c6b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	88db      	ldrh	r3, [r3, #6]
 800c6b6:	2b07      	cmp	r3, #7
 800c6b8:	bf28      	it	cs
 800c6ba:	2307      	movcs	r3, #7
 800c6bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	89fa      	ldrh	r2, [r7, #14]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f001 fd53 	bl	800e170 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c6ca:	e090      	b.n	800c7ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	785a      	ldrb	r2, [r3, #1]
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	88db      	ldrh	r3, [r3, #6]
 800c6da:	2b3f      	cmp	r3, #63	@ 0x3f
 800c6dc:	d803      	bhi.n	800c6e6 <USBD_CDC_Setup+0xa6>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	88db      	ldrh	r3, [r3, #6]
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	e000      	b.n	800c6e8 <USBD_CDC_Setup+0xa8>
 800c6e6:	2240      	movs	r2, #64	@ 0x40
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6ee:	6939      	ldr	r1, [r7, #16]
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 fd65 	bl	800e1c8 <USBD_CtlPrepareRx>
      break;
 800c6fe:	e076      	b.n	800c7ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	33b0      	adds	r3, #176	@ 0xb0
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	7850      	ldrb	r0, [r2, #1]
 800c716:	2200      	movs	r2, #0
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	4798      	blx	r3
      break;
 800c71c:	e067      	b.n	800c7ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	2b0b      	cmp	r3, #11
 800c724:	d851      	bhi.n	800c7ca <USBD_CDC_Setup+0x18a>
 800c726:	a201      	add	r2, pc, #4	@ (adr r2, 800c72c <USBD_CDC_Setup+0xec>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c75d 	.word	0x0800c75d
 800c730:	0800c7d9 	.word	0x0800c7d9
 800c734:	0800c7cb 	.word	0x0800c7cb
 800c738:	0800c7cb 	.word	0x0800c7cb
 800c73c:	0800c7cb 	.word	0x0800c7cb
 800c740:	0800c7cb 	.word	0x0800c7cb
 800c744:	0800c7cb 	.word	0x0800c7cb
 800c748:	0800c7cb 	.word	0x0800c7cb
 800c74c:	0800c7cb 	.word	0x0800c7cb
 800c750:	0800c7cb 	.word	0x0800c7cb
 800c754:	0800c787 	.word	0x0800c787
 800c758:	0800c7b1 	.word	0x0800c7b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b03      	cmp	r3, #3
 800c766:	d107      	bne.n	800c778 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c768:	f107 030a 	add.w	r3, r7, #10
 800c76c:	2202      	movs	r2, #2
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 fcfd 	bl	800e170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c776:	e032      	b.n	800c7de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 fc7b 	bl	800e076 <USBD_CtlError>
            ret = USBD_FAIL;
 800c780:	2303      	movs	r3, #3
 800c782:	75fb      	strb	r3, [r7, #23]
          break;
 800c784:	e02b      	b.n	800c7de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d107      	bne.n	800c7a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c792:	f107 030d 	add.w	r3, r7, #13
 800c796:	2201      	movs	r2, #1
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f001 fce8 	bl	800e170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7a0:	e01d      	b.n	800c7de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 fc66 	bl	800e076 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ae:	e016      	b.n	800c7de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d00f      	beq.n	800c7dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 fc59 	bl	800e076 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7c8:	e008      	b.n	800c7dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f001 fc52 	bl	800e076 <USBD_CtlError>
          ret = USBD_FAIL;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c7d6:	e002      	b.n	800c7de <USBD_CDC_Setup+0x19e>
          break;
 800c7d8:	bf00      	nop
 800c7da:	e008      	b.n	800c7ee <USBD_CDC_Setup+0x1ae>
          break;
 800c7dc:	bf00      	nop
      }
      break;
 800c7de:	e006      	b.n	800c7ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f001 fc47 	bl	800e076 <USBD_CtlError>
      ret = USBD_FAIL;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	460b      	mov	r3, r1
 800c802:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c80a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	32b0      	adds	r2, #176	@ 0xb0
 800c816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c81e:	2303      	movs	r3, #3
 800c820:	e065      	b.n	800c8ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	32b0      	adds	r2, #176	@ 0xb0
 800c82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c830:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c832:	78fb      	ldrb	r3, [r7, #3]
 800c834:	f003 020f 	and.w	r2, r3, #15
 800c838:	6879      	ldr	r1, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	440b      	add	r3, r1
 800c844:	3318      	adds	r3, #24
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d02f      	beq.n	800c8ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c84c:	78fb      	ldrb	r3, [r7, #3]
 800c84e:	f003 020f 	and.w	r2, r3, #15
 800c852:	6879      	ldr	r1, [r7, #4]
 800c854:	4613      	mov	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	440b      	add	r3, r1
 800c85e:	3318      	adds	r3, #24
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	78fb      	ldrb	r3, [r7, #3]
 800c864:	f003 010f 	and.w	r1, r3, #15
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	460b      	mov	r3, r1
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	440b      	add	r3, r1
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4403      	add	r3, r0
 800c874:	331c      	adds	r3, #28
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	fbb2 f1f3 	udiv	r1, r2, r3
 800c87c:	fb01 f303 	mul.w	r3, r1, r3
 800c880:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c882:	2b00      	cmp	r3, #0
 800c884:	d112      	bne.n	800c8ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c886:	78fb      	ldrb	r3, [r7, #3]
 800c888:	f003 020f 	and.w	r2, r3, #15
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	440b      	add	r3, r1
 800c898:	3318      	adds	r3, #24
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c89e:	78f9      	ldrb	r1, [r7, #3]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f002 f934 	bl	800eb12 <USBD_LL_Transmit>
 800c8aa:	e01f      	b.n	800c8ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	33b0      	adds	r3, #176	@ 0xb0
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d010      	beq.n	800c8ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	33b0      	adds	r3, #176	@ 0xb0
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c8e8:	78fa      	ldrb	r2, [r7, #3]
 800c8ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	32b0      	adds	r2, #176	@ 0xb0
 800c90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	32b0      	adds	r2, #176	@ 0xb0
 800c91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c924:	2303      	movs	r3, #3
 800c926:	e01a      	b.n	800c95e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f002 f932 	bl	800eb96 <USBD_LL_GetRxDataSize>
 800c932:	4602      	mov	r2, r0
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	33b0      	adds	r3, #176	@ 0xb0
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4413      	add	r3, r2
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c958:	4611      	mov	r1, r2
 800c95a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	32b0      	adds	r2, #176	@ 0xb0
 800c978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c984:	2303      	movs	r3, #3
 800c986:	e024      	b.n	800c9d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	33b0      	adds	r3, #176	@ 0xb0
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d019      	beq.n	800c9d0 <USBD_CDC_EP0_RxReady+0x6a>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c9a2:	2bff      	cmp	r3, #255	@ 0xff
 800c9a4:	d014      	beq.n	800c9d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	33b0      	adds	r3, #176	@ 0xb0
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c9be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	22ff      	movs	r2, #255	@ 0xff
 800c9cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9e4:	2182      	movs	r1, #130	@ 0x82
 800c9e6:	4818      	ldr	r0, [pc, #96]	@ (800ca48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9e8:	f000 fd0f 	bl	800d40a <USBD_GetEpDesc>
 800c9ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4815      	ldr	r0, [pc, #84]	@ (800ca48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9f2:	f000 fd0a 	bl	800d40a <USBD_GetEpDesc>
 800c9f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9f8:	2181      	movs	r1, #129	@ 0x81
 800c9fa:	4813      	ldr	r0, [pc, #76]	@ (800ca48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9fc:	f000 fd05 	bl	800d40a <USBD_GetEpDesc>
 800ca00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2210      	movs	r2, #16
 800ca0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d006      	beq.n	800ca22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca1c:	711a      	strb	r2, [r3, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d006      	beq.n	800ca36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca30:	711a      	strb	r2, [r3, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2243      	movs	r2, #67	@ 0x43
 800ca3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca3c:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3718      	adds	r7, #24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	2000006c 	.word	0x2000006c

0800ca4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca54:	2182      	movs	r1, #130	@ 0x82
 800ca56:	4818      	ldr	r0, [pc, #96]	@ (800cab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca58:	f000 fcd7 	bl	800d40a <USBD_GetEpDesc>
 800ca5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca5e:	2101      	movs	r1, #1
 800ca60:	4815      	ldr	r0, [pc, #84]	@ (800cab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca62:	f000 fcd2 	bl	800d40a <USBD_GetEpDesc>
 800ca66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca68:	2181      	movs	r1, #129	@ 0x81
 800ca6a:	4813      	ldr	r0, [pc, #76]	@ (800cab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca6c:	f000 fccd 	bl	800d40a <USBD_GetEpDesc>
 800ca70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2210      	movs	r2, #16
 800ca7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2200      	movs	r2, #0
 800ca88:	711a      	strb	r2, [r3, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f042 0202 	orr.w	r2, r2, #2
 800ca90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d006      	beq.n	800caa6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	711a      	strb	r2, [r3, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f042 0202 	orr.w	r2, r2, #2
 800caa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2243      	movs	r2, #67	@ 0x43
 800caaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800caac:	4b02      	ldr	r3, [pc, #8]	@ (800cab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	2000006c 	.word	0x2000006c

0800cabc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cac4:	2182      	movs	r1, #130	@ 0x82
 800cac6:	4818      	ldr	r0, [pc, #96]	@ (800cb28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cac8:	f000 fc9f 	bl	800d40a <USBD_GetEpDesc>
 800cacc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cace:	2101      	movs	r1, #1
 800cad0:	4815      	ldr	r0, [pc, #84]	@ (800cb28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cad2:	f000 fc9a 	bl	800d40a <USBD_GetEpDesc>
 800cad6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cad8:	2181      	movs	r1, #129	@ 0x81
 800cada:	4813      	ldr	r0, [pc, #76]	@ (800cb28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cadc:	f000 fc95 	bl	800d40a <USBD_GetEpDesc>
 800cae0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2210      	movs	r2, #16
 800caec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cafc:	711a      	strb	r2, [r3, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb10:	711a      	strb	r2, [r3, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2243      	movs	r2, #67	@ 0x43
 800cb1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb1c:	4b02      	ldr	r3, [pc, #8]	@ (800cb28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	2000006c 	.word	0x2000006c

0800cb2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	220a      	movs	r2, #10
 800cb38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb3a:	4b03      	ldr	r3, [pc, #12]	@ (800cb48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr
 800cb48:	20000028 	.word	0x20000028

0800cb4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e009      	b.n	800cb74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	33b0      	adds	r3, #176	@ 0xb0
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	32b0      	adds	r2, #176	@ 0xb0
 800cb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d101      	bne.n	800cba6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e008      	b.n	800cbb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	371c      	adds	r7, #28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	32b0      	adds	r2, #176	@ 0xb0
 800cbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e004      	b.n	800cbf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
	...

0800cc00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	32b0      	adds	r2, #176	@ 0xb0
 800cc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	32b0      	adds	r2, #176	@ 0xb0
 800cc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e018      	b.n	800cc60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	7c1b      	ldrb	r3, [r3, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc36:	4b0c      	ldr	r3, [pc, #48]	@ (800cc68 <USBD_CDC_ReceivePacket+0x68>)
 800cc38:	7819      	ldrb	r1, [r3, #0]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f001 ff85 	bl	800eb54 <USBD_LL_PrepareReceive>
 800cc4a:	e008      	b.n	800cc5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <USBD_CDC_ReceivePacket+0x68>)
 800cc4e:	7819      	ldrb	r1, [r3, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc56:	2340      	movs	r3, #64	@ 0x40
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 ff7b 	bl	800eb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	200000b0 	.word	0x200000b0

0800cc6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b086      	sub	sp, #24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e01f      	b.n	800ccc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	79fa      	ldrb	r2, [r7, #7]
 800ccb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f001 fdf5 	bl	800e8a8 <USBD_LL_Init>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ccc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cce0:	2303      	movs	r3, #3
 800cce2:	e025      	b.n	800cd30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	32ae      	adds	r2, #174	@ 0xae
 800ccf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00f      	beq.n	800cd20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	32ae      	adds	r2, #174	@ 0xae
 800cd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd10:	f107 020e 	add.w	r2, r7, #14
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	4602      	mov	r2, r0
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f001 fdfd 	bl	800e940 <USBD_LL_Start>
 800cd46:	4603      	mov	r3, r0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d009      	beq.n	800cd94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	78fa      	ldrb	r2, [r7, #3]
 800cdb8:	4611      	mov	r1, r2
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	4798      	blx	r3
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f001 f90c 	bl	800e002 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ce06:	f003 031f 	and.w	r3, r3, #31
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d01a      	beq.n	800ce44 <USBD_LL_SetupStage+0x72>
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d822      	bhi.n	800ce58 <USBD_LL_SetupStage+0x86>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <USBD_LL_SetupStage+0x4a>
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d00a      	beq.n	800ce30 <USBD_LL_SetupStage+0x5e>
 800ce1a:	e01d      	b.n	800ce58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fb63 	bl	800d4f0 <USBD_StdDevReq>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2e:	e020      	b.n	800ce72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fbcb 	bl	800d5d4 <USBD_StdItfReq>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]
      break;
 800ce42:	e016      	b.n	800ce72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fc2d 	bl	800d6ac <USBD_StdEPReq>
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]
      break;
 800ce56:	e00c      	b.n	800ce72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ce5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f001 fdca 	bl	800ea00 <USBD_LL_StallEP>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce70:	bf00      	nop
  }

  return ret;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	460b      	mov	r3, r1
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ce8e:	7afb      	ldrb	r3, [r7, #11]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d16e      	bne.n	800cf72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ce9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	f040 8098 	bne.w	800cfd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d913      	bls.n	800cedc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	689a      	ldr	r2, [r3, #8]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	1ad2      	subs	r2, r2, r3
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	4293      	cmp	r3, r2
 800cecc:	bf28      	it	cs
 800cece:	4613      	movcs	r3, r2
 800ced0:	461a      	mov	r2, r3
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f001 f994 	bl	800e202 <USBD_CtlContinueRx>
 800ceda:	e07d      	b.n	800cfd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cee2:	f003 031f 	and.w	r3, r3, #31
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d014      	beq.n	800cf14 <USBD_LL_DataOutStage+0x98>
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d81d      	bhi.n	800cf2a <USBD_LL_DataOutStage+0xae>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <USBD_LL_DataOutStage+0x7c>
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d003      	beq.n	800cefe <USBD_LL_DataOutStage+0x82>
 800cef6:	e018      	b.n	800cf2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cef8:	2300      	movs	r3, #0
 800cefa:	75bb      	strb	r3, [r7, #22]
            break;
 800cefc:	e018      	b.n	800cf30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	4619      	mov	r1, r3
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f000 fa64 	bl	800d3d6 <USBD_CoreFindIF>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75bb      	strb	r3, [r7, #22]
            break;
 800cf12:	e00d      	b.n	800cf30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 fa66 	bl	800d3f0 <USBD_CoreFindEP>
 800cf24:	4603      	mov	r3, r0
 800cf26:	75bb      	strb	r3, [r7, #22]
            break;
 800cf28:	e002      	b.n	800cf30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	75bb      	strb	r3, [r7, #22]
            break;
 800cf2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cf30:	7dbb      	ldrb	r3, [r7, #22]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d119      	bne.n	800cf6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	d113      	bne.n	800cf6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cf42:	7dba      	ldrb	r2, [r7, #22]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	32ae      	adds	r2, #174	@ 0xae
 800cf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00b      	beq.n	800cf6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cf52:	7dba      	ldrb	r2, [r7, #22]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cf5a:	7dba      	ldrb	r2, [r7, #22]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	32ae      	adds	r2, #174	@ 0xae
 800cf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f001 f95a 	bl	800e224 <USBD_CtlSendStatus>
 800cf70:	e032      	b.n	800cfd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fa37 	bl	800d3f0 <USBD_CoreFindEP>
 800cf82:	4603      	mov	r3, r0
 800cf84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf86:	7dbb      	ldrb	r3, [r7, #22]
 800cf88:	2bff      	cmp	r3, #255	@ 0xff
 800cf8a:	d025      	beq.n	800cfd8 <USBD_LL_DataOutStage+0x15c>
 800cf8c:	7dbb      	ldrb	r3, [r7, #22]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d122      	bne.n	800cfd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d117      	bne.n	800cfce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cf9e:	7dba      	ldrb	r2, [r7, #22]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	32ae      	adds	r2, #174	@ 0xae
 800cfa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00f      	beq.n	800cfce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cfae:	7dba      	ldrb	r2, [r7, #22]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cfb6:	7dba      	ldrb	r2, [r7, #22]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	32ae      	adds	r2, #174	@ 0xae
 800cfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	7afa      	ldrb	r2, [r7, #11]
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	4798      	blx	r3
 800cfca:	4603      	mov	r3, r0
 800cfcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	e000      	b.n	800cfda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b086      	sub	sp, #24
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	460b      	mov	r3, r1
 800cfec:	607a      	str	r2, [r7, #4]
 800cfee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d16f      	bne.n	800d0d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3314      	adds	r3, #20
 800cffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d002:	2b02      	cmp	r3, #2
 800d004:	d15a      	bne.n	800d0bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	689a      	ldr	r2, [r3, #8]
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d914      	bls.n	800d03c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	689a      	ldr	r2, [r3, #8]
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	461a      	mov	r2, r3
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f001 f8bc 	bl	800e1a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d02e:	2300      	movs	r3, #0
 800d030:	2200      	movs	r2, #0
 800d032:	2100      	movs	r1, #0
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f001 fd8d 	bl	800eb54 <USBD_LL_PrepareReceive>
 800d03a:	e03f      	b.n	800d0bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	429a      	cmp	r2, r3
 800d046:	d11c      	bne.n	800d082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d050:	429a      	cmp	r2, r3
 800d052:	d316      	bcc.n	800d082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d05e:	429a      	cmp	r2, r3
 800d060:	d20f      	bcs.n	800d082 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d062:	2200      	movs	r2, #0
 800d064:	2100      	movs	r1, #0
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f001 f89d 	bl	800e1a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d074:	2300      	movs	r3, #0
 800d076:	2200      	movs	r2, #0
 800d078:	2100      	movs	r1, #0
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f001 fd6a 	bl	800eb54 <USBD_LL_PrepareReceive>
 800d080:	e01c      	b.n	800d0bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d10f      	bne.n	800d0ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0ae:	2180      	movs	r1, #128	@ 0x80
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f001 fca5 	bl	800ea00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f001 f8c7 	bl	800e24a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d03a      	beq.n	800d13c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f7ff fe42 	bl	800cd50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d0d4:	e032      	b.n	800d13c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d0d6:	7afb      	ldrb	r3, [r7, #11]
 800d0d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	4619      	mov	r1, r3
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 f985 	bl	800d3f0 <USBD_CoreFindEP>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	2bff      	cmp	r3, #255	@ 0xff
 800d0ee:	d025      	beq.n	800d13c <USBD_LL_DataInStage+0x15a>
 800d0f0:	7dfb      	ldrb	r3, [r7, #23]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d122      	bne.n	800d13c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d11c      	bne.n	800d13c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d102:	7dfa      	ldrb	r2, [r7, #23]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	32ae      	adds	r2, #174	@ 0xae
 800d108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d014      	beq.n	800d13c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d112:	7dfa      	ldrb	r2, [r7, #23]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d11a:	7dfa      	ldrb	r2, [r7, #23]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	32ae      	adds	r2, #174	@ 0xae
 800d120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	7afa      	ldrb	r2, [r7, #11]
 800d128:	4611      	mov	r1, r2
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	4798      	blx	r3
 800d12e:	4603      	mov	r3, r0
 800d130:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d132:	7dbb      	ldrb	r3, [r7, #22]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d138:	7dbb      	ldrb	r3, [r7, #22]
 800d13a:	e000      	b.n	800d13e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d014      	beq.n	800d1ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00e      	beq.n	800d1ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6852      	ldr	r2, [r2, #4]
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	4611      	mov	r1, r2
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	4798      	blx	r3
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1ac:	2340      	movs	r3, #64	@ 0x40
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fbdf 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2240      	movs	r2, #64	@ 0x40
 800d1c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1c8:	2340      	movs	r3, #64	@ 0x40
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2180      	movs	r1, #128	@ 0x80
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 fbd1 	bl	800e976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2240      	movs	r2, #64	@ 0x40
 800d1de:	621a      	str	r2, [r3, #32]

  return ret;
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	78fa      	ldrb	r2, [r7, #3]
 800d1fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	d006      	beq.n	800d22c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d224:	b2da      	uxtb	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2204      	movs	r2, #4
 800d230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b04      	cmp	r3, #4
 800d254:	d106      	bne.n	800d264 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d280:	b2db      	uxtb	r3, r3
 800d282:	2b03      	cmp	r3, #3
 800d284:	d110      	bne.n	800d2a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00b      	beq.n	800d2a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d005      	beq.n	800d2a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	32ae      	adds	r2, #174	@ 0xae
 800d2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e01c      	b.n	800d30e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d115      	bne.n	800d30c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	32ae      	adds	r2, #174	@ 0xae
 800d2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	32ae      	adds	r2, #174	@ 0xae
 800d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	78fa      	ldrb	r2, [r7, #3]
 800d306:	4611      	mov	r1, r2
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	32ae      	adds	r2, #174	@ 0xae
 800d32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d334:	2303      	movs	r3, #3
 800d336:	e01c      	b.n	800d372 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	2b03      	cmp	r3, #3
 800d342:	d115      	bne.n	800d370 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	32ae      	adds	r2, #174	@ 0xae
 800d34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	32ae      	adds	r2, #174	@ 0xae
 800d362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d368:	78fa      	ldrb	r2, [r7, #3]
 800d36a:	4611      	mov	r1, r2
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00e      	beq.n	800d3cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	6852      	ldr	r2, [r2, #4]
 800d3ba:	b2d2      	uxtb	r2, r2
 800d3bc:	4611      	mov	r1, r2
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	4798      	blx	r3
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d3e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d3fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b086      	sub	sp, #24
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	460b      	mov	r3, r1
 800d414:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	885b      	ldrh	r3, [r3, #2]
 800d426:	b29b      	uxth	r3, r3
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	7812      	ldrb	r2, [r2, #0]
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d91f      	bls.n	800d470 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d436:	e013      	b.n	800d460 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d438:	f107 030a 	add.w	r3, r7, #10
 800d43c:	4619      	mov	r1, r3
 800d43e:	6978      	ldr	r0, [r7, #20]
 800d440:	f000 f81b 	bl	800d47a <USBD_GetNextDesc>
 800d444:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	785b      	ldrb	r3, [r3, #1]
 800d44a:	2b05      	cmp	r3, #5
 800d44c:	d108      	bne.n	800d460 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	789b      	ldrb	r3, [r3, #2]
 800d456:	78fa      	ldrb	r2, [r7, #3]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d008      	beq.n	800d46e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	885b      	ldrh	r3, [r3, #2]
 800d464:	b29a      	uxth	r2, r3
 800d466:	897b      	ldrh	r3, [r7, #10]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d8e5      	bhi.n	800d438 <USBD_GetEpDesc+0x2e>
 800d46c:	e000      	b.n	800d470 <USBD_GetEpDesc+0x66>
          break;
 800d46e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d470:	693b      	ldr	r3, [r7, #16]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3718      	adds	r7, #24
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b085      	sub	sp, #20
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	7812      	ldrb	r2, [r2, #0]
 800d490:	4413      	add	r3, r2
 800d492:	b29a      	uxth	r2, r3
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	461a      	mov	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b087      	sub	sp, #28
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d4d0:	8a3b      	ldrh	r3, [r7, #16]
 800d4d2:	021b      	lsls	r3, r3, #8
 800d4d4:	b21a      	sxth	r2, r3
 800d4d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	b21b      	sxth	r3, r3
 800d4de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d4e0:	89fb      	ldrh	r3, [r7, #14]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
	...

0800d4f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d506:	2b40      	cmp	r3, #64	@ 0x40
 800d508:	d005      	beq.n	800d516 <USBD_StdDevReq+0x26>
 800d50a:	2b40      	cmp	r3, #64	@ 0x40
 800d50c:	d857      	bhi.n	800d5be <USBD_StdDevReq+0xce>
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00f      	beq.n	800d532 <USBD_StdDevReq+0x42>
 800d512:	2b20      	cmp	r3, #32
 800d514:	d153      	bne.n	800d5be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	32ae      	adds	r2, #174	@ 0xae
 800d520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	4798      	blx	r3
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]
      break;
 800d530:	e04a      	b.n	800d5c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	2b09      	cmp	r3, #9
 800d538:	d83b      	bhi.n	800d5b2 <USBD_StdDevReq+0xc2>
 800d53a:	a201      	add	r2, pc, #4	@ (adr r2, 800d540 <USBD_StdDevReq+0x50>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d595 	.word	0x0800d595
 800d544:	0800d5a9 	.word	0x0800d5a9
 800d548:	0800d5b3 	.word	0x0800d5b3
 800d54c:	0800d59f 	.word	0x0800d59f
 800d550:	0800d5b3 	.word	0x0800d5b3
 800d554:	0800d573 	.word	0x0800d573
 800d558:	0800d569 	.word	0x0800d569
 800d55c:	0800d5b3 	.word	0x0800d5b3
 800d560:	0800d58b 	.word	0x0800d58b
 800d564:	0800d57d 	.word	0x0800d57d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fa3c 	bl	800d9e8 <USBD_GetDescriptor>
          break;
 800d570:	e024      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fba1 	bl	800dcbc <USBD_SetAddress>
          break;
 800d57a:	e01f      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fbe0 	bl	800dd44 <USBD_SetConfig>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]
          break;
 800d588:	e018      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fc83 	bl	800de98 <USBD_GetConfig>
          break;
 800d592:	e013      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fcb4 	bl	800df04 <USBD_GetStatus>
          break;
 800d59c:	e00e      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fce3 	bl	800df6c <USBD_SetFeature>
          break;
 800d5a6:	e009      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fd07 	bl	800dfbe <USBD_ClrFeature>
          break;
 800d5b0:	e004      	b.n	800d5bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fd5e 	bl	800e076 <USBD_CtlError>
          break;
 800d5ba:	bf00      	nop
      }
      break;
 800d5bc:	e004      	b.n	800d5c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fd58 	bl	800e076 <USBD_CtlError>
      break;
 800d5c6:	bf00      	nop
  }

  return ret;
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop

0800d5d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d5ea:	2b40      	cmp	r3, #64	@ 0x40
 800d5ec:	d005      	beq.n	800d5fa <USBD_StdItfReq+0x26>
 800d5ee:	2b40      	cmp	r3, #64	@ 0x40
 800d5f0:	d852      	bhi.n	800d698 <USBD_StdItfReq+0xc4>
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <USBD_StdItfReq+0x26>
 800d5f6:	2b20      	cmp	r3, #32
 800d5f8:	d14e      	bne.n	800d698 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d600:	b2db      	uxtb	r3, r3
 800d602:	3b01      	subs	r3, #1
 800d604:	2b02      	cmp	r3, #2
 800d606:	d840      	bhi.n	800d68a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	889b      	ldrh	r3, [r3, #4]
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d836      	bhi.n	800d680 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	889b      	ldrh	r3, [r3, #4]
 800d616:	b2db      	uxtb	r3, r3
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff fedb 	bl	800d3d6 <USBD_CoreFindIF>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	2bff      	cmp	r3, #255	@ 0xff
 800d628:	d01d      	beq.n	800d666 <USBD_StdItfReq+0x92>
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d11a      	bne.n	800d666 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d630:	7bba      	ldrb	r2, [r7, #14]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	32ae      	adds	r2, #174	@ 0xae
 800d636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00f      	beq.n	800d660 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d640:	7bba      	ldrb	r2, [r7, #14]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d648:	7bba      	ldrb	r2, [r7, #14]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	32ae      	adds	r2, #174	@ 0xae
 800d64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	4798      	blx	r3
 800d65a:	4603      	mov	r3, r0
 800d65c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d65e:	e004      	b.n	800d66a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d660:	2303      	movs	r3, #3
 800d662:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d664:	e001      	b.n	800d66a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	88db      	ldrh	r3, [r3, #6]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d110      	bne.n	800d694 <USBD_StdItfReq+0xc0>
 800d672:	7bfb      	ldrb	r3, [r7, #15]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10d      	bne.n	800d694 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fdd3 	bl	800e224 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d67e:	e009      	b.n	800d694 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fcf7 	bl	800e076 <USBD_CtlError>
          break;
 800d688:	e004      	b.n	800d694 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fcf2 	bl	800e076 <USBD_CtlError>
          break;
 800d692:	e000      	b.n	800d696 <USBD_StdItfReq+0xc2>
          break;
 800d694:	bf00      	nop
      }
      break;
 800d696:	e004      	b.n	800d6a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fceb 	bl	800e076 <USBD_CtlError>
      break;
 800d6a0:	bf00      	nop
  }

  return ret;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	889b      	ldrh	r3, [r3, #4]
 800d6be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d6c8:	2b40      	cmp	r3, #64	@ 0x40
 800d6ca:	d007      	beq.n	800d6dc <USBD_StdEPReq+0x30>
 800d6cc:	2b40      	cmp	r3, #64	@ 0x40
 800d6ce:	f200 817f 	bhi.w	800d9d0 <USBD_StdEPReq+0x324>
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d02a      	beq.n	800d72c <USBD_StdEPReq+0x80>
 800d6d6:	2b20      	cmp	r3, #32
 800d6d8:	f040 817a 	bne.w	800d9d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff fe85 	bl	800d3f0 <USBD_CoreFindEP>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6ea:	7b7b      	ldrb	r3, [r7, #13]
 800d6ec:	2bff      	cmp	r3, #255	@ 0xff
 800d6ee:	f000 8174 	beq.w	800d9da <USBD_StdEPReq+0x32e>
 800d6f2:	7b7b      	ldrb	r3, [r7, #13]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f040 8170 	bne.w	800d9da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d6fa:	7b7a      	ldrb	r2, [r7, #13]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d702:	7b7a      	ldrb	r2, [r7, #13]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	32ae      	adds	r2, #174	@ 0xae
 800d708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 8163 	beq.w	800d9da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d714:	7b7a      	ldrb	r2, [r7, #13]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	32ae      	adds	r2, #174	@ 0xae
 800d71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	6839      	ldr	r1, [r7, #0]
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	4798      	blx	r3
 800d726:	4603      	mov	r3, r0
 800d728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d72a:	e156      	b.n	800d9da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	785b      	ldrb	r3, [r3, #1]
 800d730:	2b03      	cmp	r3, #3
 800d732:	d008      	beq.n	800d746 <USBD_StdEPReq+0x9a>
 800d734:	2b03      	cmp	r3, #3
 800d736:	f300 8145 	bgt.w	800d9c4 <USBD_StdEPReq+0x318>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f000 809b 	beq.w	800d876 <USBD_StdEPReq+0x1ca>
 800d740:	2b01      	cmp	r3, #1
 800d742:	d03c      	beq.n	800d7be <USBD_StdEPReq+0x112>
 800d744:	e13e      	b.n	800d9c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d002      	beq.n	800d758 <USBD_StdEPReq+0xac>
 800d752:	2b03      	cmp	r3, #3
 800d754:	d016      	beq.n	800d784 <USBD_StdEPReq+0xd8>
 800d756:	e02c      	b.n	800d7b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d758:	7bbb      	ldrb	r3, [r7, #14]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00d      	beq.n	800d77a <USBD_StdEPReq+0xce>
 800d75e:	7bbb      	ldrb	r3, [r7, #14]
 800d760:	2b80      	cmp	r3, #128	@ 0x80
 800d762:	d00a      	beq.n	800d77a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d764:	7bbb      	ldrb	r3, [r7, #14]
 800d766:	4619      	mov	r1, r3
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f001 f949 	bl	800ea00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d76e:	2180      	movs	r1, #128	@ 0x80
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 f945 	bl	800ea00 <USBD_LL_StallEP>
 800d776:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d778:	e020      	b.n	800d7bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 fc7a 	bl	800e076 <USBD_CtlError>
              break;
 800d782:	e01b      	b.n	800d7bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	885b      	ldrh	r3, [r3, #2]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10e      	bne.n	800d7aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00b      	beq.n	800d7aa <USBD_StdEPReq+0xfe>
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	2b80      	cmp	r3, #128	@ 0x80
 800d796:	d008      	beq.n	800d7aa <USBD_StdEPReq+0xfe>
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	88db      	ldrh	r3, [r3, #6]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 f92b 	bl	800ea00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fd3a 	bl	800e224 <USBD_CtlSendStatus>

              break;
 800d7b0:	e004      	b.n	800d7bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d7b2:	6839      	ldr	r1, [r7, #0]
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fc5e 	bl	800e076 <USBD_CtlError>
              break;
 800d7ba:	bf00      	nop
          }
          break;
 800d7bc:	e107      	b.n	800d9ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d002      	beq.n	800d7d0 <USBD_StdEPReq+0x124>
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d016      	beq.n	800d7fc <USBD_StdEPReq+0x150>
 800d7ce:	e04b      	b.n	800d868 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00d      	beq.n	800d7f2 <USBD_StdEPReq+0x146>
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	2b80      	cmp	r3, #128	@ 0x80
 800d7da:	d00a      	beq.n	800d7f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 f90d 	bl	800ea00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7e6:	2180      	movs	r1, #128	@ 0x80
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f001 f909 	bl	800ea00 <USBD_LL_StallEP>
 800d7ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7f0:	e040      	b.n	800d874 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fc3e 	bl	800e076 <USBD_CtlError>
              break;
 800d7fa:	e03b      	b.n	800d874 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	885b      	ldrh	r3, [r3, #2]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d136      	bne.n	800d872 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d804:	7bbb      	ldrb	r3, [r7, #14]
 800d806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d80e:	7bbb      	ldrb	r3, [r7, #14]
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f001 f913 	bl	800ea3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fd03 	bl	800e224 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d81e:	7bbb      	ldrb	r3, [r7, #14]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fde4 	bl	800d3f0 <USBD_CoreFindEP>
 800d828:	4603      	mov	r3, r0
 800d82a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d82c:	7b7b      	ldrb	r3, [r7, #13]
 800d82e:	2bff      	cmp	r3, #255	@ 0xff
 800d830:	d01f      	beq.n	800d872 <USBD_StdEPReq+0x1c6>
 800d832:	7b7b      	ldrb	r3, [r7, #13]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11c      	bne.n	800d872 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d838:	7b7a      	ldrb	r2, [r7, #13]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d840:	7b7a      	ldrb	r2, [r7, #13]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	32ae      	adds	r2, #174	@ 0xae
 800d846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d010      	beq.n	800d872 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d850:	7b7a      	ldrb	r2, [r7, #13]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	32ae      	adds	r2, #174	@ 0xae
 800d856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	4798      	blx	r3
 800d862:	4603      	mov	r3, r0
 800d864:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d866:	e004      	b.n	800d872 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fc03 	bl	800e076 <USBD_CtlError>
              break;
 800d870:	e000      	b.n	800d874 <USBD_StdEPReq+0x1c8>
              break;
 800d872:	bf00      	nop
          }
          break;
 800d874:	e0ab      	b.n	800d9ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d002      	beq.n	800d888 <USBD_StdEPReq+0x1dc>
 800d882:	2b03      	cmp	r3, #3
 800d884:	d032      	beq.n	800d8ec <USBD_StdEPReq+0x240>
 800d886:	e097      	b.n	800d9b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d888:	7bbb      	ldrb	r3, [r7, #14]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d007      	beq.n	800d89e <USBD_StdEPReq+0x1f2>
 800d88e:	7bbb      	ldrb	r3, [r7, #14]
 800d890:	2b80      	cmp	r3, #128	@ 0x80
 800d892:	d004      	beq.n	800d89e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fbed 	bl	800e076 <USBD_CtlError>
                break;
 800d89c:	e091      	b.n	800d9c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d89e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da0b      	bge.n	800d8be <USBD_StdEPReq+0x212>
 800d8a6:	7bbb      	ldrb	r3, [r7, #14]
 800d8a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	3310      	adds	r3, #16
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	e00b      	b.n	800d8d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
 800d8c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fc43 	bl	800e170 <USBD_CtlSendData>
              break;
 800d8ea:	e06a      	b.n	800d9c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d8ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	da11      	bge.n	800d918 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d8f4:	7bbb      	ldrb	r3, [r7, #14]
 800d8f6:	f003 020f 	and.w	r2, r3, #15
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4413      	add	r3, r2
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	440b      	add	r3, r1
 800d906:	3324      	adds	r3, #36	@ 0x24
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d117      	bne.n	800d93e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fbb0 	bl	800e076 <USBD_CtlError>
                  break;
 800d916:	e054      	b.n	800d9c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	f003 020f 	and.w	r2, r3, #15
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4613      	mov	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	440b      	add	r3, r1
 800d92a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d104      	bne.n	800d93e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fb9d 	bl	800e076 <USBD_CtlError>
                  break;
 800d93c:	e041      	b.n	800d9c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d93e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d942:	2b00      	cmp	r3, #0
 800d944:	da0b      	bge.n	800d95e <USBD_StdEPReq+0x2b2>
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	3310      	adds	r3, #16
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	4413      	add	r3, r2
 800d95a:	3304      	adds	r3, #4
 800d95c:	e00b      	b.n	800d976 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	3304      	adds	r3, #4
 800d976:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d002      	beq.n	800d984 <USBD_StdEPReq+0x2d8>
 800d97e:	7bbb      	ldrb	r3, [r7, #14]
 800d980:	2b80      	cmp	r3, #128	@ 0x80
 800d982:	d103      	bne.n	800d98c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	e00e      	b.n	800d9aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 f873 	bl	800ea7c <USBD_LL_IsStallEP>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e002      	b.n	800d9aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fbdd 	bl	800e170 <USBD_CtlSendData>
              break;
 800d9b6:	e004      	b.n	800d9c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d9b8:	6839      	ldr	r1, [r7, #0]
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fb5b 	bl	800e076 <USBD_CtlError>
              break;
 800d9c0:	bf00      	nop
          }
          break;
 800d9c2:	e004      	b.n	800d9ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fb55 	bl	800e076 <USBD_CtlError>
          break;
 800d9cc:	bf00      	nop
      }
      break;
 800d9ce:	e005      	b.n	800d9dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fb4f 	bl	800e076 <USBD_CtlError>
      break;
 800d9d8:	e000      	b.n	800d9dc <USBD_StdEPReq+0x330>
      break;
 800d9da:	bf00      	nop
  }

  return ret;
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	885b      	ldrh	r3, [r3, #2]
 800da02:	0a1b      	lsrs	r3, r3, #8
 800da04:	b29b      	uxth	r3, r3
 800da06:	3b01      	subs	r3, #1
 800da08:	2b06      	cmp	r3, #6
 800da0a:	f200 8128 	bhi.w	800dc5e <USBD_GetDescriptor+0x276>
 800da0e:	a201      	add	r2, pc, #4	@ (adr r2, 800da14 <USBD_GetDescriptor+0x2c>)
 800da10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da14:	0800da31 	.word	0x0800da31
 800da18:	0800da49 	.word	0x0800da49
 800da1c:	0800da89 	.word	0x0800da89
 800da20:	0800dc5f 	.word	0x0800dc5f
 800da24:	0800dc5f 	.word	0x0800dc5f
 800da28:	0800dbff 	.word	0x0800dbff
 800da2c:	0800dc2b 	.word	0x0800dc2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	7c12      	ldrb	r2, [r2, #16]
 800da3c:	f107 0108 	add.w	r1, r7, #8
 800da40:	4610      	mov	r0, r2
 800da42:	4798      	blx	r3
 800da44:	60f8      	str	r0, [r7, #12]
      break;
 800da46:	e112      	b.n	800dc6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7c1b      	ldrb	r3, [r3, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10d      	bne.n	800da6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da58:	f107 0208 	add.w	r2, r7, #8
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3301      	adds	r3, #1
 800da66:	2202      	movs	r2, #2
 800da68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800da6a:	e100      	b.n	800dc6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da74:	f107 0208 	add.w	r2, r7, #8
 800da78:	4610      	mov	r0, r2
 800da7a:	4798      	blx	r3
 800da7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3301      	adds	r3, #1
 800da82:	2202      	movs	r2, #2
 800da84:	701a      	strb	r2, [r3, #0]
      break;
 800da86:	e0f2      	b.n	800dc6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	885b      	ldrh	r3, [r3, #2]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b05      	cmp	r3, #5
 800da90:	f200 80ac 	bhi.w	800dbec <USBD_GetDescriptor+0x204>
 800da94:	a201      	add	r2, pc, #4	@ (adr r2, 800da9c <USBD_GetDescriptor+0xb4>)
 800da96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9a:	bf00      	nop
 800da9c:	0800dab5 	.word	0x0800dab5
 800daa0:	0800dae9 	.word	0x0800dae9
 800daa4:	0800db1d 	.word	0x0800db1d
 800daa8:	0800db51 	.word	0x0800db51
 800daac:	0800db85 	.word	0x0800db85
 800dab0:	0800dbb9 	.word	0x0800dbb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	7c12      	ldrb	r2, [r2, #16]
 800dacc:	f107 0108 	add.w	r1, r7, #8
 800dad0:	4610      	mov	r0, r2
 800dad2:	4798      	blx	r3
 800dad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dad6:	e091      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 facb 	bl	800e076 <USBD_CtlError>
            err++;
 800dae0:	7afb      	ldrb	r3, [r7, #11]
 800dae2:	3301      	adds	r3, #1
 800dae4:	72fb      	strb	r3, [r7, #11]
          break;
 800dae6:	e089      	b.n	800dbfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00b      	beq.n	800db0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	7c12      	ldrb	r2, [r2, #16]
 800db00:	f107 0108 	add.w	r1, r7, #8
 800db04:	4610      	mov	r0, r2
 800db06:	4798      	blx	r3
 800db08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db0a:	e077      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fab1 	bl	800e076 <USBD_CtlError>
            err++;
 800db14:	7afb      	ldrb	r3, [r7, #11]
 800db16:	3301      	adds	r3, #1
 800db18:	72fb      	strb	r3, [r7, #11]
          break;
 800db1a:	e06f      	b.n	800dbfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00b      	beq.n	800db40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	7c12      	ldrb	r2, [r2, #16]
 800db34:	f107 0108 	add.w	r1, r7, #8
 800db38:	4610      	mov	r0, r2
 800db3a:	4798      	blx	r3
 800db3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db3e:	e05d      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fa97 	bl	800e076 <USBD_CtlError>
            err++;
 800db48:	7afb      	ldrb	r3, [r7, #11]
 800db4a:	3301      	adds	r3, #1
 800db4c:	72fb      	strb	r3, [r7, #11]
          break;
 800db4e:	e055      	b.n	800dbfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00b      	beq.n	800db74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	7c12      	ldrb	r2, [r2, #16]
 800db68:	f107 0108 	add.w	r1, r7, #8
 800db6c:	4610      	mov	r0, r2
 800db6e:	4798      	blx	r3
 800db70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db72:	e043      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fa7d 	bl	800e076 <USBD_CtlError>
            err++;
 800db7c:	7afb      	ldrb	r3, [r7, #11]
 800db7e:	3301      	adds	r3, #1
 800db80:	72fb      	strb	r3, [r7, #11]
          break;
 800db82:	e03b      	b.n	800dbfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	7c12      	ldrb	r2, [r2, #16]
 800db9c:	f107 0108 	add.w	r1, r7, #8
 800dba0:	4610      	mov	r0, r2
 800dba2:	4798      	blx	r3
 800dba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dba6:	e029      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fa63 	bl	800e076 <USBD_CtlError>
            err++;
 800dbb0:	7afb      	ldrb	r3, [r7, #11]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	72fb      	strb	r3, [r7, #11]
          break;
 800dbb6:	e021      	b.n	800dbfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00b      	beq.n	800dbdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	7c12      	ldrb	r2, [r2, #16]
 800dbd0:	f107 0108 	add.w	r1, r7, #8
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	4798      	blx	r3
 800dbd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbda:	e00f      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fa49 	bl	800e076 <USBD_CtlError>
            err++;
 800dbe4:	7afb      	ldrb	r3, [r7, #11]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbea:	e007      	b.n	800dbfc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fa41 	bl	800e076 <USBD_CtlError>
          err++;
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dbfa:	bf00      	nop
      }
      break;
 800dbfc:	e037      	b.n	800dc6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7c1b      	ldrb	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d109      	bne.n	800dc1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc0e:	f107 0208 	add.w	r2, r7, #8
 800dc12:	4610      	mov	r0, r2
 800dc14:	4798      	blx	r3
 800dc16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc18:	e029      	b.n	800dc6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa2a 	bl	800e076 <USBD_CtlError>
        err++;
 800dc22:	7afb      	ldrb	r3, [r7, #11]
 800dc24:	3301      	adds	r3, #1
 800dc26:	72fb      	strb	r3, [r7, #11]
      break;
 800dc28:	e021      	b.n	800dc6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	7c1b      	ldrb	r3, [r3, #16]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10d      	bne.n	800dc4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc3a:	f107 0208 	add.w	r2, r7, #8
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4798      	blx	r3
 800dc42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	3301      	adds	r3, #1
 800dc48:	2207      	movs	r2, #7
 800dc4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc4c:	e00f      	b.n	800dc6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fa10 	bl	800e076 <USBD_CtlError>
        err++;
 800dc56:	7afb      	ldrb	r3, [r7, #11]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	72fb      	strb	r3, [r7, #11]
      break;
 800dc5c:	e007      	b.n	800dc6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa08 	bl	800e076 <USBD_CtlError>
      err++;
 800dc66:	7afb      	ldrb	r3, [r7, #11]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	72fb      	strb	r3, [r7, #11]
      break;
 800dc6c:	bf00      	nop
  }

  if (err != 0U)
 800dc6e:	7afb      	ldrb	r3, [r7, #11]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d11e      	bne.n	800dcb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	88db      	ldrh	r3, [r3, #6]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d016      	beq.n	800dcaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dc7c:	893b      	ldrh	r3, [r7, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00e      	beq.n	800dca0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	88da      	ldrh	r2, [r3, #6]
 800dc86:	893b      	ldrh	r3, [r7, #8]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bf28      	it	cs
 800dc8c:	4613      	movcs	r3, r2
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dc92:	893b      	ldrh	r3, [r7, #8]
 800dc94:	461a      	mov	r2, r3
 800dc96:	68f9      	ldr	r1, [r7, #12]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fa69 	bl	800e170 <USBD_CtlSendData>
 800dc9e:	e009      	b.n	800dcb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f9e7 	bl	800e076 <USBD_CtlError>
 800dca8:	e004      	b.n	800dcb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 faba 	bl	800e224 <USBD_CtlSendStatus>
 800dcb0:	e000      	b.n	800dcb4 <USBD_GetDescriptor+0x2cc>
    return;
 800dcb2:	bf00      	nop
  }
}
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop

0800dcbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	889b      	ldrh	r3, [r3, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d131      	bne.n	800dd32 <USBD_SetAddress+0x76>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	88db      	ldrh	r3, [r3, #6]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d12d      	bne.n	800dd32 <USBD_SetAddress+0x76>
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	885b      	ldrh	r3, [r3, #2]
 800dcda:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcdc:	d829      	bhi.n	800dd32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	885b      	ldrh	r3, [r3, #2]
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d104      	bne.n	800dd00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f9bc 	bl	800e076 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfe:	e01d      	b.n	800dd3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7bfa      	ldrb	r2, [r7, #15]
 800dd04:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fee1 	bl	800ead4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fa86 	bl	800e224 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d004      	beq.n	800dd28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2202      	movs	r2, #2
 800dd22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd26:	e009      	b.n	800dd3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd30:	e004      	b.n	800dd3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f99e 	bl	800e076 <USBD_CtlError>
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	885b      	ldrh	r3, [r3, #2]
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	4b4e      	ldr	r3, [pc, #312]	@ (800de94 <USBD_SetConfig+0x150>)
 800dd5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd5c:	4b4d      	ldr	r3, [pc, #308]	@ (800de94 <USBD_SetConfig+0x150>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d905      	bls.n	800dd70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f985 	bl	800e076 <USBD_CtlError>
    return USBD_FAIL;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	e08c      	b.n	800de8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d002      	beq.n	800dd82 <USBD_SetConfig+0x3e>
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d029      	beq.n	800ddd4 <USBD_SetConfig+0x90>
 800dd80:	e075      	b.n	800de6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dd82:	4b44      	ldr	r3, [pc, #272]	@ (800de94 <USBD_SetConfig+0x150>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d020      	beq.n	800ddcc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dd8a:	4b42      	ldr	r3, [pc, #264]	@ (800de94 <USBD_SetConfig+0x150>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd94:	4b3f      	ldr	r3, [pc, #252]	@ (800de94 <USBD_SetConfig+0x150>)
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fe ffe3 	bl	800cd66 <USBD_SetClassConfig>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d008      	beq.n	800ddbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f962 	bl	800e076 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2202      	movs	r2, #2
 800ddb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ddba:	e065      	b.n	800de88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fa31 	bl	800e224 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ddca:	e05d      	b.n	800de88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fa29 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800ddd2:	e059      	b.n	800de88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ddd4:	4b2f      	ldr	r3, [pc, #188]	@ (800de94 <USBD_SetConfig+0x150>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d112      	bne.n	800de02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2202      	movs	r2, #2
 800dde0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dde4:	4b2b      	ldr	r3, [pc, #172]	@ (800de94 <USBD_SetConfig+0x150>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	461a      	mov	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ddee:	4b29      	ldr	r3, [pc, #164]	@ (800de94 <USBD_SetConfig+0x150>)
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7fe ffd2 	bl	800cd9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fa12 	bl	800e224 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de00:	e042      	b.n	800de88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800de02:	4b24      	ldr	r3, [pc, #144]	@ (800de94 <USBD_SetConfig+0x150>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d02a      	beq.n	800de66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	b2db      	uxtb	r3, r3
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fe ffc0 	bl	800cd9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de1e:	4b1d      	ldr	r3, [pc, #116]	@ (800de94 <USBD_SetConfig+0x150>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de28:	4b1a      	ldr	r3, [pc, #104]	@ (800de94 <USBD_SetConfig+0x150>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7fe ff99 	bl	800cd66 <USBD_SetClassConfig>
 800de34:	4603      	mov	r3, r0
 800de36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00f      	beq.n	800de5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f918 	bl	800e076 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fe ffa5 	bl	800cd9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2202      	movs	r2, #2
 800de58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800de5c:	e014      	b.n	800de88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f9e0 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800de64:	e010      	b.n	800de88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f9dc 	bl	800e224 <USBD_CtlSendStatus>
      break;
 800de6c:	e00c      	b.n	800de88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 f900 	bl	800e076 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de76:	4b07      	ldr	r3, [pc, #28]	@ (800de94 <USBD_SetConfig+0x150>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7fe ff8e 	bl	800cd9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800de82:	2303      	movs	r3, #3
 800de84:	73fb      	strb	r3, [r7, #15]
      break;
 800de86:	bf00      	nop
  }

  return ret;
 800de88:	7bfb      	ldrb	r3, [r7, #15]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20000598 	.word	0x20000598

0800de98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	88db      	ldrh	r3, [r3, #6]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d004      	beq.n	800deb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 f8e2 	bl	800e076 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800deb2:	e023      	b.n	800defc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b02      	cmp	r3, #2
 800debe:	dc02      	bgt.n	800dec6 <USBD_GetConfig+0x2e>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	dc03      	bgt.n	800decc <USBD_GetConfig+0x34>
 800dec4:	e015      	b.n	800def2 <USBD_GetConfig+0x5a>
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d00b      	beq.n	800dee2 <USBD_GetConfig+0x4a>
 800deca:	e012      	b.n	800def2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	3308      	adds	r3, #8
 800ded6:	2201      	movs	r2, #1
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f948 	bl	800e170 <USBD_CtlSendData>
        break;
 800dee0:	e00c      	b.n	800defc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	3304      	adds	r3, #4
 800dee6:	2201      	movs	r2, #1
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f940 	bl	800e170 <USBD_CtlSendData>
        break;
 800def0:	e004      	b.n	800defc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f8be 	bl	800e076 <USBD_CtlError>
        break;
 800defa:	bf00      	nop
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df14:	b2db      	uxtb	r3, r3
 800df16:	3b01      	subs	r3, #1
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d81e      	bhi.n	800df5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	88db      	ldrh	r3, [r3, #6]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d004      	beq.n	800df2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df24:	6839      	ldr	r1, [r7, #0]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f8a5 	bl	800e076 <USBD_CtlError>
        break;
 800df2c:	e01a      	b.n	800df64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d005      	beq.n	800df4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	f043 0202 	orr.w	r2, r3, #2
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	330c      	adds	r3, #12
 800df4e:	2202      	movs	r2, #2
 800df50:	4619      	mov	r1, r3
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f90c 	bl	800e170 <USBD_CtlSendData>
      break;
 800df58:	e004      	b.n	800df64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 f88a 	bl	800e076 <USBD_CtlError>
      break;
 800df62:	bf00      	nop
  }
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	885b      	ldrh	r3, [r3, #2]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d107      	bne.n	800df8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 f94c 	bl	800e224 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800df8c:	e013      	b.n	800dfb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	885b      	ldrh	r3, [r3, #2]
 800df92:	2b02      	cmp	r3, #2
 800df94:	d10b      	bne.n	800dfae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	889b      	ldrh	r3, [r3, #4]
 800df9a:	0a1b      	lsrs	r3, r3, #8
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 f93c 	bl	800e224 <USBD_CtlSendStatus>
}
 800dfac:	e003      	b.n	800dfb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f860 	bl	800e076 <USBD_CtlError>
}
 800dfb6:	bf00      	nop
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	d80b      	bhi.n	800dfee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d10c      	bne.n	800dff8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f91c 	bl	800e224 <USBD_CtlSendStatus>
      }
      break;
 800dfec:	e004      	b.n	800dff8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f840 	bl	800e076 <USBD_CtlError>
      break;
 800dff6:	e000      	b.n	800dffa <USBD_ClrFeature+0x3c>
      break;
 800dff8:	bf00      	nop
  }
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	781a      	ldrb	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3301      	adds	r3, #1
 800e01c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	781a      	ldrb	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3301      	adds	r3, #1
 800e02a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff fa40 	bl	800d4b2 <SWAPBYTE>
 800e032:	4603      	mov	r3, r0
 800e034:	461a      	mov	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3301      	adds	r3, #1
 800e03e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3301      	adds	r3, #1
 800e044:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff fa33 	bl	800d4b2 <SWAPBYTE>
 800e04c:	4603      	mov	r3, r0
 800e04e:	461a      	mov	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3301      	adds	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7ff fa26 	bl	800d4b2 <SWAPBYTE>
 800e066:	4603      	mov	r3, r0
 800e068:	461a      	mov	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	80da      	strh	r2, [r3, #6]
}
 800e06e:	bf00      	nop
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e080:	2180      	movs	r1, #128	@ 0x80
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fcbc 	bl	800ea00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e088:	2100      	movs	r1, #0
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fcb8 	bl	800ea00 <USBD_LL_StallEP>
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d042      	beq.n	800e134 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e0b2:	6938      	ldr	r0, [r7, #16]
 800e0b4:	f000 f842 	bl	800e13c <USBD_GetLen>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0c2:	d808      	bhi.n	800e0d6 <USBD_GetString+0x3e>
 800e0c4:	6938      	ldr	r0, [r7, #16]
 800e0c6:	f000 f839 	bl	800e13c <USBD_GetLen>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	e001      	b.n	800e0da <USBD_GetString+0x42>
 800e0d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	7812      	ldrb	r2, [r2, #0]
 800e0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0ea:	7dfb      	ldrb	r3, [r7, #23]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0fa:	7dfb      	ldrb	r3, [r7, #23]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e100:	e013      	b.n	800e12a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	4413      	add	r3, r2
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	7812      	ldrb	r2, [r2, #0]
 800e10c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	3301      	adds	r3, #1
 800e112:	613b      	str	r3, [r7, #16]
    idx++;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	3301      	adds	r3, #1
 800e118:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	4413      	add	r3, r2
 800e120:	2200      	movs	r2, #0
 800e122:	701a      	strb	r2, [r3, #0]
    idx++;
 800e124:	7dfb      	ldrb	r3, [r7, #23]
 800e126:	3301      	adds	r3, #1
 800e128:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1e7      	bne.n	800e102 <USBD_GetString+0x6a>
 800e132:	e000      	b.n	800e136 <USBD_GetString+0x9e>
    return;
 800e134:	bf00      	nop
  }
}
 800e136:	3718      	adds	r7, #24
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e14c:	e005      	b.n	800e15a <USBD_GetLen+0x1e>
  {
    len++;
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	3301      	adds	r3, #1
 800e152:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	3301      	adds	r3, #1
 800e158:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d1f5      	bne.n	800e14e <USBD_GetLen+0x12>
  }

  return len;
 800e162:	7bfb      	ldrb	r3, [r7, #15]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2202      	movs	r2, #2
 800e180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	2100      	movs	r1, #0
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 fcbb 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fcaa 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 fcae 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b084      	sub	sp, #16
 800e206:	af00      	add	r7, sp, #0
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	2100      	movs	r1, #0
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f000 fc9d 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2204      	movs	r2, #4
 800e230:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e234:	2300      	movs	r3, #0
 800e236:	2200      	movs	r2, #0
 800e238:	2100      	movs	r1, #0
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fc69 	bl	800eb12 <USBD_LL_Transmit>

  return USBD_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2205      	movs	r2, #5
 800e256:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e25a:	2300      	movs	r3, #0
 800e25c:	2200      	movs	r2, #0
 800e25e:	2100      	movs	r1, #0
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fc77 	bl	800eb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e274:	2200      	movs	r2, #0
 800e276:	4912      	ldr	r1, [pc, #72]	@ (800e2c0 <MX_USB_DEVICE_Init+0x50>)
 800e278:	4812      	ldr	r0, [pc, #72]	@ (800e2c4 <MX_USB_DEVICE_Init+0x54>)
 800e27a:	f7fe fcf7 	bl	800cc6c <USBD_Init>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d001      	beq.n	800e288 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e284:	f7f3 ff26 	bl	80020d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e288:	490f      	ldr	r1, [pc, #60]	@ (800e2c8 <MX_USB_DEVICE_Init+0x58>)
 800e28a:	480e      	ldr	r0, [pc, #56]	@ (800e2c4 <MX_USB_DEVICE_Init+0x54>)
 800e28c:	f7fe fd1e 	bl	800cccc <USBD_RegisterClass>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e296:	f7f3 ff1d 	bl	80020d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e29a:	490c      	ldr	r1, [pc, #48]	@ (800e2cc <MX_USB_DEVICE_Init+0x5c>)
 800e29c:	4809      	ldr	r0, [pc, #36]	@ (800e2c4 <MX_USB_DEVICE_Init+0x54>)
 800e29e:	f7fe fc55 	bl	800cb4c <USBD_CDC_RegisterInterface>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e2a8:	f7f3 ff14 	bl	80020d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e2ac:	4805      	ldr	r0, [pc, #20]	@ (800e2c4 <MX_USB_DEVICE_Init+0x54>)
 800e2ae:	f7fe fd43 	bl	800cd38 <USBD_Start>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e2b8:	f7f3 ff0c 	bl	80020d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e2bc:	bf00      	nop
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	200000c8 	.word	0x200000c8
 800e2c4:	2000059c 	.word	0x2000059c
 800e2c8:	20000034 	.word	0x20000034
 800e2cc:	200000b4 	.word	0x200000b4

0800e2d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4905      	ldr	r1, [pc, #20]	@ (800e2ec <CDC_Init_FS+0x1c>)
 800e2d8:	4805      	ldr	r0, [pc, #20]	@ (800e2f0 <CDC_Init_FS+0x20>)
 800e2da:	f7fe fc51 	bl	800cb80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e2de:	4905      	ldr	r1, [pc, #20]	@ (800e2f4 <CDC_Init_FS+0x24>)
 800e2e0:	4803      	ldr	r0, [pc, #12]	@ (800e2f0 <CDC_Init_FS+0x20>)
 800e2e2:	f7fe fc6f 	bl	800cbc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e2e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20001078 	.word	0x20001078
 800e2f0:	2000059c 	.word	0x2000059c
 800e2f4:	20000878 	.word	0x20000878

0800e2f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e2fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	4603      	mov	r3, r0
 800e310:	6039      	str	r1, [r7, #0]
 800e312:	71fb      	strb	r3, [r7, #7]
 800e314:	4613      	mov	r3, r2
 800e316:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	2b23      	cmp	r3, #35	@ 0x23
 800e31c:	d84a      	bhi.n	800e3b4 <CDC_Control_FS+0xac>
 800e31e:	a201      	add	r2, pc, #4	@ (adr r2, 800e324 <CDC_Control_FS+0x1c>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e3b5 	.word	0x0800e3b5
 800e328:	0800e3b5 	.word	0x0800e3b5
 800e32c:	0800e3b5 	.word	0x0800e3b5
 800e330:	0800e3b5 	.word	0x0800e3b5
 800e334:	0800e3b5 	.word	0x0800e3b5
 800e338:	0800e3b5 	.word	0x0800e3b5
 800e33c:	0800e3b5 	.word	0x0800e3b5
 800e340:	0800e3b5 	.word	0x0800e3b5
 800e344:	0800e3b5 	.word	0x0800e3b5
 800e348:	0800e3b5 	.word	0x0800e3b5
 800e34c:	0800e3b5 	.word	0x0800e3b5
 800e350:	0800e3b5 	.word	0x0800e3b5
 800e354:	0800e3b5 	.word	0x0800e3b5
 800e358:	0800e3b5 	.word	0x0800e3b5
 800e35c:	0800e3b5 	.word	0x0800e3b5
 800e360:	0800e3b5 	.word	0x0800e3b5
 800e364:	0800e3b5 	.word	0x0800e3b5
 800e368:	0800e3b5 	.word	0x0800e3b5
 800e36c:	0800e3b5 	.word	0x0800e3b5
 800e370:	0800e3b5 	.word	0x0800e3b5
 800e374:	0800e3b5 	.word	0x0800e3b5
 800e378:	0800e3b5 	.word	0x0800e3b5
 800e37c:	0800e3b5 	.word	0x0800e3b5
 800e380:	0800e3b5 	.word	0x0800e3b5
 800e384:	0800e3b5 	.word	0x0800e3b5
 800e388:	0800e3b5 	.word	0x0800e3b5
 800e38c:	0800e3b5 	.word	0x0800e3b5
 800e390:	0800e3b5 	.word	0x0800e3b5
 800e394:	0800e3b5 	.word	0x0800e3b5
 800e398:	0800e3b5 	.word	0x0800e3b5
 800e39c:	0800e3b5 	.word	0x0800e3b5
 800e3a0:	0800e3b5 	.word	0x0800e3b5
 800e3a4:	0800e3b5 	.word	0x0800e3b5
 800e3a8:	0800e3b5 	.word	0x0800e3b5
 800e3ac:	0800e3b5 	.word	0x0800e3b5
 800e3b0:	0800e3b5 	.word	0x0800e3b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e3b4:	bf00      	nop
  }

  return (USBD_OK);
 800e3b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	4805      	ldr	r0, [pc, #20]	@ (800e3e8 <CDC_Receive_FS+0x24>)
 800e3d2:	f7fe fbf7 	bl	800cbc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e3d6:	4804      	ldr	r0, [pc, #16]	@ (800e3e8 <CDC_Receive_FS+0x24>)
 800e3d8:	f7fe fc12 	bl	800cc00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e3dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	2000059c 	.word	0x2000059c

0800e3ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e402:	4618      	mov	r0, r3
 800e404:	371c      	adds	r7, #28
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
	...

0800e410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	4603      	mov	r3, r0
 800e418:	6039      	str	r1, [r7, #0]
 800e41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2212      	movs	r2, #18
 800e420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e422:	4b03      	ldr	r3, [pc, #12]	@ (800e430 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e424:	4618      	mov	r0, r3
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	200000e4 	.word	0x200000e4

0800e434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	6039      	str	r1, [r7, #0]
 800e43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2204      	movs	r2, #4
 800e444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e446:	4b03      	ldr	r3, [pc, #12]	@ (800e454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	200000f8 	.word	0x200000f8

0800e458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	6039      	str	r1, [r7, #0]
 800e462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e464:	79fb      	ldrb	r3, [r7, #7]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d105      	bne.n	800e476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	4907      	ldr	r1, [pc, #28]	@ (800e48c <USBD_FS_ProductStrDescriptor+0x34>)
 800e46e:	4808      	ldr	r0, [pc, #32]	@ (800e490 <USBD_FS_ProductStrDescriptor+0x38>)
 800e470:	f7ff fe12 	bl	800e098 <USBD_GetString>
 800e474:	e004      	b.n	800e480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e476:	683a      	ldr	r2, [r7, #0]
 800e478:	4904      	ldr	r1, [pc, #16]	@ (800e48c <USBD_FS_ProductStrDescriptor+0x34>)
 800e47a:	4805      	ldr	r0, [pc, #20]	@ (800e490 <USBD_FS_ProductStrDescriptor+0x38>)
 800e47c:	f7ff fe0c 	bl	800e098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e480:	4b02      	ldr	r3, [pc, #8]	@ (800e48c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20001878 	.word	0x20001878
 800e490:	08011edc 	.word	0x08011edc

0800e494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4a0:	683a      	ldr	r2, [r7, #0]
 800e4a2:	4904      	ldr	r1, [pc, #16]	@ (800e4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e4a4:	4804      	ldr	r0, [pc, #16]	@ (800e4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e4a6:	f7ff fdf7 	bl	800e098 <USBD_GetString>
  return USBD_StrDesc;
 800e4aa:	4b02      	ldr	r3, [pc, #8]	@ (800e4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	20001878 	.word	0x20001878
 800e4b8:	08011ef4 	.word	0x08011ef4

0800e4bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	6039      	str	r1, [r7, #0]
 800e4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	221a      	movs	r2, #26
 800e4cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e4ce:	f000 f843 	bl	800e558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e4d2:	4b02      	ldr	r3, [pc, #8]	@ (800e4dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	200000fc 	.word	0x200000fc

0800e4e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6039      	str	r1, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d105      	bne.n	800e4fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	4907      	ldr	r1, [pc, #28]	@ (800e514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4f6:	4808      	ldr	r0, [pc, #32]	@ (800e518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4f8:	f7ff fdce 	bl	800e098 <USBD_GetString>
 800e4fc:	e004      	b.n	800e508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	4904      	ldr	r1, [pc, #16]	@ (800e514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e502:	4805      	ldr	r0, [pc, #20]	@ (800e518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e504:	f7ff fdc8 	bl	800e098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e508:	4b02      	ldr	r3, [pc, #8]	@ (800e514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20001878 	.word	0x20001878
 800e518:	08011f08 	.word	0x08011f08

0800e51c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	6039      	str	r1, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e528:	79fb      	ldrb	r3, [r7, #7]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d105      	bne.n	800e53a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	4907      	ldr	r1, [pc, #28]	@ (800e550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e532:	4808      	ldr	r0, [pc, #32]	@ (800e554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e534:	f7ff fdb0 	bl	800e098 <USBD_GetString>
 800e538:	e004      	b.n	800e544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	4904      	ldr	r1, [pc, #16]	@ (800e550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e53e:	4805      	ldr	r0, [pc, #20]	@ (800e554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e540:	f7ff fdaa 	bl	800e098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e544:	4b02      	ldr	r3, [pc, #8]	@ (800e550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e546:	4618      	mov	r0, r3
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	20001878 	.word	0x20001878
 800e554:	08011f14 	.word	0x08011f14

0800e558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e55e:	4b0f      	ldr	r3, [pc, #60]	@ (800e59c <Get_SerialNum+0x44>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e564:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a0 <Get_SerialNum+0x48>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e56a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a4 <Get_SerialNum+0x4c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e57e:	2208      	movs	r2, #8
 800e580:	4909      	ldr	r1, [pc, #36]	@ (800e5a8 <Get_SerialNum+0x50>)
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f000 f814 	bl	800e5b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e588:	2204      	movs	r2, #4
 800e58a:	4908      	ldr	r1, [pc, #32]	@ (800e5ac <Get_SerialNum+0x54>)
 800e58c:	68b8      	ldr	r0, [r7, #8]
 800e58e:	f000 f80f 	bl	800e5b0 <IntToUnicode>
  }
}
 800e592:	bf00      	nop
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	1fff7a10 	.word	0x1fff7a10
 800e5a0:	1fff7a14 	.word	0x1fff7a14
 800e5a4:	1fff7a18 	.word	0x1fff7a18
 800e5a8:	200000fe 	.word	0x200000fe
 800e5ac:	2000010e 	.word	0x2000010e

0800e5b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b087      	sub	sp, #28
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	75fb      	strb	r3, [r7, #23]
 800e5c6:	e027      	b.n	800e618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	0f1b      	lsrs	r3, r3, #28
 800e5cc:	2b09      	cmp	r3, #9
 800e5ce:	d80b      	bhi.n	800e5e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	0f1b      	lsrs	r3, r3, #28
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	005b      	lsls	r3, r3, #1
 800e5da:	4619      	mov	r1, r3
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	440b      	add	r3, r1
 800e5e0:	3230      	adds	r2, #48	@ 0x30
 800e5e2:	b2d2      	uxtb	r2, r2
 800e5e4:	701a      	strb	r2, [r3, #0]
 800e5e6:	e00a      	b.n	800e5fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	0f1b      	lsrs	r3, r3, #28
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	005b      	lsls	r3, r3, #1
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	440b      	add	r3, r1
 800e5f8:	3237      	adds	r2, #55	@ 0x37
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	011b      	lsls	r3, r3, #4
 800e602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	3301      	adds	r3, #1
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	4413      	add	r3, r2
 800e60e:	2200      	movs	r2, #0
 800e610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	3301      	adds	r3, #1
 800e616:	75fb      	strb	r3, [r7, #23]
 800e618:	7dfa      	ldrb	r2, [r7, #23]
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d3d3      	bcc.n	800e5c8 <IntToUnicode+0x18>
  }
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
	...

0800e630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b08a      	sub	sp, #40	@ 0x28
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e638:	f107 0314 	add.w	r3, r7, #20
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	605a      	str	r2, [r3, #4]
 800e642:	609a      	str	r2, [r3, #8]
 800e644:	60da      	str	r2, [r3, #12]
 800e646:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e650:	d13a      	bne.n	800e6c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e652:	2300      	movs	r3, #0
 800e654:	613b      	str	r3, [r7, #16]
 800e656:	4b1e      	ldr	r3, [pc, #120]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e65a:	4a1d      	ldr	r2, [pc, #116]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e65c:	f043 0301 	orr.w	r3, r3, #1
 800e660:	6313      	str	r3, [r2, #48]	@ 0x30
 800e662:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	613b      	str	r3, [r7, #16]
 800e66c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e66e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e674:	2302      	movs	r3, #2
 800e676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e67c:	2303      	movs	r3, #3
 800e67e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e680:	230a      	movs	r3, #10
 800e682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e684:	f107 0314 	add.w	r3, r7, #20
 800e688:	4619      	mov	r1, r3
 800e68a:	4812      	ldr	r0, [pc, #72]	@ (800e6d4 <HAL_PCD_MspInit+0xa4>)
 800e68c:	f7f5 fc1e 	bl	8003ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e690:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e694:	4a0e      	ldr	r2, [pc, #56]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e69a:	6353      	str	r3, [r2, #52]	@ 0x34
 800e69c:	2300      	movs	r3, #0
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6a4:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e6a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e6aa:	6453      	str	r3, [r2, #68]	@ 0x44
 800e6ac:	4b08      	ldr	r3, [pc, #32]	@ (800e6d0 <HAL_PCD_MspInit+0xa0>)
 800e6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	2043      	movs	r0, #67	@ 0x43
 800e6be:	f7f5 f844 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e6c2:	2043      	movs	r0, #67	@ 0x43
 800e6c4:	f7f5 f85d 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e6c8:	bf00      	nop
 800e6ca:	3728      	adds	r7, #40	@ 0x28
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	40023800 	.word	0x40023800
 800e6d4:	40020000 	.word	0x40020000

0800e6d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	f7fe fb6f 	bl	800cdd2 <USBD_LL_SetupStage>
}
 800e6f4:	bf00      	nop
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	460b      	mov	r3, r1
 800e706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e70e:	78fa      	ldrb	r2, [r7, #3]
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	4613      	mov	r3, r2
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	4413      	add	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	440b      	add	r3, r1
 800e71c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	78fb      	ldrb	r3, [r7, #3]
 800e724:	4619      	mov	r1, r3
 800e726:	f7fe fba9 	bl	800ce7c <USBD_LL_DataOutStage>
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b082      	sub	sp, #8
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	460b      	mov	r3, r1
 800e73c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e744:	78fa      	ldrb	r2, [r7, #3]
 800e746:	6879      	ldr	r1, [r7, #4]
 800e748:	4613      	mov	r3, r2
 800e74a:	00db      	lsls	r3, r3, #3
 800e74c:	4413      	add	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	440b      	add	r3, r1
 800e752:	3320      	adds	r3, #32
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	4619      	mov	r1, r3
 800e75a:	f7fe fc42 	bl	800cfe2 <USBD_LL_DataInStage>
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b082      	sub	sp, #8
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e774:	4618      	mov	r0, r3
 800e776:	f7fe fd7c 	bl	800d272 <USBD_LL_SOF>
}
 800e77a:	bf00      	nop
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e78a:	2301      	movs	r3, #1
 800e78c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	79db      	ldrb	r3, [r3, #7]
 800e792:	2b02      	cmp	r3, #2
 800e794:	d001      	beq.n	800e79a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e796:	f7f3 fc9d 	bl	80020d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e7a0:	7bfa      	ldrb	r2, [r7, #15]
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fe fd20 	bl	800d1ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fcc8 	bl	800d146 <USBD_LL_Reset>
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fe fd1b 	bl	800d20a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	6812      	ldr	r2, [r2, #0]
 800e7e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e7e6:	f043 0301 	orr.w	r3, r3, #1
 800e7ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7adb      	ldrb	r3, [r3, #11]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7f4:	4b04      	ldr	r3, [pc, #16]	@ (800e808 <HAL_PCD_SuspendCallback+0x48>)
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	4a03      	ldr	r2, [pc, #12]	@ (800e808 <HAL_PCD_SuspendCallback+0x48>)
 800e7fa:	f043 0306 	orr.w	r3, r3, #6
 800e7fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	e000ed00 	.word	0xe000ed00

0800e80c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe fd11 	bl	800d242 <USBD_LL_Resume>
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e83a:	78fa      	ldrb	r2, [r7, #3]
 800e83c:	4611      	mov	r1, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe fd69 	bl	800d316 <USBD_LL_IsoOUTIncomplete>
}
 800e844:	bf00      	nop
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e85e:	78fa      	ldrb	r2, [r7, #3]
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe fd25 	bl	800d2b2 <USBD_LL_IsoINIncomplete>
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fd7b 	bl	800d37a <USBD_LL_DevConnected>
}
 800e884:	bf00      	nop
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fe fd78 	bl	800d390 <USBD_LL_DevDisconnected>
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d13c      	bne.n	800e932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e8b8:	4a20      	ldr	r2, [pc, #128]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e8c8:	4b1c      	ldr	r3, [pc, #112]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e8ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8d2:	2204      	movs	r2, #4
 800e8d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e8d6:	4b19      	ldr	r3, [pc, #100]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8d8:	2202      	movs	r2, #2
 800e8da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8dc:	4b17      	ldr	r3, [pc, #92]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e8e2:	4b16      	ldr	r3, [pc, #88]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e8e8:	4b14      	ldr	r3, [pc, #80]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e8ee:	4b13      	ldr	r3, [pc, #76]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e8f4:	4b11      	ldr	r3, [pc, #68]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e8fa:	4b10      	ldr	r3, [pc, #64]	@ (800e93c <USBD_LL_Init+0x94>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e900:	4b0e      	ldr	r3, [pc, #56]	@ (800e93c <USBD_LL_Init+0x94>)
 800e902:	2200      	movs	r2, #0
 800e904:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e906:	480d      	ldr	r0, [pc, #52]	@ (800e93c <USBD_LL_Init+0x94>)
 800e908:	f7f8 fae1 	bl	8006ece <HAL_PCD_Init>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e912:	f7f3 fbdf 	bl	80020d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e916:	2180      	movs	r1, #128	@ 0x80
 800e918:	4808      	ldr	r0, [pc, #32]	@ (800e93c <USBD_LL_Init+0x94>)
 800e91a:	f7f9 fd0e 	bl	800833a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e91e:	2240      	movs	r2, #64	@ 0x40
 800e920:	2100      	movs	r1, #0
 800e922:	4806      	ldr	r0, [pc, #24]	@ (800e93c <USBD_LL_Init+0x94>)
 800e924:	f7f9 fcc2 	bl	80082ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e928:	2280      	movs	r2, #128	@ 0x80
 800e92a:	2101      	movs	r1, #1
 800e92c:	4803      	ldr	r0, [pc, #12]	@ (800e93c <USBD_LL_Init+0x94>)
 800e92e:	f7f9 fcbd 	bl	80082ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20001a78 	.word	0x20001a78

0800e940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e956:	4618      	mov	r0, r3
 800e958:	f7f8 fbc8 	bl	80070ec <HAL_PCD_Start>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 f942 	bl	800ebec <USBD_Get_USB_Status>
 800e968:	4603      	mov	r3, r0
 800e96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b084      	sub	sp, #16
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	4608      	mov	r0, r1
 800e980:	4611      	mov	r1, r2
 800e982:	461a      	mov	r2, r3
 800e984:	4603      	mov	r3, r0
 800e986:	70fb      	strb	r3, [r7, #3]
 800e988:	460b      	mov	r3, r1
 800e98a:	70bb      	strb	r3, [r7, #2]
 800e98c:	4613      	mov	r3, r2
 800e98e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e99e:	78bb      	ldrb	r3, [r7, #2]
 800e9a0:	883a      	ldrh	r2, [r7, #0]
 800e9a2:	78f9      	ldrb	r1, [r7, #3]
 800e9a4:	f7f9 f89c 	bl	8007ae0 <HAL_PCD_EP_Open>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 f91c 	bl	800ebec <USBD_Get_USB_Status>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9dc:	78fa      	ldrb	r2, [r7, #3]
 800e9de:	4611      	mov	r1, r2
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f9 f8e7 	bl	8007bb4 <HAL_PCD_EP_Close>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f8fd 	bl	800ebec <USBD_Get_USB_Status>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea1a:	78fa      	ldrb	r2, [r7, #3]
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f9 f99f 	bl	8007d62 <HAL_PCD_EP_SetStall>
 800ea24:	4603      	mov	r3, r0
 800ea26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f000 f8de 	bl	800ebec <USBD_Get_USB_Status>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea58:	78fa      	ldrb	r2, [r7, #3]
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7f9 f9e3 	bl	8007e28 <HAL_PCD_EP_ClrStall>
 800ea62:	4603      	mov	r3, r0
 800ea64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f8bf 	bl	800ebec <USBD_Get_USB_Status>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	da0b      	bge.n	800eab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	00db      	lsls	r3, r3, #3
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	440b      	add	r3, r1
 800eaaa:	3316      	adds	r3, #22
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	e00b      	b.n	800eac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eab6:	68f9      	ldr	r1, [r7, #12]
 800eab8:	4613      	mov	r3, r2
 800eaba:	00db      	lsls	r3, r3, #3
 800eabc:	4413      	add	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	440b      	add	r3, r1
 800eac2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800eac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f8 ffd0 	bl	8007a98 <HAL_PCD_SetAddress>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f874 	bl	800ebec <USBD_Get_USB_Status>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb30:	7af9      	ldrb	r1, [r7, #11]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	f7f9 f8da 	bl	8007cee <HAL_PCD_EP_Transmit>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 f853 	bl	800ebec <USBD_Get_USB_Status>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	607a      	str	r2, [r7, #4]
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	460b      	mov	r3, r1
 800eb62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb72:	7af9      	ldrb	r1, [r7, #11]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	f7f9 f866 	bl	8007c48 <HAL_PCD_EP_Receive>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 f832 	bl	800ebec <USBD_Get_USB_Status>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b082      	sub	sp, #8
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eba8:	78fa      	ldrb	r2, [r7, #3]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f9 f886 	bl	8007cbe <HAL_PCD_EP_GetRxCount>
 800ebb2:	4603      	mov	r3, r0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ebc4:	4b03      	ldr	r3, [pc, #12]	@ (800ebd4 <USBD_static_malloc+0x18>)
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	20001f5c 	.word	0x20001f5c

0800ebd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]

}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d817      	bhi.n	800ec30 <USBD_Get_USB_Status+0x44>
 800ec00:	a201      	add	r2, pc, #4	@ (adr r2, 800ec08 <USBD_Get_USB_Status+0x1c>)
 800ec02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec06:	bf00      	nop
 800ec08:	0800ec19 	.word	0x0800ec19
 800ec0c:	0800ec1f 	.word	0x0800ec1f
 800ec10:	0800ec25 	.word	0x0800ec25
 800ec14:	0800ec2b 	.word	0x0800ec2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1c:	e00b      	b.n	800ec36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	73fb      	strb	r3, [r7, #15]
    break;
 800ec22:	e008      	b.n	800ec36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec24:	2301      	movs	r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]
    break;
 800ec28:	e005      	b.n	800ec36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2e:	e002      	b.n	800ec36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec30:	2303      	movs	r3, #3
 800ec32:	73fb      	strb	r3, [r7, #15]
    break;
 800ec34:	bf00      	nop
  }
  return usb_status;
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <__cxa_guard_acquire>:
 800ec44:	6802      	ldr	r2, [r0, #0]
 800ec46:	07d2      	lsls	r2, r2, #31
 800ec48:	4603      	mov	r3, r0
 800ec4a:	d405      	bmi.n	800ec58 <__cxa_guard_acquire+0x14>
 800ec4c:	7842      	ldrb	r2, [r0, #1]
 800ec4e:	b102      	cbz	r2, 800ec52 <__cxa_guard_acquire+0xe>
 800ec50:	deff      	udf	#255	@ 0xff
 800ec52:	2001      	movs	r0, #1
 800ec54:	7058      	strb	r0, [r3, #1]
 800ec56:	4770      	bx	lr
 800ec58:	2000      	movs	r0, #0
 800ec5a:	4770      	bx	lr

0800ec5c <__cxa_guard_release>:
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	6003      	str	r3, [r0, #0]
 800ec60:	4770      	bx	lr

0800ec62 <_Znwj>:
 800ec62:	2801      	cmp	r0, #1
 800ec64:	bf38      	it	cc
 800ec66:	2001      	movcc	r0, #1
 800ec68:	b510      	push	{r4, lr}
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 fb8b 	bl	800f388 <malloc>
 800ec72:	b100      	cbz	r0, 800ec76 <_Znwj+0x14>
 800ec74:	bd10      	pop	{r4, pc}
 800ec76:	f000 f805 	bl	800ec84 <_ZSt15get_new_handlerv>
 800ec7a:	b908      	cbnz	r0, 800ec80 <_Znwj+0x1e>
 800ec7c:	f000 fb7c 	bl	800f378 <abort>
 800ec80:	4780      	blx	r0
 800ec82:	e7f3      	b.n	800ec6c <_Znwj+0xa>

0800ec84 <_ZSt15get_new_handlerv>:
 800ec84:	4b02      	ldr	r3, [pc, #8]	@ (800ec90 <_ZSt15get_new_handlerv+0xc>)
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	f3bf 8f5b 	dmb	ish
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	2000217c 	.word	0x2000217c

0800ec94 <atan2>:
 800ec94:	f000 b908 	b.w	800eea8 <__ieee754_atan2>

0800ec98 <sqrt>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	ed2d 8b02 	vpush	{d8}
 800ec9e:	ec55 4b10 	vmov	r4, r5, d0
 800eca2:	f000 f825 	bl	800ecf0 <__ieee754_sqrt>
 800eca6:	4622      	mov	r2, r4
 800eca8:	462b      	mov	r3, r5
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4629      	mov	r1, r5
 800ecae:	eeb0 8a40 	vmov.f32	s16, s0
 800ecb2:	eef0 8a60 	vmov.f32	s17, s1
 800ecb6:	f7f1 ff41 	bl	8000b3c <__aeabi_dcmpun>
 800ecba:	b990      	cbnz	r0, 800ece2 <sqrt+0x4a>
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	f7f1 ff12 	bl	8000aec <__aeabi_dcmplt>
 800ecc8:	b158      	cbz	r0, 800ece2 <sqrt+0x4a>
 800ecca:	f001 fb1b 	bl	8010304 <__errno>
 800ecce:	2321      	movs	r3, #33	@ 0x21
 800ecd0:	6003      	str	r3, [r0, #0]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	4619      	mov	r1, r3
 800ecda:	f7f1 fdbf 	bl	800085c <__aeabi_ddiv>
 800ecde:	ec41 0b18 	vmov	d8, r0, r1
 800ece2:	eeb0 0a48 	vmov.f32	s0, s16
 800ece6:	eef0 0a68 	vmov.f32	s1, s17
 800ecea:	ecbd 8b02 	vpop	{d8}
 800ecee:	bd38      	pop	{r3, r4, r5, pc}

0800ecf0 <__ieee754_sqrt>:
 800ecf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	4a68      	ldr	r2, [pc, #416]	@ (800ee98 <__ieee754_sqrt+0x1a8>)
 800ecf6:	ec55 4b10 	vmov	r4, r5, d0
 800ecfa:	43aa      	bics	r2, r5
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	4621      	mov	r1, r4
 800ed00:	d110      	bne.n	800ed24 <__ieee754_sqrt+0x34>
 800ed02:	4622      	mov	r2, r4
 800ed04:	4620      	mov	r0, r4
 800ed06:	4629      	mov	r1, r5
 800ed08:	f7f1 fc7e 	bl	8000608 <__aeabi_dmul>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4620      	mov	r0, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	f7f1 fac2 	bl	800029c <__adddf3>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	ec45 4b10 	vmov	d0, r4, r5
 800ed20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	dc0e      	bgt.n	800ed46 <__ieee754_sqrt+0x56>
 800ed28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ed2c:	4322      	orrs	r2, r4
 800ed2e:	d0f5      	beq.n	800ed1c <__ieee754_sqrt+0x2c>
 800ed30:	b19d      	cbz	r5, 800ed5a <__ieee754_sqrt+0x6a>
 800ed32:	4622      	mov	r2, r4
 800ed34:	4620      	mov	r0, r4
 800ed36:	4629      	mov	r1, r5
 800ed38:	f7f1 faae 	bl	8000298 <__aeabi_dsub>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	f7f1 fd8c 	bl	800085c <__aeabi_ddiv>
 800ed44:	e7e8      	b.n	800ed18 <__ieee754_sqrt+0x28>
 800ed46:	152a      	asrs	r2, r5, #20
 800ed48:	d115      	bne.n	800ed76 <__ieee754_sqrt+0x86>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	e009      	b.n	800ed62 <__ieee754_sqrt+0x72>
 800ed4e:	0acb      	lsrs	r3, r1, #11
 800ed50:	3a15      	subs	r2, #21
 800ed52:	0549      	lsls	r1, r1, #21
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d0fa      	beq.n	800ed4e <__ieee754_sqrt+0x5e>
 800ed58:	e7f7      	b.n	800ed4a <__ieee754_sqrt+0x5a>
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	e7fa      	b.n	800ed54 <__ieee754_sqrt+0x64>
 800ed5e:	005b      	lsls	r3, r3, #1
 800ed60:	3001      	adds	r0, #1
 800ed62:	02dc      	lsls	r4, r3, #11
 800ed64:	d5fb      	bpl.n	800ed5e <__ieee754_sqrt+0x6e>
 800ed66:	1e44      	subs	r4, r0, #1
 800ed68:	1b12      	subs	r2, r2, r4
 800ed6a:	f1c0 0420 	rsb	r4, r0, #32
 800ed6e:	fa21 f404 	lsr.w	r4, r1, r4
 800ed72:	4323      	orrs	r3, r4
 800ed74:	4081      	lsls	r1, r0
 800ed76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ed7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed82:	07d2      	lsls	r2, r2, #31
 800ed84:	bf5c      	itt	pl
 800ed86:	005b      	lslpl	r3, r3, #1
 800ed88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ed8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed90:	bf58      	it	pl
 800ed92:	0049      	lslpl	r1, r1, #1
 800ed94:	2600      	movs	r6, #0
 800ed96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ed9a:	106d      	asrs	r5, r5, #1
 800ed9c:	0049      	lsls	r1, r1, #1
 800ed9e:	2016      	movs	r0, #22
 800eda0:	4632      	mov	r2, r6
 800eda2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eda6:	1917      	adds	r7, r2, r4
 800eda8:	429f      	cmp	r7, r3
 800edaa:	bfde      	ittt	le
 800edac:	193a      	addle	r2, r7, r4
 800edae:	1bdb      	suble	r3, r3, r7
 800edb0:	1936      	addle	r6, r6, r4
 800edb2:	0fcf      	lsrs	r7, r1, #31
 800edb4:	3801      	subs	r0, #1
 800edb6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800edba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800edbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800edc2:	d1f0      	bne.n	800eda6 <__ieee754_sqrt+0xb6>
 800edc4:	4604      	mov	r4, r0
 800edc6:	2720      	movs	r7, #32
 800edc8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800edcc:	429a      	cmp	r2, r3
 800edce:	eb00 0e0c 	add.w	lr, r0, ip
 800edd2:	db02      	blt.n	800edda <__ieee754_sqrt+0xea>
 800edd4:	d113      	bne.n	800edfe <__ieee754_sqrt+0x10e>
 800edd6:	458e      	cmp	lr, r1
 800edd8:	d811      	bhi.n	800edfe <__ieee754_sqrt+0x10e>
 800edda:	f1be 0f00 	cmp.w	lr, #0
 800edde:	eb0e 000c 	add.w	r0, lr, ip
 800ede2:	da42      	bge.n	800ee6a <__ieee754_sqrt+0x17a>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	db40      	blt.n	800ee6a <__ieee754_sqrt+0x17a>
 800ede8:	f102 0801 	add.w	r8, r2, #1
 800edec:	1a9b      	subs	r3, r3, r2
 800edee:	458e      	cmp	lr, r1
 800edf0:	bf88      	it	hi
 800edf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800edf6:	eba1 010e 	sub.w	r1, r1, lr
 800edfa:	4464      	add	r4, ip
 800edfc:	4642      	mov	r2, r8
 800edfe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ee02:	3f01      	subs	r7, #1
 800ee04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ee08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ee0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ee10:	d1dc      	bne.n	800edcc <__ieee754_sqrt+0xdc>
 800ee12:	4319      	orrs	r1, r3
 800ee14:	d01b      	beq.n	800ee4e <__ieee754_sqrt+0x15e>
 800ee16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ee9c <__ieee754_sqrt+0x1ac>
 800ee1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800eea0 <__ieee754_sqrt+0x1b0>
 800ee1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ee22:	e9db 2300 	ldrd	r2, r3, [fp]
 800ee26:	f7f1 fa37 	bl	8000298 <__aeabi_dsub>
 800ee2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4640      	mov	r0, r8
 800ee34:	4649      	mov	r1, r9
 800ee36:	f7f1 fe63 	bl	8000b00 <__aeabi_dcmple>
 800ee3a:	b140      	cbz	r0, 800ee4e <__ieee754_sqrt+0x15e>
 800ee3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ee40:	e9da 0100 	ldrd	r0, r1, [sl]
 800ee44:	e9db 2300 	ldrd	r2, r3, [fp]
 800ee48:	d111      	bne.n	800ee6e <__ieee754_sqrt+0x17e>
 800ee4a:	3601      	adds	r6, #1
 800ee4c:	463c      	mov	r4, r7
 800ee4e:	1072      	asrs	r2, r6, #1
 800ee50:	0863      	lsrs	r3, r4, #1
 800ee52:	07f1      	lsls	r1, r6, #31
 800ee54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ee58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ee5c:	bf48      	it	mi
 800ee5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ee62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ee66:	4618      	mov	r0, r3
 800ee68:	e756      	b.n	800ed18 <__ieee754_sqrt+0x28>
 800ee6a:	4690      	mov	r8, r2
 800ee6c:	e7be      	b.n	800edec <__ieee754_sqrt+0xfc>
 800ee6e:	f7f1 fa15 	bl	800029c <__adddf3>
 800ee72:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	4649      	mov	r1, r9
 800ee7e:	f7f1 fe35 	bl	8000aec <__aeabi_dcmplt>
 800ee82:	b120      	cbz	r0, 800ee8e <__ieee754_sqrt+0x19e>
 800ee84:	1ca0      	adds	r0, r4, #2
 800ee86:	bf08      	it	eq
 800ee88:	3601      	addeq	r6, #1
 800ee8a:	3402      	adds	r4, #2
 800ee8c:	e7df      	b.n	800ee4e <__ieee754_sqrt+0x15e>
 800ee8e:	1c63      	adds	r3, r4, #1
 800ee90:	f023 0401 	bic.w	r4, r3, #1
 800ee94:	e7db      	b.n	800ee4e <__ieee754_sqrt+0x15e>
 800ee96:	bf00      	nop
 800ee98:	7ff00000 	.word	0x7ff00000
 800ee9c:	20000120 	.word	0x20000120
 800eea0:	20000118 	.word	0x20000118
 800eea4:	00000000 	.word	0x00000000

0800eea8 <__ieee754_atan2>:
 800eea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeac:	ec57 6b11 	vmov	r6, r7, d1
 800eeb0:	4273      	negs	r3, r6
 800eeb2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f030 <__ieee754_atan2+0x188>
 800eeb6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800eeba:	4333      	orrs	r3, r6
 800eebc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800eec0:	4543      	cmp	r3, r8
 800eec2:	ec51 0b10 	vmov	r0, r1, d0
 800eec6:	4635      	mov	r5, r6
 800eec8:	d809      	bhi.n	800eede <__ieee754_atan2+0x36>
 800eeca:	4244      	negs	r4, r0
 800eecc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eed0:	4304      	orrs	r4, r0
 800eed2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800eed6:	4544      	cmp	r4, r8
 800eed8:	468e      	mov	lr, r1
 800eeda:	4681      	mov	r9, r0
 800eedc:	d907      	bls.n	800eeee <__ieee754_atan2+0x46>
 800eede:	4632      	mov	r2, r6
 800eee0:	463b      	mov	r3, r7
 800eee2:	f7f1 f9db 	bl	800029c <__adddf3>
 800eee6:	ec41 0b10 	vmov	d0, r0, r1
 800eeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800eef2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800eef6:	4334      	orrs	r4, r6
 800eef8:	d103      	bne.n	800ef02 <__ieee754_atan2+0x5a>
 800eefa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eefe:	f000 b89b 	b.w	800f038 <atan>
 800ef02:	17bc      	asrs	r4, r7, #30
 800ef04:	f004 0402 	and.w	r4, r4, #2
 800ef08:	ea53 0909 	orrs.w	r9, r3, r9
 800ef0c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ef10:	d107      	bne.n	800ef22 <__ieee754_atan2+0x7a>
 800ef12:	2c02      	cmp	r4, #2
 800ef14:	d05f      	beq.n	800efd6 <__ieee754_atan2+0x12e>
 800ef16:	2c03      	cmp	r4, #3
 800ef18:	d1e5      	bne.n	800eee6 <__ieee754_atan2+0x3e>
 800ef1a:	a141      	add	r1, pc, #260	@ (adr r1, 800f020 <__ieee754_atan2+0x178>)
 800ef1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef20:	e7e1      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800ef22:	4315      	orrs	r5, r2
 800ef24:	d106      	bne.n	800ef34 <__ieee754_atan2+0x8c>
 800ef26:	f1be 0f00 	cmp.w	lr, #0
 800ef2a:	da5f      	bge.n	800efec <__ieee754_atan2+0x144>
 800ef2c:	a13e      	add	r1, pc, #248	@ (adr r1, 800f028 <__ieee754_atan2+0x180>)
 800ef2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef32:	e7d8      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800ef34:	4542      	cmp	r2, r8
 800ef36:	d10f      	bne.n	800ef58 <__ieee754_atan2+0xb0>
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef3e:	d107      	bne.n	800ef50 <__ieee754_atan2+0xa8>
 800ef40:	2c02      	cmp	r4, #2
 800ef42:	d84c      	bhi.n	800efde <__ieee754_atan2+0x136>
 800ef44:	4b34      	ldr	r3, [pc, #208]	@ (800f018 <__ieee754_atan2+0x170>)
 800ef46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef4e:	e7ca      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800ef50:	2c02      	cmp	r4, #2
 800ef52:	d848      	bhi.n	800efe6 <__ieee754_atan2+0x13e>
 800ef54:	4b31      	ldr	r3, [pc, #196]	@ (800f01c <__ieee754_atan2+0x174>)
 800ef56:	e7f6      	b.n	800ef46 <__ieee754_atan2+0x9e>
 800ef58:	4543      	cmp	r3, r8
 800ef5a:	d0e4      	beq.n	800ef26 <__ieee754_atan2+0x7e>
 800ef5c:	1a9b      	subs	r3, r3, r2
 800ef5e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ef62:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef66:	da1e      	bge.n	800efa6 <__ieee754_atan2+0xfe>
 800ef68:	2f00      	cmp	r7, #0
 800ef6a:	da01      	bge.n	800ef70 <__ieee754_atan2+0xc8>
 800ef6c:	323c      	adds	r2, #60	@ 0x3c
 800ef6e:	db1e      	blt.n	800efae <__ieee754_atan2+0x106>
 800ef70:	4632      	mov	r2, r6
 800ef72:	463b      	mov	r3, r7
 800ef74:	f7f1 fc72 	bl	800085c <__aeabi_ddiv>
 800ef78:	ec41 0b10 	vmov	d0, r0, r1
 800ef7c:	f000 f9f4 	bl	800f368 <fabs>
 800ef80:	f000 f85a 	bl	800f038 <atan>
 800ef84:	ec51 0b10 	vmov	r0, r1, d0
 800ef88:	2c01      	cmp	r4, #1
 800ef8a:	d013      	beq.n	800efb4 <__ieee754_atan2+0x10c>
 800ef8c:	2c02      	cmp	r4, #2
 800ef8e:	d015      	beq.n	800efbc <__ieee754_atan2+0x114>
 800ef90:	2c00      	cmp	r4, #0
 800ef92:	d0a8      	beq.n	800eee6 <__ieee754_atan2+0x3e>
 800ef94:	a318      	add	r3, pc, #96	@ (adr r3, 800eff8 <__ieee754_atan2+0x150>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 f97d 	bl	8000298 <__aeabi_dsub>
 800ef9e:	a318      	add	r3, pc, #96	@ (adr r3, 800f000 <__ieee754_atan2+0x158>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	e014      	b.n	800efd0 <__ieee754_atan2+0x128>
 800efa6:	a118      	add	r1, pc, #96	@ (adr r1, 800f008 <__ieee754_atan2+0x160>)
 800efa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efac:	e7ec      	b.n	800ef88 <__ieee754_atan2+0xe0>
 800efae:	2000      	movs	r0, #0
 800efb0:	2100      	movs	r1, #0
 800efb2:	e7e9      	b.n	800ef88 <__ieee754_atan2+0xe0>
 800efb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800efb8:	4619      	mov	r1, r3
 800efba:	e794      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800efbc:	a30e      	add	r3, pc, #56	@ (adr r3, 800eff8 <__ieee754_atan2+0x150>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f7f1 f969 	bl	8000298 <__aeabi_dsub>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	a10d      	add	r1, pc, #52	@ (adr r1, 800f000 <__ieee754_atan2+0x158>)
 800efcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efd0:	f7f1 f962 	bl	8000298 <__aeabi_dsub>
 800efd4:	e787      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800efd6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f000 <__ieee754_atan2+0x158>)
 800efd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efdc:	e783      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800efde:	a10c      	add	r1, pc, #48	@ (adr r1, 800f010 <__ieee754_atan2+0x168>)
 800efe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efe4:	e77f      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800efe6:	2000      	movs	r0, #0
 800efe8:	2100      	movs	r1, #0
 800efea:	e77c      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800efec:	a106      	add	r1, pc, #24	@ (adr r1, 800f008 <__ieee754_atan2+0x160>)
 800efee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eff2:	e778      	b.n	800eee6 <__ieee754_atan2+0x3e>
 800eff4:	f3af 8000 	nop.w
 800eff8:	33145c07 	.word	0x33145c07
 800effc:	3ca1a626 	.word	0x3ca1a626
 800f000:	54442d18 	.word	0x54442d18
 800f004:	400921fb 	.word	0x400921fb
 800f008:	54442d18 	.word	0x54442d18
 800f00c:	3ff921fb 	.word	0x3ff921fb
 800f010:	54442d18 	.word	0x54442d18
 800f014:	3fe921fb 	.word	0x3fe921fb
 800f018:	08011f60 	.word	0x08011f60
 800f01c:	08011f48 	.word	0x08011f48
 800f020:	54442d18 	.word	0x54442d18
 800f024:	c00921fb 	.word	0xc00921fb
 800f028:	54442d18 	.word	0x54442d18
 800f02c:	bff921fb 	.word	0xbff921fb
 800f030:	7ff00000 	.word	0x7ff00000
 800f034:	00000000 	.word	0x00000000

0800f038 <atan>:
 800f038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03c:	ec55 4b10 	vmov	r4, r5, d0
 800f040:	4bbf      	ldr	r3, [pc, #764]	@ (800f340 <atan+0x308>)
 800f042:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f046:	429e      	cmp	r6, r3
 800f048:	46ab      	mov	fp, r5
 800f04a:	d918      	bls.n	800f07e <atan+0x46>
 800f04c:	4bbd      	ldr	r3, [pc, #756]	@ (800f344 <atan+0x30c>)
 800f04e:	429e      	cmp	r6, r3
 800f050:	d801      	bhi.n	800f056 <atan+0x1e>
 800f052:	d109      	bne.n	800f068 <atan+0x30>
 800f054:	b144      	cbz	r4, 800f068 <atan+0x30>
 800f056:	4622      	mov	r2, r4
 800f058:	462b      	mov	r3, r5
 800f05a:	4620      	mov	r0, r4
 800f05c:	4629      	mov	r1, r5
 800f05e:	f7f1 f91d 	bl	800029c <__adddf3>
 800f062:	4604      	mov	r4, r0
 800f064:	460d      	mov	r5, r1
 800f066:	e006      	b.n	800f076 <atan+0x3e>
 800f068:	f1bb 0f00 	cmp.w	fp, #0
 800f06c:	f340 812b 	ble.w	800f2c6 <atan+0x28e>
 800f070:	a597      	add	r5, pc, #604	@ (adr r5, 800f2d0 <atan+0x298>)
 800f072:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f076:	ec45 4b10 	vmov	d0, r4, r5
 800f07a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07e:	4bb2      	ldr	r3, [pc, #712]	@ (800f348 <atan+0x310>)
 800f080:	429e      	cmp	r6, r3
 800f082:	d813      	bhi.n	800f0ac <atan+0x74>
 800f084:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f088:	429e      	cmp	r6, r3
 800f08a:	d80c      	bhi.n	800f0a6 <atan+0x6e>
 800f08c:	a392      	add	r3, pc, #584	@ (adr r3, 800f2d8 <atan+0x2a0>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	f7f1 f901 	bl	800029c <__adddf3>
 800f09a:	4bac      	ldr	r3, [pc, #688]	@ (800f34c <atan+0x314>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	f7f1 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d1e7      	bne.n	800f076 <atan+0x3e>
 800f0a6:	f04f 3aff 	mov.w	sl, #4294967295
 800f0aa:	e029      	b.n	800f100 <atan+0xc8>
 800f0ac:	f000 f95c 	bl	800f368 <fabs>
 800f0b0:	4ba7      	ldr	r3, [pc, #668]	@ (800f350 <atan+0x318>)
 800f0b2:	429e      	cmp	r6, r3
 800f0b4:	ec55 4b10 	vmov	r4, r5, d0
 800f0b8:	f200 80bc 	bhi.w	800f234 <atan+0x1fc>
 800f0bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f0c0:	429e      	cmp	r6, r3
 800f0c2:	f200 809e 	bhi.w	800f202 <atan+0x1ca>
 800f0c6:	4622      	mov	r2, r4
 800f0c8:	462b      	mov	r3, r5
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	f7f1 f8e5 	bl	800029c <__adddf3>
 800f0d2:	4b9e      	ldr	r3, [pc, #632]	@ (800f34c <atan+0x314>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f7f1 f8df 	bl	8000298 <__aeabi_dsub>
 800f0da:	2200      	movs	r2, #0
 800f0dc:	4606      	mov	r6, r0
 800f0de:	460f      	mov	r7, r1
 800f0e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f7f1 f8d8 	bl	800029c <__adddf3>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	f7f1 fbb2 	bl	800085c <__aeabi_ddiv>
 800f0f8:	f04f 0a00 	mov.w	sl, #0
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	460d      	mov	r5, r1
 800f100:	4622      	mov	r2, r4
 800f102:	462b      	mov	r3, r5
 800f104:	4620      	mov	r0, r4
 800f106:	4629      	mov	r1, r5
 800f108:	f7f1 fa7e 	bl	8000608 <__aeabi_dmul>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4680      	mov	r8, r0
 800f112:	4689      	mov	r9, r1
 800f114:	f7f1 fa78 	bl	8000608 <__aeabi_dmul>
 800f118:	a371      	add	r3, pc, #452	@ (adr r3, 800f2e0 <atan+0x2a8>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	4606      	mov	r6, r0
 800f120:	460f      	mov	r7, r1
 800f122:	f7f1 fa71 	bl	8000608 <__aeabi_dmul>
 800f126:	a370      	add	r3, pc, #448	@ (adr r3, 800f2e8 <atan+0x2b0>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8b6 	bl	800029c <__adddf3>
 800f130:	4632      	mov	r2, r6
 800f132:	463b      	mov	r3, r7
 800f134:	f7f1 fa68 	bl	8000608 <__aeabi_dmul>
 800f138:	a36d      	add	r3, pc, #436	@ (adr r3, 800f2f0 <atan+0x2b8>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 f8ad 	bl	800029c <__adddf3>
 800f142:	4632      	mov	r2, r6
 800f144:	463b      	mov	r3, r7
 800f146:	f7f1 fa5f 	bl	8000608 <__aeabi_dmul>
 800f14a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f2f8 <atan+0x2c0>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	f7f1 f8a4 	bl	800029c <__adddf3>
 800f154:	4632      	mov	r2, r6
 800f156:	463b      	mov	r3, r7
 800f158:	f7f1 fa56 	bl	8000608 <__aeabi_dmul>
 800f15c:	a368      	add	r3, pc, #416	@ (adr r3, 800f300 <atan+0x2c8>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f7f1 f89b 	bl	800029c <__adddf3>
 800f166:	4632      	mov	r2, r6
 800f168:	463b      	mov	r3, r7
 800f16a:	f7f1 fa4d 	bl	8000608 <__aeabi_dmul>
 800f16e:	a366      	add	r3, pc, #408	@ (adr r3, 800f308 <atan+0x2d0>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	f7f1 f892 	bl	800029c <__adddf3>
 800f178:	4642      	mov	r2, r8
 800f17a:	464b      	mov	r3, r9
 800f17c:	f7f1 fa44 	bl	8000608 <__aeabi_dmul>
 800f180:	a363      	add	r3, pc, #396	@ (adr r3, 800f310 <atan+0x2d8>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	4680      	mov	r8, r0
 800f188:	4689      	mov	r9, r1
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	f7f1 fa3b 	bl	8000608 <__aeabi_dmul>
 800f192:	a361      	add	r3, pc, #388	@ (adr r3, 800f318 <atan+0x2e0>)
 800f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f198:	f7f1 f87e 	bl	8000298 <__aeabi_dsub>
 800f19c:	4632      	mov	r2, r6
 800f19e:	463b      	mov	r3, r7
 800f1a0:	f7f1 fa32 	bl	8000608 <__aeabi_dmul>
 800f1a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f320 <atan+0x2e8>)
 800f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1aa:	f7f1 f875 	bl	8000298 <__aeabi_dsub>
 800f1ae:	4632      	mov	r2, r6
 800f1b0:	463b      	mov	r3, r7
 800f1b2:	f7f1 fa29 	bl	8000608 <__aeabi_dmul>
 800f1b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800f328 <atan+0x2f0>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	f7f1 f86c 	bl	8000298 <__aeabi_dsub>
 800f1c0:	4632      	mov	r2, r6
 800f1c2:	463b      	mov	r3, r7
 800f1c4:	f7f1 fa20 	bl	8000608 <__aeabi_dmul>
 800f1c8:	a359      	add	r3, pc, #356	@ (adr r3, 800f330 <atan+0x2f8>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	f7f1 f863 	bl	8000298 <__aeabi_dsub>
 800f1d2:	4632      	mov	r2, r6
 800f1d4:	463b      	mov	r3, r7
 800f1d6:	f7f1 fa17 	bl	8000608 <__aeabi_dmul>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	4640      	mov	r0, r8
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	f7f1 f85b 	bl	800029c <__adddf3>
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	f7f1 fa0d 	bl	8000608 <__aeabi_dmul>
 800f1ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	d148      	bne.n	800f28a <atan+0x252>
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	f7f1 f84c 	bl	8000298 <__aeabi_dsub>
 800f200:	e72f      	b.n	800f062 <atan+0x2a>
 800f202:	4b52      	ldr	r3, [pc, #328]	@ (800f34c <atan+0x314>)
 800f204:	2200      	movs	r2, #0
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	f7f1 f845 	bl	8000298 <__aeabi_dsub>
 800f20e:	4b4f      	ldr	r3, [pc, #316]	@ (800f34c <atan+0x314>)
 800f210:	4606      	mov	r6, r0
 800f212:	460f      	mov	r7, r1
 800f214:	2200      	movs	r2, #0
 800f216:	4620      	mov	r0, r4
 800f218:	4629      	mov	r1, r5
 800f21a:	f7f1 f83f 	bl	800029c <__adddf3>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 fb19 	bl	800085c <__aeabi_ddiv>
 800f22a:	f04f 0a01 	mov.w	sl, #1
 800f22e:	4604      	mov	r4, r0
 800f230:	460d      	mov	r5, r1
 800f232:	e765      	b.n	800f100 <atan+0xc8>
 800f234:	4b47      	ldr	r3, [pc, #284]	@ (800f354 <atan+0x31c>)
 800f236:	429e      	cmp	r6, r3
 800f238:	d21c      	bcs.n	800f274 <atan+0x23c>
 800f23a:	4b47      	ldr	r3, [pc, #284]	@ (800f358 <atan+0x320>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	4620      	mov	r0, r4
 800f240:	4629      	mov	r1, r5
 800f242:	f7f1 f829 	bl	8000298 <__aeabi_dsub>
 800f246:	4b44      	ldr	r3, [pc, #272]	@ (800f358 <atan+0x320>)
 800f248:	4606      	mov	r6, r0
 800f24a:	460f      	mov	r7, r1
 800f24c:	2200      	movs	r2, #0
 800f24e:	4620      	mov	r0, r4
 800f250:	4629      	mov	r1, r5
 800f252:	f7f1 f9d9 	bl	8000608 <__aeabi_dmul>
 800f256:	4b3d      	ldr	r3, [pc, #244]	@ (800f34c <atan+0x314>)
 800f258:	2200      	movs	r2, #0
 800f25a:	f7f1 f81f 	bl	800029c <__adddf3>
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	4630      	mov	r0, r6
 800f264:	4639      	mov	r1, r7
 800f266:	f7f1 faf9 	bl	800085c <__aeabi_ddiv>
 800f26a:	f04f 0a02 	mov.w	sl, #2
 800f26e:	4604      	mov	r4, r0
 800f270:	460d      	mov	r5, r1
 800f272:	e745      	b.n	800f100 <atan+0xc8>
 800f274:	4622      	mov	r2, r4
 800f276:	462b      	mov	r3, r5
 800f278:	4938      	ldr	r1, [pc, #224]	@ (800f35c <atan+0x324>)
 800f27a:	2000      	movs	r0, #0
 800f27c:	f7f1 faee 	bl	800085c <__aeabi_ddiv>
 800f280:	f04f 0a03 	mov.w	sl, #3
 800f284:	4604      	mov	r4, r0
 800f286:	460d      	mov	r5, r1
 800f288:	e73a      	b.n	800f100 <atan+0xc8>
 800f28a:	4b35      	ldr	r3, [pc, #212]	@ (800f360 <atan+0x328>)
 800f28c:	4e35      	ldr	r6, [pc, #212]	@ (800f364 <atan+0x32c>)
 800f28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	f7f0 ffff 	bl	8000298 <__aeabi_dsub>
 800f29a:	4622      	mov	r2, r4
 800f29c:	462b      	mov	r3, r5
 800f29e:	f7f0 fffb 	bl	8000298 <__aeabi_dsub>
 800f2a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f2ae:	f7f0 fff3 	bl	8000298 <__aeabi_dsub>
 800f2b2:	f1bb 0f00 	cmp.w	fp, #0
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	460d      	mov	r5, r1
 800f2ba:	f6bf aedc 	bge.w	800f076 <atan+0x3e>
 800f2be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2c2:	461d      	mov	r5, r3
 800f2c4:	e6d7      	b.n	800f076 <atan+0x3e>
 800f2c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800f338 <atan+0x300>)
 800f2c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2cc:	e6d3      	b.n	800f076 <atan+0x3e>
 800f2ce:	bf00      	nop
 800f2d0:	54442d18 	.word	0x54442d18
 800f2d4:	3ff921fb 	.word	0x3ff921fb
 800f2d8:	8800759c 	.word	0x8800759c
 800f2dc:	7e37e43c 	.word	0x7e37e43c
 800f2e0:	e322da11 	.word	0xe322da11
 800f2e4:	3f90ad3a 	.word	0x3f90ad3a
 800f2e8:	24760deb 	.word	0x24760deb
 800f2ec:	3fa97b4b 	.word	0x3fa97b4b
 800f2f0:	a0d03d51 	.word	0xa0d03d51
 800f2f4:	3fb10d66 	.word	0x3fb10d66
 800f2f8:	c54c206e 	.word	0xc54c206e
 800f2fc:	3fb745cd 	.word	0x3fb745cd
 800f300:	920083ff 	.word	0x920083ff
 800f304:	3fc24924 	.word	0x3fc24924
 800f308:	5555550d 	.word	0x5555550d
 800f30c:	3fd55555 	.word	0x3fd55555
 800f310:	2c6a6c2f 	.word	0x2c6a6c2f
 800f314:	bfa2b444 	.word	0xbfa2b444
 800f318:	52defd9a 	.word	0x52defd9a
 800f31c:	3fadde2d 	.word	0x3fadde2d
 800f320:	af749a6d 	.word	0xaf749a6d
 800f324:	3fb3b0f2 	.word	0x3fb3b0f2
 800f328:	fe231671 	.word	0xfe231671
 800f32c:	3fbc71c6 	.word	0x3fbc71c6
 800f330:	9998ebc4 	.word	0x9998ebc4
 800f334:	3fc99999 	.word	0x3fc99999
 800f338:	54442d18 	.word	0x54442d18
 800f33c:	bff921fb 	.word	0xbff921fb
 800f340:	440fffff 	.word	0x440fffff
 800f344:	7ff00000 	.word	0x7ff00000
 800f348:	3fdbffff 	.word	0x3fdbffff
 800f34c:	3ff00000 	.word	0x3ff00000
 800f350:	3ff2ffff 	.word	0x3ff2ffff
 800f354:	40038000 	.word	0x40038000
 800f358:	3ff80000 	.word	0x3ff80000
 800f35c:	bff00000 	.word	0xbff00000
 800f360:	08011f78 	.word	0x08011f78
 800f364:	08011f98 	.word	0x08011f98

0800f368 <fabs>:
 800f368:	ec51 0b10 	vmov	r0, r1, d0
 800f36c:	4602      	mov	r2, r0
 800f36e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f372:	ec43 2b10 	vmov	d0, r2, r3
 800f376:	4770      	bx	lr

0800f378 <abort>:
 800f378:	b508      	push	{r3, lr}
 800f37a:	2006      	movs	r0, #6
 800f37c:	f000 ff4c 	bl	8010218 <raise>
 800f380:	2001      	movs	r0, #1
 800f382:	f7f3 fbe5 	bl	8002b50 <_exit>
	...

0800f388 <malloc>:
 800f388:	4b02      	ldr	r3, [pc, #8]	@ (800f394 <malloc+0xc>)
 800f38a:	4601      	mov	r1, r0
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	f000 b825 	b.w	800f3dc <_malloc_r>
 800f392:	bf00      	nop
 800f394:	20000134 	.word	0x20000134

0800f398 <sbrk_aligned>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4e0f      	ldr	r6, [pc, #60]	@ (800f3d8 <sbrk_aligned+0x40>)
 800f39c:	460c      	mov	r4, r1
 800f39e:	6831      	ldr	r1, [r6, #0]
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	b911      	cbnz	r1, 800f3aa <sbrk_aligned+0x12>
 800f3a4:	f000 ff8c 	bl	80102c0 <_sbrk_r>
 800f3a8:	6030      	str	r0, [r6, #0]
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f000 ff87 	bl	80102c0 <_sbrk_r>
 800f3b2:	1c43      	adds	r3, r0, #1
 800f3b4:	d103      	bne.n	800f3be <sbrk_aligned+0x26>
 800f3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	1cc4      	adds	r4, r0, #3
 800f3c0:	f024 0403 	bic.w	r4, r4, #3
 800f3c4:	42a0      	cmp	r0, r4
 800f3c6:	d0f8      	beq.n	800f3ba <sbrk_aligned+0x22>
 800f3c8:	1a21      	subs	r1, r4, r0
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 ff78 	bl	80102c0 <_sbrk_r>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d1f2      	bne.n	800f3ba <sbrk_aligned+0x22>
 800f3d4:	e7ef      	b.n	800f3b6 <sbrk_aligned+0x1e>
 800f3d6:	bf00      	nop
 800f3d8:	20002180 	.word	0x20002180

0800f3dc <_malloc_r>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	1ccd      	adds	r5, r1, #3
 800f3e2:	f025 0503 	bic.w	r5, r5, #3
 800f3e6:	3508      	adds	r5, #8
 800f3e8:	2d0c      	cmp	r5, #12
 800f3ea:	bf38      	it	cc
 800f3ec:	250c      	movcc	r5, #12
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	db01      	blt.n	800f3f8 <_malloc_r+0x1c>
 800f3f4:	42a9      	cmp	r1, r5
 800f3f6:	d904      	bls.n	800f402 <_malloc_r+0x26>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	6033      	str	r3, [r6, #0]
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4d8 <_malloc_r+0xfc>
 800f406:	f000 f869 	bl	800f4dc <__malloc_lock>
 800f40a:	f8d8 3000 	ldr.w	r3, [r8]
 800f40e:	461c      	mov	r4, r3
 800f410:	bb44      	cbnz	r4, 800f464 <_malloc_r+0x88>
 800f412:	4629      	mov	r1, r5
 800f414:	4630      	mov	r0, r6
 800f416:	f7ff ffbf 	bl	800f398 <sbrk_aligned>
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	4604      	mov	r4, r0
 800f41e:	d158      	bne.n	800f4d2 <_malloc_r+0xf6>
 800f420:	f8d8 4000 	ldr.w	r4, [r8]
 800f424:	4627      	mov	r7, r4
 800f426:	2f00      	cmp	r7, #0
 800f428:	d143      	bne.n	800f4b2 <_malloc_r+0xd6>
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	d04b      	beq.n	800f4c6 <_malloc_r+0xea>
 800f42e:	6823      	ldr	r3, [r4, #0]
 800f430:	4639      	mov	r1, r7
 800f432:	4630      	mov	r0, r6
 800f434:	eb04 0903 	add.w	r9, r4, r3
 800f438:	f000 ff42 	bl	80102c0 <_sbrk_r>
 800f43c:	4581      	cmp	r9, r0
 800f43e:	d142      	bne.n	800f4c6 <_malloc_r+0xea>
 800f440:	6821      	ldr	r1, [r4, #0]
 800f442:	1a6d      	subs	r5, r5, r1
 800f444:	4629      	mov	r1, r5
 800f446:	4630      	mov	r0, r6
 800f448:	f7ff ffa6 	bl	800f398 <sbrk_aligned>
 800f44c:	3001      	adds	r0, #1
 800f44e:	d03a      	beq.n	800f4c6 <_malloc_r+0xea>
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	442b      	add	r3, r5
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	f8d8 3000 	ldr.w	r3, [r8]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	bb62      	cbnz	r2, 800f4b8 <_malloc_r+0xdc>
 800f45e:	f8c8 7000 	str.w	r7, [r8]
 800f462:	e00f      	b.n	800f484 <_malloc_r+0xa8>
 800f464:	6822      	ldr	r2, [r4, #0]
 800f466:	1b52      	subs	r2, r2, r5
 800f468:	d420      	bmi.n	800f4ac <_malloc_r+0xd0>
 800f46a:	2a0b      	cmp	r2, #11
 800f46c:	d917      	bls.n	800f49e <_malloc_r+0xc2>
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	42a3      	cmp	r3, r4
 800f472:	6025      	str	r5, [r4, #0]
 800f474:	bf18      	it	ne
 800f476:	6059      	strne	r1, [r3, #4]
 800f478:	6863      	ldr	r3, [r4, #4]
 800f47a:	bf08      	it	eq
 800f47c:	f8c8 1000 	streq.w	r1, [r8]
 800f480:	5162      	str	r2, [r4, r5]
 800f482:	604b      	str	r3, [r1, #4]
 800f484:	4630      	mov	r0, r6
 800f486:	f000 f82f 	bl	800f4e8 <__malloc_unlock>
 800f48a:	f104 000b 	add.w	r0, r4, #11
 800f48e:	1d23      	adds	r3, r4, #4
 800f490:	f020 0007 	bic.w	r0, r0, #7
 800f494:	1ac2      	subs	r2, r0, r3
 800f496:	bf1c      	itt	ne
 800f498:	1a1b      	subne	r3, r3, r0
 800f49a:	50a3      	strne	r3, [r4, r2]
 800f49c:	e7af      	b.n	800f3fe <_malloc_r+0x22>
 800f49e:	6862      	ldr	r2, [r4, #4]
 800f4a0:	42a3      	cmp	r3, r4
 800f4a2:	bf0c      	ite	eq
 800f4a4:	f8c8 2000 	streq.w	r2, [r8]
 800f4a8:	605a      	strne	r2, [r3, #4]
 800f4aa:	e7eb      	b.n	800f484 <_malloc_r+0xa8>
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	6864      	ldr	r4, [r4, #4]
 800f4b0:	e7ae      	b.n	800f410 <_malloc_r+0x34>
 800f4b2:	463c      	mov	r4, r7
 800f4b4:	687f      	ldr	r7, [r7, #4]
 800f4b6:	e7b6      	b.n	800f426 <_malloc_r+0x4a>
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	42a3      	cmp	r3, r4
 800f4be:	d1fb      	bne.n	800f4b8 <_malloc_r+0xdc>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	6053      	str	r3, [r2, #4]
 800f4c4:	e7de      	b.n	800f484 <_malloc_r+0xa8>
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	6033      	str	r3, [r6, #0]
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 f80c 	bl	800f4e8 <__malloc_unlock>
 800f4d0:	e794      	b.n	800f3fc <_malloc_r+0x20>
 800f4d2:	6005      	str	r5, [r0, #0]
 800f4d4:	e7d6      	b.n	800f484 <_malloc_r+0xa8>
 800f4d6:	bf00      	nop
 800f4d8:	20002184 	.word	0x20002184

0800f4dc <__malloc_lock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	@ (800f4e4 <__malloc_lock+0x8>)
 800f4de:	f000 bf3c 	b.w	801035a <__retarget_lock_acquire_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	200022c8 	.word	0x200022c8

0800f4e8 <__malloc_unlock>:
 800f4e8:	4801      	ldr	r0, [pc, #4]	@ (800f4f0 <__malloc_unlock+0x8>)
 800f4ea:	f000 bf37 	b.w	801035c <__retarget_lock_release_recursive>
 800f4ee:	bf00      	nop
 800f4f0:	200022c8 	.word	0x200022c8

0800f4f4 <__cvt>:
 800f4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	ec57 6b10 	vmov	r6, r7, d0
 800f4fc:	2f00      	cmp	r7, #0
 800f4fe:	460c      	mov	r4, r1
 800f500:	4619      	mov	r1, r3
 800f502:	463b      	mov	r3, r7
 800f504:	bfbb      	ittet	lt
 800f506:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f50a:	461f      	movlt	r7, r3
 800f50c:	2300      	movge	r3, #0
 800f50e:	232d      	movlt	r3, #45	@ 0x2d
 800f510:	700b      	strb	r3, [r1, #0]
 800f512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f514:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f518:	4691      	mov	r9, r2
 800f51a:	f023 0820 	bic.w	r8, r3, #32
 800f51e:	bfbc      	itt	lt
 800f520:	4632      	movlt	r2, r6
 800f522:	4616      	movlt	r6, r2
 800f524:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f528:	d005      	beq.n	800f536 <__cvt+0x42>
 800f52a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f52e:	d100      	bne.n	800f532 <__cvt+0x3e>
 800f530:	3401      	adds	r4, #1
 800f532:	2102      	movs	r1, #2
 800f534:	e000      	b.n	800f538 <__cvt+0x44>
 800f536:	2103      	movs	r1, #3
 800f538:	ab03      	add	r3, sp, #12
 800f53a:	9301      	str	r3, [sp, #4]
 800f53c:	ab02      	add	r3, sp, #8
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	ec47 6b10 	vmov	d0, r6, r7
 800f544:	4653      	mov	r3, sl
 800f546:	4622      	mov	r2, r4
 800f548:	f000 ff92 	bl	8010470 <_dtoa_r>
 800f54c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f550:	4605      	mov	r5, r0
 800f552:	d119      	bne.n	800f588 <__cvt+0x94>
 800f554:	f019 0f01 	tst.w	r9, #1
 800f558:	d00e      	beq.n	800f578 <__cvt+0x84>
 800f55a:	eb00 0904 	add.w	r9, r0, r4
 800f55e:	2200      	movs	r2, #0
 800f560:	2300      	movs	r3, #0
 800f562:	4630      	mov	r0, r6
 800f564:	4639      	mov	r1, r7
 800f566:	f7f1 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f56a:	b108      	cbz	r0, 800f570 <__cvt+0x7c>
 800f56c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f570:	2230      	movs	r2, #48	@ 0x30
 800f572:	9b03      	ldr	r3, [sp, #12]
 800f574:	454b      	cmp	r3, r9
 800f576:	d31e      	bcc.n	800f5b6 <__cvt+0xc2>
 800f578:	9b03      	ldr	r3, [sp, #12]
 800f57a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f57c:	1b5b      	subs	r3, r3, r5
 800f57e:	4628      	mov	r0, r5
 800f580:	6013      	str	r3, [r2, #0]
 800f582:	b004      	add	sp, #16
 800f584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f58c:	eb00 0904 	add.w	r9, r0, r4
 800f590:	d1e5      	bne.n	800f55e <__cvt+0x6a>
 800f592:	7803      	ldrb	r3, [r0, #0]
 800f594:	2b30      	cmp	r3, #48	@ 0x30
 800f596:	d10a      	bne.n	800f5ae <__cvt+0xba>
 800f598:	2200      	movs	r2, #0
 800f59a:	2300      	movs	r3, #0
 800f59c:	4630      	mov	r0, r6
 800f59e:	4639      	mov	r1, r7
 800f5a0:	f7f1 fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5a4:	b918      	cbnz	r0, 800f5ae <__cvt+0xba>
 800f5a6:	f1c4 0401 	rsb	r4, r4, #1
 800f5aa:	f8ca 4000 	str.w	r4, [sl]
 800f5ae:	f8da 3000 	ldr.w	r3, [sl]
 800f5b2:	4499      	add	r9, r3
 800f5b4:	e7d3      	b.n	800f55e <__cvt+0x6a>
 800f5b6:	1c59      	adds	r1, r3, #1
 800f5b8:	9103      	str	r1, [sp, #12]
 800f5ba:	701a      	strb	r2, [r3, #0]
 800f5bc:	e7d9      	b.n	800f572 <__cvt+0x7e>

0800f5be <__exponent>:
 800f5be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5c0:	2900      	cmp	r1, #0
 800f5c2:	bfba      	itte	lt
 800f5c4:	4249      	neglt	r1, r1
 800f5c6:	232d      	movlt	r3, #45	@ 0x2d
 800f5c8:	232b      	movge	r3, #43	@ 0x2b
 800f5ca:	2909      	cmp	r1, #9
 800f5cc:	7002      	strb	r2, [r0, #0]
 800f5ce:	7043      	strb	r3, [r0, #1]
 800f5d0:	dd29      	ble.n	800f626 <__exponent+0x68>
 800f5d2:	f10d 0307 	add.w	r3, sp, #7
 800f5d6:	461d      	mov	r5, r3
 800f5d8:	270a      	movs	r7, #10
 800f5da:	461a      	mov	r2, r3
 800f5dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800f5e0:	fb07 1416 	mls	r4, r7, r6, r1
 800f5e4:	3430      	adds	r4, #48	@ 0x30
 800f5e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f5ea:	460c      	mov	r4, r1
 800f5ec:	2c63      	cmp	r4, #99	@ 0x63
 800f5ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	dcf1      	bgt.n	800f5da <__exponent+0x1c>
 800f5f6:	3130      	adds	r1, #48	@ 0x30
 800f5f8:	1e94      	subs	r4, r2, #2
 800f5fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f5fe:	1c41      	adds	r1, r0, #1
 800f600:	4623      	mov	r3, r4
 800f602:	42ab      	cmp	r3, r5
 800f604:	d30a      	bcc.n	800f61c <__exponent+0x5e>
 800f606:	f10d 0309 	add.w	r3, sp, #9
 800f60a:	1a9b      	subs	r3, r3, r2
 800f60c:	42ac      	cmp	r4, r5
 800f60e:	bf88      	it	hi
 800f610:	2300      	movhi	r3, #0
 800f612:	3302      	adds	r3, #2
 800f614:	4403      	add	r3, r0
 800f616:	1a18      	subs	r0, r3, r0
 800f618:	b003      	add	sp, #12
 800f61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f620:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f624:	e7ed      	b.n	800f602 <__exponent+0x44>
 800f626:	2330      	movs	r3, #48	@ 0x30
 800f628:	3130      	adds	r1, #48	@ 0x30
 800f62a:	7083      	strb	r3, [r0, #2]
 800f62c:	70c1      	strb	r1, [r0, #3]
 800f62e:	1d03      	adds	r3, r0, #4
 800f630:	e7f1      	b.n	800f616 <__exponent+0x58>
	...

0800f634 <_printf_float>:
 800f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	b08d      	sub	sp, #52	@ 0x34
 800f63a:	460c      	mov	r4, r1
 800f63c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f640:	4616      	mov	r6, r2
 800f642:	461f      	mov	r7, r3
 800f644:	4605      	mov	r5, r0
 800f646:	f000 fdef 	bl	8010228 <_localeconv_r>
 800f64a:	6803      	ldr	r3, [r0, #0]
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f0 fe16 	bl	8000280 <strlen>
 800f654:	2300      	movs	r3, #0
 800f656:	930a      	str	r3, [sp, #40]	@ 0x28
 800f658:	f8d8 3000 	ldr.w	r3, [r8]
 800f65c:	9005      	str	r0, [sp, #20]
 800f65e:	3307      	adds	r3, #7
 800f660:	f023 0307 	bic.w	r3, r3, #7
 800f664:	f103 0208 	add.w	r2, r3, #8
 800f668:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f66c:	f8d4 b000 	ldr.w	fp, [r4]
 800f670:	f8c8 2000 	str.w	r2, [r8]
 800f674:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f678:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f67c:	9307      	str	r3, [sp, #28]
 800f67e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f682:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f68a:	4b9c      	ldr	r3, [pc, #624]	@ (800f8fc <_printf_float+0x2c8>)
 800f68c:	f04f 32ff 	mov.w	r2, #4294967295
 800f690:	f7f1 fa54 	bl	8000b3c <__aeabi_dcmpun>
 800f694:	bb70      	cbnz	r0, 800f6f4 <_printf_float+0xc0>
 800f696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f69a:	4b98      	ldr	r3, [pc, #608]	@ (800f8fc <_printf_float+0x2c8>)
 800f69c:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a0:	f7f1 fa2e 	bl	8000b00 <__aeabi_dcmple>
 800f6a4:	bb30      	cbnz	r0, 800f6f4 <_printf_float+0xc0>
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	4649      	mov	r1, r9
 800f6ae:	f7f1 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800f6b2:	b110      	cbz	r0, 800f6ba <_printf_float+0x86>
 800f6b4:	232d      	movs	r3, #45	@ 0x2d
 800f6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6ba:	4a91      	ldr	r2, [pc, #580]	@ (800f900 <_printf_float+0x2cc>)
 800f6bc:	4b91      	ldr	r3, [pc, #580]	@ (800f904 <_printf_float+0x2d0>)
 800f6be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f6c2:	bf94      	ite	ls
 800f6c4:	4690      	movls	r8, r2
 800f6c6:	4698      	movhi	r8, r3
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	6123      	str	r3, [r4, #16]
 800f6cc:	f02b 0304 	bic.w	r3, fp, #4
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	f04f 0900 	mov.w	r9, #0
 800f6d6:	9700      	str	r7, [sp, #0]
 800f6d8:	4633      	mov	r3, r6
 800f6da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f6dc:	4621      	mov	r1, r4
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f000 f9d2 	bl	800fa88 <_printf_common>
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	f040 808d 	bne.w	800f804 <_printf_float+0x1d0>
 800f6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ee:	b00d      	add	sp, #52	@ 0x34
 800f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f4:	4642      	mov	r2, r8
 800f6f6:	464b      	mov	r3, r9
 800f6f8:	4640      	mov	r0, r8
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	f7f1 fa1e 	bl	8000b3c <__aeabi_dcmpun>
 800f700:	b140      	cbz	r0, 800f714 <_printf_float+0xe0>
 800f702:	464b      	mov	r3, r9
 800f704:	2b00      	cmp	r3, #0
 800f706:	bfbc      	itt	lt
 800f708:	232d      	movlt	r3, #45	@ 0x2d
 800f70a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f70e:	4a7e      	ldr	r2, [pc, #504]	@ (800f908 <_printf_float+0x2d4>)
 800f710:	4b7e      	ldr	r3, [pc, #504]	@ (800f90c <_printf_float+0x2d8>)
 800f712:	e7d4      	b.n	800f6be <_printf_float+0x8a>
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f71a:	9206      	str	r2, [sp, #24]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	d13b      	bne.n	800f798 <_printf_float+0x164>
 800f720:	2306      	movs	r3, #6
 800f722:	6063      	str	r3, [r4, #4]
 800f724:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f728:	2300      	movs	r3, #0
 800f72a:	6022      	str	r2, [r4, #0]
 800f72c:	9303      	str	r3, [sp, #12]
 800f72e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f730:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f734:	ab09      	add	r3, sp, #36	@ 0x24
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	6861      	ldr	r1, [r4, #4]
 800f73a:	ec49 8b10 	vmov	d0, r8, r9
 800f73e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f742:	4628      	mov	r0, r5
 800f744:	f7ff fed6 	bl	800f4f4 <__cvt>
 800f748:	9b06      	ldr	r3, [sp, #24]
 800f74a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f74c:	2b47      	cmp	r3, #71	@ 0x47
 800f74e:	4680      	mov	r8, r0
 800f750:	d129      	bne.n	800f7a6 <_printf_float+0x172>
 800f752:	1cc8      	adds	r0, r1, #3
 800f754:	db02      	blt.n	800f75c <_printf_float+0x128>
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	4299      	cmp	r1, r3
 800f75a:	dd41      	ble.n	800f7e0 <_printf_float+0x1ac>
 800f75c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f760:	fa5f fa8a 	uxtb.w	sl, sl
 800f764:	3901      	subs	r1, #1
 800f766:	4652      	mov	r2, sl
 800f768:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f76c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f76e:	f7ff ff26 	bl	800f5be <__exponent>
 800f772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f774:	1813      	adds	r3, r2, r0
 800f776:	2a01      	cmp	r2, #1
 800f778:	4681      	mov	r9, r0
 800f77a:	6123      	str	r3, [r4, #16]
 800f77c:	dc02      	bgt.n	800f784 <_printf_float+0x150>
 800f77e:	6822      	ldr	r2, [r4, #0]
 800f780:	07d2      	lsls	r2, r2, #31
 800f782:	d501      	bpl.n	800f788 <_printf_float+0x154>
 800f784:	3301      	adds	r3, #1
 800f786:	6123      	str	r3, [r4, #16]
 800f788:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d0a2      	beq.n	800f6d6 <_printf_float+0xa2>
 800f790:	232d      	movs	r3, #45	@ 0x2d
 800f792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f796:	e79e      	b.n	800f6d6 <_printf_float+0xa2>
 800f798:	9a06      	ldr	r2, [sp, #24]
 800f79a:	2a47      	cmp	r2, #71	@ 0x47
 800f79c:	d1c2      	bne.n	800f724 <_printf_float+0xf0>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1c0      	bne.n	800f724 <_printf_float+0xf0>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e7bd      	b.n	800f722 <_printf_float+0xee>
 800f7a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f7aa:	d9db      	bls.n	800f764 <_printf_float+0x130>
 800f7ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f7b0:	d118      	bne.n	800f7e4 <_printf_float+0x1b0>
 800f7b2:	2900      	cmp	r1, #0
 800f7b4:	6863      	ldr	r3, [r4, #4]
 800f7b6:	dd0b      	ble.n	800f7d0 <_printf_float+0x19c>
 800f7b8:	6121      	str	r1, [r4, #16]
 800f7ba:	b913      	cbnz	r3, 800f7c2 <_printf_float+0x18e>
 800f7bc:	6822      	ldr	r2, [r4, #0]
 800f7be:	07d0      	lsls	r0, r2, #31
 800f7c0:	d502      	bpl.n	800f7c8 <_printf_float+0x194>
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	440b      	add	r3, r1
 800f7c6:	6123      	str	r3, [r4, #16]
 800f7c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f7ca:	f04f 0900 	mov.w	r9, #0
 800f7ce:	e7db      	b.n	800f788 <_printf_float+0x154>
 800f7d0:	b913      	cbnz	r3, 800f7d8 <_printf_float+0x1a4>
 800f7d2:	6822      	ldr	r2, [r4, #0]
 800f7d4:	07d2      	lsls	r2, r2, #31
 800f7d6:	d501      	bpl.n	800f7dc <_printf_float+0x1a8>
 800f7d8:	3302      	adds	r3, #2
 800f7da:	e7f4      	b.n	800f7c6 <_printf_float+0x192>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e7f2      	b.n	800f7c6 <_printf_float+0x192>
 800f7e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7e6:	4299      	cmp	r1, r3
 800f7e8:	db05      	blt.n	800f7f6 <_printf_float+0x1c2>
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	6121      	str	r1, [r4, #16]
 800f7ee:	07d8      	lsls	r0, r3, #31
 800f7f0:	d5ea      	bpl.n	800f7c8 <_printf_float+0x194>
 800f7f2:	1c4b      	adds	r3, r1, #1
 800f7f4:	e7e7      	b.n	800f7c6 <_printf_float+0x192>
 800f7f6:	2900      	cmp	r1, #0
 800f7f8:	bfd4      	ite	le
 800f7fa:	f1c1 0202 	rsble	r2, r1, #2
 800f7fe:	2201      	movgt	r2, #1
 800f800:	4413      	add	r3, r2
 800f802:	e7e0      	b.n	800f7c6 <_printf_float+0x192>
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	055a      	lsls	r2, r3, #21
 800f808:	d407      	bmi.n	800f81a <_printf_float+0x1e6>
 800f80a:	6923      	ldr	r3, [r4, #16]
 800f80c:	4642      	mov	r2, r8
 800f80e:	4631      	mov	r1, r6
 800f810:	4628      	mov	r0, r5
 800f812:	47b8      	blx	r7
 800f814:	3001      	adds	r0, #1
 800f816:	d12b      	bne.n	800f870 <_printf_float+0x23c>
 800f818:	e767      	b.n	800f6ea <_printf_float+0xb6>
 800f81a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f81e:	f240 80dd 	bls.w	800f9dc <_printf_float+0x3a8>
 800f822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f826:	2200      	movs	r2, #0
 800f828:	2300      	movs	r3, #0
 800f82a:	f7f1 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d033      	beq.n	800f89a <_printf_float+0x266>
 800f832:	4a37      	ldr	r2, [pc, #220]	@ (800f910 <_printf_float+0x2dc>)
 800f834:	2301      	movs	r3, #1
 800f836:	4631      	mov	r1, r6
 800f838:	4628      	mov	r0, r5
 800f83a:	47b8      	blx	r7
 800f83c:	3001      	adds	r0, #1
 800f83e:	f43f af54 	beq.w	800f6ea <_printf_float+0xb6>
 800f842:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f846:	4543      	cmp	r3, r8
 800f848:	db02      	blt.n	800f850 <_printf_float+0x21c>
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	07d8      	lsls	r0, r3, #31
 800f84e:	d50f      	bpl.n	800f870 <_printf_float+0x23c>
 800f850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f854:	4631      	mov	r1, r6
 800f856:	4628      	mov	r0, r5
 800f858:	47b8      	blx	r7
 800f85a:	3001      	adds	r0, #1
 800f85c:	f43f af45 	beq.w	800f6ea <_printf_float+0xb6>
 800f860:	f04f 0900 	mov.w	r9, #0
 800f864:	f108 38ff 	add.w	r8, r8, #4294967295
 800f868:	f104 0a1a 	add.w	sl, r4, #26
 800f86c:	45c8      	cmp	r8, r9
 800f86e:	dc09      	bgt.n	800f884 <_printf_float+0x250>
 800f870:	6823      	ldr	r3, [r4, #0]
 800f872:	079b      	lsls	r3, r3, #30
 800f874:	f100 8103 	bmi.w	800fa7e <_printf_float+0x44a>
 800f878:	68e0      	ldr	r0, [r4, #12]
 800f87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f87c:	4298      	cmp	r0, r3
 800f87e:	bfb8      	it	lt
 800f880:	4618      	movlt	r0, r3
 800f882:	e734      	b.n	800f6ee <_printf_float+0xba>
 800f884:	2301      	movs	r3, #1
 800f886:	4652      	mov	r2, sl
 800f888:	4631      	mov	r1, r6
 800f88a:	4628      	mov	r0, r5
 800f88c:	47b8      	blx	r7
 800f88e:	3001      	adds	r0, #1
 800f890:	f43f af2b 	beq.w	800f6ea <_printf_float+0xb6>
 800f894:	f109 0901 	add.w	r9, r9, #1
 800f898:	e7e8      	b.n	800f86c <_printf_float+0x238>
 800f89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	dc39      	bgt.n	800f914 <_printf_float+0x2e0>
 800f8a0:	4a1b      	ldr	r2, [pc, #108]	@ (800f910 <_printf_float+0x2dc>)
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	4631      	mov	r1, r6
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	47b8      	blx	r7
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	f43f af1d 	beq.w	800f6ea <_printf_float+0xb6>
 800f8b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f8b4:	ea59 0303 	orrs.w	r3, r9, r3
 800f8b8:	d102      	bne.n	800f8c0 <_printf_float+0x28c>
 800f8ba:	6823      	ldr	r3, [r4, #0]
 800f8bc:	07d9      	lsls	r1, r3, #31
 800f8be:	d5d7      	bpl.n	800f870 <_printf_float+0x23c>
 800f8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	47b8      	blx	r7
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	f43f af0d 	beq.w	800f6ea <_printf_float+0xb6>
 800f8d0:	f04f 0a00 	mov.w	sl, #0
 800f8d4:	f104 0b1a 	add.w	fp, r4, #26
 800f8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8da:	425b      	negs	r3, r3
 800f8dc:	4553      	cmp	r3, sl
 800f8de:	dc01      	bgt.n	800f8e4 <_printf_float+0x2b0>
 800f8e0:	464b      	mov	r3, r9
 800f8e2:	e793      	b.n	800f80c <_printf_float+0x1d8>
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	465a      	mov	r2, fp
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	47b8      	blx	r7
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	f43f aefb 	beq.w	800f6ea <_printf_float+0xb6>
 800f8f4:	f10a 0a01 	add.w	sl, sl, #1
 800f8f8:	e7ee      	b.n	800f8d8 <_printf_float+0x2a4>
 800f8fa:	bf00      	nop
 800f8fc:	7fefffff 	.word	0x7fefffff
 800f900:	08011fb8 	.word	0x08011fb8
 800f904:	08011fbc 	.word	0x08011fbc
 800f908:	08011fc0 	.word	0x08011fc0
 800f90c:	08011fc4 	.word	0x08011fc4
 800f910:	08011fc8 	.word	0x08011fc8
 800f914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f91a:	4553      	cmp	r3, sl
 800f91c:	bfa8      	it	ge
 800f91e:	4653      	movge	r3, sl
 800f920:	2b00      	cmp	r3, #0
 800f922:	4699      	mov	r9, r3
 800f924:	dc36      	bgt.n	800f994 <_printf_float+0x360>
 800f926:	f04f 0b00 	mov.w	fp, #0
 800f92a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f92e:	f104 021a 	add.w	r2, r4, #26
 800f932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f934:	9306      	str	r3, [sp, #24]
 800f936:	eba3 0309 	sub.w	r3, r3, r9
 800f93a:	455b      	cmp	r3, fp
 800f93c:	dc31      	bgt.n	800f9a2 <_printf_float+0x36e>
 800f93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f940:	459a      	cmp	sl, r3
 800f942:	dc3a      	bgt.n	800f9ba <_printf_float+0x386>
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	07da      	lsls	r2, r3, #31
 800f948:	d437      	bmi.n	800f9ba <_printf_float+0x386>
 800f94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94c:	ebaa 0903 	sub.w	r9, sl, r3
 800f950:	9b06      	ldr	r3, [sp, #24]
 800f952:	ebaa 0303 	sub.w	r3, sl, r3
 800f956:	4599      	cmp	r9, r3
 800f958:	bfa8      	it	ge
 800f95a:	4699      	movge	r9, r3
 800f95c:	f1b9 0f00 	cmp.w	r9, #0
 800f960:	dc33      	bgt.n	800f9ca <_printf_float+0x396>
 800f962:	f04f 0800 	mov.w	r8, #0
 800f966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f96a:	f104 0b1a 	add.w	fp, r4, #26
 800f96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f970:	ebaa 0303 	sub.w	r3, sl, r3
 800f974:	eba3 0309 	sub.w	r3, r3, r9
 800f978:	4543      	cmp	r3, r8
 800f97a:	f77f af79 	ble.w	800f870 <_printf_float+0x23c>
 800f97e:	2301      	movs	r3, #1
 800f980:	465a      	mov	r2, fp
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	f43f aeae 	beq.w	800f6ea <_printf_float+0xb6>
 800f98e:	f108 0801 	add.w	r8, r8, #1
 800f992:	e7ec      	b.n	800f96e <_printf_float+0x33a>
 800f994:	4642      	mov	r2, r8
 800f996:	4631      	mov	r1, r6
 800f998:	4628      	mov	r0, r5
 800f99a:	47b8      	blx	r7
 800f99c:	3001      	adds	r0, #1
 800f99e:	d1c2      	bne.n	800f926 <_printf_float+0x2f2>
 800f9a0:	e6a3      	b.n	800f6ea <_printf_float+0xb6>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	9206      	str	r2, [sp, #24]
 800f9aa:	47b8      	blx	r7
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	f43f ae9c 	beq.w	800f6ea <_printf_float+0xb6>
 800f9b2:	9a06      	ldr	r2, [sp, #24]
 800f9b4:	f10b 0b01 	add.w	fp, fp, #1
 800f9b8:	e7bb      	b.n	800f932 <_printf_float+0x2fe>
 800f9ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9be:	4631      	mov	r1, r6
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	47b8      	blx	r7
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d1c0      	bne.n	800f94a <_printf_float+0x316>
 800f9c8:	e68f      	b.n	800f6ea <_printf_float+0xb6>
 800f9ca:	9a06      	ldr	r2, [sp, #24]
 800f9cc:	464b      	mov	r3, r9
 800f9ce:	4442      	add	r2, r8
 800f9d0:	4631      	mov	r1, r6
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	47b8      	blx	r7
 800f9d6:	3001      	adds	r0, #1
 800f9d8:	d1c3      	bne.n	800f962 <_printf_float+0x32e>
 800f9da:	e686      	b.n	800f6ea <_printf_float+0xb6>
 800f9dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f9e0:	f1ba 0f01 	cmp.w	sl, #1
 800f9e4:	dc01      	bgt.n	800f9ea <_printf_float+0x3b6>
 800f9e6:	07db      	lsls	r3, r3, #31
 800f9e8:	d536      	bpl.n	800fa58 <_printf_float+0x424>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	4642      	mov	r2, r8
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	47b8      	blx	r7
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	f43f ae78 	beq.w	800f6ea <_printf_float+0xb6>
 800f9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4628      	mov	r0, r5
 800fa02:	47b8      	blx	r7
 800fa04:	3001      	adds	r0, #1
 800fa06:	f43f ae70 	beq.w	800f6ea <_printf_float+0xb6>
 800fa0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa0e:	2200      	movs	r2, #0
 800fa10:	2300      	movs	r3, #0
 800fa12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa16:	f7f1 f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa1a:	b9c0      	cbnz	r0, 800fa4e <_printf_float+0x41a>
 800fa1c:	4653      	mov	r3, sl
 800fa1e:	f108 0201 	add.w	r2, r8, #1
 800fa22:	4631      	mov	r1, r6
 800fa24:	4628      	mov	r0, r5
 800fa26:	47b8      	blx	r7
 800fa28:	3001      	adds	r0, #1
 800fa2a:	d10c      	bne.n	800fa46 <_printf_float+0x412>
 800fa2c:	e65d      	b.n	800f6ea <_printf_float+0xb6>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	465a      	mov	r2, fp
 800fa32:	4631      	mov	r1, r6
 800fa34:	4628      	mov	r0, r5
 800fa36:	47b8      	blx	r7
 800fa38:	3001      	adds	r0, #1
 800fa3a:	f43f ae56 	beq.w	800f6ea <_printf_float+0xb6>
 800fa3e:	f108 0801 	add.w	r8, r8, #1
 800fa42:	45d0      	cmp	r8, sl
 800fa44:	dbf3      	blt.n	800fa2e <_printf_float+0x3fa>
 800fa46:	464b      	mov	r3, r9
 800fa48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fa4c:	e6df      	b.n	800f80e <_printf_float+0x1da>
 800fa4e:	f04f 0800 	mov.w	r8, #0
 800fa52:	f104 0b1a 	add.w	fp, r4, #26
 800fa56:	e7f4      	b.n	800fa42 <_printf_float+0x40e>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	4642      	mov	r2, r8
 800fa5c:	e7e1      	b.n	800fa22 <_printf_float+0x3ee>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	464a      	mov	r2, r9
 800fa62:	4631      	mov	r1, r6
 800fa64:	4628      	mov	r0, r5
 800fa66:	47b8      	blx	r7
 800fa68:	3001      	adds	r0, #1
 800fa6a:	f43f ae3e 	beq.w	800f6ea <_printf_float+0xb6>
 800fa6e:	f108 0801 	add.w	r8, r8, #1
 800fa72:	68e3      	ldr	r3, [r4, #12]
 800fa74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fa76:	1a5b      	subs	r3, r3, r1
 800fa78:	4543      	cmp	r3, r8
 800fa7a:	dcf0      	bgt.n	800fa5e <_printf_float+0x42a>
 800fa7c:	e6fc      	b.n	800f878 <_printf_float+0x244>
 800fa7e:	f04f 0800 	mov.w	r8, #0
 800fa82:	f104 0919 	add.w	r9, r4, #25
 800fa86:	e7f4      	b.n	800fa72 <_printf_float+0x43e>

0800fa88 <_printf_common>:
 800fa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa8c:	4616      	mov	r6, r2
 800fa8e:	4698      	mov	r8, r3
 800fa90:	688a      	ldr	r2, [r1, #8]
 800fa92:	690b      	ldr	r3, [r1, #16]
 800fa94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	bfb8      	it	lt
 800fa9c:	4613      	movlt	r3, r2
 800fa9e:	6033      	str	r3, [r6, #0]
 800faa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800faa4:	4607      	mov	r7, r0
 800faa6:	460c      	mov	r4, r1
 800faa8:	b10a      	cbz	r2, 800faae <_printf_common+0x26>
 800faaa:	3301      	adds	r3, #1
 800faac:	6033      	str	r3, [r6, #0]
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	0699      	lsls	r1, r3, #26
 800fab2:	bf42      	ittt	mi
 800fab4:	6833      	ldrmi	r3, [r6, #0]
 800fab6:	3302      	addmi	r3, #2
 800fab8:	6033      	strmi	r3, [r6, #0]
 800faba:	6825      	ldr	r5, [r4, #0]
 800fabc:	f015 0506 	ands.w	r5, r5, #6
 800fac0:	d106      	bne.n	800fad0 <_printf_common+0x48>
 800fac2:	f104 0a19 	add.w	sl, r4, #25
 800fac6:	68e3      	ldr	r3, [r4, #12]
 800fac8:	6832      	ldr	r2, [r6, #0]
 800faca:	1a9b      	subs	r3, r3, r2
 800facc:	42ab      	cmp	r3, r5
 800face:	dc26      	bgt.n	800fb1e <_printf_common+0x96>
 800fad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fad4:	6822      	ldr	r2, [r4, #0]
 800fad6:	3b00      	subs	r3, #0
 800fad8:	bf18      	it	ne
 800fada:	2301      	movne	r3, #1
 800fadc:	0692      	lsls	r2, r2, #26
 800fade:	d42b      	bmi.n	800fb38 <_printf_common+0xb0>
 800fae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fae4:	4641      	mov	r1, r8
 800fae6:	4638      	mov	r0, r7
 800fae8:	47c8      	blx	r9
 800faea:	3001      	adds	r0, #1
 800faec:	d01e      	beq.n	800fb2c <_printf_common+0xa4>
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	6922      	ldr	r2, [r4, #16]
 800faf2:	f003 0306 	and.w	r3, r3, #6
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	bf02      	ittt	eq
 800fafa:	68e5      	ldreq	r5, [r4, #12]
 800fafc:	6833      	ldreq	r3, [r6, #0]
 800fafe:	1aed      	subeq	r5, r5, r3
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	bf0c      	ite	eq
 800fb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb08:	2500      	movne	r5, #0
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	bfc4      	itt	gt
 800fb0e:	1a9b      	subgt	r3, r3, r2
 800fb10:	18ed      	addgt	r5, r5, r3
 800fb12:	2600      	movs	r6, #0
 800fb14:	341a      	adds	r4, #26
 800fb16:	42b5      	cmp	r5, r6
 800fb18:	d11a      	bne.n	800fb50 <_printf_common+0xc8>
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	e008      	b.n	800fb30 <_printf_common+0xa8>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	4652      	mov	r2, sl
 800fb22:	4641      	mov	r1, r8
 800fb24:	4638      	mov	r0, r7
 800fb26:	47c8      	blx	r9
 800fb28:	3001      	adds	r0, #1
 800fb2a:	d103      	bne.n	800fb34 <_printf_common+0xac>
 800fb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb34:	3501      	adds	r5, #1
 800fb36:	e7c6      	b.n	800fac6 <_printf_common+0x3e>
 800fb38:	18e1      	adds	r1, r4, r3
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	2030      	movs	r0, #48	@ 0x30
 800fb3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb42:	4422      	add	r2, r4
 800fb44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb4c:	3302      	adds	r3, #2
 800fb4e:	e7c7      	b.n	800fae0 <_printf_common+0x58>
 800fb50:	2301      	movs	r3, #1
 800fb52:	4622      	mov	r2, r4
 800fb54:	4641      	mov	r1, r8
 800fb56:	4638      	mov	r0, r7
 800fb58:	47c8      	blx	r9
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	d0e6      	beq.n	800fb2c <_printf_common+0xa4>
 800fb5e:	3601      	adds	r6, #1
 800fb60:	e7d9      	b.n	800fb16 <_printf_common+0x8e>
	...

0800fb64 <_printf_i>:
 800fb64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	7e0f      	ldrb	r7, [r1, #24]
 800fb6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb6c:	2f78      	cmp	r7, #120	@ 0x78
 800fb6e:	4691      	mov	r9, r2
 800fb70:	4680      	mov	r8, r0
 800fb72:	460c      	mov	r4, r1
 800fb74:	469a      	mov	sl, r3
 800fb76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb7a:	d807      	bhi.n	800fb8c <_printf_i+0x28>
 800fb7c:	2f62      	cmp	r7, #98	@ 0x62
 800fb7e:	d80a      	bhi.n	800fb96 <_printf_i+0x32>
 800fb80:	2f00      	cmp	r7, #0
 800fb82:	f000 80d2 	beq.w	800fd2a <_printf_i+0x1c6>
 800fb86:	2f58      	cmp	r7, #88	@ 0x58
 800fb88:	f000 80b9 	beq.w	800fcfe <_printf_i+0x19a>
 800fb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb94:	e03a      	b.n	800fc0c <_printf_i+0xa8>
 800fb96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb9a:	2b15      	cmp	r3, #21
 800fb9c:	d8f6      	bhi.n	800fb8c <_printf_i+0x28>
 800fb9e:	a101      	add	r1, pc, #4	@ (adr r1, 800fba4 <_printf_i+0x40>)
 800fba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fba4:	0800fbfd 	.word	0x0800fbfd
 800fba8:	0800fc11 	.word	0x0800fc11
 800fbac:	0800fb8d 	.word	0x0800fb8d
 800fbb0:	0800fb8d 	.word	0x0800fb8d
 800fbb4:	0800fb8d 	.word	0x0800fb8d
 800fbb8:	0800fb8d 	.word	0x0800fb8d
 800fbbc:	0800fc11 	.word	0x0800fc11
 800fbc0:	0800fb8d 	.word	0x0800fb8d
 800fbc4:	0800fb8d 	.word	0x0800fb8d
 800fbc8:	0800fb8d 	.word	0x0800fb8d
 800fbcc:	0800fb8d 	.word	0x0800fb8d
 800fbd0:	0800fd11 	.word	0x0800fd11
 800fbd4:	0800fc3b 	.word	0x0800fc3b
 800fbd8:	0800fccb 	.word	0x0800fccb
 800fbdc:	0800fb8d 	.word	0x0800fb8d
 800fbe0:	0800fb8d 	.word	0x0800fb8d
 800fbe4:	0800fd33 	.word	0x0800fd33
 800fbe8:	0800fb8d 	.word	0x0800fb8d
 800fbec:	0800fc3b 	.word	0x0800fc3b
 800fbf0:	0800fb8d 	.word	0x0800fb8d
 800fbf4:	0800fb8d 	.word	0x0800fb8d
 800fbf8:	0800fcd3 	.word	0x0800fcd3
 800fbfc:	6833      	ldr	r3, [r6, #0]
 800fbfe:	1d1a      	adds	r2, r3, #4
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	6032      	str	r2, [r6, #0]
 800fc04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e09d      	b.n	800fd4c <_printf_i+0x1e8>
 800fc10:	6833      	ldr	r3, [r6, #0]
 800fc12:	6820      	ldr	r0, [r4, #0]
 800fc14:	1d19      	adds	r1, r3, #4
 800fc16:	6031      	str	r1, [r6, #0]
 800fc18:	0606      	lsls	r6, r0, #24
 800fc1a:	d501      	bpl.n	800fc20 <_printf_i+0xbc>
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	e003      	b.n	800fc28 <_printf_i+0xc4>
 800fc20:	0645      	lsls	r5, r0, #25
 800fc22:	d5fb      	bpl.n	800fc1c <_printf_i+0xb8>
 800fc24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc28:	2d00      	cmp	r5, #0
 800fc2a:	da03      	bge.n	800fc34 <_printf_i+0xd0>
 800fc2c:	232d      	movs	r3, #45	@ 0x2d
 800fc2e:	426d      	negs	r5, r5
 800fc30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc34:	4859      	ldr	r0, [pc, #356]	@ (800fd9c <_printf_i+0x238>)
 800fc36:	230a      	movs	r3, #10
 800fc38:	e011      	b.n	800fc5e <_printf_i+0xfa>
 800fc3a:	6821      	ldr	r1, [r4, #0]
 800fc3c:	6833      	ldr	r3, [r6, #0]
 800fc3e:	0608      	lsls	r0, r1, #24
 800fc40:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc44:	d402      	bmi.n	800fc4c <_printf_i+0xe8>
 800fc46:	0649      	lsls	r1, r1, #25
 800fc48:	bf48      	it	mi
 800fc4a:	b2ad      	uxthmi	r5, r5
 800fc4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc4e:	4853      	ldr	r0, [pc, #332]	@ (800fd9c <_printf_i+0x238>)
 800fc50:	6033      	str	r3, [r6, #0]
 800fc52:	bf14      	ite	ne
 800fc54:	230a      	movne	r3, #10
 800fc56:	2308      	moveq	r3, #8
 800fc58:	2100      	movs	r1, #0
 800fc5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc5e:	6866      	ldr	r6, [r4, #4]
 800fc60:	60a6      	str	r6, [r4, #8]
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	bfa2      	ittt	ge
 800fc66:	6821      	ldrge	r1, [r4, #0]
 800fc68:	f021 0104 	bicge.w	r1, r1, #4
 800fc6c:	6021      	strge	r1, [r4, #0]
 800fc6e:	b90d      	cbnz	r5, 800fc74 <_printf_i+0x110>
 800fc70:	2e00      	cmp	r6, #0
 800fc72:	d04b      	beq.n	800fd0c <_printf_i+0x1a8>
 800fc74:	4616      	mov	r6, r2
 800fc76:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc7a:	fb03 5711 	mls	r7, r3, r1, r5
 800fc7e:	5dc7      	ldrb	r7, [r0, r7]
 800fc80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc84:	462f      	mov	r7, r5
 800fc86:	42bb      	cmp	r3, r7
 800fc88:	460d      	mov	r5, r1
 800fc8a:	d9f4      	bls.n	800fc76 <_printf_i+0x112>
 800fc8c:	2b08      	cmp	r3, #8
 800fc8e:	d10b      	bne.n	800fca8 <_printf_i+0x144>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	07df      	lsls	r7, r3, #31
 800fc94:	d508      	bpl.n	800fca8 <_printf_i+0x144>
 800fc96:	6923      	ldr	r3, [r4, #16]
 800fc98:	6861      	ldr	r1, [r4, #4]
 800fc9a:	4299      	cmp	r1, r3
 800fc9c:	bfde      	ittt	le
 800fc9e:	2330      	movle	r3, #48	@ 0x30
 800fca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fca8:	1b92      	subs	r2, r2, r6
 800fcaa:	6122      	str	r2, [r4, #16]
 800fcac:	f8cd a000 	str.w	sl, [sp]
 800fcb0:	464b      	mov	r3, r9
 800fcb2:	aa03      	add	r2, sp, #12
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	f7ff fee6 	bl	800fa88 <_printf_common>
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d14a      	bne.n	800fd56 <_printf_i+0x1f2>
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	b004      	add	sp, #16
 800fcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	f043 0320 	orr.w	r3, r3, #32
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	4833      	ldr	r0, [pc, #204]	@ (800fda0 <_printf_i+0x23c>)
 800fcd4:	2778      	movs	r7, #120	@ 0x78
 800fcd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	6831      	ldr	r1, [r6, #0]
 800fcde:	061f      	lsls	r7, r3, #24
 800fce0:	f851 5b04 	ldr.w	r5, [r1], #4
 800fce4:	d402      	bmi.n	800fcec <_printf_i+0x188>
 800fce6:	065f      	lsls	r7, r3, #25
 800fce8:	bf48      	it	mi
 800fcea:	b2ad      	uxthmi	r5, r5
 800fcec:	6031      	str	r1, [r6, #0]
 800fcee:	07d9      	lsls	r1, r3, #31
 800fcf0:	bf44      	itt	mi
 800fcf2:	f043 0320 	orrmi.w	r3, r3, #32
 800fcf6:	6023      	strmi	r3, [r4, #0]
 800fcf8:	b11d      	cbz	r5, 800fd02 <_printf_i+0x19e>
 800fcfa:	2310      	movs	r3, #16
 800fcfc:	e7ac      	b.n	800fc58 <_printf_i+0xf4>
 800fcfe:	4827      	ldr	r0, [pc, #156]	@ (800fd9c <_printf_i+0x238>)
 800fd00:	e7e9      	b.n	800fcd6 <_printf_i+0x172>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	f023 0320 	bic.w	r3, r3, #32
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	e7f6      	b.n	800fcfa <_printf_i+0x196>
 800fd0c:	4616      	mov	r6, r2
 800fd0e:	e7bd      	b.n	800fc8c <_printf_i+0x128>
 800fd10:	6833      	ldr	r3, [r6, #0]
 800fd12:	6825      	ldr	r5, [r4, #0]
 800fd14:	6961      	ldr	r1, [r4, #20]
 800fd16:	1d18      	adds	r0, r3, #4
 800fd18:	6030      	str	r0, [r6, #0]
 800fd1a:	062e      	lsls	r6, r5, #24
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	d501      	bpl.n	800fd24 <_printf_i+0x1c0>
 800fd20:	6019      	str	r1, [r3, #0]
 800fd22:	e002      	b.n	800fd2a <_printf_i+0x1c6>
 800fd24:	0668      	lsls	r0, r5, #25
 800fd26:	d5fb      	bpl.n	800fd20 <_printf_i+0x1bc>
 800fd28:	8019      	strh	r1, [r3, #0]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6123      	str	r3, [r4, #16]
 800fd2e:	4616      	mov	r6, r2
 800fd30:	e7bc      	b.n	800fcac <_printf_i+0x148>
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	1d1a      	adds	r2, r3, #4
 800fd36:	6032      	str	r2, [r6, #0]
 800fd38:	681e      	ldr	r6, [r3, #0]
 800fd3a:	6862      	ldr	r2, [r4, #4]
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7f0 fa4e 	bl	80001e0 <memchr>
 800fd44:	b108      	cbz	r0, 800fd4a <_printf_i+0x1e6>
 800fd46:	1b80      	subs	r0, r0, r6
 800fd48:	6060      	str	r0, [r4, #4]
 800fd4a:	6863      	ldr	r3, [r4, #4]
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd54:	e7aa      	b.n	800fcac <_printf_i+0x148>
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	4632      	mov	r2, r6
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	47d0      	blx	sl
 800fd60:	3001      	adds	r0, #1
 800fd62:	d0ad      	beq.n	800fcc0 <_printf_i+0x15c>
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	079b      	lsls	r3, r3, #30
 800fd68:	d413      	bmi.n	800fd92 <_printf_i+0x22e>
 800fd6a:	68e0      	ldr	r0, [r4, #12]
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	4298      	cmp	r0, r3
 800fd70:	bfb8      	it	lt
 800fd72:	4618      	movlt	r0, r3
 800fd74:	e7a6      	b.n	800fcc4 <_printf_i+0x160>
 800fd76:	2301      	movs	r3, #1
 800fd78:	4632      	mov	r2, r6
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	4640      	mov	r0, r8
 800fd7e:	47d0      	blx	sl
 800fd80:	3001      	adds	r0, #1
 800fd82:	d09d      	beq.n	800fcc0 <_printf_i+0x15c>
 800fd84:	3501      	adds	r5, #1
 800fd86:	68e3      	ldr	r3, [r4, #12]
 800fd88:	9903      	ldr	r1, [sp, #12]
 800fd8a:	1a5b      	subs	r3, r3, r1
 800fd8c:	42ab      	cmp	r3, r5
 800fd8e:	dcf2      	bgt.n	800fd76 <_printf_i+0x212>
 800fd90:	e7eb      	b.n	800fd6a <_printf_i+0x206>
 800fd92:	2500      	movs	r5, #0
 800fd94:	f104 0619 	add.w	r6, r4, #25
 800fd98:	e7f5      	b.n	800fd86 <_printf_i+0x222>
 800fd9a:	bf00      	nop
 800fd9c:	08011fca 	.word	0x08011fca
 800fda0:	08011fdb 	.word	0x08011fdb

0800fda4 <std>:
 800fda4:	2300      	movs	r3, #0
 800fda6:	b510      	push	{r4, lr}
 800fda8:	4604      	mov	r4, r0
 800fdaa:	e9c0 3300 	strd	r3, r3, [r0]
 800fdae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdb2:	6083      	str	r3, [r0, #8]
 800fdb4:	8181      	strh	r1, [r0, #12]
 800fdb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800fdb8:	81c2      	strh	r2, [r0, #14]
 800fdba:	6183      	str	r3, [r0, #24]
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	2208      	movs	r2, #8
 800fdc0:	305c      	adds	r0, #92	@ 0x5c
 800fdc2:	f000 f9f9 	bl	80101b8 <memset>
 800fdc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fdfc <std+0x58>)
 800fdc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800fdca:	4b0d      	ldr	r3, [pc, #52]	@ (800fe00 <std+0x5c>)
 800fdcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fdce:	4b0d      	ldr	r3, [pc, #52]	@ (800fe04 <std+0x60>)
 800fdd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fdd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fe08 <std+0x64>)
 800fdd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fe0c <std+0x68>)
 800fdd8:	6224      	str	r4, [r4, #32]
 800fdda:	429c      	cmp	r4, r3
 800fddc:	d006      	beq.n	800fdec <std+0x48>
 800fdde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fde2:	4294      	cmp	r4, r2
 800fde4:	d002      	beq.n	800fdec <std+0x48>
 800fde6:	33d0      	adds	r3, #208	@ 0xd0
 800fde8:	429c      	cmp	r4, r3
 800fdea:	d105      	bne.n	800fdf8 <std+0x54>
 800fdec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf4:	f000 bab0 	b.w	8010358 <__retarget_lock_init_recursive>
 800fdf8:	bd10      	pop	{r4, pc}
 800fdfa:	bf00      	nop
 800fdfc:	08010009 	.word	0x08010009
 800fe00:	0801002b 	.word	0x0801002b
 800fe04:	08010063 	.word	0x08010063
 800fe08:	08010087 	.word	0x08010087
 800fe0c:	20002188 	.word	0x20002188

0800fe10 <stdio_exit_handler>:
 800fe10:	4a02      	ldr	r2, [pc, #8]	@ (800fe1c <stdio_exit_handler+0xc>)
 800fe12:	4903      	ldr	r1, [pc, #12]	@ (800fe20 <stdio_exit_handler+0x10>)
 800fe14:	4803      	ldr	r0, [pc, #12]	@ (800fe24 <stdio_exit_handler+0x14>)
 800fe16:	f000 b869 	b.w	800feec <_fwalk_sglue>
 800fe1a:	bf00      	nop
 800fe1c:	20000128 	.word	0x20000128
 800fe20:	08011b1d 	.word	0x08011b1d
 800fe24:	20000138 	.word	0x20000138

0800fe28 <cleanup_stdio>:
 800fe28:	6841      	ldr	r1, [r0, #4]
 800fe2a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe5c <cleanup_stdio+0x34>)
 800fe2c:	4299      	cmp	r1, r3
 800fe2e:	b510      	push	{r4, lr}
 800fe30:	4604      	mov	r4, r0
 800fe32:	d001      	beq.n	800fe38 <cleanup_stdio+0x10>
 800fe34:	f001 fe72 	bl	8011b1c <_fflush_r>
 800fe38:	68a1      	ldr	r1, [r4, #8]
 800fe3a:	4b09      	ldr	r3, [pc, #36]	@ (800fe60 <cleanup_stdio+0x38>)
 800fe3c:	4299      	cmp	r1, r3
 800fe3e:	d002      	beq.n	800fe46 <cleanup_stdio+0x1e>
 800fe40:	4620      	mov	r0, r4
 800fe42:	f001 fe6b 	bl	8011b1c <_fflush_r>
 800fe46:	68e1      	ldr	r1, [r4, #12]
 800fe48:	4b06      	ldr	r3, [pc, #24]	@ (800fe64 <cleanup_stdio+0x3c>)
 800fe4a:	4299      	cmp	r1, r3
 800fe4c:	d004      	beq.n	800fe58 <cleanup_stdio+0x30>
 800fe4e:	4620      	mov	r0, r4
 800fe50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe54:	f001 be62 	b.w	8011b1c <_fflush_r>
 800fe58:	bd10      	pop	{r4, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20002188 	.word	0x20002188
 800fe60:	200021f0 	.word	0x200021f0
 800fe64:	20002258 	.word	0x20002258

0800fe68 <global_stdio_init.part.0>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	4b0b      	ldr	r3, [pc, #44]	@ (800fe98 <global_stdio_init.part.0+0x30>)
 800fe6c:	4c0b      	ldr	r4, [pc, #44]	@ (800fe9c <global_stdio_init.part.0+0x34>)
 800fe6e:	4a0c      	ldr	r2, [pc, #48]	@ (800fea0 <global_stdio_init.part.0+0x38>)
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	4620      	mov	r0, r4
 800fe74:	2200      	movs	r2, #0
 800fe76:	2104      	movs	r1, #4
 800fe78:	f7ff ff94 	bl	800fda4 <std>
 800fe7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe80:	2201      	movs	r2, #1
 800fe82:	2109      	movs	r1, #9
 800fe84:	f7ff ff8e 	bl	800fda4 <std>
 800fe88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe8c:	2202      	movs	r2, #2
 800fe8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe92:	2112      	movs	r1, #18
 800fe94:	f7ff bf86 	b.w	800fda4 <std>
 800fe98:	200022c0 	.word	0x200022c0
 800fe9c:	20002188 	.word	0x20002188
 800fea0:	0800fe11 	.word	0x0800fe11

0800fea4 <__sfp_lock_acquire>:
 800fea4:	4801      	ldr	r0, [pc, #4]	@ (800feac <__sfp_lock_acquire+0x8>)
 800fea6:	f000 ba58 	b.w	801035a <__retarget_lock_acquire_recursive>
 800feaa:	bf00      	nop
 800feac:	200022c9 	.word	0x200022c9

0800feb0 <__sfp_lock_release>:
 800feb0:	4801      	ldr	r0, [pc, #4]	@ (800feb8 <__sfp_lock_release+0x8>)
 800feb2:	f000 ba53 	b.w	801035c <__retarget_lock_release_recursive>
 800feb6:	bf00      	nop
 800feb8:	200022c9 	.word	0x200022c9

0800febc <__sinit>:
 800febc:	b510      	push	{r4, lr}
 800febe:	4604      	mov	r4, r0
 800fec0:	f7ff fff0 	bl	800fea4 <__sfp_lock_acquire>
 800fec4:	6a23      	ldr	r3, [r4, #32]
 800fec6:	b11b      	cbz	r3, 800fed0 <__sinit+0x14>
 800fec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fecc:	f7ff bff0 	b.w	800feb0 <__sfp_lock_release>
 800fed0:	4b04      	ldr	r3, [pc, #16]	@ (800fee4 <__sinit+0x28>)
 800fed2:	6223      	str	r3, [r4, #32]
 800fed4:	4b04      	ldr	r3, [pc, #16]	@ (800fee8 <__sinit+0x2c>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1f5      	bne.n	800fec8 <__sinit+0xc>
 800fedc:	f7ff ffc4 	bl	800fe68 <global_stdio_init.part.0>
 800fee0:	e7f2      	b.n	800fec8 <__sinit+0xc>
 800fee2:	bf00      	nop
 800fee4:	0800fe29 	.word	0x0800fe29
 800fee8:	200022c0 	.word	0x200022c0

0800feec <_fwalk_sglue>:
 800feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef0:	4607      	mov	r7, r0
 800fef2:	4688      	mov	r8, r1
 800fef4:	4614      	mov	r4, r2
 800fef6:	2600      	movs	r6, #0
 800fef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fefc:	f1b9 0901 	subs.w	r9, r9, #1
 800ff00:	d505      	bpl.n	800ff0e <_fwalk_sglue+0x22>
 800ff02:	6824      	ldr	r4, [r4, #0]
 800ff04:	2c00      	cmp	r4, #0
 800ff06:	d1f7      	bne.n	800fef8 <_fwalk_sglue+0xc>
 800ff08:	4630      	mov	r0, r6
 800ff0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff0e:	89ab      	ldrh	r3, [r5, #12]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d907      	bls.n	800ff24 <_fwalk_sglue+0x38>
 800ff14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	d003      	beq.n	800ff24 <_fwalk_sglue+0x38>
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	4638      	mov	r0, r7
 800ff20:	47c0      	blx	r8
 800ff22:	4306      	orrs	r6, r0
 800ff24:	3568      	adds	r5, #104	@ 0x68
 800ff26:	e7e9      	b.n	800fefc <_fwalk_sglue+0x10>

0800ff28 <iprintf>:
 800ff28:	b40f      	push	{r0, r1, r2, r3}
 800ff2a:	b507      	push	{r0, r1, r2, lr}
 800ff2c:	4906      	ldr	r1, [pc, #24]	@ (800ff48 <iprintf+0x20>)
 800ff2e:	ab04      	add	r3, sp, #16
 800ff30:	6808      	ldr	r0, [r1, #0]
 800ff32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff36:	6881      	ldr	r1, [r0, #8]
 800ff38:	9301      	str	r3, [sp, #4]
 800ff3a:	f001 fc53 	bl	80117e4 <_vfiprintf_r>
 800ff3e:	b003      	add	sp, #12
 800ff40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff44:	b004      	add	sp, #16
 800ff46:	4770      	bx	lr
 800ff48:	20000134 	.word	0x20000134

0800ff4c <_puts_r>:
 800ff4c:	6a03      	ldr	r3, [r0, #32]
 800ff4e:	b570      	push	{r4, r5, r6, lr}
 800ff50:	6884      	ldr	r4, [r0, #8]
 800ff52:	4605      	mov	r5, r0
 800ff54:	460e      	mov	r6, r1
 800ff56:	b90b      	cbnz	r3, 800ff5c <_puts_r+0x10>
 800ff58:	f7ff ffb0 	bl	800febc <__sinit>
 800ff5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff5e:	07db      	lsls	r3, r3, #31
 800ff60:	d405      	bmi.n	800ff6e <_puts_r+0x22>
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	0598      	lsls	r0, r3, #22
 800ff66:	d402      	bmi.n	800ff6e <_puts_r+0x22>
 800ff68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff6a:	f000 f9f6 	bl	801035a <__retarget_lock_acquire_recursive>
 800ff6e:	89a3      	ldrh	r3, [r4, #12]
 800ff70:	0719      	lsls	r1, r3, #28
 800ff72:	d502      	bpl.n	800ff7a <_puts_r+0x2e>
 800ff74:	6923      	ldr	r3, [r4, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d135      	bne.n	800ffe6 <_puts_r+0x9a>
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f000 f8c5 	bl	801010c <__swsetup_r>
 800ff82:	b380      	cbz	r0, 800ffe6 <_puts_r+0x9a>
 800ff84:	f04f 35ff 	mov.w	r5, #4294967295
 800ff88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff8a:	07da      	lsls	r2, r3, #31
 800ff8c:	d405      	bmi.n	800ff9a <_puts_r+0x4e>
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	059b      	lsls	r3, r3, #22
 800ff92:	d402      	bmi.n	800ff9a <_puts_r+0x4e>
 800ff94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff96:	f000 f9e1 	bl	801035c <__retarget_lock_release_recursive>
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	da04      	bge.n	800ffac <_puts_r+0x60>
 800ffa2:	69a2      	ldr	r2, [r4, #24]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	dc17      	bgt.n	800ffd8 <_puts_r+0x8c>
 800ffa8:	290a      	cmp	r1, #10
 800ffaa:	d015      	beq.n	800ffd8 <_puts_r+0x8c>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	1c5a      	adds	r2, r3, #1
 800ffb0:	6022      	str	r2, [r4, #0]
 800ffb2:	7019      	strb	r1, [r3, #0]
 800ffb4:	68a3      	ldr	r3, [r4, #8]
 800ffb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	60a3      	str	r3, [r4, #8]
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d1ed      	bne.n	800ff9e <_puts_r+0x52>
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	da11      	bge.n	800ffea <_puts_r+0x9e>
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	210a      	movs	r1, #10
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 f85f 	bl	801008e <__swbuf_r>
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	d0d7      	beq.n	800ff84 <_puts_r+0x38>
 800ffd4:	250a      	movs	r5, #10
 800ffd6:	e7d7      	b.n	800ff88 <_puts_r+0x3c>
 800ffd8:	4622      	mov	r2, r4
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f000 f857 	bl	801008e <__swbuf_r>
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	d1e7      	bne.n	800ffb4 <_puts_r+0x68>
 800ffe4:	e7ce      	b.n	800ff84 <_puts_r+0x38>
 800ffe6:	3e01      	subs	r6, #1
 800ffe8:	e7e4      	b.n	800ffb4 <_puts_r+0x68>
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	1c5a      	adds	r2, r3, #1
 800ffee:	6022      	str	r2, [r4, #0]
 800fff0:	220a      	movs	r2, #10
 800fff2:	701a      	strb	r2, [r3, #0]
 800fff4:	e7ee      	b.n	800ffd4 <_puts_r+0x88>
	...

0800fff8 <puts>:
 800fff8:	4b02      	ldr	r3, [pc, #8]	@ (8010004 <puts+0xc>)
 800fffa:	4601      	mov	r1, r0
 800fffc:	6818      	ldr	r0, [r3, #0]
 800fffe:	f7ff bfa5 	b.w	800ff4c <_puts_r>
 8010002:	bf00      	nop
 8010004:	20000134 	.word	0x20000134

08010008 <__sread>:
 8010008:	b510      	push	{r4, lr}
 801000a:	460c      	mov	r4, r1
 801000c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010010:	f000 f930 	bl	8010274 <_read_r>
 8010014:	2800      	cmp	r0, #0
 8010016:	bfab      	itete	ge
 8010018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801001a:	89a3      	ldrhlt	r3, [r4, #12]
 801001c:	181b      	addge	r3, r3, r0
 801001e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010022:	bfac      	ite	ge
 8010024:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010026:	81a3      	strhlt	r3, [r4, #12]
 8010028:	bd10      	pop	{r4, pc}

0801002a <__swrite>:
 801002a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002e:	461f      	mov	r7, r3
 8010030:	898b      	ldrh	r3, [r1, #12]
 8010032:	05db      	lsls	r3, r3, #23
 8010034:	4605      	mov	r5, r0
 8010036:	460c      	mov	r4, r1
 8010038:	4616      	mov	r6, r2
 801003a:	d505      	bpl.n	8010048 <__swrite+0x1e>
 801003c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010040:	2302      	movs	r3, #2
 8010042:	2200      	movs	r2, #0
 8010044:	f000 f904 	bl	8010250 <_lseek_r>
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801004e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010052:	81a3      	strh	r3, [r4, #12]
 8010054:	4632      	mov	r2, r6
 8010056:	463b      	mov	r3, r7
 8010058:	4628      	mov	r0, r5
 801005a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801005e:	f000 b93f 	b.w	80102e0 <_write_r>

08010062 <__sseek>:
 8010062:	b510      	push	{r4, lr}
 8010064:	460c      	mov	r4, r1
 8010066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801006a:	f000 f8f1 	bl	8010250 <_lseek_r>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	bf15      	itete	ne
 8010074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801007a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801007e:	81a3      	strheq	r3, [r4, #12]
 8010080:	bf18      	it	ne
 8010082:	81a3      	strhne	r3, [r4, #12]
 8010084:	bd10      	pop	{r4, pc}

08010086 <__sclose>:
 8010086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801008a:	f000 b8d1 	b.w	8010230 <_close_r>

0801008e <__swbuf_r>:
 801008e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010090:	460e      	mov	r6, r1
 8010092:	4614      	mov	r4, r2
 8010094:	4605      	mov	r5, r0
 8010096:	b118      	cbz	r0, 80100a0 <__swbuf_r+0x12>
 8010098:	6a03      	ldr	r3, [r0, #32]
 801009a:	b90b      	cbnz	r3, 80100a0 <__swbuf_r+0x12>
 801009c:	f7ff ff0e 	bl	800febc <__sinit>
 80100a0:	69a3      	ldr	r3, [r4, #24]
 80100a2:	60a3      	str	r3, [r4, #8]
 80100a4:	89a3      	ldrh	r3, [r4, #12]
 80100a6:	071a      	lsls	r2, r3, #28
 80100a8:	d501      	bpl.n	80100ae <__swbuf_r+0x20>
 80100aa:	6923      	ldr	r3, [r4, #16]
 80100ac:	b943      	cbnz	r3, 80100c0 <__swbuf_r+0x32>
 80100ae:	4621      	mov	r1, r4
 80100b0:	4628      	mov	r0, r5
 80100b2:	f000 f82b 	bl	801010c <__swsetup_r>
 80100b6:	b118      	cbz	r0, 80100c0 <__swbuf_r+0x32>
 80100b8:	f04f 37ff 	mov.w	r7, #4294967295
 80100bc:	4638      	mov	r0, r7
 80100be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	6922      	ldr	r2, [r4, #16]
 80100c4:	1a98      	subs	r0, r3, r2
 80100c6:	6963      	ldr	r3, [r4, #20]
 80100c8:	b2f6      	uxtb	r6, r6
 80100ca:	4283      	cmp	r3, r0
 80100cc:	4637      	mov	r7, r6
 80100ce:	dc05      	bgt.n	80100dc <__swbuf_r+0x4e>
 80100d0:	4621      	mov	r1, r4
 80100d2:	4628      	mov	r0, r5
 80100d4:	f001 fd22 	bl	8011b1c <_fflush_r>
 80100d8:	2800      	cmp	r0, #0
 80100da:	d1ed      	bne.n	80100b8 <__swbuf_r+0x2a>
 80100dc:	68a3      	ldr	r3, [r4, #8]
 80100de:	3b01      	subs	r3, #1
 80100e0:	60a3      	str	r3, [r4, #8]
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	1c5a      	adds	r2, r3, #1
 80100e6:	6022      	str	r2, [r4, #0]
 80100e8:	701e      	strb	r6, [r3, #0]
 80100ea:	6962      	ldr	r2, [r4, #20]
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d004      	beq.n	80100fc <__swbuf_r+0x6e>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	07db      	lsls	r3, r3, #31
 80100f6:	d5e1      	bpl.n	80100bc <__swbuf_r+0x2e>
 80100f8:	2e0a      	cmp	r6, #10
 80100fa:	d1df      	bne.n	80100bc <__swbuf_r+0x2e>
 80100fc:	4621      	mov	r1, r4
 80100fe:	4628      	mov	r0, r5
 8010100:	f001 fd0c 	bl	8011b1c <_fflush_r>
 8010104:	2800      	cmp	r0, #0
 8010106:	d0d9      	beq.n	80100bc <__swbuf_r+0x2e>
 8010108:	e7d6      	b.n	80100b8 <__swbuf_r+0x2a>
	...

0801010c <__swsetup_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4b29      	ldr	r3, [pc, #164]	@ (80101b4 <__swsetup_r+0xa8>)
 8010110:	4605      	mov	r5, r0
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	460c      	mov	r4, r1
 8010116:	b118      	cbz	r0, 8010120 <__swsetup_r+0x14>
 8010118:	6a03      	ldr	r3, [r0, #32]
 801011a:	b90b      	cbnz	r3, 8010120 <__swsetup_r+0x14>
 801011c:	f7ff fece 	bl	800febc <__sinit>
 8010120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010124:	0719      	lsls	r1, r3, #28
 8010126:	d422      	bmi.n	801016e <__swsetup_r+0x62>
 8010128:	06da      	lsls	r2, r3, #27
 801012a:	d407      	bmi.n	801013c <__swsetup_r+0x30>
 801012c:	2209      	movs	r2, #9
 801012e:	602a      	str	r2, [r5, #0]
 8010130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010134:	81a3      	strh	r3, [r4, #12]
 8010136:	f04f 30ff 	mov.w	r0, #4294967295
 801013a:	e033      	b.n	80101a4 <__swsetup_r+0x98>
 801013c:	0758      	lsls	r0, r3, #29
 801013e:	d512      	bpl.n	8010166 <__swsetup_r+0x5a>
 8010140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010142:	b141      	cbz	r1, 8010156 <__swsetup_r+0x4a>
 8010144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010148:	4299      	cmp	r1, r3
 801014a:	d002      	beq.n	8010152 <__swsetup_r+0x46>
 801014c:	4628      	mov	r0, r5
 801014e:	f000 ff53 	bl	8010ff8 <_free_r>
 8010152:	2300      	movs	r3, #0
 8010154:	6363      	str	r3, [r4, #52]	@ 0x34
 8010156:	89a3      	ldrh	r3, [r4, #12]
 8010158:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801015c:	81a3      	strh	r3, [r4, #12]
 801015e:	2300      	movs	r3, #0
 8010160:	6063      	str	r3, [r4, #4]
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	f043 0308 	orr.w	r3, r3, #8
 801016c:	81a3      	strh	r3, [r4, #12]
 801016e:	6923      	ldr	r3, [r4, #16]
 8010170:	b94b      	cbnz	r3, 8010186 <__swsetup_r+0x7a>
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801017c:	d003      	beq.n	8010186 <__swsetup_r+0x7a>
 801017e:	4621      	mov	r1, r4
 8010180:	4628      	mov	r0, r5
 8010182:	f001 fd19 	bl	8011bb8 <__smakebuf_r>
 8010186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801018a:	f013 0201 	ands.w	r2, r3, #1
 801018e:	d00a      	beq.n	80101a6 <__swsetup_r+0x9a>
 8010190:	2200      	movs	r2, #0
 8010192:	60a2      	str	r2, [r4, #8]
 8010194:	6962      	ldr	r2, [r4, #20]
 8010196:	4252      	negs	r2, r2
 8010198:	61a2      	str	r2, [r4, #24]
 801019a:	6922      	ldr	r2, [r4, #16]
 801019c:	b942      	cbnz	r2, 80101b0 <__swsetup_r+0xa4>
 801019e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80101a2:	d1c5      	bne.n	8010130 <__swsetup_r+0x24>
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
 80101a6:	0799      	lsls	r1, r3, #30
 80101a8:	bf58      	it	pl
 80101aa:	6962      	ldrpl	r2, [r4, #20]
 80101ac:	60a2      	str	r2, [r4, #8]
 80101ae:	e7f4      	b.n	801019a <__swsetup_r+0x8e>
 80101b0:	2000      	movs	r0, #0
 80101b2:	e7f7      	b.n	80101a4 <__swsetup_r+0x98>
 80101b4:	20000134 	.word	0x20000134

080101b8 <memset>:
 80101b8:	4402      	add	r2, r0
 80101ba:	4603      	mov	r3, r0
 80101bc:	4293      	cmp	r3, r2
 80101be:	d100      	bne.n	80101c2 <memset+0xa>
 80101c0:	4770      	bx	lr
 80101c2:	f803 1b01 	strb.w	r1, [r3], #1
 80101c6:	e7f9      	b.n	80101bc <memset+0x4>

080101c8 <_raise_r>:
 80101c8:	291f      	cmp	r1, #31
 80101ca:	b538      	push	{r3, r4, r5, lr}
 80101cc:	4605      	mov	r5, r0
 80101ce:	460c      	mov	r4, r1
 80101d0:	d904      	bls.n	80101dc <_raise_r+0x14>
 80101d2:	2316      	movs	r3, #22
 80101d4:	6003      	str	r3, [r0, #0]
 80101d6:	f04f 30ff 	mov.w	r0, #4294967295
 80101da:	bd38      	pop	{r3, r4, r5, pc}
 80101dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80101de:	b112      	cbz	r2, 80101e6 <_raise_r+0x1e>
 80101e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101e4:	b94b      	cbnz	r3, 80101fa <_raise_r+0x32>
 80101e6:	4628      	mov	r0, r5
 80101e8:	f000 f868 	bl	80102bc <_getpid_r>
 80101ec:	4622      	mov	r2, r4
 80101ee:	4601      	mov	r1, r0
 80101f0:	4628      	mov	r0, r5
 80101f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101f6:	f000 b84f 	b.w	8010298 <_kill_r>
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d00a      	beq.n	8010214 <_raise_r+0x4c>
 80101fe:	1c59      	adds	r1, r3, #1
 8010200:	d103      	bne.n	801020a <_raise_r+0x42>
 8010202:	2316      	movs	r3, #22
 8010204:	6003      	str	r3, [r0, #0]
 8010206:	2001      	movs	r0, #1
 8010208:	e7e7      	b.n	80101da <_raise_r+0x12>
 801020a:	2100      	movs	r1, #0
 801020c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010210:	4620      	mov	r0, r4
 8010212:	4798      	blx	r3
 8010214:	2000      	movs	r0, #0
 8010216:	e7e0      	b.n	80101da <_raise_r+0x12>

08010218 <raise>:
 8010218:	4b02      	ldr	r3, [pc, #8]	@ (8010224 <raise+0xc>)
 801021a:	4601      	mov	r1, r0
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	f7ff bfd3 	b.w	80101c8 <_raise_r>
 8010222:	bf00      	nop
 8010224:	20000134 	.word	0x20000134

08010228 <_localeconv_r>:
 8010228:	4800      	ldr	r0, [pc, #0]	@ (801022c <_localeconv_r+0x4>)
 801022a:	4770      	bx	lr
 801022c:	20000274 	.word	0x20000274

08010230 <_close_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d06      	ldr	r5, [pc, #24]	@ (801024c <_close_r+0x1c>)
 8010234:	2300      	movs	r3, #0
 8010236:	4604      	mov	r4, r0
 8010238:	4608      	mov	r0, r1
 801023a:	602b      	str	r3, [r5, #0]
 801023c:	f7f2 fcb0 	bl	8002ba0 <_close>
 8010240:	1c43      	adds	r3, r0, #1
 8010242:	d102      	bne.n	801024a <_close_r+0x1a>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	b103      	cbz	r3, 801024a <_close_r+0x1a>
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	bd38      	pop	{r3, r4, r5, pc}
 801024c:	200022c4 	.word	0x200022c4

08010250 <_lseek_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4d07      	ldr	r5, [pc, #28]	@ (8010270 <_lseek_r+0x20>)
 8010254:	4604      	mov	r4, r0
 8010256:	4608      	mov	r0, r1
 8010258:	4611      	mov	r1, r2
 801025a:	2200      	movs	r2, #0
 801025c:	602a      	str	r2, [r5, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	f7f2 fcc5 	bl	8002bee <_lseek>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_lseek_r+0x1e>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_lseek_r+0x1e>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	200022c4 	.word	0x200022c4

08010274 <_read_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4d07      	ldr	r5, [pc, #28]	@ (8010294 <_read_r+0x20>)
 8010278:	4604      	mov	r4, r0
 801027a:	4608      	mov	r0, r1
 801027c:	4611      	mov	r1, r2
 801027e:	2200      	movs	r2, #0
 8010280:	602a      	str	r2, [r5, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	f7f2 fc6f 	bl	8002b66 <_read>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_read_r+0x1e>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	b103      	cbz	r3, 8010292 <_read_r+0x1e>
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	200022c4 	.word	0x200022c4

08010298 <_kill_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4d07      	ldr	r5, [pc, #28]	@ (80102b8 <_kill_r+0x20>)
 801029c:	2300      	movs	r3, #0
 801029e:	4604      	mov	r4, r0
 80102a0:	4608      	mov	r0, r1
 80102a2:	4611      	mov	r1, r2
 80102a4:	602b      	str	r3, [r5, #0]
 80102a6:	f7f2 fc43 	bl	8002b30 <_kill>
 80102aa:	1c43      	adds	r3, r0, #1
 80102ac:	d102      	bne.n	80102b4 <_kill_r+0x1c>
 80102ae:	682b      	ldr	r3, [r5, #0]
 80102b0:	b103      	cbz	r3, 80102b4 <_kill_r+0x1c>
 80102b2:	6023      	str	r3, [r4, #0]
 80102b4:	bd38      	pop	{r3, r4, r5, pc}
 80102b6:	bf00      	nop
 80102b8:	200022c4 	.word	0x200022c4

080102bc <_getpid_r>:
 80102bc:	f7f2 bc30 	b.w	8002b20 <_getpid>

080102c0 <_sbrk_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4d06      	ldr	r5, [pc, #24]	@ (80102dc <_sbrk_r+0x1c>)
 80102c4:	2300      	movs	r3, #0
 80102c6:	4604      	mov	r4, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	602b      	str	r3, [r5, #0]
 80102cc:	f7f2 fc9c 	bl	8002c08 <_sbrk>
 80102d0:	1c43      	adds	r3, r0, #1
 80102d2:	d102      	bne.n	80102da <_sbrk_r+0x1a>
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	b103      	cbz	r3, 80102da <_sbrk_r+0x1a>
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	bd38      	pop	{r3, r4, r5, pc}
 80102dc:	200022c4 	.word	0x200022c4

080102e0 <_write_r>:
 80102e0:	b538      	push	{r3, r4, r5, lr}
 80102e2:	4d07      	ldr	r5, [pc, #28]	@ (8010300 <_write_r+0x20>)
 80102e4:	4604      	mov	r4, r0
 80102e6:	4608      	mov	r0, r1
 80102e8:	4611      	mov	r1, r2
 80102ea:	2200      	movs	r2, #0
 80102ec:	602a      	str	r2, [r5, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	f7f1 fed4 	bl	800209c <_write>
 80102f4:	1c43      	adds	r3, r0, #1
 80102f6:	d102      	bne.n	80102fe <_write_r+0x1e>
 80102f8:	682b      	ldr	r3, [r5, #0]
 80102fa:	b103      	cbz	r3, 80102fe <_write_r+0x1e>
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	bd38      	pop	{r3, r4, r5, pc}
 8010300:	200022c4 	.word	0x200022c4

08010304 <__errno>:
 8010304:	4b01      	ldr	r3, [pc, #4]	@ (801030c <__errno+0x8>)
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	4770      	bx	lr
 801030a:	bf00      	nop
 801030c:	20000134 	.word	0x20000134

08010310 <__libc_init_array>:
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	4d0d      	ldr	r5, [pc, #52]	@ (8010348 <__libc_init_array+0x38>)
 8010314:	4c0d      	ldr	r4, [pc, #52]	@ (801034c <__libc_init_array+0x3c>)
 8010316:	1b64      	subs	r4, r4, r5
 8010318:	10a4      	asrs	r4, r4, #2
 801031a:	2600      	movs	r6, #0
 801031c:	42a6      	cmp	r6, r4
 801031e:	d109      	bne.n	8010334 <__libc_init_array+0x24>
 8010320:	4d0b      	ldr	r5, [pc, #44]	@ (8010350 <__libc_init_array+0x40>)
 8010322:	4c0c      	ldr	r4, [pc, #48]	@ (8010354 <__libc_init_array+0x44>)
 8010324:	f001 fd18 	bl	8011d58 <_init>
 8010328:	1b64      	subs	r4, r4, r5
 801032a:	10a4      	asrs	r4, r4, #2
 801032c:	2600      	movs	r6, #0
 801032e:	42a6      	cmp	r6, r4
 8010330:	d105      	bne.n	801033e <__libc_init_array+0x2e>
 8010332:	bd70      	pop	{r4, r5, r6, pc}
 8010334:	f855 3b04 	ldr.w	r3, [r5], #4
 8010338:	4798      	blx	r3
 801033a:	3601      	adds	r6, #1
 801033c:	e7ee      	b.n	801031c <__libc_init_array+0xc>
 801033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010342:	4798      	blx	r3
 8010344:	3601      	adds	r6, #1
 8010346:	e7f2      	b.n	801032e <__libc_init_array+0x1e>
 8010348:	08012330 	.word	0x08012330
 801034c:	08012330 	.word	0x08012330
 8010350:	08012330 	.word	0x08012330
 8010354:	08012334 	.word	0x08012334

08010358 <__retarget_lock_init_recursive>:
 8010358:	4770      	bx	lr

0801035a <__retarget_lock_acquire_recursive>:
 801035a:	4770      	bx	lr

0801035c <__retarget_lock_release_recursive>:
 801035c:	4770      	bx	lr

0801035e <quorem>:
 801035e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010362:	6903      	ldr	r3, [r0, #16]
 8010364:	690c      	ldr	r4, [r1, #16]
 8010366:	42a3      	cmp	r3, r4
 8010368:	4607      	mov	r7, r0
 801036a:	db7e      	blt.n	801046a <quorem+0x10c>
 801036c:	3c01      	subs	r4, #1
 801036e:	f101 0814 	add.w	r8, r1, #20
 8010372:	00a3      	lsls	r3, r4, #2
 8010374:	f100 0514 	add.w	r5, r0, #20
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801037e:	9301      	str	r3, [sp, #4]
 8010380:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010388:	3301      	adds	r3, #1
 801038a:	429a      	cmp	r2, r3
 801038c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010390:	fbb2 f6f3 	udiv	r6, r2, r3
 8010394:	d32e      	bcc.n	80103f4 <quorem+0x96>
 8010396:	f04f 0a00 	mov.w	sl, #0
 801039a:	46c4      	mov	ip, r8
 801039c:	46ae      	mov	lr, r5
 801039e:	46d3      	mov	fp, sl
 80103a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103a4:	b298      	uxth	r0, r3
 80103a6:	fb06 a000 	mla	r0, r6, r0, sl
 80103aa:	0c02      	lsrs	r2, r0, #16
 80103ac:	0c1b      	lsrs	r3, r3, #16
 80103ae:	fb06 2303 	mla	r3, r6, r3, r2
 80103b2:	f8de 2000 	ldr.w	r2, [lr]
 80103b6:	b280      	uxth	r0, r0
 80103b8:	b292      	uxth	r2, r2
 80103ba:	1a12      	subs	r2, r2, r0
 80103bc:	445a      	add	r2, fp
 80103be:	f8de 0000 	ldr.w	r0, [lr]
 80103c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80103cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80103d0:	b292      	uxth	r2, r2
 80103d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80103d6:	45e1      	cmp	r9, ip
 80103d8:	f84e 2b04 	str.w	r2, [lr], #4
 80103dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80103e0:	d2de      	bcs.n	80103a0 <quorem+0x42>
 80103e2:	9b00      	ldr	r3, [sp, #0]
 80103e4:	58eb      	ldr	r3, [r5, r3]
 80103e6:	b92b      	cbnz	r3, 80103f4 <quorem+0x96>
 80103e8:	9b01      	ldr	r3, [sp, #4]
 80103ea:	3b04      	subs	r3, #4
 80103ec:	429d      	cmp	r5, r3
 80103ee:	461a      	mov	r2, r3
 80103f0:	d32f      	bcc.n	8010452 <quorem+0xf4>
 80103f2:	613c      	str	r4, [r7, #16]
 80103f4:	4638      	mov	r0, r7
 80103f6:	f001 f8c3 	bl	8011580 <__mcmp>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	db25      	blt.n	801044a <quorem+0xec>
 80103fe:	4629      	mov	r1, r5
 8010400:	2000      	movs	r0, #0
 8010402:	f858 2b04 	ldr.w	r2, [r8], #4
 8010406:	f8d1 c000 	ldr.w	ip, [r1]
 801040a:	fa1f fe82 	uxth.w	lr, r2
 801040e:	fa1f f38c 	uxth.w	r3, ip
 8010412:	eba3 030e 	sub.w	r3, r3, lr
 8010416:	4403      	add	r3, r0
 8010418:	0c12      	lsrs	r2, r2, #16
 801041a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801041e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010422:	b29b      	uxth	r3, r3
 8010424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010428:	45c1      	cmp	r9, r8
 801042a:	f841 3b04 	str.w	r3, [r1], #4
 801042e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010432:	d2e6      	bcs.n	8010402 <quorem+0xa4>
 8010434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801043c:	b922      	cbnz	r2, 8010448 <quorem+0xea>
 801043e:	3b04      	subs	r3, #4
 8010440:	429d      	cmp	r5, r3
 8010442:	461a      	mov	r2, r3
 8010444:	d30b      	bcc.n	801045e <quorem+0x100>
 8010446:	613c      	str	r4, [r7, #16]
 8010448:	3601      	adds	r6, #1
 801044a:	4630      	mov	r0, r6
 801044c:	b003      	add	sp, #12
 801044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010452:	6812      	ldr	r2, [r2, #0]
 8010454:	3b04      	subs	r3, #4
 8010456:	2a00      	cmp	r2, #0
 8010458:	d1cb      	bne.n	80103f2 <quorem+0x94>
 801045a:	3c01      	subs	r4, #1
 801045c:	e7c6      	b.n	80103ec <quorem+0x8e>
 801045e:	6812      	ldr	r2, [r2, #0]
 8010460:	3b04      	subs	r3, #4
 8010462:	2a00      	cmp	r2, #0
 8010464:	d1ef      	bne.n	8010446 <quorem+0xe8>
 8010466:	3c01      	subs	r4, #1
 8010468:	e7ea      	b.n	8010440 <quorem+0xe2>
 801046a:	2000      	movs	r0, #0
 801046c:	e7ee      	b.n	801044c <quorem+0xee>
	...

08010470 <_dtoa_r>:
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	69c7      	ldr	r7, [r0, #28]
 8010476:	b099      	sub	sp, #100	@ 0x64
 8010478:	ed8d 0b02 	vstr	d0, [sp, #8]
 801047c:	ec55 4b10 	vmov	r4, r5, d0
 8010480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010482:	9109      	str	r1, [sp, #36]	@ 0x24
 8010484:	4683      	mov	fp, r0
 8010486:	920e      	str	r2, [sp, #56]	@ 0x38
 8010488:	9313      	str	r3, [sp, #76]	@ 0x4c
 801048a:	b97f      	cbnz	r7, 80104ac <_dtoa_r+0x3c>
 801048c:	2010      	movs	r0, #16
 801048e:	f7fe ff7b 	bl	800f388 <malloc>
 8010492:	4602      	mov	r2, r0
 8010494:	f8cb 001c 	str.w	r0, [fp, #28]
 8010498:	b920      	cbnz	r0, 80104a4 <_dtoa_r+0x34>
 801049a:	4ba7      	ldr	r3, [pc, #668]	@ (8010738 <_dtoa_r+0x2c8>)
 801049c:	21ef      	movs	r1, #239	@ 0xef
 801049e:	48a7      	ldr	r0, [pc, #668]	@ (801073c <_dtoa_r+0x2cc>)
 80104a0:	f001 fbf6 	bl	8011c90 <__assert_func>
 80104a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80104a8:	6007      	str	r7, [r0, #0]
 80104aa:	60c7      	str	r7, [r0, #12]
 80104ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104b0:	6819      	ldr	r1, [r3, #0]
 80104b2:	b159      	cbz	r1, 80104cc <_dtoa_r+0x5c>
 80104b4:	685a      	ldr	r2, [r3, #4]
 80104b6:	604a      	str	r2, [r1, #4]
 80104b8:	2301      	movs	r3, #1
 80104ba:	4093      	lsls	r3, r2
 80104bc:	608b      	str	r3, [r1, #8]
 80104be:	4658      	mov	r0, fp
 80104c0:	f000 fe24 	bl	801110c <_Bfree>
 80104c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	1e2b      	subs	r3, r5, #0
 80104ce:	bfb9      	ittee	lt
 80104d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80104d4:	9303      	strlt	r3, [sp, #12]
 80104d6:	2300      	movge	r3, #0
 80104d8:	6033      	strge	r3, [r6, #0]
 80104da:	9f03      	ldr	r7, [sp, #12]
 80104dc:	4b98      	ldr	r3, [pc, #608]	@ (8010740 <_dtoa_r+0x2d0>)
 80104de:	bfbc      	itt	lt
 80104e0:	2201      	movlt	r2, #1
 80104e2:	6032      	strlt	r2, [r6, #0]
 80104e4:	43bb      	bics	r3, r7
 80104e6:	d112      	bne.n	801050e <_dtoa_r+0x9e>
 80104e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80104ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80104ee:	6013      	str	r3, [r2, #0]
 80104f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80104f4:	4323      	orrs	r3, r4
 80104f6:	f000 854d 	beq.w	8010f94 <_dtoa_r+0xb24>
 80104fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010754 <_dtoa_r+0x2e4>
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 854f 	beq.w	8010fa4 <_dtoa_r+0xb34>
 8010506:	f10a 0303 	add.w	r3, sl, #3
 801050a:	f000 bd49 	b.w	8010fa0 <_dtoa_r+0xb30>
 801050e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010512:	2200      	movs	r2, #0
 8010514:	ec51 0b17 	vmov	r0, r1, d7
 8010518:	2300      	movs	r3, #0
 801051a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801051e:	f7f0 fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 8010522:	4680      	mov	r8, r0
 8010524:	b158      	cbz	r0, 801053e <_dtoa_r+0xce>
 8010526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010528:	2301      	movs	r3, #1
 801052a:	6013      	str	r3, [r2, #0]
 801052c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801052e:	b113      	cbz	r3, 8010536 <_dtoa_r+0xc6>
 8010530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010532:	4b84      	ldr	r3, [pc, #528]	@ (8010744 <_dtoa_r+0x2d4>)
 8010534:	6013      	str	r3, [r2, #0]
 8010536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010758 <_dtoa_r+0x2e8>
 801053a:	f000 bd33 	b.w	8010fa4 <_dtoa_r+0xb34>
 801053e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010542:	aa16      	add	r2, sp, #88	@ 0x58
 8010544:	a917      	add	r1, sp, #92	@ 0x5c
 8010546:	4658      	mov	r0, fp
 8010548:	f001 f8ca 	bl	80116e0 <__d2b>
 801054c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010550:	4681      	mov	r9, r0
 8010552:	2e00      	cmp	r6, #0
 8010554:	d077      	beq.n	8010646 <_dtoa_r+0x1d6>
 8010556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801055c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801056c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010570:	4619      	mov	r1, r3
 8010572:	2200      	movs	r2, #0
 8010574:	4b74      	ldr	r3, [pc, #464]	@ (8010748 <_dtoa_r+0x2d8>)
 8010576:	f7ef fe8f 	bl	8000298 <__aeabi_dsub>
 801057a:	a369      	add	r3, pc, #420	@ (adr r3, 8010720 <_dtoa_r+0x2b0>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	f7f0 f842 	bl	8000608 <__aeabi_dmul>
 8010584:	a368      	add	r3, pc, #416	@ (adr r3, 8010728 <_dtoa_r+0x2b8>)
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	f7ef fe87 	bl	800029c <__adddf3>
 801058e:	4604      	mov	r4, r0
 8010590:	4630      	mov	r0, r6
 8010592:	460d      	mov	r5, r1
 8010594:	f7ef ffce 	bl	8000534 <__aeabi_i2d>
 8010598:	a365      	add	r3, pc, #404	@ (adr r3, 8010730 <_dtoa_r+0x2c0>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f7f0 f833 	bl	8000608 <__aeabi_dmul>
 80105a2:	4602      	mov	r2, r0
 80105a4:	460b      	mov	r3, r1
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	f7ef fe77 	bl	800029c <__adddf3>
 80105ae:	4604      	mov	r4, r0
 80105b0:	460d      	mov	r5, r1
 80105b2:	f7f0 fad9 	bl	8000b68 <__aeabi_d2iz>
 80105b6:	2200      	movs	r2, #0
 80105b8:	4607      	mov	r7, r0
 80105ba:	2300      	movs	r3, #0
 80105bc:	4620      	mov	r0, r4
 80105be:	4629      	mov	r1, r5
 80105c0:	f7f0 fa94 	bl	8000aec <__aeabi_dcmplt>
 80105c4:	b140      	cbz	r0, 80105d8 <_dtoa_r+0x168>
 80105c6:	4638      	mov	r0, r7
 80105c8:	f7ef ffb4 	bl	8000534 <__aeabi_i2d>
 80105cc:	4622      	mov	r2, r4
 80105ce:	462b      	mov	r3, r5
 80105d0:	f7f0 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 80105d4:	b900      	cbnz	r0, 80105d8 <_dtoa_r+0x168>
 80105d6:	3f01      	subs	r7, #1
 80105d8:	2f16      	cmp	r7, #22
 80105da:	d851      	bhi.n	8010680 <_dtoa_r+0x210>
 80105dc:	4b5b      	ldr	r3, [pc, #364]	@ (801074c <_dtoa_r+0x2dc>)
 80105de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80105e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105ea:	f7f0 fa7f 	bl	8000aec <__aeabi_dcmplt>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d048      	beq.n	8010684 <_dtoa_r+0x214>
 80105f2:	3f01      	subs	r7, #1
 80105f4:	2300      	movs	r3, #0
 80105f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80105f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80105fa:	1b9b      	subs	r3, r3, r6
 80105fc:	1e5a      	subs	r2, r3, #1
 80105fe:	bf44      	itt	mi
 8010600:	f1c3 0801 	rsbmi	r8, r3, #1
 8010604:	2300      	movmi	r3, #0
 8010606:	9208      	str	r2, [sp, #32]
 8010608:	bf54      	ite	pl
 801060a:	f04f 0800 	movpl.w	r8, #0
 801060e:	9308      	strmi	r3, [sp, #32]
 8010610:	2f00      	cmp	r7, #0
 8010612:	db39      	blt.n	8010688 <_dtoa_r+0x218>
 8010614:	9b08      	ldr	r3, [sp, #32]
 8010616:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010618:	443b      	add	r3, r7
 801061a:	9308      	str	r3, [sp, #32]
 801061c:	2300      	movs	r3, #0
 801061e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010622:	2b09      	cmp	r3, #9
 8010624:	d864      	bhi.n	80106f0 <_dtoa_r+0x280>
 8010626:	2b05      	cmp	r3, #5
 8010628:	bfc4      	itt	gt
 801062a:	3b04      	subgt	r3, #4
 801062c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801062e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010630:	f1a3 0302 	sub.w	r3, r3, #2
 8010634:	bfcc      	ite	gt
 8010636:	2400      	movgt	r4, #0
 8010638:	2401      	movle	r4, #1
 801063a:	2b03      	cmp	r3, #3
 801063c:	d863      	bhi.n	8010706 <_dtoa_r+0x296>
 801063e:	e8df f003 	tbb	[pc, r3]
 8010642:	372a      	.short	0x372a
 8010644:	5535      	.short	0x5535
 8010646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801064a:	441e      	add	r6, r3
 801064c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010650:	2b20      	cmp	r3, #32
 8010652:	bfc1      	itttt	gt
 8010654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010658:	409f      	lslgt	r7, r3
 801065a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801065e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010662:	bfd6      	itet	le
 8010664:	f1c3 0320 	rsble	r3, r3, #32
 8010668:	ea47 0003 	orrgt.w	r0, r7, r3
 801066c:	fa04 f003 	lslle.w	r0, r4, r3
 8010670:	f7ef ff50 	bl	8000514 <__aeabi_ui2d>
 8010674:	2201      	movs	r2, #1
 8010676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801067a:	3e01      	subs	r6, #1
 801067c:	9214      	str	r2, [sp, #80]	@ 0x50
 801067e:	e777      	b.n	8010570 <_dtoa_r+0x100>
 8010680:	2301      	movs	r3, #1
 8010682:	e7b8      	b.n	80105f6 <_dtoa_r+0x186>
 8010684:	9012      	str	r0, [sp, #72]	@ 0x48
 8010686:	e7b7      	b.n	80105f8 <_dtoa_r+0x188>
 8010688:	427b      	negs	r3, r7
 801068a:	930a      	str	r3, [sp, #40]	@ 0x28
 801068c:	2300      	movs	r3, #0
 801068e:	eba8 0807 	sub.w	r8, r8, r7
 8010692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010694:	e7c4      	b.n	8010620 <_dtoa_r+0x1b0>
 8010696:	2300      	movs	r3, #0
 8010698:	930b      	str	r3, [sp, #44]	@ 0x2c
 801069a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801069c:	2b00      	cmp	r3, #0
 801069e:	dc35      	bgt.n	801070c <_dtoa_r+0x29c>
 80106a0:	2301      	movs	r3, #1
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	9307      	str	r3, [sp, #28]
 80106a6:	461a      	mov	r2, r3
 80106a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80106aa:	e00b      	b.n	80106c4 <_dtoa_r+0x254>
 80106ac:	2301      	movs	r3, #1
 80106ae:	e7f3      	b.n	8010698 <_dtoa_r+0x228>
 80106b0:	2300      	movs	r3, #0
 80106b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106b6:	18fb      	adds	r3, r7, r3
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	3301      	adds	r3, #1
 80106bc:	2b01      	cmp	r3, #1
 80106be:	9307      	str	r3, [sp, #28]
 80106c0:	bfb8      	it	lt
 80106c2:	2301      	movlt	r3, #1
 80106c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80106c8:	2100      	movs	r1, #0
 80106ca:	2204      	movs	r2, #4
 80106cc:	f102 0514 	add.w	r5, r2, #20
 80106d0:	429d      	cmp	r5, r3
 80106d2:	d91f      	bls.n	8010714 <_dtoa_r+0x2a4>
 80106d4:	6041      	str	r1, [r0, #4]
 80106d6:	4658      	mov	r0, fp
 80106d8:	f000 fcd8 	bl	801108c <_Balloc>
 80106dc:	4682      	mov	sl, r0
 80106de:	2800      	cmp	r0, #0
 80106e0:	d13c      	bne.n	801075c <_dtoa_r+0x2ec>
 80106e2:	4b1b      	ldr	r3, [pc, #108]	@ (8010750 <_dtoa_r+0x2e0>)
 80106e4:	4602      	mov	r2, r0
 80106e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80106ea:	e6d8      	b.n	801049e <_dtoa_r+0x2e>
 80106ec:	2301      	movs	r3, #1
 80106ee:	e7e0      	b.n	80106b2 <_dtoa_r+0x242>
 80106f0:	2401      	movs	r4, #1
 80106f2:	2300      	movs	r3, #0
 80106f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80106f8:	f04f 33ff 	mov.w	r3, #4294967295
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	9307      	str	r3, [sp, #28]
 8010700:	2200      	movs	r2, #0
 8010702:	2312      	movs	r3, #18
 8010704:	e7d0      	b.n	80106a8 <_dtoa_r+0x238>
 8010706:	2301      	movs	r3, #1
 8010708:	930b      	str	r3, [sp, #44]	@ 0x2c
 801070a:	e7f5      	b.n	80106f8 <_dtoa_r+0x288>
 801070c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	9307      	str	r3, [sp, #28]
 8010712:	e7d7      	b.n	80106c4 <_dtoa_r+0x254>
 8010714:	3101      	adds	r1, #1
 8010716:	0052      	lsls	r2, r2, #1
 8010718:	e7d8      	b.n	80106cc <_dtoa_r+0x25c>
 801071a:	bf00      	nop
 801071c:	f3af 8000 	nop.w
 8010720:	636f4361 	.word	0x636f4361
 8010724:	3fd287a7 	.word	0x3fd287a7
 8010728:	8b60c8b3 	.word	0x8b60c8b3
 801072c:	3fc68a28 	.word	0x3fc68a28
 8010730:	509f79fb 	.word	0x509f79fb
 8010734:	3fd34413 	.word	0x3fd34413
 8010738:	08011ff9 	.word	0x08011ff9
 801073c:	08012010 	.word	0x08012010
 8010740:	7ff00000 	.word	0x7ff00000
 8010744:	08011fc9 	.word	0x08011fc9
 8010748:	3ff80000 	.word	0x3ff80000
 801074c:	08012108 	.word	0x08012108
 8010750:	08012068 	.word	0x08012068
 8010754:	08011ff5 	.word	0x08011ff5
 8010758:	08011fc8 	.word	0x08011fc8
 801075c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010760:	6018      	str	r0, [r3, #0]
 8010762:	9b07      	ldr	r3, [sp, #28]
 8010764:	2b0e      	cmp	r3, #14
 8010766:	f200 80a4 	bhi.w	80108b2 <_dtoa_r+0x442>
 801076a:	2c00      	cmp	r4, #0
 801076c:	f000 80a1 	beq.w	80108b2 <_dtoa_r+0x442>
 8010770:	2f00      	cmp	r7, #0
 8010772:	dd33      	ble.n	80107dc <_dtoa_r+0x36c>
 8010774:	4bad      	ldr	r3, [pc, #692]	@ (8010a2c <_dtoa_r+0x5bc>)
 8010776:	f007 020f 	and.w	r2, r7, #15
 801077a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801077e:	ed93 7b00 	vldr	d7, [r3]
 8010782:	05f8      	lsls	r0, r7, #23
 8010784:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010788:	ea4f 1427 	mov.w	r4, r7, asr #4
 801078c:	d516      	bpl.n	80107bc <_dtoa_r+0x34c>
 801078e:	4ba8      	ldr	r3, [pc, #672]	@ (8010a30 <_dtoa_r+0x5c0>)
 8010790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010798:	f7f0 f860 	bl	800085c <__aeabi_ddiv>
 801079c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107a0:	f004 040f 	and.w	r4, r4, #15
 80107a4:	2603      	movs	r6, #3
 80107a6:	4da2      	ldr	r5, [pc, #648]	@ (8010a30 <_dtoa_r+0x5c0>)
 80107a8:	b954      	cbnz	r4, 80107c0 <_dtoa_r+0x350>
 80107aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107b2:	f7f0 f853 	bl	800085c <__aeabi_ddiv>
 80107b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107ba:	e028      	b.n	801080e <_dtoa_r+0x39e>
 80107bc:	2602      	movs	r6, #2
 80107be:	e7f2      	b.n	80107a6 <_dtoa_r+0x336>
 80107c0:	07e1      	lsls	r1, r4, #31
 80107c2:	d508      	bpl.n	80107d6 <_dtoa_r+0x366>
 80107c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107cc:	f7ef ff1c 	bl	8000608 <__aeabi_dmul>
 80107d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107d4:	3601      	adds	r6, #1
 80107d6:	1064      	asrs	r4, r4, #1
 80107d8:	3508      	adds	r5, #8
 80107da:	e7e5      	b.n	80107a8 <_dtoa_r+0x338>
 80107dc:	f000 80d2 	beq.w	8010984 <_dtoa_r+0x514>
 80107e0:	427c      	negs	r4, r7
 80107e2:	4b92      	ldr	r3, [pc, #584]	@ (8010a2c <_dtoa_r+0x5bc>)
 80107e4:	4d92      	ldr	r5, [pc, #584]	@ (8010a30 <_dtoa_r+0x5c0>)
 80107e6:	f004 020f 	and.w	r2, r4, #15
 80107ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107f6:	f7ef ff07 	bl	8000608 <__aeabi_dmul>
 80107fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107fe:	1124      	asrs	r4, r4, #4
 8010800:	2300      	movs	r3, #0
 8010802:	2602      	movs	r6, #2
 8010804:	2c00      	cmp	r4, #0
 8010806:	f040 80b2 	bne.w	801096e <_dtoa_r+0x4fe>
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1d3      	bne.n	80107b6 <_dtoa_r+0x346>
 801080e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f000 80b7 	beq.w	8010988 <_dtoa_r+0x518>
 801081a:	4b86      	ldr	r3, [pc, #536]	@ (8010a34 <_dtoa_r+0x5c4>)
 801081c:	2200      	movs	r2, #0
 801081e:	4620      	mov	r0, r4
 8010820:	4629      	mov	r1, r5
 8010822:	f7f0 f963 	bl	8000aec <__aeabi_dcmplt>
 8010826:	2800      	cmp	r0, #0
 8010828:	f000 80ae 	beq.w	8010988 <_dtoa_r+0x518>
 801082c:	9b07      	ldr	r3, [sp, #28]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 80aa 	beq.w	8010988 <_dtoa_r+0x518>
 8010834:	9b00      	ldr	r3, [sp, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	dd37      	ble.n	80108aa <_dtoa_r+0x43a>
 801083a:	1e7b      	subs	r3, r7, #1
 801083c:	9304      	str	r3, [sp, #16]
 801083e:	4620      	mov	r0, r4
 8010840:	4b7d      	ldr	r3, [pc, #500]	@ (8010a38 <_dtoa_r+0x5c8>)
 8010842:	2200      	movs	r2, #0
 8010844:	4629      	mov	r1, r5
 8010846:	f7ef fedf 	bl	8000608 <__aeabi_dmul>
 801084a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801084e:	9c00      	ldr	r4, [sp, #0]
 8010850:	3601      	adds	r6, #1
 8010852:	4630      	mov	r0, r6
 8010854:	f7ef fe6e 	bl	8000534 <__aeabi_i2d>
 8010858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801085c:	f7ef fed4 	bl	8000608 <__aeabi_dmul>
 8010860:	4b76      	ldr	r3, [pc, #472]	@ (8010a3c <_dtoa_r+0x5cc>)
 8010862:	2200      	movs	r2, #0
 8010864:	f7ef fd1a 	bl	800029c <__adddf3>
 8010868:	4605      	mov	r5, r0
 801086a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801086e:	2c00      	cmp	r4, #0
 8010870:	f040 808d 	bne.w	801098e <_dtoa_r+0x51e>
 8010874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010878:	4b71      	ldr	r3, [pc, #452]	@ (8010a40 <_dtoa_r+0x5d0>)
 801087a:	2200      	movs	r2, #0
 801087c:	f7ef fd0c 	bl	8000298 <__aeabi_dsub>
 8010880:	4602      	mov	r2, r0
 8010882:	460b      	mov	r3, r1
 8010884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010888:	462a      	mov	r2, r5
 801088a:	4633      	mov	r3, r6
 801088c:	f7f0 f94c 	bl	8000b28 <__aeabi_dcmpgt>
 8010890:	2800      	cmp	r0, #0
 8010892:	f040 828b 	bne.w	8010dac <_dtoa_r+0x93c>
 8010896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801089a:	462a      	mov	r2, r5
 801089c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80108a0:	f7f0 f924 	bl	8000aec <__aeabi_dcmplt>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	f040 8128 	bne.w	8010afa <_dtoa_r+0x68a>
 80108aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80108ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f2c0 815a 	blt.w	8010b6e <_dtoa_r+0x6fe>
 80108ba:	2f0e      	cmp	r7, #14
 80108bc:	f300 8157 	bgt.w	8010b6e <_dtoa_r+0x6fe>
 80108c0:	4b5a      	ldr	r3, [pc, #360]	@ (8010a2c <_dtoa_r+0x5bc>)
 80108c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108c6:	ed93 7b00 	vldr	d7, [r3]
 80108ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	ed8d 7b00 	vstr	d7, [sp]
 80108d2:	da03      	bge.n	80108dc <_dtoa_r+0x46c>
 80108d4:	9b07      	ldr	r3, [sp, #28]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f340 8101 	ble.w	8010ade <_dtoa_r+0x66e>
 80108dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108e0:	4656      	mov	r6, sl
 80108e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e6:	4620      	mov	r0, r4
 80108e8:	4629      	mov	r1, r5
 80108ea:	f7ef ffb7 	bl	800085c <__aeabi_ddiv>
 80108ee:	f7f0 f93b 	bl	8000b68 <__aeabi_d2iz>
 80108f2:	4680      	mov	r8, r0
 80108f4:	f7ef fe1e 	bl	8000534 <__aeabi_i2d>
 80108f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108fc:	f7ef fe84 	bl	8000608 <__aeabi_dmul>
 8010900:	4602      	mov	r2, r0
 8010902:	460b      	mov	r3, r1
 8010904:	4620      	mov	r0, r4
 8010906:	4629      	mov	r1, r5
 8010908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801090c:	f7ef fcc4 	bl	8000298 <__aeabi_dsub>
 8010910:	f806 4b01 	strb.w	r4, [r6], #1
 8010914:	9d07      	ldr	r5, [sp, #28]
 8010916:	eba6 040a 	sub.w	r4, r6, sl
 801091a:	42a5      	cmp	r5, r4
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	f040 8117 	bne.w	8010b52 <_dtoa_r+0x6e2>
 8010924:	f7ef fcba 	bl	800029c <__adddf3>
 8010928:	e9dd 2300 	ldrd	r2, r3, [sp]
 801092c:	4604      	mov	r4, r0
 801092e:	460d      	mov	r5, r1
 8010930:	f7f0 f8fa 	bl	8000b28 <__aeabi_dcmpgt>
 8010934:	2800      	cmp	r0, #0
 8010936:	f040 80f9 	bne.w	8010b2c <_dtoa_r+0x6bc>
 801093a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801093e:	4620      	mov	r0, r4
 8010940:	4629      	mov	r1, r5
 8010942:	f7f0 f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010946:	b118      	cbz	r0, 8010950 <_dtoa_r+0x4e0>
 8010948:	f018 0f01 	tst.w	r8, #1
 801094c:	f040 80ee 	bne.w	8010b2c <_dtoa_r+0x6bc>
 8010950:	4649      	mov	r1, r9
 8010952:	4658      	mov	r0, fp
 8010954:	f000 fbda 	bl	801110c <_Bfree>
 8010958:	2300      	movs	r3, #0
 801095a:	7033      	strb	r3, [r6, #0]
 801095c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801095e:	3701      	adds	r7, #1
 8010960:	601f      	str	r7, [r3, #0]
 8010962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 831d 	beq.w	8010fa4 <_dtoa_r+0xb34>
 801096a:	601e      	str	r6, [r3, #0]
 801096c:	e31a      	b.n	8010fa4 <_dtoa_r+0xb34>
 801096e:	07e2      	lsls	r2, r4, #31
 8010970:	d505      	bpl.n	801097e <_dtoa_r+0x50e>
 8010972:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010976:	f7ef fe47 	bl	8000608 <__aeabi_dmul>
 801097a:	3601      	adds	r6, #1
 801097c:	2301      	movs	r3, #1
 801097e:	1064      	asrs	r4, r4, #1
 8010980:	3508      	adds	r5, #8
 8010982:	e73f      	b.n	8010804 <_dtoa_r+0x394>
 8010984:	2602      	movs	r6, #2
 8010986:	e742      	b.n	801080e <_dtoa_r+0x39e>
 8010988:	9c07      	ldr	r4, [sp, #28]
 801098a:	9704      	str	r7, [sp, #16]
 801098c:	e761      	b.n	8010852 <_dtoa_r+0x3e2>
 801098e:	4b27      	ldr	r3, [pc, #156]	@ (8010a2c <_dtoa_r+0x5bc>)
 8010990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801099a:	4454      	add	r4, sl
 801099c:	2900      	cmp	r1, #0
 801099e:	d053      	beq.n	8010a48 <_dtoa_r+0x5d8>
 80109a0:	4928      	ldr	r1, [pc, #160]	@ (8010a44 <_dtoa_r+0x5d4>)
 80109a2:	2000      	movs	r0, #0
 80109a4:	f7ef ff5a 	bl	800085c <__aeabi_ddiv>
 80109a8:	4633      	mov	r3, r6
 80109aa:	462a      	mov	r2, r5
 80109ac:	f7ef fc74 	bl	8000298 <__aeabi_dsub>
 80109b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109b4:	4656      	mov	r6, sl
 80109b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ba:	f7f0 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80109be:	4605      	mov	r5, r0
 80109c0:	f7ef fdb8 	bl	8000534 <__aeabi_i2d>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109cc:	f7ef fc64 	bl	8000298 <__aeabi_dsub>
 80109d0:	3530      	adds	r5, #48	@ 0x30
 80109d2:	4602      	mov	r2, r0
 80109d4:	460b      	mov	r3, r1
 80109d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109da:	f806 5b01 	strb.w	r5, [r6], #1
 80109de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80109e2:	f7f0 f883 	bl	8000aec <__aeabi_dcmplt>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d171      	bne.n	8010ace <_dtoa_r+0x65e>
 80109ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109ee:	4911      	ldr	r1, [pc, #68]	@ (8010a34 <_dtoa_r+0x5c4>)
 80109f0:	2000      	movs	r0, #0
 80109f2:	f7ef fc51 	bl	8000298 <__aeabi_dsub>
 80109f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80109fa:	f7f0 f877 	bl	8000aec <__aeabi_dcmplt>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	f040 8095 	bne.w	8010b2e <_dtoa_r+0x6be>
 8010a04:	42a6      	cmp	r6, r4
 8010a06:	f43f af50 	beq.w	80108aa <_dtoa_r+0x43a>
 8010a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a38 <_dtoa_r+0x5c8>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	f7ef fdf9 	bl	8000608 <__aeabi_dmul>
 8010a16:	4b08      	ldr	r3, [pc, #32]	@ (8010a38 <_dtoa_r+0x5c8>)
 8010a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a22:	f7ef fdf1 	bl	8000608 <__aeabi_dmul>
 8010a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a2a:	e7c4      	b.n	80109b6 <_dtoa_r+0x546>
 8010a2c:	08012108 	.word	0x08012108
 8010a30:	080120e0 	.word	0x080120e0
 8010a34:	3ff00000 	.word	0x3ff00000
 8010a38:	40240000 	.word	0x40240000
 8010a3c:	401c0000 	.word	0x401c0000
 8010a40:	40140000 	.word	0x40140000
 8010a44:	3fe00000 	.word	0x3fe00000
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f7ef fddc 	bl	8000608 <__aeabi_dmul>
 8010a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a54:	9415      	str	r4, [sp, #84]	@ 0x54
 8010a56:	4656      	mov	r6, sl
 8010a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a5c:	f7f0 f884 	bl	8000b68 <__aeabi_d2iz>
 8010a60:	4605      	mov	r5, r0
 8010a62:	f7ef fd67 	bl	8000534 <__aeabi_i2d>
 8010a66:	4602      	mov	r2, r0
 8010a68:	460b      	mov	r3, r1
 8010a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a6e:	f7ef fc13 	bl	8000298 <__aeabi_dsub>
 8010a72:	3530      	adds	r5, #48	@ 0x30
 8010a74:	f806 5b01 	strb.w	r5, [r6], #1
 8010a78:	4602      	mov	r2, r0
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	42a6      	cmp	r6, r4
 8010a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a82:	f04f 0200 	mov.w	r2, #0
 8010a86:	d124      	bne.n	8010ad2 <_dtoa_r+0x662>
 8010a88:	4bac      	ldr	r3, [pc, #688]	@ (8010d3c <_dtoa_r+0x8cc>)
 8010a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a8e:	f7ef fc05 	bl	800029c <__adddf3>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a9a:	f7f0 f845 	bl	8000b28 <__aeabi_dcmpgt>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d145      	bne.n	8010b2e <_dtoa_r+0x6be>
 8010aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010aa6:	49a5      	ldr	r1, [pc, #660]	@ (8010d3c <_dtoa_r+0x8cc>)
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	f7ef fbf5 	bl	8000298 <__aeabi_dsub>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ab6:	f7f0 f819 	bl	8000aec <__aeabi_dcmplt>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f43f aef5 	beq.w	80108aa <_dtoa_r+0x43a>
 8010ac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ac2:	1e73      	subs	r3, r6, #1
 8010ac4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010aca:	2b30      	cmp	r3, #48	@ 0x30
 8010acc:	d0f8      	beq.n	8010ac0 <_dtoa_r+0x650>
 8010ace:	9f04      	ldr	r7, [sp, #16]
 8010ad0:	e73e      	b.n	8010950 <_dtoa_r+0x4e0>
 8010ad2:	4b9b      	ldr	r3, [pc, #620]	@ (8010d40 <_dtoa_r+0x8d0>)
 8010ad4:	f7ef fd98 	bl	8000608 <__aeabi_dmul>
 8010ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010adc:	e7bc      	b.n	8010a58 <_dtoa_r+0x5e8>
 8010ade:	d10c      	bne.n	8010afa <_dtoa_r+0x68a>
 8010ae0:	4b98      	ldr	r3, [pc, #608]	@ (8010d44 <_dtoa_r+0x8d4>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ae8:	f7ef fd8e 	bl	8000608 <__aeabi_dmul>
 8010aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010af0:	f7f0 f810 	bl	8000b14 <__aeabi_dcmpge>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	f000 8157 	beq.w	8010da8 <_dtoa_r+0x938>
 8010afa:	2400      	movs	r4, #0
 8010afc:	4625      	mov	r5, r4
 8010afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b00:	43db      	mvns	r3, r3
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	4656      	mov	r6, sl
 8010b06:	2700      	movs	r7, #0
 8010b08:	4621      	mov	r1, r4
 8010b0a:	4658      	mov	r0, fp
 8010b0c:	f000 fafe 	bl	801110c <_Bfree>
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	d0dc      	beq.n	8010ace <_dtoa_r+0x65e>
 8010b14:	b12f      	cbz	r7, 8010b22 <_dtoa_r+0x6b2>
 8010b16:	42af      	cmp	r7, r5
 8010b18:	d003      	beq.n	8010b22 <_dtoa_r+0x6b2>
 8010b1a:	4639      	mov	r1, r7
 8010b1c:	4658      	mov	r0, fp
 8010b1e:	f000 faf5 	bl	801110c <_Bfree>
 8010b22:	4629      	mov	r1, r5
 8010b24:	4658      	mov	r0, fp
 8010b26:	f000 faf1 	bl	801110c <_Bfree>
 8010b2a:	e7d0      	b.n	8010ace <_dtoa_r+0x65e>
 8010b2c:	9704      	str	r7, [sp, #16]
 8010b2e:	4633      	mov	r3, r6
 8010b30:	461e      	mov	r6, r3
 8010b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b36:	2a39      	cmp	r2, #57	@ 0x39
 8010b38:	d107      	bne.n	8010b4a <_dtoa_r+0x6da>
 8010b3a:	459a      	cmp	sl, r3
 8010b3c:	d1f8      	bne.n	8010b30 <_dtoa_r+0x6c0>
 8010b3e:	9a04      	ldr	r2, [sp, #16]
 8010b40:	3201      	adds	r2, #1
 8010b42:	9204      	str	r2, [sp, #16]
 8010b44:	2230      	movs	r2, #48	@ 0x30
 8010b46:	f88a 2000 	strb.w	r2, [sl]
 8010b4a:	781a      	ldrb	r2, [r3, #0]
 8010b4c:	3201      	adds	r2, #1
 8010b4e:	701a      	strb	r2, [r3, #0]
 8010b50:	e7bd      	b.n	8010ace <_dtoa_r+0x65e>
 8010b52:	4b7b      	ldr	r3, [pc, #492]	@ (8010d40 <_dtoa_r+0x8d0>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	f7ef fd57 	bl	8000608 <__aeabi_dmul>
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	4604      	mov	r4, r0
 8010b60:	460d      	mov	r5, r1
 8010b62:	f7ef ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	f43f aebb 	beq.w	80108e2 <_dtoa_r+0x472>
 8010b6c:	e6f0      	b.n	8010950 <_dtoa_r+0x4e0>
 8010b6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b70:	2a00      	cmp	r2, #0
 8010b72:	f000 80db 	beq.w	8010d2c <_dtoa_r+0x8bc>
 8010b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b78:	2a01      	cmp	r2, #1
 8010b7a:	f300 80bf 	bgt.w	8010cfc <_dtoa_r+0x88c>
 8010b7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b80:	2a00      	cmp	r2, #0
 8010b82:	f000 80b7 	beq.w	8010cf4 <_dtoa_r+0x884>
 8010b86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010b8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b8c:	4646      	mov	r6, r8
 8010b8e:	9a08      	ldr	r2, [sp, #32]
 8010b90:	2101      	movs	r1, #1
 8010b92:	441a      	add	r2, r3
 8010b94:	4658      	mov	r0, fp
 8010b96:	4498      	add	r8, r3
 8010b98:	9208      	str	r2, [sp, #32]
 8010b9a:	f000 fb6b 	bl	8011274 <__i2b>
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	b15e      	cbz	r6, 8010bba <_dtoa_r+0x74a>
 8010ba2:	9b08      	ldr	r3, [sp, #32]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	dd08      	ble.n	8010bba <_dtoa_r+0x74a>
 8010ba8:	42b3      	cmp	r3, r6
 8010baa:	9a08      	ldr	r2, [sp, #32]
 8010bac:	bfa8      	it	ge
 8010bae:	4633      	movge	r3, r6
 8010bb0:	eba8 0803 	sub.w	r8, r8, r3
 8010bb4:	1af6      	subs	r6, r6, r3
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	9308      	str	r3, [sp, #32]
 8010bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bbc:	b1f3      	cbz	r3, 8010bfc <_dtoa_r+0x78c>
 8010bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f000 80b7 	beq.w	8010d34 <_dtoa_r+0x8c4>
 8010bc6:	b18c      	cbz	r4, 8010bec <_dtoa_r+0x77c>
 8010bc8:	4629      	mov	r1, r5
 8010bca:	4622      	mov	r2, r4
 8010bcc:	4658      	mov	r0, fp
 8010bce:	f000 fc11 	bl	80113f4 <__pow5mult>
 8010bd2:	464a      	mov	r2, r9
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	4658      	mov	r0, fp
 8010bda:	f000 fb61 	bl	80112a0 <__multiply>
 8010bde:	4649      	mov	r1, r9
 8010be0:	9004      	str	r0, [sp, #16]
 8010be2:	4658      	mov	r0, fp
 8010be4:	f000 fa92 	bl	801110c <_Bfree>
 8010be8:	9b04      	ldr	r3, [sp, #16]
 8010bea:	4699      	mov	r9, r3
 8010bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bee:	1b1a      	subs	r2, r3, r4
 8010bf0:	d004      	beq.n	8010bfc <_dtoa_r+0x78c>
 8010bf2:	4649      	mov	r1, r9
 8010bf4:	4658      	mov	r0, fp
 8010bf6:	f000 fbfd 	bl	80113f4 <__pow5mult>
 8010bfa:	4681      	mov	r9, r0
 8010bfc:	2101      	movs	r1, #1
 8010bfe:	4658      	mov	r0, fp
 8010c00:	f000 fb38 	bl	8011274 <__i2b>
 8010c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c06:	4604      	mov	r4, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f000 81cf 	beq.w	8010fac <_dtoa_r+0xb3c>
 8010c0e:	461a      	mov	r2, r3
 8010c10:	4601      	mov	r1, r0
 8010c12:	4658      	mov	r0, fp
 8010c14:	f000 fbee 	bl	80113f4 <__pow5mult>
 8010c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	f300 8095 	bgt.w	8010d4c <_dtoa_r+0x8dc>
 8010c22:	9b02      	ldr	r3, [sp, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 8087 	bne.w	8010d38 <_dtoa_r+0x8c8>
 8010c2a:	9b03      	ldr	r3, [sp, #12]
 8010c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f040 8089 	bne.w	8010d48 <_dtoa_r+0x8d8>
 8010c36:	9b03      	ldr	r3, [sp, #12]
 8010c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c3c:	0d1b      	lsrs	r3, r3, #20
 8010c3e:	051b      	lsls	r3, r3, #20
 8010c40:	b12b      	cbz	r3, 8010c4e <_dtoa_r+0x7de>
 8010c42:	9b08      	ldr	r3, [sp, #32]
 8010c44:	3301      	adds	r3, #1
 8010c46:	9308      	str	r3, [sp, #32]
 8010c48:	f108 0801 	add.w	r8, r8, #1
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	f000 81b0 	beq.w	8010fb8 <_dtoa_r+0xb48>
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c5e:	6918      	ldr	r0, [r3, #16]
 8010c60:	f000 fabc 	bl	80111dc <__hi0bits>
 8010c64:	f1c0 0020 	rsb	r0, r0, #32
 8010c68:	9b08      	ldr	r3, [sp, #32]
 8010c6a:	4418      	add	r0, r3
 8010c6c:	f010 001f 	ands.w	r0, r0, #31
 8010c70:	d077      	beq.n	8010d62 <_dtoa_r+0x8f2>
 8010c72:	f1c0 0320 	rsb	r3, r0, #32
 8010c76:	2b04      	cmp	r3, #4
 8010c78:	dd6b      	ble.n	8010d52 <_dtoa_r+0x8e2>
 8010c7a:	9b08      	ldr	r3, [sp, #32]
 8010c7c:	f1c0 001c 	rsb	r0, r0, #28
 8010c80:	4403      	add	r3, r0
 8010c82:	4480      	add	r8, r0
 8010c84:	4406      	add	r6, r0
 8010c86:	9308      	str	r3, [sp, #32]
 8010c88:	f1b8 0f00 	cmp.w	r8, #0
 8010c8c:	dd05      	ble.n	8010c9a <_dtoa_r+0x82a>
 8010c8e:	4649      	mov	r1, r9
 8010c90:	4642      	mov	r2, r8
 8010c92:	4658      	mov	r0, fp
 8010c94:	f000 fc08 	bl	80114a8 <__lshift>
 8010c98:	4681      	mov	r9, r0
 8010c9a:	9b08      	ldr	r3, [sp, #32]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	dd05      	ble.n	8010cac <_dtoa_r+0x83c>
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4658      	mov	r0, fp
 8010ca6:	f000 fbff 	bl	80114a8 <__lshift>
 8010caa:	4604      	mov	r4, r0
 8010cac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d059      	beq.n	8010d66 <_dtoa_r+0x8f6>
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	4648      	mov	r0, r9
 8010cb6:	f000 fc63 	bl	8011580 <__mcmp>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	da53      	bge.n	8010d66 <_dtoa_r+0x8f6>
 8010cbe:	1e7b      	subs	r3, r7, #1
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	4649      	mov	r1, r9
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	220a      	movs	r2, #10
 8010cc8:	4658      	mov	r0, fp
 8010cca:	f000 fa41 	bl	8011150 <__multadd>
 8010cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cd0:	4681      	mov	r9, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 8172 	beq.w	8010fbc <_dtoa_r+0xb4c>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4629      	mov	r1, r5
 8010cdc:	220a      	movs	r2, #10
 8010cde:	4658      	mov	r0, fp
 8010ce0:	f000 fa36 	bl	8011150 <__multadd>
 8010ce4:	9b00      	ldr	r3, [sp, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	4605      	mov	r5, r0
 8010cea:	dc67      	bgt.n	8010dbc <_dtoa_r+0x94c>
 8010cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	dc41      	bgt.n	8010d76 <_dtoa_r+0x906>
 8010cf2:	e063      	b.n	8010dbc <_dtoa_r+0x94c>
 8010cf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010cf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010cfa:	e746      	b.n	8010b8a <_dtoa_r+0x71a>
 8010cfc:	9b07      	ldr	r3, [sp, #28]
 8010cfe:	1e5c      	subs	r4, r3, #1
 8010d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d02:	42a3      	cmp	r3, r4
 8010d04:	bfbf      	itttt	lt
 8010d06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010d08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010d0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010d0c:	1ae3      	sublt	r3, r4, r3
 8010d0e:	bfb4      	ite	lt
 8010d10:	18d2      	addlt	r2, r2, r3
 8010d12:	1b1c      	subge	r4, r3, r4
 8010d14:	9b07      	ldr	r3, [sp, #28]
 8010d16:	bfbc      	itt	lt
 8010d18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010d1a:	2400      	movlt	r4, #0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	bfb5      	itete	lt
 8010d20:	eba8 0603 	sublt.w	r6, r8, r3
 8010d24:	9b07      	ldrge	r3, [sp, #28]
 8010d26:	2300      	movlt	r3, #0
 8010d28:	4646      	movge	r6, r8
 8010d2a:	e730      	b.n	8010b8e <_dtoa_r+0x71e>
 8010d2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010d30:	4646      	mov	r6, r8
 8010d32:	e735      	b.n	8010ba0 <_dtoa_r+0x730>
 8010d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d36:	e75c      	b.n	8010bf2 <_dtoa_r+0x782>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	e788      	b.n	8010c4e <_dtoa_r+0x7de>
 8010d3c:	3fe00000 	.word	0x3fe00000
 8010d40:	40240000 	.word	0x40240000
 8010d44:	40140000 	.word	0x40140000
 8010d48:	9b02      	ldr	r3, [sp, #8]
 8010d4a:	e780      	b.n	8010c4e <_dtoa_r+0x7de>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d50:	e782      	b.n	8010c58 <_dtoa_r+0x7e8>
 8010d52:	d099      	beq.n	8010c88 <_dtoa_r+0x818>
 8010d54:	9a08      	ldr	r2, [sp, #32]
 8010d56:	331c      	adds	r3, #28
 8010d58:	441a      	add	r2, r3
 8010d5a:	4498      	add	r8, r3
 8010d5c:	441e      	add	r6, r3
 8010d5e:	9208      	str	r2, [sp, #32]
 8010d60:	e792      	b.n	8010c88 <_dtoa_r+0x818>
 8010d62:	4603      	mov	r3, r0
 8010d64:	e7f6      	b.n	8010d54 <_dtoa_r+0x8e4>
 8010d66:	9b07      	ldr	r3, [sp, #28]
 8010d68:	9704      	str	r7, [sp, #16]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	dc20      	bgt.n	8010db0 <_dtoa_r+0x940>
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	dd1e      	ble.n	8010db4 <_dtoa_r+0x944>
 8010d76:	9b00      	ldr	r3, [sp, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f47f aec0 	bne.w	8010afe <_dtoa_r+0x68e>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	2205      	movs	r2, #5
 8010d82:	4658      	mov	r0, fp
 8010d84:	f000 f9e4 	bl	8011150 <__multadd>
 8010d88:	4601      	mov	r1, r0
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	4648      	mov	r0, r9
 8010d8e:	f000 fbf7 	bl	8011580 <__mcmp>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	f77f aeb3 	ble.w	8010afe <_dtoa_r+0x68e>
 8010d98:	4656      	mov	r6, sl
 8010d9a:	2331      	movs	r3, #49	@ 0x31
 8010d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8010da0:	9b04      	ldr	r3, [sp, #16]
 8010da2:	3301      	adds	r3, #1
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	e6ae      	b.n	8010b06 <_dtoa_r+0x696>
 8010da8:	9c07      	ldr	r4, [sp, #28]
 8010daa:	9704      	str	r7, [sp, #16]
 8010dac:	4625      	mov	r5, r4
 8010dae:	e7f3      	b.n	8010d98 <_dtoa_r+0x928>
 8010db0:	9b07      	ldr	r3, [sp, #28]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 8104 	beq.w	8010fc4 <_dtoa_r+0xb54>
 8010dbc:	2e00      	cmp	r6, #0
 8010dbe:	dd05      	ble.n	8010dcc <_dtoa_r+0x95c>
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	4632      	mov	r2, r6
 8010dc4:	4658      	mov	r0, fp
 8010dc6:	f000 fb6f 	bl	80114a8 <__lshift>
 8010dca:	4605      	mov	r5, r0
 8010dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d05a      	beq.n	8010e88 <_dtoa_r+0xa18>
 8010dd2:	6869      	ldr	r1, [r5, #4]
 8010dd4:	4658      	mov	r0, fp
 8010dd6:	f000 f959 	bl	801108c <_Balloc>
 8010dda:	4606      	mov	r6, r0
 8010ddc:	b928      	cbnz	r0, 8010dea <_dtoa_r+0x97a>
 8010dde:	4b84      	ldr	r3, [pc, #528]	@ (8010ff0 <_dtoa_r+0xb80>)
 8010de0:	4602      	mov	r2, r0
 8010de2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010de6:	f7ff bb5a 	b.w	801049e <_dtoa_r+0x2e>
 8010dea:	692a      	ldr	r2, [r5, #16]
 8010dec:	3202      	adds	r2, #2
 8010dee:	0092      	lsls	r2, r2, #2
 8010df0:	f105 010c 	add.w	r1, r5, #12
 8010df4:	300c      	adds	r0, #12
 8010df6:	f000 ff3d 	bl	8011c74 <memcpy>
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4658      	mov	r0, fp
 8010e00:	f000 fb52 	bl	80114a8 <__lshift>
 8010e04:	f10a 0301 	add.w	r3, sl, #1
 8010e08:	9307      	str	r3, [sp, #28]
 8010e0a:	9b00      	ldr	r3, [sp, #0]
 8010e0c:	4453      	add	r3, sl
 8010e0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e10:	9b02      	ldr	r3, [sp, #8]
 8010e12:	f003 0301 	and.w	r3, r3, #1
 8010e16:	462f      	mov	r7, r5
 8010e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	9b07      	ldr	r3, [sp, #28]
 8010e1e:	4621      	mov	r1, r4
 8010e20:	3b01      	subs	r3, #1
 8010e22:	4648      	mov	r0, r9
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	f7ff fa9a 	bl	801035e <quorem>
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	9002      	str	r0, [sp, #8]
 8010e2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e32:	4648      	mov	r0, r9
 8010e34:	f000 fba4 	bl	8011580 <__mcmp>
 8010e38:	462a      	mov	r2, r5
 8010e3a:	9008      	str	r0, [sp, #32]
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4658      	mov	r0, fp
 8010e40:	f000 fbba 	bl	80115b8 <__mdiff>
 8010e44:	68c2      	ldr	r2, [r0, #12]
 8010e46:	4606      	mov	r6, r0
 8010e48:	bb02      	cbnz	r2, 8010e8c <_dtoa_r+0xa1c>
 8010e4a:	4601      	mov	r1, r0
 8010e4c:	4648      	mov	r0, r9
 8010e4e:	f000 fb97 	bl	8011580 <__mcmp>
 8010e52:	4602      	mov	r2, r0
 8010e54:	4631      	mov	r1, r6
 8010e56:	4658      	mov	r0, fp
 8010e58:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e5a:	f000 f957 	bl	801110c <_Bfree>
 8010e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e62:	9e07      	ldr	r6, [sp, #28]
 8010e64:	ea43 0102 	orr.w	r1, r3, r2
 8010e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e6a:	4319      	orrs	r1, r3
 8010e6c:	d110      	bne.n	8010e90 <_dtoa_r+0xa20>
 8010e6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e72:	d029      	beq.n	8010ec8 <_dtoa_r+0xa58>
 8010e74:	9b08      	ldr	r3, [sp, #32]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	dd02      	ble.n	8010e80 <_dtoa_r+0xa10>
 8010e7a:	9b02      	ldr	r3, [sp, #8]
 8010e7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010e80:	9b00      	ldr	r3, [sp, #0]
 8010e82:	f883 8000 	strb.w	r8, [r3]
 8010e86:	e63f      	b.n	8010b08 <_dtoa_r+0x698>
 8010e88:	4628      	mov	r0, r5
 8010e8a:	e7bb      	b.n	8010e04 <_dtoa_r+0x994>
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	e7e1      	b.n	8010e54 <_dtoa_r+0x9e4>
 8010e90:	9b08      	ldr	r3, [sp, #32]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	db04      	blt.n	8010ea0 <_dtoa_r+0xa30>
 8010e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e98:	430b      	orrs	r3, r1
 8010e9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010e9c:	430b      	orrs	r3, r1
 8010e9e:	d120      	bne.n	8010ee2 <_dtoa_r+0xa72>
 8010ea0:	2a00      	cmp	r2, #0
 8010ea2:	dded      	ble.n	8010e80 <_dtoa_r+0xa10>
 8010ea4:	4649      	mov	r1, r9
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	4658      	mov	r0, fp
 8010eaa:	f000 fafd 	bl	80114a8 <__lshift>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4681      	mov	r9, r0
 8010eb2:	f000 fb65 	bl	8011580 <__mcmp>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	dc03      	bgt.n	8010ec2 <_dtoa_r+0xa52>
 8010eba:	d1e1      	bne.n	8010e80 <_dtoa_r+0xa10>
 8010ebc:	f018 0f01 	tst.w	r8, #1
 8010ec0:	d0de      	beq.n	8010e80 <_dtoa_r+0xa10>
 8010ec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ec6:	d1d8      	bne.n	8010e7a <_dtoa_r+0xa0a>
 8010ec8:	9a00      	ldr	r2, [sp, #0]
 8010eca:	2339      	movs	r3, #57	@ 0x39
 8010ecc:	7013      	strb	r3, [r2, #0]
 8010ece:	4633      	mov	r3, r6
 8010ed0:	461e      	mov	r6, r3
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ed8:	2a39      	cmp	r2, #57	@ 0x39
 8010eda:	d052      	beq.n	8010f82 <_dtoa_r+0xb12>
 8010edc:	3201      	adds	r2, #1
 8010ede:	701a      	strb	r2, [r3, #0]
 8010ee0:	e612      	b.n	8010b08 <_dtoa_r+0x698>
 8010ee2:	2a00      	cmp	r2, #0
 8010ee4:	dd07      	ble.n	8010ef6 <_dtoa_r+0xa86>
 8010ee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010eea:	d0ed      	beq.n	8010ec8 <_dtoa_r+0xa58>
 8010eec:	9a00      	ldr	r2, [sp, #0]
 8010eee:	f108 0301 	add.w	r3, r8, #1
 8010ef2:	7013      	strb	r3, [r2, #0]
 8010ef4:	e608      	b.n	8010b08 <_dtoa_r+0x698>
 8010ef6:	9b07      	ldr	r3, [sp, #28]
 8010ef8:	9a07      	ldr	r2, [sp, #28]
 8010efa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d028      	beq.n	8010f56 <_dtoa_r+0xae6>
 8010f04:	4649      	mov	r1, r9
 8010f06:	2300      	movs	r3, #0
 8010f08:	220a      	movs	r2, #10
 8010f0a:	4658      	mov	r0, fp
 8010f0c:	f000 f920 	bl	8011150 <__multadd>
 8010f10:	42af      	cmp	r7, r5
 8010f12:	4681      	mov	r9, r0
 8010f14:	f04f 0300 	mov.w	r3, #0
 8010f18:	f04f 020a 	mov.w	r2, #10
 8010f1c:	4639      	mov	r1, r7
 8010f1e:	4658      	mov	r0, fp
 8010f20:	d107      	bne.n	8010f32 <_dtoa_r+0xac2>
 8010f22:	f000 f915 	bl	8011150 <__multadd>
 8010f26:	4607      	mov	r7, r0
 8010f28:	4605      	mov	r5, r0
 8010f2a:	9b07      	ldr	r3, [sp, #28]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	9307      	str	r3, [sp, #28]
 8010f30:	e774      	b.n	8010e1c <_dtoa_r+0x9ac>
 8010f32:	f000 f90d 	bl	8011150 <__multadd>
 8010f36:	4629      	mov	r1, r5
 8010f38:	4607      	mov	r7, r0
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	220a      	movs	r2, #10
 8010f3e:	4658      	mov	r0, fp
 8010f40:	f000 f906 	bl	8011150 <__multadd>
 8010f44:	4605      	mov	r5, r0
 8010f46:	e7f0      	b.n	8010f2a <_dtoa_r+0xaba>
 8010f48:	9b00      	ldr	r3, [sp, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	bfcc      	ite	gt
 8010f4e:	461e      	movgt	r6, r3
 8010f50:	2601      	movle	r6, #1
 8010f52:	4456      	add	r6, sl
 8010f54:	2700      	movs	r7, #0
 8010f56:	4649      	mov	r1, r9
 8010f58:	2201      	movs	r2, #1
 8010f5a:	4658      	mov	r0, fp
 8010f5c:	f000 faa4 	bl	80114a8 <__lshift>
 8010f60:	4621      	mov	r1, r4
 8010f62:	4681      	mov	r9, r0
 8010f64:	f000 fb0c 	bl	8011580 <__mcmp>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	dcb0      	bgt.n	8010ece <_dtoa_r+0xa5e>
 8010f6c:	d102      	bne.n	8010f74 <_dtoa_r+0xb04>
 8010f6e:	f018 0f01 	tst.w	r8, #1
 8010f72:	d1ac      	bne.n	8010ece <_dtoa_r+0xa5e>
 8010f74:	4633      	mov	r3, r6
 8010f76:	461e      	mov	r6, r3
 8010f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f7c:	2a30      	cmp	r2, #48	@ 0x30
 8010f7e:	d0fa      	beq.n	8010f76 <_dtoa_r+0xb06>
 8010f80:	e5c2      	b.n	8010b08 <_dtoa_r+0x698>
 8010f82:	459a      	cmp	sl, r3
 8010f84:	d1a4      	bne.n	8010ed0 <_dtoa_r+0xa60>
 8010f86:	9b04      	ldr	r3, [sp, #16]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	9304      	str	r3, [sp, #16]
 8010f8c:	2331      	movs	r3, #49	@ 0x31
 8010f8e:	f88a 3000 	strb.w	r3, [sl]
 8010f92:	e5b9      	b.n	8010b08 <_dtoa_r+0x698>
 8010f94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010ff4 <_dtoa_r+0xb84>
 8010f9a:	b11b      	cbz	r3, 8010fa4 <_dtoa_r+0xb34>
 8010f9c:	f10a 0308 	add.w	r3, sl, #8
 8010fa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010fa2:	6013      	str	r3, [r2, #0]
 8010fa4:	4650      	mov	r0, sl
 8010fa6:	b019      	add	sp, #100	@ 0x64
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	f77f ae37 	ble.w	8010c22 <_dtoa_r+0x7b2>
 8010fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fb8:	2001      	movs	r0, #1
 8010fba:	e655      	b.n	8010c68 <_dtoa_r+0x7f8>
 8010fbc:	9b00      	ldr	r3, [sp, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f77f aed6 	ble.w	8010d70 <_dtoa_r+0x900>
 8010fc4:	4656      	mov	r6, sl
 8010fc6:	4621      	mov	r1, r4
 8010fc8:	4648      	mov	r0, r9
 8010fca:	f7ff f9c8 	bl	801035e <quorem>
 8010fce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010fd2:	f806 8b01 	strb.w	r8, [r6], #1
 8010fd6:	9b00      	ldr	r3, [sp, #0]
 8010fd8:	eba6 020a 	sub.w	r2, r6, sl
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	ddb3      	ble.n	8010f48 <_dtoa_r+0xad8>
 8010fe0:	4649      	mov	r1, r9
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	220a      	movs	r2, #10
 8010fe6:	4658      	mov	r0, fp
 8010fe8:	f000 f8b2 	bl	8011150 <__multadd>
 8010fec:	4681      	mov	r9, r0
 8010fee:	e7ea      	b.n	8010fc6 <_dtoa_r+0xb56>
 8010ff0:	08012068 	.word	0x08012068
 8010ff4:	08011fec 	.word	0x08011fec

08010ff8 <_free_r>:
 8010ff8:	b538      	push	{r3, r4, r5, lr}
 8010ffa:	4605      	mov	r5, r0
 8010ffc:	2900      	cmp	r1, #0
 8010ffe:	d041      	beq.n	8011084 <_free_r+0x8c>
 8011000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011004:	1f0c      	subs	r4, r1, #4
 8011006:	2b00      	cmp	r3, #0
 8011008:	bfb8      	it	lt
 801100a:	18e4      	addlt	r4, r4, r3
 801100c:	f7fe fa66 	bl	800f4dc <__malloc_lock>
 8011010:	4a1d      	ldr	r2, [pc, #116]	@ (8011088 <_free_r+0x90>)
 8011012:	6813      	ldr	r3, [r2, #0]
 8011014:	b933      	cbnz	r3, 8011024 <_free_r+0x2c>
 8011016:	6063      	str	r3, [r4, #4]
 8011018:	6014      	str	r4, [r2, #0]
 801101a:	4628      	mov	r0, r5
 801101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011020:	f7fe ba62 	b.w	800f4e8 <__malloc_unlock>
 8011024:	42a3      	cmp	r3, r4
 8011026:	d908      	bls.n	801103a <_free_r+0x42>
 8011028:	6820      	ldr	r0, [r4, #0]
 801102a:	1821      	adds	r1, r4, r0
 801102c:	428b      	cmp	r3, r1
 801102e:	bf01      	itttt	eq
 8011030:	6819      	ldreq	r1, [r3, #0]
 8011032:	685b      	ldreq	r3, [r3, #4]
 8011034:	1809      	addeq	r1, r1, r0
 8011036:	6021      	streq	r1, [r4, #0]
 8011038:	e7ed      	b.n	8011016 <_free_r+0x1e>
 801103a:	461a      	mov	r2, r3
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	b10b      	cbz	r3, 8011044 <_free_r+0x4c>
 8011040:	42a3      	cmp	r3, r4
 8011042:	d9fa      	bls.n	801103a <_free_r+0x42>
 8011044:	6811      	ldr	r1, [r2, #0]
 8011046:	1850      	adds	r0, r2, r1
 8011048:	42a0      	cmp	r0, r4
 801104a:	d10b      	bne.n	8011064 <_free_r+0x6c>
 801104c:	6820      	ldr	r0, [r4, #0]
 801104e:	4401      	add	r1, r0
 8011050:	1850      	adds	r0, r2, r1
 8011052:	4283      	cmp	r3, r0
 8011054:	6011      	str	r1, [r2, #0]
 8011056:	d1e0      	bne.n	801101a <_free_r+0x22>
 8011058:	6818      	ldr	r0, [r3, #0]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	6053      	str	r3, [r2, #4]
 801105e:	4408      	add	r0, r1
 8011060:	6010      	str	r0, [r2, #0]
 8011062:	e7da      	b.n	801101a <_free_r+0x22>
 8011064:	d902      	bls.n	801106c <_free_r+0x74>
 8011066:	230c      	movs	r3, #12
 8011068:	602b      	str	r3, [r5, #0]
 801106a:	e7d6      	b.n	801101a <_free_r+0x22>
 801106c:	6820      	ldr	r0, [r4, #0]
 801106e:	1821      	adds	r1, r4, r0
 8011070:	428b      	cmp	r3, r1
 8011072:	bf04      	itt	eq
 8011074:	6819      	ldreq	r1, [r3, #0]
 8011076:	685b      	ldreq	r3, [r3, #4]
 8011078:	6063      	str	r3, [r4, #4]
 801107a:	bf04      	itt	eq
 801107c:	1809      	addeq	r1, r1, r0
 801107e:	6021      	streq	r1, [r4, #0]
 8011080:	6054      	str	r4, [r2, #4]
 8011082:	e7ca      	b.n	801101a <_free_r+0x22>
 8011084:	bd38      	pop	{r3, r4, r5, pc}
 8011086:	bf00      	nop
 8011088:	20002184 	.word	0x20002184

0801108c <_Balloc>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	69c6      	ldr	r6, [r0, #28]
 8011090:	4604      	mov	r4, r0
 8011092:	460d      	mov	r5, r1
 8011094:	b976      	cbnz	r6, 80110b4 <_Balloc+0x28>
 8011096:	2010      	movs	r0, #16
 8011098:	f7fe f976 	bl	800f388 <malloc>
 801109c:	4602      	mov	r2, r0
 801109e:	61e0      	str	r0, [r4, #28]
 80110a0:	b920      	cbnz	r0, 80110ac <_Balloc+0x20>
 80110a2:	4b18      	ldr	r3, [pc, #96]	@ (8011104 <_Balloc+0x78>)
 80110a4:	4818      	ldr	r0, [pc, #96]	@ (8011108 <_Balloc+0x7c>)
 80110a6:	216b      	movs	r1, #107	@ 0x6b
 80110a8:	f000 fdf2 	bl	8011c90 <__assert_func>
 80110ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110b0:	6006      	str	r6, [r0, #0]
 80110b2:	60c6      	str	r6, [r0, #12]
 80110b4:	69e6      	ldr	r6, [r4, #28]
 80110b6:	68f3      	ldr	r3, [r6, #12]
 80110b8:	b183      	cbz	r3, 80110dc <_Balloc+0x50>
 80110ba:	69e3      	ldr	r3, [r4, #28]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110c2:	b9b8      	cbnz	r0, 80110f4 <_Balloc+0x68>
 80110c4:	2101      	movs	r1, #1
 80110c6:	fa01 f605 	lsl.w	r6, r1, r5
 80110ca:	1d72      	adds	r2, r6, #5
 80110cc:	0092      	lsls	r2, r2, #2
 80110ce:	4620      	mov	r0, r4
 80110d0:	f000 fdfc 	bl	8011ccc <_calloc_r>
 80110d4:	b160      	cbz	r0, 80110f0 <_Balloc+0x64>
 80110d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80110da:	e00e      	b.n	80110fa <_Balloc+0x6e>
 80110dc:	2221      	movs	r2, #33	@ 0x21
 80110de:	2104      	movs	r1, #4
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 fdf3 	bl	8011ccc <_calloc_r>
 80110e6:	69e3      	ldr	r3, [r4, #28]
 80110e8:	60f0      	str	r0, [r6, #12]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1e4      	bne.n	80110ba <_Balloc+0x2e>
 80110f0:	2000      	movs	r0, #0
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	6802      	ldr	r2, [r0, #0]
 80110f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80110fa:	2300      	movs	r3, #0
 80110fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011100:	e7f7      	b.n	80110f2 <_Balloc+0x66>
 8011102:	bf00      	nop
 8011104:	08011ff9 	.word	0x08011ff9
 8011108:	08012079 	.word	0x08012079

0801110c <_Bfree>:
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	69c6      	ldr	r6, [r0, #28]
 8011110:	4605      	mov	r5, r0
 8011112:	460c      	mov	r4, r1
 8011114:	b976      	cbnz	r6, 8011134 <_Bfree+0x28>
 8011116:	2010      	movs	r0, #16
 8011118:	f7fe f936 	bl	800f388 <malloc>
 801111c:	4602      	mov	r2, r0
 801111e:	61e8      	str	r0, [r5, #28]
 8011120:	b920      	cbnz	r0, 801112c <_Bfree+0x20>
 8011122:	4b09      	ldr	r3, [pc, #36]	@ (8011148 <_Bfree+0x3c>)
 8011124:	4809      	ldr	r0, [pc, #36]	@ (801114c <_Bfree+0x40>)
 8011126:	218f      	movs	r1, #143	@ 0x8f
 8011128:	f000 fdb2 	bl	8011c90 <__assert_func>
 801112c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011130:	6006      	str	r6, [r0, #0]
 8011132:	60c6      	str	r6, [r0, #12]
 8011134:	b13c      	cbz	r4, 8011146 <_Bfree+0x3a>
 8011136:	69eb      	ldr	r3, [r5, #28]
 8011138:	6862      	ldr	r2, [r4, #4]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011140:	6021      	str	r1, [r4, #0]
 8011142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011146:	bd70      	pop	{r4, r5, r6, pc}
 8011148:	08011ff9 	.word	0x08011ff9
 801114c:	08012079 	.word	0x08012079

08011150 <__multadd>:
 8011150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011154:	690d      	ldr	r5, [r1, #16]
 8011156:	4607      	mov	r7, r0
 8011158:	460c      	mov	r4, r1
 801115a:	461e      	mov	r6, r3
 801115c:	f101 0c14 	add.w	ip, r1, #20
 8011160:	2000      	movs	r0, #0
 8011162:	f8dc 3000 	ldr.w	r3, [ip]
 8011166:	b299      	uxth	r1, r3
 8011168:	fb02 6101 	mla	r1, r2, r1, r6
 801116c:	0c1e      	lsrs	r6, r3, #16
 801116e:	0c0b      	lsrs	r3, r1, #16
 8011170:	fb02 3306 	mla	r3, r2, r6, r3
 8011174:	b289      	uxth	r1, r1
 8011176:	3001      	adds	r0, #1
 8011178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801117c:	4285      	cmp	r5, r0
 801117e:	f84c 1b04 	str.w	r1, [ip], #4
 8011182:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011186:	dcec      	bgt.n	8011162 <__multadd+0x12>
 8011188:	b30e      	cbz	r6, 80111ce <__multadd+0x7e>
 801118a:	68a3      	ldr	r3, [r4, #8]
 801118c:	42ab      	cmp	r3, r5
 801118e:	dc19      	bgt.n	80111c4 <__multadd+0x74>
 8011190:	6861      	ldr	r1, [r4, #4]
 8011192:	4638      	mov	r0, r7
 8011194:	3101      	adds	r1, #1
 8011196:	f7ff ff79 	bl	801108c <_Balloc>
 801119a:	4680      	mov	r8, r0
 801119c:	b928      	cbnz	r0, 80111aa <__multadd+0x5a>
 801119e:	4602      	mov	r2, r0
 80111a0:	4b0c      	ldr	r3, [pc, #48]	@ (80111d4 <__multadd+0x84>)
 80111a2:	480d      	ldr	r0, [pc, #52]	@ (80111d8 <__multadd+0x88>)
 80111a4:	21ba      	movs	r1, #186	@ 0xba
 80111a6:	f000 fd73 	bl	8011c90 <__assert_func>
 80111aa:	6922      	ldr	r2, [r4, #16]
 80111ac:	3202      	adds	r2, #2
 80111ae:	f104 010c 	add.w	r1, r4, #12
 80111b2:	0092      	lsls	r2, r2, #2
 80111b4:	300c      	adds	r0, #12
 80111b6:	f000 fd5d 	bl	8011c74 <memcpy>
 80111ba:	4621      	mov	r1, r4
 80111bc:	4638      	mov	r0, r7
 80111be:	f7ff ffa5 	bl	801110c <_Bfree>
 80111c2:	4644      	mov	r4, r8
 80111c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111c8:	3501      	adds	r5, #1
 80111ca:	615e      	str	r6, [r3, #20]
 80111cc:	6125      	str	r5, [r4, #16]
 80111ce:	4620      	mov	r0, r4
 80111d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d4:	08012068 	.word	0x08012068
 80111d8:	08012079 	.word	0x08012079

080111dc <__hi0bits>:
 80111dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80111e0:	4603      	mov	r3, r0
 80111e2:	bf36      	itet	cc
 80111e4:	0403      	lslcc	r3, r0, #16
 80111e6:	2000      	movcs	r0, #0
 80111e8:	2010      	movcc	r0, #16
 80111ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80111ee:	bf3c      	itt	cc
 80111f0:	021b      	lslcc	r3, r3, #8
 80111f2:	3008      	addcc	r0, #8
 80111f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80111f8:	bf3c      	itt	cc
 80111fa:	011b      	lslcc	r3, r3, #4
 80111fc:	3004      	addcc	r0, #4
 80111fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011202:	bf3c      	itt	cc
 8011204:	009b      	lslcc	r3, r3, #2
 8011206:	3002      	addcc	r0, #2
 8011208:	2b00      	cmp	r3, #0
 801120a:	db05      	blt.n	8011218 <__hi0bits+0x3c>
 801120c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011210:	f100 0001 	add.w	r0, r0, #1
 8011214:	bf08      	it	eq
 8011216:	2020      	moveq	r0, #32
 8011218:	4770      	bx	lr

0801121a <__lo0bits>:
 801121a:	6803      	ldr	r3, [r0, #0]
 801121c:	4602      	mov	r2, r0
 801121e:	f013 0007 	ands.w	r0, r3, #7
 8011222:	d00b      	beq.n	801123c <__lo0bits+0x22>
 8011224:	07d9      	lsls	r1, r3, #31
 8011226:	d421      	bmi.n	801126c <__lo0bits+0x52>
 8011228:	0798      	lsls	r0, r3, #30
 801122a:	bf49      	itett	mi
 801122c:	085b      	lsrmi	r3, r3, #1
 801122e:	089b      	lsrpl	r3, r3, #2
 8011230:	2001      	movmi	r0, #1
 8011232:	6013      	strmi	r3, [r2, #0]
 8011234:	bf5c      	itt	pl
 8011236:	6013      	strpl	r3, [r2, #0]
 8011238:	2002      	movpl	r0, #2
 801123a:	4770      	bx	lr
 801123c:	b299      	uxth	r1, r3
 801123e:	b909      	cbnz	r1, 8011244 <__lo0bits+0x2a>
 8011240:	0c1b      	lsrs	r3, r3, #16
 8011242:	2010      	movs	r0, #16
 8011244:	b2d9      	uxtb	r1, r3
 8011246:	b909      	cbnz	r1, 801124c <__lo0bits+0x32>
 8011248:	3008      	adds	r0, #8
 801124a:	0a1b      	lsrs	r3, r3, #8
 801124c:	0719      	lsls	r1, r3, #28
 801124e:	bf04      	itt	eq
 8011250:	091b      	lsreq	r3, r3, #4
 8011252:	3004      	addeq	r0, #4
 8011254:	0799      	lsls	r1, r3, #30
 8011256:	bf04      	itt	eq
 8011258:	089b      	lsreq	r3, r3, #2
 801125a:	3002      	addeq	r0, #2
 801125c:	07d9      	lsls	r1, r3, #31
 801125e:	d403      	bmi.n	8011268 <__lo0bits+0x4e>
 8011260:	085b      	lsrs	r3, r3, #1
 8011262:	f100 0001 	add.w	r0, r0, #1
 8011266:	d003      	beq.n	8011270 <__lo0bits+0x56>
 8011268:	6013      	str	r3, [r2, #0]
 801126a:	4770      	bx	lr
 801126c:	2000      	movs	r0, #0
 801126e:	4770      	bx	lr
 8011270:	2020      	movs	r0, #32
 8011272:	4770      	bx	lr

08011274 <__i2b>:
 8011274:	b510      	push	{r4, lr}
 8011276:	460c      	mov	r4, r1
 8011278:	2101      	movs	r1, #1
 801127a:	f7ff ff07 	bl	801108c <_Balloc>
 801127e:	4602      	mov	r2, r0
 8011280:	b928      	cbnz	r0, 801128e <__i2b+0x1a>
 8011282:	4b05      	ldr	r3, [pc, #20]	@ (8011298 <__i2b+0x24>)
 8011284:	4805      	ldr	r0, [pc, #20]	@ (801129c <__i2b+0x28>)
 8011286:	f240 1145 	movw	r1, #325	@ 0x145
 801128a:	f000 fd01 	bl	8011c90 <__assert_func>
 801128e:	2301      	movs	r3, #1
 8011290:	6144      	str	r4, [r0, #20]
 8011292:	6103      	str	r3, [r0, #16]
 8011294:	bd10      	pop	{r4, pc}
 8011296:	bf00      	nop
 8011298:	08012068 	.word	0x08012068
 801129c:	08012079 	.word	0x08012079

080112a0 <__multiply>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	4614      	mov	r4, r2
 80112a6:	690a      	ldr	r2, [r1, #16]
 80112a8:	6923      	ldr	r3, [r4, #16]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	bfa8      	it	ge
 80112ae:	4623      	movge	r3, r4
 80112b0:	460f      	mov	r7, r1
 80112b2:	bfa4      	itt	ge
 80112b4:	460c      	movge	r4, r1
 80112b6:	461f      	movge	r7, r3
 80112b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80112bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80112c0:	68a3      	ldr	r3, [r4, #8]
 80112c2:	6861      	ldr	r1, [r4, #4]
 80112c4:	eb0a 0609 	add.w	r6, sl, r9
 80112c8:	42b3      	cmp	r3, r6
 80112ca:	b085      	sub	sp, #20
 80112cc:	bfb8      	it	lt
 80112ce:	3101      	addlt	r1, #1
 80112d0:	f7ff fedc 	bl	801108c <_Balloc>
 80112d4:	b930      	cbnz	r0, 80112e4 <__multiply+0x44>
 80112d6:	4602      	mov	r2, r0
 80112d8:	4b44      	ldr	r3, [pc, #272]	@ (80113ec <__multiply+0x14c>)
 80112da:	4845      	ldr	r0, [pc, #276]	@ (80113f0 <__multiply+0x150>)
 80112dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80112e0:	f000 fcd6 	bl	8011c90 <__assert_func>
 80112e4:	f100 0514 	add.w	r5, r0, #20
 80112e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112ec:	462b      	mov	r3, r5
 80112ee:	2200      	movs	r2, #0
 80112f0:	4543      	cmp	r3, r8
 80112f2:	d321      	bcc.n	8011338 <__multiply+0x98>
 80112f4:	f107 0114 	add.w	r1, r7, #20
 80112f8:	f104 0214 	add.w	r2, r4, #20
 80112fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011300:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011304:	9302      	str	r3, [sp, #8]
 8011306:	1b13      	subs	r3, r2, r4
 8011308:	3b15      	subs	r3, #21
 801130a:	f023 0303 	bic.w	r3, r3, #3
 801130e:	3304      	adds	r3, #4
 8011310:	f104 0715 	add.w	r7, r4, #21
 8011314:	42ba      	cmp	r2, r7
 8011316:	bf38      	it	cc
 8011318:	2304      	movcc	r3, #4
 801131a:	9301      	str	r3, [sp, #4]
 801131c:	9b02      	ldr	r3, [sp, #8]
 801131e:	9103      	str	r1, [sp, #12]
 8011320:	428b      	cmp	r3, r1
 8011322:	d80c      	bhi.n	801133e <__multiply+0x9e>
 8011324:	2e00      	cmp	r6, #0
 8011326:	dd03      	ble.n	8011330 <__multiply+0x90>
 8011328:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801132c:	2b00      	cmp	r3, #0
 801132e:	d05b      	beq.n	80113e8 <__multiply+0x148>
 8011330:	6106      	str	r6, [r0, #16]
 8011332:	b005      	add	sp, #20
 8011334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011338:	f843 2b04 	str.w	r2, [r3], #4
 801133c:	e7d8      	b.n	80112f0 <__multiply+0x50>
 801133e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011342:	f1ba 0f00 	cmp.w	sl, #0
 8011346:	d024      	beq.n	8011392 <__multiply+0xf2>
 8011348:	f104 0e14 	add.w	lr, r4, #20
 801134c:	46a9      	mov	r9, r5
 801134e:	f04f 0c00 	mov.w	ip, #0
 8011352:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011356:	f8d9 3000 	ldr.w	r3, [r9]
 801135a:	fa1f fb87 	uxth.w	fp, r7
 801135e:	b29b      	uxth	r3, r3
 8011360:	fb0a 330b 	mla	r3, sl, fp, r3
 8011364:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011368:	f8d9 7000 	ldr.w	r7, [r9]
 801136c:	4463      	add	r3, ip
 801136e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011372:	fb0a c70b 	mla	r7, sl, fp, ip
 8011376:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801137a:	b29b      	uxth	r3, r3
 801137c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011380:	4572      	cmp	r2, lr
 8011382:	f849 3b04 	str.w	r3, [r9], #4
 8011386:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801138a:	d8e2      	bhi.n	8011352 <__multiply+0xb2>
 801138c:	9b01      	ldr	r3, [sp, #4]
 801138e:	f845 c003 	str.w	ip, [r5, r3]
 8011392:	9b03      	ldr	r3, [sp, #12]
 8011394:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011398:	3104      	adds	r1, #4
 801139a:	f1b9 0f00 	cmp.w	r9, #0
 801139e:	d021      	beq.n	80113e4 <__multiply+0x144>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	f104 0c14 	add.w	ip, r4, #20
 80113a6:	46ae      	mov	lr, r5
 80113a8:	f04f 0a00 	mov.w	sl, #0
 80113ac:	f8bc b000 	ldrh.w	fp, [ip]
 80113b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80113b4:	fb09 770b 	mla	r7, r9, fp, r7
 80113b8:	4457      	add	r7, sl
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113c0:	f84e 3b04 	str.w	r3, [lr], #4
 80113c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80113c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113cc:	f8be 3000 	ldrh.w	r3, [lr]
 80113d0:	fb09 330a 	mla	r3, r9, sl, r3
 80113d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80113d8:	4562      	cmp	r2, ip
 80113da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113de:	d8e5      	bhi.n	80113ac <__multiply+0x10c>
 80113e0:	9f01      	ldr	r7, [sp, #4]
 80113e2:	51eb      	str	r3, [r5, r7]
 80113e4:	3504      	adds	r5, #4
 80113e6:	e799      	b.n	801131c <__multiply+0x7c>
 80113e8:	3e01      	subs	r6, #1
 80113ea:	e79b      	b.n	8011324 <__multiply+0x84>
 80113ec:	08012068 	.word	0x08012068
 80113f0:	08012079 	.word	0x08012079

080113f4 <__pow5mult>:
 80113f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f8:	4615      	mov	r5, r2
 80113fa:	f012 0203 	ands.w	r2, r2, #3
 80113fe:	4607      	mov	r7, r0
 8011400:	460e      	mov	r6, r1
 8011402:	d007      	beq.n	8011414 <__pow5mult+0x20>
 8011404:	4c25      	ldr	r4, [pc, #148]	@ (801149c <__pow5mult+0xa8>)
 8011406:	3a01      	subs	r2, #1
 8011408:	2300      	movs	r3, #0
 801140a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801140e:	f7ff fe9f 	bl	8011150 <__multadd>
 8011412:	4606      	mov	r6, r0
 8011414:	10ad      	asrs	r5, r5, #2
 8011416:	d03d      	beq.n	8011494 <__pow5mult+0xa0>
 8011418:	69fc      	ldr	r4, [r7, #28]
 801141a:	b97c      	cbnz	r4, 801143c <__pow5mult+0x48>
 801141c:	2010      	movs	r0, #16
 801141e:	f7fd ffb3 	bl	800f388 <malloc>
 8011422:	4602      	mov	r2, r0
 8011424:	61f8      	str	r0, [r7, #28]
 8011426:	b928      	cbnz	r0, 8011434 <__pow5mult+0x40>
 8011428:	4b1d      	ldr	r3, [pc, #116]	@ (80114a0 <__pow5mult+0xac>)
 801142a:	481e      	ldr	r0, [pc, #120]	@ (80114a4 <__pow5mult+0xb0>)
 801142c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011430:	f000 fc2e 	bl	8011c90 <__assert_func>
 8011434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011438:	6004      	str	r4, [r0, #0]
 801143a:	60c4      	str	r4, [r0, #12]
 801143c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011444:	b94c      	cbnz	r4, 801145a <__pow5mult+0x66>
 8011446:	f240 2171 	movw	r1, #625	@ 0x271
 801144a:	4638      	mov	r0, r7
 801144c:	f7ff ff12 	bl	8011274 <__i2b>
 8011450:	2300      	movs	r3, #0
 8011452:	f8c8 0008 	str.w	r0, [r8, #8]
 8011456:	4604      	mov	r4, r0
 8011458:	6003      	str	r3, [r0, #0]
 801145a:	f04f 0900 	mov.w	r9, #0
 801145e:	07eb      	lsls	r3, r5, #31
 8011460:	d50a      	bpl.n	8011478 <__pow5mult+0x84>
 8011462:	4631      	mov	r1, r6
 8011464:	4622      	mov	r2, r4
 8011466:	4638      	mov	r0, r7
 8011468:	f7ff ff1a 	bl	80112a0 <__multiply>
 801146c:	4631      	mov	r1, r6
 801146e:	4680      	mov	r8, r0
 8011470:	4638      	mov	r0, r7
 8011472:	f7ff fe4b 	bl	801110c <_Bfree>
 8011476:	4646      	mov	r6, r8
 8011478:	106d      	asrs	r5, r5, #1
 801147a:	d00b      	beq.n	8011494 <__pow5mult+0xa0>
 801147c:	6820      	ldr	r0, [r4, #0]
 801147e:	b938      	cbnz	r0, 8011490 <__pow5mult+0x9c>
 8011480:	4622      	mov	r2, r4
 8011482:	4621      	mov	r1, r4
 8011484:	4638      	mov	r0, r7
 8011486:	f7ff ff0b 	bl	80112a0 <__multiply>
 801148a:	6020      	str	r0, [r4, #0]
 801148c:	f8c0 9000 	str.w	r9, [r0]
 8011490:	4604      	mov	r4, r0
 8011492:	e7e4      	b.n	801145e <__pow5mult+0x6a>
 8011494:	4630      	mov	r0, r6
 8011496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801149a:	bf00      	nop
 801149c:	080120d4 	.word	0x080120d4
 80114a0:	08011ff9 	.word	0x08011ff9
 80114a4:	08012079 	.word	0x08012079

080114a8 <__lshift>:
 80114a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ac:	460c      	mov	r4, r1
 80114ae:	6849      	ldr	r1, [r1, #4]
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80114b6:	68a3      	ldr	r3, [r4, #8]
 80114b8:	4607      	mov	r7, r0
 80114ba:	4691      	mov	r9, r2
 80114bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114c0:	f108 0601 	add.w	r6, r8, #1
 80114c4:	42b3      	cmp	r3, r6
 80114c6:	db0b      	blt.n	80114e0 <__lshift+0x38>
 80114c8:	4638      	mov	r0, r7
 80114ca:	f7ff fddf 	bl	801108c <_Balloc>
 80114ce:	4605      	mov	r5, r0
 80114d0:	b948      	cbnz	r0, 80114e6 <__lshift+0x3e>
 80114d2:	4602      	mov	r2, r0
 80114d4:	4b28      	ldr	r3, [pc, #160]	@ (8011578 <__lshift+0xd0>)
 80114d6:	4829      	ldr	r0, [pc, #164]	@ (801157c <__lshift+0xd4>)
 80114d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80114dc:	f000 fbd8 	bl	8011c90 <__assert_func>
 80114e0:	3101      	adds	r1, #1
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	e7ee      	b.n	80114c4 <__lshift+0x1c>
 80114e6:	2300      	movs	r3, #0
 80114e8:	f100 0114 	add.w	r1, r0, #20
 80114ec:	f100 0210 	add.w	r2, r0, #16
 80114f0:	4618      	mov	r0, r3
 80114f2:	4553      	cmp	r3, sl
 80114f4:	db33      	blt.n	801155e <__lshift+0xb6>
 80114f6:	6920      	ldr	r0, [r4, #16]
 80114f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114fc:	f104 0314 	add.w	r3, r4, #20
 8011500:	f019 091f 	ands.w	r9, r9, #31
 8011504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011508:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801150c:	d02b      	beq.n	8011566 <__lshift+0xbe>
 801150e:	f1c9 0e20 	rsb	lr, r9, #32
 8011512:	468a      	mov	sl, r1
 8011514:	2200      	movs	r2, #0
 8011516:	6818      	ldr	r0, [r3, #0]
 8011518:	fa00 f009 	lsl.w	r0, r0, r9
 801151c:	4310      	orrs	r0, r2
 801151e:	f84a 0b04 	str.w	r0, [sl], #4
 8011522:	f853 2b04 	ldr.w	r2, [r3], #4
 8011526:	459c      	cmp	ip, r3
 8011528:	fa22 f20e 	lsr.w	r2, r2, lr
 801152c:	d8f3      	bhi.n	8011516 <__lshift+0x6e>
 801152e:	ebac 0304 	sub.w	r3, ip, r4
 8011532:	3b15      	subs	r3, #21
 8011534:	f023 0303 	bic.w	r3, r3, #3
 8011538:	3304      	adds	r3, #4
 801153a:	f104 0015 	add.w	r0, r4, #21
 801153e:	4584      	cmp	ip, r0
 8011540:	bf38      	it	cc
 8011542:	2304      	movcc	r3, #4
 8011544:	50ca      	str	r2, [r1, r3]
 8011546:	b10a      	cbz	r2, 801154c <__lshift+0xa4>
 8011548:	f108 0602 	add.w	r6, r8, #2
 801154c:	3e01      	subs	r6, #1
 801154e:	4638      	mov	r0, r7
 8011550:	612e      	str	r6, [r5, #16]
 8011552:	4621      	mov	r1, r4
 8011554:	f7ff fdda 	bl	801110c <_Bfree>
 8011558:	4628      	mov	r0, r5
 801155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011562:	3301      	adds	r3, #1
 8011564:	e7c5      	b.n	80114f2 <__lshift+0x4a>
 8011566:	3904      	subs	r1, #4
 8011568:	f853 2b04 	ldr.w	r2, [r3], #4
 801156c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011570:	459c      	cmp	ip, r3
 8011572:	d8f9      	bhi.n	8011568 <__lshift+0xc0>
 8011574:	e7ea      	b.n	801154c <__lshift+0xa4>
 8011576:	bf00      	nop
 8011578:	08012068 	.word	0x08012068
 801157c:	08012079 	.word	0x08012079

08011580 <__mcmp>:
 8011580:	690a      	ldr	r2, [r1, #16]
 8011582:	4603      	mov	r3, r0
 8011584:	6900      	ldr	r0, [r0, #16]
 8011586:	1a80      	subs	r0, r0, r2
 8011588:	b530      	push	{r4, r5, lr}
 801158a:	d10e      	bne.n	80115aa <__mcmp+0x2a>
 801158c:	3314      	adds	r3, #20
 801158e:	3114      	adds	r1, #20
 8011590:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011594:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801159c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80115a0:	4295      	cmp	r5, r2
 80115a2:	d003      	beq.n	80115ac <__mcmp+0x2c>
 80115a4:	d205      	bcs.n	80115b2 <__mcmp+0x32>
 80115a6:	f04f 30ff 	mov.w	r0, #4294967295
 80115aa:	bd30      	pop	{r4, r5, pc}
 80115ac:	42a3      	cmp	r3, r4
 80115ae:	d3f3      	bcc.n	8011598 <__mcmp+0x18>
 80115b0:	e7fb      	b.n	80115aa <__mcmp+0x2a>
 80115b2:	2001      	movs	r0, #1
 80115b4:	e7f9      	b.n	80115aa <__mcmp+0x2a>
	...

080115b8 <__mdiff>:
 80115b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	4689      	mov	r9, r1
 80115be:	4606      	mov	r6, r0
 80115c0:	4611      	mov	r1, r2
 80115c2:	4648      	mov	r0, r9
 80115c4:	4614      	mov	r4, r2
 80115c6:	f7ff ffdb 	bl	8011580 <__mcmp>
 80115ca:	1e05      	subs	r5, r0, #0
 80115cc:	d112      	bne.n	80115f4 <__mdiff+0x3c>
 80115ce:	4629      	mov	r1, r5
 80115d0:	4630      	mov	r0, r6
 80115d2:	f7ff fd5b 	bl	801108c <_Balloc>
 80115d6:	4602      	mov	r2, r0
 80115d8:	b928      	cbnz	r0, 80115e6 <__mdiff+0x2e>
 80115da:	4b3f      	ldr	r3, [pc, #252]	@ (80116d8 <__mdiff+0x120>)
 80115dc:	f240 2137 	movw	r1, #567	@ 0x237
 80115e0:	483e      	ldr	r0, [pc, #248]	@ (80116dc <__mdiff+0x124>)
 80115e2:	f000 fb55 	bl	8011c90 <__assert_func>
 80115e6:	2301      	movs	r3, #1
 80115e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115ec:	4610      	mov	r0, r2
 80115ee:	b003      	add	sp, #12
 80115f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f4:	bfbc      	itt	lt
 80115f6:	464b      	movlt	r3, r9
 80115f8:	46a1      	movlt	r9, r4
 80115fa:	4630      	mov	r0, r6
 80115fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011600:	bfba      	itte	lt
 8011602:	461c      	movlt	r4, r3
 8011604:	2501      	movlt	r5, #1
 8011606:	2500      	movge	r5, #0
 8011608:	f7ff fd40 	bl	801108c <_Balloc>
 801160c:	4602      	mov	r2, r0
 801160e:	b918      	cbnz	r0, 8011618 <__mdiff+0x60>
 8011610:	4b31      	ldr	r3, [pc, #196]	@ (80116d8 <__mdiff+0x120>)
 8011612:	f240 2145 	movw	r1, #581	@ 0x245
 8011616:	e7e3      	b.n	80115e0 <__mdiff+0x28>
 8011618:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801161c:	6926      	ldr	r6, [r4, #16]
 801161e:	60c5      	str	r5, [r0, #12]
 8011620:	f109 0310 	add.w	r3, r9, #16
 8011624:	f109 0514 	add.w	r5, r9, #20
 8011628:	f104 0e14 	add.w	lr, r4, #20
 801162c:	f100 0b14 	add.w	fp, r0, #20
 8011630:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011634:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	46d9      	mov	r9, fp
 801163c:	f04f 0c00 	mov.w	ip, #0
 8011640:	9b01      	ldr	r3, [sp, #4]
 8011642:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011646:	f853 af04 	ldr.w	sl, [r3, #4]!
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	fa1f f38a 	uxth.w	r3, sl
 8011650:	4619      	mov	r1, r3
 8011652:	b283      	uxth	r3, r0
 8011654:	1acb      	subs	r3, r1, r3
 8011656:	0c00      	lsrs	r0, r0, #16
 8011658:	4463      	add	r3, ip
 801165a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801165e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011662:	b29b      	uxth	r3, r3
 8011664:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011668:	4576      	cmp	r6, lr
 801166a:	f849 3b04 	str.w	r3, [r9], #4
 801166e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011672:	d8e5      	bhi.n	8011640 <__mdiff+0x88>
 8011674:	1b33      	subs	r3, r6, r4
 8011676:	3b15      	subs	r3, #21
 8011678:	f023 0303 	bic.w	r3, r3, #3
 801167c:	3415      	adds	r4, #21
 801167e:	3304      	adds	r3, #4
 8011680:	42a6      	cmp	r6, r4
 8011682:	bf38      	it	cc
 8011684:	2304      	movcc	r3, #4
 8011686:	441d      	add	r5, r3
 8011688:	445b      	add	r3, fp
 801168a:	461e      	mov	r6, r3
 801168c:	462c      	mov	r4, r5
 801168e:	4544      	cmp	r4, r8
 8011690:	d30e      	bcc.n	80116b0 <__mdiff+0xf8>
 8011692:	f108 0103 	add.w	r1, r8, #3
 8011696:	1b49      	subs	r1, r1, r5
 8011698:	f021 0103 	bic.w	r1, r1, #3
 801169c:	3d03      	subs	r5, #3
 801169e:	45a8      	cmp	r8, r5
 80116a0:	bf38      	it	cc
 80116a2:	2100      	movcc	r1, #0
 80116a4:	440b      	add	r3, r1
 80116a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116aa:	b191      	cbz	r1, 80116d2 <__mdiff+0x11a>
 80116ac:	6117      	str	r7, [r2, #16]
 80116ae:	e79d      	b.n	80115ec <__mdiff+0x34>
 80116b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80116b4:	46e6      	mov	lr, ip
 80116b6:	0c08      	lsrs	r0, r1, #16
 80116b8:	fa1c fc81 	uxtah	ip, ip, r1
 80116bc:	4471      	add	r1, lr
 80116be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80116c2:	b289      	uxth	r1, r1
 80116c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80116c8:	f846 1b04 	str.w	r1, [r6], #4
 80116cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80116d0:	e7dd      	b.n	801168e <__mdiff+0xd6>
 80116d2:	3f01      	subs	r7, #1
 80116d4:	e7e7      	b.n	80116a6 <__mdiff+0xee>
 80116d6:	bf00      	nop
 80116d8:	08012068 	.word	0x08012068
 80116dc:	08012079 	.word	0x08012079

080116e0 <__d2b>:
 80116e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80116e4:	460f      	mov	r7, r1
 80116e6:	2101      	movs	r1, #1
 80116e8:	ec59 8b10 	vmov	r8, r9, d0
 80116ec:	4616      	mov	r6, r2
 80116ee:	f7ff fccd 	bl	801108c <_Balloc>
 80116f2:	4604      	mov	r4, r0
 80116f4:	b930      	cbnz	r0, 8011704 <__d2b+0x24>
 80116f6:	4602      	mov	r2, r0
 80116f8:	4b23      	ldr	r3, [pc, #140]	@ (8011788 <__d2b+0xa8>)
 80116fa:	4824      	ldr	r0, [pc, #144]	@ (801178c <__d2b+0xac>)
 80116fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8011700:	f000 fac6 	bl	8011c90 <__assert_func>
 8011704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801170c:	b10d      	cbz	r5, 8011712 <__d2b+0x32>
 801170e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	f1b8 0300 	subs.w	r3, r8, #0
 8011718:	d023      	beq.n	8011762 <__d2b+0x82>
 801171a:	4668      	mov	r0, sp
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	f7ff fd7c 	bl	801121a <__lo0bits>
 8011722:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011726:	b1d0      	cbz	r0, 801175e <__d2b+0x7e>
 8011728:	f1c0 0320 	rsb	r3, r0, #32
 801172c:	fa02 f303 	lsl.w	r3, r2, r3
 8011730:	430b      	orrs	r3, r1
 8011732:	40c2      	lsrs	r2, r0
 8011734:	6163      	str	r3, [r4, #20]
 8011736:	9201      	str	r2, [sp, #4]
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	61a3      	str	r3, [r4, #24]
 801173c:	2b00      	cmp	r3, #0
 801173e:	bf0c      	ite	eq
 8011740:	2201      	moveq	r2, #1
 8011742:	2202      	movne	r2, #2
 8011744:	6122      	str	r2, [r4, #16]
 8011746:	b1a5      	cbz	r5, 8011772 <__d2b+0x92>
 8011748:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801174c:	4405      	add	r5, r0
 801174e:	603d      	str	r5, [r7, #0]
 8011750:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011754:	6030      	str	r0, [r6, #0]
 8011756:	4620      	mov	r0, r4
 8011758:	b003      	add	sp, #12
 801175a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801175e:	6161      	str	r1, [r4, #20]
 8011760:	e7ea      	b.n	8011738 <__d2b+0x58>
 8011762:	a801      	add	r0, sp, #4
 8011764:	f7ff fd59 	bl	801121a <__lo0bits>
 8011768:	9b01      	ldr	r3, [sp, #4]
 801176a:	6163      	str	r3, [r4, #20]
 801176c:	3020      	adds	r0, #32
 801176e:	2201      	movs	r2, #1
 8011770:	e7e8      	b.n	8011744 <__d2b+0x64>
 8011772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801177a:	6038      	str	r0, [r7, #0]
 801177c:	6918      	ldr	r0, [r3, #16]
 801177e:	f7ff fd2d 	bl	80111dc <__hi0bits>
 8011782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011786:	e7e5      	b.n	8011754 <__d2b+0x74>
 8011788:	08012068 	.word	0x08012068
 801178c:	08012079 	.word	0x08012079

08011790 <__sfputc_r>:
 8011790:	6893      	ldr	r3, [r2, #8]
 8011792:	3b01      	subs	r3, #1
 8011794:	2b00      	cmp	r3, #0
 8011796:	b410      	push	{r4}
 8011798:	6093      	str	r3, [r2, #8]
 801179a:	da08      	bge.n	80117ae <__sfputc_r+0x1e>
 801179c:	6994      	ldr	r4, [r2, #24]
 801179e:	42a3      	cmp	r3, r4
 80117a0:	db01      	blt.n	80117a6 <__sfputc_r+0x16>
 80117a2:	290a      	cmp	r1, #10
 80117a4:	d103      	bne.n	80117ae <__sfputc_r+0x1e>
 80117a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117aa:	f7fe bc70 	b.w	801008e <__swbuf_r>
 80117ae:	6813      	ldr	r3, [r2, #0]
 80117b0:	1c58      	adds	r0, r3, #1
 80117b2:	6010      	str	r0, [r2, #0]
 80117b4:	7019      	strb	r1, [r3, #0]
 80117b6:	4608      	mov	r0, r1
 80117b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117bc:	4770      	bx	lr

080117be <__sfputs_r>:
 80117be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c0:	4606      	mov	r6, r0
 80117c2:	460f      	mov	r7, r1
 80117c4:	4614      	mov	r4, r2
 80117c6:	18d5      	adds	r5, r2, r3
 80117c8:	42ac      	cmp	r4, r5
 80117ca:	d101      	bne.n	80117d0 <__sfputs_r+0x12>
 80117cc:	2000      	movs	r0, #0
 80117ce:	e007      	b.n	80117e0 <__sfputs_r+0x22>
 80117d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117d4:	463a      	mov	r2, r7
 80117d6:	4630      	mov	r0, r6
 80117d8:	f7ff ffda 	bl	8011790 <__sfputc_r>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d1f3      	bne.n	80117c8 <__sfputs_r+0xa>
 80117e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080117e4 <_vfiprintf_r>:
 80117e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e8:	460d      	mov	r5, r1
 80117ea:	b09d      	sub	sp, #116	@ 0x74
 80117ec:	4614      	mov	r4, r2
 80117ee:	4698      	mov	r8, r3
 80117f0:	4606      	mov	r6, r0
 80117f2:	b118      	cbz	r0, 80117fc <_vfiprintf_r+0x18>
 80117f4:	6a03      	ldr	r3, [r0, #32]
 80117f6:	b90b      	cbnz	r3, 80117fc <_vfiprintf_r+0x18>
 80117f8:	f7fe fb60 	bl	800febc <__sinit>
 80117fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117fe:	07d9      	lsls	r1, r3, #31
 8011800:	d405      	bmi.n	801180e <_vfiprintf_r+0x2a>
 8011802:	89ab      	ldrh	r3, [r5, #12]
 8011804:	059a      	lsls	r2, r3, #22
 8011806:	d402      	bmi.n	801180e <_vfiprintf_r+0x2a>
 8011808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801180a:	f7fe fda6 	bl	801035a <__retarget_lock_acquire_recursive>
 801180e:	89ab      	ldrh	r3, [r5, #12]
 8011810:	071b      	lsls	r3, r3, #28
 8011812:	d501      	bpl.n	8011818 <_vfiprintf_r+0x34>
 8011814:	692b      	ldr	r3, [r5, #16]
 8011816:	b99b      	cbnz	r3, 8011840 <_vfiprintf_r+0x5c>
 8011818:	4629      	mov	r1, r5
 801181a:	4630      	mov	r0, r6
 801181c:	f7fe fc76 	bl	801010c <__swsetup_r>
 8011820:	b170      	cbz	r0, 8011840 <_vfiprintf_r+0x5c>
 8011822:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011824:	07dc      	lsls	r4, r3, #31
 8011826:	d504      	bpl.n	8011832 <_vfiprintf_r+0x4e>
 8011828:	f04f 30ff 	mov.w	r0, #4294967295
 801182c:	b01d      	add	sp, #116	@ 0x74
 801182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011832:	89ab      	ldrh	r3, [r5, #12]
 8011834:	0598      	lsls	r0, r3, #22
 8011836:	d4f7      	bmi.n	8011828 <_vfiprintf_r+0x44>
 8011838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801183a:	f7fe fd8f 	bl	801035c <__retarget_lock_release_recursive>
 801183e:	e7f3      	b.n	8011828 <_vfiprintf_r+0x44>
 8011840:	2300      	movs	r3, #0
 8011842:	9309      	str	r3, [sp, #36]	@ 0x24
 8011844:	2320      	movs	r3, #32
 8011846:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801184a:	f8cd 800c 	str.w	r8, [sp, #12]
 801184e:	2330      	movs	r3, #48	@ 0x30
 8011850:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a00 <_vfiprintf_r+0x21c>
 8011854:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011858:	f04f 0901 	mov.w	r9, #1
 801185c:	4623      	mov	r3, r4
 801185e:	469a      	mov	sl, r3
 8011860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011864:	b10a      	cbz	r2, 801186a <_vfiprintf_r+0x86>
 8011866:	2a25      	cmp	r2, #37	@ 0x25
 8011868:	d1f9      	bne.n	801185e <_vfiprintf_r+0x7a>
 801186a:	ebba 0b04 	subs.w	fp, sl, r4
 801186e:	d00b      	beq.n	8011888 <_vfiprintf_r+0xa4>
 8011870:	465b      	mov	r3, fp
 8011872:	4622      	mov	r2, r4
 8011874:	4629      	mov	r1, r5
 8011876:	4630      	mov	r0, r6
 8011878:	f7ff ffa1 	bl	80117be <__sfputs_r>
 801187c:	3001      	adds	r0, #1
 801187e:	f000 80a7 	beq.w	80119d0 <_vfiprintf_r+0x1ec>
 8011882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011884:	445a      	add	r2, fp
 8011886:	9209      	str	r2, [sp, #36]	@ 0x24
 8011888:	f89a 3000 	ldrb.w	r3, [sl]
 801188c:	2b00      	cmp	r3, #0
 801188e:	f000 809f 	beq.w	80119d0 <_vfiprintf_r+0x1ec>
 8011892:	2300      	movs	r3, #0
 8011894:	f04f 32ff 	mov.w	r2, #4294967295
 8011898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801189c:	f10a 0a01 	add.w	sl, sl, #1
 80118a0:	9304      	str	r3, [sp, #16]
 80118a2:	9307      	str	r3, [sp, #28]
 80118a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80118aa:	4654      	mov	r4, sl
 80118ac:	2205      	movs	r2, #5
 80118ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118b2:	4853      	ldr	r0, [pc, #332]	@ (8011a00 <_vfiprintf_r+0x21c>)
 80118b4:	f7ee fc94 	bl	80001e0 <memchr>
 80118b8:	9a04      	ldr	r2, [sp, #16]
 80118ba:	b9d8      	cbnz	r0, 80118f4 <_vfiprintf_r+0x110>
 80118bc:	06d1      	lsls	r1, r2, #27
 80118be:	bf44      	itt	mi
 80118c0:	2320      	movmi	r3, #32
 80118c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118c6:	0713      	lsls	r3, r2, #28
 80118c8:	bf44      	itt	mi
 80118ca:	232b      	movmi	r3, #43	@ 0x2b
 80118cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118d0:	f89a 3000 	ldrb.w	r3, [sl]
 80118d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80118d6:	d015      	beq.n	8011904 <_vfiprintf_r+0x120>
 80118d8:	9a07      	ldr	r2, [sp, #28]
 80118da:	4654      	mov	r4, sl
 80118dc:	2000      	movs	r0, #0
 80118de:	f04f 0c0a 	mov.w	ip, #10
 80118e2:	4621      	mov	r1, r4
 80118e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118e8:	3b30      	subs	r3, #48	@ 0x30
 80118ea:	2b09      	cmp	r3, #9
 80118ec:	d94b      	bls.n	8011986 <_vfiprintf_r+0x1a2>
 80118ee:	b1b0      	cbz	r0, 801191e <_vfiprintf_r+0x13a>
 80118f0:	9207      	str	r2, [sp, #28]
 80118f2:	e014      	b.n	801191e <_vfiprintf_r+0x13a>
 80118f4:	eba0 0308 	sub.w	r3, r0, r8
 80118f8:	fa09 f303 	lsl.w	r3, r9, r3
 80118fc:	4313      	orrs	r3, r2
 80118fe:	9304      	str	r3, [sp, #16]
 8011900:	46a2      	mov	sl, r4
 8011902:	e7d2      	b.n	80118aa <_vfiprintf_r+0xc6>
 8011904:	9b03      	ldr	r3, [sp, #12]
 8011906:	1d19      	adds	r1, r3, #4
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	9103      	str	r1, [sp, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	bfbb      	ittet	lt
 8011910:	425b      	neglt	r3, r3
 8011912:	f042 0202 	orrlt.w	r2, r2, #2
 8011916:	9307      	strge	r3, [sp, #28]
 8011918:	9307      	strlt	r3, [sp, #28]
 801191a:	bfb8      	it	lt
 801191c:	9204      	strlt	r2, [sp, #16]
 801191e:	7823      	ldrb	r3, [r4, #0]
 8011920:	2b2e      	cmp	r3, #46	@ 0x2e
 8011922:	d10a      	bne.n	801193a <_vfiprintf_r+0x156>
 8011924:	7863      	ldrb	r3, [r4, #1]
 8011926:	2b2a      	cmp	r3, #42	@ 0x2a
 8011928:	d132      	bne.n	8011990 <_vfiprintf_r+0x1ac>
 801192a:	9b03      	ldr	r3, [sp, #12]
 801192c:	1d1a      	adds	r2, r3, #4
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	9203      	str	r2, [sp, #12]
 8011932:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011936:	3402      	adds	r4, #2
 8011938:	9305      	str	r3, [sp, #20]
 801193a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a10 <_vfiprintf_r+0x22c>
 801193e:	7821      	ldrb	r1, [r4, #0]
 8011940:	2203      	movs	r2, #3
 8011942:	4650      	mov	r0, sl
 8011944:	f7ee fc4c 	bl	80001e0 <memchr>
 8011948:	b138      	cbz	r0, 801195a <_vfiprintf_r+0x176>
 801194a:	9b04      	ldr	r3, [sp, #16]
 801194c:	eba0 000a 	sub.w	r0, r0, sl
 8011950:	2240      	movs	r2, #64	@ 0x40
 8011952:	4082      	lsls	r2, r0
 8011954:	4313      	orrs	r3, r2
 8011956:	3401      	adds	r4, #1
 8011958:	9304      	str	r3, [sp, #16]
 801195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195e:	4829      	ldr	r0, [pc, #164]	@ (8011a04 <_vfiprintf_r+0x220>)
 8011960:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011964:	2206      	movs	r2, #6
 8011966:	f7ee fc3b 	bl	80001e0 <memchr>
 801196a:	2800      	cmp	r0, #0
 801196c:	d03f      	beq.n	80119ee <_vfiprintf_r+0x20a>
 801196e:	4b26      	ldr	r3, [pc, #152]	@ (8011a08 <_vfiprintf_r+0x224>)
 8011970:	bb1b      	cbnz	r3, 80119ba <_vfiprintf_r+0x1d6>
 8011972:	9b03      	ldr	r3, [sp, #12]
 8011974:	3307      	adds	r3, #7
 8011976:	f023 0307 	bic.w	r3, r3, #7
 801197a:	3308      	adds	r3, #8
 801197c:	9303      	str	r3, [sp, #12]
 801197e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011980:	443b      	add	r3, r7
 8011982:	9309      	str	r3, [sp, #36]	@ 0x24
 8011984:	e76a      	b.n	801185c <_vfiprintf_r+0x78>
 8011986:	fb0c 3202 	mla	r2, ip, r2, r3
 801198a:	460c      	mov	r4, r1
 801198c:	2001      	movs	r0, #1
 801198e:	e7a8      	b.n	80118e2 <_vfiprintf_r+0xfe>
 8011990:	2300      	movs	r3, #0
 8011992:	3401      	adds	r4, #1
 8011994:	9305      	str	r3, [sp, #20]
 8011996:	4619      	mov	r1, r3
 8011998:	f04f 0c0a 	mov.w	ip, #10
 801199c:	4620      	mov	r0, r4
 801199e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119a2:	3a30      	subs	r2, #48	@ 0x30
 80119a4:	2a09      	cmp	r2, #9
 80119a6:	d903      	bls.n	80119b0 <_vfiprintf_r+0x1cc>
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d0c6      	beq.n	801193a <_vfiprintf_r+0x156>
 80119ac:	9105      	str	r1, [sp, #20]
 80119ae:	e7c4      	b.n	801193a <_vfiprintf_r+0x156>
 80119b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80119b4:	4604      	mov	r4, r0
 80119b6:	2301      	movs	r3, #1
 80119b8:	e7f0      	b.n	801199c <_vfiprintf_r+0x1b8>
 80119ba:	ab03      	add	r3, sp, #12
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	462a      	mov	r2, r5
 80119c0:	4b12      	ldr	r3, [pc, #72]	@ (8011a0c <_vfiprintf_r+0x228>)
 80119c2:	a904      	add	r1, sp, #16
 80119c4:	4630      	mov	r0, r6
 80119c6:	f7fd fe35 	bl	800f634 <_printf_float>
 80119ca:	4607      	mov	r7, r0
 80119cc:	1c78      	adds	r0, r7, #1
 80119ce:	d1d6      	bne.n	801197e <_vfiprintf_r+0x19a>
 80119d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119d2:	07d9      	lsls	r1, r3, #31
 80119d4:	d405      	bmi.n	80119e2 <_vfiprintf_r+0x1fe>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	059a      	lsls	r2, r3, #22
 80119da:	d402      	bmi.n	80119e2 <_vfiprintf_r+0x1fe>
 80119dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119de:	f7fe fcbd 	bl	801035c <__retarget_lock_release_recursive>
 80119e2:	89ab      	ldrh	r3, [r5, #12]
 80119e4:	065b      	lsls	r3, r3, #25
 80119e6:	f53f af1f 	bmi.w	8011828 <_vfiprintf_r+0x44>
 80119ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119ec:	e71e      	b.n	801182c <_vfiprintf_r+0x48>
 80119ee:	ab03      	add	r3, sp, #12
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	462a      	mov	r2, r5
 80119f4:	4b05      	ldr	r3, [pc, #20]	@ (8011a0c <_vfiprintf_r+0x228>)
 80119f6:	a904      	add	r1, sp, #16
 80119f8:	4630      	mov	r0, r6
 80119fa:	f7fe f8b3 	bl	800fb64 <_printf_i>
 80119fe:	e7e4      	b.n	80119ca <_vfiprintf_r+0x1e6>
 8011a00:	080121d0 	.word	0x080121d0
 8011a04:	080121da 	.word	0x080121da
 8011a08:	0800f635 	.word	0x0800f635
 8011a0c:	080117bf 	.word	0x080117bf
 8011a10:	080121d6 	.word	0x080121d6

08011a14 <__sflush_r>:
 8011a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a1c:	0716      	lsls	r6, r2, #28
 8011a1e:	4605      	mov	r5, r0
 8011a20:	460c      	mov	r4, r1
 8011a22:	d454      	bmi.n	8011ace <__sflush_r+0xba>
 8011a24:	684b      	ldr	r3, [r1, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	dc02      	bgt.n	8011a30 <__sflush_r+0x1c>
 8011a2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	dd48      	ble.n	8011ac2 <__sflush_r+0xae>
 8011a30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a32:	2e00      	cmp	r6, #0
 8011a34:	d045      	beq.n	8011ac2 <__sflush_r+0xae>
 8011a36:	2300      	movs	r3, #0
 8011a38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a3c:	682f      	ldr	r7, [r5, #0]
 8011a3e:	6a21      	ldr	r1, [r4, #32]
 8011a40:	602b      	str	r3, [r5, #0]
 8011a42:	d030      	beq.n	8011aa6 <__sflush_r+0x92>
 8011a44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	0759      	lsls	r1, r3, #29
 8011a4a:	d505      	bpl.n	8011a58 <__sflush_r+0x44>
 8011a4c:	6863      	ldr	r3, [r4, #4]
 8011a4e:	1ad2      	subs	r2, r2, r3
 8011a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a52:	b10b      	cbz	r3, 8011a58 <__sflush_r+0x44>
 8011a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a56:	1ad2      	subs	r2, r2, r3
 8011a58:	2300      	movs	r3, #0
 8011a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a5c:	6a21      	ldr	r1, [r4, #32]
 8011a5e:	4628      	mov	r0, r5
 8011a60:	47b0      	blx	r6
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	d106      	bne.n	8011a76 <__sflush_r+0x62>
 8011a68:	6829      	ldr	r1, [r5, #0]
 8011a6a:	291d      	cmp	r1, #29
 8011a6c:	d82b      	bhi.n	8011ac6 <__sflush_r+0xb2>
 8011a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8011b18 <__sflush_r+0x104>)
 8011a70:	410a      	asrs	r2, r1
 8011a72:	07d6      	lsls	r6, r2, #31
 8011a74:	d427      	bmi.n	8011ac6 <__sflush_r+0xb2>
 8011a76:	2200      	movs	r2, #0
 8011a78:	6062      	str	r2, [r4, #4]
 8011a7a:	04d9      	lsls	r1, r3, #19
 8011a7c:	6922      	ldr	r2, [r4, #16]
 8011a7e:	6022      	str	r2, [r4, #0]
 8011a80:	d504      	bpl.n	8011a8c <__sflush_r+0x78>
 8011a82:	1c42      	adds	r2, r0, #1
 8011a84:	d101      	bne.n	8011a8a <__sflush_r+0x76>
 8011a86:	682b      	ldr	r3, [r5, #0]
 8011a88:	b903      	cbnz	r3, 8011a8c <__sflush_r+0x78>
 8011a8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a8e:	602f      	str	r7, [r5, #0]
 8011a90:	b1b9      	cbz	r1, 8011ac2 <__sflush_r+0xae>
 8011a92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a96:	4299      	cmp	r1, r3
 8011a98:	d002      	beq.n	8011aa0 <__sflush_r+0x8c>
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f7ff faac 	bl	8010ff8 <_free_r>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011aa4:	e00d      	b.n	8011ac2 <__sflush_r+0xae>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	47b0      	blx	r6
 8011aac:	4602      	mov	r2, r0
 8011aae:	1c50      	adds	r0, r2, #1
 8011ab0:	d1c9      	bne.n	8011a46 <__sflush_r+0x32>
 8011ab2:	682b      	ldr	r3, [r5, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d0c6      	beq.n	8011a46 <__sflush_r+0x32>
 8011ab8:	2b1d      	cmp	r3, #29
 8011aba:	d001      	beq.n	8011ac0 <__sflush_r+0xac>
 8011abc:	2b16      	cmp	r3, #22
 8011abe:	d11e      	bne.n	8011afe <__sflush_r+0xea>
 8011ac0:	602f      	str	r7, [r5, #0]
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	e022      	b.n	8011b0c <__sflush_r+0xf8>
 8011ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aca:	b21b      	sxth	r3, r3
 8011acc:	e01b      	b.n	8011b06 <__sflush_r+0xf2>
 8011ace:	690f      	ldr	r7, [r1, #16]
 8011ad0:	2f00      	cmp	r7, #0
 8011ad2:	d0f6      	beq.n	8011ac2 <__sflush_r+0xae>
 8011ad4:	0793      	lsls	r3, r2, #30
 8011ad6:	680e      	ldr	r6, [r1, #0]
 8011ad8:	bf08      	it	eq
 8011ada:	694b      	ldreq	r3, [r1, #20]
 8011adc:	600f      	str	r7, [r1, #0]
 8011ade:	bf18      	it	ne
 8011ae0:	2300      	movne	r3, #0
 8011ae2:	eba6 0807 	sub.w	r8, r6, r7
 8011ae6:	608b      	str	r3, [r1, #8]
 8011ae8:	f1b8 0f00 	cmp.w	r8, #0
 8011aec:	dde9      	ble.n	8011ac2 <__sflush_r+0xae>
 8011aee:	6a21      	ldr	r1, [r4, #32]
 8011af0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011af2:	4643      	mov	r3, r8
 8011af4:	463a      	mov	r2, r7
 8011af6:	4628      	mov	r0, r5
 8011af8:	47b0      	blx	r6
 8011afa:	2800      	cmp	r0, #0
 8011afc:	dc08      	bgt.n	8011b10 <__sflush_r+0xfc>
 8011afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b06:	81a3      	strh	r3, [r4, #12]
 8011b08:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b10:	4407      	add	r7, r0
 8011b12:	eba8 0800 	sub.w	r8, r8, r0
 8011b16:	e7e7      	b.n	8011ae8 <__sflush_r+0xd4>
 8011b18:	dfbffffe 	.word	0xdfbffffe

08011b1c <_fflush_r>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	690b      	ldr	r3, [r1, #16]
 8011b20:	4605      	mov	r5, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	b913      	cbnz	r3, 8011b2c <_fflush_r+0x10>
 8011b26:	2500      	movs	r5, #0
 8011b28:	4628      	mov	r0, r5
 8011b2a:	bd38      	pop	{r3, r4, r5, pc}
 8011b2c:	b118      	cbz	r0, 8011b36 <_fflush_r+0x1a>
 8011b2e:	6a03      	ldr	r3, [r0, #32]
 8011b30:	b90b      	cbnz	r3, 8011b36 <_fflush_r+0x1a>
 8011b32:	f7fe f9c3 	bl	800febc <__sinit>
 8011b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d0f3      	beq.n	8011b26 <_fflush_r+0xa>
 8011b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b40:	07d0      	lsls	r0, r2, #31
 8011b42:	d404      	bmi.n	8011b4e <_fflush_r+0x32>
 8011b44:	0599      	lsls	r1, r3, #22
 8011b46:	d402      	bmi.n	8011b4e <_fflush_r+0x32>
 8011b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b4a:	f7fe fc06 	bl	801035a <__retarget_lock_acquire_recursive>
 8011b4e:	4628      	mov	r0, r5
 8011b50:	4621      	mov	r1, r4
 8011b52:	f7ff ff5f 	bl	8011a14 <__sflush_r>
 8011b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b58:	07da      	lsls	r2, r3, #31
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	d4e4      	bmi.n	8011b28 <_fflush_r+0xc>
 8011b5e:	89a3      	ldrh	r3, [r4, #12]
 8011b60:	059b      	lsls	r3, r3, #22
 8011b62:	d4e1      	bmi.n	8011b28 <_fflush_r+0xc>
 8011b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b66:	f7fe fbf9 	bl	801035c <__retarget_lock_release_recursive>
 8011b6a:	e7dd      	b.n	8011b28 <_fflush_r+0xc>

08011b6c <__swhatbuf_r>:
 8011b6c:	b570      	push	{r4, r5, r6, lr}
 8011b6e:	460c      	mov	r4, r1
 8011b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b74:	2900      	cmp	r1, #0
 8011b76:	b096      	sub	sp, #88	@ 0x58
 8011b78:	4615      	mov	r5, r2
 8011b7a:	461e      	mov	r6, r3
 8011b7c:	da0d      	bge.n	8011b9a <__swhatbuf_r+0x2e>
 8011b7e:	89a3      	ldrh	r3, [r4, #12]
 8011b80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b84:	f04f 0100 	mov.w	r1, #0
 8011b88:	bf14      	ite	ne
 8011b8a:	2340      	movne	r3, #64	@ 0x40
 8011b8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b90:	2000      	movs	r0, #0
 8011b92:	6031      	str	r1, [r6, #0]
 8011b94:	602b      	str	r3, [r5, #0]
 8011b96:	b016      	add	sp, #88	@ 0x58
 8011b98:	bd70      	pop	{r4, r5, r6, pc}
 8011b9a:	466a      	mov	r2, sp
 8011b9c:	f000 f848 	bl	8011c30 <_fstat_r>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	dbec      	blt.n	8011b7e <__swhatbuf_r+0x12>
 8011ba4:	9901      	ldr	r1, [sp, #4]
 8011ba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011baa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011bae:	4259      	negs	r1, r3
 8011bb0:	4159      	adcs	r1, r3
 8011bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bb6:	e7eb      	b.n	8011b90 <__swhatbuf_r+0x24>

08011bb8 <__smakebuf_r>:
 8011bb8:	898b      	ldrh	r3, [r1, #12]
 8011bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bbc:	079d      	lsls	r5, r3, #30
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	d507      	bpl.n	8011bd4 <__smakebuf_r+0x1c>
 8011bc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011bc8:	6023      	str	r3, [r4, #0]
 8011bca:	6123      	str	r3, [r4, #16]
 8011bcc:	2301      	movs	r3, #1
 8011bce:	6163      	str	r3, [r4, #20]
 8011bd0:	b003      	add	sp, #12
 8011bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd4:	ab01      	add	r3, sp, #4
 8011bd6:	466a      	mov	r2, sp
 8011bd8:	f7ff ffc8 	bl	8011b6c <__swhatbuf_r>
 8011bdc:	9f00      	ldr	r7, [sp, #0]
 8011bde:	4605      	mov	r5, r0
 8011be0:	4639      	mov	r1, r7
 8011be2:	4630      	mov	r0, r6
 8011be4:	f7fd fbfa 	bl	800f3dc <_malloc_r>
 8011be8:	b948      	cbnz	r0, 8011bfe <__smakebuf_r+0x46>
 8011bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bee:	059a      	lsls	r2, r3, #22
 8011bf0:	d4ee      	bmi.n	8011bd0 <__smakebuf_r+0x18>
 8011bf2:	f023 0303 	bic.w	r3, r3, #3
 8011bf6:	f043 0302 	orr.w	r3, r3, #2
 8011bfa:	81a3      	strh	r3, [r4, #12]
 8011bfc:	e7e2      	b.n	8011bc4 <__smakebuf_r+0xc>
 8011bfe:	89a3      	ldrh	r3, [r4, #12]
 8011c00:	6020      	str	r0, [r4, #0]
 8011c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c06:	81a3      	strh	r3, [r4, #12]
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c0e:	b15b      	cbz	r3, 8011c28 <__smakebuf_r+0x70>
 8011c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c14:	4630      	mov	r0, r6
 8011c16:	f000 f81d 	bl	8011c54 <_isatty_r>
 8011c1a:	b128      	cbz	r0, 8011c28 <__smakebuf_r+0x70>
 8011c1c:	89a3      	ldrh	r3, [r4, #12]
 8011c1e:	f023 0303 	bic.w	r3, r3, #3
 8011c22:	f043 0301 	orr.w	r3, r3, #1
 8011c26:	81a3      	strh	r3, [r4, #12]
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	431d      	orrs	r5, r3
 8011c2c:	81a5      	strh	r5, [r4, #12]
 8011c2e:	e7cf      	b.n	8011bd0 <__smakebuf_r+0x18>

08011c30 <_fstat_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d07      	ldr	r5, [pc, #28]	@ (8011c50 <_fstat_r+0x20>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4604      	mov	r4, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	602b      	str	r3, [r5, #0]
 8011c3e:	f7f0 ffbb 	bl	8002bb8 <_fstat>
 8011c42:	1c43      	adds	r3, r0, #1
 8011c44:	d102      	bne.n	8011c4c <_fstat_r+0x1c>
 8011c46:	682b      	ldr	r3, [r5, #0]
 8011c48:	b103      	cbz	r3, 8011c4c <_fstat_r+0x1c>
 8011c4a:	6023      	str	r3, [r4, #0]
 8011c4c:	bd38      	pop	{r3, r4, r5, pc}
 8011c4e:	bf00      	nop
 8011c50:	200022c4 	.word	0x200022c4

08011c54 <_isatty_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d06      	ldr	r5, [pc, #24]	@ (8011c70 <_isatty_r+0x1c>)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	602b      	str	r3, [r5, #0]
 8011c60:	f7f0 ffba 	bl	8002bd8 <_isatty>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_isatty_r+0x1a>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_isatty_r+0x1a>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	200022c4 	.word	0x200022c4

08011c74 <memcpy>:
 8011c74:	440a      	add	r2, r1
 8011c76:	4291      	cmp	r1, r2
 8011c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c7c:	d100      	bne.n	8011c80 <memcpy+0xc>
 8011c7e:	4770      	bx	lr
 8011c80:	b510      	push	{r4, lr}
 8011c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c8a:	4291      	cmp	r1, r2
 8011c8c:	d1f9      	bne.n	8011c82 <memcpy+0xe>
 8011c8e:	bd10      	pop	{r4, pc}

08011c90 <__assert_func>:
 8011c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c92:	4614      	mov	r4, r2
 8011c94:	461a      	mov	r2, r3
 8011c96:	4b09      	ldr	r3, [pc, #36]	@ (8011cbc <__assert_func+0x2c>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	68d8      	ldr	r0, [r3, #12]
 8011c9e:	b954      	cbnz	r4, 8011cb6 <__assert_func+0x26>
 8011ca0:	4b07      	ldr	r3, [pc, #28]	@ (8011cc0 <__assert_func+0x30>)
 8011ca2:	461c      	mov	r4, r3
 8011ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ca8:	9100      	str	r1, [sp, #0]
 8011caa:	462b      	mov	r3, r5
 8011cac:	4905      	ldr	r1, [pc, #20]	@ (8011cc4 <__assert_func+0x34>)
 8011cae:	f000 f841 	bl	8011d34 <fiprintf>
 8011cb2:	f7fd fb61 	bl	800f378 <abort>
 8011cb6:	4b04      	ldr	r3, [pc, #16]	@ (8011cc8 <__assert_func+0x38>)
 8011cb8:	e7f4      	b.n	8011ca4 <__assert_func+0x14>
 8011cba:	bf00      	nop
 8011cbc:	20000134 	.word	0x20000134
 8011cc0:	08012226 	.word	0x08012226
 8011cc4:	080121f8 	.word	0x080121f8
 8011cc8:	080121eb 	.word	0x080121eb

08011ccc <_calloc_r>:
 8011ccc:	b570      	push	{r4, r5, r6, lr}
 8011cce:	fba1 5402 	umull	r5, r4, r1, r2
 8011cd2:	b93c      	cbnz	r4, 8011ce4 <_calloc_r+0x18>
 8011cd4:	4629      	mov	r1, r5
 8011cd6:	f7fd fb81 	bl	800f3dc <_malloc_r>
 8011cda:	4606      	mov	r6, r0
 8011cdc:	b928      	cbnz	r0, 8011cea <_calloc_r+0x1e>
 8011cde:	2600      	movs	r6, #0
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	220c      	movs	r2, #12
 8011ce6:	6002      	str	r2, [r0, #0]
 8011ce8:	e7f9      	b.n	8011cde <_calloc_r+0x12>
 8011cea:	462a      	mov	r2, r5
 8011cec:	4621      	mov	r1, r4
 8011cee:	f7fe fa63 	bl	80101b8 <memset>
 8011cf2:	e7f5      	b.n	8011ce0 <_calloc_r+0x14>

08011cf4 <__ascii_mbtowc>:
 8011cf4:	b082      	sub	sp, #8
 8011cf6:	b901      	cbnz	r1, 8011cfa <__ascii_mbtowc+0x6>
 8011cf8:	a901      	add	r1, sp, #4
 8011cfa:	b142      	cbz	r2, 8011d0e <__ascii_mbtowc+0x1a>
 8011cfc:	b14b      	cbz	r3, 8011d12 <__ascii_mbtowc+0x1e>
 8011cfe:	7813      	ldrb	r3, [r2, #0]
 8011d00:	600b      	str	r3, [r1, #0]
 8011d02:	7812      	ldrb	r2, [r2, #0]
 8011d04:	1e10      	subs	r0, r2, #0
 8011d06:	bf18      	it	ne
 8011d08:	2001      	movne	r0, #1
 8011d0a:	b002      	add	sp, #8
 8011d0c:	4770      	bx	lr
 8011d0e:	4610      	mov	r0, r2
 8011d10:	e7fb      	b.n	8011d0a <__ascii_mbtowc+0x16>
 8011d12:	f06f 0001 	mvn.w	r0, #1
 8011d16:	e7f8      	b.n	8011d0a <__ascii_mbtowc+0x16>

08011d18 <__ascii_wctomb>:
 8011d18:	4603      	mov	r3, r0
 8011d1a:	4608      	mov	r0, r1
 8011d1c:	b141      	cbz	r1, 8011d30 <__ascii_wctomb+0x18>
 8011d1e:	2aff      	cmp	r2, #255	@ 0xff
 8011d20:	d904      	bls.n	8011d2c <__ascii_wctomb+0x14>
 8011d22:	228a      	movs	r2, #138	@ 0x8a
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2a:	4770      	bx	lr
 8011d2c:	700a      	strb	r2, [r1, #0]
 8011d2e:	2001      	movs	r0, #1
 8011d30:	4770      	bx	lr
	...

08011d34 <fiprintf>:
 8011d34:	b40e      	push	{r1, r2, r3}
 8011d36:	b503      	push	{r0, r1, lr}
 8011d38:	4601      	mov	r1, r0
 8011d3a:	ab03      	add	r3, sp, #12
 8011d3c:	4805      	ldr	r0, [pc, #20]	@ (8011d54 <fiprintf+0x20>)
 8011d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d42:	6800      	ldr	r0, [r0, #0]
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	f7ff fd4d 	bl	80117e4 <_vfiprintf_r>
 8011d4a:	b002      	add	sp, #8
 8011d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d50:	b003      	add	sp, #12
 8011d52:	4770      	bx	lr
 8011d54:	20000134 	.word	0x20000134

08011d58 <_init>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	bf00      	nop
 8011d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d5e:	bc08      	pop	{r3}
 8011d60:	469e      	mov	lr, r3
 8011d62:	4770      	bx	lr

08011d64 <_fini>:
 8011d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d66:	bf00      	nop
 8011d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d6a:	bc08      	pop	{r3}
 8011d6c:	469e      	mov	lr, r3
 8011d6e:	4770      	bx	lr
