
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08010be0  08010be0  00011be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011190  08011190  000132d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011190  08011190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011198  08011198  000132d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011198  08011198  00012198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801119c  0801119c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080111a0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f40  200002d8  08011478  000132d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  08011478  00014218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de77  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004408  00000000  00000000  0003117f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124c  00000000  00000000  00036d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e40d  00000000  00000000  00037f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fbfe  00000000  00000000  00056381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5bc  00000000  00000000  00075f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011053b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007558  00000000  00000000  00110580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00117ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010bc4 	.word	0x08010bc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08010bc4 	.word	0x08010bc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
 **		  TIMER-INTERRUPT	     **
 **********************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	static uint8_t interruptState = readData;
    if (htim->Instance == TIM4)  // Check if the interrupt comes from TIM4
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d129      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x66>
    {
        switch(interruptState)
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d825      	bhi.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x66>
 8000ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000eeb 	.word	0x08000eeb
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	08000f07 	.word	0x08000f07
        {
        	case readData:
        		mpu6050_readData();
 8000ed8:	f000 fd36 	bl	8001948 <_Z16mpu6050_readDatav>
        		interruptState++;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ee6:	701a      	strb	r2, [r3, #0]
        	break;
 8000ee8:	e011      	b.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x66>

        	case control_X_Axis:
				interruptState++;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ef4:	701a      	strb	r2, [r3, #0]
			break;
 8000ef6:	e00a      	b.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x66>

        	case control_Y_Axis:
				interruptState++;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f02:	701a      	strb	r2, [r3, #0]
			break;
 8000f04:	e003      	b.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x66>

        	case control_Z_Axis:
				interruptState = readData;
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	bf00      	nop

        }
    }
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40000800 	.word	0x40000800
 8000f1c:	200002f4 	.word	0x200002f4

08000f20 <_Z9hc05_initv>:
 **		  BT-MODULE INIT	     **
 **********************************
*/

void hc05_init()
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <_Z9hc05_initv+0x40>)
 8000f28:	463c      	mov	r4, r7
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f34:	c407      	stmia	r4!, {r0, r1, r2}
 8000f36:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f9a0 	bl	8000280 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4639      	mov	r1, r7
 8000f46:	2364      	movs	r3, #100	@ 0x64
 8000f48:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <_Z9hc05_initv+0x44>)
 8000f4a:	f007 fdfd 	bl	8008b48 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4905      	ldr	r1, [pc, #20]	@ (8000f68 <_Z9hc05_initv+0x48>)
 8000f52:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <_Z9hc05_initv+0x44>)
 8000f54:	f007 fe83 	bl	8008c5e <HAL_UART_Receive_IT>
}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	08010be0 	.word	0x08010be0
 8000f64:	2000043c 	.word	0x2000043c
 8000f68:	200002f5 	.word	0x200002f5

08000f6c <HAL_UART_RxCpltCallback>:
 **		  BT-MSG INTERRUPT	     **
 **********************************
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <HAL_UART_RxCpltCallback+0x40>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d112      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0x38>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag)
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b53      	cmp	r3, #83	@ 0x53
 8000f84:	d109      	bne.n	8000f9a <HAL_UART_RxCpltCallback+0x2e>
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x48>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag = true;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x48>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4904      	ldr	r1, [pc, #16]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x44>)
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x4c>)
 8000fa0:	f007 fe5d 	bl	8008c5e <HAL_UART_Receive_IT>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	200002f5 	.word	0x200002f5
 8000fb4:	20000484 	.word	0x20000484
 8000fb8:	2000043c 	.word	0x2000043c

08000fbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <ITM_SendChar+0x2c>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <ITM_SendChar+0x2e>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d010      	beq.n	8001010 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fee:	e000      	b.n	8000ff2 <ITM_SendChar+0x36>
    {
      __NOP();
 8000ff0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f4      	bne.n	8000ff0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001006:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f001 f96b 	bl	8002300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f911 	bl	8001250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 faed 	bl	800160c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001032:	f000 facb 	bl	80015cc <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8001036:	f00c f867 	bl	800d108 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800103a:	f000 f97b 	bl	8001334 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 800103e:	f000 f9ad 	bl	800139c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001042:	f000 fa95 	bl	8001570 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8001046:	f000 fa37 	bl	80014b8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  //MPU-6050 Init
  mpu6050_init(false);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fb98 	bl	8001780 <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 8001050:	f7ff ff66 	bl	8000f20 <_Z9hc05_initv>

  //Motor-Test
  TIM3->CCR1 = 50;
 8001054:	4b72      	ldr	r3, [pc, #456]	@ (8001220 <main+0x200>)
 8001056:	2232      	movs	r2, #50	@ 0x32
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	4871      	ldr	r0, [pc, #452]	@ (8001224 <main+0x204>)
 800105e:	f006 fe77 	bl	8007d50 <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	4870      	ldr	r0, [pc, #448]	@ (8001228 <main+0x208>)
 8001068:	f002 f800 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001072:	486d      	ldr	r0, [pc, #436]	@ (8001228 <main+0x208>)
 8001074:	f001 fffa 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107e:	486a      	ldr	r0, [pc, #424]	@ (8001228 <main+0x208>)
 8001080:	f001 fff4 	bl	800306c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	4868      	ldr	r0, [pc, #416]	@ (800122c <main+0x20c>)
 800108a:	f001 ffef 	bl	800306c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	static uint32_t timeSaveBlink = HAL_GetTick();
 800108e:	4b68      	ldr	r3, [pc, #416]	@ (8001230 <main+0x210>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f3bf 8f5b 	dmb	ish
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d012      	beq.n	80010ce <main+0xae>
 80010a8:	4861      	ldr	r0, [pc, #388]	@ (8001230 <main+0x210>)
 80010aa:	f00c fd17 	bl	800dadc <__cxa_guard_acquire>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf14      	ite	ne
 80010b4:	2301      	movne	r3, #1
 80010b6:	2300      	moveq	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <main+0xae>
 80010be:	f001 f985 	bl	80023cc <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001234 <main+0x214>)
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4859      	ldr	r0, [pc, #356]	@ (8001230 <main+0x210>)
 80010ca:	f00c fd13 	bl	800daf4 <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= 1000) // 1000 ms delay
 80010ce:	f001 f97d 	bl	80023cc <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	4b57      	ldr	r3, [pc, #348]	@ (8001234 <main+0x214>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010de:	4293      	cmp	r3, r2
 80010e0:	bf8c      	ite	hi
 80010e2:	2301      	movhi	r3, #1
 80010e4:	2300      	movls	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <main+0xde>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80010ec:	2104      	movs	r1, #4
 80010ee:	484e      	ldr	r0, [pc, #312]	@ (8001228 <main+0x208>)
 80010f0:	f001 ffd5 	bl	800309e <HAL_GPIO_TogglePin>

		timeSaveBlink = HAL_GetTick();
 80010f4:	f001 f96a 	bl	80023cc <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001234 <main+0x214>)
 80010fc:	6013      	str	r3, [r2, #0]
	}

	static uint8_t PWMspeed = 0;
	static uint32_t timeSaveMotorTest = 0;
	if(HAL_GetTick() - timeSaveMotorTest >= 10000)
 80010fe:	f001 f965 	bl	80023cc <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	4b4c      	ldr	r3, [pc, #304]	@ (8001238 <main+0x218>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800110e:	4293      	cmp	r3, r2
 8001110:	bf8c      	ite	hi
 8001112:	2301      	movhi	r3, #1
 8001114:	2300      	movls	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d045      	beq.n	80011a8 <main+0x188>
	{
		uint32_t newDuty;
		switch(PWMspeed)
 800111c:	4b47      	ldr	r3, [pc, #284]	@ (800123c <main+0x21c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d028      	beq.n	8001176 <main+0x156>
 8001124:	2b02      	cmp	r3, #2
 8001126:	dc3a      	bgt.n	800119e <main+0x17e>
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <main+0x112>
 800112c:	2b01      	cmp	r3, #1
 800112e:	d011      	beq.n	8001154 <main+0x134>
 8001130:	e035      	b.n	800119e <main+0x17e>
		{
			case 0:
				newDuty = (htim3.Instance->ARR + 1) / 2; //50% Duty
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <main+0x204>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	3301      	adds	r3, #1
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	607b      	str	r3, [r7, #4]
				htim3.Instance->CCR1 = newDuty;
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <main+0x204>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
				PWMspeed++;
 8001146:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <main+0x21c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <main+0x21c>)
 8001150:	701a      	strb	r2, [r3, #0]
			break;
 8001152:	e024      	b.n	800119e <main+0x17e>

			case 1:
				newDuty = (htim3.Instance->ARR + 1) / 4; //25% Duty => 75% Geschwindigkeit
 8001154:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <main+0x204>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115a:	3301      	adds	r3, #1
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
				htim3.Instance->CCR1 = newDuty;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <main+0x204>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34
				PWMspeed++;
 8001168:	4b34      	ldr	r3, [pc, #208]	@ (800123c <main+0x21c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b32      	ldr	r3, [pc, #200]	@ (800123c <main+0x21c>)
 8001172:	701a      	strb	r2, [r3, #0]
			break;
 8001174:	e013      	b.n	800119e <main+0x17e>

			case 2:
				newDuty = ((htim3.Instance->ARR + 1) / 2) + ((htim3.Instance->ARR + 1) / 4); //75% Duty => 25% Geschwindigkeit
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <main+0x204>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117c:	3301      	adds	r3, #1
 800117e:	085a      	lsrs	r2, r3, #1
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <main+0x204>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	3301      	adds	r3, #1
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	607b      	str	r3, [r7, #4]
				htim3.Instance->CCR1 = newDuty;
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <main+0x204>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	635a      	str	r2, [r3, #52]	@ 0x34
				PWMspeed = 0;
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <main+0x21c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
			break;
 800119c:	bf00      	nop
		}
		timeSaveMotorTest = HAL_GetTick();
 800119e:	f001 f915 	bl	80023cc <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <main+0x218>)
 80011a6:	6013      	str	r3, [r2, #0]
	}

	if (receivedStart_Flag)
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <main+0x220>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f43f af6e 	beq.w	800108e <main+0x6e>
	{
	    static uint32_t timeSaveBuzzer = 0;
	    static bool buzzerActive = false;

	    if (!buzzerActive)  // If the buzzer is not already on, start it
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <main+0x224>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00c      	beq.n	80011da <main+0x1ba>
	    {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Turn on buzzer
 80011c0:	2200      	movs	r2, #0
 80011c2:	2104      	movs	r1, #4
 80011c4:	4819      	ldr	r0, [pc, #100]	@ (800122c <main+0x20c>)
 80011c6:	f001 ff51 	bl	800306c <HAL_GPIO_WritePin>
	        timeSaveBuzzer = HAL_GetTick(); // Save the current time
 80011ca:	f001 f8ff 	bl	80023cc <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <main+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
	        buzzerActive = true;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <main+0x224>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
	    }

	    if (buzzerActive && (HAL_GetTick() - timeSaveBuzzer >= 500)) // 500 ms delay
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <main+0x224>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00a      	beq.n	80011f8 <main+0x1d8>
 80011e2:	f001 f8f3 	bl	80023cc <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <main+0x228>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011f2:	d301      	bcc.n	80011f8 <main+0x1d8>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <main+0x1da>
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f43f af47 	beq.w	800108e <main+0x6e>
	    {
	        printf("Start \n");
 8001200:	4812      	ldr	r0, [pc, #72]	@ (800124c <main+0x22c>)
 8001202:	f00d fd6f 	bl	800ece4 <puts>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Turn off buzzer
 8001206:	2201      	movs	r2, #1
 8001208:	2104      	movs	r1, #4
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <main+0x20c>)
 800120c:	f001 ff2e 	bl	800306c <HAL_GPIO_WritePin>
	        buzzerActive = false;  // Reset buzzer state
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <main+0x224>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	        receivedStart_Flag = false; // Reset the Start Flag
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <main+0x220>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800121c:	e737      	b.n	800108e <main+0x6e>
 800121e:	bf00      	nop
 8001220:	40000400 	.word	0x40000400
 8001224:	2000034c 	.word	0x2000034c
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	2000048c 	.word	0x2000048c
 8001234:	20000488 	.word	0x20000488
 8001238:	20000494 	.word	0x20000494
 800123c:	20000490 	.word	0x20000490
 8001240:	20000484 	.word	0x20000484
 8001244:	2000049c 	.word	0x2000049c
 8001248:	20000498 	.word	0x20000498
 800124c:	08010c00 	.word	0x08010c00

08001250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	@ 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	@ 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00d fe20 	bl	800eea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <_Z18SystemClock_Configv+0xdc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a2b      	ldr	r2, [pc, #172]	@ (800132c <_Z18SystemClock_Configv+0xdc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <_Z18SystemClock_Configv+0xdc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <_Z18SystemClock_Configv+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a25      	ldr	r2, [pc, #148]	@ (8001330 <_Z18SystemClock_Configv+0xe0>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <_Z18SystemClock_Configv+0xe0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012c0:	2310      	movs	r3, #16
 80012c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012c4:	23c0      	movs	r3, #192	@ 0xc0
 80012c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 ff99 	bl	800720c <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80012ea:	f000 fa43 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f006 f9f7 	bl	80076fc <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800131e:	f000 fa29 	bl	8001774 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	@ 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <_ZL12MX_I2C1_Initv+0x60>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001340:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <_ZL12MX_I2C1_Initv+0x64>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <_ZL12MX_I2C1_Initv+0x5c>)
 8001372:	f001 feaf 	bl	80030d4 <HAL_I2C_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001386:	f000 f9f5 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002f8 	.word	0x200002f8
 8001394:	40005400 	.word	0x40005400
 8001398:	000186a0 	.word	0x000186a0

0800139c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	@ 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013ce:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <_ZL12MX_TIM3_Initv+0x118>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013e0:	2263      	movs	r2, #99	@ 0x63
 80013e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f0:	482f      	ldr	r0, [pc, #188]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80013f2:	f006 fba1 	bl	8007b38 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001406:	f000 f9b5 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001414:	4619      	mov	r1, r3
 8001416:	4826      	ldr	r0, [pc, #152]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 8001418:	f006 fefc 	bl	8008214 <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	bf14      	ite	ne
 8001422:	2301      	movne	r3, #1
 8001424:	2300      	moveq	r3, #0
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800142c:	f000 f9a2 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001430:	481f      	ldr	r0, [pc, #124]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 8001432:	f006 fc33 	bl	8007c9c <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001446:	f000 f995 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	4619      	mov	r1, r3
 8001458:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 800145a:	f007 faa3 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800146e:	f000 f981 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	@ 0x60
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 800148a:	f006 fe01 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf14      	ite	ne
 8001494:	2301      	movne	r3, #1
 8001496:	2300      	moveq	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800149e:	f000 f969 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014a2:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <_ZL12MX_TIM3_Initv+0x114>)
 80014a4:	f000 fd50 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 80014a8:	bf00      	nop
 80014aa:	3738      	adds	r7, #56	@ 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000034c 	.word	0x2000034c
 80014b4:	40000400 	.word	0x40000400

080014b8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d4:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014d6:	4a25      	ldr	r2, [pc, #148]	@ (800156c <_ZL12MX_TIM4_Initv+0xb4>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014dc:	2207      	movs	r2, #7
 80014de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014e8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014fa:	481b      	ldr	r0, [pc, #108]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 80014fc:	f006 fb1c 	bl	8007b38 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001510:	f000 f930 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	4811      	ldr	r0, [pc, #68]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 8001522:	f006 fe77 	bl	8008214 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001536:	f000 f91d 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <_ZL12MX_TIM4_Initv+0xb0>)
 8001548:	f007 fa2c 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 800155c:	f000 f90a 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000394 	.word	0x20000394
 800156c:	40000800 	.word	0x40000800

08001570 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800157c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a8:	f007 fa7e 	bl	8008aa8 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80015bc:	f000 f8da 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000043c 	.word	0x2000043c
 80015c8:	40004400 	.word	0x40004400

080015cc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <_ZL11MX_DMA_Initv+0x3c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <_ZL11MX_DMA_Initv+0x3c>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <_ZL11MX_DMA_Initv+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	200f      	movs	r0, #15
 80015f4:	f000 fff5 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015f8:	200f      	movs	r0, #15
 80015fa:	f001 f80e 	bl	800261a <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a40      	ldr	r2, [pc, #256]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a39      	ldr	r2, [pc, #228]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <_ZL12MX_GPIO_Initv+0x120>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2107      	movs	r1, #7
 8001696:	4826      	ldr	r0, [pc, #152]	@ (8001730 <_ZL12MX_GPIO_Initv+0x124>)
 8001698:	f001 fce8 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2110      	movs	r1, #16
 80016a0:	4824      	ldr	r0, [pc, #144]	@ (8001734 <_ZL12MX_GPIO_Initv+0x128>)
 80016a2:	f001 fce3 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7149 	mov.w	r1, #804	@ 0x324
 80016ac:	4822      	ldr	r0, [pc, #136]	@ (8001738 <_ZL12MX_GPIO_Initv+0x12c>)
 80016ae:	f001 fcdd 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4819      	ldr	r0, [pc, #100]	@ (8001730 <_ZL12MX_GPIO_Initv+0x124>)
 80016ca:	f001 fb4b 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ce:	2310      	movs	r3, #16
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <_ZL12MX_GPIO_Initv+0x128>)
 80016e6:	f001 fb3d 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80016ea:	f44f 7349 	mov.w	r3, #804	@ 0x324
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	@ (8001738 <_ZL12MX_GPIO_Initv+0x12c>)
 8001704:	f001 fb2e 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4804      	ldr	r0, [pc, #16]	@ (8001730 <_ZL12MX_GPIO_Initv+0x124>)
 8001720:	f001 fb20 	bl	8002d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	@ 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400

0800173c <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e009      	b.n	8001762 <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc30 	bl	8000fbc <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	dbf1      	blt.n	800174e <_write+0x12>
		}
		return len;
 800176a:	687b      	ldr	r3, [r7, #4]
	}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <_Z12mpu6050_initb>:
 **		  IMU-INITIALIZATION	     **
 **********************************
*/

void mpu6050_init(bool interruptEnable)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af04      	add	r7, sp, #16
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 800178a:	2364      	movs	r3, #100	@ 0x64
 800178c:	2201      	movs	r2, #1
 800178e:	21d0      	movs	r1, #208	@ 0xd0
 8001790:	4861      	ldr	r0, [pc, #388]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 8001792:	f002 f925 	bl	80039e0 <HAL_I2C_IsDeviceReady>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 80017a0:	485e      	ldr	r0, [pc, #376]	@ (800191c <_Z12mpu6050_initb+0x19c>)
 80017a2:	f00d fa9f 	bl	800ece4 <puts>
 80017a6:	e002      	b.n	80017ae <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 80017a8:	485d      	ldr	r0, [pc, #372]	@ (8001920 <_Z12mpu6050_initb+0x1a0>)
 80017aa:	f00d fa9b 	bl	800ece4 <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 80017ae:	2300      	movs	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80017b2:	2364      	movs	r3, #100	@ 0x64
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	2301      	movs	r3, #1
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	f107 030e 	add.w	r3, r7, #14
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	226b      	movs	r2, #107	@ 0x6b
 80017c4:	21d0      	movs	r1, #208	@ 0xd0
 80017c6:	4854      	ldr	r0, [pc, #336]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 80017c8:	f001 fdde 	bl	8003388 <HAL_I2C_Mem_Write>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d110      	bne.n	80017f8 <_Z12mpu6050_initb+0x78>
	{
		printf("Exited sleep mode \n");
 80017d6:	4853      	ldr	r0, [pc, #332]	@ (8001924 <_Z12mpu6050_initb+0x1a4>)
 80017d8:	f00d fa84 	bl	800ece4 <puts>
		if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 80017dc:	4852      	ldr	r0, [pc, #328]	@ (8001928 <_Z12mpu6050_initb+0x1a8>)
 80017de:	f006 f9fb 	bl	8007bd8 <HAL_TIM_Base_Start_IT>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <_Z12mpu6050_initb+0x7e>
		{
			// Starting Error
			Error_Handler();
 80017f2:	f7ff ffbf 	bl	8001774 <Error_Handler>
 80017f6:	e002      	b.n	80017fe <_Z12mpu6050_initb+0x7e>
		}
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 80017f8:	484c      	ldr	r0, [pc, #304]	@ (800192c <_Z12mpu6050_initb+0x1ac>)
 80017fa:	f00d fa73 	bl	800ece4 <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f107 030e 	add.w	r3, r7, #14
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	221a      	movs	r2, #26
 8001810:	21d1      	movs	r1, #209	@ 0xd1
 8001812:	4841      	ldr	r0, [pc, #260]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 8001814:	f001 feb2 	bl	800357c <HAL_I2C_Mem_Read>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	f023 0307 	bic.w	r3, r3, #7
 8001822:	b2db      	uxtb	r3, r3
 8001824:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001826:	2364      	movs	r3, #100	@ 0x64
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2301      	movs	r3, #1
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	f107 030e 	add.w	r3, r7, #14
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	221a      	movs	r2, #26
 8001838:	21d0      	movs	r1, #208	@ 0xd0
 800183a:	4837      	ldr	r0, [pc, #220]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 800183c:	f001 fda4 	bl	8003388 <HAL_I2C_Mem_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <_Z12mpu6050_initb+0xd4>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 800184a:	2100      	movs	r1, #0
 800184c:	4838      	ldr	r0, [pc, #224]	@ (8001930 <_Z12mpu6050_initb+0x1b0>)
 800184e:	f00d f9e1 	bl	800ec14 <iprintf>
 8001852:	e002      	b.n	800185a <_Z12mpu6050_initb+0xda>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 8001854:	4837      	ldr	r0, [pc, #220]	@ (8001934 <_Z12mpu6050_initb+0x1b4>)
 8001856:	f00d fa45 	bl	800ece4 <puts>
	}

	//Interrupt-Enable
	if(interruptEnable)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d056      	beq.n	800190e <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 8001860:	2364      	movs	r3, #100	@ 0x64
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2301      	movs	r3, #1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f107 030e 	add.w	r3, r7, #14
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2237      	movs	r2, #55	@ 0x37
 8001872:	21d1      	movs	r1, #209	@ 0xd1
 8001874:	4828      	ldr	r0, [pc, #160]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 8001876:	f001 fe81 	bl	800357c <HAL_I2C_Mem_Read>
 800187a:	4603      	mov	r3, r0
 800187c:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001884:	b2db      	uxtb	r3, r3
 8001886:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2301      	movs	r3, #1
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	f107 030e 	add.w	r3, r7, #14
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	2237      	movs	r2, #55	@ 0x37
 800189a:	21d0      	movs	r1, #208	@ 0xd0
 800189c:	481e      	ldr	r0, [pc, #120]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 800189e:	f001 fd73 	bl	8003388 <HAL_I2C_Mem_Write>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 80018ac:	4822      	ldr	r0, [pc, #136]	@ (8001938 <_Z12mpu6050_initb+0x1b8>)
 80018ae:	f00d fa19 	bl	800ece4 <puts>
 80018b2:	e002      	b.n	80018ba <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 80018b4:	4821      	ldr	r0, [pc, #132]	@ (800193c <_Z12mpu6050_initb+0x1bc>)
 80018b6:	f00d fa15 	bl	800ece4 <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 80018ba:	2364      	movs	r3, #100	@ 0x64
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	2301      	movs	r3, #1
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	f107 030e 	add.w	r3, r7, #14
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	2238      	movs	r2, #56	@ 0x38
 80018cc:	21d1      	movs	r1, #209	@ 0xd1
 80018ce:	4812      	ldr	r0, [pc, #72]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 80018d0:	f001 fe54 	bl	800357c <HAL_I2C_Mem_Read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80018dc:	2364      	movs	r3, #100	@ 0x64
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	f107 030e 	add.w	r3, r7, #14
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	2238      	movs	r2, #56	@ 0x38
 80018ee:	21d0      	movs	r1, #208	@ 0xd0
 80018f0:	4809      	ldr	r0, [pc, #36]	@ (8001918 <_Z12mpu6050_initb+0x198>)
 80018f2:	f001 fd49 	bl	8003388 <HAL_I2C_Mem_Write>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 8001900:	480f      	ldr	r0, [pc, #60]	@ (8001940 <_Z12mpu6050_initb+0x1c0>)
 8001902:	f00d f9ef 	bl	800ece4 <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8001906:	e002      	b.n	800190e <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8001908:	480e      	ldr	r0, [pc, #56]	@ (8001944 <_Z12mpu6050_initb+0x1c4>)
 800190a:	f00d f9eb 	bl	800ece4 <puts>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002f8 	.word	0x200002f8
 800191c:	08010c08 	.word	0x08010c08
 8001920:	08010c20 	.word	0x08010c20
 8001924:	08010c3c 	.word	0x08010c3c
 8001928:	20000394 	.word	0x20000394
 800192c:	08010c50 	.word	0x08010c50
 8001930:	08010c6c 	.word	0x08010c6c
 8001934:	08010c90 	.word	0x08010c90
 8001938:	08010cbc 	.word	0x08010cbc
 800193c:	08010ce8 	.word	0x08010ce8
 8001940:	08010d04 	.word	0x08010d04
 8001944:	08010d24 	.word	0x08010d24

08001948 <_Z16mpu6050_readDatav>:
 **		  READ IMU-SENSOR	     **
 **********************************
*/

void mpu6050_readData()
{
 8001948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800194c:	b098      	sub	sp, #96	@ 0x60
 800194e:	af04      	add	r7, sp, #16
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001950:	48b9      	ldr	r0, [pc, #740]	@ (8001c38 <_Z16mpu6050_readDatav+0x2f0>)
 8001952:	f002 fbcd 	bl	80040f0 <HAL_I2C_GetState>
 8001956:	4603      	mov	r3, r0
 8001958:	2b20      	cmp	r3, #32
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 81e0 	beq.w	8001d28 <_Z16mpu6050_readDatav+0x3e0>
	{
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14, 100);
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	230e      	movs	r3, #14
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	4bb2      	ldr	r3, [pc, #712]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	223b      	movs	r2, #59	@ 0x3b
 8001978:	21d1      	movs	r1, #209	@ 0xd1
 800197a:	48af      	ldr	r0, [pc, #700]	@ (8001c38 <_Z16mpu6050_readDatav+0x2f0>)
 800197c:	f001 fdfe 	bl	800357c <HAL_I2C_Mem_Read>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(ret == HAL_OK)
 8001986:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 81cc 	bne.w	8001d28 <_Z16mpu6050_readDatav+0x3e0>
			double accX, accY, accZ, gyroX, gyroY, gyroZ, dt, accRoll, accPitch;
			static double gyroAngleX = 0.0, gyroAngleY = 0.0, gyroYaw = 0.0, filterRoll = 0.0, filterPitch = 0.0;
			static uint32_t currentTime, previousTime;

			//Accelerometer Data (Registers 59 to 64)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	2110      	movs	r1, #16
 8001994:	48aa      	ldr	r0, [pc, #680]	@ (8001c40 <_Z16mpu6050_readDatav+0x2f8>)
 8001996:	f001 fb69 	bl	800306c <HAL_GPIO_WritePin>
			accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 800199a:	4ba8      	ldr	r3, [pc, #672]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4ba6      	ldr	r3, [pc, #664]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc1 	bl	8000534 <__aeabi_i2d>
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4ba3      	ldr	r3, [pc, #652]	@ (8001c44 <_Z16mpu6050_readDatav+0x2fc>)
 80019b8:	f7fe ff50 	bl	800085c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			//printf("Accel-X [g]: %f \n", accX);

			accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 80019c4:	4b9d      	ldr	r3, [pc, #628]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b9b      	ldr	r3, [pc, #620]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdac 	bl	8000534 <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b98      	ldr	r3, [pc, #608]	@ (8001c44 <_Z16mpu6050_readDatav+0x2fc>)
 80019e2:	f7fe ff3b 	bl	800085c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			//printf("Accel-Y [g]: %f \n", accY);

			accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 80019ee:	4b93      	ldr	r3, [pc, #588]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b91      	ldr	r3, [pc, #580]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 80019f8:	795b      	ldrb	r3, [r3, #5]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd97 	bl	8000534 <__aeabi_i2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001c44 <_Z16mpu6050_readDatav+0x2fc>)
 8001a0c:	f7fe ff26 	bl	800085c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			//printf("Accel-Z [g]: %f \n", accZ);

			//Roll and Pitch Angles from Accelerometer
			accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001a18:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a1c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a28:	f7fe fdee 	bl	8000608 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4690      	mov	r8, r2
 8001a32:	4699      	mov	r9, r3
 8001a34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a3c:	f7fe fde4 	bl	8000608 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4640      	mov	r0, r8
 8001a46:	4649      	mov	r1, r9
 8001a48:	f7fe fc28 	bl	800029c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	ec43 2b17 	vmov	d7, r2, r3
 8001a54:	eeb0 0a47 	vmov.f32	s0, s14
 8001a58:	eef0 0a67 	vmov.f32	s1, s15
 8001a5c:	f00c f84f 	bl	800dafe <sqrt>
 8001a60:	eeb0 7a40 	vmov.f32	s14, s0
 8001a64:	eef0 7a60 	vmov.f32	s15, s1
 8001a68:	eeb0 1a47 	vmov.f32	s2, s14
 8001a6c:	eef0 1a67 	vmov.f32	s3, s15
 8001a70:	ec45 4b10 	vmov	d0, r4, r5
 8001a74:	f00c f841 	bl	800dafa <atan2>
 8001a78:	ec51 0b10 	vmov	r0, r1, d0
 8001a7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8001c28 <_Z16mpu6050_readDatav+0x2e0>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdc1 	bl	8000608 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			/*estimation that works only if sensor is level (small pitch angle)
			accRoll = atan2(accY, accZ) * 57.3;
			printf("Roll1: %f \n", accRoll);
			*/
			accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a96:	f7fe fdb7 	bl	8000608 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001aa6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001aaa:	f7fe fdad 	bl	8000608 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fbf1 	bl	800029c <__adddf3>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b17 	vmov	d7, r2, r3
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f00c f818 	bl	800dafe <sqrt>
 8001ace:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad2:	eef0 7a60 	vmov.f32	s15, s1
 8001ad6:	eeb0 1a47 	vmov.f32	s2, s14
 8001ada:	eef0 1a67 	vmov.f32	s3, s15
 8001ade:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001ae2:	f00c f80a 	bl	800dafa <atan2>
 8001ae6:	ec51 0b10 	vmov	r0, r1, d0
 8001aea:	a34f      	add	r3, pc, #316	@ (adr r3, 8001c28 <_Z16mpu6050_readDatav+0x2e0>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fd8a 	bl	8000608 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2308 	strd	r2, r3, [r7, #32]


			//Temperature Data (Registers 65 and 66)

			//Gyroscope Data (Registers 67 to 72)
			currentTime = HAL_GetTick();
 8001afc:	f000 fc66 	bl	80023cc <HAL_GetTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a51      	ldr	r2, [pc, #324]	@ (8001c48 <_Z16mpu6050_readDatav+0x300>)
 8001b04:	6013      	str	r3, [r2, #0]
			dt = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8001b06:	4b50      	ldr	r3, [pc, #320]	@ (8001c48 <_Z16mpu6050_readDatav+0x300>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b50      	ldr	r3, [pc, #320]	@ (8001c4c <_Z16mpu6050_readDatav+0x304>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fcff 	bl	8000514 <__aeabi_ui2d>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <_Z16mpu6050_readDatav+0x308>)
 8001b1c:	f7fe fe9e 	bl	800085c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2306 	strd	r2, r3, [r7, #24]
			previousTime = currentTime;
 8001b28:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <_Z16mpu6050_readDatav+0x300>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	@ (8001c4c <_Z16mpu6050_readDatav+0x304>)
 8001b2e:	6013      	str	r3, [r2, #0]

			gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8001b30:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b32:	7a1b      	ldrb	r3, [r3, #8]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b40      	ldr	r3, [pc, #256]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b3a:	7a5b      	ldrb	r3, [r3, #9]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fcf6 	bl	8000534 <__aeabi_i2d>
 8001b48:	a339      	add	r3, pc, #228	@ (adr r3, 8001c30 <_Z16mpu6050_readDatav+0x2e8>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fe85 	bl	800085c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	e9c7 2304 	strd	r2, r3, [r7, #16]
			//printf("Gyro-X [°/s]: %f \n", gyroX);

			gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b5c:	7a9b      	ldrb	r3, [r3, #10]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b64:	7adb      	ldrb	r3, [r3, #11]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fce1 	bl	8000534 <__aeabi_i2d>
 8001b72:	a32f      	add	r3, pc, #188	@ (adr r3, 8001c30 <_Z16mpu6050_readDatav+0x2e8>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fe70 	bl	800085c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2302 	strd	r2, r3, [r7, #8]
			//printf("Gyro-Y [°/s]: %f \n", gyroY);

			gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <_Z16mpu6050_readDatav+0x2f4>)
 8001b8e:	7b5b      	ldrb	r3, [r3, #13]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fccc 	bl	8000534 <__aeabi_i2d>
 8001b9c:	a324      	add	r3, pc, #144	@ (adr r3, 8001c30 <_Z16mpu6050_readDatav+0x2e8>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fe5b 	bl	800085c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9c7 2300 	strd	r2, r3, [r7]
			//printf("Gyro-Z [°/s]: %f \n", gyroZ);

			//Angles and yaw from Gyroscope
			gyroAngleX += gyroX * dt;
 8001bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bb6:	f7fe fd27 	bl	8000608 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <_Z16mpu6050_readDatav+0x30c>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fb68 	bl	800029c <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4920      	ldr	r1, [pc, #128]	@ (8001c54 <_Z16mpu6050_readDatav+0x30c>)
 8001bd2:	e9c1 2300 	strd	r2, r3, [r1]
			gyroAngleY += gyroY * dt;
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bde:	f7fe fd13 	bl	8000608 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <_Z16mpu6050_readDatav+0x310>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fb54 	bl	800029c <__adddf3>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4917      	ldr	r1, [pc, #92]	@ (8001c58 <_Z16mpu6050_readDatav+0x310>)
 8001bfa:	e9c1 2300 	strd	r2, r3, [r1]
			gyroYaw += gyroZ * dt;
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c06:	f7fe fcff 	bl	8000608 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <_Z16mpu6050_readDatav+0x314>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fb40 	bl	800029c <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	e01e      	b.n	8001c60 <_Z16mpu6050_readDatav+0x318>
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	c63f1412 	.word	0xc63f1412
 8001c2c:	404ca5dc 	.word	0x404ca5dc
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40606000 	.word	0x40606000
 8001c38:	200002f8 	.word	0x200002f8
 8001c3c:	200004a0 	.word	0x200004a0
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40d00000 	.word	0x40d00000
 8001c48:	200004d8 	.word	0x200004d8
 8001c4c:	200004dc 	.word	0x200004dc
 8001c50:	408f4000 	.word	0x408f4000
 8001c54:	200004b0 	.word	0x200004b0
 8001c58:	200004b8 	.word	0x200004b8
 8001c5c:	200004c0 	.word	0x200004c0
 8001c60:	4939      	ldr	r1, [pc, #228]	@ (8001d48 <_Z16mpu6050_readDatav+0x400>)
 8001c62:	e9c1 2300 	strd	r2, r3, [r1]

			//Complementary Filter
			filterRoll = GYRO_FILTER_WEIGHT * (filterRoll + gyroX * dt) + (1 - GYRO_FILTER_WEIGHT) * accRoll;
 8001c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c6e:	f7fe fccb 	bl	8000608 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <_Z16mpu6050_readDatav+0x404>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f7fe fb0c 	bl	800029c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001d38 <_Z16mpu6050_readDatav+0x3f0>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fcb9 	bl	8000608 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	a328      	add	r3, pc, #160	@ (adr r3, 8001d40 <_Z16mpu6050_readDatav+0x3f8>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ca8:	f7fe fcae 	bl	8000608 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe faf2 	bl	800029c <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4923      	ldr	r1, [pc, #140]	@ (8001d4c <_Z16mpu6050_readDatav+0x404>)
 8001cbe:	e9c1 2300 	strd	r2, r3, [r1]
			filterPitch = GYRO_FILTER_WEIGHT * (filterPitch + gyroY * dt) + (1 - GYRO_FILTER_WEIGHT) * accPitch;
 8001cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cca:	f7fe fc9d 	bl	8000608 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <_Z16mpu6050_readDatav+0x408>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fade 	bl	800029c <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	a313      	add	r3, pc, #76	@ (adr r3, 8001d38 <_Z16mpu6050_readDatav+0x3f0>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc8b 	bl	8000608 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	a311      	add	r3, pc, #68	@ (adr r3, 8001d40 <_Z16mpu6050_readDatav+0x3f8>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d04:	f7fe fc80 	bl	8000608 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fac4 	bl	800029c <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	490d      	ldr	r1, [pc, #52]	@ (8001d50 <_Z16mpu6050_readDatav+0x408>)
 8001d1a:	e9c1 2300 	strd	r2, r3, [r1]
			/*
			printf("Roll: %f \n", filterRoll);
			printf("Pitch: %f \n", filterPitch);
			printf("Yaw: %f \n", gyroYaw);
			*/
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2110      	movs	r1, #16
 8001d22:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <_Z16mpu6050_readDatav+0x40c>)
 8001d24:	f001 f9a2 	bl	800306c <HAL_GPIO_WritePin>
		}
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3750      	adds	r7, #80	@ 0x50
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	7ae147ae 	.word	0x7ae147ae
 8001d3c:	3fefae14 	.word	0x3fefae14
 8001d40:	47ae1480 	.word	0x47ae1480
 8001d44:	3f847ae1 	.word	0x3f847ae1
 8001d48:	200004c0 	.word	0x200004c0
 8001d4c:	200004c8 	.word	0x200004c8
 8001d50:	200004d0 	.word	0x200004d0
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	@ 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_I2C_MspInit+0xa4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d13b      	bne.n	8001e42 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de6:	23c0      	movs	r3, #192	@ 0xc0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dea:	2312      	movs	r3, #18
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df6:	2304      	movs	r3, #4
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4814      	ldr	r0, [pc, #80]	@ (8001e54 <HAL_I2C_MspInit+0xac>)
 8001e02:	f000 ffaf 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_I2C_MspInit+0xa8>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	201f      	movs	r0, #31
 8001e28:	f000 fbdb 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e2c:	201f      	movs	r0, #31
 8001e2e:	f000 fbf4 	bl	800261a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2020      	movs	r0, #32
 8001e38:	f000 fbd3 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	f000 fbec 	bl	800261a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	@ 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40005400 	.word	0x40005400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_TIM_Base_MspInit+0xdc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d144      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001e86:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001e88:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001e8e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e94:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001eca:	481c      	ldr	r0, [pc, #112]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ecc:	f000 fbc0 	bl	8002650 <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001ed6:	f7ff fc4d 	bl	8001774 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ee0:	4a16      	ldr	r2, [pc, #88]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001eea:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eec:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ef2:	e01a      	b.n	8001f2a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_TIM_Base_MspInit+0xec>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d115      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_TIM_Base_MspInit+0xe0>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201e      	movs	r0, #30
 8001f20:	f000 fb5f 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f24:	201e      	movs	r0, #30
 8001f26:	f000 fb78 	bl	800261a <HAL_NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	200003dc 	.word	0x200003dc
 8001f40:	40026070 	.word	0x40026070
 8001f44:	40000800 	.word	0x40000800

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11d      	bne.n	8001fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f86:	2310      	movs	r3, #16
 8001f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <HAL_TIM_MspPostInit+0x70>)
 8001fa2:	f000 fedf 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d133      	bne.n	8002046 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_UART_MspInit+0x98>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_UART_MspInit+0x98>)
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_UART_MspInit+0x98>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_UART_MspInit+0x98>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <HAL_UART_MspInit+0x98>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_UART_MspInit+0x98>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002016:	230c      	movs	r3, #12
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002026:	2307      	movs	r3, #7
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <HAL_UART_MspInit+0x9c>)
 8002032:	f000 fe97 	bl	8002d64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2026      	movs	r0, #38	@ 0x26
 800203c:	f000 fad1 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002040:	2026      	movs	r0, #38	@ 0x26
 8002042:	f000 faea 	bl	800261a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40004400 	.word	0x40004400
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <NMI_Handler+0x4>

08002064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <MemManage_Handler+0x4>

08002074 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <UsageFault_Handler+0x4>

08002084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b2:	f000 f977 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <DMA1_Stream4_IRQHandler+0x10>)
 80020c2:	f000 fc05 	bl	80028d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200003dc 	.word	0x200003dc

080020d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <TIM4_IRQHandler+0x10>)
 80020d6:	f005 feeb 	bl	8007eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000394 	.word	0x20000394

080020e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <I2C1_EV_IRQHandler+0x10>)
 80020ea:	f001 fda7 	bl	8003c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002f8 	.word	0x200002f8

080020f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <I2C1_ER_IRQHandler+0x10>)
 80020fe:	f001 fef0 	bl	8003ee2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200002f8 	.word	0x200002f8

0800210c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <USART2_IRQHandler+0x10>)
 8002112:	f006 fdc9 	bl	8008ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000043c 	.word	0x2000043c

08002120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <OTG_FS_IRQHandler+0x10>)
 8002126:	f003 ff62 	bl	8005fee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200019c8 	.word	0x200019c8

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214e:	f00c fefb 	bl	800ef48 <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002176:	bf00      	nop
 8002178:	e7fd      	b.n	8002176 <_exit+0x12>

0800217a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e00a      	b.n	80021a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218c:	f3af 8000 	nop.w
 8002190:	4601      	mov	r1, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	b2ca      	uxtb	r2, r1
 800219a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dbf0      	blt.n	800218c <_read+0x12>
  }

  return len;
 80021aa:	687b      	ldr	r3, [r7, #4]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021dc:	605a      	str	r2, [r3, #4]
  return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_isatty>:

int _isatty(int file)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002224:	4a14      	ldr	r2, [pc, #80]	@ (8002278 <_sbrk+0x5c>)
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <_sbrk+0x60>)
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <_sbrk+0x64>)
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <_sbrk+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d207      	bcs.n	800225c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800224c:	f00c fe7c 	bl	800ef48 <__errno>
 8002250:	4603      	mov	r3, r0
 8002252:	220c      	movs	r2, #12
 8002254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e009      	b.n	8002270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800225c:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <_sbrk+0x64>)
 800226c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20020000 	.word	0x20020000
 800227c:	00000400 	.word	0x00000400
 8002280:	200004e0 	.word	0x200004e0
 8002284:	20002218 	.word	0x20002218

08002288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <SystemInit+0x20>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <SystemInit+0x20>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022b0:	f7ff ffea 	bl	8002288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b4:	480c      	ldr	r0, [pc, #48]	@ (80022e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022b6:	490d      	ldr	r1, [pc, #52]	@ (80022ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022cc:	4c0a      	ldr	r4, [pc, #40]	@ (80022f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022da:	f00c fe3b 	bl	800ef54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022de:	f7fe fe9f 	bl	8001020 <main>
  bx  lr    
 80022e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80022f0:	080111a0 	.word	0x080111a0
  ldr r2, =_sbss
 80022f4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80022f8:	20002218 	.word	0x20002218

080022fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>
	...

08002300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <HAL_Init+0x40>)
 800230a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_Init+0x40>)
 8002316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800231a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <HAL_Init+0x40>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f94f 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fd10 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f967 	bl	8002636 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f92f 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000000 	.word	0x20000000
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_IncTick+0x20>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_IncTick+0x24>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <HAL_IncTick+0x24>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000008 	.word	0x20000008
 80023c8:	200004e4 	.word	0x200004e4

080023cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <HAL_GetTick+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200004e4 	.word	0x200004e4

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff ffee 	bl	80023cc <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_Delay+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240a:	bf00      	nop
 800240c:	f7ff ffde 	bl	80023cc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000008 	.word	0x20000008

0800242c <__NVIC_SetPriorityGrouping>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	@ (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	@ (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff feb6 	bl	80023cc <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e099      	b.n	80027a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268c:	e00f      	b.n	80026ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7ff fe9d 	bl	80023cc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d908      	bls.n	80026ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e078      	b.n	80027a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e8      	bne.n	800268e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <HAL_DMA_Init+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	4313      	orrs	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	2b04      	cmp	r3, #4
 8002740:	d117      	bne.n	8002772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fa89 	bl	8002c6c <DMA_CheckFifoParam>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	@ 0x40
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800276e:	2301      	movs	r3, #1
 8002770:	e016      	b.n	80027a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa40 	bl	8002c00 <DMA_CalcBaseAndBitshift>
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	223f      	movs	r2, #63	@ 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	f010803f 	.word	0xf010803f

080027ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ba:	f7ff fe07 	bl	80023cc <HAL_GetTick>
 80027be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d008      	beq.n	80027de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e052      	b.n	8002884 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0216 	bic.w	r2, r2, #22
 80027ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <HAL_DMA_Abort+0x62>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0208 	bic.w	r2, r2, #8
 800281c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282e:	e013      	b.n	8002858 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002830:	f7ff fdcc 	bl	80023cc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b05      	cmp	r3, #5
 800283c:	d90c      	bls.n	8002858 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2203      	movs	r2, #3
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e015      	b.n	8002884 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e4      	bne.n	8002830 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	223f      	movs	r2, #63	@ 0x3f
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d004      	beq.n	80028aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00c      	b.n	80028c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2205      	movs	r2, #5
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002b18 <HAL_DMA_IRQHandler+0x248>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8e      	ldr	r2, [pc, #568]	@ (8002b1c <HAL_DMA_IRQHandler+0x24c>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	2208      	movs	r2, #8
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01a      	beq.n	800293c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	2208      	movs	r2, #8
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	2204      	movs	r2, #4
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	2204      	movs	r2, #4
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	2210      	movs	r2, #16
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d043      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03c      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2210      	movs	r2, #16
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d018      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
 80029fe:	e01f      	b.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
 8002a10:	e016      	b.n	8002a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0208 	bic.w	r2, r2, #8
 8002a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	2220      	movs	r2, #32
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 808f 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8087 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	2220      	movs	r2, #32
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d136      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x1da>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	223f      	movs	r2, #63	@ 0x3f
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d07e      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
        }
        return;
 8002ae6:	e079      	b.n	8002bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01d      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
 8002b14:	e02c      	b.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e01e      	b.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0210 	bic.w	r2, r2, #16
 8002b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d032      	beq.n	8002bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d022      	beq.n	8002bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2205      	movs	r2, #5
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d307      	bcc.n	8002bb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f2      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x2cc>
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e000      	b.n	8002bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bdc:	bf00      	nop
    }
  }
}
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3b10      	subs	r3, #16
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <DMA_CalcBaseAndBitshift+0x64>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1a:	4a13      	ldr	r2, [pc, #76]	@ (8002c68 <DMA_CalcBaseAndBitshift+0x68>)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d909      	bls.n	8002c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c40:	e007      	b.n	8002c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	aaaaaaab 	.word	0xaaaaaaab
 8002c68:	08010da4 	.word	0x08010da4

08002c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11f      	bne.n	8002cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d856      	bhi.n	8002d3a <DMA_CheckFifoParam+0xce>
 8002c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <DMA_CheckFifoParam+0x28>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cb7 	.word	0x08002cb7
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	08002d3b 	.word	0x08002d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d046      	beq.n	8002d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e043      	b.n	8002d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cbe:	d140      	bne.n	8002d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e03d      	b.n	8002d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cce:	d121      	bne.n	8002d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d837      	bhi.n	8002d46 <DMA_CheckFifoParam+0xda>
 8002cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <DMA_CheckFifoParam+0x70>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf3 	.word	0x08002cf3
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d05 	.word	0x08002d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e030      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d025      	beq.n	8002d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d02:	e022      	b.n	8002d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d0c:	d11f      	bne.n	8002d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d12:	e01c      	b.n	8002d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d903      	bls.n	8002d22 <DMA_CheckFifoParam+0xb6>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d003      	beq.n	8002d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d20:	e018      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      break;
 8002d26:	e015      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e00b      	b.n	8002d52 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e00a      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e008      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e006      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e004      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
    }
  } 
  
  return status; 
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	@ 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e159      	b.n	8003034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f040 8148 	bne.w	800302e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d005      	beq.n	8002db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d130      	bne.n	8002e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 0201 	and.w	r2, r3, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d017      	beq.n	8002e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d123      	bne.n	8002ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a2 	beq.w	800302e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b57      	ldr	r3, [pc, #348]	@ (800304c <HAL_GPIO_Init+0x2e8>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	4a56      	ldr	r2, [pc, #344]	@ (800304c <HAL_GPIO_Init+0x2e8>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002efa:	4b54      	ldr	r3, [pc, #336]	@ (800304c <HAL_GPIO_Init+0x2e8>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f06:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_GPIO_Init+0x2ec>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a49      	ldr	r2, [pc, #292]	@ (8003054 <HAL_GPIO_Init+0x2f0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x202>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a48      	ldr	r2, [pc, #288]	@ (8003058 <HAL_GPIO_Init+0x2f4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x1fe>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a47      	ldr	r2, [pc, #284]	@ (800305c <HAL_GPIO_Init+0x2f8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a46      	ldr	r2, [pc, #280]	@ (8003060 <HAL_GPIO_Init+0x2fc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x1f6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a45      	ldr	r2, [pc, #276]	@ (8003064 <HAL_GPIO_Init+0x300>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x1f2>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e008      	b.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f56:	2307      	movs	r3, #7
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e004      	b.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f66:	2300      	movs	r3, #0
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f002 0203 	and.w	r2, r2, #3
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	4093      	lsls	r3, r2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f78:	4935      	ldr	r1, [pc, #212]	@ (8003050 <HAL_GPIO_Init+0x2ec>)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f86:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002faa:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd4:	4a24      	ldr	r2, [pc, #144]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fda:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003004:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <HAL_GPIO_Init+0x304>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003028:	4a0f      	ldr	r2, [pc, #60]	@ (8003068 <HAL_GPIO_Init+0x304>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3301      	adds	r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	f67f aea2 	bls.w	8002d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	@ 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	40013800 	.word	0x40013800
 8003054:	40020000 	.word	0x40020000
 8003058:	40020400 	.word	0x40020400
 800305c:	40020800 	.word	0x40020800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	40021000 	.word	0x40021000
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	041a      	lsls	r2, r3, #16
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	400b      	ands	r3, r1
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fe54 	bl	8001da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f004 fcd6 	bl	8007ae8 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	@ (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	@ (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	@ (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	@ (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	@ (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	@ (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	@ (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336e:	2b80      	cmp	r3, #128	@ 0x80
 8003370:	d103      	bne.n	800337a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff f813 	bl	80023cc <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 80d9 	bne.w	8003568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2319      	movs	r3, #25
 80033bc:	2201      	movs	r2, #1
 80033be:	496d      	ldr	r1, [pc, #436]	@ (8003574 <HAL_I2C_Mem_Write+0x1ec>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f002 fa4d 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write+0x56>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0c5      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	@ 0x21
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	@ 0x40
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a4d      	ldr	r2, [pc, #308]	@ (8003578 <HAL_I2C_Mem_Write+0x1f0>)
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f001 ffdc 	bl	8005414 <I2C_RequestMemoryWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d052      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e081      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f002 fb12 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Mem_Write+0x180>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1aa      	bne.n	8003466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f002 fb05 	bl	8005b24 <I2C_WaitOnBTFFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	2b04      	cmp	r3, #4
 8003526:	d107      	bne.n	8003538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e016      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	@ 0x30
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7fe ff19 	bl	80023cc <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 8214 	bne.w	80039d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2319      	movs	r3, #25
 80035b0:	2201      	movs	r2, #1
 80035b2:	497b      	ldr	r1, [pc, #492]	@ (80037a0 <HAL_I2C_Mem_Read+0x224>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f002 f953 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	e207      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x56>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e200      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	@ 0x22
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a5b      	ldr	r2, [pc, #364]	@ (80037a4 <HAL_I2C_Mem_Read+0x228>)
 8003638:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	88f8      	ldrh	r0, [r7, #6]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4603      	mov	r3, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f001 ff78 	bl	8005540 <I2C_RequestMemoryRead>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1bc      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e190      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11b      	bne.n	80036ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e170      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d11b      	bne.n	800370a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	e150      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e144      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 80f1 	bhi.w	800390e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003736:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f002 fa6d 	bl	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e145      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800377a:	e117      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14e      	bne.n	8003822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	@ (80037a8 <HAL_I2C_Mem_Read+0x22c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f002 f866 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e11a      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003820:	e0c4      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	496c      	ldr	r1, [pc, #432]	@ (80039dc <HAL_I2C_Mem_Read+0x460>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f002 f817 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0cb      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	4955      	ldr	r1, [pc, #340]	@ (80039dc <HAL_I2C_Mem_Read+0x460>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f001 ffe9 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e09d      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800390c:	e04e      	b.n	80039ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f002 f980 	bl	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e058      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d124      	bne.n	80039ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003978:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f47f aeb6 	bne.w	8003722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
  }
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	@ 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010004 	.word	0x00010004

080039e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	460b      	mov	r3, r1
 80039ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7fe fcec 	bl	80023cc <HAL_GetTick>
 80039f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	f040 8111 	bne.w	8003c2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2319      	movs	r3, #25
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4988      	ldr	r1, [pc, #544]	@ (8003c34 <HAL_I2C_IsDeviceReady+0x254>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f001 ff24 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e104      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_IsDeviceReady+0x50>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0fd      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d007      	beq.n	8003a56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2224      	movs	r2, #36	@ 0x24
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a70      	ldr	r2, [pc, #448]	@ (8003c38 <HAL_I2C_IsDeviceReady+0x258>)
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f001 fee2 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab0:	d103      	bne.n	8003aba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0b6      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003acc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fc7d 	bl	80023cc <HAL_GetTick>
 8003ad2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b02:	e025      	b.n	8003b50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fe fc62 	bl	80023cc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <HAL_I2C_IsDeviceReady+0x13a>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22a0      	movs	r2, #160	@ 0xa0
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b5a:	d005      	beq.n	8003b68 <HAL_I2C_IsDeviceReady+0x188>
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_I2C_IsDeviceReady+0x188>
 8003b62:	7dbb      	ldrb	r3, [r7, #22]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0cd      	beq.n	8003b04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d129      	bne.n	8003bd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2319      	movs	r3, #25
 8003baa:	2201      	movs	r2, #1
 8003bac:	4921      	ldr	r1, [pc, #132]	@ (8003c34 <HAL_I2C_IsDeviceReady+0x254>)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f001 fe56 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e036      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e02c      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2319      	movs	r3, #25
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	490f      	ldr	r1, [pc, #60]	@ (8003c34 <HAL_I2C_IsDeviceReady+0x254>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f001 fe32 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e012      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f4ff af32 	bcc.w	8003a7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	00100002 	.word	0x00100002
 8003c38:	ffff0000 	.word	0xffff0000

08003c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d003      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x38>
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	f040 80b1 	bne.w	8003dd6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c94:	d003      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x62>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f000 8114 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f002 f836 	bl	8005d30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fd88 	bl	80047da <I2C_Master_SB>
 8003cca:	e083      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fe00 	bl	80048e6 <I2C_Master_ADD10>
 8003ce6:	e075      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fe1c 	bl	800493a <I2C_Master_ADDR>
 8003d02:	e067      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1c:	f000 80db 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9e4 	bl	800410c <I2C_MasterTransmit_TXE>
 8003d44:	e046      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c2 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bc 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b21      	cmp	r3, #33	@ 0x21
 8003d62:	d103      	bne.n	8003d6c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa6d 	bl	8004244 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	f040 80b1 	bne.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fadb 	bl	8004330 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7a:	e0ac      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	f000 80a4 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb57 	bl	8004460 <I2C_MasterReceive_RXNE>
 8003db2:	e00f      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 808b 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8085 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fc0f 	bl	80045f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd2:	e080      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd4:	e07f      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e007      	b.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ffda 	bl	8004dd8 <I2C_Slave_ADDR>
 8003e24:	e05a      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f814 	bl	8004e68 <I2C_Slave_STOPF>
 8003e40:	e04c      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b21      	cmp	r3, #33	@ 0x21
 8003e46:	d002      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x212>
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b29      	cmp	r3, #41	@ 0x29
 8003e4c:	d120      	bne.n	8003e90 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fef5 	bl	8004c5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e72:	e032      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02d      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 ff24 	bl	8004cd6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8e:	e024      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff32 	bl	8004d18 <I2C_SlaveReceive_RXNE>
 8003eb4:	e012      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 ff62 	bl	8004d94 <I2C_SlaveReceive_BTF>
 8003ed0:	e004      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	@ 0x28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03e      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d039      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003f66:	7efb      	ldrb	r3, [r7, #27]
 8003f68:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f78:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f80:	7ebb      	ldrb	r3, [r7, #26]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d112      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b21      	cmp	r3, #33	@ 0x21
 8003f90:	d008      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b29      	cmp	r3, #41	@ 0x29
 8003f96:	d005      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b28      	cmp	r3, #40	@ 0x28
 8003f9c:	d106      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b21      	cmp	r3, #33	@ 0x21
 8003fa2:	d103      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f88f 	bl	80050c8 <I2C_Slave_AF>
 8003faa:	e016      	b.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fb4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fbe:	7efb      	ldrb	r3, [r7, #27]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d002      	beq.n	8003fca <HAL_I2C_ER_IRQHandler+0xe8>
 8003fc4:	7efb      	ldrb	r3, [r7, #27]
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d107      	bne.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	f043 0308 	orr.w	r3, r3, #8
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ffe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 f8cc 	bl	80051b0 <I2C_ITError>
  }
}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
 800407c:	4613      	mov	r3, r2
 800407e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	b2db      	uxtb	r3, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004122:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d150      	bne.n	80041d4 <I2C_MasterTransmit_TXE+0xc8>
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b21      	cmp	r3, #33	@ 0x21
 8004136:	d14d      	bne.n	80041d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b08      	cmp	r3, #8
 800413c:	d01d      	beq.n	800417a <I2C_MasterTransmit_TXE+0x6e>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b20      	cmp	r3, #32
 8004142:	d01a      	beq.n	800417a <I2C_MasterTransmit_TXE+0x6e>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800414a:	d016      	beq.n	800417a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800415a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2211      	movs	r2, #17
 8004160:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff54 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004178:	e060      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004188:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004198:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d107      	bne.n	80041c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff6f 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c2:	e03b      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff27 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041d2:	e033      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b21      	cmp	r3, #33	@ 0x21
 80041d8:	d005      	beq.n	80041e6 <I2C_MasterTransmit_TXE+0xda>
 80041da:	7bbb      	ldrb	r3, [r7, #14]
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d12d      	bne.n	800423c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b22      	cmp	r3, #34	@ 0x22
 80041e4:	d12a      	bne.n	800423c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004200:	e01c      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d103      	bne.n	8004216 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f88e 	bl	8004330 <I2C_MemoryTransmit_TXE_BTF>
}
 8004214:	e012      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800423a:	e7ff      	b.n	800423c <I2C_MasterTransmit_TXE+0x130>
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b21      	cmp	r3, #33	@ 0x21
 800425c:	d164      	bne.n	8004328 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800428c:	e04c      	b.n	8004328 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d01d      	beq.n	80042d0 <I2C_MasterTransmit_BTF+0x8c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b20      	cmp	r3, #32
 8004298:	d01a      	beq.n	80042d0 <I2C_MasterTransmit_BTF+0x8c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042a0:	d016      	beq.n	80042d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2211      	movs	r2, #17
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fea9 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 80042ce:	e02b      	b.n	8004328 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d107      	bne.n	800431a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fec4 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 8004318:	e006      	b.n	8004328 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fe7c 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11d      	bne.n	8004384 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10b      	bne.n	8004368 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004366:	e077      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436c:	b29b      	uxth	r3, r3
 800436e:	121b      	asrs	r3, r3, #8
 8004370:	b2da      	uxtb	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004382:	e069      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10b      	bne.n	80043a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	b2da      	uxtb	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043a2:	e059      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d152      	bne.n	8004452 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b22      	cmp	r3, #34	@ 0x22
 80043b0:	d10d      	bne.n	80043ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043cc:	e044      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b21      	cmp	r3, #33	@ 0x21
 80043dc:	d112      	bne.n	8004404 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004402:	e029      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d124      	bne.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b21      	cmp	r3, #33	@ 0x21
 8004412:	d121      	bne.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004422:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004432:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fe28 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 8004450:	e002      	b.n	8004458 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe ff82 	bl	800335c <I2C_Flush_DR>
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	@ 0x22
 8004472:	f040 80b9 	bne.w	80045e8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d921      	bls.n	80044ce <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f040 8096 	bne.w	80045e8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044cc:	e08c      	b.n	80045e8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d07f      	beq.n	80045d6 <I2C_MasterReceive_RXNE+0x176>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d002      	beq.n	80044e2 <I2C_MasterReceive_RXNE+0x82>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d179      	bne.n	80045d6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 fb66 	bl	8005bb4 <I2C_WaitOnSTOPRequestThroughIT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d14c      	bne.n	8004588 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800450c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d10a      	bne.n	800455e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fdac 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800455c:	e044      	b.n	80045e8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d002      	beq.n	8004572 <I2C_MasterReceive_RXNE+0x112>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b20      	cmp	r3, #32
 8004570:	d103      	bne.n	800457a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
 8004578:	e002      	b.n	8004580 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2212      	movs	r2, #18
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fd57 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004586:	e02f      	b.n	80045e8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004596:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fd7a 	bl	80040c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045d4:	e008      	b.n	80045e8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	605a      	str	r2, [r3, #4]
}
 80045e6:	e7ff      	b.n	80045e8 <I2C_MasterReceive_RXNE+0x188>
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b04      	cmp	r3, #4
 8004606:	d11b      	bne.n	8004640 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004616:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800463e:	e0c8      	b.n	80047d2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b03      	cmp	r3, #3
 8004648:	d129      	bne.n	800469e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d00a      	beq.n	8004676 <I2C_MasterReceive_BTF+0x86>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d007      	beq.n	8004676 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004674:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800469c:	e099      	b.n	80047d2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f040 8081 	bne.w	80047ac <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d002      	beq.n	80046b6 <I2C_MasterReceive_BTF+0xc6>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d108      	bne.n	80046c8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e019      	b.n	80046fc <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d002      	beq.n	80046d4 <I2C_MasterReceive_BTF+0xe4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d108      	bne.n	80046e6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e00a      	b.n	80046fc <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d007      	beq.n	80046fc <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004756:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	d10a      	bne.n	8004782 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fc9a 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
}
 8004780:	e027      	b.n	80047d2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d002      	beq.n	8004796 <I2C_MasterReceive_BTF+0x1a6>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b20      	cmp	r3, #32
 8004794:	d103      	bne.n	800479e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
 800479c:	e002      	b.n	80047a4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2212      	movs	r2, #18
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fc45 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
}
 80047aa:	e012      	b.n	80047d2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b40      	cmp	r3, #64	@ 0x40
 80047ec:	d117      	bne.n	800481e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004806:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004808:	e067      	b.n	80048da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]
}
 800481c:	e05d      	b.n	80048da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004826:	d133      	bne.n	8004890 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b21      	cmp	r3, #33	@ 0x21
 8004832:	d109      	bne.n	8004848 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004844:	611a      	str	r2, [r3, #16]
 8004846:	e008      	b.n	800485a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <I2C_Master_SB+0x92>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	2b00      	cmp	r3, #0
 8004872:	d032      	beq.n	80048da <I2C_Master_SB+0x100>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02d      	beq.n	80048da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800488c:	605a      	str	r2, [r3, #4]
}
 800488e:	e024      	b.n	80048da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10e      	bne.n	80048b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489c:	b29b      	uxth	r3, r3
 800489e:	11db      	asrs	r3, r3, #7
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0306 	and.w	r3, r3, #6
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f063 030f 	orn	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]
}
 80048b4:	e011      	b.n	80048da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10d      	bne.n	80048da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	11db      	asrs	r3, r3, #7
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f003 0306 	and.w	r3, r3, #6
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f063 030e 	orn	r3, r3, #14
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <I2C_Master_ADD10+0x26>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d108      	bne.n	800491e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <I2C_Master_ADD10+0x48>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800492c:	605a      	str	r2, [r3, #4]
  }
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800493a:	b480      	push	{r7}
 800493c:	b091      	sub	sp, #68	@ 0x44
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004948:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b22      	cmp	r3, #34	@ 0x22
 8004962:	f040 8169 	bne.w	8004c38 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <I2C_Master_ADDR+0x54>
 800496e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d10b      	bne.n	800498e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	e160      	b.n	8004c50 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11d      	bne.n	80049d2 <I2C_Master_ADDR+0x98>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800499e:	d118      	bne.n	80049d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80049d0:	e13e      	b.n	8004c50 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d113      	bne.n	8004a04 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e115      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	f040 808a 	bne.w	8004b24 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a16:	d137      	bne.n	8004a88 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a26:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a36:	d113      	bne.n	8004a60 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a46:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	e0e7      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e0d3      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d02e      	beq.n	8004aec <I2C_Master_ADDR+0x1b2>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d02b      	beq.n	8004aec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	2b12      	cmp	r3, #18
 8004a98:	d102      	bne.n	8004aa0 <I2C_Master_ADDR+0x166>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d125      	bne.n	8004aec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d00e      	beq.n	8004ac4 <I2C_Master_ADDR+0x18a>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d00b      	beq.n	8004ac4 <I2C_Master_ADDR+0x18a>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d008      	beq.n	8004ac4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e007      	b.n	8004ad4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ad2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	e0a1      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e085      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d14d      	bne.n	8004bca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d016      	beq.n	8004b62 <I2C_Master_ADDR+0x228>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d013      	beq.n	8004b62 <I2C_Master_ADDR+0x228>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d010      	beq.n	8004b62 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e007      	b.n	8004b72 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b70:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d117      	bne.n	8004bb2 <I2C_Master_ADDR+0x278>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b88:	d00b      	beq.n	8004ba2 <I2C_Master_ADDR+0x268>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d008      	beq.n	8004ba2 <I2C_Master_ADDR+0x268>
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d005      	beq.n	8004ba2 <I2C_Master_ADDR+0x268>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d002      	beq.n	8004ba2 <I2C_Master_ADDR+0x268>
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d107      	bne.n	8004bb2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bb0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	e032      	b.n	8004c30 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be8:	d117      	bne.n	8004c1a <I2C_Master_ADDR+0x2e0>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bf0:	d00b      	beq.n	8004c0a <I2C_Master_ADDR+0x2d0>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d008      	beq.n	8004c0a <I2C_Master_ADDR+0x2d0>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d005      	beq.n	8004c0a <I2C_Master_ADDR+0x2d0>
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d002      	beq.n	8004c0a <I2C_Master_ADDR+0x2d0>
 8004c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d107      	bne.n	8004c1a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c36:	e00b      	b.n	8004c50 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	e7ff      	b.n	8004c50 <I2C_Master_ADDR+0x316>
 8004c50:	bf00      	nop
 8004c52:	3744      	adds	r7, #68	@ 0x44
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02b      	beq.n	8004cce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d114      	bne.n	8004cce <I2C_SlaveTransmit_TXE+0x72>
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b29      	cmp	r3, #41	@ 0x29
 8004ca8:	d111      	bne.n	8004cce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2221      	movs	r2, #33	@ 0x21
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2228      	movs	r2, #40	@ 0x28
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff f9bd 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d011      	beq.n	8004d0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02c      	beq.n	8004d8c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d114      	bne.n	8004d8c <I2C_SlaveReceive_RXNE+0x74>
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d66:	d111      	bne.n	8004d8c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2222      	movs	r2, #34	@ 0x22
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2228      	movs	r2, #40	@ 0x28
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff f968 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d012      	beq.n	8004dcc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004df2:	2b28      	cmp	r3, #40	@ 0x28
 8004df4:	d125      	bne.n	8004e42 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	81bb      	strh	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e34:	89ba      	ldrh	r2, [r7, #12]
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff f918 	bl	8004070 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e40:	e00e      	b.n	8004e60 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec4:	d172      	bne.n	8004fac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b22      	cmp	r3, #34	@ 0x22
 8004eca:	d002      	beq.n	8004ed2 <I2C_Slave_STOPF+0x6a>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed0:	d135      	bne.n	8004f3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd fe6a 	bl	8002be4 <HAL_DMA_GetState>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d049      	beq.n	8004faa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	4a69      	ldr	r2, [pc, #420]	@ (80050c0 <I2C_Slave_STOPF+0x258>)
 8004f1c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd fcb2 	bl	800288c <HAL_DMA_Abort_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03d      	beq.n	8004faa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f3c:	e035      	b.n	8004faa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	f043 0204 	orr.w	r2, r3, #4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fd fe34 	bl	8002be4 <HAL_DMA_GetState>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d014      	beq.n	8004fac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	4a4e      	ldr	r2, [pc, #312]	@ (80050c0 <I2C_Slave_STOPF+0x258>)
 8004f88:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fc7c 	bl	800288c <HAL_DMA_Abort_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4798      	blx	r3
 8004fa8:	e000      	b.n	8004fac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004faa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03e      	beq.n	8005034 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d112      	bne.n	8004fea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d112      	bne.n	800501e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8b7 	bl	80051b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005042:	e039      	b.n	80050b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b2a      	cmp	r3, #42	@ 0x2a
 8005048:	d109      	bne.n	800505e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2228      	movs	r2, #40	@ 0x28
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fe ffff 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b28      	cmp	r3, #40	@ 0x28
 8005068:	d111      	bne.n	800508e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <I2C_Slave_STOPF+0x25c>)
 800506e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff f800 	bl	800408c <HAL_I2C_ListenCpltCallback>
}
 800508c:	e014      	b.n	80050b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	2b22      	cmp	r3, #34	@ 0x22
 8005094:	d002      	beq.n	800509c <I2C_Slave_STOPF+0x234>
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b22      	cmp	r3, #34	@ 0x22
 800509a:	d10d      	bne.n	80050b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fe ffd2 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	08005711 	.word	0x08005711
 80050c4:	ffff0000 	.word	0xffff0000

080050c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d002      	beq.n	80050ea <I2C_Slave_AF+0x22>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d129      	bne.n	800513e <I2C_Slave_AF+0x76>
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b28      	cmp	r3, #40	@ 0x28
 80050ee:	d126      	bne.n	800513e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a2e      	ldr	r2, [pc, #184]	@ (80051ac <I2C_Slave_AF+0xe4>)
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005104:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800510e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe ffa8 	bl	800408c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800513c:	e031      	b.n	80051a2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b21      	cmp	r3, #33	@ 0x21
 8005142:	d129      	bne.n	8005198 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <I2C_Slave_AF+0xe4>)
 8005148:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2221      	movs	r2, #33	@ 0x21
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800516e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005178:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005188:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fe f8e6 	bl	800335c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fe ff59 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
}
 8005196:	e004      	b.n	80051a2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d002      	beq.n	80051d4 <I2C_ITError+0x24>
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d10a      	bne.n	80051ea <I2C_ITError+0x3a>
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b22      	cmp	r3, #34	@ 0x22
 80051d8:	d107      	bne.n	80051ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051f0:	2b28      	cmp	r3, #40	@ 0x28
 80051f2:	d107      	bne.n	8005204 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2228      	movs	r2, #40	@ 0x28
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005202:	e015      	b.n	8005230 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005212:	d00a      	beq.n	800522a <I2C_ITError+0x7a>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b60      	cmp	r3, #96	@ 0x60
 8005218:	d007      	beq.n	800522a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800523e:	d162      	bne.n	8005306 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800524e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d020      	beq.n	80052a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	4a6a      	ldr	r2, [pc, #424]	@ (800540c <I2C_ITError+0x25c>)
 8005264:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd fb0e 	bl	800288c <HAL_DMA_Abort_IT>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8089 	beq.w	800538a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800529a:	4610      	mov	r0, r2
 800529c:	4798      	blx	r3
 800529e:	e074      	b.n	800538a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	4a59      	ldr	r2, [pc, #356]	@ (800540c <I2C_ITError+0x25c>)
 80052a6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fd faed 	bl	800288c <HAL_DMA_Abort_IT>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d068      	beq.n	800538a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b40      	cmp	r3, #64	@ 0x40
 80052c4:	d10b      	bne.n	80052de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
 8005304:	e041      	b.n	800538a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b60      	cmp	r3, #96	@ 0x60
 8005310:	d125      	bne.n	800535e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	d10b      	bne.n	8005346 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fe fec0 	bl	80040dc <HAL_I2C_AbortCpltCallback>
 800535c:	e015      	b.n	800538a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d10b      	bne.n	8005384 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fe fe9f 	bl	80040c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d113      	bne.n	8005404 <I2C_ITError+0x254>
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b28      	cmp	r3, #40	@ 0x28
 80053e0:	d110      	bne.n	8005404 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <I2C_ITError+0x260>)
 80053e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fe fe44 	bl	800408c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	08005711 	.word	0x08005711
 8005410:	ffff0000 	.word	0xffff0000

08005414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800543c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2200      	movs	r2, #0
 8005446:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa08 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005464:	d103      	bne.n	800546e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e05f      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	492d      	ldr	r1, [pc, #180]	@ (800553c <I2C_RequestMemoryWrite+0x128>)
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fa63 	bl	8005954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e04c      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	6a39      	ldr	r1, [r7, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 faee 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d107      	bne.n	80054d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e02b      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	611a      	str	r2, [r3, #16]
 80054ea:	e021      	b.n	8005530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054ec:	893b      	ldrh	r3, [r7, #8]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fc:	6a39      	ldr	r1, [r7, #32]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fac8 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b04      	cmp	r3, #4
 8005510:	d107      	bne.n	8005522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e005      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005526:	893b      	ldrh	r3, [r7, #8]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	00010002 	.word	0x00010002

08005540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4603      	mov	r3, r0
 8005550:	817b      	strh	r3, [r7, #10]
 8005552:	460b      	mov	r3, r1
 8005554:	813b      	strh	r3, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	2200      	movs	r2, #0
 8005582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f96a 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a0:	d103      	bne.n	80055aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0aa      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	4952      	ldr	r1, [pc, #328]	@ (800570c <I2C_RequestMemoryRead+0x1cc>)
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9c5 	bl	8005954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e097      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	6a39      	ldr	r1, [r7, #32]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa50 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d107      	bne.n	8005612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e076      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d105      	bne.n	8005628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	e021      	b.n	800566c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005628:	893b      	ldrh	r3, [r7, #8]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005638:	6a39      	ldr	r1, [r7, #32]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fa2a 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	2b04      	cmp	r3, #4
 800564c:	d107      	bne.n	800565e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800565c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e050      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005662:	893b      	ldrh	r3, [r7, #8]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566e:	6a39      	ldr	r1, [r7, #32]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fa0f 	bl	8005a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005680:	2b04      	cmp	r3, #4
 8005682:	d107      	bne.n	8005694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e035      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f8d3 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00d      	beq.n	80056dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ce:	d103      	bne.n	80056d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e013      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056dc:	897b      	ldrh	r3, [r7, #10]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	4906      	ldr	r1, [pc, #24]	@ (800570c <I2C_RequestMemoryRead+0x1cc>)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f92e 	bl	8005954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005720:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005728:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800572a:	4b4b      	ldr	r3, [pc, #300]	@ (8005858 <I2C_DMAAbort+0x148>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	08db      	lsrs	r3, r3, #3
 8005730:	4a4a      	ldr	r2, [pc, #296]	@ (800585c <I2C_DMAAbort+0x14c>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	0a1a      	lsrs	r2, r3, #8
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	00da      	lsls	r2, r3, #3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005756:	e00a      	b.n	800576e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800576c:	d0ea      	beq.n	8005744 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	2200      	movs	r2, #0
 800577c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578a:	2200      	movs	r2, #0
 800578c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b0:	2200      	movs	r2, #0
 80057b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	2200      	movs	r2, #0
 80057c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b60      	cmp	r3, #96	@ 0x60
 80057de:	d10e      	bne.n	80057fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f7fe fc70 	bl	80040dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057fc:	e027      	b.n	800584e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005804:	2b28      	cmp	r3, #40	@ 0x28
 8005806:	d117      	bne.n	8005838 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005826:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2228      	movs	r2, #40	@ 0x28
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005836:	e007      	b.n	8005848 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	f7fe fc3d 	bl	80040c8 <HAL_I2C_ErrorCallback>
}
 800584e:	bf00      	nop
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000000 	.word	0x20000000
 800585c:	14f8b589 	.word	0x14f8b589

08005860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005870:	e048      	b.n	8005904 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d044      	beq.n	8005904 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fc fda7 	bl	80023cc <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d139      	bne.n	8005904 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10d      	bne.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	e00c      	b.n	80058d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	43da      	mvns	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d116      	bne.n	8005904 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e023      	b.n	800594c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	0c1b      	lsrs	r3, r3, #16
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10d      	bne.n	800592a <I2C_WaitOnFlagUntilTimeout+0xca>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	43da      	mvns	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	e00c      	b.n	8005944 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	43da      	mvns	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	429a      	cmp	r2, r3
 8005948:	d093      	beq.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005962:	e071      	b.n	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005972:	d123      	bne.n	80059bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005982:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800598c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	f043 0204 	orr.w	r2, r3, #4
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e067      	b.n	8005a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d041      	beq.n	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c4:	f7fc fd02 	bl	80023cc <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d136      	bne.n	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d10c      	bne.n	80059fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	43da      	mvns	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e00b      	b.n	8005a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	43da      	mvns	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e021      	b.n	8005a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10c      	bne.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e00b      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	43da      	mvns	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4013      	ands	r3, r2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f47f af6d 	bne.w	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aa0:	e034      	b.n	8005b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f915 	bl	8005cd2 <I2C_IsAcknowledgeFailed>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e034      	b.n	8005b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d028      	beq.n	8005b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aba:	f7fc fc87 	bl	80023cc <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d302      	bcc.n	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11d      	bne.n	8005b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b80      	cmp	r3, #128	@ 0x80
 8005adc:	d016      	beq.n	8005b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e007      	b.n	8005b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d1c3      	bne.n	8005aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b30:	e034      	b.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f8cd 	bl	8005cd2 <I2C_IsAcknowledgeFailed>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e034      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d028      	beq.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fc fc3f 	bl	80023cc <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11d      	bne.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d016      	beq.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d1c3      	bne.n	8005b32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bc0:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	4a13      	ldr	r2, [pc, #76]	@ (8005c14 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	0a1a      	lsrs	r2, r3, #8
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e008      	b.n	8005c04 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c00:	d0e9      	beq.n	8005bd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000000 	.word	0x20000000
 8005c14:	14f8b589 	.word	0x14f8b589

08005c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c24:	e049      	b.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d119      	bne.n	8005c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0210 	mvn.w	r2, #16
 8005c3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e030      	b.n	8005cca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c68:	f7fc fbb0 	bl	80023cc <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11d      	bne.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b40      	cmp	r3, #64	@ 0x40
 8005c8a:	d016      	beq.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f043 0220 	orr.w	r2, r3, #32
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e007      	b.n	8005cca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d1ae      	bne.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce8:	d11b      	bne.n	8005d22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005d40:	d103      	bne.n	8005d4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d48:	e007      	b.n	8005d5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005d52:	d102      	bne.n	8005d5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2208      	movs	r2, #8
 8005d58:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e101      	b.n	8005f7c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f007 fb98 	bl	800d4c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005da6:	d102      	bne.n	8005dae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f003 ffe5 	bl	8009d82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7c1a      	ldrb	r2, [r3, #16]
 8005dc0:	f88d 2000 	strb.w	r2, [sp]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc8:	f003 fec4 	bl	8009b54 <USB_CoreInit>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0ce      	b.n	8005f7c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f003 ffdd 	bl	8009da4 <USB_SetCurrentMode>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0bf      	b.n	8005f7c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	e04a      	b.n	8005e98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3315      	adds	r3, #21
 8005e12:	2201      	movs	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3314      	adds	r3, #20
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e2a:	7bfa      	ldrb	r2, [r7, #15]
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	b298      	uxth	r0, r3
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	332e      	adds	r3, #46	@ 0x2e
 8005e3e:	4602      	mov	r2, r0
 8005e40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3318      	adds	r3, #24
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	331c      	adds	r3, #28
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3320      	adds	r3, #32
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e7e:	7bfa      	ldrb	r2, [r7, #15]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3324      	adds	r3, #36	@ 0x24
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	3301      	adds	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3af      	bcc.n	8005e02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e044      	b.n	8005f32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ed0:	7bfa      	ldrb	r2, [r7, #15]
 8005ed2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005eea:	7bfa      	ldrb	r2, [r7, #15]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	791b      	ldrb	r3, [r3, #4]
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3b5      	bcc.n	8005ea8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7c1a      	ldrb	r2, [r3, #16]
 8005f44:	f88d 2000 	strb.w	r2, [sp]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f4c:	f003 ff76 	bl	8009e3c <USB_DevInit>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e00c      	b.n	8005f7c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f004 ffc0 	bl	800aefa <USB_DevDisconnect>

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_PCD_Start+0x1c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e022      	b.n	8005fe6 <HAL_PCD_Start+0x62>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d009      	beq.n	8005fc8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d105      	bne.n	8005fc8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f003 fec7 	bl	8009d60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f004 ff6e 	bl	800aeb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005fee:	b590      	push	{r4, r7, lr}
 8005ff0:	b08d      	sub	sp, #52	@ 0x34
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f005 f82c 	bl	800b062 <USB_GetMode>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 848c 	bne.w	800692a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f004 ff90 	bl	800af3c <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8482 	beq.w	8006928 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f004 ff7d 	bl	800af3c <USB_ReadInterrupts>
 8006042:	4603      	mov	r3, r0
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d107      	bne.n	800605c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f002 0202 	and.w	r2, r2, #2
 800605a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f004 ff6b 	bl	800af3c <USB_ReadInterrupts>
 8006066:	4603      	mov	r3, r0
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d161      	bne.n	8006134 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0210 	bic.w	r2, r2, #16
 800607e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4413      	add	r3, r2
 800609c:	3304      	adds	r3, #4
 800609e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	0c5b      	lsrs	r3, r3, #17
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d124      	bne.n	80060f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d035      	beq.n	8006124 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	091b      	lsrs	r3, r3, #4
 80060c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	6a38      	ldr	r0, [r7, #32]
 80060cc:	f004 fda2 	bl	800ac14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060dc:	441a      	add	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ee:	441a      	add	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	615a      	str	r2, [r3, #20]
 80060f4:	e016      	b.n	8006124 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	0c5b      	lsrs	r3, r3, #17
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d110      	bne.n	8006124 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006108:	2208      	movs	r2, #8
 800610a:	4619      	mov	r1, r3
 800610c:	6a38      	ldr	r0, [r7, #32]
 800610e:	f004 fd81 	bl	800ac14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800611e:	441a      	add	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0210 	orr.w	r2, r2, #16
 8006132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f004 feff 	bl	800af3c <USB_ReadInterrupts>
 800613e:	4603      	mov	r3, r0
 8006140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006144:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006148:	f040 80a7 	bne.w	800629a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f004 ff04 	bl	800af62 <USB_ReadDevAllOutEpInterrupt>
 800615a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800615c:	e099      	b.n	8006292 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800615e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 808e 	beq.w	8006286 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f004 ff28 	bl	800afca <USB_ReadDevOutEPInterrupt>
 800617a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00c      	beq.n	80061a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	461a      	mov	r2, r3
 8006194:	2301      	movs	r3, #1
 8006196:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fea4 	bl	8006ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b6:	461a      	mov	r2, r3
 80061b8:	2308      	movs	r3, #8
 80061ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 ff7a 	bl	80070b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d008      	beq.n	80061e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061da:	461a      	mov	r2, r3
 80061dc:	2310      	movs	r3, #16
 80061de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d030      	beq.n	800624c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b80      	cmp	r3, #128	@ 0x80
 80061f4:	d109      	bne.n	800620a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006208:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800620a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4413      	add	r3, r2
 800621c:	3304      	adds	r3, #4
 800621e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d108      	bne.n	800623a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	b2db      	uxtb	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f007 fa43 	bl	800d6c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	461a      	mov	r2, r3
 8006248:	2302      	movs	r3, #2
 800624a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006262:	461a      	mov	r2, r3
 8006264:	2320      	movs	r3, #32
 8006266:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627e:	461a      	mov	r2, r3
 8006280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006284:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f af62 	bne.w	800615e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f004 fe4c 	bl	800af3c <USB_ReadInterrupts>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062ae:	f040 80db 	bne.w	8006468 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f004 fe6d 	bl	800af96 <USB_ReadDevAllInEpInterrupt>
 80062bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80062c2:	e0cd      	b.n	8006460 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80c2 	beq.w	8006454 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 fe93 	bl	800b006 <USB_ReadDevInEPInterrupt>
 80062e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d057      	beq.n	800639c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	2201      	movs	r2, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	43db      	mvns	r3, r3
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800630c:	4013      	ands	r3, r2
 800630e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	461a      	mov	r2, r3
 800631e:	2301      	movs	r3, #1
 8006320:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	799b      	ldrb	r3, [r3, #6]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d132      	bne.n	8006390 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3320      	adds	r3, #32
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4403      	add	r3, r0
 800634a:	331c      	adds	r3, #28
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4419      	add	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	3320      	adds	r3, #32
 8006360:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d113      	bne.n	8006390 <HAL_PCD_IRQHandler+0x3a2>
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3324      	adds	r3, #36	@ 0x24
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d108      	bne.n	8006390 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006388:	461a      	mov	r2, r3
 800638a:	2101      	movs	r1, #1
 800638c:	f004 fe9a 	bl	800b0c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f007 f917 	bl	800d5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	2308      	movs	r3, #8
 80063b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ce:	461a      	mov	r2, r3
 80063d0:	2310      	movs	r3, #16
 80063d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ea:	461a      	mov	r2, r3
 80063ec:	2340      	movs	r3, #64	@ 0x40
 80063ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d023      	beq.n	8006442 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80063fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063fc:	6a38      	ldr	r0, [r7, #32]
 80063fe:	f003 fe81 	bl	800a104 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006404:	4613      	mov	r3, r2
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	3310      	adds	r3, #16
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	3304      	adds	r3, #4
 8006414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d108      	bne.n	8006430 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f007 f95a 	bl	800d6e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	2302      	movs	r3, #2
 8006440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800644c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fcbd 	bl	8006dce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	3301      	adds	r3, #1
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800645a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645c:	085b      	lsrs	r3, r3, #1
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	f47f af2e 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f004 fd65 	bl	800af3c <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800647c:	d122      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006498:	2b01      	cmp	r3, #1
 800649a:	d108      	bne.n	80064ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80064a4:	2100      	movs	r1, #0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fea4 	bl	80071f4 <HAL_PCDEx_LPM_Callback>
 80064ac:	e002      	b.n	80064b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f007 f8f8 	bl	800d6a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80064c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f004 fd37 	bl	800af3c <USB_ReadInterrupts>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064d8:	d112      	bne.n	8006500 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d102      	bne.n	80064f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f007 f8b4 	bl	800d658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695a      	ldr	r2, [r3, #20]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80064fe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f004 fd19 	bl	800af3c <USB_ReadInterrupts>
 800650a:	4603      	mov	r3, r0
 800650c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	f040 80b7 	bne.w	8006686 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2110      	movs	r1, #16
 8006532:	4618      	mov	r0, r3
 8006534:	f003 fde6 	bl	800a104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006538:	2300      	movs	r3, #0
 800653a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653c:	e046      	b.n	80065cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800653e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006550:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800656c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	461a      	mov	r2, r3
 8006580:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006584:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c8:	3301      	adds	r3, #1
 80065ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	791b      	ldrb	r3, [r3, #4]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d3b2      	bcc.n	800653e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80065ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7bdb      	ldrb	r3, [r3, #15]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d016      	beq.n	8006622 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006604:	f043 030b 	orr.w	r3, r3, #11
 8006608:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800661a:	f043 030b 	orr.w	r3, r3, #11
 800661e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006620:	e015      	b.n	800664e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006634:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006638:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006648:	f043 030b 	orr.w	r3, r3, #11
 800664c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006660:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006670:	461a      	mov	r2, r3
 8006672:	f004 fd27 	bl	800b0c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f004 fc56 	bl	800af3c <USB_ReadInterrupts>
 8006690:	4603      	mov	r3, r0
 8006692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800669a:	d123      	bne.n	80066e4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f004 fcec 	bl	800b07e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 fda3 	bl	800a1f6 <USB_GetDevSpeed>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681c      	ldr	r4, [r3, #0]
 80066bc:	f001 fa08 	bl	8007ad0 <HAL_RCC_GetHCLKFreq>
 80066c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066c6:	461a      	mov	r2, r3
 80066c8:	4620      	mov	r0, r4
 80066ca:	f003 faa7 	bl	8009c1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f006 ffa3 	bl	800d61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80066e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f004 fc27 	bl	800af3c <USB_ReadInterrupts>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d10a      	bne.n	800670e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f006 ff80 	bl	800d5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f002 0208 	and.w	r2, r2, #8
 800670c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f004 fc12 	bl	800af3c <USB_ReadInterrupts>
 8006718:	4603      	mov	r3, r0
 800671a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671e:	2b80      	cmp	r3, #128	@ 0x80
 8006720:	d123      	bne.n	800676a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800672e:	2301      	movs	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
 8006732:	e014      	b.n	800675e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006738:	4613      	mov	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d105      	bne.n	8006758 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	b2db      	uxtb	r3, r3
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fb0a 	bl	8006d6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	3301      	adds	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	791b      	ldrb	r3, [r3, #4]
 8006762:	461a      	mov	r2, r3
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	4293      	cmp	r3, r2
 8006768:	d3e4      	bcc.n	8006734 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f004 fbe4 	bl	800af3c <USB_ReadInterrupts>
 8006774:	4603      	mov	r3, r0
 8006776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677e:	d13c      	bne.n	80067fa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006780:	2301      	movs	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	e02b      	b.n	80067de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3318      	adds	r3, #24
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d115      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80067ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da12      	bge.n	80067d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	3317      	adds	r3, #23
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 faca 	bl	8006d6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	3301      	adds	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d3cd      	bcc.n	8006786 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80067f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f004 fb9c 	bl	800af3c <USB_ReadInterrupts>
 8006804:	4603      	mov	r3, r0
 8006806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800680a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680e:	d156      	bne.n	80068be <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006810:	2301      	movs	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	e045      	b.n	80068a2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d12e      	bne.n	800689c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800683e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006840:	2b00      	cmp	r3, #0
 8006842:	da2b      	bge.n	800689c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006850:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d121      	bne.n	800689c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685c:	4613      	mov	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800686a:	2201      	movs	r2, #1
 800686c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006898:	6053      	str	r3, [r2, #4]
            break;
 800689a:	e008      	b.n	80068ae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	461a      	mov	r2, r3
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d3b3      	bcc.n	8006816 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80068bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f004 fb3a 	bl	800af3c <USB_ReadInterrupts>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d2:	d10a      	bne.n	80068ea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f006 ff17 	bl	800d708 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695a      	ldr	r2, [r3, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80068e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f004 fb24 	bl	800af3c <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d115      	bne.n	800692a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f006 ff07 	bl	800d724 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e000      	b.n	800692a <HAL_PCD_IRQHandler+0x93c>
      return;
 8006928:	bf00      	nop
    }
  }
}
 800692a:	3734      	adds	r7, #52	@ 0x34
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}

08006930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_PCD_SetAddress+0x1a>
 8006946:	2302      	movs	r3, #2
 8006948:	e012      	b.n	8006970 <HAL_PCD_SetAddress+0x40>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f004 fa83 	bl	800ae6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	4608      	mov	r0, r1
 8006982:	4611      	mov	r1, r2
 8006984:	461a      	mov	r2, r3
 8006986:	4603      	mov	r3, r0
 8006988:	70fb      	strb	r3, [r7, #3]
 800698a:	460b      	mov	r3, r1
 800698c:	803b      	strh	r3, [r7, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da0f      	bge.n	80069be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	3310      	adds	r3, #16
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	3304      	adds	r3, #4
 80069b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	705a      	strb	r2, [r3, #1]
 80069bc:	e00f      	b.n	80069de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	3304      	adds	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80069ea:	883b      	ldrh	r3, [r7, #0]
 80069ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	78ba      	ldrb	r2, [r7, #2]
 80069f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d004      	beq.n	8006a0c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a0c:	78bb      	ldrb	r3, [r7, #2]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d102      	bne.n	8006a18 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_PCD_EP_Open+0xae>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e00e      	b.n	8006a44 <HAL_PCD_EP_Open+0xcc>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f003 fc03 	bl	800a240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006a42:	7afb      	ldrb	r3, [r7, #11]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da0f      	bge.n	8006a80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	4613      	mov	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	3310      	adds	r3, #16
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	3304      	adds	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	705a      	strb	r2, [r3, #1]
 8006a7e:	e00f      	b.n	8006aa0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	3304      	adds	r3, #4
 8006a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_PCD_EP_Close+0x6e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e00e      	b.n	8006ad8 <HAL_PCD_EP_Close+0x8c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 fc41 	bl	800a350 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	460b      	mov	r3, r1
 8006aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	799b      	ldrb	r3, [r3, #6]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d102      	bne.n	8006b3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	799b      	ldrb	r3, [r3, #6]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6979      	ldr	r1, [r7, #20]
 8006b48:	f003 fcde 	bl	800a508 <USB_EPStartXfer>

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006b78:	681b      	ldr	r3, [r3, #0]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	460b      	mov	r3, r1
 8006b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	3304      	adds	r3, #4
 8006bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	799b      	ldrb	r3, [r3, #6]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d102      	bne.n	8006be0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	799b      	ldrb	r3, [r3, #6]
 8006be8:	461a      	mov	r2, r3
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	f003 fc8c 	bl	800a508 <USB_EPStartXfer>

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	7912      	ldrb	r2, [r2, #4]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e04f      	b.n	8006cb8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da0f      	bge.n	8006c40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	f003 020f 	and.w	r2, r3, #15
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	3310      	adds	r3, #16
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	3304      	adds	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	705a      	strb	r2, [r3, #1]
 8006c3e:	e00d      	b.n	8006c5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	3304      	adds	r3, #4
 8006c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_PCD_EP_SetStall+0x82>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e01d      	b.n	8006cb8 <HAL_PCD_EP_SetStall+0xbe>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f004 f81a 	bl	800acc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7999      	ldrb	r1, [r3, #6]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f004 fa0b 	bl	800b0c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	7912      	ldrb	r2, [r2, #4]
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d901      	bls.n	8006cde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e042      	b.n	8006d64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da0f      	bge.n	8006d06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	705a      	strb	r2, [r3, #1]
 8006d04:	e00f      	b.n	8006d26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_PCD_EP_ClrStall+0x86>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e00e      	b.n	8006d64 <HAL_PCD_EP_ClrStall+0xa4>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f004 f823 	bl	800ada0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	da0c      	bge.n	8006d9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	f003 020f 	and.w	r2, r3, #15
 8006d86:	4613      	mov	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	3310      	adds	r3, #16
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	3304      	adds	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e00c      	b.n	8006db4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	4613      	mov	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68f9      	ldr	r1, [r7, #12]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f003 fe42 	bl	800aa44 <USB_EPStopXfer>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08a      	sub	sp, #40	@ 0x28
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	3310      	adds	r3, #16
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	3304      	adds	r3, #4
 8006df4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d901      	bls.n	8006e06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e06b      	b.n	8006ede <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d902      	bls.n	8006e22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3303      	adds	r3, #3
 8006e26:	089b      	lsrs	r3, r3, #2
 8006e28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e2a:	e02a      	b.n	8006e82 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d902      	bls.n	8006e48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3303      	adds	r3, #3
 8006e4c:	089b      	lsrs	r3, r3, #2
 8006e4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68d9      	ldr	r1, [r3, #12]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4603      	mov	r3, r0
 8006e64:	6978      	ldr	r0, [r7, #20]
 8006e66:	f003 fe97 	bl	800ab98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	441a      	add	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d809      	bhi.n	8006eac <PCD_WriteEmptyTxFifo+0xde>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	695a      	ldr	r2, [r3, #20]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d203      	bcs.n	8006eac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1bf      	bne.n	8006e2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d811      	bhi.n	8006edc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	6939      	ldr	r1, [r7, #16]
 8006ed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ed8:	4013      	ands	r3, r2
 8006eda:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3720      	adds	r7, #32
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	333c      	adds	r3, #60	@ 0x3c
 8006f00:	3304      	adds	r3, #4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	799b      	ldrb	r3, [r3, #6]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d17b      	bne.n	8007016 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d015      	beq.n	8006f54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4a61      	ldr	r2, [pc, #388]	@ (80070b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	f240 80b9 	bls.w	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80b3 	beq.w	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f50:	6093      	str	r3, [r2, #8]
 8006f52:	e0a7      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	2320      	movs	r3, #32
 8006f6e:	6093      	str	r3, [r2, #8]
 8006f70:	e098      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 8093 	bne.w	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4a4b      	ldr	r2, [pc, #300]	@ (80070b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d90f      	bls.n	8006fa6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fa2:	6093      	str	r3, [r2, #8]
 8006fa4:	e07e      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	0159      	lsls	r1, r3, #5
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d114      	bne.n	8007008 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	f004 f866 	bl	800b0c4 <USB_EP0_OutStart>
 8006ff8:	e006      	b.n	8007008 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f006 fac0 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 8007014:	e046      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4a26      	ldr	r2, [pc, #152]	@ (80070b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d124      	bne.n	8007068 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	461a      	mov	r2, r3
 8007036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703a:	6093      	str	r3, [r2, #8]
 800703c:	e032      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007054:	461a      	mov	r2, r3
 8007056:	2320      	movs	r3, #32
 8007058:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f006 fa97 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 8007066:	e01d      	b.n	80070a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d114      	bne.n	8007098 <PCD_EP_OutXfrComplete_int+0x1b0>
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d108      	bne.n	8007098 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007090:	461a      	mov	r2, r3
 8007092:	2100      	movs	r1, #0
 8007094:	f004 f816 	bl	800b0c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f006 fa78 	bl	800d594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	4f54300a 	.word	0x4f54300a
 80070b4:	4f54310a 	.word	0x4f54310a

080070b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	333c      	adds	r3, #60	@ 0x3c
 80070d0:	3304      	adds	r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4a15      	ldr	r2, [pc, #84]	@ (8007140 <PCD_EP_OutSetupPacket_int+0x88>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d90e      	bls.n	800710c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	461a      	mov	r2, r3
 8007106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f006 fa2f 	bl	800d570 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a0a      	ldr	r2, [pc, #40]	@ (8007140 <PCD_EP_OutSetupPacket_int+0x88>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d90c      	bls.n	8007134 <PCD_EP_OutSetupPacket_int+0x7c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	799b      	ldrb	r3, [r3, #6]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d108      	bne.n	8007134 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800712c:	461a      	mov	r2, r3
 800712e:	2101      	movs	r1, #1
 8007130:	f003 ffc8 	bl	800b0c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	4f54300a 	.word	0x4f54300a

08007144 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
 8007150:	4613      	mov	r3, r2
 8007152:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007162:	883b      	ldrh	r3, [r7, #0]
 8007164:	0419      	lsls	r1, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	430a      	orrs	r2, r1
 800716e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007170:	e028      	b.n	80071c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4413      	add	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
 8007184:	e00d      	b.n	80071a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	3340      	adds	r3, #64	@ 0x40
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	3301      	adds	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3ec      	bcc.n	8007186 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071ac:	883b      	ldrh	r3, [r7, #0]
 80071ae:	0418      	lsls	r0, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	4302      	orrs	r2, r0
 80071bc:	3340      	adds	r3, #64	@ 0x40
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e267      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d075      	beq.n	8007316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800722a:	4b88      	ldr	r3, [pc, #544]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
 8007232:	2b04      	cmp	r3, #4
 8007234:	d00c      	beq.n	8007250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007236:	4b85      	ldr	r3, [pc, #532]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800723e:	2b08      	cmp	r3, #8
 8007240:	d112      	bne.n	8007268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007242:	4b82      	ldr	r3, [pc, #520]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800724a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800724e:	d10b      	bne.n	8007268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007250:	4b7e      	ldr	r3, [pc, #504]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05b      	beq.n	8007314 <HAL_RCC_OscConfig+0x108>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d157      	bne.n	8007314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e242      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007270:	d106      	bne.n	8007280 <HAL_RCC_OscConfig+0x74>
 8007272:	4b76      	ldr	r3, [pc, #472]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a75      	ldr	r2, [pc, #468]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e01d      	b.n	80072bc <HAL_RCC_OscConfig+0xb0>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCC_OscConfig+0x98>
 800728a:	4b70      	ldr	r3, [pc, #448]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a6f      	ldr	r2, [pc, #444]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	4b6d      	ldr	r3, [pc, #436]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6c      	ldr	r2, [pc, #432]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e00b      	b.n	80072bc <HAL_RCC_OscConfig+0xb0>
 80072a4:	4b69      	ldr	r3, [pc, #420]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a68      	ldr	r2, [pc, #416]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	4b66      	ldr	r3, [pc, #408]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a65      	ldr	r2, [pc, #404]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80072b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d013      	beq.n	80072ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c4:	f7fb f882 	bl	80023cc <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072cc:	f7fb f87e 	bl	80023cc <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b64      	cmp	r3, #100	@ 0x64
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e207      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072de:	4b5b      	ldr	r3, [pc, #364]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCC_OscConfig+0xc0>
 80072ea:	e014      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ec:	f7fb f86e 	bl	80023cc <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f4:	f7fb f86a 	bl	80023cc <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b64      	cmp	r3, #100	@ 0x64
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e1f3      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007306:	4b51      	ldr	r3, [pc, #324]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0xe8>
 8007312:	e000      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d063      	beq.n	80073ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007322:	4b4a      	ldr	r3, [pc, #296]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 030c 	and.w	r3, r3, #12
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800732e:	4b47      	ldr	r3, [pc, #284]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007336:	2b08      	cmp	r3, #8
 8007338:	d11c      	bne.n	8007374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800733a:	4b44      	ldr	r3, [pc, #272]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d116      	bne.n	8007374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007346:	4b41      	ldr	r3, [pc, #260]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_RCC_OscConfig+0x152>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d001      	beq.n	800735e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e1c7      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735e:	4b3b      	ldr	r3, [pc, #236]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4937      	ldr	r1, [pc, #220]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007372:	e03a      	b.n	80073ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800737c:	4b34      	ldr	r3, [pc, #208]	@ (8007450 <HAL_RCC_OscConfig+0x244>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007382:	f7fb f823 	bl	80023cc <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738a:	f7fb f81f 	bl	80023cc <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e1a8      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800739c:	4b2b      	ldr	r3, [pc, #172]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a8:	4b28      	ldr	r3, [pc, #160]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4925      	ldr	r1, [pc, #148]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	600b      	str	r3, [r1, #0]
 80073bc:	e015      	b.n	80073ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073be:	4b24      	ldr	r3, [pc, #144]	@ (8007450 <HAL_RCC_OscConfig+0x244>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fb f802 	bl	80023cc <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073cc:	f7fa fffe 	bl	80023cc <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e187      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073de:	4b1b      	ldr	r3, [pc, #108]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d036      	beq.n	8007464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d016      	beq.n	800742c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073fe:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <HAL_RCC_OscConfig+0x248>)
 8007400:	2201      	movs	r2, #1
 8007402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007404:	f7fa ffe2 	bl	80023cc <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740c:	f7fa ffde 	bl	80023cc <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e167      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800741e:	4b0b      	ldr	r3, [pc, #44]	@ (800744c <HAL_RCC_OscConfig+0x240>)
 8007420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0x200>
 800742a:	e01b      	b.n	8007464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800742c:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <HAL_RCC_OscConfig+0x248>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007432:	f7fa ffcb 	bl	80023cc <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007438:	e00e      	b.n	8007458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800743a:	f7fa ffc7 	bl	80023cc <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d907      	bls.n	8007458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e150      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
 800744c:	40023800 	.word	0x40023800
 8007450:	42470000 	.word	0x42470000
 8007454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007458:	4b88      	ldr	r3, [pc, #544]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800745a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1ea      	bne.n	800743a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 8097 	beq.w	80075a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007476:	4b81      	ldr	r3, [pc, #516]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007482:	2300      	movs	r3, #0
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	4b7d      	ldr	r3, [pc, #500]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	4a7c      	ldr	r2, [pc, #496]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800748c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007490:	6413      	str	r3, [r2, #64]	@ 0x40
 8007492:	4b7a      	ldr	r3, [pc, #488]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749a:	60bb      	str	r3, [r7, #8]
 800749c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800749e:	2301      	movs	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a2:	4b77      	ldr	r3, [pc, #476]	@ (8007680 <HAL_RCC_OscConfig+0x474>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d118      	bne.n	80074e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ae:	4b74      	ldr	r3, [pc, #464]	@ (8007680 <HAL_RCC_OscConfig+0x474>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a73      	ldr	r2, [pc, #460]	@ (8007680 <HAL_RCC_OscConfig+0x474>)
 80074b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ba:	f7fa ff87 	bl	80023cc <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c2:	f7fa ff83 	bl	80023cc <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e10c      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007680 <HAL_RCC_OscConfig+0x474>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d106      	bne.n	80074f6 <HAL_RCC_OscConfig+0x2ea>
 80074e8:	4b64      	ldr	r3, [pc, #400]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 80074ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ec:	4a63      	ldr	r2, [pc, #396]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f4:	e01c      	b.n	8007530 <HAL_RCC_OscConfig+0x324>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d10c      	bne.n	8007518 <HAL_RCC_OscConfig+0x30c>
 80074fe:	4b5f      	ldr	r3, [pc, #380]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007502:	4a5e      	ldr	r2, [pc, #376]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007504:	f043 0304 	orr.w	r3, r3, #4
 8007508:	6713      	str	r3, [r2, #112]	@ 0x70
 800750a:	4b5c      	ldr	r3, [pc, #368]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800750c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750e:	4a5b      	ldr	r2, [pc, #364]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6713      	str	r3, [r2, #112]	@ 0x70
 8007516:	e00b      	b.n	8007530 <HAL_RCC_OscConfig+0x324>
 8007518:	4b58      	ldr	r3, [pc, #352]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751c:	4a57      	ldr	r2, [pc, #348]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	6713      	str	r3, [r2, #112]	@ 0x70
 8007524:	4b55      	ldr	r3, [pc, #340]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007528:	4a54      	ldr	r2, [pc, #336]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800752a:	f023 0304 	bic.w	r3, r3, #4
 800752e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d015      	beq.n	8007564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fa ff48 	bl	80023cc <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753e:	e00a      	b.n	8007556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007540:	f7fa ff44 	bl	80023cc <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e0cb      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007556:	4b49      	ldr	r3, [pc, #292]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ee      	beq.n	8007540 <HAL_RCC_OscConfig+0x334>
 8007562:	e014      	b.n	800758e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007564:	f7fa ff32 	bl	80023cc <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756a:	e00a      	b.n	8007582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756c:	f7fa ff2e 	bl	80023cc <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800757a:	4293      	cmp	r3, r2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e0b5      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007582:	4b3e      	ldr	r3, [pc, #248]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1ee      	bne.n	800756c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d105      	bne.n	80075a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007594:	4b39      	ldr	r3, [pc, #228]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007598:	4a38      	ldr	r2, [pc, #224]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 800759a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800759e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80a1 	beq.w	80076ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075aa:	4b34      	ldr	r3, [pc, #208]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 030c 	and.w	r3, r3, #12
 80075b2:	2b08      	cmp	r3, #8
 80075b4:	d05c      	beq.n	8007670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d141      	bne.n	8007642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075be:	4b31      	ldr	r3, [pc, #196]	@ (8007684 <HAL_RCC_OscConfig+0x478>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c4:	f7fa ff02 	bl	80023cc <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075cc:	f7fa fefe 	bl	80023cc <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e087      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075de:	4b27      	ldr	r3, [pc, #156]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	019b      	lsls	r3, r3, #6
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	3b01      	subs	r3, #1
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	491b      	ldr	r1, [pc, #108]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007610:	4313      	orrs	r3, r2
 8007612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007614:	4b1b      	ldr	r3, [pc, #108]	@ (8007684 <HAL_RCC_OscConfig+0x478>)
 8007616:	2201      	movs	r2, #1
 8007618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761a:	f7fa fed7 	bl	80023cc <HAL_GetTick>
 800761e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007622:	f7fa fed3 	bl	80023cc <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e05c      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007634:	4b11      	ldr	r3, [pc, #68]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0f0      	beq.n	8007622 <HAL_RCC_OscConfig+0x416>
 8007640:	e054      	b.n	80076ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007642:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <HAL_RCC_OscConfig+0x478>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fa fec0 	bl	80023cc <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007650:	f7fa febc 	bl	80023cc <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e045      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007662:	4b06      	ldr	r3, [pc, #24]	@ (800767c <HAL_RCC_OscConfig+0x470>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x444>
 800766e:	e03d      	b.n	80076ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d107      	bne.n	8007688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e038      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
 800767c:	40023800 	.word	0x40023800
 8007680:	40007000 	.word	0x40007000
 8007684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007688:	4b1b      	ldr	r3, [pc, #108]	@ (80076f8 <HAL_RCC_OscConfig+0x4ec>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d028      	beq.n	80076e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d121      	bne.n	80076e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d11a      	bne.n	80076e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d111      	bne.n	80076e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	3b01      	subs	r3, #1
 80076d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d107      	bne.n	80076e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0cc      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007710:	4b68      	ldr	r3, [pc, #416]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d90c      	bls.n	8007738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771e:	4b65      	ldr	r3, [pc, #404]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b63      	ldr	r3, [pc, #396]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0b8      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007750:	4b59      	ldr	r3, [pc, #356]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a58      	ldr	r2, [pc, #352]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800775a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007768:	4b53      	ldr	r3, [pc, #332]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4a52      	ldr	r2, [pc, #328]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007774:	4b50      	ldr	r3, [pc, #320]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	494d      	ldr	r1, [pc, #308]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d044      	beq.n	800781c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d107      	bne.n	80077aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b47      	ldr	r3, [pc, #284]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d119      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e07f      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d003      	beq.n	80077ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d107      	bne.n	80077ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ba:	4b3f      	ldr	r3, [pc, #252]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e06f      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ca:	4b3b      	ldr	r3, [pc, #236]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e067      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077da:	4b37      	ldr	r3, [pc, #220]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f023 0203 	bic.w	r2, r3, #3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	4934      	ldr	r1, [pc, #208]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077ec:	f7fa fdee 	bl	80023cc <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f2:	e00a      	b.n	800780a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f4:	f7fa fdea 	bl	80023cc <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d901      	bls.n	800780a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e04f      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800780a:	4b2b      	ldr	r3, [pc, #172]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 020c 	and.w	r2, r3, #12
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	429a      	cmp	r2, r3
 800781a:	d1eb      	bne.n	80077f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800781c:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d20c      	bcs.n	8007844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782a:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007832:	4b20      	ldr	r3, [pc, #128]	@ (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e032      	b.n	80078aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007850:	4b19      	ldr	r3, [pc, #100]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4916      	ldr	r1, [pc, #88]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	4313      	orrs	r3, r2
 8007860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800786e:	4b12      	ldr	r3, [pc, #72]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	490e      	ldr	r1, [pc, #56]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800787e:	4313      	orrs	r3, r2
 8007880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007882:	f000 f821 	bl	80078c8 <HAL_RCC_GetSysClockFreq>
 8007886:	4602      	mov	r2, r0
 8007888:	4b0b      	ldr	r3, [pc, #44]	@ (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	490a      	ldr	r1, [pc, #40]	@ (80078bc <HAL_RCC_ClockConfig+0x1c0>)
 8007894:	5ccb      	ldrb	r3, [r1, r3]
 8007896:	fa22 f303 	lsr.w	r3, r2, r3
 800789a:	4a09      	ldr	r2, [pc, #36]	@ (80078c0 <HAL_RCC_ClockConfig+0x1c4>)
 800789c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800789e:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <HAL_RCC_ClockConfig+0x1c8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fa fd4e 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40023c00 	.word	0x40023c00
 80078b8:	40023800 	.word	0x40023800
 80078bc:	08010d8c 	.word	0x08010d8c
 80078c0:	20000000 	.word	0x20000000
 80078c4:	20000004 	.word	0x20000004

080078c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078cc:	b094      	sub	sp, #80	@ 0x50
 80078ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078e0:	4b79      	ldr	r3, [pc, #484]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d00d      	beq.n	8007908 <HAL_RCC_GetSysClockFreq+0x40>
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	f200 80e1 	bhi.w	8007ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_RCC_GetSysClockFreq+0x34>
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d003      	beq.n	8007902 <HAL_RCC_GetSysClockFreq+0x3a>
 80078fa:	e0db      	b.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078fc:	4b73      	ldr	r3, [pc, #460]	@ (8007acc <HAL_RCC_GetSysClockFreq+0x204>)
 80078fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007900:	e0db      	b.n	8007aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007902:	4b72      	ldr	r3, [pc, #456]	@ (8007acc <HAL_RCC_GetSysClockFreq+0x204>)
 8007904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007906:	e0d8      	b.n	8007aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007908:	4b6f      	ldr	r3, [pc, #444]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007910:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007912:	4b6d      	ldr	r3, [pc, #436]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d063      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800791e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	099b      	lsrs	r3, r3, #6
 8007924:	2200      	movs	r2, #0
 8007926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007928:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30
 8007932:	2300      	movs	r3, #0
 8007934:	637b      	str	r3, [r7, #52]	@ 0x34
 8007936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800793a:	4622      	mov	r2, r4
 800793c:	462b      	mov	r3, r5
 800793e:	f04f 0000 	mov.w	r0, #0
 8007942:	f04f 0100 	mov.w	r1, #0
 8007946:	0159      	lsls	r1, r3, #5
 8007948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800794c:	0150      	lsls	r0, r2, #5
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4621      	mov	r1, r4
 8007954:	1a51      	subs	r1, r2, r1
 8007956:	6139      	str	r1, [r7, #16]
 8007958:	4629      	mov	r1, r5
 800795a:	eb63 0301 	sbc.w	r3, r3, r1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800796c:	4659      	mov	r1, fp
 800796e:	018b      	lsls	r3, r1, #6
 8007970:	4651      	mov	r1, sl
 8007972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007976:	4651      	mov	r1, sl
 8007978:	018a      	lsls	r2, r1, #6
 800797a:	4651      	mov	r1, sl
 800797c:	ebb2 0801 	subs.w	r8, r2, r1
 8007980:	4659      	mov	r1, fp
 8007982:	eb63 0901 	sbc.w	r9, r3, r1
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800799a:	4690      	mov	r8, r2
 800799c:	4699      	mov	r9, r3
 800799e:	4623      	mov	r3, r4
 80079a0:	eb18 0303 	adds.w	r3, r8, r3
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	462b      	mov	r3, r5
 80079a8:	eb49 0303 	adc.w	r3, r9, r3
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079ba:	4629      	mov	r1, r5
 80079bc:	028b      	lsls	r3, r1, #10
 80079be:	4621      	mov	r1, r4
 80079c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079c4:	4621      	mov	r1, r4
 80079c6:	028a      	lsls	r2, r1, #10
 80079c8:	4610      	mov	r0, r2
 80079ca:	4619      	mov	r1, r3
 80079cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ce:	2200      	movs	r2, #0
 80079d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079d8:	f7f9 f8ee 	bl	8000bb8 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4613      	mov	r3, r2
 80079e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079e4:	e058      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079e6:	4b38      	ldr	r3, [pc, #224]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	2200      	movs	r2, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	4611      	mov	r1, r2
 80079f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	2300      	movs	r3, #0
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	0159      	lsls	r1, r3, #5
 8007a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a12:	0150      	lsls	r0, r2, #5
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4641      	mov	r1, r8
 8007a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a1e:	4649      	mov	r1, r9
 8007a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a38:	ebb2 040a 	subs.w	r4, r2, sl
 8007a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	00eb      	lsls	r3, r5, #3
 8007a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a4e:	00e2      	lsls	r2, r4, #3
 8007a50:	4614      	mov	r4, r2
 8007a52:	461d      	mov	r5, r3
 8007a54:	4643      	mov	r3, r8
 8007a56:	18e3      	adds	r3, r4, r3
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	eb45 0303 	adc.w	r3, r5, r3
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a6e:	4629      	mov	r1, r5
 8007a70:	028b      	lsls	r3, r1, #10
 8007a72:	4621      	mov	r1, r4
 8007a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a78:	4621      	mov	r1, r4
 8007a7a:	028a      	lsls	r2, r1, #10
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a82:	2200      	movs	r2, #0
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	61fa      	str	r2, [r7, #28]
 8007a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a8c:	f7f9 f894 	bl	8000bb8 <__aeabi_uldivmod>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4613      	mov	r3, r2
 8007a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	0c1b      	lsrs	r3, r3, #16
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ab2:	e002      	b.n	8007aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <HAL_RCC_GetSysClockFreq+0x204>)
 8007ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3750      	adds	r7, #80	@ 0x50
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	00f42400 	.word	0x00f42400

08007ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ad4:	4b03      	ldr	r3, [pc, #12]	@ (8007ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000000 	.word	0x20000000

08007ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007aec:	f7ff fff0 	bl	8007ad0 <HAL_RCC_GetHCLKFreq>
 8007af0:	4602      	mov	r2, r0
 8007af2:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	0a9b      	lsrs	r3, r3, #10
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	4903      	ldr	r1, [pc, #12]	@ (8007b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007afe:	5ccb      	ldrb	r3, [r1, r3]
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	08010d9c 	.word	0x08010d9c

08007b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b14:	f7ff ffdc 	bl	8007ad0 <HAL_RCC_GetHCLKFreq>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	0b5b      	lsrs	r3, r3, #13
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	4903      	ldr	r1, [pc, #12]	@ (8007b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b26:	5ccb      	ldrb	r3, [r1, r3]
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40023800 	.word	0x40023800
 8007b34:	08010d9c 	.word	0x08010d9c

08007b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e041      	b.n	8007bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fa f97a 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f000 fc3c 	bl	80083f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d001      	beq.n	8007bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e044      	b.n	8007c7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007c88 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d018      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x6c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1a:	d013      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x6c>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1a      	ldr	r2, [pc, #104]	@ (8007c8c <HAL_TIM_Base_Start_IT+0xb4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x6c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	@ (8007c90 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x6c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a17      	ldr	r2, [pc, #92]	@ (8007c94 <HAL_TIM_Base_Start_IT+0xbc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x6c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a16      	ldr	r2, [pc, #88]	@ (8007c98 <HAL_TIM_Base_Start_IT+0xc0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d111      	bne.n	8007c68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d010      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0201 	orr.w	r2, r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c66:	e007      	b.n	8007c78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40014000 	.word	0x40014000

08007c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e041      	b.n	8007d32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f839 	bl	8007d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f000 fb8a 	bl	80083f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d109      	bne.n	8007d74 <HAL_TIM_PWM_Start+0x24>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e022      	b.n	8007dba <HAL_TIM_PWM_Start+0x6a>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d109      	bne.n	8007d8e <HAL_TIM_PWM_Start+0x3e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	e015      	b.n	8007dba <HAL_TIM_PWM_Start+0x6a>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d109      	bne.n	8007da8 <HAL_TIM_PWM_Start+0x58>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	bf14      	ite	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	2300      	moveq	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	e008      	b.n	8007dba <HAL_TIM_PWM_Start+0x6a>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	bf14      	ite	ne
 8007db4:	2301      	movne	r3, #1
 8007db6:	2300      	moveq	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e068      	b.n	8007e94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_PWM_Start+0x82>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd0:	e013      	b.n	8007dfa <HAL_TIM_PWM_Start+0xaa>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_PWM_Start+0x92>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de0:	e00b      	b.n	8007dfa <HAL_TIM_PWM_Start+0xaa>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_PWM_Start+0xa2>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007df0:	e003      	b.n	8007dfa <HAL_TIM_PWM_Start+0xaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fda8 	bl	8008958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a23      	ldr	r2, [pc, #140]	@ (8007e9c <HAL_TIM_PWM_Start+0x14c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d107      	bne.n	8007e22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1d      	ldr	r2, [pc, #116]	@ (8007e9c <HAL_TIM_PWM_Start+0x14c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x10e>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e34:	d013      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x10e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ea0 <HAL_TIM_PWM_Start+0x150>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x10e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a17      	ldr	r2, [pc, #92]	@ (8007ea4 <HAL_TIM_PWM_Start+0x154>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x10e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ea8 <HAL_TIM_PWM_Start+0x158>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_PWM_Start+0x10e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a14      	ldr	r2, [pc, #80]	@ (8007eac <HAL_TIM_PWM_Start+0x15c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d111      	bne.n	8007e82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d010      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e80:	e007      	b.n	8007e92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40014000 	.word	0x40014000

08007eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d020      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01b      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0202 	mvn.w	r2, #2
 8007ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa5b 	bl	80083b6 <HAL_TIM_IC_CaptureCallback>
 8007f00:	e005      	b.n	8007f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa4d 	bl	80083a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa5e 	bl	80083ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d020      	beq.n	8007f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01b      	beq.n	8007f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0204 	mvn.w	r2, #4
 8007f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa35 	bl	80083b6 <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa27 	bl	80083a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fa38 	bl	80083ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d020      	beq.n	8007fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01b      	beq.n	8007fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0208 	mvn.w	r2, #8
 8007f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa0f 	bl	80083b6 <HAL_TIM_IC_CaptureCallback>
 8007f98:	e005      	b.n	8007fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa01 	bl	80083a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa12 	bl	80083ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0310 	and.w	r3, r3, #16
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01b      	beq.n	8007ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0210 	mvn.w	r2, #16
 8007fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f9e9 	bl	80083b6 <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e005      	b.n	8007ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f9db 	bl	80083a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9ec 	bl	80083ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00c      	beq.n	800801c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0201 	mvn.w	r2, #1
 8008014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7f8 ff46 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00c      	beq.n	8008040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fd2a 	bl	8008a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00c      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800805c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f9bd 	bl	80083de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0220 	mvn.w	r2, #32
 8008080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fcfc 	bl	8008a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e0ae      	b.n	800820c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	f200 809f 	bhi.w	80081fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080be:	a201      	add	r2, pc, #4	@ (adr r2, 80080c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080f9 	.word	0x080080f9
 80080c8:	080081fd 	.word	0x080081fd
 80080cc:	080081fd 	.word	0x080081fd
 80080d0:	080081fd 	.word	0x080081fd
 80080d4:	08008139 	.word	0x08008139
 80080d8:	080081fd 	.word	0x080081fd
 80080dc:	080081fd 	.word	0x080081fd
 80080e0:	080081fd 	.word	0x080081fd
 80080e4:	0800817b 	.word	0x0800817b
 80080e8:	080081fd 	.word	0x080081fd
 80080ec:	080081fd 	.word	0x080081fd
 80080f0:	080081fd 	.word	0x080081fd
 80080f4:	080081bb 	.word	0x080081bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fa04 	bl	800850c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0208 	orr.w	r2, r2, #8
 8008112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0204 	bic.w	r2, r2, #4
 8008122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6999      	ldr	r1, [r3, #24]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	619a      	str	r2, [r3, #24]
      break;
 8008136:	e064      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fa4a 	bl	80085d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6999      	ldr	r1, [r3, #24]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	619a      	str	r2, [r3, #24]
      break;
 8008178:	e043      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fa95 	bl	80086b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f042 0208 	orr.w	r2, r2, #8
 8008194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69da      	ldr	r2, [r3, #28]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0204 	bic.w	r2, r2, #4
 80081a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69d9      	ldr	r1, [r3, #28]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	61da      	str	r2, [r3, #28]
      break;
 80081b8:	e023      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fadf 	bl	8008784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69d9      	ldr	r1, [r3, #28]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	021a      	lsls	r2, r3, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	61da      	str	r2, [r3, #28]
      break;
 80081fa:	e002      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_TIM_ConfigClockSource+0x1c>
 800822c:	2302      	movs	r3, #2
 800822e:	e0b4      	b.n	800839a <HAL_TIM_ConfigClockSource+0x186>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800824e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008268:	d03e      	beq.n	80082e8 <HAL_TIM_ConfigClockSource+0xd4>
 800826a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800826e:	f200 8087 	bhi.w	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008276:	f000 8086 	beq.w	8008386 <HAL_TIM_ConfigClockSource+0x172>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827e:	d87f      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008280:	2b70      	cmp	r3, #112	@ 0x70
 8008282:	d01a      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0xa6>
 8008284:	2b70      	cmp	r3, #112	@ 0x70
 8008286:	d87b      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b60      	cmp	r3, #96	@ 0x60
 800828a:	d050      	beq.n	800832e <HAL_TIM_ConfigClockSource+0x11a>
 800828c:	2b60      	cmp	r3, #96	@ 0x60
 800828e:	d877      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b50      	cmp	r3, #80	@ 0x50
 8008292:	d03c      	beq.n	800830e <HAL_TIM_ConfigClockSource+0xfa>
 8008294:	2b50      	cmp	r3, #80	@ 0x50
 8008296:	d873      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	d058      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x13a>
 800829c:	2b40      	cmp	r3, #64	@ 0x40
 800829e:	d86f      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b30      	cmp	r3, #48	@ 0x30
 80082a2:	d064      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082a4:	2b30      	cmp	r3, #48	@ 0x30
 80082a6:	d86b      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d060      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d867      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05c      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d05a      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082b8:	e062      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082ca:	f000 fb25 	bl	8008918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	609a      	str	r2, [r3, #8]
      break;
 80082e6:	e04f      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082f8:	f000 fb0e 	bl	8008918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800830a:	609a      	str	r2, [r3, #8]
      break;
 800830c:	e03c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	461a      	mov	r2, r3
 800831c:	f000 fa82 	bl	8008824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2150      	movs	r1, #80	@ 0x50
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fadb 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 800832c:	e02c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800833a:	461a      	mov	r2, r3
 800833c:	f000 faa1 	bl	8008882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2160      	movs	r1, #96	@ 0x60
 8008346:	4618      	mov	r0, r3
 8008348:	f000 facb 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 800834c:	e01c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800835a:	461a      	mov	r2, r3
 800835c:	f000 fa62 	bl	8008824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2140      	movs	r1, #64	@ 0x40
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fabb 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 800836c:	e00c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f000 fab2 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 800837e:	e003      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e000      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a3a      	ldr	r2, [pc, #232]	@ (80084f0 <TIM_Base_SetConfig+0xfc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00f      	beq.n	800842c <TIM_Base_SetConfig+0x38>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008412:	d00b      	beq.n	800842c <TIM_Base_SetConfig+0x38>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a37      	ldr	r2, [pc, #220]	@ (80084f4 <TIM_Base_SetConfig+0x100>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d007      	beq.n	800842c <TIM_Base_SetConfig+0x38>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a36      	ldr	r2, [pc, #216]	@ (80084f8 <TIM_Base_SetConfig+0x104>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d003      	beq.n	800842c <TIM_Base_SetConfig+0x38>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a35      	ldr	r2, [pc, #212]	@ (80084fc <TIM_Base_SetConfig+0x108>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d108      	bne.n	800843e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2b      	ldr	r2, [pc, #172]	@ (80084f0 <TIM_Base_SetConfig+0xfc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01b      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800844c:	d017      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a28      	ldr	r2, [pc, #160]	@ (80084f4 <TIM_Base_SetConfig+0x100>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a27      	ldr	r2, [pc, #156]	@ (80084f8 <TIM_Base_SetConfig+0x104>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00f      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a26      	ldr	r2, [pc, #152]	@ (80084fc <TIM_Base_SetConfig+0x108>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a25      	ldr	r2, [pc, #148]	@ (8008500 <TIM_Base_SetConfig+0x10c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d007      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a24      	ldr	r2, [pc, #144]	@ (8008504 <TIM_Base_SetConfig+0x110>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_Base_SetConfig+0x8a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a23      	ldr	r2, [pc, #140]	@ (8008508 <TIM_Base_SetConfig+0x114>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a0e      	ldr	r2, [pc, #56]	@ (80084f0 <TIM_Base_SetConfig+0xfc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d103      	bne.n	80084c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d105      	bne.n	80084e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f023 0201 	bic.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	611a      	str	r2, [r3, #16]
  }
}
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40010000 	.word	0x40010000
 80084f4:	40000400 	.word	0x40000400
 80084f8:	40000800 	.word	0x40000800
 80084fc:	40000c00 	.word	0x40000c00
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400
 8008508:	40014800 	.word	0x40014800

0800850c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	f023 0201 	bic.w	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 0302 	bic.w	r3, r3, #2
 8008554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1c      	ldr	r2, [pc, #112]	@ (80085d4 <TIM_OC1_SetConfig+0xc8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d10c      	bne.n	8008582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f023 0308 	bic.w	r3, r3, #8
 800856e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 0304 	bic.w	r3, r3, #4
 8008580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a13      	ldr	r2, [pc, #76]	@ (80085d4 <TIM_OC1_SetConfig+0xc8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d111      	bne.n	80085ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40010000 	.word	0x40010000

080085d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	f023 0210 	bic.w	r2, r3, #16
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800860e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f023 0320 	bic.w	r3, r3, #32
 8008622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1e      	ldr	r2, [pc, #120]	@ (80086ac <TIM_OC2_SetConfig+0xd4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10d      	bne.n	8008654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a15      	ldr	r2, [pc, #84]	@ (80086ac <TIM_OC2_SetConfig+0xd4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d113      	bne.n	8008684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800866a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40010000 	.word	0x40010000

080086b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <TIM_OC3_SetConfig+0xd0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10d      	bne.n	800872a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a14      	ldr	r2, [pc, #80]	@ (8008780 <TIM_OC3_SetConfig+0xd0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d113      	bne.n	800875a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	621a      	str	r2, [r3, #32]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	40010000 	.word	0x40010000

08008784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	031b      	lsls	r3, r3, #12
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a10      	ldr	r2, [pc, #64]	@ (8008820 <TIM_OC4_SetConfig+0x9c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d109      	bne.n	80087f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	019b      	lsls	r3, r3, #6
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	621a      	str	r2, [r3, #32]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40010000 	.word	0x40010000

08008824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f023 0201 	bic.w	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800884e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f023 030a 	bic.w	r3, r3, #10
 8008860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008882:	b480      	push	{r7}
 8008884:	b087      	sub	sp, #28
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f023 0210 	bic.w	r2, r3, #16
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	031b      	lsls	r3, r3, #12
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	f043 0307 	orr.w	r3, r3, #7
 8008904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	431a      	orrs	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4313      	orrs	r3, r2
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	2201      	movs	r2, #1
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1a      	ldr	r2, [r3, #32]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	43db      	mvns	r3, r3
 800897a:	401a      	ands	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	fa01 f303 	lsl.w	r3, r1, r3
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
	...

080089a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e050      	b.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1c      	ldr	r2, [pc, #112]	@ (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d018      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a08:	d013      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00e      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a16      	ldr	r2, [pc, #88]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d009      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a15      	ldr	r2, [pc, #84]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a13      	ldr	r2, [pc, #76]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d10c      	bne.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40014000 	.word	0x40014000

08008a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e042      	b.n	8008b40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7f9 fa74 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2224      	movs	r2, #36	@ 0x24
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fdbd 	bl	800966c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	@ 0x28
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d175      	bne.n	8008c54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_UART_Transmit+0x2c>
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e06e      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2221      	movs	r2, #33	@ 0x21
 8008b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b86:	f7f9 fc21 	bl	80023cc <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	88fa      	ldrh	r2, [r7, #6]
 8008b96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_UART_Transmit+0x6c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e003      	b.n	8008bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bbc:	e02e      	b.n	8008c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 fb1f 	bl	800920c <UART_WaitOnFlagUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e03a      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	61bb      	str	r3, [r7, #24]
 8008bfc:	e007      	b.n	8008c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1cb      	bne.n	8008bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2140      	movs	r1, #64	@ 0x40
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 faeb 	bl	800920c <UART_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e006      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d112      	bne.n	8008c9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UART_Receive_IT+0x26>
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e00b      	b.n	8008ca0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	461a      	mov	r2, r3
 8008c92:	68b9      	ldr	r1, [r7, #8]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fb12 	bl	80092be <UART_Start_Receive_IT>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	e000      	b.n	8008ca0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008c9e:	2302      	movs	r3, #2
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b0ba      	sub	sp, #232	@ 0xe8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10f      	bne.n	8008d0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_UART_IRQHandler+0x66>
 8008cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fbf2 	bl	80094f0 <UART_Receive_IT>
      return;
 8008d0c:	e25b      	b.n	80091c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80de 	beq.w	8008ed4 <HAL_UART_IRQHandler+0x22c>
 8008d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80d1 	beq.w	8008ed4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_UART_IRQHandler+0xae>
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4e:	f043 0201 	orr.w	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <HAL_UART_IRQHandler+0xd2>
 8008d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d72:	f043 0202 	orr.w	r2, r3, #2
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00b      	beq.n	8008d9e <HAL_UART_IRQHandler+0xf6>
 8008d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d96:	f043 0204 	orr.w	r2, r3, #4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d011      	beq.n	8008dce <HAL_UART_IRQHandler+0x126>
 8008daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc6:	f043 0208 	orr.w	r2, r3, #8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 81f2 	beq.w	80091bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_UART_IRQHandler+0x14e>
 8008de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fb7d 	bl	80094f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e00:	2b40      	cmp	r3, #64	@ 0x40
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <HAL_UART_IRQHandler+0x17a>
 8008e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d04f      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fa85 	bl	8009332 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d141      	bne.n	8008eba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3314      	adds	r3, #20
 8008e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1d9      	bne.n	8008e36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d013      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8009088 <HAL_UART_IRQHandler+0x3e0>)
 8008e90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f9 fcf8 	bl	800288c <HAL_DMA_Abort_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d016      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	e00e      	b.n	8008ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f994 	bl	80091e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	e00a      	b.n	8008ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f990 	bl	80091e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	e006      	b.n	8008ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f98c 	bl	80091e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008ece:	e175      	b.n	80091bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed0:	bf00      	nop
    return;
 8008ed2:	e173      	b.n	80091bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	f040 814f 	bne.w	800917c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8148 	beq.w	800917c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8141 	beq.w	800917c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1a:	2b40      	cmp	r3, #64	@ 0x40
 8008f1c:	f040 80b6 	bne.w	800908c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8145 	beq.w	80091c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	f080 813e 	bcs.w	80091c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f56:	f000 8088 	beq.w	800906a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	330c      	adds	r3, #12
 8008f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	330c      	adds	r3, #12
 8008f82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1d9      	bne.n	8008f5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e1      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3314      	adds	r3, #20
 8009002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009006:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009008:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800900c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e3      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903a:	f023 0310 	bic.w	r3, r3, #16
 800903e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	330c      	adds	r3, #12
 8009048:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800904c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800904e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009052:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800905a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e3      	bne.n	8009028 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009064:	4618      	mov	r0, r3
 8009066:	f7f9 fba1 	bl	80027ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2202      	movs	r2, #2
 800906e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009078:	b29b      	uxth	r3, r3
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	b29b      	uxth	r3, r3
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f8b7 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009086:	e09b      	b.n	80091c0 <HAL_UART_IRQHandler+0x518>
 8009088:	080093f9 	.word	0x080093f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009094:	b29b      	uxth	r3, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 808e 	beq.w	80091c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80090a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8089 	beq.w	80091c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	330c      	adds	r3, #12
 80090b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80090d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80090d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3314      	adds	r3, #20
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	623b      	str	r3, [r7, #32]
   return(result);
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3314      	adds	r3, #20
 800910a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800910e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e3      	bne.n	80090ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0310 	bic.w	r3, r3, #16
 8009146:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009154:	61fa      	str	r2, [r7, #28]
 8009156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	69b9      	ldr	r1, [r7, #24]
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	617b      	str	r3, [r7, #20]
   return(result);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e3      	bne.n	8009130 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800916e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f83d 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800917a:	e023      	b.n	80091c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <HAL_UART_IRQHandler+0x4f4>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f943 	bl	8009420 <UART_Transmit_IT>
    return;
 800919a:	e014      	b.n	80091c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00e      	beq.n	80091c6 <HAL_UART_IRQHandler+0x51e>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f983 	bl	80094c0 <UART_EndTransmit_IT>
    return;
 80091ba:	e004      	b.n	80091c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80091bc:	bf00      	nop
 80091be:	e002      	b.n	80091c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80091c0:	bf00      	nop
 80091c2:	e000      	b.n	80091c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80091c4:	bf00      	nop
  }
}
 80091c6:	37e8      	adds	r7, #232	@ 0xe8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	4613      	mov	r3, r2
 800921a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800921c:	e03b      	b.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d037      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009226:	f7f9 f8d1 	bl	80023cc <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	6a3a      	ldr	r2, [r7, #32]
 8009232:	429a      	cmp	r2, r3
 8009234:	d302      	bcc.n	800923c <UART_WaitOnFlagUntilTimeout+0x30>
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e03a      	b.n	80092b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d023      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b80      	cmp	r3, #128	@ 0x80
 8009252:	d020      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b40      	cmp	r3, #64	@ 0x40
 8009258:	d01d      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b08      	cmp	r3, #8
 8009266:	d116      	bne.n	8009296 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f857 	bl	8009332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2208      	movs	r2, #8
 8009288:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e00f      	b.n	80092b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4013      	ands	r3, r2
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	bf0c      	ite	eq
 80092a6:	2301      	moveq	r3, #1
 80092a8:	2300      	movne	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d0b4      	beq.n	800921e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	4613      	mov	r3, r2
 80092ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2222      	movs	r2, #34	@ 0x22
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009302:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0201 	orr.w	r2, r2, #1
 8009312:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0220 	orr.w	r2, r2, #32
 8009322:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009332:	b480      	push	{r7}
 8009334:	b095      	sub	sp, #84	@ 0x54
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	330c      	adds	r3, #12
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800935a:	643a      	str	r2, [r7, #64]	@ 0x40
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	61fb      	str	r3, [r7, #28]
   return(result);
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800938e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e5      	bne.n	800936e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d119      	bne.n	80093de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	330c      	adds	r3, #12
 80093c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ca:	61ba      	str	r2, [r7, #24]
 80093cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6979      	ldr	r1, [r7, #20]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	613b      	str	r3, [r7, #16]
   return(result);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e5      	bne.n	80093aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80093ec:	bf00      	nop
 80093ee:	3754      	adds	r7, #84	@ 0x54
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7ff fee4 	bl	80091e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b21      	cmp	r3, #33	@ 0x21
 8009432:	d13e      	bne.n	80094b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800943c:	d114      	bne.n	8009468 <UART_Transmit_IT+0x48>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d110      	bne.n	8009468 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800945a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	1c9a      	adds	r2, r3, #2
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	621a      	str	r2, [r3, #32]
 8009466:	e008      	b.n	800947a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	1c59      	adds	r1, r3, #1
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6211      	str	r1, [r2, #32]
 8009472:	781a      	ldrb	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29b      	uxth	r3, r3
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	4619      	mov	r1, r3
 8009488:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10f      	bne.n	80094ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800949c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e000      	b.n	80094b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094b2:	2302      	movs	r3, #2
  }
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fe73 	bl	80091cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08c      	sub	sp, #48	@ 0x30
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b22      	cmp	r3, #34	@ 0x22
 8009502:	f040 80ae 	bne.w	8009662 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950e:	d117      	bne.n	8009540 <UART_Receive_IT+0x50>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d113      	bne.n	8009540 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	b29b      	uxth	r3, r3
 800952a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952e:	b29a      	uxth	r2, r3
 8009530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	1c9a      	adds	r2, r3, #2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	629a      	str	r2, [r3, #40]	@ 0x28
 800953e:	e026      	b.n	800958e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009552:	d007      	beq.n	8009564 <UART_Receive_IT+0x74>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <UART_Receive_IT+0x82>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	b2da      	uxtb	r2, r3
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e008      	b.n	8009584 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29b      	uxth	r3, r3
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4619      	mov	r1, r3
 800959c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d15d      	bne.n	800965e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0220 	bic.w	r2, r2, #32
 80095b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695a      	ldr	r2, [r3, #20]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d135      	bne.n	8009654 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	330c      	adds	r3, #12
 80095f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	613b      	str	r3, [r7, #16]
   return(result);
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f023 0310 	bic.w	r3, r3, #16
 8009604:	627b      	str	r3, [r7, #36]	@ 0x24
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	330c      	adds	r3, #12
 800960c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800960e:	623a      	str	r2, [r7, #32]
 8009610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	69f9      	ldr	r1, [r7, #28]
 8009614:	6a3a      	ldr	r2, [r7, #32]
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	61bb      	str	r3, [r7, #24]
   return(result);
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b10      	cmp	r3, #16
 800962e:	d10a      	bne.n	8009646 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fdd1 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
 8009652:	e002      	b.n	800965a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7f7 fc89 	bl	8000f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	e002      	b.n	8009664 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	e000      	b.n	8009664 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009662:	2302      	movs	r3, #2
  }
}
 8009664:	4618      	mov	r0, r3
 8009666:	3730      	adds	r7, #48	@ 0x30
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800966c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009670:	b0c0      	sub	sp, #256	@ 0x100
 8009672:	af00      	add	r7, sp, #0
 8009674:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009688:	68d9      	ldr	r1, [r3, #12]
 800968a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	ea40 0301 	orr.w	r3, r0, r1
 8009694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80096c4:	f021 010c 	bic.w	r1, r1, #12
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80096d2:	430b      	orrs	r3, r1
 80096d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80096e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e6:	6999      	ldr	r1, [r3, #24]
 80096e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	ea40 0301 	orr.w	r3, r0, r1
 80096f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b8f      	ldr	r3, [pc, #572]	@ (8009938 <UART_SetConfig+0x2cc>)
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d005      	beq.n	800970c <UART_SetConfig+0xa0>
 8009700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	4b8d      	ldr	r3, [pc, #564]	@ (800993c <UART_SetConfig+0x2d0>)
 8009708:	429a      	cmp	r2, r3
 800970a:	d104      	bne.n	8009716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800970c:	f7fe fa00 	bl	8007b10 <HAL_RCC_GetPCLK2Freq>
 8009710:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009714:	e003      	b.n	800971e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009716:	f7fe f9e7 	bl	8007ae8 <HAL_RCC_GetPCLK1Freq>
 800971a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800971e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009728:	f040 810c 	bne.w	8009944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800972c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009730:	2200      	movs	r2, #0
 8009732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009736:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800973a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	1891      	adds	r1, r2, r2
 8009744:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009746:	415b      	adcs	r3, r3
 8009748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800974a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800974e:	4621      	mov	r1, r4
 8009750:	eb12 0801 	adds.w	r8, r2, r1
 8009754:	4629      	mov	r1, r5
 8009756:	eb43 0901 	adc.w	r9, r3, r1
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800976a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800976e:	4690      	mov	r8, r2
 8009770:	4699      	mov	r9, r3
 8009772:	4623      	mov	r3, r4
 8009774:	eb18 0303 	adds.w	r3, r8, r3
 8009778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800977c:	462b      	mov	r3, r5
 800977e:	eb49 0303 	adc.w	r3, r9, r3
 8009782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009792:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800979a:	460b      	mov	r3, r1
 800979c:	18db      	adds	r3, r3, r3
 800979e:	653b      	str	r3, [r7, #80]	@ 0x50
 80097a0:	4613      	mov	r3, r2
 80097a2:	eb42 0303 	adc.w	r3, r2, r3
 80097a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80097a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80097ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80097b0:	f7f7 fa02 	bl	8000bb8 <__aeabi_uldivmod>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4b61      	ldr	r3, [pc, #388]	@ (8009940 <UART_SetConfig+0x2d4>)
 80097ba:	fba3 2302 	umull	r2, r3, r3, r2
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	011c      	lsls	r4, r3, #4
 80097c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80097d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	1891      	adds	r1, r2, r2
 80097da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80097dc:	415b      	adcs	r3, r3
 80097de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80097e4:	4641      	mov	r1, r8
 80097e6:	eb12 0a01 	adds.w	sl, r2, r1
 80097ea:	4649      	mov	r1, r9
 80097ec:	eb43 0b01 	adc.w	fp, r3, r1
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009804:	4692      	mov	sl, r2
 8009806:	469b      	mov	fp, r3
 8009808:	4643      	mov	r3, r8
 800980a:	eb1a 0303 	adds.w	r3, sl, r3
 800980e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009812:	464b      	mov	r3, r9
 8009814:	eb4b 0303 	adc.w	r3, fp, r3
 8009818:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009828:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800982c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009830:	460b      	mov	r3, r1
 8009832:	18db      	adds	r3, r3, r3
 8009834:	643b      	str	r3, [r7, #64]	@ 0x40
 8009836:	4613      	mov	r3, r2
 8009838:	eb42 0303 	adc.w	r3, r2, r3
 800983c:	647b      	str	r3, [r7, #68]	@ 0x44
 800983e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009846:	f7f7 f9b7 	bl	8000bb8 <__aeabi_uldivmod>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4611      	mov	r1, r2
 8009850:	4b3b      	ldr	r3, [pc, #236]	@ (8009940 <UART_SetConfig+0x2d4>)
 8009852:	fba3 2301 	umull	r2, r3, r3, r1
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	2264      	movs	r2, #100	@ 0x64
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	1acb      	subs	r3, r1, r3
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009866:	4b36      	ldr	r3, [pc, #216]	@ (8009940 <UART_SetConfig+0x2d4>)
 8009868:	fba3 2302 	umull	r2, r3, r3, r2
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009874:	441c      	add	r4, r3
 8009876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800987a:	2200      	movs	r2, #0
 800987c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009880:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	1891      	adds	r1, r2, r2
 800988e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009890:	415b      	adcs	r3, r3
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009898:	4641      	mov	r1, r8
 800989a:	1851      	adds	r1, r2, r1
 800989c:	6339      	str	r1, [r7, #48]	@ 0x30
 800989e:	4649      	mov	r1, r9
 80098a0:	414b      	adcs	r3, r1
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80098b0:	4659      	mov	r1, fp
 80098b2:	00cb      	lsls	r3, r1, #3
 80098b4:	4651      	mov	r1, sl
 80098b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ba:	4651      	mov	r1, sl
 80098bc:	00ca      	lsls	r2, r1, #3
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	4642      	mov	r2, r8
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098cc:	464b      	mov	r3, r9
 80098ce:	460a      	mov	r2, r1
 80098d0:	eb42 0303 	adc.w	r3, r2, r3
 80098d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80098e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80098ec:	460b      	mov	r3, r1
 80098ee:	18db      	adds	r3, r3, r3
 80098f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098f2:	4613      	mov	r3, r2
 80098f4:	eb42 0303 	adc.w	r3, r2, r3
 80098f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80098fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009902:	f7f7 f959 	bl	8000bb8 <__aeabi_uldivmod>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4b0d      	ldr	r3, [pc, #52]	@ (8009940 <UART_SetConfig+0x2d4>)
 800990c:	fba3 1302 	umull	r1, r3, r3, r2
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	2164      	movs	r1, #100	@ 0x64
 8009914:	fb01 f303 	mul.w	r3, r1, r3
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	3332      	adds	r3, #50	@ 0x32
 800991e:	4a08      	ldr	r2, [pc, #32]	@ (8009940 <UART_SetConfig+0x2d4>)
 8009920:	fba2 2303 	umull	r2, r3, r2, r3
 8009924:	095b      	lsrs	r3, r3, #5
 8009926:	f003 0207 	and.w	r2, r3, #7
 800992a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4422      	add	r2, r4
 8009932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009934:	e106      	b.n	8009b44 <UART_SetConfig+0x4d8>
 8009936:	bf00      	nop
 8009938:	40011000 	.word	0x40011000
 800993c:	40011400 	.word	0x40011400
 8009940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009948:	2200      	movs	r2, #0
 800994a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800994e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009956:	4642      	mov	r2, r8
 8009958:	464b      	mov	r3, r9
 800995a:	1891      	adds	r1, r2, r2
 800995c:	6239      	str	r1, [r7, #32]
 800995e:	415b      	adcs	r3, r3
 8009960:	627b      	str	r3, [r7, #36]	@ 0x24
 8009962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009966:	4641      	mov	r1, r8
 8009968:	1854      	adds	r4, r2, r1
 800996a:	4649      	mov	r1, r9
 800996c:	eb43 0501 	adc.w	r5, r3, r1
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	00eb      	lsls	r3, r5, #3
 800997a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800997e:	00e2      	lsls	r2, r4, #3
 8009980:	4614      	mov	r4, r2
 8009982:	461d      	mov	r5, r3
 8009984:	4643      	mov	r3, r8
 8009986:	18e3      	adds	r3, r4, r3
 8009988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800998c:	464b      	mov	r3, r9
 800998e:	eb45 0303 	adc.w	r3, r5, r3
 8009992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	f04f 0300 	mov.w	r3, #0
 80099ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80099b2:	4629      	mov	r1, r5
 80099b4:	008b      	lsls	r3, r1, #2
 80099b6:	4621      	mov	r1, r4
 80099b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099bc:	4621      	mov	r1, r4
 80099be:	008a      	lsls	r2, r1, #2
 80099c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80099c4:	f7f7 f8f8 	bl	8000bb8 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4b60      	ldr	r3, [pc, #384]	@ (8009b50 <UART_SetConfig+0x4e4>)
 80099ce:	fba3 2302 	umull	r2, r3, r3, r2
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	011c      	lsls	r4, r3, #4
 80099d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80099e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80099e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	1891      	adds	r1, r2, r2
 80099ee:	61b9      	str	r1, [r7, #24]
 80099f0:	415b      	adcs	r3, r3
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099f8:	4641      	mov	r1, r8
 80099fa:	1851      	adds	r1, r2, r1
 80099fc:	6139      	str	r1, [r7, #16]
 80099fe:	4649      	mov	r1, r9
 8009a00:	414b      	adcs	r3, r1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	f04f 0200 	mov.w	r2, #0
 8009a08:	f04f 0300 	mov.w	r3, #0
 8009a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a10:	4659      	mov	r1, fp
 8009a12:	00cb      	lsls	r3, r1, #3
 8009a14:	4651      	mov	r1, sl
 8009a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a1a:	4651      	mov	r1, sl
 8009a1c:	00ca      	lsls	r2, r1, #3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	4642      	mov	r2, r8
 8009a26:	189b      	adds	r3, r3, r2
 8009a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a2c:	464b      	mov	r3, r9
 8009a2e:	460a      	mov	r2, r1
 8009a30:	eb42 0303 	adc.w	r3, r2, r3
 8009a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009a50:	4649      	mov	r1, r9
 8009a52:	008b      	lsls	r3, r1, #2
 8009a54:	4641      	mov	r1, r8
 8009a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	008a      	lsls	r2, r1, #2
 8009a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a62:	f7f7 f8a9 	bl	8000bb8 <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4b38      	ldr	r3, [pc, #224]	@ (8009b50 <UART_SetConfig+0x4e4>)
 8009a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a72:	095b      	lsrs	r3, r3, #5
 8009a74:	2264      	movs	r2, #100	@ 0x64
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
 8009a7a:	1acb      	subs	r3, r1, r3
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	3332      	adds	r3, #50	@ 0x32
 8009a80:	4a33      	ldr	r2, [pc, #204]	@ (8009b50 <UART_SetConfig+0x4e4>)
 8009a82:	fba2 2303 	umull	r2, r3, r2, r3
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a8c:	441c      	add	r4, r3
 8009a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a92:	2200      	movs	r2, #0
 8009a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a96:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	1891      	adds	r1, r2, r2
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	415b      	adcs	r3, r3
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009aac:	4641      	mov	r1, r8
 8009aae:	1851      	adds	r1, r2, r1
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	414b      	adcs	r3, r1
 8009ab6:	607b      	str	r3, [r7, #4]
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	00cb      	lsls	r3, r1, #3
 8009ac8:	4651      	mov	r1, sl
 8009aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ace:	4651      	mov	r1, sl
 8009ad0:	00ca      	lsls	r2, r1, #3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4642      	mov	r2, r8
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ade:	464b      	mov	r3, r9
 8009ae0:	460a      	mov	r2, r1
 8009ae2:	eb42 0303 	adc.w	r3, r2, r3
 8009ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009af2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009af4:	f04f 0200 	mov.w	r2, #0
 8009af8:	f04f 0300 	mov.w	r3, #0
 8009afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b00:	4649      	mov	r1, r9
 8009b02:	008b      	lsls	r3, r1, #2
 8009b04:	4641      	mov	r1, r8
 8009b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	008a      	lsls	r2, r1, #2
 8009b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009b12:	f7f7 f851 	bl	8000bb8 <__aeabi_uldivmod>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <UART_SetConfig+0x4e4>)
 8009b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b20:	095b      	lsrs	r3, r3, #5
 8009b22:	2164      	movs	r1, #100	@ 0x64
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	3332      	adds	r3, #50	@ 0x32
 8009b2e:	4a08      	ldr	r2, [pc, #32]	@ (8009b50 <UART_SetConfig+0x4e4>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	095b      	lsrs	r3, r3, #5
 8009b36:	f003 020f 	and.w	r2, r3, #15
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4422      	add	r2, r4
 8009b42:	609a      	str	r2, [r3, #8]
}
 8009b44:	bf00      	nop
 8009b46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b50:	51eb851f 	.word	0x51eb851f

08009b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b54:	b084      	sub	sp, #16
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	f107 001c 	add.w	r0, r7, #28
 8009b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d123      	bne.n	8009bb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d105      	bne.n	8009baa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fae8 	bl	800b180 <USB_CoreReset>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]
 8009bb4:	e01b      	b.n	8009bee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 fadc 	bl	800b180 <USB_CoreReset>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8009be0:	e005      	b.n	8009bee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009bee:	7fbb      	ldrb	r3, [r7, #30]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10b      	bne.n	8009c0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f043 0206 	orr.w	r2, r3, #6
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f043 0220 	orr.w	r2, r3, #32
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c18:	b004      	add	sp, #16
 8009c1a:	4770      	bx	lr

08009c1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d165      	bne.n	8009cfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a41      	ldr	r2, [pc, #260]	@ (8009d38 <USB_SetTurnaroundTime+0x11c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d906      	bls.n	8009c46 <USB_SetTurnaroundTime+0x2a>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4a40      	ldr	r2, [pc, #256]	@ (8009d3c <USB_SetTurnaroundTime+0x120>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d202      	bcs.n	8009c46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c40:	230f      	movs	r3, #15
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e062      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4a3c      	ldr	r2, [pc, #240]	@ (8009d3c <USB_SetTurnaroundTime+0x120>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d306      	bcc.n	8009c5c <USB_SetTurnaroundTime+0x40>
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	4a3b      	ldr	r2, [pc, #236]	@ (8009d40 <USB_SetTurnaroundTime+0x124>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d202      	bcs.n	8009c5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009c56:	230e      	movs	r3, #14
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	e057      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4a38      	ldr	r2, [pc, #224]	@ (8009d40 <USB_SetTurnaroundTime+0x124>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d306      	bcc.n	8009c72 <USB_SetTurnaroundTime+0x56>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4a37      	ldr	r2, [pc, #220]	@ (8009d44 <USB_SetTurnaroundTime+0x128>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d202      	bcs.n	8009c72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009c6c:	230d      	movs	r3, #13
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	e04c      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	4a33      	ldr	r2, [pc, #204]	@ (8009d44 <USB_SetTurnaroundTime+0x128>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d306      	bcc.n	8009c88 <USB_SetTurnaroundTime+0x6c>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	4a32      	ldr	r2, [pc, #200]	@ (8009d48 <USB_SetTurnaroundTime+0x12c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d802      	bhi.n	8009c88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009c82:	230c      	movs	r3, #12
 8009c84:	617b      	str	r3, [r7, #20]
 8009c86:	e041      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8009d48 <USB_SetTurnaroundTime+0x12c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d906      	bls.n	8009c9e <USB_SetTurnaroundTime+0x82>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4a2e      	ldr	r2, [pc, #184]	@ (8009d4c <USB_SetTurnaroundTime+0x130>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d802      	bhi.n	8009c9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c98:	230b      	movs	r3, #11
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	e036      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d4c <USB_SetTurnaroundTime+0x130>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d906      	bls.n	8009cb4 <USB_SetTurnaroundTime+0x98>
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4a29      	ldr	r2, [pc, #164]	@ (8009d50 <USB_SetTurnaroundTime+0x134>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d802      	bhi.n	8009cb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009cae:	230a      	movs	r3, #10
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	e02b      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4a26      	ldr	r2, [pc, #152]	@ (8009d50 <USB_SetTurnaroundTime+0x134>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d906      	bls.n	8009cca <USB_SetTurnaroundTime+0xae>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4a25      	ldr	r2, [pc, #148]	@ (8009d54 <USB_SetTurnaroundTime+0x138>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d202      	bcs.n	8009cca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009cc4:	2309      	movs	r3, #9
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e020      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4a21      	ldr	r2, [pc, #132]	@ (8009d54 <USB_SetTurnaroundTime+0x138>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d306      	bcc.n	8009ce0 <USB_SetTurnaroundTime+0xc4>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4a20      	ldr	r2, [pc, #128]	@ (8009d58 <USB_SetTurnaroundTime+0x13c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d802      	bhi.n	8009ce0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009cda:	2308      	movs	r3, #8
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e015      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d58 <USB_SetTurnaroundTime+0x13c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d906      	bls.n	8009cf6 <USB_SetTurnaroundTime+0xda>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	4a1c      	ldr	r2, [pc, #112]	@ (8009d5c <USB_SetTurnaroundTime+0x140>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d202      	bcs.n	8009cf6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009cf0:	2307      	movs	r3, #7
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	e00a      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009cf6:	2306      	movs	r3, #6
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e007      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d02:	2309      	movs	r3, #9
 8009d04:	617b      	str	r3, [r7, #20]
 8009d06:	e001      	b.n	8009d0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d08:	2309      	movs	r3, #9
 8009d0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	029b      	lsls	r3, r3, #10
 8009d20:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009d24:	431a      	orrs	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	371c      	adds	r7, #28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	00d8acbf 	.word	0x00d8acbf
 8009d3c:	00e4e1c0 	.word	0x00e4e1c0
 8009d40:	00f42400 	.word	0x00f42400
 8009d44:	01067380 	.word	0x01067380
 8009d48:	011a499f 	.word	0x011a499f
 8009d4c:	01312cff 	.word	0x01312cff
 8009d50:	014ca43f 	.word	0x014ca43f
 8009d54:	016e3600 	.word	0x016e3600
 8009d58:	01a6ab1f 	.word	0x01a6ab1f
 8009d5c:	01e84800 	.word	0x01e84800

08009d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f043 0201 	orr.w	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f023 0201 	bic.w	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d115      	bne.n	8009df2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009dd2:	200a      	movs	r0, #10
 8009dd4:	f7f8 fb06 	bl	80023e4 <HAL_Delay>
      ms += 10U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	330a      	adds	r3, #10
 8009ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 f93f 	bl	800b062 <USB_GetMode>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d01e      	beq.n	8009e28 <USB_SetCurrentMode+0x84>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2bc7      	cmp	r3, #199	@ 0xc7
 8009dee:	d9f0      	bls.n	8009dd2 <USB_SetCurrentMode+0x2e>
 8009df0:	e01a      	b.n	8009e28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d115      	bne.n	8009e24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e04:	200a      	movs	r0, #10
 8009e06:	f7f8 faed 	bl	80023e4 <HAL_Delay>
      ms += 10U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	330a      	adds	r3, #10
 8009e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f926 	bl	800b062 <USB_GetMode>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <USB_SetCurrentMode+0x84>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009e20:	d9f0      	bls.n	8009e04 <USB_SetCurrentMode+0x60>
 8009e22:	e001      	b.n	8009e28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e005      	b.n	8009e34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8009e2c:	d101      	bne.n	8009e32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b086      	sub	sp, #24
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e56:	2300      	movs	r3, #0
 8009e58:	613b      	str	r3, [r7, #16]
 8009e5a:	e009      	b.n	8009e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	3340      	adds	r3, #64	@ 0x40
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	613b      	str	r3, [r7, #16]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2b0e      	cmp	r3, #14
 8009e74:	d9f2      	bls.n	8009e5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d11c      	bne.n	8009eb8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e8c:	f043 0302 	orr.w	r3, r3, #2
 8009e90:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009eb6:	e00b      	b.n	8009ed0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009edc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d10d      	bne.n	8009f00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f968 	bl	800a1c4 <USB_SetDevSpeed>
 8009ef4:	e008      	b.n	8009f08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f963 	bl	800a1c4 <USB_SetDevSpeed>
 8009efe:	e003      	b.n	8009f08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f00:	2103      	movs	r1, #3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f95e 	bl	800a1c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f08:	2110      	movs	r1, #16
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8fa 	bl	800a104 <USB_FlushTxFifo>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f924 	bl	800a168 <USB_FlushRxFifo>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f30:	461a      	mov	r2, r3
 8009f32:	2300      	movs	r3, #0
 8009f34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	e043      	b.n	8009fdc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f6a:	d118      	bne.n	8009f9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	e013      	b.n	8009fb0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f94:	461a      	mov	r2, r3
 8009f96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	e008      	b.n	8009fb0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009faa:	461a      	mov	r2, r3
 8009fac:	2300      	movs	r3, #0
 8009fae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d3b5      	bcc.n	8009f54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	e043      	b.n	800a076 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a004:	d118      	bne.n	800a038 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	461a      	mov	r2, r3
 800a01a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e013      	b.n	800a04a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02e:	461a      	mov	r2, r3
 800a030:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	e008      	b.n	800a04a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a044:	461a      	mov	r2, r3
 800a046:	2300      	movs	r3, #0
 800a048:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a056:	461a      	mov	r2, r3
 800a058:	2300      	movs	r3, #0
 800a05a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a068:	461a      	mov	r2, r3
 800a06a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a06e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	3301      	adds	r3, #1
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a07a:	461a      	mov	r2, r3
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4293      	cmp	r3, r2
 800a080:	d3b5      	bcc.n	8009fee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a094:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a0a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d105      	bne.n	800a0b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f043 0210 	orr.w	r2, r3, #16
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	4b10      	ldr	r3, [pc, #64]	@ (800a100 <USB_DevInit+0x2c4>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f043 0208 	orr.w	r2, r3, #8
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d107      	bne.n	800a0f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0e8:	f043 0304 	orr.w	r3, r3, #4
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0fc:	b004      	add	sp, #16
 800a0fe:	4770      	bx	lr
 800a100:	803c3800 	.word	0x803c3800

0800a104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3301      	adds	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a11e:	d901      	bls.n	800a124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e01b      	b.n	800a15c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	daf2      	bge.n	800a112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	019b      	lsls	r3, r3, #6
 800a134:	f043 0220 	orr.w	r2, r3, #32
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a148:	d901      	bls.n	800a14e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e006      	b.n	800a15c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b20      	cmp	r3, #32
 800a158:	d0f0      	beq.n	800a13c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3301      	adds	r3, #1
 800a178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a180:	d901      	bls.n	800a186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e018      	b.n	800a1b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	daf2      	bge.n	800a174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2210      	movs	r2, #16
 800a196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1a4:	d901      	bls.n	800a1aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e006      	b.n	800a1b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0310 	and.w	r3, r3, #16
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d0f0      	beq.n	800a198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b087      	sub	sp, #28
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0306 	and.w	r3, r3, #6
 800a20e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e00a      	b.n	800a232 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d002      	beq.n	800a228 <USB_GetDevSpeed+0x32>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b06      	cmp	r3, #6
 800a226:	d102      	bne.n	800a22e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a228:	2302      	movs	r3, #2
 800a22a:	75fb      	strb	r3, [r7, #23]
 800a22c:	e001      	b.n	800a232 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a22e:	230f      	movs	r3, #15
 800a230:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	371c      	adds	r7, #28
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d13a      	bne.n	800a2d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	2101      	movs	r1, #1
 800a26e:	fa01 f303 	lsl.w	r3, r1, r3
 800a272:	b29b      	uxth	r3, r3
 800a274:	68f9      	ldr	r1, [r7, #12]
 800a276:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a27a:	4313      	orrs	r3, r2
 800a27c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d155      	bne.n	800a340 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	791b      	ldrb	r3, [r3, #4]
 800a2ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	059b      	lsls	r3, r3, #22
 800a2b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	e036      	b.n	800a340 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2d8:	69da      	ldr	r2, [r3, #28]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	f003 030f 	and.w	r3, r3, #15
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e8:	041b      	lsls	r3, r3, #16
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d11a      	bne.n	800a340 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	791b      	ldrb	r3, [r3, #4]
 800a324:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a326:	430b      	orrs	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	0151      	lsls	r1, r2, #5
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	440a      	add	r2, r1
 800a332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a33a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a33e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d161      	bne.n	800a430 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a37e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a382:	d11f      	bne.n	800a3c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	f003 030f 	and.w	r3, r3, #15
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	43db      	mvns	r3, r3
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	43db      	mvns	r3, r3
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a408:	4013      	ands	r3, r2
 800a40a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	0159      	lsls	r1, r3, #5
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	440b      	add	r3, r1
 800a422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a426:	4619      	mov	r1, r3
 800a428:	4b35      	ldr	r3, [pc, #212]	@ (800a500 <USB_DeactivateEndpoint+0x1b0>)
 800a42a:	4013      	ands	r3, r2
 800a42c:	600b      	str	r3, [r1, #0]
 800a42e:	e060      	b.n	800a4f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a446:	d11f      	bne.n	800a488 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a462:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a466:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	0151      	lsls	r1, r2, #5
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	440a      	add	r2, r1
 800a47e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a482:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a486:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a48e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	2101      	movs	r1, #1
 800a49a:	fa01 f303 	lsl.w	r3, r1, r3
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	43db      	mvns	r3, r3
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b2:	69da      	ldr	r2, [r3, #28]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	2101      	movs	r1, #1
 800a4be:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c2:	041b      	lsls	r3, r3, #16
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	0159      	lsls	r1, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	440b      	add	r3, r1
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4b05      	ldr	r3, [pc, #20]	@ (800a504 <USB_DeactivateEndpoint+0x1b4>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	ec337800 	.word	0xec337800
 800a504:	eff37800 	.word	0xeff37800

0800a508 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b01      	cmp	r3, #1
 800a526:	f040 817f 	bne.w	800a828 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d132      	bne.n	800a598 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	69fa      	ldr	r2, [r7, #28]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a550:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	0151      	lsls	r1, r2, #5
 800a568:	69fa      	ldr	r2, [r7, #28]
 800a56a:	440a      	add	r2, r1
 800a56c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a570:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	69ba      	ldr	r2, [r7, #24]
 800a586:	0151      	lsls	r1, r2, #5
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	440a      	add	r2, r1
 800a58c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a590:	0cdb      	lsrs	r3, r3, #19
 800a592:	04db      	lsls	r3, r3, #19
 800a594:	6113      	str	r3, [r2, #16]
 800a596:	e097      	b.n	800a6c8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	69ba      	ldr	r2, [r7, #24]
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b2:	0cdb      	lsrs	r3, r3, #19
 800a5b4:	04db      	lsls	r3, r3, #19
 800a5b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	0151      	lsls	r1, r2, #5
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a5d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a5da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d11a      	bne.n	800a618 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d903      	bls.n	800a5f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	69fa      	ldr	r2, [r7, #28]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a610:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a614:	6113      	str	r3, [r2, #16]
 800a616:	e044      	b.n	800a6a2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	4413      	add	r3, r2
 800a622:	1e5a      	subs	r2, r3, #1
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	8afb      	ldrh	r3, [r7, #22]
 800a63e:	04d9      	lsls	r1, r3, #19
 800a640:	4ba4      	ldr	r3, [pc, #656]	@ (800a8d4 <USB_EPStartXfer+0x3cc>)
 800a642:	400b      	ands	r3, r1
 800a644:	69b9      	ldr	r1, [r7, #24]
 800a646:	0148      	lsls	r0, r1, #5
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	4401      	add	r1, r0
 800a64c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	791b      	ldrb	r3, [r3, #4]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d122      	bne.n	800a6a2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a676:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a67a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	8afb      	ldrh	r3, [r7, #22]
 800a68c:	075b      	lsls	r3, r3, #29
 800a68e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a692:	69b9      	ldr	r1, [r7, #24]
 800a694:	0148      	lsls	r0, r1, #5
 800a696:	69f9      	ldr	r1, [r7, #28]
 800a698:	4401      	add	r1, r0
 800a69a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ae:	691a      	ldr	r2, [r3, #16]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	0148      	lsls	r0, r1, #5
 800a6bc:	69f9      	ldr	r1, [r7, #28]
 800a6be:	4401      	add	r1, r0
 800a6c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d14b      	bne.n	800a766 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	791b      	ldrb	r3, [r3, #4]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d128      	bne.n	800a744 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d110      	bne.n	800a724 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	0151      	lsls	r1, r2, #5
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	440a      	add	r2, r1
 800a718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a71c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e00f      	b.n	800a744 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	0151      	lsls	r1, r2, #5
 800a736:	69fa      	ldr	r2, [r7, #28]
 800a738:	440a      	add	r2, r1
 800a73a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a742:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	0151      	lsls	r1, r2, #5
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	440a      	add	r2, r1
 800a75a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a75e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	e166      	b.n	800aa34 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	0151      	lsls	r1, r2, #5
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	440a      	add	r2, r1
 800a77c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a780:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a784:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	791b      	ldrb	r3, [r3, #4]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d015      	beq.n	800a7ba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 814e 	beq.w	800aa34 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	f003 030f 	and.w	r3, r3, #15
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ae:	69f9      	ldr	r1, [r7, #28]
 800a7b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a7b8:	e13c      	b.n	800aa34 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d110      	bne.n	800a7ec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	0151      	lsls	r1, r2, #5
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	440a      	add	r2, r1
 800a7e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	e00f      	b.n	800a80c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	440a      	add	r2, r1
 800a802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a80a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	68d9      	ldr	r1, [r3, #12]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	781a      	ldrb	r2, [r3, #0]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	b298      	uxth	r0, r3
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4603      	mov	r3, r0
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f9b9 	bl	800ab98 <USB_WritePacket>
 800a826:	e105      	b.n	800aa34 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	0151      	lsls	r1, r2, #5
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	440a      	add	r2, r1
 800a83e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a842:	0cdb      	lsrs	r3, r3, #19
 800a844:	04db      	lsls	r3, r3, #19
 800a846:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a862:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a866:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a86a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d132      	bne.n	800a8d8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	689a      	ldr	r2, [r3, #8]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8a0:	69b9      	ldr	r1, [r7, #24]
 800a8a2:	0148      	lsls	r0, r1, #5
 800a8a4:	69f9      	ldr	r1, [r7, #28]
 800a8a6:	4401      	add	r1, r0
 800a8a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	0151      	lsls	r1, r2, #5
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	440a      	add	r2, r1
 800a8c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8ce:	6113      	str	r3, [r2, #16]
 800a8d0:	e062      	b.n	800a998 <USB_EPStartXfer+0x490>
 800a8d2:	bf00      	nop
 800a8d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d123      	bne.n	800a928 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ec:	691a      	ldr	r2, [r3, #16]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8f6:	69b9      	ldr	r1, [r7, #24]
 800a8f8:	0148      	lsls	r0, r1, #5
 800a8fa:	69f9      	ldr	r1, [r7, #28]
 800a8fc:	4401      	add	r1, r0
 800a8fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a902:	4313      	orrs	r3, r2
 800a904:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a924:	6113      	str	r3, [r2, #16]
 800a926:	e037      	b.n	800a998 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4413      	add	r3, r2
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	8afa      	ldrh	r2, [r7, #22]
 800a944:	fb03 f202 	mul.w	r2, r3, r2
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	8afb      	ldrh	r3, [r7, #22]
 800a95c:	04d9      	lsls	r1, r3, #19
 800a95e:	4b38      	ldr	r3, [pc, #224]	@ (800aa40 <USB_EPStartXfer+0x538>)
 800a960:	400b      	ands	r3, r1
 800a962:	69b9      	ldr	r1, [r7, #24]
 800a964:	0148      	lsls	r0, r1, #5
 800a966:	69f9      	ldr	r1, [r7, #28]
 800a968:	4401      	add	r1, r0
 800a96a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a96e:	4313      	orrs	r3, r2
 800a970:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	691a      	ldr	r2, [r3, #16]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	0148      	lsls	r0, r1, #5
 800a98c:	69f9      	ldr	r1, [r7, #28]
 800a98e:	4401      	add	r1, r0
 800a990:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a994:	4313      	orrs	r3, r2
 800a996:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10d      	bne.n	800a9ba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	68d9      	ldr	r1, [r3, #12]
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	791b      	ldrb	r3, [r3, #4]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d128      	bne.n	800aa14 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d110      	bne.n	800a9f4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	e00f      	b.n	800aa14 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	0151      	lsls	r1, r2, #5
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	440a      	add	r2, r1
 800aa0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	1ff80000 	.word	0x1ff80000

0800aa44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d14a      	bne.n	800aaf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa7a:	f040 8086 	bne.w	800ab8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	7812      	ldrb	r2, [r2, #0]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aaa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d902      	bls.n	800aadc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
          break;
 800aada:	e056      	b.n	800ab8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaf4:	d0e7      	beq.n	800aac6 <USB_EPStopXfer+0x82>
 800aaf6:	e048      	b.n	800ab8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab10:	d13b      	bne.n	800ab8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	7812      	ldrb	r2, [r2, #0]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d902      	bls.n	800ab70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab6e:	e00c      	b.n	800ab8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab88:	d0e7      	beq.n	800ab5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b089      	sub	sp, #36	@ 0x24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	4611      	mov	r1, r2
 800aba4:	461a      	mov	r2, r3
 800aba6:	460b      	mov	r3, r1
 800aba8:	71fb      	strb	r3, [r7, #7]
 800abaa:	4613      	mov	r3, r2
 800abac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800abb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d123      	bne.n	800ac06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abbe:	88bb      	ldrh	r3, [r7, #4]
 800abc0:	3303      	adds	r3, #3
 800abc2:	089b      	lsrs	r3, r3, #2
 800abc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	61bb      	str	r3, [r7, #24]
 800abca:	e018      	b.n	800abfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	031a      	lsls	r2, r3, #12
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd8:	461a      	mov	r2, r3
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6013      	str	r3, [r2, #0]
      pSrc++;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	3301      	adds	r3, #1
 800abe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	3301      	adds	r3, #1
 800abea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	3301      	adds	r3, #1
 800abf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	3301      	adds	r3, #1
 800abf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	3301      	adds	r3, #1
 800abfc:	61bb      	str	r3, [r7, #24]
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3e2      	bcc.n	800abcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3724      	adds	r7, #36	@ 0x24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b08b      	sub	sp, #44	@ 0x2c
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	089b      	lsrs	r3, r3, #2
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	623b      	str	r3, [r7, #32]
 800ac3e:	e014      	b.n	800ac6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	3301      	adds	r3, #1
 800ac50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	3301      	adds	r3, #1
 800ac56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	3301      	adds	r3, #1
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	3301      	adds	r3, #1
 800ac68:	623b      	str	r3, [r7, #32]
 800ac6a:	6a3a      	ldr	r2, [r7, #32]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d3e6      	bcc.n	800ac40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac72:	8bfb      	ldrh	r3, [r7, #30]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01e      	beq.n	800acb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac82:	461a      	mov	r2, r3
 800ac84:	f107 0310 	add.w	r3, r7, #16
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	fa22 f303 	lsr.w	r3, r2, r3
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	701a      	strb	r2, [r3, #0]
      i++;
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	3301      	adds	r3, #1
 800aca2:	623b      	str	r3, [r7, #32]
      pDest++;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	3301      	adds	r3, #1
 800aca8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800acaa:	8bfb      	ldrh	r3, [r7, #30]
 800acac:	3b01      	subs	r3, #1
 800acae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800acb0:	8bfb      	ldrh	r3, [r7, #30]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1ea      	bne.n	800ac8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800acb8:	4618      	mov	r0, r3
 800acba:	372c      	adds	r7, #44	@ 0x2c
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	785b      	ldrb	r3, [r3, #1]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d12c      	bne.n	800ad3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	db12      	blt.n	800ad18 <USB_EPSetStall+0x54>
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ad16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e02b      	b.n	800ad92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	db12      	blt.n	800ad72 <USB_EPSetStall+0xae>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00f      	beq.n	800ad72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ad70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	785b      	ldrb	r3, [r3, #1]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d128      	bne.n	800ae0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	0151      	lsls	r1, r2, #5
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	440a      	add	r2, r1
 800add2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800add6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800adda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	791b      	ldrb	r3, [r3, #4]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d003      	beq.n	800adec <USB_EPClearStall+0x4c>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	791b      	ldrb	r3, [r3, #4]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d138      	bne.n	800ae5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	e027      	b.n	800ae5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	0151      	lsls	r1, r2, #5
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	440a      	add	r2, r1
 800ae24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ae2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	791b      	ldrb	r3, [r3, #4]
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d003      	beq.n	800ae3e <USB_EPClearStall+0x9e>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d10f      	bne.n	800ae5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	0151      	lsls	r1, r2, #5
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	440a      	add	r2, r1
 800ae54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ae8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aea0:	68f9      	ldr	r1, [r7, #12]
 800aea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aea6:	4313      	orrs	r3, r2
 800aea8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aee6:	f023 0302 	bic.w	r3, r3, #2
 800aeea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af28:	f043 0302 	orr.w	r3, r3, #2
 800af2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4013      	ands	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af54:	68fb      	ldr	r3, [r7, #12]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	4013      	ands	r3, r2
 800af84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	0c1b      	lsrs	r3, r3, #16
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800af96:	b480      	push	{r7}
 800af98:	b085      	sub	sp, #20
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	4013      	ands	r3, r2
 800afb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	b29b      	uxth	r3, r3
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800afca:	b480      	push	{r7}
 800afcc:	b085      	sub	sp, #20
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	4013      	ands	r3, r2
 800aff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aff8:	68bb      	ldr	r3, [r7, #8]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b006:	b480      	push	{r7}
 800b008:	b087      	sub	sp, #28
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b028:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	f003 030f 	and.w	r3, r3, #15
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	fa22 f303 	lsr.w	r3, r2, r3
 800b036:	01db      	lsls	r3, r3, #7
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4013      	ands	r3, r2
 800b052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b054:	68bb      	ldr	r3, [r7, #8]
}
 800b056:	4618      	mov	r0, r3
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	f003 0301 	and.w	r3, r3, #1
}
 800b072:	4618      	mov	r0, r3
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b07e:	b480      	push	{r7}
 800b080:	b085      	sub	sp, #20
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b098:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b09c:	f023 0307 	bic.w	r3, r3, #7
 800b0a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	333c      	adds	r3, #60	@ 0x3c
 800b0da:	3304      	adds	r3, #4
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	4a26      	ldr	r2, [pc, #152]	@ (800b17c <USB_EP0_OutStart+0xb8>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d90a      	bls.n	800b0fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0f8:	d101      	bne.n	800b0fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e037      	b.n	800b16e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b104:	461a      	mov	r2, r3
 800b106:	2300      	movs	r3, #0
 800b108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b118:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b11c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b12c:	f043 0318 	orr.w	r3, r3, #24
 800b130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b140:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b144:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d10f      	bne.n	800b16c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b166:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b16a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	4f54300a 	.word	0x4f54300a

0800b180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b198:	d901      	bls.n	800b19e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e01b      	b.n	800b1d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	daf2      	bge.n	800b18c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f043 0201 	orr.w	r2, r3, #1
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1c2:	d901      	bls.n	800b1c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e006      	b.n	800b1d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d0f0      	beq.n	800b1b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b1f4:	f002 fc2e 	bl	800da54 <USBD_static_malloc>
 800b1f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d109      	bne.n	800b214 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32b0      	adds	r2, #176	@ 0xb0
 800b20a:	2100      	movs	r1, #0
 800b20c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b210:	2302      	movs	r3, #2
 800b212:	e0d4      	b.n	800b3be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b214:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b218:	2100      	movs	r1, #0
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f003 fe42 	bl	800eea4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32b0      	adds	r2, #176	@ 0xb0
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32b0      	adds	r2, #176	@ 0xb0
 800b23a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7c1b      	ldrb	r3, [r3, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d138      	bne.n	800b2be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b24c:	4b5e      	ldr	r3, [pc, #376]	@ (800b3c8 <USBD_CDC_Init+0x1e4>)
 800b24e:	7819      	ldrb	r1, [r3, #0]
 800b250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b254:	2202      	movs	r2, #2
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f002 fad9 	bl	800d80e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b25c:	4b5a      	ldr	r3, [pc, #360]	@ (800b3c8 <USBD_CDC_Init+0x1e4>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	f003 020f 	and.w	r2, r3, #15
 800b264:	6879      	ldr	r1, [r7, #4]
 800b266:	4613      	mov	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4413      	add	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	440b      	add	r3, r1
 800b270:	3324      	adds	r3, #36	@ 0x24
 800b272:	2201      	movs	r2, #1
 800b274:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b276:	4b55      	ldr	r3, [pc, #340]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b27e:	2202      	movs	r2, #2
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f002 fac4 	bl	800d80e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b286:	4b51      	ldr	r3, [pc, #324]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f003 020f 	and.w	r2, r3, #15
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b29e:	2201      	movs	r2, #1
 800b2a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b2a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b3d0 <USBD_CDC_Init+0x1ec>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	f003 020f 	and.w	r2, r3, #15
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	3326      	adds	r3, #38	@ 0x26
 800b2b8:	2210      	movs	r2, #16
 800b2ba:	801a      	strh	r2, [r3, #0]
 800b2bc:	e035      	b.n	800b32a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b2be:	4b42      	ldr	r3, [pc, #264]	@ (800b3c8 <USBD_CDC_Init+0x1e4>)
 800b2c0:	7819      	ldrb	r1, [r3, #0]
 800b2c2:	2340      	movs	r3, #64	@ 0x40
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f002 faa1 	bl	800d80e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b3c8 <USBD_CDC_Init+0x1e4>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f003 020f 	and.w	r2, r3, #15
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	3324      	adds	r3, #36	@ 0x24
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2e6:	4b39      	ldr	r3, [pc, #228]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b2e8:	7819      	ldrb	r1, [r3, #0]
 800b2ea:	2340      	movs	r3, #64	@ 0x40
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f002 fa8d 	bl	800d80e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2f4:	4b35      	ldr	r3, [pc, #212]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b30c:	2201      	movs	r2, #1
 800b30e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b310:	4b2f      	ldr	r3, [pc, #188]	@ (800b3d0 <USBD_CDC_Init+0x1ec>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 020f 	and.w	r2, r3, #15
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	3326      	adds	r3, #38	@ 0x26
 800b326:	2210      	movs	r2, #16
 800b328:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b32a:	4b29      	ldr	r3, [pc, #164]	@ (800b3d0 <USBD_CDC_Init+0x1ec>)
 800b32c:	7819      	ldrb	r1, [r3, #0]
 800b32e:	2308      	movs	r3, #8
 800b330:	2203      	movs	r2, #3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f002 fa6b 	bl	800d80e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b338:	4b25      	ldr	r3, [pc, #148]	@ (800b3d0 <USBD_CDC_Init+0x1ec>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 020f 	and.w	r2, r3, #15
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	3324      	adds	r3, #36	@ 0x24
 800b34e:	2201      	movs	r2, #1
 800b350:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	33b0      	adds	r3, #176	@ 0xb0
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b388:	2302      	movs	r3, #2
 800b38a:	e018      	b.n	800b3be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7c1b      	ldrb	r3, [r3, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b394:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b396:	7819      	ldrb	r1, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b39e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f002 fb22 	bl	800d9ec <USBD_LL_PrepareReceive>
 800b3a8:	e008      	b.n	800b3bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3aa:	4b08      	ldr	r3, [pc, #32]	@ (800b3cc <USBD_CDC_Init+0x1e8>)
 800b3ac:	7819      	ldrb	r1, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3b4:	2340      	movs	r3, #64	@ 0x40
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f002 fb18 	bl	800d9ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20000093 	.word	0x20000093
 800b3cc:	20000094 	.word	0x20000094
 800b3d0:	20000095 	.word	0x20000095

0800b3d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b3e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b4cc <USBD_CDC_DeInit+0xf8>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f002 fa37 	bl	800d85a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b3ec:	4b37      	ldr	r3, [pc, #220]	@ (800b4cc <USBD_CDC_DeInit+0xf8>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 020f 	and.w	r2, r3, #15
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	3324      	adds	r3, #36	@ 0x24
 800b402:	2200      	movs	r2, #0
 800b404:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b406:	4b32      	ldr	r3, [pc, #200]	@ (800b4d0 <USBD_CDC_DeInit+0xfc>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f002 fa24 	bl	800d85a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b412:	4b2f      	ldr	r3, [pc, #188]	@ (800b4d0 <USBD_CDC_DeInit+0xfc>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	f003 020f 	and.w	r2, r3, #15
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	440b      	add	r3, r1
 800b426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b42a:	2200      	movs	r2, #0
 800b42c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b42e:	4b29      	ldr	r3, [pc, #164]	@ (800b4d4 <USBD_CDC_DeInit+0x100>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f002 fa10 	bl	800d85a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b43a:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <USBD_CDC_DeInit+0x100>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 020f 	and.w	r2, r3, #15
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	3324      	adds	r3, #36	@ 0x24
 800b450:	2200      	movs	r2, #0
 800b452:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b454:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d4 <USBD_CDC_DeInit+0x100>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 020f 	and.w	r2, r3, #15
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	440b      	add	r3, r1
 800b468:	3326      	adds	r3, #38	@ 0x26
 800b46a:	2200      	movs	r2, #0
 800b46c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	32b0      	adds	r2, #176	@ 0xb0
 800b478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01f      	beq.n	800b4c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	33b0      	adds	r3, #176	@ 0xb0
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	32b0      	adds	r2, #176	@ 0xb0
 800b49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f002 fae4 	bl	800da70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	32b0      	adds	r2, #176	@ 0xb0
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20000093 	.word	0x20000093
 800b4d0:	20000094 	.word	0x20000094
 800b4d4:	20000095 	.word	0x20000095

0800b4d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	32b0      	adds	r2, #176	@ 0xb0
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	e0bf      	b.n	800b688 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b510:	2b00      	cmp	r3, #0
 800b512:	d050      	beq.n	800b5b6 <USBD_CDC_Setup+0xde>
 800b514:	2b20      	cmp	r3, #32
 800b516:	f040 80af 	bne.w	800b678 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88db      	ldrh	r3, [r3, #6]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d03a      	beq.n	800b598 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b25b      	sxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	da1b      	bge.n	800b564 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	33b0      	adds	r3, #176	@ 0xb0
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b542:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	88d2      	ldrh	r2, [r2, #6]
 800b548:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	88db      	ldrh	r3, [r3, #6]
 800b54e:	2b07      	cmp	r3, #7
 800b550:	bf28      	it	cs
 800b552:	2307      	movcs	r3, #7
 800b554:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	89fa      	ldrh	r2, [r7, #14]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 fd53 	bl	800d008 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b562:	e090      	b.n	800b686 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	785a      	ldrb	r2, [r3, #1]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	88db      	ldrh	r3, [r3, #6]
 800b572:	2b3f      	cmp	r3, #63	@ 0x3f
 800b574:	d803      	bhi.n	800b57e <USBD_CDC_Setup+0xa6>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	88db      	ldrh	r3, [r3, #6]
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	e000      	b.n	800b580 <USBD_CDC_Setup+0xa8>
 800b57e:	2240      	movs	r2, #64	@ 0x40
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b586:	6939      	ldr	r1, [r7, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b58e:	461a      	mov	r2, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f001 fd65 	bl	800d060 <USBD_CtlPrepareRx>
      break;
 800b596:	e076      	b.n	800b686 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	33b0      	adds	r3, #176	@ 0xb0
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	7850      	ldrb	r0, [r2, #1]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	4798      	blx	r3
      break;
 800b5b4:	e067      	b.n	800b686 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	2b0b      	cmp	r3, #11
 800b5bc:	d851      	bhi.n	800b662 <USBD_CDC_Setup+0x18a>
 800b5be:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c4 <USBD_CDC_Setup+0xec>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b5f5 	.word	0x0800b5f5
 800b5c8:	0800b671 	.word	0x0800b671
 800b5cc:	0800b663 	.word	0x0800b663
 800b5d0:	0800b663 	.word	0x0800b663
 800b5d4:	0800b663 	.word	0x0800b663
 800b5d8:	0800b663 	.word	0x0800b663
 800b5dc:	0800b663 	.word	0x0800b663
 800b5e0:	0800b663 	.word	0x0800b663
 800b5e4:	0800b663 	.word	0x0800b663
 800b5e8:	0800b663 	.word	0x0800b663
 800b5ec:	0800b61f 	.word	0x0800b61f
 800b5f0:	0800b649 	.word	0x0800b649
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d107      	bne.n	800b610 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b600:	f107 030a 	add.w	r3, r7, #10
 800b604:	2202      	movs	r2, #2
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 fcfd 	bl	800d008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b60e:	e032      	b.n	800b676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fc7b 	bl	800cf0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	75fb      	strb	r3, [r7, #23]
          break;
 800b61c:	e02b      	b.n	800b676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b03      	cmp	r3, #3
 800b628:	d107      	bne.n	800b63a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b62a:	f107 030d 	add.w	r3, r7, #13
 800b62e:	2201      	movs	r2, #1
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 fce8 	bl	800d008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b638:	e01d      	b.n	800b676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 fc66 	bl	800cf0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	75fb      	strb	r3, [r7, #23]
          break;
 800b646:	e016      	b.n	800b676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b03      	cmp	r3, #3
 800b652:	d00f      	beq.n	800b674 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 fc59 	bl	800cf0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b65c:	2303      	movs	r3, #3
 800b65e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b660:	e008      	b.n	800b674 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 fc52 	bl	800cf0e <USBD_CtlError>
          ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	75fb      	strb	r3, [r7, #23]
          break;
 800b66e:	e002      	b.n	800b676 <USBD_CDC_Setup+0x19e>
          break;
 800b670:	bf00      	nop
 800b672:	e008      	b.n	800b686 <USBD_CDC_Setup+0x1ae>
          break;
 800b674:	bf00      	nop
      }
      break;
 800b676:	e006      	b.n	800b686 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f001 fc47 	bl	800cf0e <USBD_CtlError>
      ret = USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	75fb      	strb	r3, [r7, #23]
      break;
 800b684:	bf00      	nop
  }

  return (uint8_t)ret;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	32b0      	adds	r2, #176	@ 0xb0
 800b6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e065      	b.n	800b786 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	32b0      	adds	r2, #176	@ 0xb0
 800b6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	f003 020f 	and.w	r2, r3, #15
 800b6d0:	6879      	ldr	r1, [r7, #4]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	440b      	add	r3, r1
 800b6dc:	3318      	adds	r3, #24
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d02f      	beq.n	800b744 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	f003 020f 	and.w	r2, r3, #15
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3318      	adds	r3, #24
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	f003 010f 	and.w	r1, r3, #15
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	460b      	mov	r3, r1
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	440b      	add	r3, r1
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4403      	add	r3, r0
 800b70c:	331c      	adds	r3, #28
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	fbb2 f1f3 	udiv	r1, r2, r3
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d112      	bne.n	800b744 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	f003 020f 	and.w	r2, r3, #15
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	4613      	mov	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	440b      	add	r3, r1
 800b730:	3318      	adds	r3, #24
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b736:	78f9      	ldrb	r1, [r7, #3]
 800b738:	2300      	movs	r3, #0
 800b73a:	2200      	movs	r2, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f002 f934 	bl	800d9aa <USBD_LL_Transmit>
 800b742:	e01f      	b.n	800b784 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2200      	movs	r2, #0
 800b748:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	33b0      	adds	r3, #176	@ 0xb0
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d010      	beq.n	800b784 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	33b0      	adds	r3, #176	@ 0xb0
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b780:	78fa      	ldrb	r2, [r7, #3]
 800b782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	460b      	mov	r3, r1
 800b798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	32b0      	adds	r2, #176	@ 0xb0
 800b7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	32b0      	adds	r2, #176	@ 0xb0
 800b7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e01a      	b.n	800b7f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f002 f932 	bl	800da2e <USBD_LL_GetRxDataSize>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	33b0      	adds	r3, #176	@ 0xb0
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	32b0      	adds	r2, #176	@ 0xb0
 800b810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e024      	b.n	800b86a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	33b0      	adds	r3, #176	@ 0xb0
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d019      	beq.n	800b868 <USBD_CDC_EP0_RxReady+0x6a>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b83a:	2bff      	cmp	r3, #255	@ 0xff
 800b83c:	d014      	beq.n	800b868 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	33b0      	adds	r3, #176	@ 0xb0
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b856:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b85e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	22ff      	movs	r2, #255	@ 0xff
 800b864:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b87c:	2182      	movs	r1, #130	@ 0x82
 800b87e:	4818      	ldr	r0, [pc, #96]	@ (800b8e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b880:	f000 fd0f 	bl	800c2a2 <USBD_GetEpDesc>
 800b884:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b886:	2101      	movs	r1, #1
 800b888:	4815      	ldr	r0, [pc, #84]	@ (800b8e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b88a:	f000 fd0a 	bl	800c2a2 <USBD_GetEpDesc>
 800b88e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b890:	2181      	movs	r1, #129	@ 0x81
 800b892:	4813      	ldr	r0, [pc, #76]	@ (800b8e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b894:	f000 fd05 	bl	800c2a2 <USBD_GetEpDesc>
 800b898:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2210      	movs	r2, #16
 800b8a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d006      	beq.n	800b8ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8b4:	711a      	strb	r2, [r3, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d006      	beq.n	800b8ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8c8:	711a      	strb	r2, [r3, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2243      	movs	r2, #67	@ 0x43
 800b8d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8d4:	4b02      	ldr	r3, [pc, #8]	@ (800b8e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	20000050 	.word	0x20000050

0800b8e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8ec:	2182      	movs	r1, #130	@ 0x82
 800b8ee:	4818      	ldr	r0, [pc, #96]	@ (800b950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8f0:	f000 fcd7 	bl	800c2a2 <USBD_GetEpDesc>
 800b8f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	4815      	ldr	r0, [pc, #84]	@ (800b950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8fa:	f000 fcd2 	bl	800c2a2 <USBD_GetEpDesc>
 800b8fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b900:	2181      	movs	r1, #129	@ 0x81
 800b902:	4813      	ldr	r0, [pc, #76]	@ (800b950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b904:	f000 fccd 	bl	800c2a2 <USBD_GetEpDesc>
 800b908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	2210      	movs	r2, #16
 800b914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d006      	beq.n	800b92a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2200      	movs	r2, #0
 800b920:	711a      	strb	r2, [r3, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f042 0202 	orr.w	r2, r2, #2
 800b928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d006      	beq.n	800b93e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	711a      	strb	r2, [r3, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f042 0202 	orr.w	r2, r2, #2
 800b93c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2243      	movs	r2, #67	@ 0x43
 800b942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b944:	4b02      	ldr	r3, [pc, #8]	@ (800b950 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000050 	.word	0x20000050

0800b954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b95c:	2182      	movs	r1, #130	@ 0x82
 800b95e:	4818      	ldr	r0, [pc, #96]	@ (800b9c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b960:	f000 fc9f 	bl	800c2a2 <USBD_GetEpDesc>
 800b964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b966:	2101      	movs	r1, #1
 800b968:	4815      	ldr	r0, [pc, #84]	@ (800b9c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b96a:	f000 fc9a 	bl	800c2a2 <USBD_GetEpDesc>
 800b96e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b970:	2181      	movs	r1, #129	@ 0x81
 800b972:	4813      	ldr	r0, [pc, #76]	@ (800b9c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b974:	f000 fc95 	bl	800c2a2 <USBD_GetEpDesc>
 800b978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2210      	movs	r2, #16
 800b984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2200      	movs	r2, #0
 800b990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b994:	711a      	strb	r2, [r3, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d006      	beq.n	800b9ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9a8:	711a      	strb	r2, [r3, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2243      	movs	r2, #67	@ 0x43
 800b9b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9b4:	4b02      	ldr	r3, [pc, #8]	@ (800b9c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000050 	.word	0x20000050

0800b9c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	220a      	movs	r2, #10
 800b9d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b9d2:	4b03      	ldr	r3, [pc, #12]	@ (800b9e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	2000000c 	.word	0x2000000c

0800b9e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e009      	b.n	800ba0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	33b0      	adds	r3, #176	@ 0xb0
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	32b0      	adds	r2, #176	@ 0xb0
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e008      	b.n	800ba50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	371c      	adds	r7, #28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	32b0      	adds	r2, #176	@ 0xb0
 800ba70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e004      	b.n	800ba8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
	...

0800ba98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32b0      	adds	r2, #176	@ 0xb0
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	32b0      	adds	r2, #176	@ 0xb0
 800baba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e018      	b.n	800baf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	7c1b      	ldrb	r3, [r3, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bace:	4b0c      	ldr	r3, [pc, #48]	@ (800bb00 <USBD_CDC_ReceivePacket+0x68>)
 800bad0:	7819      	ldrb	r1, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f001 ff85 	bl	800d9ec <USBD_LL_PrepareReceive>
 800bae2:	e008      	b.n	800baf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <USBD_CDC_ReceivePacket+0x68>)
 800bae6:	7819      	ldrb	r1, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800baee:	2340      	movs	r3, #64	@ 0x40
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 ff7b 	bl	800d9ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20000094 	.word	0x20000094

0800bb04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e01f      	b.n	800bb5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	79fa      	ldrb	r2, [r7, #7]
 800bb4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 fdf5 	bl	800d740 <USBD_LL_Init>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e025      	b.n	800bbc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	@ 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	f107 020e 	add.w	r2, r7, #14
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 fdfd 	bl	800d7d8 <USBD_LL_Start>
 800bbde:	4603      	mov	r3, r0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	78fa      	ldrb	r2, [r7, #3]
 800bc22:	4611      	mov	r1, r2
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	4611      	mov	r1, r2
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f001 f90c 	bl	800ce9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bc90:	461a      	mov	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d01a      	beq.n	800bcdc <USBD_LL_SetupStage+0x72>
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d822      	bhi.n	800bcf0 <USBD_LL_SetupStage+0x86>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <USBD_LL_SetupStage+0x4a>
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d00a      	beq.n	800bcc8 <USBD_LL_SetupStage+0x5e>
 800bcb2:	e01d      	b.n	800bcf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fb63 	bl	800c388 <USBD_StdDevReq>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc6:	e020      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fbcb 	bl	800c46c <USBD_StdItfReq>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcda:	e016      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc2d 	bl	800c544 <USBD_StdEPReq>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
      break;
 800bcee:	e00c      	b.n	800bd0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bcf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 fdca 	bl	800d898 <USBD_LL_StallEP>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
      break;
 800bd08:	bf00      	nop
  }

  return ret;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d16e      	bne.n	800be0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bd32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	f040 8098 	bne.w	800be70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	689a      	ldr	r2, [r3, #8]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d913      	bls.n	800bd74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	689a      	ldr	r2, [r3, #8]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	1ad2      	subs	r2, r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	68da      	ldr	r2, [r3, #12]
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	4293      	cmp	r3, r2
 800bd64:	bf28      	it	cs
 800bd66:	4613      	movcs	r3, r2
 800bd68:	461a      	mov	r2, r3
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f001 f994 	bl	800d09a <USBD_CtlContinueRx>
 800bd72:	e07d      	b.n	800be70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd7a:	f003 031f 	and.w	r3, r3, #31
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d014      	beq.n	800bdac <USBD_LL_DataOutStage+0x98>
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d81d      	bhi.n	800bdc2 <USBD_LL_DataOutStage+0xae>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <USBD_LL_DataOutStage+0x7c>
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d003      	beq.n	800bd96 <USBD_LL_DataOutStage+0x82>
 800bd8e:	e018      	b.n	800bdc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	75bb      	strb	r3, [r7, #22]
            break;
 800bd94:	e018      	b.n	800bdc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fa64 	bl	800c26e <USBD_CoreFindIF>
 800bda6:	4603      	mov	r3, r0
 800bda8:	75bb      	strb	r3, [r7, #22]
            break;
 800bdaa:	e00d      	b.n	800bdc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fa66 	bl	800c288 <USBD_CoreFindEP>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	75bb      	strb	r3, [r7, #22]
            break;
 800bdc0:	e002      	b.n	800bdc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75bb      	strb	r3, [r7, #22]
            break;
 800bdc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bdc8:	7dbb      	ldrb	r3, [r7, #22]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d119      	bne.n	800be02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d113      	bne.n	800be02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bdda:	7dba      	ldrb	r2, [r7, #22]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	32ae      	adds	r2, #174	@ 0xae
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00b      	beq.n	800be02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bdea:	7dba      	ldrb	r2, [r7, #22]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bdf2:	7dba      	ldrb	r2, [r7, #22]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	32ae      	adds	r2, #174	@ 0xae
 800bdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f001 f95a 	bl	800d0bc <USBD_CtlSendStatus>
 800be08:	e032      	b.n	800be70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be0a:	7afb      	ldrb	r3, [r7, #11]
 800be0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be10:	b2db      	uxtb	r3, r3
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 fa37 	bl	800c288 <USBD_CoreFindEP>
 800be1a:	4603      	mov	r3, r0
 800be1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be1e:	7dbb      	ldrb	r3, [r7, #22]
 800be20:	2bff      	cmp	r3, #255	@ 0xff
 800be22:	d025      	beq.n	800be70 <USBD_LL_DataOutStage+0x15c>
 800be24:	7dbb      	ldrb	r3, [r7, #22]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d122      	bne.n	800be70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b03      	cmp	r3, #3
 800be34:	d117      	bne.n	800be66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be36:	7dba      	ldrb	r2, [r7, #22]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	32ae      	adds	r2, #174	@ 0xae
 800be3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00f      	beq.n	800be66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800be46:	7dba      	ldrb	r2, [r7, #22]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be4e:	7dba      	ldrb	r2, [r7, #22]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	32ae      	adds	r2, #174	@ 0xae
 800be54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	7afa      	ldrb	r2, [r7, #11]
 800be5c:	4611      	mov	r1, r2
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	4798      	blx	r3
 800be62:	4603      	mov	r3, r0
 800be64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
 800be6e:	e000      	b.n	800be72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3718      	adds	r7, #24
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b086      	sub	sp, #24
 800be7e:	af00      	add	r7, sp, #0
 800be80:	60f8      	str	r0, [r7, #12]
 800be82:	460b      	mov	r3, r1
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d16f      	bne.n	800bf6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3314      	adds	r3, #20
 800be92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d15a      	bne.n	800bf54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d914      	bls.n	800bed4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	1ad2      	subs	r2, r2, r3
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	461a      	mov	r2, r3
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f001 f8bc 	bl	800d03e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bec6:	2300      	movs	r3, #0
 800bec8:	2200      	movs	r2, #0
 800beca:	2100      	movs	r1, #0
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f001 fd8d 	bl	800d9ec <USBD_LL_PrepareReceive>
 800bed2:	e03f      	b.n	800bf54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d11c      	bne.n	800bf1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bee8:	429a      	cmp	r2, r3
 800beea:	d316      	bcc.n	800bf1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d20f      	bcs.n	800bf1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800befa:	2200      	movs	r2, #0
 800befc:	2100      	movs	r1, #0
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f001 f89d 	bl	800d03e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2100      	movs	r1, #0
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f001 fd6a 	bl	800d9ec <USBD_LL_PrepareReceive>
 800bf18:	e01c      	b.n	800bf54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d10f      	bne.n	800bf46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d009      	beq.n	800bf46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf46:	2180      	movs	r1, #128	@ 0x80
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f001 fca5 	bl	800d898 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f001 f8c7 	bl	800d0e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d03a      	beq.n	800bfd4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fe42 	bl	800bbe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bf6c:	e032      	b.n	800bfd4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	4619      	mov	r1, r3
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 f985 	bl	800c288 <USBD_CoreFindEP>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	2bff      	cmp	r3, #255	@ 0xff
 800bf86:	d025      	beq.n	800bfd4 <USBD_LL_DataInStage+0x15a>
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d122      	bne.n	800bfd4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d11c      	bne.n	800bfd4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bf9a:	7dfa      	ldrb	r2, [r7, #23]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	32ae      	adds	r2, #174	@ 0xae
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d014      	beq.n	800bfd4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bfaa:	7dfa      	ldrb	r2, [r7, #23]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bfb2:	7dfa      	ldrb	r2, [r7, #23]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	32ae      	adds	r2, #174	@ 0xae
 800bfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	7afa      	ldrb	r2, [r7, #11]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	4798      	blx	r3
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bfca:	7dbb      	ldrb	r3, [r7, #22]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bfd0:	7dbb      	ldrb	r3, [r7, #22]
 800bfd2:	e000      	b.n	800bfd6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c016:	2b00      	cmp	r3, #0
 800c018:	d014      	beq.n	800c044 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6852      	ldr	r2, [r2, #4]
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	4611      	mov	r1, r2
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c044:	2340      	movs	r3, #64	@ 0x40
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 fbdf 	bl	800d80e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2240      	movs	r2, #64	@ 0x40
 800c05c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c060:	2340      	movs	r3, #64	@ 0x40
 800c062:	2200      	movs	r2, #0
 800c064:	2180      	movs	r1, #128	@ 0x80
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 fbd1 	bl	800d80e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2240      	movs	r2, #64	@ 0x40
 800c076:	621a      	str	r2, [r3, #32]

  return ret;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c082:	b480      	push	{r7}
 800c084:	b083      	sub	sp, #12
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	460b      	mov	r3, r1
 800c08c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d006      	beq.n	800c0c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2204      	movs	r2, #4
 800c0c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d106      	bne.n	800c0fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d110      	bne.n	800c140 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00b      	beq.n	800c140 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c12e:	69db      	ldr	r3, [r3, #28]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	460b      	mov	r3, r1
 800c154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	32ae      	adds	r2, #174	@ 0xae
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	e01c      	b.n	800c1a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b03      	cmp	r3, #3
 800c176:	d115      	bne.n	800c1a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	@ 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	6a1b      	ldr	r3, [r3, #32]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00b      	beq.n	800c1a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	32ae      	adds	r2, #174	@ 0xae
 800c196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	78fa      	ldrb	r2, [r7, #3]
 800c19e:	4611      	mov	r1, r2
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	32ae      	adds	r2, #174	@ 0xae
 800c1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e01c      	b.n	800c20a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d115      	bne.n	800c208 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	32ae      	adds	r2, #174	@ 0xae
 800c1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	32ae      	adds	r2, #174	@ 0xae
 800c1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	4611      	mov	r1, r2
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00e      	beq.n	800c264 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6852      	ldr	r2, [r2, #4]
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	4611      	mov	r1, r2
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	4798      	blx	r3
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c260:	2303      	movs	r3, #3
 800c262:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c27a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c294:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b086      	sub	sp, #24
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	885b      	ldrh	r3, [r3, #2]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	7812      	ldrb	r2, [r2, #0]
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d91f      	bls.n	800c308 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c2ce:	e013      	b.n	800c2f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c2d0:	f107 030a 	add.w	r3, r7, #10
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6978      	ldr	r0, [r7, #20]
 800c2d8:	f000 f81b 	bl	800c312 <USBD_GetNextDesc>
 800c2dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	785b      	ldrb	r3, [r3, #1]
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d108      	bne.n	800c2f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	789b      	ldrb	r3, [r3, #2]
 800c2ee:	78fa      	ldrb	r2, [r7, #3]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d008      	beq.n	800c306 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	885b      	ldrh	r3, [r3, #2]
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	897b      	ldrh	r3, [r7, #10]
 800c300:	429a      	cmp	r2, r3
 800c302:	d8e5      	bhi.n	800c2d0 <USBD_GetEpDesc+0x2e>
 800c304:	e000      	b.n	800c308 <USBD_GetEpDesc+0x66>
          break;
 800c306:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c308:	693b      	ldr	r3, [r7, #16]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	7812      	ldrb	r2, [r2, #0]
 800c328:	4413      	add	r3, r2
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4413      	add	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c33c:	68fb      	ldr	r3, [r7, #12]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b087      	sub	sp, #28
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	3301      	adds	r3, #1
 800c360:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c368:	8a3b      	ldrh	r3, [r7, #16]
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	b21a      	sxth	r2, r3
 800c36e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c372:	4313      	orrs	r3, r2
 800c374:	b21b      	sxth	r3, r3
 800c376:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c378:	89fb      	ldrh	r3, [r7, #14]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c39e:	2b40      	cmp	r3, #64	@ 0x40
 800c3a0:	d005      	beq.n	800c3ae <USBD_StdDevReq+0x26>
 800c3a2:	2b40      	cmp	r3, #64	@ 0x40
 800c3a4:	d857      	bhi.n	800c456 <USBD_StdDevReq+0xce>
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00f      	beq.n	800c3ca <USBD_StdDevReq+0x42>
 800c3aa:	2b20      	cmp	r3, #32
 800c3ac:	d153      	bne.n	800c456 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	32ae      	adds	r2, #174	@ 0xae
 800c3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	4798      	blx	r3
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c8:	e04a      	b.n	800c460 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d83b      	bhi.n	800c44a <USBD_StdDevReq+0xc2>
 800c3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d8 <USBD_StdDevReq+0x50>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c42d 	.word	0x0800c42d
 800c3dc:	0800c441 	.word	0x0800c441
 800c3e0:	0800c44b 	.word	0x0800c44b
 800c3e4:	0800c437 	.word	0x0800c437
 800c3e8:	0800c44b 	.word	0x0800c44b
 800c3ec:	0800c40b 	.word	0x0800c40b
 800c3f0:	0800c401 	.word	0x0800c401
 800c3f4:	0800c44b 	.word	0x0800c44b
 800c3f8:	0800c423 	.word	0x0800c423
 800c3fc:	0800c415 	.word	0x0800c415
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa3c 	bl	800c880 <USBD_GetDescriptor>
          break;
 800c408:	e024      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fba1 	bl	800cb54 <USBD_SetAddress>
          break;
 800c412:	e01f      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fbe0 	bl	800cbdc <USBD_SetConfig>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
          break;
 800c420:	e018      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fc83 	bl	800cd30 <USBD_GetConfig>
          break;
 800c42a:	e013      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c42c:	6839      	ldr	r1, [r7, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fcb4 	bl	800cd9c <USBD_GetStatus>
          break;
 800c434:	e00e      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fce3 	bl	800ce04 <USBD_SetFeature>
          break;
 800c43e:	e009      	b.n	800c454 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fd07 	bl	800ce56 <USBD_ClrFeature>
          break;
 800c448:	e004      	b.n	800c454 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fd5e 	bl	800cf0e <USBD_CtlError>
          break;
 800c452:	bf00      	nop
      }
      break;
 800c454:	e004      	b.n	800c460 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fd58 	bl	800cf0e <USBD_CtlError>
      break;
 800c45e:	bf00      	nop
  }

  return ret;
 800c460:	7bfb      	ldrb	r3, [r7, #15]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop

0800c46c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c482:	2b40      	cmp	r3, #64	@ 0x40
 800c484:	d005      	beq.n	800c492 <USBD_StdItfReq+0x26>
 800c486:	2b40      	cmp	r3, #64	@ 0x40
 800c488:	d852      	bhi.n	800c530 <USBD_StdItfReq+0xc4>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <USBD_StdItfReq+0x26>
 800c48e:	2b20      	cmp	r3, #32
 800c490:	d14e      	bne.n	800c530 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d840      	bhi.n	800c522 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	889b      	ldrh	r3, [r3, #4]
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d836      	bhi.n	800c518 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	889b      	ldrh	r3, [r3, #4]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fedb 	bl	800c26e <USBD_CoreFindIF>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2bff      	cmp	r3, #255	@ 0xff
 800c4c0:	d01d      	beq.n	800c4fe <USBD_StdItfReq+0x92>
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d11a      	bne.n	800c4fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c4c8:	7bba      	ldrb	r2, [r7, #14]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	32ae      	adds	r2, #174	@ 0xae
 800c4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00f      	beq.n	800c4f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c4d8:	7bba      	ldrb	r2, [r7, #14]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4e0:	7bba      	ldrb	r2, [r7, #14]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	32ae      	adds	r2, #174	@ 0xae
 800c4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	4798      	blx	r3
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c4f6:	e004      	b.n	800c502 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c4fc:	e001      	b.n	800c502 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c4fe:	2303      	movs	r3, #3
 800c500:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	88db      	ldrh	r3, [r3, #6]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d110      	bne.n	800c52c <USBD_StdItfReq+0xc0>
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10d      	bne.n	800c52c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fdd3 	bl	800d0bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c516:	e009      	b.n	800c52c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fcf7 	bl	800cf0e <USBD_CtlError>
          break;
 800c520:	e004      	b.n	800c52c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fcf2 	bl	800cf0e <USBD_CtlError>
          break;
 800c52a:	e000      	b.n	800c52e <USBD_StdItfReq+0xc2>
          break;
 800c52c:	bf00      	nop
      }
      break;
 800c52e:	e004      	b.n	800c53a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fceb 	bl	800cf0e <USBD_CtlError>
      break;
 800c538:	bf00      	nop
  }

  return ret;
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	889b      	ldrh	r3, [r3, #4]
 800c556:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c560:	2b40      	cmp	r3, #64	@ 0x40
 800c562:	d007      	beq.n	800c574 <USBD_StdEPReq+0x30>
 800c564:	2b40      	cmp	r3, #64	@ 0x40
 800c566:	f200 817f 	bhi.w	800c868 <USBD_StdEPReq+0x324>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d02a      	beq.n	800c5c4 <USBD_StdEPReq+0x80>
 800c56e:	2b20      	cmp	r3, #32
 800c570:	f040 817a 	bne.w	800c868 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff fe85 	bl	800c288 <USBD_CoreFindEP>
 800c57e:	4603      	mov	r3, r0
 800c580:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c582:	7b7b      	ldrb	r3, [r7, #13]
 800c584:	2bff      	cmp	r3, #255	@ 0xff
 800c586:	f000 8174 	beq.w	800c872 <USBD_StdEPReq+0x32e>
 800c58a:	7b7b      	ldrb	r3, [r7, #13]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8170 	bne.w	800c872 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c592:	7b7a      	ldrb	r2, [r7, #13]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c59a:	7b7a      	ldrb	r2, [r7, #13]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	32ae      	adds	r2, #174	@ 0xae
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f000 8163 	beq.w	800c872 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c5ac:	7b7a      	ldrb	r2, [r7, #13]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	32ae      	adds	r2, #174	@ 0xae
 800c5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	4798      	blx	r3
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c5c2:	e156      	b.n	800c872 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b03      	cmp	r3, #3
 800c5ca:	d008      	beq.n	800c5de <USBD_StdEPReq+0x9a>
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	f300 8145 	bgt.w	800c85c <USBD_StdEPReq+0x318>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 809b 	beq.w	800c70e <USBD_StdEPReq+0x1ca>
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d03c      	beq.n	800c656 <USBD_StdEPReq+0x112>
 800c5dc:	e13e      	b.n	800c85c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d002      	beq.n	800c5f0 <USBD_StdEPReq+0xac>
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d016      	beq.n	800c61c <USBD_StdEPReq+0xd8>
 800c5ee:	e02c      	b.n	800c64a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00d      	beq.n	800c612 <USBD_StdEPReq+0xce>
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	2b80      	cmp	r3, #128	@ 0x80
 800c5fa:	d00a      	beq.n	800c612 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f001 f949 	bl	800d898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c606:	2180      	movs	r1, #128	@ 0x80
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f001 f945 	bl	800d898 <USBD_LL_StallEP>
 800c60e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c610:	e020      	b.n	800c654 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fc7a 	bl	800cf0e <USBD_CtlError>
              break;
 800c61a:	e01b      	b.n	800c654 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	885b      	ldrh	r3, [r3, #2]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10e      	bne.n	800c642 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c624:	7bbb      	ldrb	r3, [r7, #14]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00b      	beq.n	800c642 <USBD_StdEPReq+0xfe>
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
 800c62c:	2b80      	cmp	r3, #128	@ 0x80
 800c62e:	d008      	beq.n	800c642 <USBD_StdEPReq+0xfe>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	88db      	ldrh	r3, [r3, #6]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d104      	bne.n	800c642 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c638:	7bbb      	ldrb	r3, [r7, #14]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f001 f92b 	bl	800d898 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fd3a 	bl	800d0bc <USBD_CtlSendStatus>

              break;
 800c648:	e004      	b.n	800c654 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fc5e 	bl	800cf0e <USBD_CtlError>
              break;
 800c652:	bf00      	nop
          }
          break;
 800c654:	e107      	b.n	800c866 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d002      	beq.n	800c668 <USBD_StdEPReq+0x124>
 800c662:	2b03      	cmp	r3, #3
 800c664:	d016      	beq.n	800c694 <USBD_StdEPReq+0x150>
 800c666:	e04b      	b.n	800c700 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00d      	beq.n	800c68a <USBD_StdEPReq+0x146>
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
 800c670:	2b80      	cmp	r3, #128	@ 0x80
 800c672:	d00a      	beq.n	800c68a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 f90d 	bl	800d898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c67e:	2180      	movs	r1, #128	@ 0x80
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f001 f909 	bl	800d898 <USBD_LL_StallEP>
 800c686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c688:	e040      	b.n	800c70c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fc3e 	bl	800cf0e <USBD_CtlError>
              break;
 800c692:	e03b      	b.n	800c70c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	885b      	ldrh	r3, [r3, #2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d136      	bne.n	800c70a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d004      	beq.n	800c6b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f001 f913 	bl	800d8d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fd03 	bl	800d0bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff fde4 	bl	800c288 <USBD_CoreFindEP>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6c4:	7b7b      	ldrb	r3, [r7, #13]
 800c6c6:	2bff      	cmp	r3, #255	@ 0xff
 800c6c8:	d01f      	beq.n	800c70a <USBD_StdEPReq+0x1c6>
 800c6ca:	7b7b      	ldrb	r3, [r7, #13]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d11c      	bne.n	800c70a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c6d0:	7b7a      	ldrb	r2, [r7, #13]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c6d8:	7b7a      	ldrb	r2, [r7, #13]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	32ae      	adds	r2, #174	@ 0xae
 800c6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d010      	beq.n	800c70a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6e8:	7b7a      	ldrb	r2, [r7, #13]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	32ae      	adds	r2, #174	@ 0xae
 800c6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c6fe:	e004      	b.n	800c70a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fc03 	bl	800cf0e <USBD_CtlError>
              break;
 800c708:	e000      	b.n	800c70c <USBD_StdEPReq+0x1c8>
              break;
 800c70a:	bf00      	nop
          }
          break;
 800c70c:	e0ab      	b.n	800c866 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b02      	cmp	r3, #2
 800c718:	d002      	beq.n	800c720 <USBD_StdEPReq+0x1dc>
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	d032      	beq.n	800c784 <USBD_StdEPReq+0x240>
 800c71e:	e097      	b.n	800c850 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d007      	beq.n	800c736 <USBD_StdEPReq+0x1f2>
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	2b80      	cmp	r3, #128	@ 0x80
 800c72a:	d004      	beq.n	800c736 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fbed 	bl	800cf0e <USBD_CtlError>
                break;
 800c734:	e091      	b.n	800c85a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	da0b      	bge.n	800c756 <USBD_StdEPReq+0x212>
 800c73e:	7bbb      	ldrb	r3, [r7, #14]
 800c740:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	3310      	adds	r3, #16
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4413      	add	r3, r2
 800c752:	3304      	adds	r3, #4
 800c754:	e00b      	b.n	800c76e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c756:	7bbb      	ldrb	r3, [r7, #14]
 800c758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	4413      	add	r3, r2
 800c76c:	3304      	adds	r3, #4
 800c76e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2202      	movs	r2, #2
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fc43 	bl	800d008 <USBD_CtlSendData>
              break;
 800c782:	e06a      	b.n	800c85a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	da11      	bge.n	800c7b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c78c:	7bbb      	ldrb	r3, [r7, #14]
 800c78e:	f003 020f 	and.w	r2, r3, #15
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	440b      	add	r3, r1
 800c79e:	3324      	adds	r3, #36	@ 0x24
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d117      	bne.n	800c7d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fbb0 	bl	800cf0e <USBD_CtlError>
                  break;
 800c7ae:	e054      	b.n	800c85a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	f003 020f 	and.w	r2, r3, #15
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d104      	bne.n	800c7d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fb9d 	bl	800cf0e <USBD_CtlError>
                  break;
 800c7d4:	e041      	b.n	800c85a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	da0b      	bge.n	800c7f6 <USBD_StdEPReq+0x2b2>
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	3310      	adds	r3, #16
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	e00b      	b.n	800c80e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7f6:	7bbb      	ldrb	r3, [r7, #14]
 800c7f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	4413      	add	r3, r2
 800c80c:	3304      	adds	r3, #4
 800c80e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <USBD_StdEPReq+0x2d8>
 800c816:	7bbb      	ldrb	r3, [r7, #14]
 800c818:	2b80      	cmp	r3, #128	@ 0x80
 800c81a:	d103      	bne.n	800c824 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	e00e      	b.n	800c842 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f001 f873 	bl	800d914 <USBD_LL_IsStallEP>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2201      	movs	r2, #1
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	e002      	b.n	800c842 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2202      	movs	r2, #2
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fbdd 	bl	800d008 <USBD_CtlSendData>
              break;
 800c84e:	e004      	b.n	800c85a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fb5b 	bl	800cf0e <USBD_CtlError>
              break;
 800c858:	bf00      	nop
          }
          break;
 800c85a:	e004      	b.n	800c866 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fb55 	bl	800cf0e <USBD_CtlError>
          break;
 800c864:	bf00      	nop
      }
      break;
 800c866:	e005      	b.n	800c874 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fb4f 	bl	800cf0e <USBD_CtlError>
      break;
 800c870:	e000      	b.n	800c874 <USBD_StdEPReq+0x330>
      break;
 800c872:	bf00      	nop
  }

  return ret;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	885b      	ldrh	r3, [r3, #2]
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	2b06      	cmp	r3, #6
 800c8a2:	f200 8128 	bhi.w	800caf6 <USBD_GetDescriptor+0x276>
 800c8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8ac <USBD_GetDescriptor+0x2c>)
 800c8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ac:	0800c8c9 	.word	0x0800c8c9
 800c8b0:	0800c8e1 	.word	0x0800c8e1
 800c8b4:	0800c921 	.word	0x0800c921
 800c8b8:	0800caf7 	.word	0x0800caf7
 800c8bc:	0800caf7 	.word	0x0800caf7
 800c8c0:	0800ca97 	.word	0x0800ca97
 800c8c4:	0800cac3 	.word	0x0800cac3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7c12      	ldrb	r2, [r2, #16]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	60f8      	str	r0, [r7, #12]
      break;
 800c8de:	e112      	b.n	800cb06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7c1b      	ldrb	r3, [r3, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10d      	bne.n	800c904 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f0:	f107 0208 	add.w	r2, r7, #8
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	4798      	blx	r3
 800c8f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	2202      	movs	r2, #2
 800c900:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c902:	e100      	b.n	800cb06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	f107 0208 	add.w	r2, r7, #8
 800c910:	4610      	mov	r0, r2
 800c912:	4798      	blx	r3
 800c914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	2202      	movs	r2, #2
 800c91c:	701a      	strb	r2, [r3, #0]
      break;
 800c91e:	e0f2      	b.n	800cb06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	885b      	ldrh	r3, [r3, #2]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	2b05      	cmp	r3, #5
 800c928:	f200 80ac 	bhi.w	800ca84 <USBD_GetDescriptor+0x204>
 800c92c:	a201      	add	r2, pc, #4	@ (adr r2, 800c934 <USBD_GetDescriptor+0xb4>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800c94d 	.word	0x0800c94d
 800c938:	0800c981 	.word	0x0800c981
 800c93c:	0800c9b5 	.word	0x0800c9b5
 800c940:	0800c9e9 	.word	0x0800c9e9
 800c944:	0800ca1d 	.word	0x0800ca1d
 800c948:	0800ca51 	.word	0x0800ca51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00b      	beq.n	800c970 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	7c12      	ldrb	r2, [r2, #16]
 800c964:	f107 0108 	add.w	r1, r7, #8
 800c968:	4610      	mov	r0, r2
 800c96a:	4798      	blx	r3
 800c96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c96e:	e091      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 facb 	bl	800cf0e <USBD_CtlError>
            err++;
 800c978:	7afb      	ldrb	r3, [r7, #11]
 800c97a:	3301      	adds	r3, #1
 800c97c:	72fb      	strb	r3, [r7, #11]
          break;
 800c97e:	e089      	b.n	800ca94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00b      	beq.n	800c9a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	7c12      	ldrb	r2, [r2, #16]
 800c998:	f107 0108 	add.w	r1, r7, #8
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
 800c9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9a2:	e077      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fab1 	bl	800cf0e <USBD_CtlError>
            err++;
 800c9ac:	7afb      	ldrb	r3, [r7, #11]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c9b2:	e06f      	b.n	800ca94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00b      	beq.n	800c9d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	7c12      	ldrb	r2, [r2, #16]
 800c9cc:	f107 0108 	add.w	r1, r7, #8
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	4798      	blx	r3
 800c9d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9d6:	e05d      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fa97 	bl	800cf0e <USBD_CtlError>
            err++;
 800c9e0:	7afb      	ldrb	r3, [r7, #11]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9e6:	e055      	b.n	800ca94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00b      	beq.n	800ca0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	7c12      	ldrb	r2, [r2, #16]
 800ca00:	f107 0108 	add.w	r1, r7, #8
 800ca04:	4610      	mov	r0, r2
 800ca06:	4798      	blx	r3
 800ca08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca0a:	e043      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fa7d 	bl	800cf0e <USBD_CtlError>
            err++;
 800ca14:	7afb      	ldrb	r3, [r7, #11]
 800ca16:	3301      	adds	r3, #1
 800ca18:	72fb      	strb	r3, [r7, #11]
          break;
 800ca1a:	e03b      	b.n	800ca94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca22:	695b      	ldr	r3, [r3, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00b      	beq.n	800ca40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	7c12      	ldrb	r2, [r2, #16]
 800ca34:	f107 0108 	add.w	r1, r7, #8
 800ca38:	4610      	mov	r0, r2
 800ca3a:	4798      	blx	r3
 800ca3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca3e:	e029      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fa63 	bl	800cf0e <USBD_CtlError>
            err++;
 800ca48:	7afb      	ldrb	r3, [r7, #11]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca4e:	e021      	b.n	800ca94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00b      	beq.n	800ca74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	7c12      	ldrb	r2, [r2, #16]
 800ca68:	f107 0108 	add.w	r1, r7, #8
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	4798      	blx	r3
 800ca70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca72:	e00f      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fa49 	bl	800cf0e <USBD_CtlError>
            err++;
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	72fb      	strb	r3, [r7, #11]
          break;
 800ca82:	e007      	b.n	800ca94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa41 	bl	800cf0e <USBD_CtlError>
          err++;
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca92:	bf00      	nop
      }
      break;
 800ca94:	e037      	b.n	800cb06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	7c1b      	ldrb	r3, [r3, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d109      	bne.n	800cab2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caa6:	f107 0208 	add.w	r2, r7, #8
 800caaa:	4610      	mov	r0, r2
 800caac:	4798      	blx	r3
 800caae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cab0:	e029      	b.n	800cb06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa2a 	bl	800cf0e <USBD_CtlError>
        err++;
 800caba:	7afb      	ldrb	r3, [r7, #11]
 800cabc:	3301      	adds	r3, #1
 800cabe:	72fb      	strb	r3, [r7, #11]
      break;
 800cac0:	e021      	b.n	800cb06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7c1b      	ldrb	r3, [r3, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10d      	bne.n	800cae6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	f107 0208 	add.w	r2, r7, #8
 800cad6:	4610      	mov	r0, r2
 800cad8:	4798      	blx	r3
 800cada:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3301      	adds	r3, #1
 800cae0:	2207      	movs	r2, #7
 800cae2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cae4:	e00f      	b.n	800cb06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fa10 	bl	800cf0e <USBD_CtlError>
        err++;
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	3301      	adds	r3, #1
 800caf2:	72fb      	strb	r3, [r7, #11]
      break;
 800caf4:	e007      	b.n	800cb06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fa08 	bl	800cf0e <USBD_CtlError>
      err++;
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	3301      	adds	r3, #1
 800cb02:	72fb      	strb	r3, [r7, #11]
      break;
 800cb04:	bf00      	nop
  }

  if (err != 0U)
 800cb06:	7afb      	ldrb	r3, [r7, #11]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d11e      	bne.n	800cb4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	88db      	ldrh	r3, [r3, #6]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d016      	beq.n	800cb42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cb14:	893b      	ldrh	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00e      	beq.n	800cb38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	88da      	ldrh	r2, [r3, #6]
 800cb1e:	893b      	ldrh	r3, [r7, #8]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	bf28      	it	cs
 800cb24:	4613      	movcs	r3, r2
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb2a:	893b      	ldrh	r3, [r7, #8]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	68f9      	ldr	r1, [r7, #12]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fa69 	bl	800d008 <USBD_CtlSendData>
 800cb36:	e009      	b.n	800cb4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f9e7 	bl	800cf0e <USBD_CtlError>
 800cb40:	e004      	b.n	800cb4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 faba 	bl	800d0bc <USBD_CtlSendStatus>
 800cb48:	e000      	b.n	800cb4c <USBD_GetDescriptor+0x2cc>
    return;
 800cb4a:	bf00      	nop
  }
}
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop

0800cb54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	889b      	ldrh	r3, [r3, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d131      	bne.n	800cbca <USBD_SetAddress+0x76>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	88db      	ldrh	r3, [r3, #6]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d12d      	bne.n	800cbca <USBD_SetAddress+0x76>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	885b      	ldrh	r3, [r3, #2]
 800cb72:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb74:	d829      	bhi.n	800cbca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	885b      	ldrh	r3, [r3, #2]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	d104      	bne.n	800cb98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f9bc 	bl	800cf0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb96:	e01d      	b.n	800cbd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7bfa      	ldrb	r2, [r7, #15]
 800cb9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fee1 	bl	800d96c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fa86 	bl	800d0bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d004      	beq.n	800cbc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2202      	movs	r2, #2
 800cbba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbbe:	e009      	b.n	800cbd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbc8:	e004      	b.n	800cbd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f99e 	bl	800cf0e <USBD_CtlError>
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	885b      	ldrh	r3, [r3, #2]
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	4b4e      	ldr	r3, [pc, #312]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cbf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cbf4:	4b4d      	ldr	r3, [pc, #308]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d905      	bls.n	800cc08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f985 	bl	800cf0e <USBD_CtlError>
    return USBD_FAIL;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e08c      	b.n	800cd22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d002      	beq.n	800cc1a <USBD_SetConfig+0x3e>
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d029      	beq.n	800cc6c <USBD_SetConfig+0x90>
 800cc18:	e075      	b.n	800cd06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc1a:	4b44      	ldr	r3, [pc, #272]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d020      	beq.n	800cc64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cc22:	4b42      	ldr	r3, [pc, #264]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7fe ffe3 	bl	800bbfe <USBD_SetClassConfig>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d008      	beq.n	800cc54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f962 	bl	800cf0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc52:	e065      	b.n	800cd20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fa31 	bl	800d0bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2203      	movs	r2, #3
 800cc5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc62:	e05d      	b.n	800cd20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fa29 	bl	800d0bc <USBD_CtlSendStatus>
      break;
 800cc6a:	e059      	b.n	800cd20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc6c:	4b2f      	ldr	r3, [pc, #188]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d112      	bne.n	800cc9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cc7c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	461a      	mov	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc86:	4b29      	ldr	r3, [pc, #164]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7fe ffd2 	bl	800bc36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fa12 	bl	800d0bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc98:	e042      	b.n	800cd20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc9a:	4b24      	ldr	r3, [pc, #144]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d02a      	beq.n	800ccfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7fe ffc0 	bl	800bc36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ccb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd2c <USBD_SetConfig+0x150>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <USBD_SetConfig+0x150>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7fe ff99 	bl	800bbfe <USBD_SetClassConfig>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00f      	beq.n	800ccf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f918 	bl	800cf0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7fe ffa5 	bl	800bc36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ccf4:	e014      	b.n	800cd20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f9e0 	bl	800d0bc <USBD_CtlSendStatus>
      break;
 800ccfc:	e010      	b.n	800cd20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f9dc 	bl	800d0bc <USBD_CtlSendStatus>
      break;
 800cd04:	e00c      	b.n	800cd20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f900 	bl	800cf0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd0e:	4b07      	ldr	r3, [pc, #28]	@ (800cd2c <USBD_SetConfig+0x150>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fe ff8e 	bl	800bc36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	73fb      	strb	r3, [r7, #15]
      break;
 800cd1e:	bf00      	nop
  }

  return ret;
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	200004e8 	.word	0x200004e8

0800cd30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	88db      	ldrh	r3, [r3, #6]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d004      	beq.n	800cd4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f8e2 	bl	800cf0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd4a:	e023      	b.n	800cd94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b02      	cmp	r3, #2
 800cd56:	dc02      	bgt.n	800cd5e <USBD_GetConfig+0x2e>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dc03      	bgt.n	800cd64 <USBD_GetConfig+0x34>
 800cd5c:	e015      	b.n	800cd8a <USBD_GetConfig+0x5a>
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d00b      	beq.n	800cd7a <USBD_GetConfig+0x4a>
 800cd62:	e012      	b.n	800cd8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f948 	bl	800d008 <USBD_CtlSendData>
        break;
 800cd78:	e00c      	b.n	800cd94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	2201      	movs	r2, #1
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f940 	bl	800d008 <USBD_CtlSendData>
        break;
 800cd88:	e004      	b.n	800cd94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f8be 	bl	800cf0e <USBD_CtlError>
        break;
 800cd92:	bf00      	nop
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d81e      	bhi.n	800cdf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	88db      	ldrh	r3, [r3, #6]
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d004      	beq.n	800cdc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f8a5 	bl	800cf0e <USBD_CtlError>
        break;
 800cdc4:	e01a      	b.n	800cdfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d005      	beq.n	800cde2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f043 0202 	orr.w	r2, r3, #2
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	330c      	adds	r3, #12
 800cde6:	2202      	movs	r2, #2
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f90c 	bl	800d008 <USBD_CtlSendData>
      break;
 800cdf0:	e004      	b.n	800cdfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 f88a 	bl	800cf0e <USBD_CtlError>
      break;
 800cdfa:	bf00      	nop
  }
}
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	885b      	ldrh	r3, [r3, #2]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d107      	bne.n	800ce26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f94c 	bl	800d0bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ce24:	e013      	b.n	800ce4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d10b      	bne.n	800ce46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	889b      	ldrh	r3, [r3, #4]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f93c 	bl	800d0bc <USBD_CtlSendStatus>
}
 800ce44:	e003      	b.n	800ce4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f860 	bl	800cf0e <USBD_CtlError>
}
 800ce4e:	bf00      	nop
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d80b      	bhi.n	800ce86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	885b      	ldrh	r3, [r3, #2]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d10c      	bne.n	800ce90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f91c 	bl	800d0bc <USBD_CtlSendStatus>
      }
      break;
 800ce84:	e004      	b.n	800ce90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f840 	bl	800cf0e <USBD_CtlError>
      break;
 800ce8e:	e000      	b.n	800ce92 <USBD_ClrFeature+0x3c>
      break;
 800ce90:	bf00      	nop
  }
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	781a      	ldrb	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3301      	adds	r3, #1
 800cec2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f7ff fa40 	bl	800c34a <SWAPBYTE>
 800ceca:	4603      	mov	r3, r0
 800cecc:	461a      	mov	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3301      	adds	r3, #1
 800cedc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7ff fa33 	bl	800c34a <SWAPBYTE>
 800cee4:	4603      	mov	r3, r0
 800cee6:	461a      	mov	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3301      	adds	r3, #1
 800cef0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3301      	adds	r3, #1
 800cef6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff fa26 	bl	800c34a <SWAPBYTE>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	80da      	strh	r2, [r3, #6]
}
 800cf06:	bf00      	nop
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf18:	2180      	movs	r1, #128	@ 0x80
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fcbc 	bl	800d898 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf20:	2100      	movs	r1, #0
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fcb8 	bl	800d898 <USBD_LL_StallEP>
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d042      	beq.n	800cfcc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cf4a:	6938      	ldr	r0, [r7, #16]
 800cf4c:	f000 f842 	bl	800cfd4 <USBD_GetLen>
 800cf50:	4603      	mov	r3, r0
 800cf52:	3301      	adds	r3, #1
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf5a:	d808      	bhi.n	800cf6e <USBD_GetString+0x3e>
 800cf5c:	6938      	ldr	r0, [r7, #16]
 800cf5e:	f000 f839 	bl	800cfd4 <USBD_GetLen>
 800cf62:	4603      	mov	r3, r0
 800cf64:	3301      	adds	r3, #1
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	e001      	b.n	800cf72 <USBD_GetString+0x42>
 800cf6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	7812      	ldrb	r2, [r2, #0]
 800cf80:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	3301      	adds	r3, #1
 800cf86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	2203      	movs	r2, #3
 800cf90:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	3301      	adds	r3, #1
 800cf96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf98:	e013      	b.n	800cfc2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	7812      	ldrb	r2, [r2, #0]
 800cfa4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	613b      	str	r3, [r7, #16]
    idx++;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	2200      	movs	r2, #0
 800cfba:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e7      	bne.n	800cf9a <USBD_GetString+0x6a>
 800cfca:	e000      	b.n	800cfce <USBD_GetString+0x9e>
    return;
 800cfcc:	bf00      	nop
  }
}
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cfe4:	e005      	b.n	800cff2 <USBD_GetLen+0x1e>
  {
    len++;
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	3301      	adds	r3, #1
 800cff0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f5      	bne.n	800cfe6 <USBD_GetLen+0x12>
  }

  return len;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2202      	movs	r2, #2
 800d018:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	2100      	movs	r1, #0
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 fcbb 	bl	800d9aa <USBD_LL_Transmit>

  return USBD_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	2100      	movs	r1, #0
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 fcaa 	bl	800d9aa <USBD_LL_Transmit>

  return USBD_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2203      	movs	r2, #3
 800d070:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	2100      	movs	r1, #0
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 fcae 	bl	800d9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f000 fc9d 	bl	800d9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2204      	movs	r2, #4
 800d0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fc69 	bl	800d9aa <USBD_LL_Transmit>

  return USBD_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2205      	movs	r2, #5
 800d0ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fc77 	bl	800d9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d10c:	2200      	movs	r2, #0
 800d10e:	4912      	ldr	r1, [pc, #72]	@ (800d158 <MX_USB_DEVICE_Init+0x50>)
 800d110:	4812      	ldr	r0, [pc, #72]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d112:	f7fe fcf7 	bl	800bb04 <USBD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d11c:	f7f4 fb2a 	bl	8001774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d120:	490f      	ldr	r1, [pc, #60]	@ (800d160 <MX_USB_DEVICE_Init+0x58>)
 800d122:	480e      	ldr	r0, [pc, #56]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d124:	f7fe fd1e 	bl	800bb64 <USBD_RegisterClass>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d12e:	f7f4 fb21 	bl	8001774 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d132:	490c      	ldr	r1, [pc, #48]	@ (800d164 <MX_USB_DEVICE_Init+0x5c>)
 800d134:	4809      	ldr	r0, [pc, #36]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d136:	f7fe fc55 	bl	800b9e4 <USBD_CDC_RegisterInterface>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d140:	f7f4 fb18 	bl	8001774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d144:	4805      	ldr	r0, [pc, #20]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d146:	f7fe fd43 	bl	800bbd0 <USBD_Start>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d150:	f7f4 fb10 	bl	8001774 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d154:	bf00      	nop
 800d156:	bd80      	pop	{r7, pc}
 800d158:	200000ac 	.word	0x200000ac
 800d15c:	200004ec 	.word	0x200004ec
 800d160:	20000018 	.word	0x20000018
 800d164:	20000098 	.word	0x20000098

0800d168 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d16c:	2200      	movs	r2, #0
 800d16e:	4905      	ldr	r1, [pc, #20]	@ (800d184 <CDC_Init_FS+0x1c>)
 800d170:	4805      	ldr	r0, [pc, #20]	@ (800d188 <CDC_Init_FS+0x20>)
 800d172:	f7fe fc51 	bl	800ba18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d176:	4905      	ldr	r1, [pc, #20]	@ (800d18c <CDC_Init_FS+0x24>)
 800d178:	4803      	ldr	r0, [pc, #12]	@ (800d188 <CDC_Init_FS+0x20>)
 800d17a:	f7fe fc6f 	bl	800ba5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d17e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d180:	4618      	mov	r0, r3
 800d182:	bd80      	pop	{r7, pc}
 800d184:	20000fc8 	.word	0x20000fc8
 800d188:	200004ec 	.word	0x200004ec
 800d18c:	200007c8 	.word	0x200007c8

0800d190 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d190:	b480      	push	{r7}
 800d192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d194:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d196:	4618      	mov	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b23      	cmp	r3, #35	@ 0x23
 800d1b4:	d84a      	bhi.n	800d24c <CDC_Control_FS+0xac>
 800d1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <CDC_Control_FS+0x1c>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d24d 	.word	0x0800d24d
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d24d 	.word	0x0800d24d
 800d1c8:	0800d24d 	.word	0x0800d24d
 800d1cc:	0800d24d 	.word	0x0800d24d
 800d1d0:	0800d24d 	.word	0x0800d24d
 800d1d4:	0800d24d 	.word	0x0800d24d
 800d1d8:	0800d24d 	.word	0x0800d24d
 800d1dc:	0800d24d 	.word	0x0800d24d
 800d1e0:	0800d24d 	.word	0x0800d24d
 800d1e4:	0800d24d 	.word	0x0800d24d
 800d1e8:	0800d24d 	.word	0x0800d24d
 800d1ec:	0800d24d 	.word	0x0800d24d
 800d1f0:	0800d24d 	.word	0x0800d24d
 800d1f4:	0800d24d 	.word	0x0800d24d
 800d1f8:	0800d24d 	.word	0x0800d24d
 800d1fc:	0800d24d 	.word	0x0800d24d
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d24d 	.word	0x0800d24d
 800d208:	0800d24d 	.word	0x0800d24d
 800d20c:	0800d24d 	.word	0x0800d24d
 800d210:	0800d24d 	.word	0x0800d24d
 800d214:	0800d24d 	.word	0x0800d24d
 800d218:	0800d24d 	.word	0x0800d24d
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d24d 	.word	0x0800d24d
 800d224:	0800d24d 	.word	0x0800d24d
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d24d 	.word	0x0800d24d
 800d234:	0800d24d 	.word	0x0800d24d
 800d238:	0800d24d 	.word	0x0800d24d
 800d23c:	0800d24d 	.word	0x0800d24d
 800d240:	0800d24d 	.word	0x0800d24d
 800d244:	0800d24d 	.word	0x0800d24d
 800d248:	0800d24d 	.word	0x0800d24d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d24c:	bf00      	nop
  }

  return (USBD_OK);
 800d24e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d266:	6879      	ldr	r1, [r7, #4]
 800d268:	4805      	ldr	r0, [pc, #20]	@ (800d280 <CDC_Receive_FS+0x24>)
 800d26a:	f7fe fbf7 	bl	800ba5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d26e:	4804      	ldr	r0, [pc, #16]	@ (800d280 <CDC_Receive_FS+0x24>)
 800d270:	f7fe fc12 	bl	800ba98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d274:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	200004ec 	.word	0x200004ec

0800d284 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d284:	b480      	push	{r7}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	4613      	mov	r3, r2
 800d290:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
	...

0800d2a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	6039      	str	r1, [r7, #0]
 800d2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2212      	movs	r2, #18
 800d2b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ba:	4b03      	ldr	r3, [pc, #12]	@ (800d2c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	200000c8 	.word	0x200000c8

0800d2cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2204      	movs	r2, #4
 800d2dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2de:	4b03      	ldr	r3, [pc, #12]	@ (800d2ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	200000dc 	.word	0x200000dc

0800d2f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6039      	str	r1, [r7, #0]
 800d2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d105      	bne.n	800d30e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	4907      	ldr	r1, [pc, #28]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
 800d306:	4808      	ldr	r0, [pc, #32]	@ (800d328 <USBD_FS_ProductStrDescriptor+0x38>)
 800d308:	f7ff fe12 	bl	800cf30 <USBD_GetString>
 800d30c:	e004      	b.n	800d318 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	4904      	ldr	r1, [pc, #16]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
 800d312:	4805      	ldr	r0, [pc, #20]	@ (800d328 <USBD_FS_ProductStrDescriptor+0x38>)
 800d314:	f7ff fe0c 	bl	800cf30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d318:	4b02      	ldr	r3, [pc, #8]	@ (800d324 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	200017c8 	.word	0x200017c8
 800d328:	08010d44 	.word	0x08010d44

0800d32c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	4603      	mov	r3, r0
 800d334:	6039      	str	r1, [r7, #0]
 800d336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	4904      	ldr	r1, [pc, #16]	@ (800d34c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d33c:	4804      	ldr	r0, [pc, #16]	@ (800d350 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d33e:	f7ff fdf7 	bl	800cf30 <USBD_GetString>
  return USBD_StrDesc;
 800d342:	4b02      	ldr	r3, [pc, #8]	@ (800d34c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	200017c8 	.word	0x200017c8
 800d350:	08010d5c 	.word	0x08010d5c

0800d354 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	221a      	movs	r2, #26
 800d364:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d366:	f000 f843 	bl	800d3f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d36a:	4b02      	ldr	r3, [pc, #8]	@ (800d374 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	200000e0 	.word	0x200000e0

0800d378 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	6039      	str	r1, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d105      	bne.n	800d396 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	4907      	ldr	r1, [pc, #28]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d38e:	4808      	ldr	r0, [pc, #32]	@ (800d3b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d390:	f7ff fdce 	bl	800cf30 <USBD_GetString>
 800d394:	e004      	b.n	800d3a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	4904      	ldr	r1, [pc, #16]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d39a:	4805      	ldr	r0, [pc, #20]	@ (800d3b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d39c:	f7ff fdc8 	bl	800cf30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3a0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	200017c8 	.word	0x200017c8
 800d3b0:	08010d70 	.word	0x08010d70

0800d3b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	6039      	str	r1, [r7, #0]
 800d3be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	4907      	ldr	r1, [pc, #28]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ca:	4808      	ldr	r0, [pc, #32]	@ (800d3ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3cc:	f7ff fdb0 	bl	800cf30 <USBD_GetString>
 800d3d0:	e004      	b.n	800d3dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	4904      	ldr	r1, [pc, #16]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3d6:	4805      	ldr	r0, [pc, #20]	@ (800d3ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3d8:	f7ff fdaa 	bl	800cf30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3dc:	4b02      	ldr	r3, [pc, #8]	@ (800d3e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	200017c8 	.word	0x200017c8
 800d3ec:	08010d7c 	.word	0x08010d7c

0800d3f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d434 <Get_SerialNum+0x44>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d438 <Get_SerialNum+0x48>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d402:	4b0e      	ldr	r3, [pc, #56]	@ (800d43c <Get_SerialNum+0x4c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4413      	add	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d009      	beq.n	800d42a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d416:	2208      	movs	r2, #8
 800d418:	4909      	ldr	r1, [pc, #36]	@ (800d440 <Get_SerialNum+0x50>)
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 f814 	bl	800d448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d420:	2204      	movs	r2, #4
 800d422:	4908      	ldr	r1, [pc, #32]	@ (800d444 <Get_SerialNum+0x54>)
 800d424:	68b8      	ldr	r0, [r7, #8]
 800d426:	f000 f80f 	bl	800d448 <IntToUnicode>
  }
}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	1fff7a10 	.word	0x1fff7a10
 800d438:	1fff7a14 	.word	0x1fff7a14
 800d43c:	1fff7a18 	.word	0x1fff7a18
 800d440:	200000e2 	.word	0x200000e2
 800d444:	200000f2 	.word	0x200000f2

0800d448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d45a:	2300      	movs	r3, #0
 800d45c:	75fb      	strb	r3, [r7, #23]
 800d45e:	e027      	b.n	800d4b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	0f1b      	lsrs	r3, r3, #28
 800d464:	2b09      	cmp	r3, #9
 800d466:	d80b      	bhi.n	800d480 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	005b      	lsls	r3, r3, #1
 800d472:	4619      	mov	r1, r3
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	440b      	add	r3, r1
 800d478:	3230      	adds	r2, #48	@ 0x30
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	e00a      	b.n	800d496 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	0f1b      	lsrs	r3, r3, #28
 800d484:	b2da      	uxtb	r2, r3
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	4619      	mov	r1, r3
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	440b      	add	r3, r1
 800d490:	3237      	adds	r2, #55	@ 0x37
 800d492:	b2d2      	uxtb	r2, r2
 800d494:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	75fb      	strb	r3, [r7, #23]
 800d4b0:	7dfa      	ldrb	r2, [r7, #23]
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d3d3      	bcc.n	800d460 <IntToUnicode+0x18>
  }
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	371c      	adds	r7, #28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
	...

0800d4c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b08a      	sub	sp, #40	@ 0x28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4d0:	f107 0314 	add.w	r3, r7, #20
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	605a      	str	r2, [r3, #4]
 800d4da:	609a      	str	r2, [r3, #8]
 800d4dc:	60da      	str	r2, [r3, #12]
 800d4de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d4e8:	d13a      	bne.n	800d560 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	613b      	str	r3, [r7, #16]
 800d4ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f2:	4a1d      	ldr	r2, [pc, #116]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d4f4:	f043 0301 	orr.w	r3, r3, #1
 800d4f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fe:	f003 0301 	and.w	r3, r3, #1
 800d502:	613b      	str	r3, [r7, #16]
 800d504:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d506:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d50a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d50c:	2302      	movs	r3, #2
 800d50e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d510:	2300      	movs	r3, #0
 800d512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d514:	2303      	movs	r3, #3
 800d516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d518:	230a      	movs	r3, #10
 800d51a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d51c:	f107 0314 	add.w	r3, r7, #20
 800d520:	4619      	mov	r1, r3
 800d522:	4812      	ldr	r0, [pc, #72]	@ (800d56c <HAL_PCD_MspInit+0xa4>)
 800d524:	f7f5 fc1e 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d528:	4b0f      	ldr	r3, [pc, #60]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d52c:	4a0e      	ldr	r2, [pc, #56]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d532:	6353      	str	r3, [r2, #52]	@ 0x34
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	4b0b      	ldr	r3, [pc, #44]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d53a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d53c:	4a0a      	ldr	r2, [pc, #40]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d53e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d542:	6453      	str	r3, [r2, #68]	@ 0x44
 800d544:	4b08      	ldr	r3, [pc, #32]	@ (800d568 <HAL_PCD_MspInit+0xa0>)
 800d546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d550:	2200      	movs	r2, #0
 800d552:	2100      	movs	r1, #0
 800d554:	2043      	movs	r0, #67	@ 0x43
 800d556:	f7f5 f844 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d55a:	2043      	movs	r0, #67	@ 0x43
 800d55c:	f7f5 f85d 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d560:	bf00      	nop
 800d562:	3728      	adds	r7, #40	@ 0x28
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40023800 	.word	0x40023800
 800d56c:	40020000 	.word	0x40020000

0800d570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fe fb6f 	bl	800bc6a <USBD_LL_SetupStage>
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	440b      	add	r3, r1
 800d5b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	f7fe fba9 	bl	800bd14 <USBD_LL_DataOutStage>
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5dc:	78fa      	ldrb	r2, [r7, #3]
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3320      	adds	r3, #32
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	78fb      	ldrb	r3, [r7, #3]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7fe fc42 	bl	800be7a <USBD_LL_DataInStage>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fd7c 	bl	800c10a <USBD_LL_SOF>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d622:	2301      	movs	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	79db      	ldrb	r3, [r3, #7]
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d001      	beq.n	800d632 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d62e:	f7f4 f8a1 	bl	8001774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d638:	7bfa      	ldrb	r2, [r7, #15]
 800d63a:	4611      	mov	r1, r2
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe fd20 	bl	800c082 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fcc8 	bl	800bfde <USBD_LL_Reset>
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
	...

0800d658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d666:	4618      	mov	r0, r3
 800d668:	f7fe fd1b 	bl	800c0a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6812      	ldr	r2, [r2, #0]
 800d67a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d67e:	f043 0301 	orr.w	r3, r3, #1
 800d682:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7adb      	ldrb	r3, [r3, #11]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d68c:	4b04      	ldr	r3, [pc, #16]	@ (800d6a0 <HAL_PCD_SuspendCallback+0x48>)
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	4a03      	ldr	r2, [pc, #12]	@ (800d6a0 <HAL_PCD_SuspendCallback+0x48>)
 800d692:	f043 0306 	orr.w	r3, r3, #6
 800d696:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	e000ed00 	.word	0xe000ed00

0800d6a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fd11 	bl	800c0da <USBD_LL_Resume>
}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6d2:	78fa      	ldrb	r2, [r7, #3]
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fe fd69 	bl	800c1ae <USBD_LL_IsoOUTIncomplete>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6f6:	78fa      	ldrb	r2, [r7, #3]
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe fd25 	bl	800c14a <USBD_LL_IsoINIncomplete>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fd7b 	bl	800c212 <USBD_LL_DevConnected>
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fd78 	bl	800c228 <USBD_LL_DevDisconnected>
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d13c      	bne.n	800d7ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d750:	4a20      	ldr	r2, [pc, #128]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a1e      	ldr	r2, [pc, #120]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d75c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d760:	4b1c      	ldr	r3, [pc, #112]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d762:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d768:	4b1a      	ldr	r3, [pc, #104]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d76a:	2204      	movs	r2, #4
 800d76c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d76e:	4b19      	ldr	r3, [pc, #100]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d770:	2202      	movs	r2, #2
 800d772:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d774:	4b17      	ldr	r3, [pc, #92]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d776:	2200      	movs	r2, #0
 800d778:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d77a:	4b16      	ldr	r3, [pc, #88]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d77c:	2202      	movs	r2, #2
 800d77e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d780:	4b14      	ldr	r3, [pc, #80]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d782:	2200      	movs	r2, #0
 800d784:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d786:	4b13      	ldr	r3, [pc, #76]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d788:	2200      	movs	r2, #0
 800d78a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d78c:	4b11      	ldr	r3, [pc, #68]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d78e:	2200      	movs	r2, #0
 800d790:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d792:	4b10      	ldr	r3, [pc, #64]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d794:	2200      	movs	r2, #0
 800d796:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d798:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d79e:	480d      	ldr	r0, [pc, #52]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d7a0:	f7f8 fae1 	bl	8005d66 <HAL_PCD_Init>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7aa:	f7f3 ffe3 	bl	8001774 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7ae:	2180      	movs	r1, #128	@ 0x80
 800d7b0:	4808      	ldr	r0, [pc, #32]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d7b2:	f7f9 fd0e 	bl	80071d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7b6:	2240      	movs	r2, #64	@ 0x40
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4806      	ldr	r0, [pc, #24]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d7bc:	f7f9 fcc2 	bl	8007144 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7c0:	2280      	movs	r2, #128	@ 0x80
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	4803      	ldr	r0, [pc, #12]	@ (800d7d4 <USBD_LL_Init+0x94>)
 800d7c6:	f7f9 fcbd 	bl	8007144 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	200019c8 	.word	0x200019c8

0800d7d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7f8 fbc8 	bl	8005f84 <HAL_PCD_Start>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f942 	bl	800da84 <USBD_Get_USB_Status>
 800d800:	4603      	mov	r3, r0
 800d802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d804:	7bbb      	ldrb	r3, [r7, #14]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b084      	sub	sp, #16
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	4608      	mov	r0, r1
 800d818:	4611      	mov	r1, r2
 800d81a:	461a      	mov	r2, r3
 800d81c:	4603      	mov	r3, r0
 800d81e:	70fb      	strb	r3, [r7, #3]
 800d820:	460b      	mov	r3, r1
 800d822:	70bb      	strb	r3, [r7, #2]
 800d824:	4613      	mov	r3, r2
 800d826:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d836:	78bb      	ldrb	r3, [r7, #2]
 800d838:	883a      	ldrh	r2, [r7, #0]
 800d83a:	78f9      	ldrb	r1, [r7, #3]
 800d83c:	f7f9 f89c 	bl	8006978 <HAL_PCD_EP_Open>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	4618      	mov	r0, r3
 800d848:	f000 f91c 	bl	800da84 <USBD_Get_USB_Status>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d850:	7bbb      	ldrb	r3, [r7, #14]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d866:	2300      	movs	r3, #0
 800d868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d874:	78fa      	ldrb	r2, [r7, #3]
 800d876:	4611      	mov	r1, r2
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f9 f8e7 	bl	8006a4c <HAL_PCD_EP_Close>
 800d87e:	4603      	mov	r3, r0
 800d880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	4618      	mov	r0, r3
 800d886:	f000 f8fd 	bl	800da84 <USBD_Get_USB_Status>
 800d88a:	4603      	mov	r3, r0
 800d88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8b2:	78fa      	ldrb	r2, [r7, #3]
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7f9 f99f 	bl	8006bfa <HAL_PCD_EP_SetStall>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f8de 	bl	800da84 <USBD_Get_USB_Status>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8f0:	78fa      	ldrb	r2, [r7, #3]
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f9 f9e3 	bl	8006cc0 <HAL_PCD_EP_ClrStall>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	4618      	mov	r0, r3
 800d902:	f000 f8bf 	bl	800da84 <USBD_Get_USB_Status>
 800d906:	4603      	mov	r3, r0
 800d908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da0b      	bge.n	800d948 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d936:	68f9      	ldr	r1, [r7, #12]
 800d938:	4613      	mov	r3, r2
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	4413      	add	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	440b      	add	r3, r1
 800d942:	3316      	adds	r3, #22
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	e00b      	b.n	800d960 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d948:	78fb      	ldrb	r3, [r7, #3]
 800d94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d94e:	68f9      	ldr	r1, [r7, #12]
 800d950:	4613      	mov	r3, r2
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	4413      	add	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	440b      	add	r3, r1
 800d95a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d95e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d960:	4618      	mov	r0, r3
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	4611      	mov	r1, r2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7f8 ffd0 	bl	8006930 <HAL_PCD_SetAddress>
 800d990:	4603      	mov	r3, r0
 800d992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f874 	bl	800da84 <USBD_Get_USB_Status>
 800d99c:	4603      	mov	r3, r0
 800d99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b086      	sub	sp, #24
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9c8:	7af9      	ldrb	r1, [r7, #11]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	f7f9 f8da 	bl	8006b86 <HAL_PCD_EP_Transmit>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 f853 	bl	800da84 <USBD_Get_USB_Status>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3718      	adds	r7, #24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	607a      	str	r2, [r7, #4]
 800d9f6:	603b      	str	r3, [r7, #0]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da0a:	7af9      	ldrb	r1, [r7, #11]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	f7f9 f866 	bl	8006ae0 <HAL_PCD_EP_Receive>
 800da14:	4603      	mov	r3, r0
 800da16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 f832 	bl	800da84 <USBD_Get_USB_Status>
 800da20:	4603      	mov	r3, r0
 800da22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da24:	7dbb      	ldrb	r3, [r7, #22]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da40:	78fa      	ldrb	r2, [r7, #3]
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7f9 f886 	bl	8006b56 <HAL_PCD_EP_GetRxCount>
 800da4a:	4603      	mov	r3, r0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da5c:	4b03      	ldr	r3, [pc, #12]	@ (800da6c <USBD_static_malloc+0x18>)
}
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	20001eac 	.word	0x20001eac

0800da70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]

}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	2b03      	cmp	r3, #3
 800da96:	d817      	bhi.n	800dac8 <USBD_Get_USB_Status+0x44>
 800da98:	a201      	add	r2, pc, #4	@ (adr r2, 800daa0 <USBD_Get_USB_Status+0x1c>)
 800da9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9e:	bf00      	nop
 800daa0:	0800dab1 	.word	0x0800dab1
 800daa4:	0800dab7 	.word	0x0800dab7
 800daa8:	0800dabd 	.word	0x0800dabd
 800daac:	0800dac3 	.word	0x0800dac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73fb      	strb	r3, [r7, #15]
    break;
 800dab4:	e00b      	b.n	800dace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dab6:	2303      	movs	r3, #3
 800dab8:	73fb      	strb	r3, [r7, #15]
    break;
 800daba:	e008      	b.n	800dace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dabc:	2301      	movs	r3, #1
 800dabe:	73fb      	strb	r3, [r7, #15]
    break;
 800dac0:	e005      	b.n	800dace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dac2:	2303      	movs	r3, #3
 800dac4:	73fb      	strb	r3, [r7, #15]
    break;
 800dac6:	e002      	b.n	800dace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dac8:	2303      	movs	r3, #3
 800daca:	73fb      	strb	r3, [r7, #15]
    break;
 800dacc:	bf00      	nop
  }
  return usb_status;
 800dace:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3714      	adds	r7, #20
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <__cxa_guard_acquire>:
 800dadc:	6802      	ldr	r2, [r0, #0]
 800dade:	07d2      	lsls	r2, r2, #31
 800dae0:	4603      	mov	r3, r0
 800dae2:	d405      	bmi.n	800daf0 <__cxa_guard_acquire+0x14>
 800dae4:	7842      	ldrb	r2, [r0, #1]
 800dae6:	b102      	cbz	r2, 800daea <__cxa_guard_acquire+0xe>
 800dae8:	deff      	udf	#255	@ 0xff
 800daea:	2001      	movs	r0, #1
 800daec:	7058      	strb	r0, [r3, #1]
 800daee:	4770      	bx	lr
 800daf0:	2000      	movs	r0, #0
 800daf2:	4770      	bx	lr

0800daf4 <__cxa_guard_release>:
 800daf4:	2301      	movs	r3, #1
 800daf6:	6003      	str	r3, [r0, #0]
 800daf8:	4770      	bx	lr

0800dafa <atan2>:
 800dafa:	f000 b909 	b.w	800dd10 <__ieee754_atan2>

0800dafe <sqrt>:
 800dafe:	b538      	push	{r3, r4, r5, lr}
 800db00:	ed2d 8b02 	vpush	{d8}
 800db04:	ec55 4b10 	vmov	r4, r5, d0
 800db08:	f000 f826 	bl	800db58 <__ieee754_sqrt>
 800db0c:	4622      	mov	r2, r4
 800db0e:	462b      	mov	r3, r5
 800db10:	4620      	mov	r0, r4
 800db12:	4629      	mov	r1, r5
 800db14:	eeb0 8a40 	vmov.f32	s16, s0
 800db18:	eef0 8a60 	vmov.f32	s17, s1
 800db1c:	f7f3 f80e 	bl	8000b3c <__aeabi_dcmpun>
 800db20:	b990      	cbnz	r0, 800db48 <sqrt+0x4a>
 800db22:	2200      	movs	r2, #0
 800db24:	2300      	movs	r3, #0
 800db26:	4620      	mov	r0, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	f7f2 ffdf 	bl	8000aec <__aeabi_dcmplt>
 800db2e:	b158      	cbz	r0, 800db48 <sqrt+0x4a>
 800db30:	f001 fa0a 	bl	800ef48 <__errno>
 800db34:	2321      	movs	r3, #33	@ 0x21
 800db36:	6003      	str	r3, [r0, #0]
 800db38:	2200      	movs	r2, #0
 800db3a:	2300      	movs	r3, #0
 800db3c:	4610      	mov	r0, r2
 800db3e:	4619      	mov	r1, r3
 800db40:	f7f2 fe8c 	bl	800085c <__aeabi_ddiv>
 800db44:	ec41 0b18 	vmov	d8, r0, r1
 800db48:	eeb0 0a48 	vmov.f32	s0, s16
 800db4c:	eef0 0a68 	vmov.f32	s1, s17
 800db50:	ecbd 8b02 	vpop	{d8}
 800db54:	bd38      	pop	{r3, r4, r5, pc}
	...

0800db58 <__ieee754_sqrt>:
 800db58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	4a68      	ldr	r2, [pc, #416]	@ (800dd00 <__ieee754_sqrt+0x1a8>)
 800db5e:	ec55 4b10 	vmov	r4, r5, d0
 800db62:	43aa      	bics	r2, r5
 800db64:	462b      	mov	r3, r5
 800db66:	4621      	mov	r1, r4
 800db68:	d110      	bne.n	800db8c <__ieee754_sqrt+0x34>
 800db6a:	4622      	mov	r2, r4
 800db6c:	4620      	mov	r0, r4
 800db6e:	4629      	mov	r1, r5
 800db70:	f7f2 fd4a 	bl	8000608 <__aeabi_dmul>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4620      	mov	r0, r4
 800db7a:	4629      	mov	r1, r5
 800db7c:	f7f2 fb8e 	bl	800029c <__adddf3>
 800db80:	4604      	mov	r4, r0
 800db82:	460d      	mov	r5, r1
 800db84:	ec45 4b10 	vmov	d0, r4, r5
 800db88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	2d00      	cmp	r5, #0
 800db8e:	dc0e      	bgt.n	800dbae <__ieee754_sqrt+0x56>
 800db90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800db94:	4322      	orrs	r2, r4
 800db96:	d0f5      	beq.n	800db84 <__ieee754_sqrt+0x2c>
 800db98:	b19d      	cbz	r5, 800dbc2 <__ieee754_sqrt+0x6a>
 800db9a:	4622      	mov	r2, r4
 800db9c:	4620      	mov	r0, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	f7f2 fb7a 	bl	8000298 <__aeabi_dsub>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	f7f2 fe58 	bl	800085c <__aeabi_ddiv>
 800dbac:	e7e8      	b.n	800db80 <__ieee754_sqrt+0x28>
 800dbae:	152a      	asrs	r2, r5, #20
 800dbb0:	d115      	bne.n	800dbde <__ieee754_sqrt+0x86>
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	e009      	b.n	800dbca <__ieee754_sqrt+0x72>
 800dbb6:	0acb      	lsrs	r3, r1, #11
 800dbb8:	3a15      	subs	r2, #21
 800dbba:	0549      	lsls	r1, r1, #21
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d0fa      	beq.n	800dbb6 <__ieee754_sqrt+0x5e>
 800dbc0:	e7f7      	b.n	800dbb2 <__ieee754_sqrt+0x5a>
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	e7fa      	b.n	800dbbc <__ieee754_sqrt+0x64>
 800dbc6:	005b      	lsls	r3, r3, #1
 800dbc8:	3001      	adds	r0, #1
 800dbca:	02dc      	lsls	r4, r3, #11
 800dbcc:	d5fb      	bpl.n	800dbc6 <__ieee754_sqrt+0x6e>
 800dbce:	1e44      	subs	r4, r0, #1
 800dbd0:	1b12      	subs	r2, r2, r4
 800dbd2:	f1c0 0420 	rsb	r4, r0, #32
 800dbd6:	fa21 f404 	lsr.w	r4, r1, r4
 800dbda:	4323      	orrs	r3, r4
 800dbdc:	4081      	lsls	r1, r0
 800dbde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbe2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dbe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbea:	07d2      	lsls	r2, r2, #31
 800dbec:	bf5c      	itt	pl
 800dbee:	005b      	lslpl	r3, r3, #1
 800dbf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dbf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbf8:	bf58      	it	pl
 800dbfa:	0049      	lslpl	r1, r1, #1
 800dbfc:	2600      	movs	r6, #0
 800dbfe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dc02:	106d      	asrs	r5, r5, #1
 800dc04:	0049      	lsls	r1, r1, #1
 800dc06:	2016      	movs	r0, #22
 800dc08:	4632      	mov	r2, r6
 800dc0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dc0e:	1917      	adds	r7, r2, r4
 800dc10:	429f      	cmp	r7, r3
 800dc12:	bfde      	ittt	le
 800dc14:	193a      	addle	r2, r7, r4
 800dc16:	1bdb      	suble	r3, r3, r7
 800dc18:	1936      	addle	r6, r6, r4
 800dc1a:	0fcf      	lsrs	r7, r1, #31
 800dc1c:	3801      	subs	r0, #1
 800dc1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800dc22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dc2a:	d1f0      	bne.n	800dc0e <__ieee754_sqrt+0xb6>
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	2720      	movs	r7, #32
 800dc30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dc34:	429a      	cmp	r2, r3
 800dc36:	eb00 0e0c 	add.w	lr, r0, ip
 800dc3a:	db02      	blt.n	800dc42 <__ieee754_sqrt+0xea>
 800dc3c:	d113      	bne.n	800dc66 <__ieee754_sqrt+0x10e>
 800dc3e:	458e      	cmp	lr, r1
 800dc40:	d811      	bhi.n	800dc66 <__ieee754_sqrt+0x10e>
 800dc42:	f1be 0f00 	cmp.w	lr, #0
 800dc46:	eb0e 000c 	add.w	r0, lr, ip
 800dc4a:	da42      	bge.n	800dcd2 <__ieee754_sqrt+0x17a>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	db40      	blt.n	800dcd2 <__ieee754_sqrt+0x17a>
 800dc50:	f102 0801 	add.w	r8, r2, #1
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	458e      	cmp	lr, r1
 800dc58:	bf88      	it	hi
 800dc5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dc5e:	eba1 010e 	sub.w	r1, r1, lr
 800dc62:	4464      	add	r4, ip
 800dc64:	4642      	mov	r2, r8
 800dc66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dc6a:	3f01      	subs	r7, #1
 800dc6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dc70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dc78:	d1dc      	bne.n	800dc34 <__ieee754_sqrt+0xdc>
 800dc7a:	4319      	orrs	r1, r3
 800dc7c:	d01b      	beq.n	800dcb6 <__ieee754_sqrt+0x15e>
 800dc7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800dd04 <__ieee754_sqrt+0x1ac>
 800dc82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800dd08 <__ieee754_sqrt+0x1b0>
 800dc86:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc8e:	f7f2 fb03 	bl	8000298 <__aeabi_dsub>
 800dc92:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	f7f2 ff2f 	bl	8000b00 <__aeabi_dcmple>
 800dca2:	b140      	cbz	r0, 800dcb6 <__ieee754_sqrt+0x15e>
 800dca4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dca8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dcac:	e9db 2300 	ldrd	r2, r3, [fp]
 800dcb0:	d111      	bne.n	800dcd6 <__ieee754_sqrt+0x17e>
 800dcb2:	3601      	adds	r6, #1
 800dcb4:	463c      	mov	r4, r7
 800dcb6:	1072      	asrs	r2, r6, #1
 800dcb8:	0863      	lsrs	r3, r4, #1
 800dcba:	07f1      	lsls	r1, r6, #31
 800dcbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dcc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dcc4:	bf48      	it	mi
 800dcc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dcca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dcce:	4618      	mov	r0, r3
 800dcd0:	e756      	b.n	800db80 <__ieee754_sqrt+0x28>
 800dcd2:	4690      	mov	r8, r2
 800dcd4:	e7be      	b.n	800dc54 <__ieee754_sqrt+0xfc>
 800dcd6:	f7f2 fae1 	bl	800029c <__adddf3>
 800dcda:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 ff01 	bl	8000aec <__aeabi_dcmplt>
 800dcea:	b120      	cbz	r0, 800dcf6 <__ieee754_sqrt+0x19e>
 800dcec:	1ca0      	adds	r0, r4, #2
 800dcee:	bf08      	it	eq
 800dcf0:	3601      	addeq	r6, #1
 800dcf2:	3402      	adds	r4, #2
 800dcf4:	e7df      	b.n	800dcb6 <__ieee754_sqrt+0x15e>
 800dcf6:	1c63      	adds	r3, r4, #1
 800dcf8:	f023 0401 	bic.w	r4, r3, #1
 800dcfc:	e7db      	b.n	800dcb6 <__ieee754_sqrt+0x15e>
 800dcfe:	bf00      	nop
 800dd00:	7ff00000 	.word	0x7ff00000
 800dd04:	20000108 	.word	0x20000108
 800dd08:	20000100 	.word	0x20000100
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <__ieee754_atan2>:
 800dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	ec57 6b11 	vmov	r6, r7, d1
 800dd18:	4273      	negs	r3, r6
 800dd1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800de98 <__ieee754_atan2+0x188>
 800dd1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800dd22:	4333      	orrs	r3, r6
 800dd24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dd28:	4543      	cmp	r3, r8
 800dd2a:	ec51 0b10 	vmov	r0, r1, d0
 800dd2e:	4635      	mov	r5, r6
 800dd30:	d809      	bhi.n	800dd46 <__ieee754_atan2+0x36>
 800dd32:	4244      	negs	r4, r0
 800dd34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dd38:	4304      	orrs	r4, r0
 800dd3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dd3e:	4544      	cmp	r4, r8
 800dd40:	468e      	mov	lr, r1
 800dd42:	4681      	mov	r9, r0
 800dd44:	d907      	bls.n	800dd56 <__ieee754_atan2+0x46>
 800dd46:	4632      	mov	r2, r6
 800dd48:	463b      	mov	r3, r7
 800dd4a:	f7f2 faa7 	bl	800029c <__adddf3>
 800dd4e:	ec41 0b10 	vmov	d0, r0, r1
 800dd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800dd5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800dd5e:	4334      	orrs	r4, r6
 800dd60:	d103      	bne.n	800dd6a <__ieee754_atan2+0x5a>
 800dd62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd66:	f000 b89b 	b.w	800dea0 <atan>
 800dd6a:	17bc      	asrs	r4, r7, #30
 800dd6c:	f004 0402 	and.w	r4, r4, #2
 800dd70:	ea53 0909 	orrs.w	r9, r3, r9
 800dd74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dd78:	d107      	bne.n	800dd8a <__ieee754_atan2+0x7a>
 800dd7a:	2c02      	cmp	r4, #2
 800dd7c:	d05f      	beq.n	800de3e <__ieee754_atan2+0x12e>
 800dd7e:	2c03      	cmp	r4, #3
 800dd80:	d1e5      	bne.n	800dd4e <__ieee754_atan2+0x3e>
 800dd82:	a141      	add	r1, pc, #260	@ (adr r1, 800de88 <__ieee754_atan2+0x178>)
 800dd84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd88:	e7e1      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800dd8a:	4315      	orrs	r5, r2
 800dd8c:	d106      	bne.n	800dd9c <__ieee754_atan2+0x8c>
 800dd8e:	f1be 0f00 	cmp.w	lr, #0
 800dd92:	da5f      	bge.n	800de54 <__ieee754_atan2+0x144>
 800dd94:	a13e      	add	r1, pc, #248	@ (adr r1, 800de90 <__ieee754_atan2+0x180>)
 800dd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd9a:	e7d8      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800dd9c:	4542      	cmp	r2, r8
 800dd9e:	d10f      	bne.n	800ddc0 <__ieee754_atan2+0xb0>
 800dda0:	4293      	cmp	r3, r2
 800dda2:	f104 34ff 	add.w	r4, r4, #4294967295
 800dda6:	d107      	bne.n	800ddb8 <__ieee754_atan2+0xa8>
 800dda8:	2c02      	cmp	r4, #2
 800ddaa:	d84c      	bhi.n	800de46 <__ieee754_atan2+0x136>
 800ddac:	4b34      	ldr	r3, [pc, #208]	@ (800de80 <__ieee754_atan2+0x170>)
 800ddae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddb6:	e7ca      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800ddb8:	2c02      	cmp	r4, #2
 800ddba:	d848      	bhi.n	800de4e <__ieee754_atan2+0x13e>
 800ddbc:	4b31      	ldr	r3, [pc, #196]	@ (800de84 <__ieee754_atan2+0x174>)
 800ddbe:	e7f6      	b.n	800ddae <__ieee754_atan2+0x9e>
 800ddc0:	4543      	cmp	r3, r8
 800ddc2:	d0e4      	beq.n	800dd8e <__ieee754_atan2+0x7e>
 800ddc4:	1a9b      	subs	r3, r3, r2
 800ddc6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ddca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddce:	da1e      	bge.n	800de0e <__ieee754_atan2+0xfe>
 800ddd0:	2f00      	cmp	r7, #0
 800ddd2:	da01      	bge.n	800ddd8 <__ieee754_atan2+0xc8>
 800ddd4:	323c      	adds	r2, #60	@ 0x3c
 800ddd6:	db1e      	blt.n	800de16 <__ieee754_atan2+0x106>
 800ddd8:	4632      	mov	r2, r6
 800ddda:	463b      	mov	r3, r7
 800dddc:	f7f2 fd3e 	bl	800085c <__aeabi_ddiv>
 800dde0:	ec41 0b10 	vmov	d0, r0, r1
 800dde4:	f000 f9f4 	bl	800e1d0 <fabs>
 800dde8:	f000 f85a 	bl	800dea0 <atan>
 800ddec:	ec51 0b10 	vmov	r0, r1, d0
 800ddf0:	2c01      	cmp	r4, #1
 800ddf2:	d013      	beq.n	800de1c <__ieee754_atan2+0x10c>
 800ddf4:	2c02      	cmp	r4, #2
 800ddf6:	d015      	beq.n	800de24 <__ieee754_atan2+0x114>
 800ddf8:	2c00      	cmp	r4, #0
 800ddfa:	d0a8      	beq.n	800dd4e <__ieee754_atan2+0x3e>
 800ddfc:	a318      	add	r3, pc, #96	@ (adr r3, 800de60 <__ieee754_atan2+0x150>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fa49 	bl	8000298 <__aeabi_dsub>
 800de06:	a318      	add	r3, pc, #96	@ (adr r3, 800de68 <__ieee754_atan2+0x158>)
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	e014      	b.n	800de38 <__ieee754_atan2+0x128>
 800de0e:	a118      	add	r1, pc, #96	@ (adr r1, 800de70 <__ieee754_atan2+0x160>)
 800de10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de14:	e7ec      	b.n	800ddf0 <__ieee754_atan2+0xe0>
 800de16:	2000      	movs	r0, #0
 800de18:	2100      	movs	r1, #0
 800de1a:	e7e9      	b.n	800ddf0 <__ieee754_atan2+0xe0>
 800de1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de20:	4619      	mov	r1, r3
 800de22:	e794      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de24:	a30e      	add	r3, pc, #56	@ (adr r3, 800de60 <__ieee754_atan2+0x150>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 fa35 	bl	8000298 <__aeabi_dsub>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	a10d      	add	r1, pc, #52	@ (adr r1, 800de68 <__ieee754_atan2+0x158>)
 800de34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de38:	f7f2 fa2e 	bl	8000298 <__aeabi_dsub>
 800de3c:	e787      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de3e:	a10a      	add	r1, pc, #40	@ (adr r1, 800de68 <__ieee754_atan2+0x158>)
 800de40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de44:	e783      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de46:	a10c      	add	r1, pc, #48	@ (adr r1, 800de78 <__ieee754_atan2+0x168>)
 800de48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de4c:	e77f      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de4e:	2000      	movs	r0, #0
 800de50:	2100      	movs	r1, #0
 800de52:	e77c      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de54:	a106      	add	r1, pc, #24	@ (adr r1, 800de70 <__ieee754_atan2+0x160>)
 800de56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de5a:	e778      	b.n	800dd4e <__ieee754_atan2+0x3e>
 800de5c:	f3af 8000 	nop.w
 800de60:	33145c07 	.word	0x33145c07
 800de64:	3ca1a626 	.word	0x3ca1a626
 800de68:	54442d18 	.word	0x54442d18
 800de6c:	400921fb 	.word	0x400921fb
 800de70:	54442d18 	.word	0x54442d18
 800de74:	3ff921fb 	.word	0x3ff921fb
 800de78:	54442d18 	.word	0x54442d18
 800de7c:	3fe921fb 	.word	0x3fe921fb
 800de80:	08010dc8 	.word	0x08010dc8
 800de84:	08010db0 	.word	0x08010db0
 800de88:	54442d18 	.word	0x54442d18
 800de8c:	c00921fb 	.word	0xc00921fb
 800de90:	54442d18 	.word	0x54442d18
 800de94:	bff921fb 	.word	0xbff921fb
 800de98:	7ff00000 	.word	0x7ff00000
 800de9c:	00000000 	.word	0x00000000

0800dea0 <atan>:
 800dea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	4bbf      	ldr	r3, [pc, #764]	@ (800e1a8 <atan+0x308>)
 800deaa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800deae:	429e      	cmp	r6, r3
 800deb0:	46ab      	mov	fp, r5
 800deb2:	d918      	bls.n	800dee6 <atan+0x46>
 800deb4:	4bbd      	ldr	r3, [pc, #756]	@ (800e1ac <atan+0x30c>)
 800deb6:	429e      	cmp	r6, r3
 800deb8:	d801      	bhi.n	800debe <atan+0x1e>
 800deba:	d109      	bne.n	800ded0 <atan+0x30>
 800debc:	b144      	cbz	r4, 800ded0 <atan+0x30>
 800debe:	4622      	mov	r2, r4
 800dec0:	462b      	mov	r3, r5
 800dec2:	4620      	mov	r0, r4
 800dec4:	4629      	mov	r1, r5
 800dec6:	f7f2 f9e9 	bl	800029c <__adddf3>
 800deca:	4604      	mov	r4, r0
 800decc:	460d      	mov	r5, r1
 800dece:	e006      	b.n	800dede <atan+0x3e>
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	f340 812b 	ble.w	800e12e <atan+0x28e>
 800ded8:	a597      	add	r5, pc, #604	@ (adr r5, 800e138 <atan+0x298>)
 800deda:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dede:	ec45 4b10 	vmov	d0, r4, r5
 800dee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee6:	4bb2      	ldr	r3, [pc, #712]	@ (800e1b0 <atan+0x310>)
 800dee8:	429e      	cmp	r6, r3
 800deea:	d813      	bhi.n	800df14 <atan+0x74>
 800deec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800def0:	429e      	cmp	r6, r3
 800def2:	d80c      	bhi.n	800df0e <atan+0x6e>
 800def4:	a392      	add	r3, pc, #584	@ (adr r3, 800e140 <atan+0x2a0>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	4620      	mov	r0, r4
 800defc:	4629      	mov	r1, r5
 800defe:	f7f2 f9cd 	bl	800029c <__adddf3>
 800df02:	4bac      	ldr	r3, [pc, #688]	@ (800e1b4 <atan+0x314>)
 800df04:	2200      	movs	r2, #0
 800df06:	f7f2 fe0f 	bl	8000b28 <__aeabi_dcmpgt>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d1e7      	bne.n	800dede <atan+0x3e>
 800df0e:	f04f 3aff 	mov.w	sl, #4294967295
 800df12:	e029      	b.n	800df68 <atan+0xc8>
 800df14:	f000 f95c 	bl	800e1d0 <fabs>
 800df18:	4ba7      	ldr	r3, [pc, #668]	@ (800e1b8 <atan+0x318>)
 800df1a:	429e      	cmp	r6, r3
 800df1c:	ec55 4b10 	vmov	r4, r5, d0
 800df20:	f200 80bc 	bhi.w	800e09c <atan+0x1fc>
 800df24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800df28:	429e      	cmp	r6, r3
 800df2a:	f200 809e 	bhi.w	800e06a <atan+0x1ca>
 800df2e:	4622      	mov	r2, r4
 800df30:	462b      	mov	r3, r5
 800df32:	4620      	mov	r0, r4
 800df34:	4629      	mov	r1, r5
 800df36:	f7f2 f9b1 	bl	800029c <__adddf3>
 800df3a:	4b9e      	ldr	r3, [pc, #632]	@ (800e1b4 <atan+0x314>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	f7f2 f9ab 	bl	8000298 <__aeabi_dsub>
 800df42:	2200      	movs	r2, #0
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 f9a4 	bl	800029c <__adddf3>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fc7e 	bl	800085c <__aeabi_ddiv>
 800df60:	f04f 0a00 	mov.w	sl, #0
 800df64:	4604      	mov	r4, r0
 800df66:	460d      	mov	r5, r1
 800df68:	4622      	mov	r2, r4
 800df6a:	462b      	mov	r3, r5
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	f7f2 fb4a 	bl	8000608 <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4680      	mov	r8, r0
 800df7a:	4689      	mov	r9, r1
 800df7c:	f7f2 fb44 	bl	8000608 <__aeabi_dmul>
 800df80:	a371      	add	r3, pc, #452	@ (adr r3, 800e148 <atan+0x2a8>)
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	4606      	mov	r6, r0
 800df88:	460f      	mov	r7, r1
 800df8a:	f7f2 fb3d 	bl	8000608 <__aeabi_dmul>
 800df8e:	a370      	add	r3, pc, #448	@ (adr r3, 800e150 <atan+0x2b0>)
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	f7f2 f982 	bl	800029c <__adddf3>
 800df98:	4632      	mov	r2, r6
 800df9a:	463b      	mov	r3, r7
 800df9c:	f7f2 fb34 	bl	8000608 <__aeabi_dmul>
 800dfa0:	a36d      	add	r3, pc, #436	@ (adr r3, 800e158 <atan+0x2b8>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	f7f2 f979 	bl	800029c <__adddf3>
 800dfaa:	4632      	mov	r2, r6
 800dfac:	463b      	mov	r3, r7
 800dfae:	f7f2 fb2b 	bl	8000608 <__aeabi_dmul>
 800dfb2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e160 <atan+0x2c0>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	f7f2 f970 	bl	800029c <__adddf3>
 800dfbc:	4632      	mov	r2, r6
 800dfbe:	463b      	mov	r3, r7
 800dfc0:	f7f2 fb22 	bl	8000608 <__aeabi_dmul>
 800dfc4:	a368      	add	r3, pc, #416	@ (adr r3, 800e168 <atan+0x2c8>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	f7f2 f967 	bl	800029c <__adddf3>
 800dfce:	4632      	mov	r2, r6
 800dfd0:	463b      	mov	r3, r7
 800dfd2:	f7f2 fb19 	bl	8000608 <__aeabi_dmul>
 800dfd6:	a366      	add	r3, pc, #408	@ (adr r3, 800e170 <atan+0x2d0>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	f7f2 f95e 	bl	800029c <__adddf3>
 800dfe0:	4642      	mov	r2, r8
 800dfe2:	464b      	mov	r3, r9
 800dfe4:	f7f2 fb10 	bl	8000608 <__aeabi_dmul>
 800dfe8:	a363      	add	r3, pc, #396	@ (adr r3, 800e178 <atan+0x2d8>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	4680      	mov	r8, r0
 800dff0:	4689      	mov	r9, r1
 800dff2:	4630      	mov	r0, r6
 800dff4:	4639      	mov	r1, r7
 800dff6:	f7f2 fb07 	bl	8000608 <__aeabi_dmul>
 800dffa:	a361      	add	r3, pc, #388	@ (adr r3, 800e180 <atan+0x2e0>)
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	f7f2 f94a 	bl	8000298 <__aeabi_dsub>
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	f7f2 fafe 	bl	8000608 <__aeabi_dmul>
 800e00c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e188 <atan+0x2e8>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	f7f2 f941 	bl	8000298 <__aeabi_dsub>
 800e016:	4632      	mov	r2, r6
 800e018:	463b      	mov	r3, r7
 800e01a:	f7f2 faf5 	bl	8000608 <__aeabi_dmul>
 800e01e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e190 <atan+0x2f0>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	f7f2 f938 	bl	8000298 <__aeabi_dsub>
 800e028:	4632      	mov	r2, r6
 800e02a:	463b      	mov	r3, r7
 800e02c:	f7f2 faec 	bl	8000608 <__aeabi_dmul>
 800e030:	a359      	add	r3, pc, #356	@ (adr r3, 800e198 <atan+0x2f8>)
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 f92f 	bl	8000298 <__aeabi_dsub>
 800e03a:	4632      	mov	r2, r6
 800e03c:	463b      	mov	r3, r7
 800e03e:	f7f2 fae3 	bl	8000608 <__aeabi_dmul>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4640      	mov	r0, r8
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 f927 	bl	800029c <__adddf3>
 800e04e:	4622      	mov	r2, r4
 800e050:	462b      	mov	r3, r5
 800e052:	f7f2 fad9 	bl	8000608 <__aeabi_dmul>
 800e056:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	d148      	bne.n	800e0f2 <atan+0x252>
 800e060:	4620      	mov	r0, r4
 800e062:	4629      	mov	r1, r5
 800e064:	f7f2 f918 	bl	8000298 <__aeabi_dsub>
 800e068:	e72f      	b.n	800deca <atan+0x2a>
 800e06a:	4b52      	ldr	r3, [pc, #328]	@ (800e1b4 <atan+0x314>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	f7f2 f911 	bl	8000298 <__aeabi_dsub>
 800e076:	4b4f      	ldr	r3, [pc, #316]	@ (800e1b4 <atan+0x314>)
 800e078:	4606      	mov	r6, r0
 800e07a:	460f      	mov	r7, r1
 800e07c:	2200      	movs	r2, #0
 800e07e:	4620      	mov	r0, r4
 800e080:	4629      	mov	r1, r5
 800e082:	f7f2 f90b 	bl	800029c <__adddf3>
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4630      	mov	r0, r6
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 fbe5 	bl	800085c <__aeabi_ddiv>
 800e092:	f04f 0a01 	mov.w	sl, #1
 800e096:	4604      	mov	r4, r0
 800e098:	460d      	mov	r5, r1
 800e09a:	e765      	b.n	800df68 <atan+0xc8>
 800e09c:	4b47      	ldr	r3, [pc, #284]	@ (800e1bc <atan+0x31c>)
 800e09e:	429e      	cmp	r6, r3
 800e0a0:	d21c      	bcs.n	800e0dc <atan+0x23c>
 800e0a2:	4b47      	ldr	r3, [pc, #284]	@ (800e1c0 <atan+0x320>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	f7f2 f8f5 	bl	8000298 <__aeabi_dsub>
 800e0ae:	4b44      	ldr	r3, [pc, #272]	@ (800e1c0 <atan+0x320>)
 800e0b0:	4606      	mov	r6, r0
 800e0b2:	460f      	mov	r7, r1
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 faa5 	bl	8000608 <__aeabi_dmul>
 800e0be:	4b3d      	ldr	r3, [pc, #244]	@ (800e1b4 <atan+0x314>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f2 f8eb 	bl	800029c <__adddf3>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fbc5 	bl	800085c <__aeabi_ddiv>
 800e0d2:	f04f 0a02 	mov.w	sl, #2
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
 800e0da:	e745      	b.n	800df68 <atan+0xc8>
 800e0dc:	4622      	mov	r2, r4
 800e0de:	462b      	mov	r3, r5
 800e0e0:	4938      	ldr	r1, [pc, #224]	@ (800e1c4 <atan+0x324>)
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	f7f2 fbba 	bl	800085c <__aeabi_ddiv>
 800e0e8:	f04f 0a03 	mov.w	sl, #3
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	e73a      	b.n	800df68 <atan+0xc8>
 800e0f2:	4b35      	ldr	r3, [pc, #212]	@ (800e1c8 <atan+0x328>)
 800e0f4:	4e35      	ldr	r6, [pc, #212]	@ (800e1cc <atan+0x32c>)
 800e0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 f8cb 	bl	8000298 <__aeabi_dsub>
 800e102:	4622      	mov	r2, r4
 800e104:	462b      	mov	r3, r5
 800e106:	f7f2 f8c7 	bl	8000298 <__aeabi_dsub>
 800e10a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e116:	f7f2 f8bf 	bl	8000298 <__aeabi_dsub>
 800e11a:	f1bb 0f00 	cmp.w	fp, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	460d      	mov	r5, r1
 800e122:	f6bf aedc 	bge.w	800dede <atan+0x3e>
 800e126:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e12a:	461d      	mov	r5, r3
 800e12c:	e6d7      	b.n	800dede <atan+0x3e>
 800e12e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e1a0 <atan+0x300>)
 800e130:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e134:	e6d3      	b.n	800dede <atan+0x3e>
 800e136:	bf00      	nop
 800e138:	54442d18 	.word	0x54442d18
 800e13c:	3ff921fb 	.word	0x3ff921fb
 800e140:	8800759c 	.word	0x8800759c
 800e144:	7e37e43c 	.word	0x7e37e43c
 800e148:	e322da11 	.word	0xe322da11
 800e14c:	3f90ad3a 	.word	0x3f90ad3a
 800e150:	24760deb 	.word	0x24760deb
 800e154:	3fa97b4b 	.word	0x3fa97b4b
 800e158:	a0d03d51 	.word	0xa0d03d51
 800e15c:	3fb10d66 	.word	0x3fb10d66
 800e160:	c54c206e 	.word	0xc54c206e
 800e164:	3fb745cd 	.word	0x3fb745cd
 800e168:	920083ff 	.word	0x920083ff
 800e16c:	3fc24924 	.word	0x3fc24924
 800e170:	5555550d 	.word	0x5555550d
 800e174:	3fd55555 	.word	0x3fd55555
 800e178:	2c6a6c2f 	.word	0x2c6a6c2f
 800e17c:	bfa2b444 	.word	0xbfa2b444
 800e180:	52defd9a 	.word	0x52defd9a
 800e184:	3fadde2d 	.word	0x3fadde2d
 800e188:	af749a6d 	.word	0xaf749a6d
 800e18c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e190:	fe231671 	.word	0xfe231671
 800e194:	3fbc71c6 	.word	0x3fbc71c6
 800e198:	9998ebc4 	.word	0x9998ebc4
 800e19c:	3fc99999 	.word	0x3fc99999
 800e1a0:	54442d18 	.word	0x54442d18
 800e1a4:	bff921fb 	.word	0xbff921fb
 800e1a8:	440fffff 	.word	0x440fffff
 800e1ac:	7ff00000 	.word	0x7ff00000
 800e1b0:	3fdbffff 	.word	0x3fdbffff
 800e1b4:	3ff00000 	.word	0x3ff00000
 800e1b8:	3ff2ffff 	.word	0x3ff2ffff
 800e1bc:	40038000 	.word	0x40038000
 800e1c0:	3ff80000 	.word	0x3ff80000
 800e1c4:	bff00000 	.word	0xbff00000
 800e1c8:	08010de0 	.word	0x08010de0
 800e1cc:	08010e00 	.word	0x08010e00

0800e1d0 <fabs>:
 800e1d0:	ec51 0b10 	vmov	r0, r1, d0
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1da:	ec43 2b10 	vmov	d0, r2, r3
 800e1de:	4770      	bx	lr

0800e1e0 <__cvt>:
 800e1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e4:	ec57 6b10 	vmov	r6, r7, d0
 800e1e8:	2f00      	cmp	r7, #0
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	463b      	mov	r3, r7
 800e1f0:	bfbb      	ittet	lt
 800e1f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e1f6:	461f      	movlt	r7, r3
 800e1f8:	2300      	movge	r3, #0
 800e1fa:	232d      	movlt	r3, #45	@ 0x2d
 800e1fc:	700b      	strb	r3, [r1, #0]
 800e1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e200:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e204:	4691      	mov	r9, r2
 800e206:	f023 0820 	bic.w	r8, r3, #32
 800e20a:	bfbc      	itt	lt
 800e20c:	4632      	movlt	r2, r6
 800e20e:	4616      	movlt	r6, r2
 800e210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e214:	d005      	beq.n	800e222 <__cvt+0x42>
 800e216:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e21a:	d100      	bne.n	800e21e <__cvt+0x3e>
 800e21c:	3401      	adds	r4, #1
 800e21e:	2102      	movs	r1, #2
 800e220:	e000      	b.n	800e224 <__cvt+0x44>
 800e222:	2103      	movs	r1, #3
 800e224:	ab03      	add	r3, sp, #12
 800e226:	9301      	str	r3, [sp, #4]
 800e228:	ab02      	add	r3, sp, #8
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	ec47 6b10 	vmov	d0, r6, r7
 800e230:	4653      	mov	r3, sl
 800e232:	4622      	mov	r2, r4
 800e234:	f000 ff40 	bl	800f0b8 <_dtoa_r>
 800e238:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e23c:	4605      	mov	r5, r0
 800e23e:	d119      	bne.n	800e274 <__cvt+0x94>
 800e240:	f019 0f01 	tst.w	r9, #1
 800e244:	d00e      	beq.n	800e264 <__cvt+0x84>
 800e246:	eb00 0904 	add.w	r9, r0, r4
 800e24a:	2200      	movs	r2, #0
 800e24c:	2300      	movs	r3, #0
 800e24e:	4630      	mov	r0, r6
 800e250:	4639      	mov	r1, r7
 800e252:	f7f2 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 800e256:	b108      	cbz	r0, 800e25c <__cvt+0x7c>
 800e258:	f8cd 900c 	str.w	r9, [sp, #12]
 800e25c:	2230      	movs	r2, #48	@ 0x30
 800e25e:	9b03      	ldr	r3, [sp, #12]
 800e260:	454b      	cmp	r3, r9
 800e262:	d31e      	bcc.n	800e2a2 <__cvt+0xc2>
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e268:	1b5b      	subs	r3, r3, r5
 800e26a:	4628      	mov	r0, r5
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	b004      	add	sp, #16
 800e270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e274:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e278:	eb00 0904 	add.w	r9, r0, r4
 800e27c:	d1e5      	bne.n	800e24a <__cvt+0x6a>
 800e27e:	7803      	ldrb	r3, [r0, #0]
 800e280:	2b30      	cmp	r3, #48	@ 0x30
 800e282:	d10a      	bne.n	800e29a <__cvt+0xba>
 800e284:	2200      	movs	r2, #0
 800e286:	2300      	movs	r3, #0
 800e288:	4630      	mov	r0, r6
 800e28a:	4639      	mov	r1, r7
 800e28c:	f7f2 fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 800e290:	b918      	cbnz	r0, 800e29a <__cvt+0xba>
 800e292:	f1c4 0401 	rsb	r4, r4, #1
 800e296:	f8ca 4000 	str.w	r4, [sl]
 800e29a:	f8da 3000 	ldr.w	r3, [sl]
 800e29e:	4499      	add	r9, r3
 800e2a0:	e7d3      	b.n	800e24a <__cvt+0x6a>
 800e2a2:	1c59      	adds	r1, r3, #1
 800e2a4:	9103      	str	r1, [sp, #12]
 800e2a6:	701a      	strb	r2, [r3, #0]
 800e2a8:	e7d9      	b.n	800e25e <__cvt+0x7e>

0800e2aa <__exponent>:
 800e2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	bfba      	itte	lt
 800e2b0:	4249      	neglt	r1, r1
 800e2b2:	232d      	movlt	r3, #45	@ 0x2d
 800e2b4:	232b      	movge	r3, #43	@ 0x2b
 800e2b6:	2909      	cmp	r1, #9
 800e2b8:	7002      	strb	r2, [r0, #0]
 800e2ba:	7043      	strb	r3, [r0, #1]
 800e2bc:	dd29      	ble.n	800e312 <__exponent+0x68>
 800e2be:	f10d 0307 	add.w	r3, sp, #7
 800e2c2:	461d      	mov	r5, r3
 800e2c4:	270a      	movs	r7, #10
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e2cc:	fb07 1416 	mls	r4, r7, r6, r1
 800e2d0:	3430      	adds	r4, #48	@ 0x30
 800e2d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	2c63      	cmp	r4, #99	@ 0x63
 800e2da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2de:	4631      	mov	r1, r6
 800e2e0:	dcf1      	bgt.n	800e2c6 <__exponent+0x1c>
 800e2e2:	3130      	adds	r1, #48	@ 0x30
 800e2e4:	1e94      	subs	r4, r2, #2
 800e2e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e2ea:	1c41      	adds	r1, r0, #1
 800e2ec:	4623      	mov	r3, r4
 800e2ee:	42ab      	cmp	r3, r5
 800e2f0:	d30a      	bcc.n	800e308 <__exponent+0x5e>
 800e2f2:	f10d 0309 	add.w	r3, sp, #9
 800e2f6:	1a9b      	subs	r3, r3, r2
 800e2f8:	42ac      	cmp	r4, r5
 800e2fa:	bf88      	it	hi
 800e2fc:	2300      	movhi	r3, #0
 800e2fe:	3302      	adds	r3, #2
 800e300:	4403      	add	r3, r0
 800e302:	1a18      	subs	r0, r3, r0
 800e304:	b003      	add	sp, #12
 800e306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e308:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e30c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e310:	e7ed      	b.n	800e2ee <__exponent+0x44>
 800e312:	2330      	movs	r3, #48	@ 0x30
 800e314:	3130      	adds	r1, #48	@ 0x30
 800e316:	7083      	strb	r3, [r0, #2]
 800e318:	70c1      	strb	r1, [r0, #3]
 800e31a:	1d03      	adds	r3, r0, #4
 800e31c:	e7f1      	b.n	800e302 <__exponent+0x58>
	...

0800e320 <_printf_float>:
 800e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e324:	b08d      	sub	sp, #52	@ 0x34
 800e326:	460c      	mov	r4, r1
 800e328:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e32c:	4616      	mov	r6, r2
 800e32e:	461f      	mov	r7, r3
 800e330:	4605      	mov	r5, r0
 800e332:	f000 fdbf 	bl	800eeb4 <_localeconv_r>
 800e336:	6803      	ldr	r3, [r0, #0]
 800e338:	9304      	str	r3, [sp, #16]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f1 ffa0 	bl	8000280 <strlen>
 800e340:	2300      	movs	r3, #0
 800e342:	930a      	str	r3, [sp, #40]	@ 0x28
 800e344:	f8d8 3000 	ldr.w	r3, [r8]
 800e348:	9005      	str	r0, [sp, #20]
 800e34a:	3307      	adds	r3, #7
 800e34c:	f023 0307 	bic.w	r3, r3, #7
 800e350:	f103 0208 	add.w	r2, r3, #8
 800e354:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e358:	f8d4 b000 	ldr.w	fp, [r4]
 800e35c:	f8c8 2000 	str.w	r2, [r8]
 800e360:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e364:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e368:	9307      	str	r3, [sp, #28]
 800e36a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e36e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e376:	4b9c      	ldr	r3, [pc, #624]	@ (800e5e8 <_printf_float+0x2c8>)
 800e378:	f04f 32ff 	mov.w	r2, #4294967295
 800e37c:	f7f2 fbde 	bl	8000b3c <__aeabi_dcmpun>
 800e380:	bb70      	cbnz	r0, 800e3e0 <_printf_float+0xc0>
 800e382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e386:	4b98      	ldr	r3, [pc, #608]	@ (800e5e8 <_printf_float+0x2c8>)
 800e388:	f04f 32ff 	mov.w	r2, #4294967295
 800e38c:	f7f2 fbb8 	bl	8000b00 <__aeabi_dcmple>
 800e390:	bb30      	cbnz	r0, 800e3e0 <_printf_float+0xc0>
 800e392:	2200      	movs	r2, #0
 800e394:	2300      	movs	r3, #0
 800e396:	4640      	mov	r0, r8
 800e398:	4649      	mov	r1, r9
 800e39a:	f7f2 fba7 	bl	8000aec <__aeabi_dcmplt>
 800e39e:	b110      	cbz	r0, 800e3a6 <_printf_float+0x86>
 800e3a0:	232d      	movs	r3, #45	@ 0x2d
 800e3a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3a6:	4a91      	ldr	r2, [pc, #580]	@ (800e5ec <_printf_float+0x2cc>)
 800e3a8:	4b91      	ldr	r3, [pc, #580]	@ (800e5f0 <_printf_float+0x2d0>)
 800e3aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e3ae:	bf94      	ite	ls
 800e3b0:	4690      	movls	r8, r2
 800e3b2:	4698      	movhi	r8, r3
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	6123      	str	r3, [r4, #16]
 800e3b8:	f02b 0304 	bic.w	r3, fp, #4
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	f04f 0900 	mov.w	r9, #0
 800e3c2:	9700      	str	r7, [sp, #0]
 800e3c4:	4633      	mov	r3, r6
 800e3c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f000 f9d2 	bl	800e774 <_printf_common>
 800e3d0:	3001      	adds	r0, #1
 800e3d2:	f040 808d 	bne.w	800e4f0 <_printf_float+0x1d0>
 800e3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3da:	b00d      	add	sp, #52	@ 0x34
 800e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e0:	4642      	mov	r2, r8
 800e3e2:	464b      	mov	r3, r9
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4649      	mov	r1, r9
 800e3e8:	f7f2 fba8 	bl	8000b3c <__aeabi_dcmpun>
 800e3ec:	b140      	cbz	r0, 800e400 <_printf_float+0xe0>
 800e3ee:	464b      	mov	r3, r9
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bfbc      	itt	lt
 800e3f4:	232d      	movlt	r3, #45	@ 0x2d
 800e3f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e3fa:	4a7e      	ldr	r2, [pc, #504]	@ (800e5f4 <_printf_float+0x2d4>)
 800e3fc:	4b7e      	ldr	r3, [pc, #504]	@ (800e5f8 <_printf_float+0x2d8>)
 800e3fe:	e7d4      	b.n	800e3aa <_printf_float+0x8a>
 800e400:	6863      	ldr	r3, [r4, #4]
 800e402:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e406:	9206      	str	r2, [sp, #24]
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	d13b      	bne.n	800e484 <_printf_float+0x164>
 800e40c:	2306      	movs	r3, #6
 800e40e:	6063      	str	r3, [r4, #4]
 800e410:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e414:	2300      	movs	r3, #0
 800e416:	6022      	str	r2, [r4, #0]
 800e418:	9303      	str	r3, [sp, #12]
 800e41a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e41c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e420:	ab09      	add	r3, sp, #36	@ 0x24
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	6861      	ldr	r1, [r4, #4]
 800e426:	ec49 8b10 	vmov	d0, r8, r9
 800e42a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e42e:	4628      	mov	r0, r5
 800e430:	f7ff fed6 	bl	800e1e0 <__cvt>
 800e434:	9b06      	ldr	r3, [sp, #24]
 800e436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e438:	2b47      	cmp	r3, #71	@ 0x47
 800e43a:	4680      	mov	r8, r0
 800e43c:	d129      	bne.n	800e492 <_printf_float+0x172>
 800e43e:	1cc8      	adds	r0, r1, #3
 800e440:	db02      	blt.n	800e448 <_printf_float+0x128>
 800e442:	6863      	ldr	r3, [r4, #4]
 800e444:	4299      	cmp	r1, r3
 800e446:	dd41      	ble.n	800e4cc <_printf_float+0x1ac>
 800e448:	f1aa 0a02 	sub.w	sl, sl, #2
 800e44c:	fa5f fa8a 	uxtb.w	sl, sl
 800e450:	3901      	subs	r1, #1
 800e452:	4652      	mov	r2, sl
 800e454:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e458:	9109      	str	r1, [sp, #36]	@ 0x24
 800e45a:	f7ff ff26 	bl	800e2aa <__exponent>
 800e45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e460:	1813      	adds	r3, r2, r0
 800e462:	2a01      	cmp	r2, #1
 800e464:	4681      	mov	r9, r0
 800e466:	6123      	str	r3, [r4, #16]
 800e468:	dc02      	bgt.n	800e470 <_printf_float+0x150>
 800e46a:	6822      	ldr	r2, [r4, #0]
 800e46c:	07d2      	lsls	r2, r2, #31
 800e46e:	d501      	bpl.n	800e474 <_printf_float+0x154>
 800e470:	3301      	adds	r3, #1
 800e472:	6123      	str	r3, [r4, #16]
 800e474:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d0a2      	beq.n	800e3c2 <_printf_float+0xa2>
 800e47c:	232d      	movs	r3, #45	@ 0x2d
 800e47e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e482:	e79e      	b.n	800e3c2 <_printf_float+0xa2>
 800e484:	9a06      	ldr	r2, [sp, #24]
 800e486:	2a47      	cmp	r2, #71	@ 0x47
 800e488:	d1c2      	bne.n	800e410 <_printf_float+0xf0>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1c0      	bne.n	800e410 <_printf_float+0xf0>
 800e48e:	2301      	movs	r3, #1
 800e490:	e7bd      	b.n	800e40e <_printf_float+0xee>
 800e492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e496:	d9db      	bls.n	800e450 <_printf_float+0x130>
 800e498:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e49c:	d118      	bne.n	800e4d0 <_printf_float+0x1b0>
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	6863      	ldr	r3, [r4, #4]
 800e4a2:	dd0b      	ble.n	800e4bc <_printf_float+0x19c>
 800e4a4:	6121      	str	r1, [r4, #16]
 800e4a6:	b913      	cbnz	r3, 800e4ae <_printf_float+0x18e>
 800e4a8:	6822      	ldr	r2, [r4, #0]
 800e4aa:	07d0      	lsls	r0, r2, #31
 800e4ac:	d502      	bpl.n	800e4b4 <_printf_float+0x194>
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	440b      	add	r3, r1
 800e4b2:	6123      	str	r3, [r4, #16]
 800e4b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e4b6:	f04f 0900 	mov.w	r9, #0
 800e4ba:	e7db      	b.n	800e474 <_printf_float+0x154>
 800e4bc:	b913      	cbnz	r3, 800e4c4 <_printf_float+0x1a4>
 800e4be:	6822      	ldr	r2, [r4, #0]
 800e4c0:	07d2      	lsls	r2, r2, #31
 800e4c2:	d501      	bpl.n	800e4c8 <_printf_float+0x1a8>
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	e7f4      	b.n	800e4b2 <_printf_float+0x192>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e7f2      	b.n	800e4b2 <_printf_float+0x192>
 800e4cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4d2:	4299      	cmp	r1, r3
 800e4d4:	db05      	blt.n	800e4e2 <_printf_float+0x1c2>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	6121      	str	r1, [r4, #16]
 800e4da:	07d8      	lsls	r0, r3, #31
 800e4dc:	d5ea      	bpl.n	800e4b4 <_printf_float+0x194>
 800e4de:	1c4b      	adds	r3, r1, #1
 800e4e0:	e7e7      	b.n	800e4b2 <_printf_float+0x192>
 800e4e2:	2900      	cmp	r1, #0
 800e4e4:	bfd4      	ite	le
 800e4e6:	f1c1 0202 	rsble	r2, r1, #2
 800e4ea:	2201      	movgt	r2, #1
 800e4ec:	4413      	add	r3, r2
 800e4ee:	e7e0      	b.n	800e4b2 <_printf_float+0x192>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	055a      	lsls	r2, r3, #21
 800e4f4:	d407      	bmi.n	800e506 <_printf_float+0x1e6>
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	47b8      	blx	r7
 800e500:	3001      	adds	r0, #1
 800e502:	d12b      	bne.n	800e55c <_printf_float+0x23c>
 800e504:	e767      	b.n	800e3d6 <_printf_float+0xb6>
 800e506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e50a:	f240 80dd 	bls.w	800e6c8 <_printf_float+0x3a8>
 800e50e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e512:	2200      	movs	r2, #0
 800e514:	2300      	movs	r3, #0
 800e516:	f7f2 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d033      	beq.n	800e586 <_printf_float+0x266>
 800e51e:	4a37      	ldr	r2, [pc, #220]	@ (800e5fc <_printf_float+0x2dc>)
 800e520:	2301      	movs	r3, #1
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	f43f af54 	beq.w	800e3d6 <_printf_float+0xb6>
 800e52e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e532:	4543      	cmp	r3, r8
 800e534:	db02      	blt.n	800e53c <_printf_float+0x21c>
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	07d8      	lsls	r0, r3, #31
 800e53a:	d50f      	bpl.n	800e55c <_printf_float+0x23c>
 800e53c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e540:	4631      	mov	r1, r6
 800e542:	4628      	mov	r0, r5
 800e544:	47b8      	blx	r7
 800e546:	3001      	adds	r0, #1
 800e548:	f43f af45 	beq.w	800e3d6 <_printf_float+0xb6>
 800e54c:	f04f 0900 	mov.w	r9, #0
 800e550:	f108 38ff 	add.w	r8, r8, #4294967295
 800e554:	f104 0a1a 	add.w	sl, r4, #26
 800e558:	45c8      	cmp	r8, r9
 800e55a:	dc09      	bgt.n	800e570 <_printf_float+0x250>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	079b      	lsls	r3, r3, #30
 800e560:	f100 8103 	bmi.w	800e76a <_printf_float+0x44a>
 800e564:	68e0      	ldr	r0, [r4, #12]
 800e566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e568:	4298      	cmp	r0, r3
 800e56a:	bfb8      	it	lt
 800e56c:	4618      	movlt	r0, r3
 800e56e:	e734      	b.n	800e3da <_printf_float+0xba>
 800e570:	2301      	movs	r3, #1
 800e572:	4652      	mov	r2, sl
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	f43f af2b 	beq.w	800e3d6 <_printf_float+0xb6>
 800e580:	f109 0901 	add.w	r9, r9, #1
 800e584:	e7e8      	b.n	800e558 <_printf_float+0x238>
 800e586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e588:	2b00      	cmp	r3, #0
 800e58a:	dc39      	bgt.n	800e600 <_printf_float+0x2e0>
 800e58c:	4a1b      	ldr	r2, [pc, #108]	@ (800e5fc <_printf_float+0x2dc>)
 800e58e:	2301      	movs	r3, #1
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f af1d 	beq.w	800e3d6 <_printf_float+0xb6>
 800e59c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5a0:	ea59 0303 	orrs.w	r3, r9, r3
 800e5a4:	d102      	bne.n	800e5ac <_printf_float+0x28c>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	07d9      	lsls	r1, r3, #31
 800e5aa:	d5d7      	bpl.n	800e55c <_printf_float+0x23c>
 800e5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f43f af0d 	beq.w	800e3d6 <_printf_float+0xb6>
 800e5bc:	f04f 0a00 	mov.w	sl, #0
 800e5c0:	f104 0b1a 	add.w	fp, r4, #26
 800e5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c6:	425b      	negs	r3, r3
 800e5c8:	4553      	cmp	r3, sl
 800e5ca:	dc01      	bgt.n	800e5d0 <_printf_float+0x2b0>
 800e5cc:	464b      	mov	r3, r9
 800e5ce:	e793      	b.n	800e4f8 <_printf_float+0x1d8>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	465a      	mov	r2, fp
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	47b8      	blx	r7
 800e5da:	3001      	adds	r0, #1
 800e5dc:	f43f aefb 	beq.w	800e3d6 <_printf_float+0xb6>
 800e5e0:	f10a 0a01 	add.w	sl, sl, #1
 800e5e4:	e7ee      	b.n	800e5c4 <_printf_float+0x2a4>
 800e5e6:	bf00      	nop
 800e5e8:	7fefffff 	.word	0x7fefffff
 800e5ec:	08010e20 	.word	0x08010e20
 800e5f0:	08010e24 	.word	0x08010e24
 800e5f4:	08010e28 	.word	0x08010e28
 800e5f8:	08010e2c 	.word	0x08010e2c
 800e5fc:	08010e30 	.word	0x08010e30
 800e600:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e602:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e606:	4553      	cmp	r3, sl
 800e608:	bfa8      	it	ge
 800e60a:	4653      	movge	r3, sl
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	4699      	mov	r9, r3
 800e610:	dc36      	bgt.n	800e680 <_printf_float+0x360>
 800e612:	f04f 0b00 	mov.w	fp, #0
 800e616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e61a:	f104 021a 	add.w	r2, r4, #26
 800e61e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e620:	9306      	str	r3, [sp, #24]
 800e622:	eba3 0309 	sub.w	r3, r3, r9
 800e626:	455b      	cmp	r3, fp
 800e628:	dc31      	bgt.n	800e68e <_printf_float+0x36e>
 800e62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e62c:	459a      	cmp	sl, r3
 800e62e:	dc3a      	bgt.n	800e6a6 <_printf_float+0x386>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	07da      	lsls	r2, r3, #31
 800e634:	d437      	bmi.n	800e6a6 <_printf_float+0x386>
 800e636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e638:	ebaa 0903 	sub.w	r9, sl, r3
 800e63c:	9b06      	ldr	r3, [sp, #24]
 800e63e:	ebaa 0303 	sub.w	r3, sl, r3
 800e642:	4599      	cmp	r9, r3
 800e644:	bfa8      	it	ge
 800e646:	4699      	movge	r9, r3
 800e648:	f1b9 0f00 	cmp.w	r9, #0
 800e64c:	dc33      	bgt.n	800e6b6 <_printf_float+0x396>
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e656:	f104 0b1a 	add.w	fp, r4, #26
 800e65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65c:	ebaa 0303 	sub.w	r3, sl, r3
 800e660:	eba3 0309 	sub.w	r3, r3, r9
 800e664:	4543      	cmp	r3, r8
 800e666:	f77f af79 	ble.w	800e55c <_printf_float+0x23c>
 800e66a:	2301      	movs	r3, #1
 800e66c:	465a      	mov	r2, fp
 800e66e:	4631      	mov	r1, r6
 800e670:	4628      	mov	r0, r5
 800e672:	47b8      	blx	r7
 800e674:	3001      	adds	r0, #1
 800e676:	f43f aeae 	beq.w	800e3d6 <_printf_float+0xb6>
 800e67a:	f108 0801 	add.w	r8, r8, #1
 800e67e:	e7ec      	b.n	800e65a <_printf_float+0x33a>
 800e680:	4642      	mov	r2, r8
 800e682:	4631      	mov	r1, r6
 800e684:	4628      	mov	r0, r5
 800e686:	47b8      	blx	r7
 800e688:	3001      	adds	r0, #1
 800e68a:	d1c2      	bne.n	800e612 <_printf_float+0x2f2>
 800e68c:	e6a3      	b.n	800e3d6 <_printf_float+0xb6>
 800e68e:	2301      	movs	r3, #1
 800e690:	4631      	mov	r1, r6
 800e692:	4628      	mov	r0, r5
 800e694:	9206      	str	r2, [sp, #24]
 800e696:	47b8      	blx	r7
 800e698:	3001      	adds	r0, #1
 800e69a:	f43f ae9c 	beq.w	800e3d6 <_printf_float+0xb6>
 800e69e:	9a06      	ldr	r2, [sp, #24]
 800e6a0:	f10b 0b01 	add.w	fp, fp, #1
 800e6a4:	e7bb      	b.n	800e61e <_printf_float+0x2fe>
 800e6a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6aa:	4631      	mov	r1, r6
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	47b8      	blx	r7
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	d1c0      	bne.n	800e636 <_printf_float+0x316>
 800e6b4:	e68f      	b.n	800e3d6 <_printf_float+0xb6>
 800e6b6:	9a06      	ldr	r2, [sp, #24]
 800e6b8:	464b      	mov	r3, r9
 800e6ba:	4442      	add	r2, r8
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4628      	mov	r0, r5
 800e6c0:	47b8      	blx	r7
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d1c3      	bne.n	800e64e <_printf_float+0x32e>
 800e6c6:	e686      	b.n	800e3d6 <_printf_float+0xb6>
 800e6c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6cc:	f1ba 0f01 	cmp.w	sl, #1
 800e6d0:	dc01      	bgt.n	800e6d6 <_printf_float+0x3b6>
 800e6d2:	07db      	lsls	r3, r3, #31
 800e6d4:	d536      	bpl.n	800e744 <_printf_float+0x424>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	4642      	mov	r2, r8
 800e6da:	4631      	mov	r1, r6
 800e6dc:	4628      	mov	r0, r5
 800e6de:	47b8      	blx	r7
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	f43f ae78 	beq.w	800e3d6 <_printf_float+0xb6>
 800e6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b8      	blx	r7
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	f43f ae70 	beq.w	800e3d6 <_printf_float+0xb6>
 800e6f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e702:	f7f2 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e706:	b9c0      	cbnz	r0, 800e73a <_printf_float+0x41a>
 800e708:	4653      	mov	r3, sl
 800e70a:	f108 0201 	add.w	r2, r8, #1
 800e70e:	4631      	mov	r1, r6
 800e710:	4628      	mov	r0, r5
 800e712:	47b8      	blx	r7
 800e714:	3001      	adds	r0, #1
 800e716:	d10c      	bne.n	800e732 <_printf_float+0x412>
 800e718:	e65d      	b.n	800e3d6 <_printf_float+0xb6>
 800e71a:	2301      	movs	r3, #1
 800e71c:	465a      	mov	r2, fp
 800e71e:	4631      	mov	r1, r6
 800e720:	4628      	mov	r0, r5
 800e722:	47b8      	blx	r7
 800e724:	3001      	adds	r0, #1
 800e726:	f43f ae56 	beq.w	800e3d6 <_printf_float+0xb6>
 800e72a:	f108 0801 	add.w	r8, r8, #1
 800e72e:	45d0      	cmp	r8, sl
 800e730:	dbf3      	blt.n	800e71a <_printf_float+0x3fa>
 800e732:	464b      	mov	r3, r9
 800e734:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e738:	e6df      	b.n	800e4fa <_printf_float+0x1da>
 800e73a:	f04f 0800 	mov.w	r8, #0
 800e73e:	f104 0b1a 	add.w	fp, r4, #26
 800e742:	e7f4      	b.n	800e72e <_printf_float+0x40e>
 800e744:	2301      	movs	r3, #1
 800e746:	4642      	mov	r2, r8
 800e748:	e7e1      	b.n	800e70e <_printf_float+0x3ee>
 800e74a:	2301      	movs	r3, #1
 800e74c:	464a      	mov	r2, r9
 800e74e:	4631      	mov	r1, r6
 800e750:	4628      	mov	r0, r5
 800e752:	47b8      	blx	r7
 800e754:	3001      	adds	r0, #1
 800e756:	f43f ae3e 	beq.w	800e3d6 <_printf_float+0xb6>
 800e75a:	f108 0801 	add.w	r8, r8, #1
 800e75e:	68e3      	ldr	r3, [r4, #12]
 800e760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e762:	1a5b      	subs	r3, r3, r1
 800e764:	4543      	cmp	r3, r8
 800e766:	dcf0      	bgt.n	800e74a <_printf_float+0x42a>
 800e768:	e6fc      	b.n	800e564 <_printf_float+0x244>
 800e76a:	f04f 0800 	mov.w	r8, #0
 800e76e:	f104 0919 	add.w	r9, r4, #25
 800e772:	e7f4      	b.n	800e75e <_printf_float+0x43e>

0800e774 <_printf_common>:
 800e774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e778:	4616      	mov	r6, r2
 800e77a:	4698      	mov	r8, r3
 800e77c:	688a      	ldr	r2, [r1, #8]
 800e77e:	690b      	ldr	r3, [r1, #16]
 800e780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e784:	4293      	cmp	r3, r2
 800e786:	bfb8      	it	lt
 800e788:	4613      	movlt	r3, r2
 800e78a:	6033      	str	r3, [r6, #0]
 800e78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e790:	4607      	mov	r7, r0
 800e792:	460c      	mov	r4, r1
 800e794:	b10a      	cbz	r2, 800e79a <_printf_common+0x26>
 800e796:	3301      	adds	r3, #1
 800e798:	6033      	str	r3, [r6, #0]
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	0699      	lsls	r1, r3, #26
 800e79e:	bf42      	ittt	mi
 800e7a0:	6833      	ldrmi	r3, [r6, #0]
 800e7a2:	3302      	addmi	r3, #2
 800e7a4:	6033      	strmi	r3, [r6, #0]
 800e7a6:	6825      	ldr	r5, [r4, #0]
 800e7a8:	f015 0506 	ands.w	r5, r5, #6
 800e7ac:	d106      	bne.n	800e7bc <_printf_common+0x48>
 800e7ae:	f104 0a19 	add.w	sl, r4, #25
 800e7b2:	68e3      	ldr	r3, [r4, #12]
 800e7b4:	6832      	ldr	r2, [r6, #0]
 800e7b6:	1a9b      	subs	r3, r3, r2
 800e7b8:	42ab      	cmp	r3, r5
 800e7ba:	dc26      	bgt.n	800e80a <_printf_common+0x96>
 800e7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7c0:	6822      	ldr	r2, [r4, #0]
 800e7c2:	3b00      	subs	r3, #0
 800e7c4:	bf18      	it	ne
 800e7c6:	2301      	movne	r3, #1
 800e7c8:	0692      	lsls	r2, r2, #26
 800e7ca:	d42b      	bmi.n	800e824 <_printf_common+0xb0>
 800e7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7d0:	4641      	mov	r1, r8
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	47c8      	blx	r9
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	d01e      	beq.n	800e818 <_printf_common+0xa4>
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	6922      	ldr	r2, [r4, #16]
 800e7de:	f003 0306 	and.w	r3, r3, #6
 800e7e2:	2b04      	cmp	r3, #4
 800e7e4:	bf02      	ittt	eq
 800e7e6:	68e5      	ldreq	r5, [r4, #12]
 800e7e8:	6833      	ldreq	r3, [r6, #0]
 800e7ea:	1aed      	subeq	r5, r5, r3
 800e7ec:	68a3      	ldr	r3, [r4, #8]
 800e7ee:	bf0c      	ite	eq
 800e7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7f4:	2500      	movne	r5, #0
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	bfc4      	itt	gt
 800e7fa:	1a9b      	subgt	r3, r3, r2
 800e7fc:	18ed      	addgt	r5, r5, r3
 800e7fe:	2600      	movs	r6, #0
 800e800:	341a      	adds	r4, #26
 800e802:	42b5      	cmp	r5, r6
 800e804:	d11a      	bne.n	800e83c <_printf_common+0xc8>
 800e806:	2000      	movs	r0, #0
 800e808:	e008      	b.n	800e81c <_printf_common+0xa8>
 800e80a:	2301      	movs	r3, #1
 800e80c:	4652      	mov	r2, sl
 800e80e:	4641      	mov	r1, r8
 800e810:	4638      	mov	r0, r7
 800e812:	47c8      	blx	r9
 800e814:	3001      	adds	r0, #1
 800e816:	d103      	bne.n	800e820 <_printf_common+0xac>
 800e818:	f04f 30ff 	mov.w	r0, #4294967295
 800e81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e820:	3501      	adds	r5, #1
 800e822:	e7c6      	b.n	800e7b2 <_printf_common+0x3e>
 800e824:	18e1      	adds	r1, r4, r3
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	2030      	movs	r0, #48	@ 0x30
 800e82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e82e:	4422      	add	r2, r4
 800e830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e838:	3302      	adds	r3, #2
 800e83a:	e7c7      	b.n	800e7cc <_printf_common+0x58>
 800e83c:	2301      	movs	r3, #1
 800e83e:	4622      	mov	r2, r4
 800e840:	4641      	mov	r1, r8
 800e842:	4638      	mov	r0, r7
 800e844:	47c8      	blx	r9
 800e846:	3001      	adds	r0, #1
 800e848:	d0e6      	beq.n	800e818 <_printf_common+0xa4>
 800e84a:	3601      	adds	r6, #1
 800e84c:	e7d9      	b.n	800e802 <_printf_common+0x8e>
	...

0800e850 <_printf_i>:
 800e850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e854:	7e0f      	ldrb	r7, [r1, #24]
 800e856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e858:	2f78      	cmp	r7, #120	@ 0x78
 800e85a:	4691      	mov	r9, r2
 800e85c:	4680      	mov	r8, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	469a      	mov	sl, r3
 800e862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e866:	d807      	bhi.n	800e878 <_printf_i+0x28>
 800e868:	2f62      	cmp	r7, #98	@ 0x62
 800e86a:	d80a      	bhi.n	800e882 <_printf_i+0x32>
 800e86c:	2f00      	cmp	r7, #0
 800e86e:	f000 80d2 	beq.w	800ea16 <_printf_i+0x1c6>
 800e872:	2f58      	cmp	r7, #88	@ 0x58
 800e874:	f000 80b9 	beq.w	800e9ea <_printf_i+0x19a>
 800e878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e880:	e03a      	b.n	800e8f8 <_printf_i+0xa8>
 800e882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e886:	2b15      	cmp	r3, #21
 800e888:	d8f6      	bhi.n	800e878 <_printf_i+0x28>
 800e88a:	a101      	add	r1, pc, #4	@ (adr r1, 800e890 <_printf_i+0x40>)
 800e88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e890:	0800e8e9 	.word	0x0800e8e9
 800e894:	0800e8fd 	.word	0x0800e8fd
 800e898:	0800e879 	.word	0x0800e879
 800e89c:	0800e879 	.word	0x0800e879
 800e8a0:	0800e879 	.word	0x0800e879
 800e8a4:	0800e879 	.word	0x0800e879
 800e8a8:	0800e8fd 	.word	0x0800e8fd
 800e8ac:	0800e879 	.word	0x0800e879
 800e8b0:	0800e879 	.word	0x0800e879
 800e8b4:	0800e879 	.word	0x0800e879
 800e8b8:	0800e879 	.word	0x0800e879
 800e8bc:	0800e9fd 	.word	0x0800e9fd
 800e8c0:	0800e927 	.word	0x0800e927
 800e8c4:	0800e9b7 	.word	0x0800e9b7
 800e8c8:	0800e879 	.word	0x0800e879
 800e8cc:	0800e879 	.word	0x0800e879
 800e8d0:	0800ea1f 	.word	0x0800ea1f
 800e8d4:	0800e879 	.word	0x0800e879
 800e8d8:	0800e927 	.word	0x0800e927
 800e8dc:	0800e879 	.word	0x0800e879
 800e8e0:	0800e879 	.word	0x0800e879
 800e8e4:	0800e9bf 	.word	0x0800e9bf
 800e8e8:	6833      	ldr	r3, [r6, #0]
 800e8ea:	1d1a      	adds	r2, r3, #4
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6032      	str	r2, [r6, #0]
 800e8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e09d      	b.n	800ea38 <_printf_i+0x1e8>
 800e8fc:	6833      	ldr	r3, [r6, #0]
 800e8fe:	6820      	ldr	r0, [r4, #0]
 800e900:	1d19      	adds	r1, r3, #4
 800e902:	6031      	str	r1, [r6, #0]
 800e904:	0606      	lsls	r6, r0, #24
 800e906:	d501      	bpl.n	800e90c <_printf_i+0xbc>
 800e908:	681d      	ldr	r5, [r3, #0]
 800e90a:	e003      	b.n	800e914 <_printf_i+0xc4>
 800e90c:	0645      	lsls	r5, r0, #25
 800e90e:	d5fb      	bpl.n	800e908 <_printf_i+0xb8>
 800e910:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e914:	2d00      	cmp	r5, #0
 800e916:	da03      	bge.n	800e920 <_printf_i+0xd0>
 800e918:	232d      	movs	r3, #45	@ 0x2d
 800e91a:	426d      	negs	r5, r5
 800e91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e920:	4859      	ldr	r0, [pc, #356]	@ (800ea88 <_printf_i+0x238>)
 800e922:	230a      	movs	r3, #10
 800e924:	e011      	b.n	800e94a <_printf_i+0xfa>
 800e926:	6821      	ldr	r1, [r4, #0]
 800e928:	6833      	ldr	r3, [r6, #0]
 800e92a:	0608      	lsls	r0, r1, #24
 800e92c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e930:	d402      	bmi.n	800e938 <_printf_i+0xe8>
 800e932:	0649      	lsls	r1, r1, #25
 800e934:	bf48      	it	mi
 800e936:	b2ad      	uxthmi	r5, r5
 800e938:	2f6f      	cmp	r7, #111	@ 0x6f
 800e93a:	4853      	ldr	r0, [pc, #332]	@ (800ea88 <_printf_i+0x238>)
 800e93c:	6033      	str	r3, [r6, #0]
 800e93e:	bf14      	ite	ne
 800e940:	230a      	movne	r3, #10
 800e942:	2308      	moveq	r3, #8
 800e944:	2100      	movs	r1, #0
 800e946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e94a:	6866      	ldr	r6, [r4, #4]
 800e94c:	60a6      	str	r6, [r4, #8]
 800e94e:	2e00      	cmp	r6, #0
 800e950:	bfa2      	ittt	ge
 800e952:	6821      	ldrge	r1, [r4, #0]
 800e954:	f021 0104 	bicge.w	r1, r1, #4
 800e958:	6021      	strge	r1, [r4, #0]
 800e95a:	b90d      	cbnz	r5, 800e960 <_printf_i+0x110>
 800e95c:	2e00      	cmp	r6, #0
 800e95e:	d04b      	beq.n	800e9f8 <_printf_i+0x1a8>
 800e960:	4616      	mov	r6, r2
 800e962:	fbb5 f1f3 	udiv	r1, r5, r3
 800e966:	fb03 5711 	mls	r7, r3, r1, r5
 800e96a:	5dc7      	ldrb	r7, [r0, r7]
 800e96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e970:	462f      	mov	r7, r5
 800e972:	42bb      	cmp	r3, r7
 800e974:	460d      	mov	r5, r1
 800e976:	d9f4      	bls.n	800e962 <_printf_i+0x112>
 800e978:	2b08      	cmp	r3, #8
 800e97a:	d10b      	bne.n	800e994 <_printf_i+0x144>
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	07df      	lsls	r7, r3, #31
 800e980:	d508      	bpl.n	800e994 <_printf_i+0x144>
 800e982:	6923      	ldr	r3, [r4, #16]
 800e984:	6861      	ldr	r1, [r4, #4]
 800e986:	4299      	cmp	r1, r3
 800e988:	bfde      	ittt	le
 800e98a:	2330      	movle	r3, #48	@ 0x30
 800e98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e990:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e994:	1b92      	subs	r2, r2, r6
 800e996:	6122      	str	r2, [r4, #16]
 800e998:	f8cd a000 	str.w	sl, [sp]
 800e99c:	464b      	mov	r3, r9
 800e99e:	aa03      	add	r2, sp, #12
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	f7ff fee6 	bl	800e774 <_printf_common>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	d14a      	bne.n	800ea42 <_printf_i+0x1f2>
 800e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b0:	b004      	add	sp, #16
 800e9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	f043 0320 	orr.w	r3, r3, #32
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	4833      	ldr	r0, [pc, #204]	@ (800ea8c <_printf_i+0x23c>)
 800e9c0:	2778      	movs	r7, #120	@ 0x78
 800e9c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	6831      	ldr	r1, [r6, #0]
 800e9ca:	061f      	lsls	r7, r3, #24
 800e9cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9d0:	d402      	bmi.n	800e9d8 <_printf_i+0x188>
 800e9d2:	065f      	lsls	r7, r3, #25
 800e9d4:	bf48      	it	mi
 800e9d6:	b2ad      	uxthmi	r5, r5
 800e9d8:	6031      	str	r1, [r6, #0]
 800e9da:	07d9      	lsls	r1, r3, #31
 800e9dc:	bf44      	itt	mi
 800e9de:	f043 0320 	orrmi.w	r3, r3, #32
 800e9e2:	6023      	strmi	r3, [r4, #0]
 800e9e4:	b11d      	cbz	r5, 800e9ee <_printf_i+0x19e>
 800e9e6:	2310      	movs	r3, #16
 800e9e8:	e7ac      	b.n	800e944 <_printf_i+0xf4>
 800e9ea:	4827      	ldr	r0, [pc, #156]	@ (800ea88 <_printf_i+0x238>)
 800e9ec:	e7e9      	b.n	800e9c2 <_printf_i+0x172>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	f023 0320 	bic.w	r3, r3, #32
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	e7f6      	b.n	800e9e6 <_printf_i+0x196>
 800e9f8:	4616      	mov	r6, r2
 800e9fa:	e7bd      	b.n	800e978 <_printf_i+0x128>
 800e9fc:	6833      	ldr	r3, [r6, #0]
 800e9fe:	6825      	ldr	r5, [r4, #0]
 800ea00:	6961      	ldr	r1, [r4, #20]
 800ea02:	1d18      	adds	r0, r3, #4
 800ea04:	6030      	str	r0, [r6, #0]
 800ea06:	062e      	lsls	r6, r5, #24
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	d501      	bpl.n	800ea10 <_printf_i+0x1c0>
 800ea0c:	6019      	str	r1, [r3, #0]
 800ea0e:	e002      	b.n	800ea16 <_printf_i+0x1c6>
 800ea10:	0668      	lsls	r0, r5, #25
 800ea12:	d5fb      	bpl.n	800ea0c <_printf_i+0x1bc>
 800ea14:	8019      	strh	r1, [r3, #0]
 800ea16:	2300      	movs	r3, #0
 800ea18:	6123      	str	r3, [r4, #16]
 800ea1a:	4616      	mov	r6, r2
 800ea1c:	e7bc      	b.n	800e998 <_printf_i+0x148>
 800ea1e:	6833      	ldr	r3, [r6, #0]
 800ea20:	1d1a      	adds	r2, r3, #4
 800ea22:	6032      	str	r2, [r6, #0]
 800ea24:	681e      	ldr	r6, [r3, #0]
 800ea26:	6862      	ldr	r2, [r4, #4]
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f7f1 fbd8 	bl	80001e0 <memchr>
 800ea30:	b108      	cbz	r0, 800ea36 <_printf_i+0x1e6>
 800ea32:	1b80      	subs	r0, r0, r6
 800ea34:	6060      	str	r0, [r4, #4]
 800ea36:	6863      	ldr	r3, [r4, #4]
 800ea38:	6123      	str	r3, [r4, #16]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea40:	e7aa      	b.n	800e998 <_printf_i+0x148>
 800ea42:	6923      	ldr	r3, [r4, #16]
 800ea44:	4632      	mov	r2, r6
 800ea46:	4649      	mov	r1, r9
 800ea48:	4640      	mov	r0, r8
 800ea4a:	47d0      	blx	sl
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	d0ad      	beq.n	800e9ac <_printf_i+0x15c>
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	079b      	lsls	r3, r3, #30
 800ea54:	d413      	bmi.n	800ea7e <_printf_i+0x22e>
 800ea56:	68e0      	ldr	r0, [r4, #12]
 800ea58:	9b03      	ldr	r3, [sp, #12]
 800ea5a:	4298      	cmp	r0, r3
 800ea5c:	bfb8      	it	lt
 800ea5e:	4618      	movlt	r0, r3
 800ea60:	e7a6      	b.n	800e9b0 <_printf_i+0x160>
 800ea62:	2301      	movs	r3, #1
 800ea64:	4632      	mov	r2, r6
 800ea66:	4649      	mov	r1, r9
 800ea68:	4640      	mov	r0, r8
 800ea6a:	47d0      	blx	sl
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d09d      	beq.n	800e9ac <_printf_i+0x15c>
 800ea70:	3501      	adds	r5, #1
 800ea72:	68e3      	ldr	r3, [r4, #12]
 800ea74:	9903      	ldr	r1, [sp, #12]
 800ea76:	1a5b      	subs	r3, r3, r1
 800ea78:	42ab      	cmp	r3, r5
 800ea7a:	dcf2      	bgt.n	800ea62 <_printf_i+0x212>
 800ea7c:	e7eb      	b.n	800ea56 <_printf_i+0x206>
 800ea7e:	2500      	movs	r5, #0
 800ea80:	f104 0619 	add.w	r6, r4, #25
 800ea84:	e7f5      	b.n	800ea72 <_printf_i+0x222>
 800ea86:	bf00      	nop
 800ea88:	08010e32 	.word	0x08010e32
 800ea8c:	08010e43 	.word	0x08010e43

0800ea90 <std>:
 800ea90:	2300      	movs	r3, #0
 800ea92:	b510      	push	{r4, lr}
 800ea94:	4604      	mov	r4, r0
 800ea96:	e9c0 3300 	strd	r3, r3, [r0]
 800ea9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea9e:	6083      	str	r3, [r0, #8]
 800eaa0:	8181      	strh	r1, [r0, #12]
 800eaa2:	6643      	str	r3, [r0, #100]	@ 0x64
 800eaa4:	81c2      	strh	r2, [r0, #14]
 800eaa6:	6183      	str	r3, [r0, #24]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	2208      	movs	r2, #8
 800eaac:	305c      	adds	r0, #92	@ 0x5c
 800eaae:	f000 f9f9 	bl	800eea4 <memset>
 800eab2:	4b0d      	ldr	r3, [pc, #52]	@ (800eae8 <std+0x58>)
 800eab4:	6263      	str	r3, [r4, #36]	@ 0x24
 800eab6:	4b0d      	ldr	r3, [pc, #52]	@ (800eaec <std+0x5c>)
 800eab8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eaba:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf0 <std+0x60>)
 800eabc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eabe:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf4 <std+0x64>)
 800eac0:	6323      	str	r3, [r4, #48]	@ 0x30
 800eac2:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf8 <std+0x68>)
 800eac4:	6224      	str	r4, [r4, #32]
 800eac6:	429c      	cmp	r4, r3
 800eac8:	d006      	beq.n	800ead8 <std+0x48>
 800eaca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eace:	4294      	cmp	r4, r2
 800ead0:	d002      	beq.n	800ead8 <std+0x48>
 800ead2:	33d0      	adds	r3, #208	@ 0xd0
 800ead4:	429c      	cmp	r4, r3
 800ead6:	d105      	bne.n	800eae4 <std+0x54>
 800ead8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae0:	f000 ba5c 	b.w	800ef9c <__retarget_lock_init_recursive>
 800eae4:	bd10      	pop	{r4, pc}
 800eae6:	bf00      	nop
 800eae8:	0800ecf5 	.word	0x0800ecf5
 800eaec:	0800ed17 	.word	0x0800ed17
 800eaf0:	0800ed4f 	.word	0x0800ed4f
 800eaf4:	0800ed73 	.word	0x0800ed73
 800eaf8:	200020cc 	.word	0x200020cc

0800eafc <stdio_exit_handler>:
 800eafc:	4a02      	ldr	r2, [pc, #8]	@ (800eb08 <stdio_exit_handler+0xc>)
 800eafe:	4903      	ldr	r1, [pc, #12]	@ (800eb0c <stdio_exit_handler+0x10>)
 800eb00:	4803      	ldr	r0, [pc, #12]	@ (800eb10 <stdio_exit_handler+0x14>)
 800eb02:	f000 b869 	b.w	800ebd8 <_fwalk_sglue>
 800eb06:	bf00      	nop
 800eb08:	20000110 	.word	0x20000110
 800eb0c:	080108d1 	.word	0x080108d1
 800eb10:	20000120 	.word	0x20000120

0800eb14 <cleanup_stdio>:
 800eb14:	6841      	ldr	r1, [r0, #4]
 800eb16:	4b0c      	ldr	r3, [pc, #48]	@ (800eb48 <cleanup_stdio+0x34>)
 800eb18:	4299      	cmp	r1, r3
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	d001      	beq.n	800eb24 <cleanup_stdio+0x10>
 800eb20:	f001 fed6 	bl	80108d0 <_fflush_r>
 800eb24:	68a1      	ldr	r1, [r4, #8]
 800eb26:	4b09      	ldr	r3, [pc, #36]	@ (800eb4c <cleanup_stdio+0x38>)
 800eb28:	4299      	cmp	r1, r3
 800eb2a:	d002      	beq.n	800eb32 <cleanup_stdio+0x1e>
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f001 fecf 	bl	80108d0 <_fflush_r>
 800eb32:	68e1      	ldr	r1, [r4, #12]
 800eb34:	4b06      	ldr	r3, [pc, #24]	@ (800eb50 <cleanup_stdio+0x3c>)
 800eb36:	4299      	cmp	r1, r3
 800eb38:	d004      	beq.n	800eb44 <cleanup_stdio+0x30>
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb40:	f001 bec6 	b.w	80108d0 <_fflush_r>
 800eb44:	bd10      	pop	{r4, pc}
 800eb46:	bf00      	nop
 800eb48:	200020cc 	.word	0x200020cc
 800eb4c:	20002134 	.word	0x20002134
 800eb50:	2000219c 	.word	0x2000219c

0800eb54 <global_stdio_init.part.0>:
 800eb54:	b510      	push	{r4, lr}
 800eb56:	4b0b      	ldr	r3, [pc, #44]	@ (800eb84 <global_stdio_init.part.0+0x30>)
 800eb58:	4c0b      	ldr	r4, [pc, #44]	@ (800eb88 <global_stdio_init.part.0+0x34>)
 800eb5a:	4a0c      	ldr	r2, [pc, #48]	@ (800eb8c <global_stdio_init.part.0+0x38>)
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	4620      	mov	r0, r4
 800eb60:	2200      	movs	r2, #0
 800eb62:	2104      	movs	r1, #4
 800eb64:	f7ff ff94 	bl	800ea90 <std>
 800eb68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	2109      	movs	r1, #9
 800eb70:	f7ff ff8e 	bl	800ea90 <std>
 800eb74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb78:	2202      	movs	r2, #2
 800eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb7e:	2112      	movs	r1, #18
 800eb80:	f7ff bf86 	b.w	800ea90 <std>
 800eb84:	20002204 	.word	0x20002204
 800eb88:	200020cc 	.word	0x200020cc
 800eb8c:	0800eafd 	.word	0x0800eafd

0800eb90 <__sfp_lock_acquire>:
 800eb90:	4801      	ldr	r0, [pc, #4]	@ (800eb98 <__sfp_lock_acquire+0x8>)
 800eb92:	f000 ba04 	b.w	800ef9e <__retarget_lock_acquire_recursive>
 800eb96:	bf00      	nop
 800eb98:	2000220d 	.word	0x2000220d

0800eb9c <__sfp_lock_release>:
 800eb9c:	4801      	ldr	r0, [pc, #4]	@ (800eba4 <__sfp_lock_release+0x8>)
 800eb9e:	f000 b9ff 	b.w	800efa0 <__retarget_lock_release_recursive>
 800eba2:	bf00      	nop
 800eba4:	2000220d 	.word	0x2000220d

0800eba8 <__sinit>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	4604      	mov	r4, r0
 800ebac:	f7ff fff0 	bl	800eb90 <__sfp_lock_acquire>
 800ebb0:	6a23      	ldr	r3, [r4, #32]
 800ebb2:	b11b      	cbz	r3, 800ebbc <__sinit+0x14>
 800ebb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebb8:	f7ff bff0 	b.w	800eb9c <__sfp_lock_release>
 800ebbc:	4b04      	ldr	r3, [pc, #16]	@ (800ebd0 <__sinit+0x28>)
 800ebbe:	6223      	str	r3, [r4, #32]
 800ebc0:	4b04      	ldr	r3, [pc, #16]	@ (800ebd4 <__sinit+0x2c>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1f5      	bne.n	800ebb4 <__sinit+0xc>
 800ebc8:	f7ff ffc4 	bl	800eb54 <global_stdio_init.part.0>
 800ebcc:	e7f2      	b.n	800ebb4 <__sinit+0xc>
 800ebce:	bf00      	nop
 800ebd0:	0800eb15 	.word	0x0800eb15
 800ebd4:	20002204 	.word	0x20002204

0800ebd8 <_fwalk_sglue>:
 800ebd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebdc:	4607      	mov	r7, r0
 800ebde:	4688      	mov	r8, r1
 800ebe0:	4614      	mov	r4, r2
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebe8:	f1b9 0901 	subs.w	r9, r9, #1
 800ebec:	d505      	bpl.n	800ebfa <_fwalk_sglue+0x22>
 800ebee:	6824      	ldr	r4, [r4, #0]
 800ebf0:	2c00      	cmp	r4, #0
 800ebf2:	d1f7      	bne.n	800ebe4 <_fwalk_sglue+0xc>
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebfa:	89ab      	ldrh	r3, [r5, #12]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d907      	bls.n	800ec10 <_fwalk_sglue+0x38>
 800ec00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec04:	3301      	adds	r3, #1
 800ec06:	d003      	beq.n	800ec10 <_fwalk_sglue+0x38>
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c0      	blx	r8
 800ec0e:	4306      	orrs	r6, r0
 800ec10:	3568      	adds	r5, #104	@ 0x68
 800ec12:	e7e9      	b.n	800ebe8 <_fwalk_sglue+0x10>

0800ec14 <iprintf>:
 800ec14:	b40f      	push	{r0, r1, r2, r3}
 800ec16:	b507      	push	{r0, r1, r2, lr}
 800ec18:	4906      	ldr	r1, [pc, #24]	@ (800ec34 <iprintf+0x20>)
 800ec1a:	ab04      	add	r3, sp, #16
 800ec1c:	6808      	ldr	r0, [r1, #0]
 800ec1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec22:	6881      	ldr	r1, [r0, #8]
 800ec24:	9301      	str	r3, [sp, #4]
 800ec26:	f001 fcb7 	bl	8010598 <_vfiprintf_r>
 800ec2a:	b003      	add	sp, #12
 800ec2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec30:	b004      	add	sp, #16
 800ec32:	4770      	bx	lr
 800ec34:	2000011c 	.word	0x2000011c

0800ec38 <_puts_r>:
 800ec38:	6a03      	ldr	r3, [r0, #32]
 800ec3a:	b570      	push	{r4, r5, r6, lr}
 800ec3c:	6884      	ldr	r4, [r0, #8]
 800ec3e:	4605      	mov	r5, r0
 800ec40:	460e      	mov	r6, r1
 800ec42:	b90b      	cbnz	r3, 800ec48 <_puts_r+0x10>
 800ec44:	f7ff ffb0 	bl	800eba8 <__sinit>
 800ec48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec4a:	07db      	lsls	r3, r3, #31
 800ec4c:	d405      	bmi.n	800ec5a <_puts_r+0x22>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	0598      	lsls	r0, r3, #22
 800ec52:	d402      	bmi.n	800ec5a <_puts_r+0x22>
 800ec54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec56:	f000 f9a2 	bl	800ef9e <__retarget_lock_acquire_recursive>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	0719      	lsls	r1, r3, #28
 800ec5e:	d502      	bpl.n	800ec66 <_puts_r+0x2e>
 800ec60:	6923      	ldr	r3, [r4, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d135      	bne.n	800ecd2 <_puts_r+0x9a>
 800ec66:	4621      	mov	r1, r4
 800ec68:	4628      	mov	r0, r5
 800ec6a:	f000 f8c5 	bl	800edf8 <__swsetup_r>
 800ec6e:	b380      	cbz	r0, 800ecd2 <_puts_r+0x9a>
 800ec70:	f04f 35ff 	mov.w	r5, #4294967295
 800ec74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec76:	07da      	lsls	r2, r3, #31
 800ec78:	d405      	bmi.n	800ec86 <_puts_r+0x4e>
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	059b      	lsls	r3, r3, #22
 800ec7e:	d402      	bmi.n	800ec86 <_puts_r+0x4e>
 800ec80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec82:	f000 f98d 	bl	800efa0 <__retarget_lock_release_recursive>
 800ec86:	4628      	mov	r0, r5
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	da04      	bge.n	800ec98 <_puts_r+0x60>
 800ec8e:	69a2      	ldr	r2, [r4, #24]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	dc17      	bgt.n	800ecc4 <_puts_r+0x8c>
 800ec94:	290a      	cmp	r1, #10
 800ec96:	d015      	beq.n	800ecc4 <_puts_r+0x8c>
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	6022      	str	r2, [r4, #0]
 800ec9e:	7019      	strb	r1, [r3, #0]
 800eca0:	68a3      	ldr	r3, [r4, #8]
 800eca2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eca6:	3b01      	subs	r3, #1
 800eca8:	60a3      	str	r3, [r4, #8]
 800ecaa:	2900      	cmp	r1, #0
 800ecac:	d1ed      	bne.n	800ec8a <_puts_r+0x52>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	da11      	bge.n	800ecd6 <_puts_r+0x9e>
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	210a      	movs	r1, #10
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	f000 f85f 	bl	800ed7a <__swbuf_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d0d7      	beq.n	800ec70 <_puts_r+0x38>
 800ecc0:	250a      	movs	r5, #10
 800ecc2:	e7d7      	b.n	800ec74 <_puts_r+0x3c>
 800ecc4:	4622      	mov	r2, r4
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f857 	bl	800ed7a <__swbuf_r>
 800eccc:	3001      	adds	r0, #1
 800ecce:	d1e7      	bne.n	800eca0 <_puts_r+0x68>
 800ecd0:	e7ce      	b.n	800ec70 <_puts_r+0x38>
 800ecd2:	3e01      	subs	r6, #1
 800ecd4:	e7e4      	b.n	800eca0 <_puts_r+0x68>
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	6022      	str	r2, [r4, #0]
 800ecdc:	220a      	movs	r2, #10
 800ecde:	701a      	strb	r2, [r3, #0]
 800ece0:	e7ee      	b.n	800ecc0 <_puts_r+0x88>
	...

0800ece4 <puts>:
 800ece4:	4b02      	ldr	r3, [pc, #8]	@ (800ecf0 <puts+0xc>)
 800ece6:	4601      	mov	r1, r0
 800ece8:	6818      	ldr	r0, [r3, #0]
 800ecea:	f7ff bfa5 	b.w	800ec38 <_puts_r>
 800ecee:	bf00      	nop
 800ecf0:	2000011c 	.word	0x2000011c

0800ecf4 <__sread>:
 800ecf4:	b510      	push	{r4, lr}
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfc:	f000 f900 	bl	800ef00 <_read_r>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	bfab      	itete	ge
 800ed04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ed06:	89a3      	ldrhlt	r3, [r4, #12]
 800ed08:	181b      	addge	r3, r3, r0
 800ed0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ed0e:	bfac      	ite	ge
 800ed10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ed12:	81a3      	strhlt	r3, [r4, #12]
 800ed14:	bd10      	pop	{r4, pc}

0800ed16 <__swrite>:
 800ed16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1a:	461f      	mov	r7, r3
 800ed1c:	898b      	ldrh	r3, [r1, #12]
 800ed1e:	05db      	lsls	r3, r3, #23
 800ed20:	4605      	mov	r5, r0
 800ed22:	460c      	mov	r4, r1
 800ed24:	4616      	mov	r6, r2
 800ed26:	d505      	bpl.n	800ed34 <__swrite+0x1e>
 800ed28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed2c:	2302      	movs	r3, #2
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f000 f8d4 	bl	800eedc <_lseek_r>
 800ed34:	89a3      	ldrh	r3, [r4, #12]
 800ed36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed3e:	81a3      	strh	r3, [r4, #12]
 800ed40:	4632      	mov	r2, r6
 800ed42:	463b      	mov	r3, r7
 800ed44:	4628      	mov	r0, r5
 800ed46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4a:	f000 b8eb 	b.w	800ef24 <_write_r>

0800ed4e <__sseek>:
 800ed4e:	b510      	push	{r4, lr}
 800ed50:	460c      	mov	r4, r1
 800ed52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed56:	f000 f8c1 	bl	800eedc <_lseek_r>
 800ed5a:	1c43      	adds	r3, r0, #1
 800ed5c:	89a3      	ldrh	r3, [r4, #12]
 800ed5e:	bf15      	itete	ne
 800ed60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ed62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ed66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ed6a:	81a3      	strheq	r3, [r4, #12]
 800ed6c:	bf18      	it	ne
 800ed6e:	81a3      	strhne	r3, [r4, #12]
 800ed70:	bd10      	pop	{r4, pc}

0800ed72 <__sclose>:
 800ed72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed76:	f000 b8a1 	b.w	800eebc <_close_r>

0800ed7a <__swbuf_r>:
 800ed7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7c:	460e      	mov	r6, r1
 800ed7e:	4614      	mov	r4, r2
 800ed80:	4605      	mov	r5, r0
 800ed82:	b118      	cbz	r0, 800ed8c <__swbuf_r+0x12>
 800ed84:	6a03      	ldr	r3, [r0, #32]
 800ed86:	b90b      	cbnz	r3, 800ed8c <__swbuf_r+0x12>
 800ed88:	f7ff ff0e 	bl	800eba8 <__sinit>
 800ed8c:	69a3      	ldr	r3, [r4, #24]
 800ed8e:	60a3      	str	r3, [r4, #8]
 800ed90:	89a3      	ldrh	r3, [r4, #12]
 800ed92:	071a      	lsls	r2, r3, #28
 800ed94:	d501      	bpl.n	800ed9a <__swbuf_r+0x20>
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	b943      	cbnz	r3, 800edac <__swbuf_r+0x32>
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	f000 f82b 	bl	800edf8 <__swsetup_r>
 800eda2:	b118      	cbz	r0, 800edac <__swbuf_r+0x32>
 800eda4:	f04f 37ff 	mov.w	r7, #4294967295
 800eda8:	4638      	mov	r0, r7
 800edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	6922      	ldr	r2, [r4, #16]
 800edb0:	1a98      	subs	r0, r3, r2
 800edb2:	6963      	ldr	r3, [r4, #20]
 800edb4:	b2f6      	uxtb	r6, r6
 800edb6:	4283      	cmp	r3, r0
 800edb8:	4637      	mov	r7, r6
 800edba:	dc05      	bgt.n	800edc8 <__swbuf_r+0x4e>
 800edbc:	4621      	mov	r1, r4
 800edbe:	4628      	mov	r0, r5
 800edc0:	f001 fd86 	bl	80108d0 <_fflush_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d1ed      	bne.n	800eda4 <__swbuf_r+0x2a>
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	3b01      	subs	r3, #1
 800edcc:	60a3      	str	r3, [r4, #8]
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	1c5a      	adds	r2, r3, #1
 800edd2:	6022      	str	r2, [r4, #0]
 800edd4:	701e      	strb	r6, [r3, #0]
 800edd6:	6962      	ldr	r2, [r4, #20]
 800edd8:	1c43      	adds	r3, r0, #1
 800edda:	429a      	cmp	r2, r3
 800eddc:	d004      	beq.n	800ede8 <__swbuf_r+0x6e>
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	07db      	lsls	r3, r3, #31
 800ede2:	d5e1      	bpl.n	800eda8 <__swbuf_r+0x2e>
 800ede4:	2e0a      	cmp	r6, #10
 800ede6:	d1df      	bne.n	800eda8 <__swbuf_r+0x2e>
 800ede8:	4621      	mov	r1, r4
 800edea:	4628      	mov	r0, r5
 800edec:	f001 fd70 	bl	80108d0 <_fflush_r>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d0d9      	beq.n	800eda8 <__swbuf_r+0x2e>
 800edf4:	e7d6      	b.n	800eda4 <__swbuf_r+0x2a>
	...

0800edf8 <__swsetup_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4b29      	ldr	r3, [pc, #164]	@ (800eea0 <__swsetup_r+0xa8>)
 800edfc:	4605      	mov	r5, r0
 800edfe:	6818      	ldr	r0, [r3, #0]
 800ee00:	460c      	mov	r4, r1
 800ee02:	b118      	cbz	r0, 800ee0c <__swsetup_r+0x14>
 800ee04:	6a03      	ldr	r3, [r0, #32]
 800ee06:	b90b      	cbnz	r3, 800ee0c <__swsetup_r+0x14>
 800ee08:	f7ff fece 	bl	800eba8 <__sinit>
 800ee0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee10:	0719      	lsls	r1, r3, #28
 800ee12:	d422      	bmi.n	800ee5a <__swsetup_r+0x62>
 800ee14:	06da      	lsls	r2, r3, #27
 800ee16:	d407      	bmi.n	800ee28 <__swsetup_r+0x30>
 800ee18:	2209      	movs	r2, #9
 800ee1a:	602a      	str	r2, [r5, #0]
 800ee1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee20:	81a3      	strh	r3, [r4, #12]
 800ee22:	f04f 30ff 	mov.w	r0, #4294967295
 800ee26:	e033      	b.n	800ee90 <__swsetup_r+0x98>
 800ee28:	0758      	lsls	r0, r3, #29
 800ee2a:	d512      	bpl.n	800ee52 <__swsetup_r+0x5a>
 800ee2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee2e:	b141      	cbz	r1, 800ee42 <__swsetup_r+0x4a>
 800ee30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee34:	4299      	cmp	r1, r3
 800ee36:	d002      	beq.n	800ee3e <__swsetup_r+0x46>
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f000 ff01 	bl	800fc40 <_free_r>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ee48:	81a3      	strh	r3, [r4, #12]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f043 0308 	orr.w	r3, r3, #8
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	b94b      	cbnz	r3, 800ee72 <__swsetup_r+0x7a>
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ee64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee68:	d003      	beq.n	800ee72 <__swsetup_r+0x7a>
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f001 fd7d 	bl	801096c <__smakebuf_r>
 800ee72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee76:	f013 0201 	ands.w	r2, r3, #1
 800ee7a:	d00a      	beq.n	800ee92 <__swsetup_r+0x9a>
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	60a2      	str	r2, [r4, #8]
 800ee80:	6962      	ldr	r2, [r4, #20]
 800ee82:	4252      	negs	r2, r2
 800ee84:	61a2      	str	r2, [r4, #24]
 800ee86:	6922      	ldr	r2, [r4, #16]
 800ee88:	b942      	cbnz	r2, 800ee9c <__swsetup_r+0xa4>
 800ee8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee8e:	d1c5      	bne.n	800ee1c <__swsetup_r+0x24>
 800ee90:	bd38      	pop	{r3, r4, r5, pc}
 800ee92:	0799      	lsls	r1, r3, #30
 800ee94:	bf58      	it	pl
 800ee96:	6962      	ldrpl	r2, [r4, #20]
 800ee98:	60a2      	str	r2, [r4, #8]
 800ee9a:	e7f4      	b.n	800ee86 <__swsetup_r+0x8e>
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	e7f7      	b.n	800ee90 <__swsetup_r+0x98>
 800eea0:	2000011c 	.word	0x2000011c

0800eea4 <memset>:
 800eea4:	4402      	add	r2, r0
 800eea6:	4603      	mov	r3, r0
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d100      	bne.n	800eeae <memset+0xa>
 800eeac:	4770      	bx	lr
 800eeae:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb2:	e7f9      	b.n	800eea8 <memset+0x4>

0800eeb4 <_localeconv_r>:
 800eeb4:	4800      	ldr	r0, [pc, #0]	@ (800eeb8 <_localeconv_r+0x4>)
 800eeb6:	4770      	bx	lr
 800eeb8:	2000025c 	.word	0x2000025c

0800eebc <_close_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d06      	ldr	r5, [pc, #24]	@ (800eed8 <_close_r+0x1c>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	f7f3 f974 	bl	80021b4 <_close>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_close_r+0x1a>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_close_r+0x1a>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	20002208 	.word	0x20002208

0800eedc <_lseek_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	4d07      	ldr	r5, [pc, #28]	@ (800eefc <_lseek_r+0x20>)
 800eee0:	4604      	mov	r4, r0
 800eee2:	4608      	mov	r0, r1
 800eee4:	4611      	mov	r1, r2
 800eee6:	2200      	movs	r2, #0
 800eee8:	602a      	str	r2, [r5, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	f7f3 f989 	bl	8002202 <_lseek>
 800eef0:	1c43      	adds	r3, r0, #1
 800eef2:	d102      	bne.n	800eefa <_lseek_r+0x1e>
 800eef4:	682b      	ldr	r3, [r5, #0]
 800eef6:	b103      	cbz	r3, 800eefa <_lseek_r+0x1e>
 800eef8:	6023      	str	r3, [r4, #0]
 800eefa:	bd38      	pop	{r3, r4, r5, pc}
 800eefc:	20002208 	.word	0x20002208

0800ef00 <_read_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4d07      	ldr	r5, [pc, #28]	@ (800ef20 <_read_r+0x20>)
 800ef04:	4604      	mov	r4, r0
 800ef06:	4608      	mov	r0, r1
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f7f3 f933 	bl	800217a <_read>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_read_r+0x1e>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_read_r+0x1e>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	20002208 	.word	0x20002208

0800ef24 <_write_r>:
 800ef24:	b538      	push	{r3, r4, r5, lr}
 800ef26:	4d07      	ldr	r5, [pc, #28]	@ (800ef44 <_write_r+0x20>)
 800ef28:	4604      	mov	r4, r0
 800ef2a:	4608      	mov	r0, r1
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	2200      	movs	r2, #0
 800ef30:	602a      	str	r2, [r5, #0]
 800ef32:	461a      	mov	r2, r3
 800ef34:	f7f2 fc02 	bl	800173c <_write>
 800ef38:	1c43      	adds	r3, r0, #1
 800ef3a:	d102      	bne.n	800ef42 <_write_r+0x1e>
 800ef3c:	682b      	ldr	r3, [r5, #0]
 800ef3e:	b103      	cbz	r3, 800ef42 <_write_r+0x1e>
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
 800ef44:	20002208 	.word	0x20002208

0800ef48 <__errno>:
 800ef48:	4b01      	ldr	r3, [pc, #4]	@ (800ef50 <__errno+0x8>)
 800ef4a:	6818      	ldr	r0, [r3, #0]
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	2000011c 	.word	0x2000011c

0800ef54 <__libc_init_array>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	4d0d      	ldr	r5, [pc, #52]	@ (800ef8c <__libc_init_array+0x38>)
 800ef58:	4c0d      	ldr	r4, [pc, #52]	@ (800ef90 <__libc_init_array+0x3c>)
 800ef5a:	1b64      	subs	r4, r4, r5
 800ef5c:	10a4      	asrs	r4, r4, #2
 800ef5e:	2600      	movs	r6, #0
 800ef60:	42a6      	cmp	r6, r4
 800ef62:	d109      	bne.n	800ef78 <__libc_init_array+0x24>
 800ef64:	4d0b      	ldr	r5, [pc, #44]	@ (800ef94 <__libc_init_array+0x40>)
 800ef66:	4c0c      	ldr	r4, [pc, #48]	@ (800ef98 <__libc_init_array+0x44>)
 800ef68:	f001 fe2c 	bl	8010bc4 <_init>
 800ef6c:	1b64      	subs	r4, r4, r5
 800ef6e:	10a4      	asrs	r4, r4, #2
 800ef70:	2600      	movs	r6, #0
 800ef72:	42a6      	cmp	r6, r4
 800ef74:	d105      	bne.n	800ef82 <__libc_init_array+0x2e>
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
 800ef78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef7c:	4798      	blx	r3
 800ef7e:	3601      	adds	r6, #1
 800ef80:	e7ee      	b.n	800ef60 <__libc_init_array+0xc>
 800ef82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef86:	4798      	blx	r3
 800ef88:	3601      	adds	r6, #1
 800ef8a:	e7f2      	b.n	800ef72 <__libc_init_array+0x1e>
 800ef8c:	08011198 	.word	0x08011198
 800ef90:	08011198 	.word	0x08011198
 800ef94:	08011198 	.word	0x08011198
 800ef98:	0801119c 	.word	0x0801119c

0800ef9c <__retarget_lock_init_recursive>:
 800ef9c:	4770      	bx	lr

0800ef9e <__retarget_lock_acquire_recursive>:
 800ef9e:	4770      	bx	lr

0800efa0 <__retarget_lock_release_recursive>:
 800efa0:	4770      	bx	lr

0800efa2 <quorem>:
 800efa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa6:	6903      	ldr	r3, [r0, #16]
 800efa8:	690c      	ldr	r4, [r1, #16]
 800efaa:	42a3      	cmp	r3, r4
 800efac:	4607      	mov	r7, r0
 800efae:	db7e      	blt.n	800f0ae <quorem+0x10c>
 800efb0:	3c01      	subs	r4, #1
 800efb2:	f101 0814 	add.w	r8, r1, #20
 800efb6:	00a3      	lsls	r3, r4, #2
 800efb8:	f100 0514 	add.w	r5, r0, #20
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efcc:	3301      	adds	r3, #1
 800efce:	429a      	cmp	r2, r3
 800efd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800efd8:	d32e      	bcc.n	800f038 <quorem+0x96>
 800efda:	f04f 0a00 	mov.w	sl, #0
 800efde:	46c4      	mov	ip, r8
 800efe0:	46ae      	mov	lr, r5
 800efe2:	46d3      	mov	fp, sl
 800efe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efe8:	b298      	uxth	r0, r3
 800efea:	fb06 a000 	mla	r0, r6, r0, sl
 800efee:	0c02      	lsrs	r2, r0, #16
 800eff0:	0c1b      	lsrs	r3, r3, #16
 800eff2:	fb06 2303 	mla	r3, r6, r3, r2
 800eff6:	f8de 2000 	ldr.w	r2, [lr]
 800effa:	b280      	uxth	r0, r0
 800effc:	b292      	uxth	r2, r2
 800effe:	1a12      	subs	r2, r2, r0
 800f000:	445a      	add	r2, fp
 800f002:	f8de 0000 	ldr.w	r0, [lr]
 800f006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f010:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f014:	b292      	uxth	r2, r2
 800f016:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f01a:	45e1      	cmp	r9, ip
 800f01c:	f84e 2b04 	str.w	r2, [lr], #4
 800f020:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f024:	d2de      	bcs.n	800efe4 <quorem+0x42>
 800f026:	9b00      	ldr	r3, [sp, #0]
 800f028:	58eb      	ldr	r3, [r5, r3]
 800f02a:	b92b      	cbnz	r3, 800f038 <quorem+0x96>
 800f02c:	9b01      	ldr	r3, [sp, #4]
 800f02e:	3b04      	subs	r3, #4
 800f030:	429d      	cmp	r5, r3
 800f032:	461a      	mov	r2, r3
 800f034:	d32f      	bcc.n	800f096 <quorem+0xf4>
 800f036:	613c      	str	r4, [r7, #16]
 800f038:	4638      	mov	r0, r7
 800f03a:	f001 f97b 	bl	8010334 <__mcmp>
 800f03e:	2800      	cmp	r0, #0
 800f040:	db25      	blt.n	800f08e <quorem+0xec>
 800f042:	4629      	mov	r1, r5
 800f044:	2000      	movs	r0, #0
 800f046:	f858 2b04 	ldr.w	r2, [r8], #4
 800f04a:	f8d1 c000 	ldr.w	ip, [r1]
 800f04e:	fa1f fe82 	uxth.w	lr, r2
 800f052:	fa1f f38c 	uxth.w	r3, ip
 800f056:	eba3 030e 	sub.w	r3, r3, lr
 800f05a:	4403      	add	r3, r0
 800f05c:	0c12      	lsrs	r2, r2, #16
 800f05e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f062:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f066:	b29b      	uxth	r3, r3
 800f068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f06c:	45c1      	cmp	r9, r8
 800f06e:	f841 3b04 	str.w	r3, [r1], #4
 800f072:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f076:	d2e6      	bcs.n	800f046 <quorem+0xa4>
 800f078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f07c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f080:	b922      	cbnz	r2, 800f08c <quorem+0xea>
 800f082:	3b04      	subs	r3, #4
 800f084:	429d      	cmp	r5, r3
 800f086:	461a      	mov	r2, r3
 800f088:	d30b      	bcc.n	800f0a2 <quorem+0x100>
 800f08a:	613c      	str	r4, [r7, #16]
 800f08c:	3601      	adds	r6, #1
 800f08e:	4630      	mov	r0, r6
 800f090:	b003      	add	sp, #12
 800f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f096:	6812      	ldr	r2, [r2, #0]
 800f098:	3b04      	subs	r3, #4
 800f09a:	2a00      	cmp	r2, #0
 800f09c:	d1cb      	bne.n	800f036 <quorem+0x94>
 800f09e:	3c01      	subs	r4, #1
 800f0a0:	e7c6      	b.n	800f030 <quorem+0x8e>
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	3b04      	subs	r3, #4
 800f0a6:	2a00      	cmp	r2, #0
 800f0a8:	d1ef      	bne.n	800f08a <quorem+0xe8>
 800f0aa:	3c01      	subs	r4, #1
 800f0ac:	e7ea      	b.n	800f084 <quorem+0xe2>
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	e7ee      	b.n	800f090 <quorem+0xee>
 800f0b2:	0000      	movs	r0, r0
 800f0b4:	0000      	movs	r0, r0
	...

0800f0b8 <_dtoa_r>:
 800f0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0bc:	69c7      	ldr	r7, [r0, #28]
 800f0be:	b099      	sub	sp, #100	@ 0x64
 800f0c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0c4:	ec55 4b10 	vmov	r4, r5, d0
 800f0c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f0ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0cc:	4683      	mov	fp, r0
 800f0ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0d2:	b97f      	cbnz	r7, 800f0f4 <_dtoa_r+0x3c>
 800f0d4:	2010      	movs	r0, #16
 800f0d6:	f000 fdfd 	bl	800fcd4 <malloc>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f0e0:	b920      	cbnz	r0, 800f0ec <_dtoa_r+0x34>
 800f0e2:	4ba7      	ldr	r3, [pc, #668]	@ (800f380 <_dtoa_r+0x2c8>)
 800f0e4:	21ef      	movs	r1, #239	@ 0xef
 800f0e6:	48a7      	ldr	r0, [pc, #668]	@ (800f384 <_dtoa_r+0x2cc>)
 800f0e8:	f001 fcbc 	bl	8010a64 <__assert_func>
 800f0ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0f0:	6007      	str	r7, [r0, #0]
 800f0f2:	60c7      	str	r7, [r0, #12]
 800f0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	b159      	cbz	r1, 800f114 <_dtoa_r+0x5c>
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	604a      	str	r2, [r1, #4]
 800f100:	2301      	movs	r3, #1
 800f102:	4093      	lsls	r3, r2
 800f104:	608b      	str	r3, [r1, #8]
 800f106:	4658      	mov	r0, fp
 800f108:	f000 feda 	bl	800fec0 <_Bfree>
 800f10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	1e2b      	subs	r3, r5, #0
 800f116:	bfb9      	ittee	lt
 800f118:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f11c:	9303      	strlt	r3, [sp, #12]
 800f11e:	2300      	movge	r3, #0
 800f120:	6033      	strge	r3, [r6, #0]
 800f122:	9f03      	ldr	r7, [sp, #12]
 800f124:	4b98      	ldr	r3, [pc, #608]	@ (800f388 <_dtoa_r+0x2d0>)
 800f126:	bfbc      	itt	lt
 800f128:	2201      	movlt	r2, #1
 800f12a:	6032      	strlt	r2, [r6, #0]
 800f12c:	43bb      	bics	r3, r7
 800f12e:	d112      	bne.n	800f156 <_dtoa_r+0x9e>
 800f130:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f132:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f136:	6013      	str	r3, [r2, #0]
 800f138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f13c:	4323      	orrs	r3, r4
 800f13e:	f000 854d 	beq.w	800fbdc <_dtoa_r+0xb24>
 800f142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f144:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f39c <_dtoa_r+0x2e4>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 854f 	beq.w	800fbec <_dtoa_r+0xb34>
 800f14e:	f10a 0303 	add.w	r3, sl, #3
 800f152:	f000 bd49 	b.w	800fbe8 <_dtoa_r+0xb30>
 800f156:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f15a:	2200      	movs	r2, #0
 800f15c:	ec51 0b17 	vmov	r0, r1, d7
 800f160:	2300      	movs	r3, #0
 800f162:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f166:	f7f1 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f16a:	4680      	mov	r8, r0
 800f16c:	b158      	cbz	r0, 800f186 <_dtoa_r+0xce>
 800f16e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f170:	2301      	movs	r3, #1
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f176:	b113      	cbz	r3, 800f17e <_dtoa_r+0xc6>
 800f178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f17a:	4b84      	ldr	r3, [pc, #528]	@ (800f38c <_dtoa_r+0x2d4>)
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f3a0 <_dtoa_r+0x2e8>
 800f182:	f000 bd33 	b.w	800fbec <_dtoa_r+0xb34>
 800f186:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f18a:	aa16      	add	r2, sp, #88	@ 0x58
 800f18c:	a917      	add	r1, sp, #92	@ 0x5c
 800f18e:	4658      	mov	r0, fp
 800f190:	f001 f980 	bl	8010494 <__d2b>
 800f194:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f198:	4681      	mov	r9, r0
 800f19a:	2e00      	cmp	r6, #0
 800f19c:	d077      	beq.n	800f28e <_dtoa_r+0x1d6>
 800f19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f1b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f1b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	4b74      	ldr	r3, [pc, #464]	@ (800f390 <_dtoa_r+0x2d8>)
 800f1be:	f7f1 f86b 	bl	8000298 <__aeabi_dsub>
 800f1c2:	a369      	add	r3, pc, #420	@ (adr r3, 800f368 <_dtoa_r+0x2b0>)
 800f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c8:	f7f1 fa1e 	bl	8000608 <__aeabi_dmul>
 800f1cc:	a368      	add	r3, pc, #416	@ (adr r3, 800f370 <_dtoa_r+0x2b8>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f863 	bl	800029c <__adddf3>
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4630      	mov	r0, r6
 800f1da:	460d      	mov	r5, r1
 800f1dc:	f7f1 f9aa 	bl	8000534 <__aeabi_i2d>
 800f1e0:	a365      	add	r3, pc, #404	@ (adr r3, 800f378 <_dtoa_r+0x2c0>)
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 fa0f 	bl	8000608 <__aeabi_dmul>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f7f1 f853 	bl	800029c <__adddf3>
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	f7f1 fcb5 	bl	8000b68 <__aeabi_d2iz>
 800f1fe:	2200      	movs	r2, #0
 800f200:	4607      	mov	r7, r0
 800f202:	2300      	movs	r3, #0
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 fc70 	bl	8000aec <__aeabi_dcmplt>
 800f20c:	b140      	cbz	r0, 800f220 <_dtoa_r+0x168>
 800f20e:	4638      	mov	r0, r7
 800f210:	f7f1 f990 	bl	8000534 <__aeabi_i2d>
 800f214:	4622      	mov	r2, r4
 800f216:	462b      	mov	r3, r5
 800f218:	f7f1 fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f21c:	b900      	cbnz	r0, 800f220 <_dtoa_r+0x168>
 800f21e:	3f01      	subs	r7, #1
 800f220:	2f16      	cmp	r7, #22
 800f222:	d851      	bhi.n	800f2c8 <_dtoa_r+0x210>
 800f224:	4b5b      	ldr	r3, [pc, #364]	@ (800f394 <_dtoa_r+0x2dc>)
 800f226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f232:	f7f1 fc5b 	bl	8000aec <__aeabi_dcmplt>
 800f236:	2800      	cmp	r0, #0
 800f238:	d048      	beq.n	800f2cc <_dtoa_r+0x214>
 800f23a:	3f01      	subs	r7, #1
 800f23c:	2300      	movs	r3, #0
 800f23e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f240:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f242:	1b9b      	subs	r3, r3, r6
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	bf44      	itt	mi
 800f248:	f1c3 0801 	rsbmi	r8, r3, #1
 800f24c:	2300      	movmi	r3, #0
 800f24e:	9208      	str	r2, [sp, #32]
 800f250:	bf54      	ite	pl
 800f252:	f04f 0800 	movpl.w	r8, #0
 800f256:	9308      	strmi	r3, [sp, #32]
 800f258:	2f00      	cmp	r7, #0
 800f25a:	db39      	blt.n	800f2d0 <_dtoa_r+0x218>
 800f25c:	9b08      	ldr	r3, [sp, #32]
 800f25e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f260:	443b      	add	r3, r7
 800f262:	9308      	str	r3, [sp, #32]
 800f264:	2300      	movs	r3, #0
 800f266:	930a      	str	r3, [sp, #40]	@ 0x28
 800f268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d864      	bhi.n	800f338 <_dtoa_r+0x280>
 800f26e:	2b05      	cmp	r3, #5
 800f270:	bfc4      	itt	gt
 800f272:	3b04      	subgt	r3, #4
 800f274:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f278:	f1a3 0302 	sub.w	r3, r3, #2
 800f27c:	bfcc      	ite	gt
 800f27e:	2400      	movgt	r4, #0
 800f280:	2401      	movle	r4, #1
 800f282:	2b03      	cmp	r3, #3
 800f284:	d863      	bhi.n	800f34e <_dtoa_r+0x296>
 800f286:	e8df f003 	tbb	[pc, r3]
 800f28a:	372a      	.short	0x372a
 800f28c:	5535      	.short	0x5535
 800f28e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f292:	441e      	add	r6, r3
 800f294:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f298:	2b20      	cmp	r3, #32
 800f29a:	bfc1      	itttt	gt
 800f29c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2a0:	409f      	lslgt	r7, r3
 800f2a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f2a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f2aa:	bfd6      	itet	le
 800f2ac:	f1c3 0320 	rsble	r3, r3, #32
 800f2b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f2b4:	fa04 f003 	lslle.w	r0, r4, r3
 800f2b8:	f7f1 f92c 	bl	8000514 <__aeabi_ui2d>
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f2c2:	3e01      	subs	r6, #1
 800f2c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f2c6:	e777      	b.n	800f1b8 <_dtoa_r+0x100>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e7b8      	b.n	800f23e <_dtoa_r+0x186>
 800f2cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f2ce:	e7b7      	b.n	800f240 <_dtoa_r+0x188>
 800f2d0:	427b      	negs	r3, r7
 800f2d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	eba8 0807 	sub.w	r8, r8, r7
 800f2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2dc:	e7c4      	b.n	800f268 <_dtoa_r+0x1b0>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	dc35      	bgt.n	800f354 <_dtoa_r+0x29c>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	9307      	str	r3, [sp, #28]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2f2:	e00b      	b.n	800f30c <_dtoa_r+0x254>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e7f3      	b.n	800f2e0 <_dtoa_r+0x228>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2fe:	18fb      	adds	r3, r7, r3
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	2b01      	cmp	r3, #1
 800f306:	9307      	str	r3, [sp, #28]
 800f308:	bfb8      	it	lt
 800f30a:	2301      	movlt	r3, #1
 800f30c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f310:	2100      	movs	r1, #0
 800f312:	2204      	movs	r2, #4
 800f314:	f102 0514 	add.w	r5, r2, #20
 800f318:	429d      	cmp	r5, r3
 800f31a:	d91f      	bls.n	800f35c <_dtoa_r+0x2a4>
 800f31c:	6041      	str	r1, [r0, #4]
 800f31e:	4658      	mov	r0, fp
 800f320:	f000 fd8e 	bl	800fe40 <_Balloc>
 800f324:	4682      	mov	sl, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d13c      	bne.n	800f3a4 <_dtoa_r+0x2ec>
 800f32a:	4b1b      	ldr	r3, [pc, #108]	@ (800f398 <_dtoa_r+0x2e0>)
 800f32c:	4602      	mov	r2, r0
 800f32e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f332:	e6d8      	b.n	800f0e6 <_dtoa_r+0x2e>
 800f334:	2301      	movs	r3, #1
 800f336:	e7e0      	b.n	800f2fa <_dtoa_r+0x242>
 800f338:	2401      	movs	r4, #1
 800f33a:	2300      	movs	r3, #0
 800f33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f33e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	9307      	str	r3, [sp, #28]
 800f348:	2200      	movs	r2, #0
 800f34a:	2312      	movs	r3, #18
 800f34c:	e7d0      	b.n	800f2f0 <_dtoa_r+0x238>
 800f34e:	2301      	movs	r3, #1
 800f350:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f352:	e7f5      	b.n	800f340 <_dtoa_r+0x288>
 800f354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	9307      	str	r3, [sp, #28]
 800f35a:	e7d7      	b.n	800f30c <_dtoa_r+0x254>
 800f35c:	3101      	adds	r1, #1
 800f35e:	0052      	lsls	r2, r2, #1
 800f360:	e7d8      	b.n	800f314 <_dtoa_r+0x25c>
 800f362:	bf00      	nop
 800f364:	f3af 8000 	nop.w
 800f368:	636f4361 	.word	0x636f4361
 800f36c:	3fd287a7 	.word	0x3fd287a7
 800f370:	8b60c8b3 	.word	0x8b60c8b3
 800f374:	3fc68a28 	.word	0x3fc68a28
 800f378:	509f79fb 	.word	0x509f79fb
 800f37c:	3fd34413 	.word	0x3fd34413
 800f380:	08010e61 	.word	0x08010e61
 800f384:	08010e78 	.word	0x08010e78
 800f388:	7ff00000 	.word	0x7ff00000
 800f38c:	08010e31 	.word	0x08010e31
 800f390:	3ff80000 	.word	0x3ff80000
 800f394:	08010f70 	.word	0x08010f70
 800f398:	08010ed0 	.word	0x08010ed0
 800f39c:	08010e5d 	.word	0x08010e5d
 800f3a0:	08010e30 	.word	0x08010e30
 800f3a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f3a8:	6018      	str	r0, [r3, #0]
 800f3aa:	9b07      	ldr	r3, [sp, #28]
 800f3ac:	2b0e      	cmp	r3, #14
 800f3ae:	f200 80a4 	bhi.w	800f4fa <_dtoa_r+0x442>
 800f3b2:	2c00      	cmp	r4, #0
 800f3b4:	f000 80a1 	beq.w	800f4fa <_dtoa_r+0x442>
 800f3b8:	2f00      	cmp	r7, #0
 800f3ba:	dd33      	ble.n	800f424 <_dtoa_r+0x36c>
 800f3bc:	4bad      	ldr	r3, [pc, #692]	@ (800f674 <_dtoa_r+0x5bc>)
 800f3be:	f007 020f 	and.w	r2, r7, #15
 800f3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3c6:	ed93 7b00 	vldr	d7, [r3]
 800f3ca:	05f8      	lsls	r0, r7, #23
 800f3cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f3d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f3d4:	d516      	bpl.n	800f404 <_dtoa_r+0x34c>
 800f3d6:	4ba8      	ldr	r3, [pc, #672]	@ (800f678 <_dtoa_r+0x5c0>)
 800f3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3e0:	f7f1 fa3c 	bl	800085c <__aeabi_ddiv>
 800f3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e8:	f004 040f 	and.w	r4, r4, #15
 800f3ec:	2603      	movs	r6, #3
 800f3ee:	4da2      	ldr	r5, [pc, #648]	@ (800f678 <_dtoa_r+0x5c0>)
 800f3f0:	b954      	cbnz	r4, 800f408 <_dtoa_r+0x350>
 800f3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fa:	f7f1 fa2f 	bl	800085c <__aeabi_ddiv>
 800f3fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f402:	e028      	b.n	800f456 <_dtoa_r+0x39e>
 800f404:	2602      	movs	r6, #2
 800f406:	e7f2      	b.n	800f3ee <_dtoa_r+0x336>
 800f408:	07e1      	lsls	r1, r4, #31
 800f40a:	d508      	bpl.n	800f41e <_dtoa_r+0x366>
 800f40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f410:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f414:	f7f1 f8f8 	bl	8000608 <__aeabi_dmul>
 800f418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f41c:	3601      	adds	r6, #1
 800f41e:	1064      	asrs	r4, r4, #1
 800f420:	3508      	adds	r5, #8
 800f422:	e7e5      	b.n	800f3f0 <_dtoa_r+0x338>
 800f424:	f000 80d2 	beq.w	800f5cc <_dtoa_r+0x514>
 800f428:	427c      	negs	r4, r7
 800f42a:	4b92      	ldr	r3, [pc, #584]	@ (800f674 <_dtoa_r+0x5bc>)
 800f42c:	4d92      	ldr	r5, [pc, #584]	@ (800f678 <_dtoa_r+0x5c0>)
 800f42e:	f004 020f 	and.w	r2, r4, #15
 800f432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f43e:	f7f1 f8e3 	bl	8000608 <__aeabi_dmul>
 800f442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f446:	1124      	asrs	r4, r4, #4
 800f448:	2300      	movs	r3, #0
 800f44a:	2602      	movs	r6, #2
 800f44c:	2c00      	cmp	r4, #0
 800f44e:	f040 80b2 	bne.w	800f5b6 <_dtoa_r+0x4fe>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1d3      	bne.n	800f3fe <_dtoa_r+0x346>
 800f456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f458:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 80b7 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f462:	4b86      	ldr	r3, [pc, #536]	@ (800f67c <_dtoa_r+0x5c4>)
 800f464:	2200      	movs	r2, #0
 800f466:	4620      	mov	r0, r4
 800f468:	4629      	mov	r1, r5
 800f46a:	f7f1 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800f46e:	2800      	cmp	r0, #0
 800f470:	f000 80ae 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f474:	9b07      	ldr	r3, [sp, #28]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 80aa 	beq.w	800f5d0 <_dtoa_r+0x518>
 800f47c:	9b00      	ldr	r3, [sp, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dd37      	ble.n	800f4f2 <_dtoa_r+0x43a>
 800f482:	1e7b      	subs	r3, r7, #1
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	4620      	mov	r0, r4
 800f488:	4b7d      	ldr	r3, [pc, #500]	@ (800f680 <_dtoa_r+0x5c8>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	4629      	mov	r1, r5
 800f48e:	f7f1 f8bb 	bl	8000608 <__aeabi_dmul>
 800f492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f496:	9c00      	ldr	r4, [sp, #0]
 800f498:	3601      	adds	r6, #1
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7f1 f84a 	bl	8000534 <__aeabi_i2d>
 800f4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4a4:	f7f1 f8b0 	bl	8000608 <__aeabi_dmul>
 800f4a8:	4b76      	ldr	r3, [pc, #472]	@ (800f684 <_dtoa_r+0x5cc>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f7f0 fef6 	bl	800029c <__adddf3>
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	f040 808d 	bne.w	800f5d6 <_dtoa_r+0x51e>
 800f4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c0:	4b71      	ldr	r3, [pc, #452]	@ (800f688 <_dtoa_r+0x5d0>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f7f0 fee8 	bl	8000298 <__aeabi_dsub>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4633      	mov	r3, r6
 800f4d4:	f7f1 fb28 	bl	8000b28 <__aeabi_dcmpgt>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	f040 828b 	bne.w	800f9f4 <_dtoa_r+0x93c>
 800f4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e2:	462a      	mov	r2, r5
 800f4e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f4e8:	f7f1 fb00 	bl	8000aec <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f040 8128 	bne.w	800f742 <_dtoa_r+0x68a>
 800f4f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f4f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f4fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f2c0 815a 	blt.w	800f7b6 <_dtoa_r+0x6fe>
 800f502:	2f0e      	cmp	r7, #14
 800f504:	f300 8157 	bgt.w	800f7b6 <_dtoa_r+0x6fe>
 800f508:	4b5a      	ldr	r3, [pc, #360]	@ (800f674 <_dtoa_r+0x5bc>)
 800f50a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f50e:	ed93 7b00 	vldr	d7, [r3]
 800f512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f514:	2b00      	cmp	r3, #0
 800f516:	ed8d 7b00 	vstr	d7, [sp]
 800f51a:	da03      	bge.n	800f524 <_dtoa_r+0x46c>
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f340 8101 	ble.w	800f726 <_dtoa_r+0x66e>
 800f524:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f528:	4656      	mov	r6, sl
 800f52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f52e:	4620      	mov	r0, r4
 800f530:	4629      	mov	r1, r5
 800f532:	f7f1 f993 	bl	800085c <__aeabi_ddiv>
 800f536:	f7f1 fb17 	bl	8000b68 <__aeabi_d2iz>
 800f53a:	4680      	mov	r8, r0
 800f53c:	f7f0 fffa 	bl	8000534 <__aeabi_i2d>
 800f540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f544:	f7f1 f860 	bl	8000608 <__aeabi_dmul>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4620      	mov	r0, r4
 800f54e:	4629      	mov	r1, r5
 800f550:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f554:	f7f0 fea0 	bl	8000298 <__aeabi_dsub>
 800f558:	f806 4b01 	strb.w	r4, [r6], #1
 800f55c:	9d07      	ldr	r5, [sp, #28]
 800f55e:	eba6 040a 	sub.w	r4, r6, sl
 800f562:	42a5      	cmp	r5, r4
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	f040 8117 	bne.w	800f79a <_dtoa_r+0x6e2>
 800f56c:	f7f0 fe96 	bl	800029c <__adddf3>
 800f570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	f7f1 fad6 	bl	8000b28 <__aeabi_dcmpgt>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	f040 80f9 	bne.w	800f774 <_dtoa_r+0x6bc>
 800f582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f1 faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f58e:	b118      	cbz	r0, 800f598 <_dtoa_r+0x4e0>
 800f590:	f018 0f01 	tst.w	r8, #1
 800f594:	f040 80ee 	bne.w	800f774 <_dtoa_r+0x6bc>
 800f598:	4649      	mov	r1, r9
 800f59a:	4658      	mov	r0, fp
 800f59c:	f000 fc90 	bl	800fec0 <_Bfree>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	7033      	strb	r3, [r6, #0]
 800f5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5a6:	3701      	adds	r7, #1
 800f5a8:	601f      	str	r7, [r3, #0]
 800f5aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 831d 	beq.w	800fbec <_dtoa_r+0xb34>
 800f5b2:	601e      	str	r6, [r3, #0]
 800f5b4:	e31a      	b.n	800fbec <_dtoa_r+0xb34>
 800f5b6:	07e2      	lsls	r2, r4, #31
 800f5b8:	d505      	bpl.n	800f5c6 <_dtoa_r+0x50e>
 800f5ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5be:	f7f1 f823 	bl	8000608 <__aeabi_dmul>
 800f5c2:	3601      	adds	r6, #1
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	1064      	asrs	r4, r4, #1
 800f5c8:	3508      	adds	r5, #8
 800f5ca:	e73f      	b.n	800f44c <_dtoa_r+0x394>
 800f5cc:	2602      	movs	r6, #2
 800f5ce:	e742      	b.n	800f456 <_dtoa_r+0x39e>
 800f5d0:	9c07      	ldr	r4, [sp, #28]
 800f5d2:	9704      	str	r7, [sp, #16]
 800f5d4:	e761      	b.n	800f49a <_dtoa_r+0x3e2>
 800f5d6:	4b27      	ldr	r3, [pc, #156]	@ (800f674 <_dtoa_r+0x5bc>)
 800f5d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5e2:	4454      	add	r4, sl
 800f5e4:	2900      	cmp	r1, #0
 800f5e6:	d053      	beq.n	800f690 <_dtoa_r+0x5d8>
 800f5e8:	4928      	ldr	r1, [pc, #160]	@ (800f68c <_dtoa_r+0x5d4>)
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	f7f1 f936 	bl	800085c <__aeabi_ddiv>
 800f5f0:	4633      	mov	r3, r6
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	f7f0 fe50 	bl	8000298 <__aeabi_dsub>
 800f5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5fc:	4656      	mov	r6, sl
 800f5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f602:	f7f1 fab1 	bl	8000b68 <__aeabi_d2iz>
 800f606:	4605      	mov	r5, r0
 800f608:	f7f0 ff94 	bl	8000534 <__aeabi_i2d>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f614:	f7f0 fe40 	bl	8000298 <__aeabi_dsub>
 800f618:	3530      	adds	r5, #48	@ 0x30
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f622:	f806 5b01 	strb.w	r5, [r6], #1
 800f626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f62a:	f7f1 fa5f 	bl	8000aec <__aeabi_dcmplt>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d171      	bne.n	800f716 <_dtoa_r+0x65e>
 800f632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f636:	4911      	ldr	r1, [pc, #68]	@ (800f67c <_dtoa_r+0x5c4>)
 800f638:	2000      	movs	r0, #0
 800f63a:	f7f0 fe2d 	bl	8000298 <__aeabi_dsub>
 800f63e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f642:	f7f1 fa53 	bl	8000aec <__aeabi_dcmplt>
 800f646:	2800      	cmp	r0, #0
 800f648:	f040 8095 	bne.w	800f776 <_dtoa_r+0x6be>
 800f64c:	42a6      	cmp	r6, r4
 800f64e:	f43f af50 	beq.w	800f4f2 <_dtoa_r+0x43a>
 800f652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f656:	4b0a      	ldr	r3, [pc, #40]	@ (800f680 <_dtoa_r+0x5c8>)
 800f658:	2200      	movs	r2, #0
 800f65a:	f7f0 ffd5 	bl	8000608 <__aeabi_dmul>
 800f65e:	4b08      	ldr	r3, [pc, #32]	@ (800f680 <_dtoa_r+0x5c8>)
 800f660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f664:	2200      	movs	r2, #0
 800f666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66a:	f7f0 ffcd 	bl	8000608 <__aeabi_dmul>
 800f66e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f672:	e7c4      	b.n	800f5fe <_dtoa_r+0x546>
 800f674:	08010f70 	.word	0x08010f70
 800f678:	08010f48 	.word	0x08010f48
 800f67c:	3ff00000 	.word	0x3ff00000
 800f680:	40240000 	.word	0x40240000
 800f684:	401c0000 	.word	0x401c0000
 800f688:	40140000 	.word	0x40140000
 800f68c:	3fe00000 	.word	0x3fe00000
 800f690:	4631      	mov	r1, r6
 800f692:	4628      	mov	r0, r5
 800f694:	f7f0 ffb8 	bl	8000608 <__aeabi_dmul>
 800f698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f69c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f69e:	4656      	mov	r6, sl
 800f6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a4:	f7f1 fa60 	bl	8000b68 <__aeabi_d2iz>
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	f7f0 ff43 	bl	8000534 <__aeabi_i2d>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6b6:	f7f0 fdef 	bl	8000298 <__aeabi_dsub>
 800f6ba:	3530      	adds	r5, #48	@ 0x30
 800f6bc:	f806 5b01 	strb.w	r5, [r6], #1
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	42a6      	cmp	r6, r4
 800f6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6ca:	f04f 0200 	mov.w	r2, #0
 800f6ce:	d124      	bne.n	800f71a <_dtoa_r+0x662>
 800f6d0:	4bac      	ldr	r3, [pc, #688]	@ (800f984 <_dtoa_r+0x8cc>)
 800f6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f6d6:	f7f0 fde1 	bl	800029c <__adddf3>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e2:	f7f1 fa21 	bl	8000b28 <__aeabi_dcmpgt>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d145      	bne.n	800f776 <_dtoa_r+0x6be>
 800f6ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6ee:	49a5      	ldr	r1, [pc, #660]	@ (800f984 <_dtoa_r+0x8cc>)
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	f7f0 fdd1 	bl	8000298 <__aeabi_dsub>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6fe:	f7f1 f9f5 	bl	8000aec <__aeabi_dcmplt>
 800f702:	2800      	cmp	r0, #0
 800f704:	f43f aef5 	beq.w	800f4f2 <_dtoa_r+0x43a>
 800f708:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f70a:	1e73      	subs	r3, r6, #1
 800f70c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f70e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f712:	2b30      	cmp	r3, #48	@ 0x30
 800f714:	d0f8      	beq.n	800f708 <_dtoa_r+0x650>
 800f716:	9f04      	ldr	r7, [sp, #16]
 800f718:	e73e      	b.n	800f598 <_dtoa_r+0x4e0>
 800f71a:	4b9b      	ldr	r3, [pc, #620]	@ (800f988 <_dtoa_r+0x8d0>)
 800f71c:	f7f0 ff74 	bl	8000608 <__aeabi_dmul>
 800f720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f724:	e7bc      	b.n	800f6a0 <_dtoa_r+0x5e8>
 800f726:	d10c      	bne.n	800f742 <_dtoa_r+0x68a>
 800f728:	4b98      	ldr	r3, [pc, #608]	@ (800f98c <_dtoa_r+0x8d4>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f730:	f7f0 ff6a 	bl	8000608 <__aeabi_dmul>
 800f734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f738:	f7f1 f9ec 	bl	8000b14 <__aeabi_dcmpge>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	f000 8157 	beq.w	800f9f0 <_dtoa_r+0x938>
 800f742:	2400      	movs	r4, #0
 800f744:	4625      	mov	r5, r4
 800f746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f748:	43db      	mvns	r3, r3
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	4656      	mov	r6, sl
 800f74e:	2700      	movs	r7, #0
 800f750:	4621      	mov	r1, r4
 800f752:	4658      	mov	r0, fp
 800f754:	f000 fbb4 	bl	800fec0 <_Bfree>
 800f758:	2d00      	cmp	r5, #0
 800f75a:	d0dc      	beq.n	800f716 <_dtoa_r+0x65e>
 800f75c:	b12f      	cbz	r7, 800f76a <_dtoa_r+0x6b2>
 800f75e:	42af      	cmp	r7, r5
 800f760:	d003      	beq.n	800f76a <_dtoa_r+0x6b2>
 800f762:	4639      	mov	r1, r7
 800f764:	4658      	mov	r0, fp
 800f766:	f000 fbab 	bl	800fec0 <_Bfree>
 800f76a:	4629      	mov	r1, r5
 800f76c:	4658      	mov	r0, fp
 800f76e:	f000 fba7 	bl	800fec0 <_Bfree>
 800f772:	e7d0      	b.n	800f716 <_dtoa_r+0x65e>
 800f774:	9704      	str	r7, [sp, #16]
 800f776:	4633      	mov	r3, r6
 800f778:	461e      	mov	r6, r3
 800f77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f77e:	2a39      	cmp	r2, #57	@ 0x39
 800f780:	d107      	bne.n	800f792 <_dtoa_r+0x6da>
 800f782:	459a      	cmp	sl, r3
 800f784:	d1f8      	bne.n	800f778 <_dtoa_r+0x6c0>
 800f786:	9a04      	ldr	r2, [sp, #16]
 800f788:	3201      	adds	r2, #1
 800f78a:	9204      	str	r2, [sp, #16]
 800f78c:	2230      	movs	r2, #48	@ 0x30
 800f78e:	f88a 2000 	strb.w	r2, [sl]
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	3201      	adds	r2, #1
 800f796:	701a      	strb	r2, [r3, #0]
 800f798:	e7bd      	b.n	800f716 <_dtoa_r+0x65e>
 800f79a:	4b7b      	ldr	r3, [pc, #492]	@ (800f988 <_dtoa_r+0x8d0>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	f7f0 ff33 	bl	8000608 <__aeabi_dmul>
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	f7f1 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f43f aebb 	beq.w	800f52a <_dtoa_r+0x472>
 800f7b4:	e6f0      	b.n	800f598 <_dtoa_r+0x4e0>
 800f7b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7b8:	2a00      	cmp	r2, #0
 800f7ba:	f000 80db 	beq.w	800f974 <_dtoa_r+0x8bc>
 800f7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	f300 80bf 	bgt.w	800f944 <_dtoa_r+0x88c>
 800f7c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f7c8:	2a00      	cmp	r2, #0
 800f7ca:	f000 80b7 	beq.w	800f93c <_dtoa_r+0x884>
 800f7ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f7d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f7d4:	4646      	mov	r6, r8
 800f7d6:	9a08      	ldr	r2, [sp, #32]
 800f7d8:	2101      	movs	r1, #1
 800f7da:	441a      	add	r2, r3
 800f7dc:	4658      	mov	r0, fp
 800f7de:	4498      	add	r8, r3
 800f7e0:	9208      	str	r2, [sp, #32]
 800f7e2:	f000 fc21 	bl	8010028 <__i2b>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	b15e      	cbz	r6, 800f802 <_dtoa_r+0x74a>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dd08      	ble.n	800f802 <_dtoa_r+0x74a>
 800f7f0:	42b3      	cmp	r3, r6
 800f7f2:	9a08      	ldr	r2, [sp, #32]
 800f7f4:	bfa8      	it	ge
 800f7f6:	4633      	movge	r3, r6
 800f7f8:	eba8 0803 	sub.w	r8, r8, r3
 800f7fc:	1af6      	subs	r6, r6, r3
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	9308      	str	r3, [sp, #32]
 800f802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f804:	b1f3      	cbz	r3, 800f844 <_dtoa_r+0x78c>
 800f806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 80b7 	beq.w	800f97c <_dtoa_r+0x8c4>
 800f80e:	b18c      	cbz	r4, 800f834 <_dtoa_r+0x77c>
 800f810:	4629      	mov	r1, r5
 800f812:	4622      	mov	r2, r4
 800f814:	4658      	mov	r0, fp
 800f816:	f000 fcc7 	bl	80101a8 <__pow5mult>
 800f81a:	464a      	mov	r2, r9
 800f81c:	4601      	mov	r1, r0
 800f81e:	4605      	mov	r5, r0
 800f820:	4658      	mov	r0, fp
 800f822:	f000 fc17 	bl	8010054 <__multiply>
 800f826:	4649      	mov	r1, r9
 800f828:	9004      	str	r0, [sp, #16]
 800f82a:	4658      	mov	r0, fp
 800f82c:	f000 fb48 	bl	800fec0 <_Bfree>
 800f830:	9b04      	ldr	r3, [sp, #16]
 800f832:	4699      	mov	r9, r3
 800f834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f836:	1b1a      	subs	r2, r3, r4
 800f838:	d004      	beq.n	800f844 <_dtoa_r+0x78c>
 800f83a:	4649      	mov	r1, r9
 800f83c:	4658      	mov	r0, fp
 800f83e:	f000 fcb3 	bl	80101a8 <__pow5mult>
 800f842:	4681      	mov	r9, r0
 800f844:	2101      	movs	r1, #1
 800f846:	4658      	mov	r0, fp
 800f848:	f000 fbee 	bl	8010028 <__i2b>
 800f84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84e:	4604      	mov	r4, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 81cf 	beq.w	800fbf4 <_dtoa_r+0xb3c>
 800f856:	461a      	mov	r2, r3
 800f858:	4601      	mov	r1, r0
 800f85a:	4658      	mov	r0, fp
 800f85c:	f000 fca4 	bl	80101a8 <__pow5mult>
 800f860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f862:	2b01      	cmp	r3, #1
 800f864:	4604      	mov	r4, r0
 800f866:	f300 8095 	bgt.w	800f994 <_dtoa_r+0x8dc>
 800f86a:	9b02      	ldr	r3, [sp, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f040 8087 	bne.w	800f980 <_dtoa_r+0x8c8>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f040 8089 	bne.w	800f990 <_dtoa_r+0x8d8>
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f884:	0d1b      	lsrs	r3, r3, #20
 800f886:	051b      	lsls	r3, r3, #20
 800f888:	b12b      	cbz	r3, 800f896 <_dtoa_r+0x7de>
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	3301      	adds	r3, #1
 800f88e:	9308      	str	r3, [sp, #32]
 800f890:	f108 0801 	add.w	r8, r8, #1
 800f894:	2301      	movs	r3, #1
 800f896:	930a      	str	r3, [sp, #40]	@ 0x28
 800f898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 81b0 	beq.w	800fc00 <_dtoa_r+0xb48>
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8a6:	6918      	ldr	r0, [r3, #16]
 800f8a8:	f000 fb72 	bl	800ff90 <__hi0bits>
 800f8ac:	f1c0 0020 	rsb	r0, r0, #32
 800f8b0:	9b08      	ldr	r3, [sp, #32]
 800f8b2:	4418      	add	r0, r3
 800f8b4:	f010 001f 	ands.w	r0, r0, #31
 800f8b8:	d077      	beq.n	800f9aa <_dtoa_r+0x8f2>
 800f8ba:	f1c0 0320 	rsb	r3, r0, #32
 800f8be:	2b04      	cmp	r3, #4
 800f8c0:	dd6b      	ble.n	800f99a <_dtoa_r+0x8e2>
 800f8c2:	9b08      	ldr	r3, [sp, #32]
 800f8c4:	f1c0 001c 	rsb	r0, r0, #28
 800f8c8:	4403      	add	r3, r0
 800f8ca:	4480      	add	r8, r0
 800f8cc:	4406      	add	r6, r0
 800f8ce:	9308      	str	r3, [sp, #32]
 800f8d0:	f1b8 0f00 	cmp.w	r8, #0
 800f8d4:	dd05      	ble.n	800f8e2 <_dtoa_r+0x82a>
 800f8d6:	4649      	mov	r1, r9
 800f8d8:	4642      	mov	r2, r8
 800f8da:	4658      	mov	r0, fp
 800f8dc:	f000 fcbe 	bl	801025c <__lshift>
 800f8e0:	4681      	mov	r9, r0
 800f8e2:	9b08      	ldr	r3, [sp, #32]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dd05      	ble.n	800f8f4 <_dtoa_r+0x83c>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f000 fcb5 	bl	801025c <__lshift>
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d059      	beq.n	800f9ae <_dtoa_r+0x8f6>
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	4648      	mov	r0, r9
 800f8fe:	f000 fd19 	bl	8010334 <__mcmp>
 800f902:	2800      	cmp	r0, #0
 800f904:	da53      	bge.n	800f9ae <_dtoa_r+0x8f6>
 800f906:	1e7b      	subs	r3, r7, #1
 800f908:	9304      	str	r3, [sp, #16]
 800f90a:	4649      	mov	r1, r9
 800f90c:	2300      	movs	r3, #0
 800f90e:	220a      	movs	r2, #10
 800f910:	4658      	mov	r0, fp
 800f912:	f000 faf7 	bl	800ff04 <__multadd>
 800f916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f918:	4681      	mov	r9, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 8172 	beq.w	800fc04 <_dtoa_r+0xb4c>
 800f920:	2300      	movs	r3, #0
 800f922:	4629      	mov	r1, r5
 800f924:	220a      	movs	r2, #10
 800f926:	4658      	mov	r0, fp
 800f928:	f000 faec 	bl	800ff04 <__multadd>
 800f92c:	9b00      	ldr	r3, [sp, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	4605      	mov	r5, r0
 800f932:	dc67      	bgt.n	800fa04 <_dtoa_r+0x94c>
 800f934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f936:	2b02      	cmp	r3, #2
 800f938:	dc41      	bgt.n	800f9be <_dtoa_r+0x906>
 800f93a:	e063      	b.n	800fa04 <_dtoa_r+0x94c>
 800f93c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f93e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f942:	e746      	b.n	800f7d2 <_dtoa_r+0x71a>
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	1e5c      	subs	r4, r3, #1
 800f948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f94a:	42a3      	cmp	r3, r4
 800f94c:	bfbf      	itttt	lt
 800f94e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f950:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f952:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f954:	1ae3      	sublt	r3, r4, r3
 800f956:	bfb4      	ite	lt
 800f958:	18d2      	addlt	r2, r2, r3
 800f95a:	1b1c      	subge	r4, r3, r4
 800f95c:	9b07      	ldr	r3, [sp, #28]
 800f95e:	bfbc      	itt	lt
 800f960:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f962:	2400      	movlt	r4, #0
 800f964:	2b00      	cmp	r3, #0
 800f966:	bfb5      	itete	lt
 800f968:	eba8 0603 	sublt.w	r6, r8, r3
 800f96c:	9b07      	ldrge	r3, [sp, #28]
 800f96e:	2300      	movlt	r3, #0
 800f970:	4646      	movge	r6, r8
 800f972:	e730      	b.n	800f7d6 <_dtoa_r+0x71e>
 800f974:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f976:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f978:	4646      	mov	r6, r8
 800f97a:	e735      	b.n	800f7e8 <_dtoa_r+0x730>
 800f97c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f97e:	e75c      	b.n	800f83a <_dtoa_r+0x782>
 800f980:	2300      	movs	r3, #0
 800f982:	e788      	b.n	800f896 <_dtoa_r+0x7de>
 800f984:	3fe00000 	.word	0x3fe00000
 800f988:	40240000 	.word	0x40240000
 800f98c:	40140000 	.word	0x40140000
 800f990:	9b02      	ldr	r3, [sp, #8]
 800f992:	e780      	b.n	800f896 <_dtoa_r+0x7de>
 800f994:	2300      	movs	r3, #0
 800f996:	930a      	str	r3, [sp, #40]	@ 0x28
 800f998:	e782      	b.n	800f8a0 <_dtoa_r+0x7e8>
 800f99a:	d099      	beq.n	800f8d0 <_dtoa_r+0x818>
 800f99c:	9a08      	ldr	r2, [sp, #32]
 800f99e:	331c      	adds	r3, #28
 800f9a0:	441a      	add	r2, r3
 800f9a2:	4498      	add	r8, r3
 800f9a4:	441e      	add	r6, r3
 800f9a6:	9208      	str	r2, [sp, #32]
 800f9a8:	e792      	b.n	800f8d0 <_dtoa_r+0x818>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	e7f6      	b.n	800f99c <_dtoa_r+0x8e4>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	9704      	str	r7, [sp, #16]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	dc20      	bgt.n	800f9f8 <_dtoa_r+0x940>
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	dd1e      	ble.n	800f9fc <_dtoa_r+0x944>
 800f9be:	9b00      	ldr	r3, [sp, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f47f aec0 	bne.w	800f746 <_dtoa_r+0x68e>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	2205      	movs	r2, #5
 800f9ca:	4658      	mov	r0, fp
 800f9cc:	f000 fa9a 	bl	800ff04 <__multadd>
 800f9d0:	4601      	mov	r1, r0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	4648      	mov	r0, r9
 800f9d6:	f000 fcad 	bl	8010334 <__mcmp>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	f77f aeb3 	ble.w	800f746 <_dtoa_r+0x68e>
 800f9e0:	4656      	mov	r6, sl
 800f9e2:	2331      	movs	r3, #49	@ 0x31
 800f9e4:	f806 3b01 	strb.w	r3, [r6], #1
 800f9e8:	9b04      	ldr	r3, [sp, #16]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	9304      	str	r3, [sp, #16]
 800f9ee:	e6ae      	b.n	800f74e <_dtoa_r+0x696>
 800f9f0:	9c07      	ldr	r4, [sp, #28]
 800f9f2:	9704      	str	r7, [sp, #16]
 800f9f4:	4625      	mov	r5, r4
 800f9f6:	e7f3      	b.n	800f9e0 <_dtoa_r+0x928>
 800f9f8:	9b07      	ldr	r3, [sp, #28]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	f000 8104 	beq.w	800fc0c <_dtoa_r+0xb54>
 800fa04:	2e00      	cmp	r6, #0
 800fa06:	dd05      	ble.n	800fa14 <_dtoa_r+0x95c>
 800fa08:	4629      	mov	r1, r5
 800fa0a:	4632      	mov	r2, r6
 800fa0c:	4658      	mov	r0, fp
 800fa0e:	f000 fc25 	bl	801025c <__lshift>
 800fa12:	4605      	mov	r5, r0
 800fa14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d05a      	beq.n	800fad0 <_dtoa_r+0xa18>
 800fa1a:	6869      	ldr	r1, [r5, #4]
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	f000 fa0f 	bl	800fe40 <_Balloc>
 800fa22:	4606      	mov	r6, r0
 800fa24:	b928      	cbnz	r0, 800fa32 <_dtoa_r+0x97a>
 800fa26:	4b84      	ldr	r3, [pc, #528]	@ (800fc38 <_dtoa_r+0xb80>)
 800fa28:	4602      	mov	r2, r0
 800fa2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa2e:	f7ff bb5a 	b.w	800f0e6 <_dtoa_r+0x2e>
 800fa32:	692a      	ldr	r2, [r5, #16]
 800fa34:	3202      	adds	r2, #2
 800fa36:	0092      	lsls	r2, r2, #2
 800fa38:	f105 010c 	add.w	r1, r5, #12
 800fa3c:	300c      	adds	r0, #12
 800fa3e:	f001 f803 	bl	8010a48 <memcpy>
 800fa42:	2201      	movs	r2, #1
 800fa44:	4631      	mov	r1, r6
 800fa46:	4658      	mov	r0, fp
 800fa48:	f000 fc08 	bl	801025c <__lshift>
 800fa4c:	f10a 0301 	add.w	r3, sl, #1
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	4453      	add	r3, sl
 800fa56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa58:	9b02      	ldr	r3, [sp, #8]
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	462f      	mov	r7, r5
 800fa60:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa62:	4605      	mov	r5, r0
 800fa64:	9b07      	ldr	r3, [sp, #28]
 800fa66:	4621      	mov	r1, r4
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	4648      	mov	r0, r9
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	f7ff fa98 	bl	800efa2 <quorem>
 800fa72:	4639      	mov	r1, r7
 800fa74:	9002      	str	r0, [sp, #8]
 800fa76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa7a:	4648      	mov	r0, r9
 800fa7c:	f000 fc5a 	bl	8010334 <__mcmp>
 800fa80:	462a      	mov	r2, r5
 800fa82:	9008      	str	r0, [sp, #32]
 800fa84:	4621      	mov	r1, r4
 800fa86:	4658      	mov	r0, fp
 800fa88:	f000 fc70 	bl	801036c <__mdiff>
 800fa8c:	68c2      	ldr	r2, [r0, #12]
 800fa8e:	4606      	mov	r6, r0
 800fa90:	bb02      	cbnz	r2, 800fad4 <_dtoa_r+0xa1c>
 800fa92:	4601      	mov	r1, r0
 800fa94:	4648      	mov	r0, r9
 800fa96:	f000 fc4d 	bl	8010334 <__mcmp>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	4658      	mov	r0, fp
 800faa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800faa2:	f000 fa0d 	bl	800fec0 <_Bfree>
 800faa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faaa:	9e07      	ldr	r6, [sp, #28]
 800faac:	ea43 0102 	orr.w	r1, r3, r2
 800fab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fab2:	4319      	orrs	r1, r3
 800fab4:	d110      	bne.n	800fad8 <_dtoa_r+0xa20>
 800fab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faba:	d029      	beq.n	800fb10 <_dtoa_r+0xa58>
 800fabc:	9b08      	ldr	r3, [sp, #32]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	dd02      	ble.n	800fac8 <_dtoa_r+0xa10>
 800fac2:	9b02      	ldr	r3, [sp, #8]
 800fac4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fac8:	9b00      	ldr	r3, [sp, #0]
 800faca:	f883 8000 	strb.w	r8, [r3]
 800face:	e63f      	b.n	800f750 <_dtoa_r+0x698>
 800fad0:	4628      	mov	r0, r5
 800fad2:	e7bb      	b.n	800fa4c <_dtoa_r+0x994>
 800fad4:	2201      	movs	r2, #1
 800fad6:	e7e1      	b.n	800fa9c <_dtoa_r+0x9e4>
 800fad8:	9b08      	ldr	r3, [sp, #32]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	db04      	blt.n	800fae8 <_dtoa_r+0xa30>
 800fade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fae0:	430b      	orrs	r3, r1
 800fae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fae4:	430b      	orrs	r3, r1
 800fae6:	d120      	bne.n	800fb2a <_dtoa_r+0xa72>
 800fae8:	2a00      	cmp	r2, #0
 800faea:	dded      	ble.n	800fac8 <_dtoa_r+0xa10>
 800faec:	4649      	mov	r1, r9
 800faee:	2201      	movs	r2, #1
 800faf0:	4658      	mov	r0, fp
 800faf2:	f000 fbb3 	bl	801025c <__lshift>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4681      	mov	r9, r0
 800fafa:	f000 fc1b 	bl	8010334 <__mcmp>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	dc03      	bgt.n	800fb0a <_dtoa_r+0xa52>
 800fb02:	d1e1      	bne.n	800fac8 <_dtoa_r+0xa10>
 800fb04:	f018 0f01 	tst.w	r8, #1
 800fb08:	d0de      	beq.n	800fac8 <_dtoa_r+0xa10>
 800fb0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb0e:	d1d8      	bne.n	800fac2 <_dtoa_r+0xa0a>
 800fb10:	9a00      	ldr	r2, [sp, #0]
 800fb12:	2339      	movs	r3, #57	@ 0x39
 800fb14:	7013      	strb	r3, [r2, #0]
 800fb16:	4633      	mov	r3, r6
 800fb18:	461e      	mov	r6, r3
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb20:	2a39      	cmp	r2, #57	@ 0x39
 800fb22:	d052      	beq.n	800fbca <_dtoa_r+0xb12>
 800fb24:	3201      	adds	r2, #1
 800fb26:	701a      	strb	r2, [r3, #0]
 800fb28:	e612      	b.n	800f750 <_dtoa_r+0x698>
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	dd07      	ble.n	800fb3e <_dtoa_r+0xa86>
 800fb2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb32:	d0ed      	beq.n	800fb10 <_dtoa_r+0xa58>
 800fb34:	9a00      	ldr	r2, [sp, #0]
 800fb36:	f108 0301 	add.w	r3, r8, #1
 800fb3a:	7013      	strb	r3, [r2, #0]
 800fb3c:	e608      	b.n	800f750 <_dtoa_r+0x698>
 800fb3e:	9b07      	ldr	r3, [sp, #28]
 800fb40:	9a07      	ldr	r2, [sp, #28]
 800fb42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d028      	beq.n	800fb9e <_dtoa_r+0xae6>
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	2300      	movs	r3, #0
 800fb50:	220a      	movs	r2, #10
 800fb52:	4658      	mov	r0, fp
 800fb54:	f000 f9d6 	bl	800ff04 <__multadd>
 800fb58:	42af      	cmp	r7, r5
 800fb5a:	4681      	mov	r9, r0
 800fb5c:	f04f 0300 	mov.w	r3, #0
 800fb60:	f04f 020a 	mov.w	r2, #10
 800fb64:	4639      	mov	r1, r7
 800fb66:	4658      	mov	r0, fp
 800fb68:	d107      	bne.n	800fb7a <_dtoa_r+0xac2>
 800fb6a:	f000 f9cb 	bl	800ff04 <__multadd>
 800fb6e:	4607      	mov	r7, r0
 800fb70:	4605      	mov	r5, r0
 800fb72:	9b07      	ldr	r3, [sp, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	9307      	str	r3, [sp, #28]
 800fb78:	e774      	b.n	800fa64 <_dtoa_r+0x9ac>
 800fb7a:	f000 f9c3 	bl	800ff04 <__multadd>
 800fb7e:	4629      	mov	r1, r5
 800fb80:	4607      	mov	r7, r0
 800fb82:	2300      	movs	r3, #0
 800fb84:	220a      	movs	r2, #10
 800fb86:	4658      	mov	r0, fp
 800fb88:	f000 f9bc 	bl	800ff04 <__multadd>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	e7f0      	b.n	800fb72 <_dtoa_r+0xaba>
 800fb90:	9b00      	ldr	r3, [sp, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	bfcc      	ite	gt
 800fb96:	461e      	movgt	r6, r3
 800fb98:	2601      	movle	r6, #1
 800fb9a:	4456      	add	r6, sl
 800fb9c:	2700      	movs	r7, #0
 800fb9e:	4649      	mov	r1, r9
 800fba0:	2201      	movs	r2, #1
 800fba2:	4658      	mov	r0, fp
 800fba4:	f000 fb5a 	bl	801025c <__lshift>
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4681      	mov	r9, r0
 800fbac:	f000 fbc2 	bl	8010334 <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	dcb0      	bgt.n	800fb16 <_dtoa_r+0xa5e>
 800fbb4:	d102      	bne.n	800fbbc <_dtoa_r+0xb04>
 800fbb6:	f018 0f01 	tst.w	r8, #1
 800fbba:	d1ac      	bne.n	800fb16 <_dtoa_r+0xa5e>
 800fbbc:	4633      	mov	r3, r6
 800fbbe:	461e      	mov	r6, r3
 800fbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbc4:	2a30      	cmp	r2, #48	@ 0x30
 800fbc6:	d0fa      	beq.n	800fbbe <_dtoa_r+0xb06>
 800fbc8:	e5c2      	b.n	800f750 <_dtoa_r+0x698>
 800fbca:	459a      	cmp	sl, r3
 800fbcc:	d1a4      	bne.n	800fb18 <_dtoa_r+0xa60>
 800fbce:	9b04      	ldr	r3, [sp, #16]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	2331      	movs	r3, #49	@ 0x31
 800fbd6:	f88a 3000 	strb.w	r3, [sl]
 800fbda:	e5b9      	b.n	800f750 <_dtoa_r+0x698>
 800fbdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc3c <_dtoa_r+0xb84>
 800fbe2:	b11b      	cbz	r3, 800fbec <_dtoa_r+0xb34>
 800fbe4:	f10a 0308 	add.w	r3, sl, #8
 800fbe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	4650      	mov	r0, sl
 800fbee:	b019      	add	sp, #100	@ 0x64
 800fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	f77f ae37 	ble.w	800f86a <_dtoa_r+0x7b2>
 800fbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc00:	2001      	movs	r0, #1
 800fc02:	e655      	b.n	800f8b0 <_dtoa_r+0x7f8>
 800fc04:	9b00      	ldr	r3, [sp, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f77f aed6 	ble.w	800f9b8 <_dtoa_r+0x900>
 800fc0c:	4656      	mov	r6, sl
 800fc0e:	4621      	mov	r1, r4
 800fc10:	4648      	mov	r0, r9
 800fc12:	f7ff f9c6 	bl	800efa2 <quorem>
 800fc16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc1a:	f806 8b01 	strb.w	r8, [r6], #1
 800fc1e:	9b00      	ldr	r3, [sp, #0]
 800fc20:	eba6 020a 	sub.w	r2, r6, sl
 800fc24:	4293      	cmp	r3, r2
 800fc26:	ddb3      	ble.n	800fb90 <_dtoa_r+0xad8>
 800fc28:	4649      	mov	r1, r9
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	220a      	movs	r2, #10
 800fc2e:	4658      	mov	r0, fp
 800fc30:	f000 f968 	bl	800ff04 <__multadd>
 800fc34:	4681      	mov	r9, r0
 800fc36:	e7ea      	b.n	800fc0e <_dtoa_r+0xb56>
 800fc38:	08010ed0 	.word	0x08010ed0
 800fc3c:	08010e54 	.word	0x08010e54

0800fc40 <_free_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4605      	mov	r5, r0
 800fc44:	2900      	cmp	r1, #0
 800fc46:	d041      	beq.n	800fccc <_free_r+0x8c>
 800fc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc4c:	1f0c      	subs	r4, r1, #4
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	bfb8      	it	lt
 800fc52:	18e4      	addlt	r4, r4, r3
 800fc54:	f000 f8e8 	bl	800fe28 <__malloc_lock>
 800fc58:	4a1d      	ldr	r2, [pc, #116]	@ (800fcd0 <_free_r+0x90>)
 800fc5a:	6813      	ldr	r3, [r2, #0]
 800fc5c:	b933      	cbnz	r3, 800fc6c <_free_r+0x2c>
 800fc5e:	6063      	str	r3, [r4, #4]
 800fc60:	6014      	str	r4, [r2, #0]
 800fc62:	4628      	mov	r0, r5
 800fc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc68:	f000 b8e4 	b.w	800fe34 <__malloc_unlock>
 800fc6c:	42a3      	cmp	r3, r4
 800fc6e:	d908      	bls.n	800fc82 <_free_r+0x42>
 800fc70:	6820      	ldr	r0, [r4, #0]
 800fc72:	1821      	adds	r1, r4, r0
 800fc74:	428b      	cmp	r3, r1
 800fc76:	bf01      	itttt	eq
 800fc78:	6819      	ldreq	r1, [r3, #0]
 800fc7a:	685b      	ldreq	r3, [r3, #4]
 800fc7c:	1809      	addeq	r1, r1, r0
 800fc7e:	6021      	streq	r1, [r4, #0]
 800fc80:	e7ed      	b.n	800fc5e <_free_r+0x1e>
 800fc82:	461a      	mov	r2, r3
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	b10b      	cbz	r3, 800fc8c <_free_r+0x4c>
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d9fa      	bls.n	800fc82 <_free_r+0x42>
 800fc8c:	6811      	ldr	r1, [r2, #0]
 800fc8e:	1850      	adds	r0, r2, r1
 800fc90:	42a0      	cmp	r0, r4
 800fc92:	d10b      	bne.n	800fcac <_free_r+0x6c>
 800fc94:	6820      	ldr	r0, [r4, #0]
 800fc96:	4401      	add	r1, r0
 800fc98:	1850      	adds	r0, r2, r1
 800fc9a:	4283      	cmp	r3, r0
 800fc9c:	6011      	str	r1, [r2, #0]
 800fc9e:	d1e0      	bne.n	800fc62 <_free_r+0x22>
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	6053      	str	r3, [r2, #4]
 800fca6:	4408      	add	r0, r1
 800fca8:	6010      	str	r0, [r2, #0]
 800fcaa:	e7da      	b.n	800fc62 <_free_r+0x22>
 800fcac:	d902      	bls.n	800fcb4 <_free_r+0x74>
 800fcae:	230c      	movs	r3, #12
 800fcb0:	602b      	str	r3, [r5, #0]
 800fcb2:	e7d6      	b.n	800fc62 <_free_r+0x22>
 800fcb4:	6820      	ldr	r0, [r4, #0]
 800fcb6:	1821      	adds	r1, r4, r0
 800fcb8:	428b      	cmp	r3, r1
 800fcba:	bf04      	itt	eq
 800fcbc:	6819      	ldreq	r1, [r3, #0]
 800fcbe:	685b      	ldreq	r3, [r3, #4]
 800fcc0:	6063      	str	r3, [r4, #4]
 800fcc2:	bf04      	itt	eq
 800fcc4:	1809      	addeq	r1, r1, r0
 800fcc6:	6021      	streq	r1, [r4, #0]
 800fcc8:	6054      	str	r4, [r2, #4]
 800fcca:	e7ca      	b.n	800fc62 <_free_r+0x22>
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	bf00      	nop
 800fcd0:	20002214 	.word	0x20002214

0800fcd4 <malloc>:
 800fcd4:	4b02      	ldr	r3, [pc, #8]	@ (800fce0 <malloc+0xc>)
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	6818      	ldr	r0, [r3, #0]
 800fcda:	f000 b825 	b.w	800fd28 <_malloc_r>
 800fcde:	bf00      	nop
 800fce0:	2000011c 	.word	0x2000011c

0800fce4 <sbrk_aligned>:
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	4e0f      	ldr	r6, [pc, #60]	@ (800fd24 <sbrk_aligned+0x40>)
 800fce8:	460c      	mov	r4, r1
 800fcea:	6831      	ldr	r1, [r6, #0]
 800fcec:	4605      	mov	r5, r0
 800fcee:	b911      	cbnz	r1, 800fcf6 <sbrk_aligned+0x12>
 800fcf0:	f000 fe9a 	bl	8010a28 <_sbrk_r>
 800fcf4:	6030      	str	r0, [r6, #0]
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f000 fe95 	bl	8010a28 <_sbrk_r>
 800fcfe:	1c43      	adds	r3, r0, #1
 800fd00:	d103      	bne.n	800fd0a <sbrk_aligned+0x26>
 800fd02:	f04f 34ff 	mov.w	r4, #4294967295
 800fd06:	4620      	mov	r0, r4
 800fd08:	bd70      	pop	{r4, r5, r6, pc}
 800fd0a:	1cc4      	adds	r4, r0, #3
 800fd0c:	f024 0403 	bic.w	r4, r4, #3
 800fd10:	42a0      	cmp	r0, r4
 800fd12:	d0f8      	beq.n	800fd06 <sbrk_aligned+0x22>
 800fd14:	1a21      	subs	r1, r4, r0
 800fd16:	4628      	mov	r0, r5
 800fd18:	f000 fe86 	bl	8010a28 <_sbrk_r>
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d1f2      	bne.n	800fd06 <sbrk_aligned+0x22>
 800fd20:	e7ef      	b.n	800fd02 <sbrk_aligned+0x1e>
 800fd22:	bf00      	nop
 800fd24:	20002210 	.word	0x20002210

0800fd28 <_malloc_r>:
 800fd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd2c:	1ccd      	adds	r5, r1, #3
 800fd2e:	f025 0503 	bic.w	r5, r5, #3
 800fd32:	3508      	adds	r5, #8
 800fd34:	2d0c      	cmp	r5, #12
 800fd36:	bf38      	it	cc
 800fd38:	250c      	movcc	r5, #12
 800fd3a:	2d00      	cmp	r5, #0
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	db01      	blt.n	800fd44 <_malloc_r+0x1c>
 800fd40:	42a9      	cmp	r1, r5
 800fd42:	d904      	bls.n	800fd4e <_malloc_r+0x26>
 800fd44:	230c      	movs	r3, #12
 800fd46:	6033      	str	r3, [r6, #0]
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe24 <_malloc_r+0xfc>
 800fd52:	f000 f869 	bl	800fe28 <__malloc_lock>
 800fd56:	f8d8 3000 	ldr.w	r3, [r8]
 800fd5a:	461c      	mov	r4, r3
 800fd5c:	bb44      	cbnz	r4, 800fdb0 <_malloc_r+0x88>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4630      	mov	r0, r6
 800fd62:	f7ff ffbf 	bl	800fce4 <sbrk_aligned>
 800fd66:	1c43      	adds	r3, r0, #1
 800fd68:	4604      	mov	r4, r0
 800fd6a:	d158      	bne.n	800fe1e <_malloc_r+0xf6>
 800fd6c:	f8d8 4000 	ldr.w	r4, [r8]
 800fd70:	4627      	mov	r7, r4
 800fd72:	2f00      	cmp	r7, #0
 800fd74:	d143      	bne.n	800fdfe <_malloc_r+0xd6>
 800fd76:	2c00      	cmp	r4, #0
 800fd78:	d04b      	beq.n	800fe12 <_malloc_r+0xea>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	4630      	mov	r0, r6
 800fd80:	eb04 0903 	add.w	r9, r4, r3
 800fd84:	f000 fe50 	bl	8010a28 <_sbrk_r>
 800fd88:	4581      	cmp	r9, r0
 800fd8a:	d142      	bne.n	800fe12 <_malloc_r+0xea>
 800fd8c:	6821      	ldr	r1, [r4, #0]
 800fd8e:	1a6d      	subs	r5, r5, r1
 800fd90:	4629      	mov	r1, r5
 800fd92:	4630      	mov	r0, r6
 800fd94:	f7ff ffa6 	bl	800fce4 <sbrk_aligned>
 800fd98:	3001      	adds	r0, #1
 800fd9a:	d03a      	beq.n	800fe12 <_malloc_r+0xea>
 800fd9c:	6823      	ldr	r3, [r4, #0]
 800fd9e:	442b      	add	r3, r5
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	f8d8 3000 	ldr.w	r3, [r8]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	bb62      	cbnz	r2, 800fe04 <_malloc_r+0xdc>
 800fdaa:	f8c8 7000 	str.w	r7, [r8]
 800fdae:	e00f      	b.n	800fdd0 <_malloc_r+0xa8>
 800fdb0:	6822      	ldr	r2, [r4, #0]
 800fdb2:	1b52      	subs	r2, r2, r5
 800fdb4:	d420      	bmi.n	800fdf8 <_malloc_r+0xd0>
 800fdb6:	2a0b      	cmp	r2, #11
 800fdb8:	d917      	bls.n	800fdea <_malloc_r+0xc2>
 800fdba:	1961      	adds	r1, r4, r5
 800fdbc:	42a3      	cmp	r3, r4
 800fdbe:	6025      	str	r5, [r4, #0]
 800fdc0:	bf18      	it	ne
 800fdc2:	6059      	strne	r1, [r3, #4]
 800fdc4:	6863      	ldr	r3, [r4, #4]
 800fdc6:	bf08      	it	eq
 800fdc8:	f8c8 1000 	streq.w	r1, [r8]
 800fdcc:	5162      	str	r2, [r4, r5]
 800fdce:	604b      	str	r3, [r1, #4]
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f000 f82f 	bl	800fe34 <__malloc_unlock>
 800fdd6:	f104 000b 	add.w	r0, r4, #11
 800fdda:	1d23      	adds	r3, r4, #4
 800fddc:	f020 0007 	bic.w	r0, r0, #7
 800fde0:	1ac2      	subs	r2, r0, r3
 800fde2:	bf1c      	itt	ne
 800fde4:	1a1b      	subne	r3, r3, r0
 800fde6:	50a3      	strne	r3, [r4, r2]
 800fde8:	e7af      	b.n	800fd4a <_malloc_r+0x22>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	bf0c      	ite	eq
 800fdf0:	f8c8 2000 	streq.w	r2, [r8]
 800fdf4:	605a      	strne	r2, [r3, #4]
 800fdf6:	e7eb      	b.n	800fdd0 <_malloc_r+0xa8>
 800fdf8:	4623      	mov	r3, r4
 800fdfa:	6864      	ldr	r4, [r4, #4]
 800fdfc:	e7ae      	b.n	800fd5c <_malloc_r+0x34>
 800fdfe:	463c      	mov	r4, r7
 800fe00:	687f      	ldr	r7, [r7, #4]
 800fe02:	e7b6      	b.n	800fd72 <_malloc_r+0x4a>
 800fe04:	461a      	mov	r2, r3
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	d1fb      	bne.n	800fe04 <_malloc_r+0xdc>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	6053      	str	r3, [r2, #4]
 800fe10:	e7de      	b.n	800fdd0 <_malloc_r+0xa8>
 800fe12:	230c      	movs	r3, #12
 800fe14:	6033      	str	r3, [r6, #0]
 800fe16:	4630      	mov	r0, r6
 800fe18:	f000 f80c 	bl	800fe34 <__malloc_unlock>
 800fe1c:	e794      	b.n	800fd48 <_malloc_r+0x20>
 800fe1e:	6005      	str	r5, [r0, #0]
 800fe20:	e7d6      	b.n	800fdd0 <_malloc_r+0xa8>
 800fe22:	bf00      	nop
 800fe24:	20002214 	.word	0x20002214

0800fe28 <__malloc_lock>:
 800fe28:	4801      	ldr	r0, [pc, #4]	@ (800fe30 <__malloc_lock+0x8>)
 800fe2a:	f7ff b8b8 	b.w	800ef9e <__retarget_lock_acquire_recursive>
 800fe2e:	bf00      	nop
 800fe30:	2000220c 	.word	0x2000220c

0800fe34 <__malloc_unlock>:
 800fe34:	4801      	ldr	r0, [pc, #4]	@ (800fe3c <__malloc_unlock+0x8>)
 800fe36:	f7ff b8b3 	b.w	800efa0 <__retarget_lock_release_recursive>
 800fe3a:	bf00      	nop
 800fe3c:	2000220c 	.word	0x2000220c

0800fe40 <_Balloc>:
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	69c6      	ldr	r6, [r0, #28]
 800fe44:	4604      	mov	r4, r0
 800fe46:	460d      	mov	r5, r1
 800fe48:	b976      	cbnz	r6, 800fe68 <_Balloc+0x28>
 800fe4a:	2010      	movs	r0, #16
 800fe4c:	f7ff ff42 	bl	800fcd4 <malloc>
 800fe50:	4602      	mov	r2, r0
 800fe52:	61e0      	str	r0, [r4, #28]
 800fe54:	b920      	cbnz	r0, 800fe60 <_Balloc+0x20>
 800fe56:	4b18      	ldr	r3, [pc, #96]	@ (800feb8 <_Balloc+0x78>)
 800fe58:	4818      	ldr	r0, [pc, #96]	@ (800febc <_Balloc+0x7c>)
 800fe5a:	216b      	movs	r1, #107	@ 0x6b
 800fe5c:	f000 fe02 	bl	8010a64 <__assert_func>
 800fe60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe64:	6006      	str	r6, [r0, #0]
 800fe66:	60c6      	str	r6, [r0, #12]
 800fe68:	69e6      	ldr	r6, [r4, #28]
 800fe6a:	68f3      	ldr	r3, [r6, #12]
 800fe6c:	b183      	cbz	r3, 800fe90 <_Balloc+0x50>
 800fe6e:	69e3      	ldr	r3, [r4, #28]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe76:	b9b8      	cbnz	r0, 800fea8 <_Balloc+0x68>
 800fe78:	2101      	movs	r1, #1
 800fe7a:	fa01 f605 	lsl.w	r6, r1, r5
 800fe7e:	1d72      	adds	r2, r6, #5
 800fe80:	0092      	lsls	r2, r2, #2
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 fe0c 	bl	8010aa0 <_calloc_r>
 800fe88:	b160      	cbz	r0, 800fea4 <_Balloc+0x64>
 800fe8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe8e:	e00e      	b.n	800feae <_Balloc+0x6e>
 800fe90:	2221      	movs	r2, #33	@ 0x21
 800fe92:	2104      	movs	r1, #4
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 fe03 	bl	8010aa0 <_calloc_r>
 800fe9a:	69e3      	ldr	r3, [r4, #28]
 800fe9c:	60f0      	str	r0, [r6, #12]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e4      	bne.n	800fe6e <_Balloc+0x2e>
 800fea4:	2000      	movs	r0, #0
 800fea6:	bd70      	pop	{r4, r5, r6, pc}
 800fea8:	6802      	ldr	r2, [r0, #0]
 800feaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feae:	2300      	movs	r3, #0
 800feb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800feb4:	e7f7      	b.n	800fea6 <_Balloc+0x66>
 800feb6:	bf00      	nop
 800feb8:	08010e61 	.word	0x08010e61
 800febc:	08010ee1 	.word	0x08010ee1

0800fec0 <_Bfree>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	69c6      	ldr	r6, [r0, #28]
 800fec4:	4605      	mov	r5, r0
 800fec6:	460c      	mov	r4, r1
 800fec8:	b976      	cbnz	r6, 800fee8 <_Bfree+0x28>
 800feca:	2010      	movs	r0, #16
 800fecc:	f7ff ff02 	bl	800fcd4 <malloc>
 800fed0:	4602      	mov	r2, r0
 800fed2:	61e8      	str	r0, [r5, #28]
 800fed4:	b920      	cbnz	r0, 800fee0 <_Bfree+0x20>
 800fed6:	4b09      	ldr	r3, [pc, #36]	@ (800fefc <_Bfree+0x3c>)
 800fed8:	4809      	ldr	r0, [pc, #36]	@ (800ff00 <_Bfree+0x40>)
 800feda:	218f      	movs	r1, #143	@ 0x8f
 800fedc:	f000 fdc2 	bl	8010a64 <__assert_func>
 800fee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fee4:	6006      	str	r6, [r0, #0]
 800fee6:	60c6      	str	r6, [r0, #12]
 800fee8:	b13c      	cbz	r4, 800fefa <_Bfree+0x3a>
 800feea:	69eb      	ldr	r3, [r5, #28]
 800feec:	6862      	ldr	r2, [r4, #4]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fef4:	6021      	str	r1, [r4, #0]
 800fef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	08010e61 	.word	0x08010e61
 800ff00:	08010ee1 	.word	0x08010ee1

0800ff04 <__multadd>:
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	690d      	ldr	r5, [r1, #16]
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	461e      	mov	r6, r3
 800ff10:	f101 0c14 	add.w	ip, r1, #20
 800ff14:	2000      	movs	r0, #0
 800ff16:	f8dc 3000 	ldr.w	r3, [ip]
 800ff1a:	b299      	uxth	r1, r3
 800ff1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ff20:	0c1e      	lsrs	r6, r3, #16
 800ff22:	0c0b      	lsrs	r3, r1, #16
 800ff24:	fb02 3306 	mla	r3, r2, r6, r3
 800ff28:	b289      	uxth	r1, r1
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff30:	4285      	cmp	r5, r0
 800ff32:	f84c 1b04 	str.w	r1, [ip], #4
 800ff36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff3a:	dcec      	bgt.n	800ff16 <__multadd+0x12>
 800ff3c:	b30e      	cbz	r6, 800ff82 <__multadd+0x7e>
 800ff3e:	68a3      	ldr	r3, [r4, #8]
 800ff40:	42ab      	cmp	r3, r5
 800ff42:	dc19      	bgt.n	800ff78 <__multadd+0x74>
 800ff44:	6861      	ldr	r1, [r4, #4]
 800ff46:	4638      	mov	r0, r7
 800ff48:	3101      	adds	r1, #1
 800ff4a:	f7ff ff79 	bl	800fe40 <_Balloc>
 800ff4e:	4680      	mov	r8, r0
 800ff50:	b928      	cbnz	r0, 800ff5e <__multadd+0x5a>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4b0c      	ldr	r3, [pc, #48]	@ (800ff88 <__multadd+0x84>)
 800ff56:	480d      	ldr	r0, [pc, #52]	@ (800ff8c <__multadd+0x88>)
 800ff58:	21ba      	movs	r1, #186	@ 0xba
 800ff5a:	f000 fd83 	bl	8010a64 <__assert_func>
 800ff5e:	6922      	ldr	r2, [r4, #16]
 800ff60:	3202      	adds	r2, #2
 800ff62:	f104 010c 	add.w	r1, r4, #12
 800ff66:	0092      	lsls	r2, r2, #2
 800ff68:	300c      	adds	r0, #12
 800ff6a:	f000 fd6d 	bl	8010a48 <memcpy>
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff ffa5 	bl	800fec0 <_Bfree>
 800ff76:	4644      	mov	r4, r8
 800ff78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff7c:	3501      	adds	r5, #1
 800ff7e:	615e      	str	r6, [r3, #20]
 800ff80:	6125      	str	r5, [r4, #16]
 800ff82:	4620      	mov	r0, r4
 800ff84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff88:	08010ed0 	.word	0x08010ed0
 800ff8c:	08010ee1 	.word	0x08010ee1

0800ff90 <__hi0bits>:
 800ff90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff94:	4603      	mov	r3, r0
 800ff96:	bf36      	itet	cc
 800ff98:	0403      	lslcc	r3, r0, #16
 800ff9a:	2000      	movcs	r0, #0
 800ff9c:	2010      	movcc	r0, #16
 800ff9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ffa2:	bf3c      	itt	cc
 800ffa4:	021b      	lslcc	r3, r3, #8
 800ffa6:	3008      	addcc	r0, #8
 800ffa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffac:	bf3c      	itt	cc
 800ffae:	011b      	lslcc	r3, r3, #4
 800ffb0:	3004      	addcc	r0, #4
 800ffb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffb6:	bf3c      	itt	cc
 800ffb8:	009b      	lslcc	r3, r3, #2
 800ffba:	3002      	addcc	r0, #2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	db05      	blt.n	800ffcc <__hi0bits+0x3c>
 800ffc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ffc4:	f100 0001 	add.w	r0, r0, #1
 800ffc8:	bf08      	it	eq
 800ffca:	2020      	moveq	r0, #32
 800ffcc:	4770      	bx	lr

0800ffce <__lo0bits>:
 800ffce:	6803      	ldr	r3, [r0, #0]
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	f013 0007 	ands.w	r0, r3, #7
 800ffd6:	d00b      	beq.n	800fff0 <__lo0bits+0x22>
 800ffd8:	07d9      	lsls	r1, r3, #31
 800ffda:	d421      	bmi.n	8010020 <__lo0bits+0x52>
 800ffdc:	0798      	lsls	r0, r3, #30
 800ffde:	bf49      	itett	mi
 800ffe0:	085b      	lsrmi	r3, r3, #1
 800ffe2:	089b      	lsrpl	r3, r3, #2
 800ffe4:	2001      	movmi	r0, #1
 800ffe6:	6013      	strmi	r3, [r2, #0]
 800ffe8:	bf5c      	itt	pl
 800ffea:	6013      	strpl	r3, [r2, #0]
 800ffec:	2002      	movpl	r0, #2
 800ffee:	4770      	bx	lr
 800fff0:	b299      	uxth	r1, r3
 800fff2:	b909      	cbnz	r1, 800fff8 <__lo0bits+0x2a>
 800fff4:	0c1b      	lsrs	r3, r3, #16
 800fff6:	2010      	movs	r0, #16
 800fff8:	b2d9      	uxtb	r1, r3
 800fffa:	b909      	cbnz	r1, 8010000 <__lo0bits+0x32>
 800fffc:	3008      	adds	r0, #8
 800fffe:	0a1b      	lsrs	r3, r3, #8
 8010000:	0719      	lsls	r1, r3, #28
 8010002:	bf04      	itt	eq
 8010004:	091b      	lsreq	r3, r3, #4
 8010006:	3004      	addeq	r0, #4
 8010008:	0799      	lsls	r1, r3, #30
 801000a:	bf04      	itt	eq
 801000c:	089b      	lsreq	r3, r3, #2
 801000e:	3002      	addeq	r0, #2
 8010010:	07d9      	lsls	r1, r3, #31
 8010012:	d403      	bmi.n	801001c <__lo0bits+0x4e>
 8010014:	085b      	lsrs	r3, r3, #1
 8010016:	f100 0001 	add.w	r0, r0, #1
 801001a:	d003      	beq.n	8010024 <__lo0bits+0x56>
 801001c:	6013      	str	r3, [r2, #0]
 801001e:	4770      	bx	lr
 8010020:	2000      	movs	r0, #0
 8010022:	4770      	bx	lr
 8010024:	2020      	movs	r0, #32
 8010026:	4770      	bx	lr

08010028 <__i2b>:
 8010028:	b510      	push	{r4, lr}
 801002a:	460c      	mov	r4, r1
 801002c:	2101      	movs	r1, #1
 801002e:	f7ff ff07 	bl	800fe40 <_Balloc>
 8010032:	4602      	mov	r2, r0
 8010034:	b928      	cbnz	r0, 8010042 <__i2b+0x1a>
 8010036:	4b05      	ldr	r3, [pc, #20]	@ (801004c <__i2b+0x24>)
 8010038:	4805      	ldr	r0, [pc, #20]	@ (8010050 <__i2b+0x28>)
 801003a:	f240 1145 	movw	r1, #325	@ 0x145
 801003e:	f000 fd11 	bl	8010a64 <__assert_func>
 8010042:	2301      	movs	r3, #1
 8010044:	6144      	str	r4, [r0, #20]
 8010046:	6103      	str	r3, [r0, #16]
 8010048:	bd10      	pop	{r4, pc}
 801004a:	bf00      	nop
 801004c:	08010ed0 	.word	0x08010ed0
 8010050:	08010ee1 	.word	0x08010ee1

08010054 <__multiply>:
 8010054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	4614      	mov	r4, r2
 801005a:	690a      	ldr	r2, [r1, #16]
 801005c:	6923      	ldr	r3, [r4, #16]
 801005e:	429a      	cmp	r2, r3
 8010060:	bfa8      	it	ge
 8010062:	4623      	movge	r3, r4
 8010064:	460f      	mov	r7, r1
 8010066:	bfa4      	itt	ge
 8010068:	460c      	movge	r4, r1
 801006a:	461f      	movge	r7, r3
 801006c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010070:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	6861      	ldr	r1, [r4, #4]
 8010078:	eb0a 0609 	add.w	r6, sl, r9
 801007c:	42b3      	cmp	r3, r6
 801007e:	b085      	sub	sp, #20
 8010080:	bfb8      	it	lt
 8010082:	3101      	addlt	r1, #1
 8010084:	f7ff fedc 	bl	800fe40 <_Balloc>
 8010088:	b930      	cbnz	r0, 8010098 <__multiply+0x44>
 801008a:	4602      	mov	r2, r0
 801008c:	4b44      	ldr	r3, [pc, #272]	@ (80101a0 <__multiply+0x14c>)
 801008e:	4845      	ldr	r0, [pc, #276]	@ (80101a4 <__multiply+0x150>)
 8010090:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010094:	f000 fce6 	bl	8010a64 <__assert_func>
 8010098:	f100 0514 	add.w	r5, r0, #20
 801009c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100a0:	462b      	mov	r3, r5
 80100a2:	2200      	movs	r2, #0
 80100a4:	4543      	cmp	r3, r8
 80100a6:	d321      	bcc.n	80100ec <__multiply+0x98>
 80100a8:	f107 0114 	add.w	r1, r7, #20
 80100ac:	f104 0214 	add.w	r2, r4, #20
 80100b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80100b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80100b8:	9302      	str	r3, [sp, #8]
 80100ba:	1b13      	subs	r3, r2, r4
 80100bc:	3b15      	subs	r3, #21
 80100be:	f023 0303 	bic.w	r3, r3, #3
 80100c2:	3304      	adds	r3, #4
 80100c4:	f104 0715 	add.w	r7, r4, #21
 80100c8:	42ba      	cmp	r2, r7
 80100ca:	bf38      	it	cc
 80100cc:	2304      	movcc	r3, #4
 80100ce:	9301      	str	r3, [sp, #4]
 80100d0:	9b02      	ldr	r3, [sp, #8]
 80100d2:	9103      	str	r1, [sp, #12]
 80100d4:	428b      	cmp	r3, r1
 80100d6:	d80c      	bhi.n	80100f2 <__multiply+0x9e>
 80100d8:	2e00      	cmp	r6, #0
 80100da:	dd03      	ble.n	80100e4 <__multiply+0x90>
 80100dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d05b      	beq.n	801019c <__multiply+0x148>
 80100e4:	6106      	str	r6, [r0, #16]
 80100e6:	b005      	add	sp, #20
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ec:	f843 2b04 	str.w	r2, [r3], #4
 80100f0:	e7d8      	b.n	80100a4 <__multiply+0x50>
 80100f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80100f6:	f1ba 0f00 	cmp.w	sl, #0
 80100fa:	d024      	beq.n	8010146 <__multiply+0xf2>
 80100fc:	f104 0e14 	add.w	lr, r4, #20
 8010100:	46a9      	mov	r9, r5
 8010102:	f04f 0c00 	mov.w	ip, #0
 8010106:	f85e 7b04 	ldr.w	r7, [lr], #4
 801010a:	f8d9 3000 	ldr.w	r3, [r9]
 801010e:	fa1f fb87 	uxth.w	fp, r7
 8010112:	b29b      	uxth	r3, r3
 8010114:	fb0a 330b 	mla	r3, sl, fp, r3
 8010118:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801011c:	f8d9 7000 	ldr.w	r7, [r9]
 8010120:	4463      	add	r3, ip
 8010122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010126:	fb0a c70b 	mla	r7, sl, fp, ip
 801012a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801012e:	b29b      	uxth	r3, r3
 8010130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010134:	4572      	cmp	r2, lr
 8010136:	f849 3b04 	str.w	r3, [r9], #4
 801013a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801013e:	d8e2      	bhi.n	8010106 <__multiply+0xb2>
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	f845 c003 	str.w	ip, [r5, r3]
 8010146:	9b03      	ldr	r3, [sp, #12]
 8010148:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801014c:	3104      	adds	r1, #4
 801014e:	f1b9 0f00 	cmp.w	r9, #0
 8010152:	d021      	beq.n	8010198 <__multiply+0x144>
 8010154:	682b      	ldr	r3, [r5, #0]
 8010156:	f104 0c14 	add.w	ip, r4, #20
 801015a:	46ae      	mov	lr, r5
 801015c:	f04f 0a00 	mov.w	sl, #0
 8010160:	f8bc b000 	ldrh.w	fp, [ip]
 8010164:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010168:	fb09 770b 	mla	r7, r9, fp, r7
 801016c:	4457      	add	r7, sl
 801016e:	b29b      	uxth	r3, r3
 8010170:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010174:	f84e 3b04 	str.w	r3, [lr], #4
 8010178:	f85c 3b04 	ldr.w	r3, [ip], #4
 801017c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010180:	f8be 3000 	ldrh.w	r3, [lr]
 8010184:	fb09 330a 	mla	r3, r9, sl, r3
 8010188:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801018c:	4562      	cmp	r2, ip
 801018e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010192:	d8e5      	bhi.n	8010160 <__multiply+0x10c>
 8010194:	9f01      	ldr	r7, [sp, #4]
 8010196:	51eb      	str	r3, [r5, r7]
 8010198:	3504      	adds	r5, #4
 801019a:	e799      	b.n	80100d0 <__multiply+0x7c>
 801019c:	3e01      	subs	r6, #1
 801019e:	e79b      	b.n	80100d8 <__multiply+0x84>
 80101a0:	08010ed0 	.word	0x08010ed0
 80101a4:	08010ee1 	.word	0x08010ee1

080101a8 <__pow5mult>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	4615      	mov	r5, r2
 80101ae:	f012 0203 	ands.w	r2, r2, #3
 80101b2:	4607      	mov	r7, r0
 80101b4:	460e      	mov	r6, r1
 80101b6:	d007      	beq.n	80101c8 <__pow5mult+0x20>
 80101b8:	4c25      	ldr	r4, [pc, #148]	@ (8010250 <__pow5mult+0xa8>)
 80101ba:	3a01      	subs	r2, #1
 80101bc:	2300      	movs	r3, #0
 80101be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101c2:	f7ff fe9f 	bl	800ff04 <__multadd>
 80101c6:	4606      	mov	r6, r0
 80101c8:	10ad      	asrs	r5, r5, #2
 80101ca:	d03d      	beq.n	8010248 <__pow5mult+0xa0>
 80101cc:	69fc      	ldr	r4, [r7, #28]
 80101ce:	b97c      	cbnz	r4, 80101f0 <__pow5mult+0x48>
 80101d0:	2010      	movs	r0, #16
 80101d2:	f7ff fd7f 	bl	800fcd4 <malloc>
 80101d6:	4602      	mov	r2, r0
 80101d8:	61f8      	str	r0, [r7, #28]
 80101da:	b928      	cbnz	r0, 80101e8 <__pow5mult+0x40>
 80101dc:	4b1d      	ldr	r3, [pc, #116]	@ (8010254 <__pow5mult+0xac>)
 80101de:	481e      	ldr	r0, [pc, #120]	@ (8010258 <__pow5mult+0xb0>)
 80101e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80101e4:	f000 fc3e 	bl	8010a64 <__assert_func>
 80101e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101ec:	6004      	str	r4, [r0, #0]
 80101ee:	60c4      	str	r4, [r0, #12]
 80101f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80101f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101f8:	b94c      	cbnz	r4, 801020e <__pow5mult+0x66>
 80101fa:	f240 2171 	movw	r1, #625	@ 0x271
 80101fe:	4638      	mov	r0, r7
 8010200:	f7ff ff12 	bl	8010028 <__i2b>
 8010204:	2300      	movs	r3, #0
 8010206:	f8c8 0008 	str.w	r0, [r8, #8]
 801020a:	4604      	mov	r4, r0
 801020c:	6003      	str	r3, [r0, #0]
 801020e:	f04f 0900 	mov.w	r9, #0
 8010212:	07eb      	lsls	r3, r5, #31
 8010214:	d50a      	bpl.n	801022c <__pow5mult+0x84>
 8010216:	4631      	mov	r1, r6
 8010218:	4622      	mov	r2, r4
 801021a:	4638      	mov	r0, r7
 801021c:	f7ff ff1a 	bl	8010054 <__multiply>
 8010220:	4631      	mov	r1, r6
 8010222:	4680      	mov	r8, r0
 8010224:	4638      	mov	r0, r7
 8010226:	f7ff fe4b 	bl	800fec0 <_Bfree>
 801022a:	4646      	mov	r6, r8
 801022c:	106d      	asrs	r5, r5, #1
 801022e:	d00b      	beq.n	8010248 <__pow5mult+0xa0>
 8010230:	6820      	ldr	r0, [r4, #0]
 8010232:	b938      	cbnz	r0, 8010244 <__pow5mult+0x9c>
 8010234:	4622      	mov	r2, r4
 8010236:	4621      	mov	r1, r4
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff ff0b 	bl	8010054 <__multiply>
 801023e:	6020      	str	r0, [r4, #0]
 8010240:	f8c0 9000 	str.w	r9, [r0]
 8010244:	4604      	mov	r4, r0
 8010246:	e7e4      	b.n	8010212 <__pow5mult+0x6a>
 8010248:	4630      	mov	r0, r6
 801024a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801024e:	bf00      	nop
 8010250:	08010f3c 	.word	0x08010f3c
 8010254:	08010e61 	.word	0x08010e61
 8010258:	08010ee1 	.word	0x08010ee1

0801025c <__lshift>:
 801025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010260:	460c      	mov	r4, r1
 8010262:	6849      	ldr	r1, [r1, #4]
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	4607      	mov	r7, r0
 801026e:	4691      	mov	r9, r2
 8010270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010274:	f108 0601 	add.w	r6, r8, #1
 8010278:	42b3      	cmp	r3, r6
 801027a:	db0b      	blt.n	8010294 <__lshift+0x38>
 801027c:	4638      	mov	r0, r7
 801027e:	f7ff fddf 	bl	800fe40 <_Balloc>
 8010282:	4605      	mov	r5, r0
 8010284:	b948      	cbnz	r0, 801029a <__lshift+0x3e>
 8010286:	4602      	mov	r2, r0
 8010288:	4b28      	ldr	r3, [pc, #160]	@ (801032c <__lshift+0xd0>)
 801028a:	4829      	ldr	r0, [pc, #164]	@ (8010330 <__lshift+0xd4>)
 801028c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010290:	f000 fbe8 	bl	8010a64 <__assert_func>
 8010294:	3101      	adds	r1, #1
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	e7ee      	b.n	8010278 <__lshift+0x1c>
 801029a:	2300      	movs	r3, #0
 801029c:	f100 0114 	add.w	r1, r0, #20
 80102a0:	f100 0210 	add.w	r2, r0, #16
 80102a4:	4618      	mov	r0, r3
 80102a6:	4553      	cmp	r3, sl
 80102a8:	db33      	blt.n	8010312 <__lshift+0xb6>
 80102aa:	6920      	ldr	r0, [r4, #16]
 80102ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102b0:	f104 0314 	add.w	r3, r4, #20
 80102b4:	f019 091f 	ands.w	r9, r9, #31
 80102b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102c0:	d02b      	beq.n	801031a <__lshift+0xbe>
 80102c2:	f1c9 0e20 	rsb	lr, r9, #32
 80102c6:	468a      	mov	sl, r1
 80102c8:	2200      	movs	r2, #0
 80102ca:	6818      	ldr	r0, [r3, #0]
 80102cc:	fa00 f009 	lsl.w	r0, r0, r9
 80102d0:	4310      	orrs	r0, r2
 80102d2:	f84a 0b04 	str.w	r0, [sl], #4
 80102d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102da:	459c      	cmp	ip, r3
 80102dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80102e0:	d8f3      	bhi.n	80102ca <__lshift+0x6e>
 80102e2:	ebac 0304 	sub.w	r3, ip, r4
 80102e6:	3b15      	subs	r3, #21
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3304      	adds	r3, #4
 80102ee:	f104 0015 	add.w	r0, r4, #21
 80102f2:	4584      	cmp	ip, r0
 80102f4:	bf38      	it	cc
 80102f6:	2304      	movcc	r3, #4
 80102f8:	50ca      	str	r2, [r1, r3]
 80102fa:	b10a      	cbz	r2, 8010300 <__lshift+0xa4>
 80102fc:	f108 0602 	add.w	r6, r8, #2
 8010300:	3e01      	subs	r6, #1
 8010302:	4638      	mov	r0, r7
 8010304:	612e      	str	r6, [r5, #16]
 8010306:	4621      	mov	r1, r4
 8010308:	f7ff fdda 	bl	800fec0 <_Bfree>
 801030c:	4628      	mov	r0, r5
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	f842 0f04 	str.w	r0, [r2, #4]!
 8010316:	3301      	adds	r3, #1
 8010318:	e7c5      	b.n	80102a6 <__lshift+0x4a>
 801031a:	3904      	subs	r1, #4
 801031c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010320:	f841 2f04 	str.w	r2, [r1, #4]!
 8010324:	459c      	cmp	ip, r3
 8010326:	d8f9      	bhi.n	801031c <__lshift+0xc0>
 8010328:	e7ea      	b.n	8010300 <__lshift+0xa4>
 801032a:	bf00      	nop
 801032c:	08010ed0 	.word	0x08010ed0
 8010330:	08010ee1 	.word	0x08010ee1

08010334 <__mcmp>:
 8010334:	690a      	ldr	r2, [r1, #16]
 8010336:	4603      	mov	r3, r0
 8010338:	6900      	ldr	r0, [r0, #16]
 801033a:	1a80      	subs	r0, r0, r2
 801033c:	b530      	push	{r4, r5, lr}
 801033e:	d10e      	bne.n	801035e <__mcmp+0x2a>
 8010340:	3314      	adds	r3, #20
 8010342:	3114      	adds	r1, #20
 8010344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801034c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010354:	4295      	cmp	r5, r2
 8010356:	d003      	beq.n	8010360 <__mcmp+0x2c>
 8010358:	d205      	bcs.n	8010366 <__mcmp+0x32>
 801035a:	f04f 30ff 	mov.w	r0, #4294967295
 801035e:	bd30      	pop	{r4, r5, pc}
 8010360:	42a3      	cmp	r3, r4
 8010362:	d3f3      	bcc.n	801034c <__mcmp+0x18>
 8010364:	e7fb      	b.n	801035e <__mcmp+0x2a>
 8010366:	2001      	movs	r0, #1
 8010368:	e7f9      	b.n	801035e <__mcmp+0x2a>
	...

0801036c <__mdiff>:
 801036c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	4689      	mov	r9, r1
 8010372:	4606      	mov	r6, r0
 8010374:	4611      	mov	r1, r2
 8010376:	4648      	mov	r0, r9
 8010378:	4614      	mov	r4, r2
 801037a:	f7ff ffdb 	bl	8010334 <__mcmp>
 801037e:	1e05      	subs	r5, r0, #0
 8010380:	d112      	bne.n	80103a8 <__mdiff+0x3c>
 8010382:	4629      	mov	r1, r5
 8010384:	4630      	mov	r0, r6
 8010386:	f7ff fd5b 	bl	800fe40 <_Balloc>
 801038a:	4602      	mov	r2, r0
 801038c:	b928      	cbnz	r0, 801039a <__mdiff+0x2e>
 801038e:	4b3f      	ldr	r3, [pc, #252]	@ (801048c <__mdiff+0x120>)
 8010390:	f240 2137 	movw	r1, #567	@ 0x237
 8010394:	483e      	ldr	r0, [pc, #248]	@ (8010490 <__mdiff+0x124>)
 8010396:	f000 fb65 	bl	8010a64 <__assert_func>
 801039a:	2301      	movs	r3, #1
 801039c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103a0:	4610      	mov	r0, r2
 80103a2:	b003      	add	sp, #12
 80103a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a8:	bfbc      	itt	lt
 80103aa:	464b      	movlt	r3, r9
 80103ac:	46a1      	movlt	r9, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80103b4:	bfba      	itte	lt
 80103b6:	461c      	movlt	r4, r3
 80103b8:	2501      	movlt	r5, #1
 80103ba:	2500      	movge	r5, #0
 80103bc:	f7ff fd40 	bl	800fe40 <_Balloc>
 80103c0:	4602      	mov	r2, r0
 80103c2:	b918      	cbnz	r0, 80103cc <__mdiff+0x60>
 80103c4:	4b31      	ldr	r3, [pc, #196]	@ (801048c <__mdiff+0x120>)
 80103c6:	f240 2145 	movw	r1, #581	@ 0x245
 80103ca:	e7e3      	b.n	8010394 <__mdiff+0x28>
 80103cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80103d0:	6926      	ldr	r6, [r4, #16]
 80103d2:	60c5      	str	r5, [r0, #12]
 80103d4:	f109 0310 	add.w	r3, r9, #16
 80103d8:	f109 0514 	add.w	r5, r9, #20
 80103dc:	f104 0e14 	add.w	lr, r4, #20
 80103e0:	f100 0b14 	add.w	fp, r0, #20
 80103e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80103e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80103ec:	9301      	str	r3, [sp, #4]
 80103ee:	46d9      	mov	r9, fp
 80103f0:	f04f 0c00 	mov.w	ip, #0
 80103f4:	9b01      	ldr	r3, [sp, #4]
 80103f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80103fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	fa1f f38a 	uxth.w	r3, sl
 8010404:	4619      	mov	r1, r3
 8010406:	b283      	uxth	r3, r0
 8010408:	1acb      	subs	r3, r1, r3
 801040a:	0c00      	lsrs	r0, r0, #16
 801040c:	4463      	add	r3, ip
 801040e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010412:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010416:	b29b      	uxth	r3, r3
 8010418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801041c:	4576      	cmp	r6, lr
 801041e:	f849 3b04 	str.w	r3, [r9], #4
 8010422:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010426:	d8e5      	bhi.n	80103f4 <__mdiff+0x88>
 8010428:	1b33      	subs	r3, r6, r4
 801042a:	3b15      	subs	r3, #21
 801042c:	f023 0303 	bic.w	r3, r3, #3
 8010430:	3415      	adds	r4, #21
 8010432:	3304      	adds	r3, #4
 8010434:	42a6      	cmp	r6, r4
 8010436:	bf38      	it	cc
 8010438:	2304      	movcc	r3, #4
 801043a:	441d      	add	r5, r3
 801043c:	445b      	add	r3, fp
 801043e:	461e      	mov	r6, r3
 8010440:	462c      	mov	r4, r5
 8010442:	4544      	cmp	r4, r8
 8010444:	d30e      	bcc.n	8010464 <__mdiff+0xf8>
 8010446:	f108 0103 	add.w	r1, r8, #3
 801044a:	1b49      	subs	r1, r1, r5
 801044c:	f021 0103 	bic.w	r1, r1, #3
 8010450:	3d03      	subs	r5, #3
 8010452:	45a8      	cmp	r8, r5
 8010454:	bf38      	it	cc
 8010456:	2100      	movcc	r1, #0
 8010458:	440b      	add	r3, r1
 801045a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801045e:	b191      	cbz	r1, 8010486 <__mdiff+0x11a>
 8010460:	6117      	str	r7, [r2, #16]
 8010462:	e79d      	b.n	80103a0 <__mdiff+0x34>
 8010464:	f854 1b04 	ldr.w	r1, [r4], #4
 8010468:	46e6      	mov	lr, ip
 801046a:	0c08      	lsrs	r0, r1, #16
 801046c:	fa1c fc81 	uxtah	ip, ip, r1
 8010470:	4471      	add	r1, lr
 8010472:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010476:	b289      	uxth	r1, r1
 8010478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801047c:	f846 1b04 	str.w	r1, [r6], #4
 8010480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010484:	e7dd      	b.n	8010442 <__mdiff+0xd6>
 8010486:	3f01      	subs	r7, #1
 8010488:	e7e7      	b.n	801045a <__mdiff+0xee>
 801048a:	bf00      	nop
 801048c:	08010ed0 	.word	0x08010ed0
 8010490:	08010ee1 	.word	0x08010ee1

08010494 <__d2b>:
 8010494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010498:	460f      	mov	r7, r1
 801049a:	2101      	movs	r1, #1
 801049c:	ec59 8b10 	vmov	r8, r9, d0
 80104a0:	4616      	mov	r6, r2
 80104a2:	f7ff fccd 	bl	800fe40 <_Balloc>
 80104a6:	4604      	mov	r4, r0
 80104a8:	b930      	cbnz	r0, 80104b8 <__d2b+0x24>
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b23      	ldr	r3, [pc, #140]	@ (801053c <__d2b+0xa8>)
 80104ae:	4824      	ldr	r0, [pc, #144]	@ (8010540 <__d2b+0xac>)
 80104b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80104b4:	f000 fad6 	bl	8010a64 <__assert_func>
 80104b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104c0:	b10d      	cbz	r5, 80104c6 <__d2b+0x32>
 80104c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	f1b8 0300 	subs.w	r3, r8, #0
 80104cc:	d023      	beq.n	8010516 <__d2b+0x82>
 80104ce:	4668      	mov	r0, sp
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	f7ff fd7c 	bl	800ffce <__lo0bits>
 80104d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104da:	b1d0      	cbz	r0, 8010512 <__d2b+0x7e>
 80104dc:	f1c0 0320 	rsb	r3, r0, #32
 80104e0:	fa02 f303 	lsl.w	r3, r2, r3
 80104e4:	430b      	orrs	r3, r1
 80104e6:	40c2      	lsrs	r2, r0
 80104e8:	6163      	str	r3, [r4, #20]
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	9b01      	ldr	r3, [sp, #4]
 80104ee:	61a3      	str	r3, [r4, #24]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bf0c      	ite	eq
 80104f4:	2201      	moveq	r2, #1
 80104f6:	2202      	movne	r2, #2
 80104f8:	6122      	str	r2, [r4, #16]
 80104fa:	b1a5      	cbz	r5, 8010526 <__d2b+0x92>
 80104fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010500:	4405      	add	r5, r0
 8010502:	603d      	str	r5, [r7, #0]
 8010504:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010508:	6030      	str	r0, [r6, #0]
 801050a:	4620      	mov	r0, r4
 801050c:	b003      	add	sp, #12
 801050e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010512:	6161      	str	r1, [r4, #20]
 8010514:	e7ea      	b.n	80104ec <__d2b+0x58>
 8010516:	a801      	add	r0, sp, #4
 8010518:	f7ff fd59 	bl	800ffce <__lo0bits>
 801051c:	9b01      	ldr	r3, [sp, #4]
 801051e:	6163      	str	r3, [r4, #20]
 8010520:	3020      	adds	r0, #32
 8010522:	2201      	movs	r2, #1
 8010524:	e7e8      	b.n	80104f8 <__d2b+0x64>
 8010526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801052a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801052e:	6038      	str	r0, [r7, #0]
 8010530:	6918      	ldr	r0, [r3, #16]
 8010532:	f7ff fd2d 	bl	800ff90 <__hi0bits>
 8010536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801053a:	e7e5      	b.n	8010508 <__d2b+0x74>
 801053c:	08010ed0 	.word	0x08010ed0
 8010540:	08010ee1 	.word	0x08010ee1

08010544 <__sfputc_r>:
 8010544:	6893      	ldr	r3, [r2, #8]
 8010546:	3b01      	subs	r3, #1
 8010548:	2b00      	cmp	r3, #0
 801054a:	b410      	push	{r4}
 801054c:	6093      	str	r3, [r2, #8]
 801054e:	da08      	bge.n	8010562 <__sfputc_r+0x1e>
 8010550:	6994      	ldr	r4, [r2, #24]
 8010552:	42a3      	cmp	r3, r4
 8010554:	db01      	blt.n	801055a <__sfputc_r+0x16>
 8010556:	290a      	cmp	r1, #10
 8010558:	d103      	bne.n	8010562 <__sfputc_r+0x1e>
 801055a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801055e:	f7fe bc0c 	b.w	800ed7a <__swbuf_r>
 8010562:	6813      	ldr	r3, [r2, #0]
 8010564:	1c58      	adds	r0, r3, #1
 8010566:	6010      	str	r0, [r2, #0]
 8010568:	7019      	strb	r1, [r3, #0]
 801056a:	4608      	mov	r0, r1
 801056c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010570:	4770      	bx	lr

08010572 <__sfputs_r>:
 8010572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010574:	4606      	mov	r6, r0
 8010576:	460f      	mov	r7, r1
 8010578:	4614      	mov	r4, r2
 801057a:	18d5      	adds	r5, r2, r3
 801057c:	42ac      	cmp	r4, r5
 801057e:	d101      	bne.n	8010584 <__sfputs_r+0x12>
 8010580:	2000      	movs	r0, #0
 8010582:	e007      	b.n	8010594 <__sfputs_r+0x22>
 8010584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010588:	463a      	mov	r2, r7
 801058a:	4630      	mov	r0, r6
 801058c:	f7ff ffda 	bl	8010544 <__sfputc_r>
 8010590:	1c43      	adds	r3, r0, #1
 8010592:	d1f3      	bne.n	801057c <__sfputs_r+0xa>
 8010594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010598 <_vfiprintf_r>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	460d      	mov	r5, r1
 801059e:	b09d      	sub	sp, #116	@ 0x74
 80105a0:	4614      	mov	r4, r2
 80105a2:	4698      	mov	r8, r3
 80105a4:	4606      	mov	r6, r0
 80105a6:	b118      	cbz	r0, 80105b0 <_vfiprintf_r+0x18>
 80105a8:	6a03      	ldr	r3, [r0, #32]
 80105aa:	b90b      	cbnz	r3, 80105b0 <_vfiprintf_r+0x18>
 80105ac:	f7fe fafc 	bl	800eba8 <__sinit>
 80105b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105b2:	07d9      	lsls	r1, r3, #31
 80105b4:	d405      	bmi.n	80105c2 <_vfiprintf_r+0x2a>
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	059a      	lsls	r2, r3, #22
 80105ba:	d402      	bmi.n	80105c2 <_vfiprintf_r+0x2a>
 80105bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105be:	f7fe fcee 	bl	800ef9e <__retarget_lock_acquire_recursive>
 80105c2:	89ab      	ldrh	r3, [r5, #12]
 80105c4:	071b      	lsls	r3, r3, #28
 80105c6:	d501      	bpl.n	80105cc <_vfiprintf_r+0x34>
 80105c8:	692b      	ldr	r3, [r5, #16]
 80105ca:	b99b      	cbnz	r3, 80105f4 <_vfiprintf_r+0x5c>
 80105cc:	4629      	mov	r1, r5
 80105ce:	4630      	mov	r0, r6
 80105d0:	f7fe fc12 	bl	800edf8 <__swsetup_r>
 80105d4:	b170      	cbz	r0, 80105f4 <_vfiprintf_r+0x5c>
 80105d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105d8:	07dc      	lsls	r4, r3, #31
 80105da:	d504      	bpl.n	80105e6 <_vfiprintf_r+0x4e>
 80105dc:	f04f 30ff 	mov.w	r0, #4294967295
 80105e0:	b01d      	add	sp, #116	@ 0x74
 80105e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e6:	89ab      	ldrh	r3, [r5, #12]
 80105e8:	0598      	lsls	r0, r3, #22
 80105ea:	d4f7      	bmi.n	80105dc <_vfiprintf_r+0x44>
 80105ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105ee:	f7fe fcd7 	bl	800efa0 <__retarget_lock_release_recursive>
 80105f2:	e7f3      	b.n	80105dc <_vfiprintf_r+0x44>
 80105f4:	2300      	movs	r3, #0
 80105f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f8:	2320      	movs	r3, #32
 80105fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010602:	2330      	movs	r3, #48	@ 0x30
 8010604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107b4 <_vfiprintf_r+0x21c>
 8010608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801060c:	f04f 0901 	mov.w	r9, #1
 8010610:	4623      	mov	r3, r4
 8010612:	469a      	mov	sl, r3
 8010614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010618:	b10a      	cbz	r2, 801061e <_vfiprintf_r+0x86>
 801061a:	2a25      	cmp	r2, #37	@ 0x25
 801061c:	d1f9      	bne.n	8010612 <_vfiprintf_r+0x7a>
 801061e:	ebba 0b04 	subs.w	fp, sl, r4
 8010622:	d00b      	beq.n	801063c <_vfiprintf_r+0xa4>
 8010624:	465b      	mov	r3, fp
 8010626:	4622      	mov	r2, r4
 8010628:	4629      	mov	r1, r5
 801062a:	4630      	mov	r0, r6
 801062c:	f7ff ffa1 	bl	8010572 <__sfputs_r>
 8010630:	3001      	adds	r0, #1
 8010632:	f000 80a7 	beq.w	8010784 <_vfiprintf_r+0x1ec>
 8010636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010638:	445a      	add	r2, fp
 801063a:	9209      	str	r2, [sp, #36]	@ 0x24
 801063c:	f89a 3000 	ldrb.w	r3, [sl]
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 809f 	beq.w	8010784 <_vfiprintf_r+0x1ec>
 8010646:	2300      	movs	r3, #0
 8010648:	f04f 32ff 	mov.w	r2, #4294967295
 801064c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010650:	f10a 0a01 	add.w	sl, sl, #1
 8010654:	9304      	str	r3, [sp, #16]
 8010656:	9307      	str	r3, [sp, #28]
 8010658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801065c:	931a      	str	r3, [sp, #104]	@ 0x68
 801065e:	4654      	mov	r4, sl
 8010660:	2205      	movs	r2, #5
 8010662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010666:	4853      	ldr	r0, [pc, #332]	@ (80107b4 <_vfiprintf_r+0x21c>)
 8010668:	f7ef fdba 	bl	80001e0 <memchr>
 801066c:	9a04      	ldr	r2, [sp, #16]
 801066e:	b9d8      	cbnz	r0, 80106a8 <_vfiprintf_r+0x110>
 8010670:	06d1      	lsls	r1, r2, #27
 8010672:	bf44      	itt	mi
 8010674:	2320      	movmi	r3, #32
 8010676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801067a:	0713      	lsls	r3, r2, #28
 801067c:	bf44      	itt	mi
 801067e:	232b      	movmi	r3, #43	@ 0x2b
 8010680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010684:	f89a 3000 	ldrb.w	r3, [sl]
 8010688:	2b2a      	cmp	r3, #42	@ 0x2a
 801068a:	d015      	beq.n	80106b8 <_vfiprintf_r+0x120>
 801068c:	9a07      	ldr	r2, [sp, #28]
 801068e:	4654      	mov	r4, sl
 8010690:	2000      	movs	r0, #0
 8010692:	f04f 0c0a 	mov.w	ip, #10
 8010696:	4621      	mov	r1, r4
 8010698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801069c:	3b30      	subs	r3, #48	@ 0x30
 801069e:	2b09      	cmp	r3, #9
 80106a0:	d94b      	bls.n	801073a <_vfiprintf_r+0x1a2>
 80106a2:	b1b0      	cbz	r0, 80106d2 <_vfiprintf_r+0x13a>
 80106a4:	9207      	str	r2, [sp, #28]
 80106a6:	e014      	b.n	80106d2 <_vfiprintf_r+0x13a>
 80106a8:	eba0 0308 	sub.w	r3, r0, r8
 80106ac:	fa09 f303 	lsl.w	r3, r9, r3
 80106b0:	4313      	orrs	r3, r2
 80106b2:	9304      	str	r3, [sp, #16]
 80106b4:	46a2      	mov	sl, r4
 80106b6:	e7d2      	b.n	801065e <_vfiprintf_r+0xc6>
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	1d19      	adds	r1, r3, #4
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	9103      	str	r1, [sp, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	bfbb      	ittet	lt
 80106c4:	425b      	neglt	r3, r3
 80106c6:	f042 0202 	orrlt.w	r2, r2, #2
 80106ca:	9307      	strge	r3, [sp, #28]
 80106cc:	9307      	strlt	r3, [sp, #28]
 80106ce:	bfb8      	it	lt
 80106d0:	9204      	strlt	r2, [sp, #16]
 80106d2:	7823      	ldrb	r3, [r4, #0]
 80106d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80106d6:	d10a      	bne.n	80106ee <_vfiprintf_r+0x156>
 80106d8:	7863      	ldrb	r3, [r4, #1]
 80106da:	2b2a      	cmp	r3, #42	@ 0x2a
 80106dc:	d132      	bne.n	8010744 <_vfiprintf_r+0x1ac>
 80106de:	9b03      	ldr	r3, [sp, #12]
 80106e0:	1d1a      	adds	r2, r3, #4
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	9203      	str	r2, [sp, #12]
 80106e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106ea:	3402      	adds	r4, #2
 80106ec:	9305      	str	r3, [sp, #20]
 80106ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107c4 <_vfiprintf_r+0x22c>
 80106f2:	7821      	ldrb	r1, [r4, #0]
 80106f4:	2203      	movs	r2, #3
 80106f6:	4650      	mov	r0, sl
 80106f8:	f7ef fd72 	bl	80001e0 <memchr>
 80106fc:	b138      	cbz	r0, 801070e <_vfiprintf_r+0x176>
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	eba0 000a 	sub.w	r0, r0, sl
 8010704:	2240      	movs	r2, #64	@ 0x40
 8010706:	4082      	lsls	r2, r0
 8010708:	4313      	orrs	r3, r2
 801070a:	3401      	adds	r4, #1
 801070c:	9304      	str	r3, [sp, #16]
 801070e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010712:	4829      	ldr	r0, [pc, #164]	@ (80107b8 <_vfiprintf_r+0x220>)
 8010714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010718:	2206      	movs	r2, #6
 801071a:	f7ef fd61 	bl	80001e0 <memchr>
 801071e:	2800      	cmp	r0, #0
 8010720:	d03f      	beq.n	80107a2 <_vfiprintf_r+0x20a>
 8010722:	4b26      	ldr	r3, [pc, #152]	@ (80107bc <_vfiprintf_r+0x224>)
 8010724:	bb1b      	cbnz	r3, 801076e <_vfiprintf_r+0x1d6>
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	3307      	adds	r3, #7
 801072a:	f023 0307 	bic.w	r3, r3, #7
 801072e:	3308      	adds	r3, #8
 8010730:	9303      	str	r3, [sp, #12]
 8010732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010734:	443b      	add	r3, r7
 8010736:	9309      	str	r3, [sp, #36]	@ 0x24
 8010738:	e76a      	b.n	8010610 <_vfiprintf_r+0x78>
 801073a:	fb0c 3202 	mla	r2, ip, r2, r3
 801073e:	460c      	mov	r4, r1
 8010740:	2001      	movs	r0, #1
 8010742:	e7a8      	b.n	8010696 <_vfiprintf_r+0xfe>
 8010744:	2300      	movs	r3, #0
 8010746:	3401      	adds	r4, #1
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	4619      	mov	r1, r3
 801074c:	f04f 0c0a 	mov.w	ip, #10
 8010750:	4620      	mov	r0, r4
 8010752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010756:	3a30      	subs	r2, #48	@ 0x30
 8010758:	2a09      	cmp	r2, #9
 801075a:	d903      	bls.n	8010764 <_vfiprintf_r+0x1cc>
 801075c:	2b00      	cmp	r3, #0
 801075e:	d0c6      	beq.n	80106ee <_vfiprintf_r+0x156>
 8010760:	9105      	str	r1, [sp, #20]
 8010762:	e7c4      	b.n	80106ee <_vfiprintf_r+0x156>
 8010764:	fb0c 2101 	mla	r1, ip, r1, r2
 8010768:	4604      	mov	r4, r0
 801076a:	2301      	movs	r3, #1
 801076c:	e7f0      	b.n	8010750 <_vfiprintf_r+0x1b8>
 801076e:	ab03      	add	r3, sp, #12
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	462a      	mov	r2, r5
 8010774:	4b12      	ldr	r3, [pc, #72]	@ (80107c0 <_vfiprintf_r+0x228>)
 8010776:	a904      	add	r1, sp, #16
 8010778:	4630      	mov	r0, r6
 801077a:	f7fd fdd1 	bl	800e320 <_printf_float>
 801077e:	4607      	mov	r7, r0
 8010780:	1c78      	adds	r0, r7, #1
 8010782:	d1d6      	bne.n	8010732 <_vfiprintf_r+0x19a>
 8010784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010786:	07d9      	lsls	r1, r3, #31
 8010788:	d405      	bmi.n	8010796 <_vfiprintf_r+0x1fe>
 801078a:	89ab      	ldrh	r3, [r5, #12]
 801078c:	059a      	lsls	r2, r3, #22
 801078e:	d402      	bmi.n	8010796 <_vfiprintf_r+0x1fe>
 8010790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010792:	f7fe fc05 	bl	800efa0 <__retarget_lock_release_recursive>
 8010796:	89ab      	ldrh	r3, [r5, #12]
 8010798:	065b      	lsls	r3, r3, #25
 801079a:	f53f af1f 	bmi.w	80105dc <_vfiprintf_r+0x44>
 801079e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107a0:	e71e      	b.n	80105e0 <_vfiprintf_r+0x48>
 80107a2:	ab03      	add	r3, sp, #12
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	462a      	mov	r2, r5
 80107a8:	4b05      	ldr	r3, [pc, #20]	@ (80107c0 <_vfiprintf_r+0x228>)
 80107aa:	a904      	add	r1, sp, #16
 80107ac:	4630      	mov	r0, r6
 80107ae:	f7fe f84f 	bl	800e850 <_printf_i>
 80107b2:	e7e4      	b.n	801077e <_vfiprintf_r+0x1e6>
 80107b4:	08011038 	.word	0x08011038
 80107b8:	08011042 	.word	0x08011042
 80107bc:	0800e321 	.word	0x0800e321
 80107c0:	08010573 	.word	0x08010573
 80107c4:	0801103e 	.word	0x0801103e

080107c8 <__sflush_r>:
 80107c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d0:	0716      	lsls	r6, r2, #28
 80107d2:	4605      	mov	r5, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	d454      	bmi.n	8010882 <__sflush_r+0xba>
 80107d8:	684b      	ldr	r3, [r1, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dc02      	bgt.n	80107e4 <__sflush_r+0x1c>
 80107de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	dd48      	ble.n	8010876 <__sflush_r+0xae>
 80107e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	d045      	beq.n	8010876 <__sflush_r+0xae>
 80107ea:	2300      	movs	r3, #0
 80107ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80107f0:	682f      	ldr	r7, [r5, #0]
 80107f2:	6a21      	ldr	r1, [r4, #32]
 80107f4:	602b      	str	r3, [r5, #0]
 80107f6:	d030      	beq.n	801085a <__sflush_r+0x92>
 80107f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	0759      	lsls	r1, r3, #29
 80107fe:	d505      	bpl.n	801080c <__sflush_r+0x44>
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	1ad2      	subs	r2, r2, r3
 8010804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010806:	b10b      	cbz	r3, 801080c <__sflush_r+0x44>
 8010808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801080a:	1ad2      	subs	r2, r2, r3
 801080c:	2300      	movs	r3, #0
 801080e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010810:	6a21      	ldr	r1, [r4, #32]
 8010812:	4628      	mov	r0, r5
 8010814:	47b0      	blx	r6
 8010816:	1c43      	adds	r3, r0, #1
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	d106      	bne.n	801082a <__sflush_r+0x62>
 801081c:	6829      	ldr	r1, [r5, #0]
 801081e:	291d      	cmp	r1, #29
 8010820:	d82b      	bhi.n	801087a <__sflush_r+0xb2>
 8010822:	4a2a      	ldr	r2, [pc, #168]	@ (80108cc <__sflush_r+0x104>)
 8010824:	410a      	asrs	r2, r1
 8010826:	07d6      	lsls	r6, r2, #31
 8010828:	d427      	bmi.n	801087a <__sflush_r+0xb2>
 801082a:	2200      	movs	r2, #0
 801082c:	6062      	str	r2, [r4, #4]
 801082e:	04d9      	lsls	r1, r3, #19
 8010830:	6922      	ldr	r2, [r4, #16]
 8010832:	6022      	str	r2, [r4, #0]
 8010834:	d504      	bpl.n	8010840 <__sflush_r+0x78>
 8010836:	1c42      	adds	r2, r0, #1
 8010838:	d101      	bne.n	801083e <__sflush_r+0x76>
 801083a:	682b      	ldr	r3, [r5, #0]
 801083c:	b903      	cbnz	r3, 8010840 <__sflush_r+0x78>
 801083e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010842:	602f      	str	r7, [r5, #0]
 8010844:	b1b9      	cbz	r1, 8010876 <__sflush_r+0xae>
 8010846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801084a:	4299      	cmp	r1, r3
 801084c:	d002      	beq.n	8010854 <__sflush_r+0x8c>
 801084e:	4628      	mov	r0, r5
 8010850:	f7ff f9f6 	bl	800fc40 <_free_r>
 8010854:	2300      	movs	r3, #0
 8010856:	6363      	str	r3, [r4, #52]	@ 0x34
 8010858:	e00d      	b.n	8010876 <__sflush_r+0xae>
 801085a:	2301      	movs	r3, #1
 801085c:	4628      	mov	r0, r5
 801085e:	47b0      	blx	r6
 8010860:	4602      	mov	r2, r0
 8010862:	1c50      	adds	r0, r2, #1
 8010864:	d1c9      	bne.n	80107fa <__sflush_r+0x32>
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d0c6      	beq.n	80107fa <__sflush_r+0x32>
 801086c:	2b1d      	cmp	r3, #29
 801086e:	d001      	beq.n	8010874 <__sflush_r+0xac>
 8010870:	2b16      	cmp	r3, #22
 8010872:	d11e      	bne.n	80108b2 <__sflush_r+0xea>
 8010874:	602f      	str	r7, [r5, #0]
 8010876:	2000      	movs	r0, #0
 8010878:	e022      	b.n	80108c0 <__sflush_r+0xf8>
 801087a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801087e:	b21b      	sxth	r3, r3
 8010880:	e01b      	b.n	80108ba <__sflush_r+0xf2>
 8010882:	690f      	ldr	r7, [r1, #16]
 8010884:	2f00      	cmp	r7, #0
 8010886:	d0f6      	beq.n	8010876 <__sflush_r+0xae>
 8010888:	0793      	lsls	r3, r2, #30
 801088a:	680e      	ldr	r6, [r1, #0]
 801088c:	bf08      	it	eq
 801088e:	694b      	ldreq	r3, [r1, #20]
 8010890:	600f      	str	r7, [r1, #0]
 8010892:	bf18      	it	ne
 8010894:	2300      	movne	r3, #0
 8010896:	eba6 0807 	sub.w	r8, r6, r7
 801089a:	608b      	str	r3, [r1, #8]
 801089c:	f1b8 0f00 	cmp.w	r8, #0
 80108a0:	dde9      	ble.n	8010876 <__sflush_r+0xae>
 80108a2:	6a21      	ldr	r1, [r4, #32]
 80108a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80108a6:	4643      	mov	r3, r8
 80108a8:	463a      	mov	r2, r7
 80108aa:	4628      	mov	r0, r5
 80108ac:	47b0      	blx	r6
 80108ae:	2800      	cmp	r0, #0
 80108b0:	dc08      	bgt.n	80108c4 <__sflush_r+0xfc>
 80108b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108ba:	81a3      	strh	r3, [r4, #12]
 80108bc:	f04f 30ff 	mov.w	r0, #4294967295
 80108c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c4:	4407      	add	r7, r0
 80108c6:	eba8 0800 	sub.w	r8, r8, r0
 80108ca:	e7e7      	b.n	801089c <__sflush_r+0xd4>
 80108cc:	dfbffffe 	.word	0xdfbffffe

080108d0 <_fflush_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	690b      	ldr	r3, [r1, #16]
 80108d4:	4605      	mov	r5, r0
 80108d6:	460c      	mov	r4, r1
 80108d8:	b913      	cbnz	r3, 80108e0 <_fflush_r+0x10>
 80108da:	2500      	movs	r5, #0
 80108dc:	4628      	mov	r0, r5
 80108de:	bd38      	pop	{r3, r4, r5, pc}
 80108e0:	b118      	cbz	r0, 80108ea <_fflush_r+0x1a>
 80108e2:	6a03      	ldr	r3, [r0, #32]
 80108e4:	b90b      	cbnz	r3, 80108ea <_fflush_r+0x1a>
 80108e6:	f7fe f95f 	bl	800eba8 <__sinit>
 80108ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d0f3      	beq.n	80108da <_fflush_r+0xa>
 80108f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80108f4:	07d0      	lsls	r0, r2, #31
 80108f6:	d404      	bmi.n	8010902 <_fflush_r+0x32>
 80108f8:	0599      	lsls	r1, r3, #22
 80108fa:	d402      	bmi.n	8010902 <_fflush_r+0x32>
 80108fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108fe:	f7fe fb4e 	bl	800ef9e <__retarget_lock_acquire_recursive>
 8010902:	4628      	mov	r0, r5
 8010904:	4621      	mov	r1, r4
 8010906:	f7ff ff5f 	bl	80107c8 <__sflush_r>
 801090a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801090c:	07da      	lsls	r2, r3, #31
 801090e:	4605      	mov	r5, r0
 8010910:	d4e4      	bmi.n	80108dc <_fflush_r+0xc>
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	059b      	lsls	r3, r3, #22
 8010916:	d4e1      	bmi.n	80108dc <_fflush_r+0xc>
 8010918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801091a:	f7fe fb41 	bl	800efa0 <__retarget_lock_release_recursive>
 801091e:	e7dd      	b.n	80108dc <_fflush_r+0xc>

08010920 <__swhatbuf_r>:
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	460c      	mov	r4, r1
 8010924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010928:	2900      	cmp	r1, #0
 801092a:	b096      	sub	sp, #88	@ 0x58
 801092c:	4615      	mov	r5, r2
 801092e:	461e      	mov	r6, r3
 8010930:	da0d      	bge.n	801094e <__swhatbuf_r+0x2e>
 8010932:	89a3      	ldrh	r3, [r4, #12]
 8010934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010938:	f04f 0100 	mov.w	r1, #0
 801093c:	bf14      	ite	ne
 801093e:	2340      	movne	r3, #64	@ 0x40
 8010940:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010944:	2000      	movs	r0, #0
 8010946:	6031      	str	r1, [r6, #0]
 8010948:	602b      	str	r3, [r5, #0]
 801094a:	b016      	add	sp, #88	@ 0x58
 801094c:	bd70      	pop	{r4, r5, r6, pc}
 801094e:	466a      	mov	r2, sp
 8010950:	f000 f848 	bl	80109e4 <_fstat_r>
 8010954:	2800      	cmp	r0, #0
 8010956:	dbec      	blt.n	8010932 <__swhatbuf_r+0x12>
 8010958:	9901      	ldr	r1, [sp, #4]
 801095a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801095e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010962:	4259      	negs	r1, r3
 8010964:	4159      	adcs	r1, r3
 8010966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801096a:	e7eb      	b.n	8010944 <__swhatbuf_r+0x24>

0801096c <__smakebuf_r>:
 801096c:	898b      	ldrh	r3, [r1, #12]
 801096e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010970:	079d      	lsls	r5, r3, #30
 8010972:	4606      	mov	r6, r0
 8010974:	460c      	mov	r4, r1
 8010976:	d507      	bpl.n	8010988 <__smakebuf_r+0x1c>
 8010978:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	6123      	str	r3, [r4, #16]
 8010980:	2301      	movs	r3, #1
 8010982:	6163      	str	r3, [r4, #20]
 8010984:	b003      	add	sp, #12
 8010986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010988:	ab01      	add	r3, sp, #4
 801098a:	466a      	mov	r2, sp
 801098c:	f7ff ffc8 	bl	8010920 <__swhatbuf_r>
 8010990:	9f00      	ldr	r7, [sp, #0]
 8010992:	4605      	mov	r5, r0
 8010994:	4639      	mov	r1, r7
 8010996:	4630      	mov	r0, r6
 8010998:	f7ff f9c6 	bl	800fd28 <_malloc_r>
 801099c:	b948      	cbnz	r0, 80109b2 <__smakebuf_r+0x46>
 801099e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109a2:	059a      	lsls	r2, r3, #22
 80109a4:	d4ee      	bmi.n	8010984 <__smakebuf_r+0x18>
 80109a6:	f023 0303 	bic.w	r3, r3, #3
 80109aa:	f043 0302 	orr.w	r3, r3, #2
 80109ae:	81a3      	strh	r3, [r4, #12]
 80109b0:	e7e2      	b.n	8010978 <__smakebuf_r+0xc>
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	6020      	str	r0, [r4, #0]
 80109b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ba:	81a3      	strh	r3, [r4, #12]
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109c2:	b15b      	cbz	r3, 80109dc <__smakebuf_r+0x70>
 80109c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109c8:	4630      	mov	r0, r6
 80109ca:	f000 f81d 	bl	8010a08 <_isatty_r>
 80109ce:	b128      	cbz	r0, 80109dc <__smakebuf_r+0x70>
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	f023 0303 	bic.w	r3, r3, #3
 80109d6:	f043 0301 	orr.w	r3, r3, #1
 80109da:	81a3      	strh	r3, [r4, #12]
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	431d      	orrs	r5, r3
 80109e0:	81a5      	strh	r5, [r4, #12]
 80109e2:	e7cf      	b.n	8010984 <__smakebuf_r+0x18>

080109e4 <_fstat_r>:
 80109e4:	b538      	push	{r3, r4, r5, lr}
 80109e6:	4d07      	ldr	r5, [pc, #28]	@ (8010a04 <_fstat_r+0x20>)
 80109e8:	2300      	movs	r3, #0
 80109ea:	4604      	mov	r4, r0
 80109ec:	4608      	mov	r0, r1
 80109ee:	4611      	mov	r1, r2
 80109f0:	602b      	str	r3, [r5, #0]
 80109f2:	f7f1 fbeb 	bl	80021cc <_fstat>
 80109f6:	1c43      	adds	r3, r0, #1
 80109f8:	d102      	bne.n	8010a00 <_fstat_r+0x1c>
 80109fa:	682b      	ldr	r3, [r5, #0]
 80109fc:	b103      	cbz	r3, 8010a00 <_fstat_r+0x1c>
 80109fe:	6023      	str	r3, [r4, #0]
 8010a00:	bd38      	pop	{r3, r4, r5, pc}
 8010a02:	bf00      	nop
 8010a04:	20002208 	.word	0x20002208

08010a08 <_isatty_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4d06      	ldr	r5, [pc, #24]	@ (8010a24 <_isatty_r+0x1c>)
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4604      	mov	r4, r0
 8010a10:	4608      	mov	r0, r1
 8010a12:	602b      	str	r3, [r5, #0]
 8010a14:	f7f1 fbea 	bl	80021ec <_isatty>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_isatty_r+0x1a>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_isatty_r+0x1a>
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	20002208 	.word	0x20002208

08010a28 <_sbrk_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d06      	ldr	r5, [pc, #24]	@ (8010a44 <_sbrk_r+0x1c>)
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	4608      	mov	r0, r1
 8010a32:	602b      	str	r3, [r5, #0]
 8010a34:	f7f1 fbf2 	bl	800221c <_sbrk>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d102      	bne.n	8010a42 <_sbrk_r+0x1a>
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	b103      	cbz	r3, 8010a42 <_sbrk_r+0x1a>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	20002208 	.word	0x20002208

08010a48 <memcpy>:
 8010a48:	440a      	add	r2, r1
 8010a4a:	4291      	cmp	r1, r2
 8010a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a50:	d100      	bne.n	8010a54 <memcpy+0xc>
 8010a52:	4770      	bx	lr
 8010a54:	b510      	push	{r4, lr}
 8010a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a5e:	4291      	cmp	r1, r2
 8010a60:	d1f9      	bne.n	8010a56 <memcpy+0xe>
 8010a62:	bd10      	pop	{r4, pc}

08010a64 <__assert_func>:
 8010a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a66:	4614      	mov	r4, r2
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4b09      	ldr	r3, [pc, #36]	@ (8010a90 <__assert_func+0x2c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4605      	mov	r5, r0
 8010a70:	68d8      	ldr	r0, [r3, #12]
 8010a72:	b954      	cbnz	r4, 8010a8a <__assert_func+0x26>
 8010a74:	4b07      	ldr	r3, [pc, #28]	@ (8010a94 <__assert_func+0x30>)
 8010a76:	461c      	mov	r4, r3
 8010a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a7c:	9100      	str	r1, [sp, #0]
 8010a7e:	462b      	mov	r3, r5
 8010a80:	4905      	ldr	r1, [pc, #20]	@ (8010a98 <__assert_func+0x34>)
 8010a82:	f000 f841 	bl	8010b08 <fiprintf>
 8010a86:	f000 f851 	bl	8010b2c <abort>
 8010a8a:	4b04      	ldr	r3, [pc, #16]	@ (8010a9c <__assert_func+0x38>)
 8010a8c:	e7f4      	b.n	8010a78 <__assert_func+0x14>
 8010a8e:	bf00      	nop
 8010a90:	2000011c 	.word	0x2000011c
 8010a94:	0801108e 	.word	0x0801108e
 8010a98:	08011060 	.word	0x08011060
 8010a9c:	08011053 	.word	0x08011053

08010aa0 <_calloc_r>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	fba1 5402 	umull	r5, r4, r1, r2
 8010aa6:	b93c      	cbnz	r4, 8010ab8 <_calloc_r+0x18>
 8010aa8:	4629      	mov	r1, r5
 8010aaa:	f7ff f93d 	bl	800fd28 <_malloc_r>
 8010aae:	4606      	mov	r6, r0
 8010ab0:	b928      	cbnz	r0, 8010abe <_calloc_r+0x1e>
 8010ab2:	2600      	movs	r6, #0
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	bd70      	pop	{r4, r5, r6, pc}
 8010ab8:	220c      	movs	r2, #12
 8010aba:	6002      	str	r2, [r0, #0]
 8010abc:	e7f9      	b.n	8010ab2 <_calloc_r+0x12>
 8010abe:	462a      	mov	r2, r5
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	f7fe f9ef 	bl	800eea4 <memset>
 8010ac6:	e7f5      	b.n	8010ab4 <_calloc_r+0x14>

08010ac8 <__ascii_mbtowc>:
 8010ac8:	b082      	sub	sp, #8
 8010aca:	b901      	cbnz	r1, 8010ace <__ascii_mbtowc+0x6>
 8010acc:	a901      	add	r1, sp, #4
 8010ace:	b142      	cbz	r2, 8010ae2 <__ascii_mbtowc+0x1a>
 8010ad0:	b14b      	cbz	r3, 8010ae6 <__ascii_mbtowc+0x1e>
 8010ad2:	7813      	ldrb	r3, [r2, #0]
 8010ad4:	600b      	str	r3, [r1, #0]
 8010ad6:	7812      	ldrb	r2, [r2, #0]
 8010ad8:	1e10      	subs	r0, r2, #0
 8010ada:	bf18      	it	ne
 8010adc:	2001      	movne	r0, #1
 8010ade:	b002      	add	sp, #8
 8010ae0:	4770      	bx	lr
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	e7fb      	b.n	8010ade <__ascii_mbtowc+0x16>
 8010ae6:	f06f 0001 	mvn.w	r0, #1
 8010aea:	e7f8      	b.n	8010ade <__ascii_mbtowc+0x16>

08010aec <__ascii_wctomb>:
 8010aec:	4603      	mov	r3, r0
 8010aee:	4608      	mov	r0, r1
 8010af0:	b141      	cbz	r1, 8010b04 <__ascii_wctomb+0x18>
 8010af2:	2aff      	cmp	r2, #255	@ 0xff
 8010af4:	d904      	bls.n	8010b00 <__ascii_wctomb+0x14>
 8010af6:	228a      	movs	r2, #138	@ 0x8a
 8010af8:	601a      	str	r2, [r3, #0]
 8010afa:	f04f 30ff 	mov.w	r0, #4294967295
 8010afe:	4770      	bx	lr
 8010b00:	700a      	strb	r2, [r1, #0]
 8010b02:	2001      	movs	r0, #1
 8010b04:	4770      	bx	lr
	...

08010b08 <fiprintf>:
 8010b08:	b40e      	push	{r1, r2, r3}
 8010b0a:	b503      	push	{r0, r1, lr}
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	ab03      	add	r3, sp, #12
 8010b10:	4805      	ldr	r0, [pc, #20]	@ (8010b28 <fiprintf+0x20>)
 8010b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b16:	6800      	ldr	r0, [r0, #0]
 8010b18:	9301      	str	r3, [sp, #4]
 8010b1a:	f7ff fd3d 	bl	8010598 <_vfiprintf_r>
 8010b1e:	b002      	add	sp, #8
 8010b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b24:	b003      	add	sp, #12
 8010b26:	4770      	bx	lr
 8010b28:	2000011c 	.word	0x2000011c

08010b2c <abort>:
 8010b2c:	b508      	push	{r3, lr}
 8010b2e:	2006      	movs	r0, #6
 8010b30:	f000 f82c 	bl	8010b8c <raise>
 8010b34:	2001      	movs	r0, #1
 8010b36:	f7f1 fb15 	bl	8002164 <_exit>

08010b3a <_raise_r>:
 8010b3a:	291f      	cmp	r1, #31
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	4605      	mov	r5, r0
 8010b40:	460c      	mov	r4, r1
 8010b42:	d904      	bls.n	8010b4e <_raise_r+0x14>
 8010b44:	2316      	movs	r3, #22
 8010b46:	6003      	str	r3, [r0, #0]
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	bd38      	pop	{r3, r4, r5, pc}
 8010b4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010b50:	b112      	cbz	r2, 8010b58 <_raise_r+0x1e>
 8010b52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b56:	b94b      	cbnz	r3, 8010b6c <_raise_r+0x32>
 8010b58:	4628      	mov	r0, r5
 8010b5a:	f000 f831 	bl	8010bc0 <_getpid_r>
 8010b5e:	4622      	mov	r2, r4
 8010b60:	4601      	mov	r1, r0
 8010b62:	4628      	mov	r0, r5
 8010b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b68:	f000 b818 	b.w	8010b9c <_kill_r>
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d00a      	beq.n	8010b86 <_raise_r+0x4c>
 8010b70:	1c59      	adds	r1, r3, #1
 8010b72:	d103      	bne.n	8010b7c <_raise_r+0x42>
 8010b74:	2316      	movs	r3, #22
 8010b76:	6003      	str	r3, [r0, #0]
 8010b78:	2001      	movs	r0, #1
 8010b7a:	e7e7      	b.n	8010b4c <_raise_r+0x12>
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b82:	4620      	mov	r0, r4
 8010b84:	4798      	blx	r3
 8010b86:	2000      	movs	r0, #0
 8010b88:	e7e0      	b.n	8010b4c <_raise_r+0x12>
	...

08010b8c <raise>:
 8010b8c:	4b02      	ldr	r3, [pc, #8]	@ (8010b98 <raise+0xc>)
 8010b8e:	4601      	mov	r1, r0
 8010b90:	6818      	ldr	r0, [r3, #0]
 8010b92:	f7ff bfd2 	b.w	8010b3a <_raise_r>
 8010b96:	bf00      	nop
 8010b98:	2000011c 	.word	0x2000011c

08010b9c <_kill_r>:
 8010b9c:	b538      	push	{r3, r4, r5, lr}
 8010b9e:	4d07      	ldr	r5, [pc, #28]	@ (8010bbc <_kill_r+0x20>)
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	4608      	mov	r0, r1
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	602b      	str	r3, [r5, #0]
 8010baa:	f7f1 facb 	bl	8002144 <_kill>
 8010bae:	1c43      	adds	r3, r0, #1
 8010bb0:	d102      	bne.n	8010bb8 <_kill_r+0x1c>
 8010bb2:	682b      	ldr	r3, [r5, #0]
 8010bb4:	b103      	cbz	r3, 8010bb8 <_kill_r+0x1c>
 8010bb6:	6023      	str	r3, [r4, #0]
 8010bb8:	bd38      	pop	{r3, r4, r5, pc}
 8010bba:	bf00      	nop
 8010bbc:	20002208 	.word	0x20002208

08010bc0 <_getpid_r>:
 8010bc0:	f7f1 bab8 	b.w	8002134 <_getpid>

08010bc4 <_init>:
 8010bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc6:	bf00      	nop
 8010bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bca:	bc08      	pop	{r3}
 8010bcc:	469e      	mov	lr, r3
 8010bce:	4770      	bx	lr

08010bd0 <_fini>:
 8010bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd2:	bf00      	nop
 8010bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bd6:	bc08      	pop	{r3}
 8010bd8:	469e      	mov	lr, r3
 8010bda:	4770      	bx	lr
