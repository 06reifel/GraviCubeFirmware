
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  080110b8  080110b8  000120b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011668  08011668  000132f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011668  08011668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011670  08011670  000132f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011670  08011670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011678  08011678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  0801167c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f80  200002f0  0801196c  000132f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002270  0801196c  00014270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7c4  00000000  00000000  00013320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046a5  00000000  00000000  00031ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00036190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128c  00000000  00000000  00037980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e41f  00000000  00000000  00038c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe64  00000000  00000000  0005702b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a970  00000000  00000000  00076e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001117ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ec  00000000  00000000  00111844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801109c 	.word	0x0801109c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	0801109c 	.word	0x0801109c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
 **		  TIMER-INTERRUPT	     **
 **********************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	static uint8_t interruptState = readData;
    if (htim->Instance == TIM4)  // Check if the interrupt comes from TIM4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        switch(interruptState)
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d827      	bhi.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f3d 	.word	0x08000f3d
 8000f14:	08000f4b 	.word	0x08000f4b
        {
        	case readData:
        		mpu6050_readData();
 8000f18:	f000 ff82 	bl	8001e20 <_Z16mpu6050_readDatav>
        		interruptState++;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f26:	701a      	strb	r2, [r3, #0]
        	break;
 8000f28:	e013      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_X_Axis:
        		controlRoll();
 8000f2a:	f000 f901 	bl	8001130 <_Z11controlRollv>
				interruptState++;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f38:	701a      	strb	r2, [r3, #0]
			break;
 8000f3a:	e00a      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Y_Axis:
				interruptState++;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f46:	701a      	strb	r2, [r3, #0]
			break;
 8000f48:	e003      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Z_Axis:
				interruptState = readData;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			break;
 8000f50:	bf00      	nop

        }
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	2000030c 	.word	0x2000030c

08000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>:
 **********************************
 **		  MOTOR-CLASS-DEF	     **
 **********************************
*/

Motor::Motor(TIM_HandleTypeDef *htim, unsigned int Channel, GPIO_TypeDef *motorPort, uint16_t directionPin, uint16_t enablePin, uint16_t brakePin)
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
{
	Motor::timer = htim;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
	Motor::timerChannel = Channel;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
	Motor::motorPort = motorPort;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
	Motor::directionPin = directionPin;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8b3a      	ldrh	r2, [r7, #24]
 8000f88:	819a      	strh	r2, [r3, #12]
	Motor::enablePin = enablePin;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	8bba      	ldrh	r2, [r7, #28]
 8000f8e:	81da      	strh	r2, [r3, #14]
	Motor::brakePin = brakePin;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8c3a      	ldrh	r2, [r7, #32]
 8000f94:	821a      	strh	r2, [r3, #16]

	HAL_TIM_PWM_Start(timer, timerChannel);  // Start PWM
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f007 f941 	bl	8008228 <HAL_TIM_PWM_Start>

	changeDirection(CCW);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 f86b 	bl	8001084 <_ZN5Motor15changeDirectionEb>

	changeBrakeState(enableBrake);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f87f 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>

	changeMotorState(disableMotor);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f893 	bl	80010e4 <_ZN5Motor16changeMotorStateEb>

}
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN5Motor11changeSpeedEd>:

void Motor::changeSpeed(double newMotorSpeed)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	ed87 0b00 	vstr	d0, [r7]
	speed = newMotorSpeed;
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fda:	e9c1 2306 	strd	r2, r3, [r1, #24]

	uint32_t CCR_Value = (uint32_t)((__HAL_TIM_GET_AUTORELOAD(timer) + 1) * ((100.0 - speed) / 100.0));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa93 	bl	8000514 <__aeabi_ui2d>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4920      	ldr	r1, [pc, #128]	@ (8001080 <_ZN5Motor11changeSpeedEd+0xb8>)
 8000ffe:	f7ff f94b 	bl	8000298 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <_ZN5Motor11changeSpeedEd+0xb8>)
 8001010:	f7ff fc24 	bl	800085c <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff faf4 	bl	8000608 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fdc6 	bl	8000bb8 <__aeabi_d2uiz>
 800102c:	4603      	mov	r3, r0
 800102e:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <_ZN5Motor11changeSpeedEd+0x7c>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001042:	e018      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d105      	bne.n	8001058 <_ZN5Motor11changeSpeedEd+0x90>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001056:	e00e      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b08      	cmp	r3, #8
 800105e:	d105      	bne.n	800106c <_ZN5Motor11changeSpeedEd+0xa4>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800106a:	e004      	b.n	8001076 <_ZN5Motor11changeSpeedEd+0xae>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	40590000 	.word	0x40590000

08001084 <_ZN5Motor15changeDirectionEb>:

void Motor::changeDirection(bool newMotorDirection)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
	direction = newMotorDirection;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	78fa      	ldrb	r2, [r7, #3]
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_GPIO_WritePin(motorPort, directionPin, (GPIO_PinState)direction);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6898      	ldr	r0, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8999      	ldrh	r1, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f002 fa4c 	bl	8003544 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN5Motor16changeBrakeStateEb>:

void Motor::changeBrakeState(bool newBrakeState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	brakeState = newBrakeState;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	HAL_GPIO_WritePin(motorPort, brakePin, (GPIO_PinState)brakeState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	8a19      	ldrh	r1, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010d6:	461a      	mov	r2, r3
 80010d8:	f002 fa34 	bl	8003544 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN5Motor16changeMotorStateEb>:

void Motor::changeMotorState(bool newMotorState)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	motorState = newMotorState;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_GPIO_WritePin(motorPort, enablePin, (GPIO_PinState)motorState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	89d9      	ldrh	r1, [r3, #14]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001106:	461a      	mov	r2, r3
 8001108:	f002 fa1c 	bl	8003544 <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN5Motor12getDirectionEv>:
		}
	}
}

bool Motor::getDirection()
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return direction;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_Z11controlRollv>:
double Ki = /*10.5;*/ 0.0001;
double Kd = /*0.03;*/ 0.03;
double alpha = 0.74;

void controlRoll()
{
 8001130:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001134:	b08a      	sub	sp, #40	@ 0x28
 8001136:	af00      	add	r7, sp, #0
	double error, errorDerivative, output, absOutput, dt, filterYaw;
	static uint32_t lastTime = 0;
	static double previousError = 0, errorIntegral = 0, motor_speed_X = 0;

	switch(balanceMode)
 8001138:	4b82      	ldr	r3, [pc, #520]	@ (8001344 <_Z11controlRollv+0x214>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d003      	beq.n	8001148 <_Z11controlRollv+0x18>
 8001140:	2b02      	cmp	r3, #2
 8001142:	f000 80ec 	beq.w	800131e <_Z11controlRollv+0x1ee>
		}
		case threeDimensional:
			error = 45 - filterRoll;
		break;
	}
}
 8001146:	e0f7      	b.n	8001338 <_Z11controlRollv+0x208>
			error = 46.5 /*47.3*/ - filterRoll;
 8001148:	4b7f      	ldr	r3, [pc, #508]	@ (8001348 <_Z11controlRollv+0x218>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	497e      	ldr	r1, [pc, #504]	@ (800134c <_Z11controlRollv+0x21c>)
 8001154:	f7ff f8a0 	bl	8000298 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			dt = (HAL_GetTick() - lastTime) / 1000.0;
 8001160:	f001 fba0 	bl	80028a4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	4b7a      	ldr	r3, [pc, #488]	@ (8001350 <_Z11controlRollv+0x220>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9d1 	bl	8000514 <__aeabi_ui2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b77      	ldr	r3, [pc, #476]	@ (8001354 <_Z11controlRollv+0x224>)
 8001178:	f7ff fb70 	bl	800085c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
			errorIntegral += error * dt;
 8001184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001188:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800118c:	f7ff fa3c 	bl	8000608 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	4b6f      	ldr	r3, [pc, #444]	@ (8001358 <_Z11controlRollv+0x228>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f87d 	bl	800029c <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	496c      	ldr	r1, [pc, #432]	@ (8001358 <_Z11controlRollv+0x228>)
 80011a8:	e9c1 2300 	strd	r2, r3, [r1]
			errorDerivative = (error - previousError) / dt;
 80011ac:	4b6b      	ldr	r3, [pc, #428]	@ (800135c <_Z11controlRollv+0x22c>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011b6:	f7ff f86f 	bl	8000298 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011c6:	f7ff fb49 	bl	800085c <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
			previousError = error;
 80011d2:	4962      	ldr	r1, [pc, #392]	@ (800135c <_Z11controlRollv+0x22c>)
 80011d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d8:	e9c1 2300 	strd	r2, r3, [r1]
			lastTime = HAL_GetTick();
 80011dc:	f001 fb62 	bl	80028a4 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <_Z11controlRollv+0x220>)
 80011e4:	6013      	str	r3, [r2, #0]
			output = Kp * error + Ki * errorIntegral + Kd * errorDerivative;
 80011e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <_Z11controlRollv+0x230>)
 80011e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f0:	f7ff fa0a 	bl	8000608 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4690      	mov	r8, r2
 80011fa:	4699      	mov	r9, r3
 80011fc:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <_Z11controlRollv+0x234>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	4b55      	ldr	r3, [pc, #340]	@ (8001358 <_Z11controlRollv+0x228>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4640      	mov	r0, r8
 8001212:	4649      	mov	r1, r9
 8001214:	f7ff f842 	bl	800029c <__adddf3>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4690      	mov	r8, r2
 800121e:	4699      	mov	r9, r3
 8001220:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <_Z11controlRollv+0x238>)
 8001222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122a:	f7ff f9ed 	bl	8000608 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7ff f831 	bl	800029c <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	e9c7 2300 	strd	r2, r3, [r7]
			absOutput = (output < 0) ? -output : output;
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124e:	f7ff fc4d 	bl	8000aec <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <_Z11controlRollv+0x132>
 8001258:	683c      	ldr	r4, [r7, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001260:	e001      	b.n	8001266 <_Z11controlRollv+0x136>
 8001262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001266:	e9c7 4508 	strd	r4, r5, [r7, #32]
			if(absOutput > 100)
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <_Z11controlRollv+0x23c>)
 8001270:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001274:	f7ff fc58 	bl	8000b28 <__aeabi_dcmpgt>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <_Z11controlRollv+0x158>
				absOutput = 100;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <_Z11controlRollv+0x23c>)
 8001284:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(output > 0 && (Motor_3.getDirection() != CCW))
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001294:	f7ff fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <_Z11controlRollv+0x17e>
 800129e:	4834      	ldr	r0, [pc, #208]	@ (8001370 <_Z11controlRollv+0x240>)
 80012a0:	f7ff ff38 	bl	8001114 <_ZN5Motor12getDirectionEv>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <_Z11controlRollv+0x17e>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <_Z11controlRollv+0x180>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <_Z11controlRollv+0x19e>
				Motor_3.changeBrakeState(enableBrake);
 80012b4:	2100      	movs	r1, #0
 80012b6:	482e      	ldr	r0, [pc, #184]	@ (8001370 <_Z11controlRollv+0x240>)
 80012b8:	f7ff fefc 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
				Motor_3.changeDirection(CCW);
 80012bc:	2100      	movs	r1, #0
 80012be:	482c      	ldr	r0, [pc, #176]	@ (8001370 <_Z11controlRollv+0x240>)
 80012c0:	f7ff fee0 	bl	8001084 <_ZN5Motor15changeDirectionEb>
				Motor_3.changeBrakeState(disableBrake);
 80012c4:	2101      	movs	r1, #1
 80012c6:	482a      	ldr	r0, [pc, #168]	@ (8001370 <_Z11controlRollv+0x240>)
 80012c8:	f7ff fef4 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
 80012cc:	e021      	b.n	8001312 <_Z11controlRollv+0x1e2>
			else if(output < 0 && (Motor_3.getDirection() != CW))
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012da:	f7ff fc07 	bl	8000aec <__aeabi_dcmplt>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <_Z11controlRollv+0x1c4>
 80012e4:	4822      	ldr	r0, [pc, #136]	@ (8001370 <_Z11controlRollv+0x240>)
 80012e6:	f7ff ff15 	bl	8001114 <_ZN5Motor12getDirectionEv>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d001      	beq.n	80012f4 <_Z11controlRollv+0x1c4>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <_Z11controlRollv+0x1c6>
 80012f4:	2300      	movs	r3, #0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <_Z11controlRollv+0x1e2>
				Motor_3.changeBrakeState(enableBrake);
 80012fa:	2100      	movs	r1, #0
 80012fc:	481c      	ldr	r0, [pc, #112]	@ (8001370 <_Z11controlRollv+0x240>)
 80012fe:	f7ff fed9 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
				Motor_3.changeDirection(CW);
 8001302:	2101      	movs	r1, #1
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <_Z11controlRollv+0x240>)
 8001306:	f7ff febd 	bl	8001084 <_ZN5Motor15changeDirectionEb>
				Motor_3.changeBrakeState(disableBrake);
 800130a:	2101      	movs	r1, #1
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <_Z11controlRollv+0x240>)
 800130e:	f7ff fed1 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
			Motor_3.changeSpeed(absOutput);
 8001312:	ed97 0b08 	vldr	d0, [r7, #32]
 8001316:	4816      	ldr	r0, [pc, #88]	@ (8001370 <_Z11controlRollv+0x240>)
 8001318:	f7ff fe56 	bl	8000fc8 <_ZN5Motor11changeSpeedEd>
		break;
 800131c:	e00c      	b.n	8001338 <_Z11controlRollv+0x208>
			error = 45 - filterRoll;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <_Z11controlRollv+0x218>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	4912      	ldr	r1, [pc, #72]	@ (8001374 <_Z11controlRollv+0x244>)
 800132a:	f7fe ffb5 	bl	8000298 <__aeabi_dsub>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 2306 	strd	r2, r3, [r7, #24]
		break;
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001342:	bf00      	nop
 8001344:	200004b9 	.word	0x200004b9
 8001348:	20000510 	.word	0x20000510
 800134c:	40474000 	.word	0x40474000
 8001350:	20000310 	.word	0x20000310
 8001354:	408f4000 	.word	0x408f4000
 8001358:	20000320 	.word	0x20000320
 800135c:	20000318 	.word	0x20000318
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000010 	.word	0x20000010
 800136c:	40590000 	.word	0x40590000
 8001370:	200004c0 	.word	0x200004c0
 8001374:	40468000 	.word	0x40468000

08001378 <_Z9hc05_initv>:
 **		  BT-MODULE INIT	     **
 **********************************
*/

void hc05_init()
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <_Z9hc05_initv+0x40>)
 8001380:	463c      	mov	r4, r7
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800138c:	c407      	stmia	r4!, {r0, r1, r2}
 800138e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 8001390:	463b      	mov	r3, r7
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe ff74 	bl	8000280 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	4639      	mov	r1, r7
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <_Z9hc05_initv+0x44>)
 80013a2:	f007 fe3d 	bl	8009020 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	4905      	ldr	r1, [pc, #20]	@ (80013c0 <_Z9hc05_initv+0x48>)
 80013aa:	4804      	ldr	r0, [pc, #16]	@ (80013bc <_Z9hc05_initv+0x44>)
 80013ac:	f007 fec3 	bl	8009136 <HAL_UART_Receive_IT>
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	080110b8 	.word	0x080110b8
 80013bc:	20000470 	.word	0x20000470
 80013c0:	20000328 	.word	0x20000328
 80013c4:	00000000 	.word	0x00000000

080013c8 <HAL_UART_RxCpltCallback>:
 **********************************
*/
extern double Kp, Ki, Kd;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a46      	ldr	r2, [pc, #280]	@ (80014f0 <HAL_UART_RxCpltCallback+0x128>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d17b      	bne.n	80014d2 <HAL_UART_RxCpltCallback+0x10a>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag_1D)
 80013da:	4b46      	ldr	r3, [pc, #280]	@ (80014f4 <HAL_UART_RxCpltCallback+0x12c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b53      	cmp	r3, #83	@ 0x53
 80013e0:	d109      	bne.n	80013f6 <HAL_UART_RxCpltCallback+0x2e>
 80013e2:	4b45      	ldr	r3, [pc, #276]	@ (80014f8 <HAL_UART_RxCpltCallback+0x130>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag_1D = true;
 80013f0:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_UART_RxCpltCallback+0x130>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
		}

		switch(receivedBTData)
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <HAL_UART_RxCpltCallback+0x12c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3b61      	subs	r3, #97	@ 0x61
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d863      	bhi.n	80014c8 <HAL_UART_RxCpltCallback+0x100>
 8001400:	a201      	add	r2, pc, #4	@ (adr r2, 8001408 <HAL_UART_RxCpltCallback+0x40>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	08001421 	.word	0x08001421
 800140c:	0800143d 	.word	0x0800143d
 8001410:	08001459 	.word	0x08001459
 8001414:	08001475 	.word	0x08001475
 8001418:	08001491 	.word	0x08001491
 800141c:	080014ad 	.word	0x080014ad
		{
			case 'a':
				Kp += 0.00001;
 8001420:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <HAL_UART_RxCpltCallback+0x134>)
 8001422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001426:	a32e      	add	r3, pc, #184	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x118>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe ff36 	bl	800029c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4931      	ldr	r1, [pc, #196]	@ (80014fc <HAL_UART_RxCpltCallback+0x134>)
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800143a:	e045      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x100>

			case 'b':
				Kp += 0.00001;
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HAL_UART_RxCpltCallback+0x134>)
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	a327      	add	r3, pc, #156	@ (adr r3, 80014e0 <HAL_UART_RxCpltCallback+0x118>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff28 	bl	800029c <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	492a      	ldr	r1, [pc, #168]	@ (80014fc <HAL_UART_RxCpltCallback+0x134>)
 8001452:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001456:	e037      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x100>

			case 'c':
				Ki += 0.001;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_UART_RxCpltCallback+0x138>)
 800145a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145e:	a322      	add	r3, pc, #136	@ (adr r3, 80014e8 <HAL_UART_RxCpltCallback+0x120>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7fe ff1a 	bl	800029c <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4924      	ldr	r1, [pc, #144]	@ (8001500 <HAL_UART_RxCpltCallback+0x138>)
 800146e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001472:	e029      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x100>

			case 'd':
				Ki -= 0.001;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_UART_RxCpltCallback+0x138>)
 8001476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147a:	a31b      	add	r3, pc, #108	@ (adr r3, 80014e8 <HAL_UART_RxCpltCallback+0x120>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe ff0a 	bl	8000298 <__aeabi_dsub>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	491d      	ldr	r1, [pc, #116]	@ (8001500 <HAL_UART_RxCpltCallback+0x138>)
 800148a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800148e:	e01b      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x100>

			case 'e':
				Kd += 0.001;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_UART_RxCpltCallback+0x13c>)
 8001492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001496:	a314      	add	r3, pc, #80	@ (adr r3, 80014e8 <HAL_UART_RxCpltCallback+0x120>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7fe fefe 	bl	800029c <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4917      	ldr	r1, [pc, #92]	@ (8001504 <HAL_UART_RxCpltCallback+0x13c>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80014aa:	e00d      	b.n	80014c8 <HAL_UART_RxCpltCallback+0x100>

			case 'f':
				Kd -= 0.001;
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_UART_RxCpltCallback+0x13c>)
 80014ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80014e8 <HAL_UART_RxCpltCallback+0x120>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe feee 	bl	8000298 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4910      	ldr	r1, [pc, #64]	@ (8001504 <HAL_UART_RxCpltCallback+0x13c>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80014c6:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 80014c8:	2201      	movs	r2, #1
 80014ca:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <HAL_UART_RxCpltCallback+0x12c>)
 80014cc:	480e      	ldr	r0, [pc, #56]	@ (8001508 <HAL_UART_RxCpltCallback+0x140>)
 80014ce:	f007 fe32 	bl	8009136 <HAL_UART_Receive_IT>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	88e368f1 	.word	0x88e368f1
 80014e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80014e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ec:	3f50624d 	.word	0x3f50624d
 80014f0:	40004400 	.word	0x40004400
 80014f4:	20000328 	.word	0x20000328
 80014f8:	200004b8 	.word	0x200004b8
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000010 	.word	0x20000010
 8001508:	20000470 	.word	0x20000470

0800150c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001514:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001518:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001524:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001528:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800152c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <ITM_SendChar+0x2c>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <ITM_SendChar+0x2e>
 8001538:	2300      	movs	r3, #0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d010      	beq.n	8001560 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800153e:	e000      	b.n	8001542 <ITM_SendChar+0x36>
    {
      __NOP();
 8001540:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001542:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f4      	bne.n	8001540 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001556:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f001 f930 	bl	80027d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f8a8 	bl	80016cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fa84 	bl	8001a88 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001580:	f000 fa62 	bl	8001a48 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8001584:	f00c f82c 	bl	800d5e0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001588:	f000 f912 	bl	80017b0 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 800158c:	f000 f944 	bl	8001818 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001590:	f000 fa2c 	bl	80019ec <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8001594:	f000 f9ce 	bl	8001934 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  //MPU-6050 Init
  mpu6050_init(false);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 fb5d 	bl	8001c58 <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 800159e:	f7ff feeb 	bl	8001378 <_Z9hc05_initv>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
  */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	483f      	ldr	r0, [pc, #252]	@ (80016a4 <main+0x134>)
 80015a8:	f001 ffcc 	bl	8003544 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	static uint32_t timeSaveBlink = HAL_GetTick();
 80015ac:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <main+0x138>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f3bf 8f5b 	dmb	ish
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <main+0x7c>
 80015c6:	4838      	ldr	r0, [pc, #224]	@ (80016a8 <main+0x138>)
 80015c8:	f00c fcf4 	bl	800dfb4 <__cxa_guard_acquire>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <main+0x7c>
 80015dc:	f001 f962 	bl	80028a4 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a32      	ldr	r2, [pc, #200]	@ (80016ac <main+0x13c>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4830      	ldr	r0, [pc, #192]	@ (80016a8 <main+0x138>)
 80015e8:	f00c fcf0 	bl	800dfcc <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= 1000) // 1000 ms delay
 80015ec:	f001 f95a 	bl	80028a4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <main+0x13c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf8c      	ite	hi
 8001600:	2301      	movhi	r3, #1
 8001602:	2300      	movls	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <main+0xac>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800160a:	2104      	movs	r1, #4
 800160c:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <main+0x140>)
 800160e:	f001 ffb2 	bl	8003576 <HAL_GPIO_TogglePin>

		timeSaveBlink = HAL_GetTick();
 8001612:	f001 f947 	bl	80028a4 <HAL_GetTick>
 8001616:	4603      	mov	r3, r0
 8001618:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <main+0x13c>)
 800161a:	6013      	str	r3, [r2, #0]
	}

	//Motor_3.testMotor();

	if (receivedStart_Flag_1D)
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <main+0x144>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0c3      	beq.n	80015ac <main+0x3c>
	{
	    static uint32_t timeSaveBuzzer = 0;
	    static bool buzzerActive = false;

	    if (!buzzerActive)  // If the buzzer is not already on, start it
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <main+0x148>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00c      	beq.n	800164c <main+0xdc>
	    {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Turn on buzzer
 8001632:	2200      	movs	r2, #0
 8001634:	2104      	movs	r1, #4
 8001636:	481b      	ldr	r0, [pc, #108]	@ (80016a4 <main+0x134>)
 8001638:	f001 ff84 	bl	8003544 <HAL_GPIO_WritePin>
	        timeSaveBuzzer = HAL_GetTick(); // Save the current time
 800163c:	f001 f932 	bl	80028a4 <HAL_GetTick>
 8001640:	4603      	mov	r3, r0
 8001642:	4a1e      	ldr	r2, [pc, #120]	@ (80016bc <main+0x14c>)
 8001644:	6013      	str	r3, [r2, #0]
	        buzzerActive = true;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <main+0x148>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
	    }

	    if (buzzerActive && (HAL_GetTick() - timeSaveBuzzer >= 500)) // 500 ms delay
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <main+0x148>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00a      	beq.n	800166a <main+0xfa>
 8001654:	f001 f926 	bl	80028a4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <main+0x14c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001664:	d301      	bcc.n	800166a <main+0xfa>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <main+0xfc>
 800166a:	2300      	movs	r3, #0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d09d      	beq.n	80015ac <main+0x3c>
	    {
	        printf("Start \n");
 8001670:	4813      	ldr	r0, [pc, #76]	@ (80016c0 <main+0x150>)
 8001672:	f00d fda3 	bl	800f1bc <puts>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Turn off buzzer
 8001676:	2201      	movs	r2, #1
 8001678:	2104      	movs	r1, #4
 800167a:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <main+0x134>)
 800167c:	f001 ff62 	bl	8003544 <HAL_GPIO_WritePin>
	        buzzerActive = false;  // Reset buzzer state
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <main+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
	        balanceMode = oneDimensional;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <main+0x154>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
	        Motor_3.changeMotorState(enableMotor);
 800168c:	2100      	movs	r1, #0
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <main+0x158>)
 8001690:	f7ff fd28 	bl	80010e4 <_ZN5Motor16changeMotorStateEb>
	        Motor_3.changeBrakeState(disableBrake);
 8001694:	2101      	movs	r1, #1
 8001696:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <main+0x158>)
 8001698:	f7ff fd0c 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
	        receivedStart_Flag_1D = false; // Reset the Start Flag
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <main+0x144>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80016a2:	e783      	b.n	80015ac <main+0x3c>
 80016a4:	40020800 	.word	0x40020800
 80016a8:	200004ec 	.word	0x200004ec
 80016ac:	200004e8 	.word	0x200004e8
 80016b0:	40020400 	.word	0x40020400
 80016b4:	200004b8 	.word	0x200004b8
 80016b8:	200004f4 	.word	0x200004f4
 80016bc:	200004f0 	.word	0x200004f0
 80016c0:	080110d8 	.word	0x080110d8
 80016c4:	200004b9 	.word	0x200004b9
 80016c8:	200004c0 	.word	0x200004c0

080016cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	@ 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2230      	movs	r2, #48	@ 0x30
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f00d fe4e 	bl	800f37c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <_Z18SystemClock_Configv+0xdc>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a2b      	ldr	r2, [pc, #172]	@ (80017a8 <_Z18SystemClock_Configv+0xdc>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <_Z18SystemClock_Configv+0xdc>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <_Z18SystemClock_Configv+0xe0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a25      	ldr	r2, [pc, #148]	@ (80017ac <_Z18SystemClock_Configv+0xe0>)
 8001716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <_Z18SystemClock_Configv+0xe0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800173a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800173c:	2310      	movs	r3, #16
 800173e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001740:	23c0      	movs	r3, #192	@ 0xc0
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001744:	2302      	movs	r3, #2
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001748:	2304      	movs	r3, #4
 800174a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	4618      	mov	r0, r3
 8001752:	f005 ffc7 	bl	80076e4 <HAL_RCC_OscConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001766:	f000 fa43 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f006 fa25 	bl	8007bd4 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800179a:	f000 fa29 	bl	8001bf0 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	@ 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <_ZL12MX_I2C1_Initv+0x60>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017bc:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <_ZL12MX_I2C1_Initv+0x64>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <_ZL12MX_I2C1_Initv+0x5c>)
 80017ee:	f001 fedd 	bl	80035ac <HAL_I2C_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001802:	f000 f9f5 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000032c 	.word	0x2000032c
 8001810:	40005400 	.word	0x40005400
 8001814:	000186a0 	.word	0x000186a0

08001818 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	@ 0x38
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001848:	4b38      	ldr	r3, [pc, #224]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 800184a:	4a39      	ldr	r2, [pc, #228]	@ (8001930 <_ZL12MX_TIM3_Initv+0x118>)
 800184c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001850:	2207      	movs	r2, #7
 8001852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b35      	ldr	r3, [pc, #212]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 800185c:	2263      	movs	r2, #99	@ 0x63
 800185e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b32      	ldr	r3, [pc, #200]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b31      	ldr	r3, [pc, #196]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800186c:	482f      	ldr	r0, [pc, #188]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 800186e:	f006 fbcf 	bl	8008010 <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001882:	f000 f9b5 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001890:	4619      	mov	r1, r3
 8001892:	4826      	ldr	r0, [pc, #152]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001894:	f006 ff2a 	bl	80086ec <HAL_TIM_ConfigClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 80018a8:	f000 f9a2 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ac:	481f      	ldr	r0, [pc, #124]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 80018ae:	f006 fc61 	bl	8008174 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80018c2:	f000 f995 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	4619      	mov	r1, r3
 80018d4:	4815      	ldr	r0, [pc, #84]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 80018d6:	f007 fad1 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80018ea:	f000 f981 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ee:	2360      	movs	r3, #96	@ 0x60
 80018f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001906:	f006 fe2f 	bl	8008568 <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800191a:	f000 f969 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800191e:	4803      	ldr	r0, [pc, #12]	@ (800192c <_ZL12MX_TIM3_Initv+0x114>)
 8001920:	f000 fd7e 	bl	8002420 <HAL_TIM_MspPostInit>

}
 8001924:	bf00      	nop
 8001926:	3738      	adds	r7, #56	@ 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000380 	.word	0x20000380
 8001930:	40000400 	.word	0x40000400

08001934 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 8001952:	4a25      	ldr	r2, [pc, #148]	@ (80019e8 <_ZL12MX_TIM4_Initv+0xb4>)
 8001954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 8001958:	220f      	movs	r2, #15
 800195a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 8001964:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001968:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001976:	481b      	ldr	r0, [pc, #108]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 8001978:	f006 fb4a 	bl	8008010 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 800198c:	f000 f930 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4619      	mov	r1, r3
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 800199e:	f006 fea5 	bl	80086ec <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80019b2:	f000 f91d 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	4619      	mov	r1, r3
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <_ZL12MX_TIM4_Initv+0xb0>)
 80019c4:	f007 fa5a 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80019d8:	f000 f90a 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200003c8 	.word	0x200003c8
 80019e8:	40000800 	.word	0x40000800

080019ec <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019f2:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <_ZL19MX_USART2_UART_Initv+0x58>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a22:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a24:	f007 faac 	bl	8008f80 <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001a38:	f000 f8da 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000470 	.word	0x20000470
 8001a44:	40004400 	.word	0x40004400

08001a48 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <_ZL11MX_DMA_Initv+0x3c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <_ZL11MX_DMA_Initv+0x3c>)
 8001a58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <_ZL11MX_DMA_Initv+0x3c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f001 f823 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a74:	200f      	movs	r0, #15
 8001a76:	f001 f83c 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a39      	ldr	r2, [pc, #228]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a32      	ldr	r2, [pc, #200]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <_ZL12MX_GPIO_Initv+0x120>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2107      	movs	r1, #7
 8001b12:	4826      	ldr	r0, [pc, #152]	@ (8001bac <_ZL12MX_GPIO_Initv+0x124>)
 8001b14:	f001 fd16 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	4824      	ldr	r0, [pc, #144]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x128>)
 8001b1e:	f001 fd11 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 7149 	mov.w	r1, #804	@ 0x324
 8001b28:	4822      	ldr	r0, [pc, #136]	@ (8001bb4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001b2a:	f001 fd0b 	bl	8003544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4819      	ldr	r0, [pc, #100]	@ (8001bac <_ZL12MX_GPIO_Initv+0x124>)
 8001b46:	f001 fb79 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4813      	ldr	r0, [pc, #76]	@ (8001bb0 <_ZL12MX_GPIO_Initv+0x128>)
 8001b62:	f001 fb6b 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001b66:	f44f 7349 	mov.w	r3, #804	@ 0x324
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001b80:	f001 fb5c 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4804      	ldr	r0, [pc, #16]	@ (8001bac <_ZL12MX_GPIO_Initv+0x124>)
 8001b9c:	f001 fb4e 	bl	800323c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e009      	b.n	8001bde <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	60ba      	str	r2, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fc9a 	bl	800150c <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbf1      	blt.n	8001bca <_write+0x12>
		}
		return len;
 8001be6:	687b      	ldr	r3, [r7, #4]
	}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <Error_Handler+0x8>

08001bfc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d112      	bne.n	8001c32 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10d      	bne.n	8001c32 <_Z41__static_initialization_and_destruction_0ii+0x36>
Motor Motor_3(&htim3, TIM_CHANNEL_1, GPIOB, GPIO_PIN_9, GPIO_PIN_5, GPIO_PIN_8);
 8001c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4905      	ldr	r1, [pc, #20]	@ (8001c40 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001c2e:	f7ff f999 	bl	8000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	20000380 	.word	0x20000380
 8001c44:	200004c0 	.word	0x200004c0

08001c48 <_GLOBAL__sub_I_hi2c1>:
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff ffd3 	bl	8001bfc <_Z41__static_initialization_and_destruction_0ii>
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_Z12mpu6050_initb>:
 **		  IMU-INITIALIZATION	     **
 **********************************
*/

void mpu6050_init(bool interruptEnable)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 8001c62:	2364      	movs	r3, #100	@ 0x64
 8001c64:	2201      	movs	r2, #1
 8001c66:	21d0      	movs	r1, #208	@ 0xd0
 8001c68:	4861      	ldr	r0, [pc, #388]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001c6a:	f002 f925 	bl	8003eb8 <HAL_I2C_IsDeviceReady>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 8001c78:	485e      	ldr	r0, [pc, #376]	@ (8001df4 <_Z12mpu6050_initb+0x19c>)
 8001c7a:	f00d fa9f 	bl	800f1bc <puts>
 8001c7e:	e002      	b.n	8001c86 <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 8001c80:	485d      	ldr	r0, [pc, #372]	@ (8001df8 <_Z12mpu6050_initb+0x1a0>)
 8001c82:	f00d fa9b 	bl	800f1bc <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 8001c86:	2300      	movs	r3, #0
 8001c88:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001c8a:	2364      	movs	r3, #100	@ 0x64
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f107 030e 	add.w	r3, r7, #14
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	226b      	movs	r2, #107	@ 0x6b
 8001c9c:	21d0      	movs	r1, #208	@ 0xd0
 8001c9e:	4854      	ldr	r0, [pc, #336]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001ca0:	f001 fdde 	bl	8003860 <HAL_I2C_Mem_Write>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d110      	bne.n	8001cd0 <_Z12mpu6050_initb+0x78>
	{
		printf("Exited sleep mode \n");
 8001cae:	4853      	ldr	r0, [pc, #332]	@ (8001dfc <_Z12mpu6050_initb+0x1a4>)
 8001cb0:	f00d fa84 	bl	800f1bc <puts>
		if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8001cb4:	4852      	ldr	r0, [pc, #328]	@ (8001e00 <_Z12mpu6050_initb+0x1a8>)
 8001cb6:	f006 f9fb 	bl	80080b0 <HAL_TIM_Base_Start_IT>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <_Z12mpu6050_initb+0x7e>
		{
			// Starting Error
			Error_Handler();
 8001cca:	f7ff ff91 	bl	8001bf0 <Error_Handler>
 8001cce:	e002      	b.n	8001cd6 <_Z12mpu6050_initb+0x7e>
		}
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 8001cd0:	484c      	ldr	r0, [pc, #304]	@ (8001e04 <_Z12mpu6050_initb+0x1ac>)
 8001cd2:	f00d fa73 	bl	800f1bc <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 8001cd6:	2364      	movs	r3, #100	@ 0x64
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 030e 	add.w	r3, r7, #14
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	221a      	movs	r2, #26
 8001ce8:	21d1      	movs	r1, #209	@ 0xd1
 8001cea:	4841      	ldr	r0, [pc, #260]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001cec:	f001 feb2 	bl	8003a54 <HAL_I2C_Mem_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 8001cf4:	7bbb      	ldrb	r3, [r7, #14]
 8001cf6:	f023 0307 	bic.w	r3, r3, #7
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001cfe:	2364      	movs	r3, #100	@ 0x64
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f107 030e 	add.w	r3, r7, #14
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	221a      	movs	r2, #26
 8001d10:	21d0      	movs	r1, #208	@ 0xd0
 8001d12:	4837      	ldr	r0, [pc, #220]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001d14:	f001 fda4 	bl	8003860 <HAL_I2C_Mem_Write>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <_Z12mpu6050_initb+0xd4>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 8001d22:	2100      	movs	r1, #0
 8001d24:	4838      	ldr	r0, [pc, #224]	@ (8001e08 <_Z12mpu6050_initb+0x1b0>)
 8001d26:	f00d f9e1 	bl	800f0ec <iprintf>
 8001d2a:	e002      	b.n	8001d32 <_Z12mpu6050_initb+0xda>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 8001d2c:	4837      	ldr	r0, [pc, #220]	@ (8001e0c <_Z12mpu6050_initb+0x1b4>)
 8001d2e:	f00d fa45 	bl	800f1bc <puts>
	}

	//Interrupt-Enable
	if(interruptEnable)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d056      	beq.n	8001de6 <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 8001d38:	2364      	movs	r3, #100	@ 0x64
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	f107 030e 	add.w	r3, r7, #14
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	2237      	movs	r2, #55	@ 0x37
 8001d4a:	21d1      	movs	r1, #209	@ 0xd1
 8001d4c:	4828      	ldr	r0, [pc, #160]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001d4e:	f001 fe81 	bl	8003a54 <HAL_I2C_Mem_Read>
 8001d52:	4603      	mov	r3, r0
 8001d54:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 8001d56:	7bbb      	ldrb	r3, [r7, #14]
 8001d58:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001d60:	2364      	movs	r3, #100	@ 0x64
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2301      	movs	r3, #1
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	f107 030e 	add.w	r3, r7, #14
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2237      	movs	r2, #55	@ 0x37
 8001d72:	21d0      	movs	r1, #208	@ 0xd0
 8001d74:	481e      	ldr	r0, [pc, #120]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001d76:	f001 fd73 	bl	8003860 <HAL_I2C_Mem_Write>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 8001d84:	4822      	ldr	r0, [pc, #136]	@ (8001e10 <_Z12mpu6050_initb+0x1b8>)
 8001d86:	f00d fa19 	bl	800f1bc <puts>
 8001d8a:	e002      	b.n	8001d92 <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 8001d8c:	4821      	ldr	r0, [pc, #132]	@ (8001e14 <_Z12mpu6050_initb+0x1bc>)
 8001d8e:	f00d fa15 	bl	800f1bc <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 8001d92:	2364      	movs	r3, #100	@ 0x64
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2301      	movs	r3, #1
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	f107 030e 	add.w	r3, r7, #14
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	2238      	movs	r2, #56	@ 0x38
 8001da4:	21d1      	movs	r1, #209	@ 0xd1
 8001da6:	4812      	ldr	r0, [pc, #72]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001da8:	f001 fe54 	bl	8003a54 <HAL_I2C_Mem_Read>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001db4:	2364      	movs	r3, #100	@ 0x64
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	2301      	movs	r3, #1
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	f107 030e 	add.w	r3, r7, #14
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2238      	movs	r2, #56	@ 0x38
 8001dc6:	21d0      	movs	r1, #208	@ 0xd0
 8001dc8:	4809      	ldr	r0, [pc, #36]	@ (8001df0 <_Z12mpu6050_initb+0x198>)
 8001dca:	f001 fd49 	bl	8003860 <HAL_I2C_Mem_Write>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 8001dd8:	480f      	ldr	r0, [pc, #60]	@ (8001e18 <_Z12mpu6050_initb+0x1c0>)
 8001dda:	f00d f9ef 	bl	800f1bc <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8001dde:	e002      	b.n	8001de6 <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8001de0:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <_Z12mpu6050_initb+0x1c4>)
 8001de2:	f00d f9eb 	bl	800f1bc <puts>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000032c 	.word	0x2000032c
 8001df4:	080110e0 	.word	0x080110e0
 8001df8:	080110f8 	.word	0x080110f8
 8001dfc:	08011114 	.word	0x08011114
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	08011128 	.word	0x08011128
 8001e08:	08011144 	.word	0x08011144
 8001e0c:	08011168 	.word	0x08011168
 8001e10:	08011194 	.word	0x08011194
 8001e14:	080111c0 	.word	0x080111c0
 8001e18:	080111dc 	.word	0x080111dc
 8001e1c:	080111fc 	.word	0x080111fc

08001e20 <_Z16mpu6050_readDatav>:
 **		  READ IMU-SENSOR	     **
 **********************************
*/

void mpu6050_readData()
{
 8001e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e24:	b098      	sub	sp, #96	@ 0x60
 8001e26:	af04      	add	r7, sp, #16
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001e28:	48b9      	ldr	r0, [pc, #740]	@ (8002110 <_Z16mpu6050_readDatav+0x2f0>)
 8001e2a:	f002 fbcd 	bl	80045c8 <HAL_I2C_GetState>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 81e0 	beq.w	8002200 <_Z16mpu6050_readDatav+0x3e0>
	{
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14, 100);
 8001e40:	2364      	movs	r3, #100	@ 0x64
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	230e      	movs	r3, #14
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	4bb2      	ldr	r3, [pc, #712]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	223b      	movs	r2, #59	@ 0x3b
 8001e50:	21d1      	movs	r1, #209	@ 0xd1
 8001e52:	48af      	ldr	r0, [pc, #700]	@ (8002110 <_Z16mpu6050_readDatav+0x2f0>)
 8001e54:	f001 fdfe 	bl	8003a54 <HAL_I2C_Mem_Read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(ret == HAL_OK)
 8001e5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 81cc 	bne.w	8002200 <_Z16mpu6050_readDatav+0x3e0>
			double accX, accY, accZ, gyroX, gyroY, gyroZ, dt, accRoll, accPitch;
			static double gyroAngleX = 0.0, gyroAngleY = 0.0;
			static uint32_t currentTime, previousTime;

			//Accelerometer Data (Registers 59 to 64)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	48aa      	ldr	r0, [pc, #680]	@ (8002118 <_Z16mpu6050_readDatav+0x2f8>)
 8001e6e:	f001 fb69 	bl	8003544 <HAL_GPIO_WritePin>
			accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 8001e72:	4ba8      	ldr	r3, [pc, #672]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb55 	bl	8000534 <__aeabi_i2d>
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4ba3      	ldr	r3, [pc, #652]	@ (800211c <_Z16mpu6050_readDatav+0x2fc>)
 8001e90:	f7fe fce4 	bl	800085c <__aeabi_ddiv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			//printf("Accel-X [g]: %f \n", accX);

			accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 8001e9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001e9e:	789b      	ldrb	r3, [r3, #2]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	4b9b      	ldr	r3, [pc, #620]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001ea6:	78db      	ldrb	r3, [r3, #3]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb40 	bl	8000534 <__aeabi_i2d>
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	4b98      	ldr	r3, [pc, #608]	@ (800211c <_Z16mpu6050_readDatav+0x2fc>)
 8001eba:	f7fe fccf 	bl	800085c <__aeabi_ddiv>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			//printf("Accel-Y [g]: %f \n", accY);

			accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 8001ec6:	4b93      	ldr	r3, [pc, #588]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b91      	ldr	r3, [pc, #580]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8001ed0:	795b      	ldrb	r3, [r3, #5]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb2b 	bl	8000534 <__aeabi_i2d>
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800211c <_Z16mpu6050_readDatav+0x2fc>)
 8001ee4:	f7fe fcba 	bl	800085c <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			//printf("Accel-Z [g]: %f \n", accZ);

			//Roll and Pitch Angles from Accelerometer
			accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001ef0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001efc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f00:	f7fe fb82 	bl	8000608 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4690      	mov	r8, r2
 8001f0a:	4699      	mov	r9, r3
 8001f0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f14:	f7fe fb78 	bl	8000608 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4649      	mov	r1, r9
 8001f20:	f7fe f9bc 	bl	800029c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	ec43 2b17 	vmov	d7, r2, r3
 8001f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f30:	eef0 0a67 	vmov.f32	s1, s15
 8001f34:	f00c f84f 	bl	800dfd6 <sqrt>
 8001f38:	eeb0 7a40 	vmov.f32	s14, s0
 8001f3c:	eef0 7a60 	vmov.f32	s15, s1
 8001f40:	eeb0 1a47 	vmov.f32	s2, s14
 8001f44:	eef0 1a67 	vmov.f32	s3, s15
 8001f48:	ec45 4b10 	vmov	d0, r4, r5
 8001f4c:	f00c f841 	bl	800dfd2 <atan2>
 8001f50:	ec51 0b10 	vmov	r0, r1, d0
 8001f54:	a36a      	add	r3, pc, #424	@ (adr r3, 8002100 <_Z16mpu6050_readDatav+0x2e0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			/*estimation that works only if sensor is level (small pitch angle)
			accRoll = atan2(accY, accZ) * 57.3;
			printf("Roll1: %f \n", accRoll);
			*/
			accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f6e:	f7fe fb4b 	bl	8000608 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4614      	mov	r4, r2
 8001f78:	461d      	mov	r5, r3
 8001f7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f82:	f7fe fb41 	bl	8000608 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe f985 	bl	800029c <__adddf3>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	ec43 2b17 	vmov	d7, r2, r3
 8001f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9e:	eef0 0a67 	vmov.f32	s1, s15
 8001fa2:	f00c f818 	bl	800dfd6 <sqrt>
 8001fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001faa:	eef0 7a60 	vmov.f32	s15, s1
 8001fae:	eeb0 1a47 	vmov.f32	s2, s14
 8001fb2:	eef0 1a67 	vmov.f32	s3, s15
 8001fb6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001fba:	f00c f80a 	bl	800dfd2 <atan2>
 8001fbe:	ec51 0b10 	vmov	r0, r1, d0
 8001fc2:	a34f      	add	r3, pc, #316	@ (adr r3, 8002100 <_Z16mpu6050_readDatav+0x2e0>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fb1e 	bl	8000608 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2308 	strd	r2, r3, [r7, #32]


			//Temperature Data (Registers 65 and 66)

			//Gyroscope Data (Registers 67 to 72)
			currentTime = HAL_GetTick();
 8001fd4:	f000 fc66 	bl	80028a4 <HAL_GetTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a51      	ldr	r2, [pc, #324]	@ (8002120 <_Z16mpu6050_readDatav+0x300>)
 8001fdc:	6013      	str	r3, [r2, #0]
			dt = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8001fde:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <_Z16mpu6050_readDatav+0x300>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <_Z16mpu6050_readDatav+0x304>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa93 	bl	8000514 <__aeabi_ui2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8002128 <_Z16mpu6050_readDatav+0x308>)
 8001ff4:	f7fe fc32 	bl	800085c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
			previousTime = currentTime;
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <_Z16mpu6050_readDatav+0x300>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <_Z16mpu6050_readDatav+0x304>)
 8002006:	6013      	str	r3, [r2, #0]

			gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8002008:	4b42      	ldr	r3, [pc, #264]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 800200a:	7a1b      	ldrb	r3, [r3, #8]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b21a      	sxth	r2, r3
 8002010:	4b40      	ldr	r3, [pc, #256]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8002012:	7a5b      	ldrb	r3, [r3, #9]
 8002014:	b21b      	sxth	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b21b      	sxth	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa8a 	bl	8000534 <__aeabi_i2d>
 8002020:	a339      	add	r3, pc, #228	@ (adr r3, 8002108 <_Z16mpu6050_readDatav+0x2e8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fc19 	bl	800085c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			//printf("Gyro-X [°/s]: %f \n", gyroX);

			gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8002034:	7a9b      	ldrb	r3, [r3, #10]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 800203c:	7adb      	ldrb	r3, [r3, #11]
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa75 	bl	8000534 <__aeabi_i2d>
 800204a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002108 <_Z16mpu6050_readDatav+0x2e8>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fc04 	bl	800085c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9c7 2302 	strd	r2, r3, [r7, #8]
			//printf("Gyro-Y [°/s]: %f \n", gyroY);

			gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 800205c:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 800205e:	7b1b      	ldrb	r3, [r3, #12]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b2b      	ldr	r3, [pc, #172]	@ (8002114 <_Z16mpu6050_readDatav+0x2f4>)
 8002066:	7b5b      	ldrb	r3, [r3, #13]
 8002068:	b21b      	sxth	r3, r3
 800206a:	4313      	orrs	r3, r2
 800206c:	b21b      	sxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa60 	bl	8000534 <__aeabi_i2d>
 8002074:	a324      	add	r3, pc, #144	@ (adr r3, 8002108 <_Z16mpu6050_readDatav+0x2e8>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe fbef 	bl	800085c <__aeabi_ddiv>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	e9c7 2300 	strd	r2, r3, [r7]
			//printf("Gyro-Z [°/s]: %f \n", gyroZ);

			//Angles and yaw from Gyroscope
			gyroAngleX += gyroX * dt;
 8002086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800208a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800208e:	f7fe fabb 	bl	8000608 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <_Z16mpu6050_readDatav+0x30c>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe f8fc 	bl	800029c <__adddf3>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4920      	ldr	r1, [pc, #128]	@ (800212c <_Z16mpu6050_readDatav+0x30c>)
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
			gyroAngleY += gyroY * dt;
 80020ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020b6:	f7fe faa7 	bl	8000608 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <_Z16mpu6050_readDatav+0x310>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe f8e8 	bl	800029c <__adddf3>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4917      	ldr	r1, [pc, #92]	@ (8002130 <_Z16mpu6050_readDatav+0x310>)
 80020d2:	e9c1 2300 	strd	r2, r3, [r1]
			gyroYaw += gyroZ * dt;
 80020d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020de:	f7fe fa93 	bl	8000608 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <_Z16mpu6050_readDatav+0x314>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe f8d4 	bl	800029c <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	e01e      	b.n	8002138 <_Z16mpu6050_readDatav+0x318>
 80020fa:	bf00      	nop
 80020fc:	f3af 8000 	nop.w
 8002100:	c63f1412 	.word	0xc63f1412
 8002104:	404ca5dc 	.word	0x404ca5dc
 8002108:	00000000 	.word	0x00000000
 800210c:	40606000 	.word	0x40606000
 8002110:	2000032c 	.word	0x2000032c
 8002114:	200004f8 	.word	0x200004f8
 8002118:	40020000 	.word	0x40020000
 800211c:	40d00000 	.word	0x40d00000
 8002120:	20000530 	.word	0x20000530
 8002124:	20000534 	.word	0x20000534
 8002128:	408f4000 	.word	0x408f4000
 800212c:	20000520 	.word	0x20000520
 8002130:	20000528 	.word	0x20000528
 8002134:	20000508 	.word	0x20000508
 8002138:	4939      	ldr	r1, [pc, #228]	@ (8002220 <_Z16mpu6050_readDatav+0x400>)
 800213a:	e9c1 2300 	strd	r2, r3, [r1]

			//Complementary Filter
			filterRoll = GYRO_FILTER_WEIGHT * (filterRoll + gyroX * dt) + (1 - GYRO_FILTER_WEIGHT) * accRoll;
 800213e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002142:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002146:	f7fe fa5f 	bl	8000608 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <_Z16mpu6050_readDatav+0x404>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe f8a0 	bl	800029c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	a32a      	add	r3, pc, #168	@ (adr r3, 8002210 <_Z16mpu6050_readDatav+0x3f0>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe fa4d 	bl	8000608 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4614      	mov	r4, r2
 8002174:	461d      	mov	r5, r3
 8002176:	a328      	add	r3, pc, #160	@ (adr r3, 8002218 <_Z16mpu6050_readDatav+0x3f8>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002180:	f7fe fa42 	bl	8000608 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe f886 	bl	800029c <__adddf3>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4923      	ldr	r1, [pc, #140]	@ (8002224 <_Z16mpu6050_readDatav+0x404>)
 8002196:	e9c1 2300 	strd	r2, r3, [r1]
			filterPitch = GYRO_FILTER_WEIGHT * (filterPitch + gyroY * dt) + (1 - GYRO_FILTER_WEIGHT) * accPitch;
 800219a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a2:	f7fe fa31 	bl	8000608 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <_Z16mpu6050_readDatav+0x408>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe f872 	bl	800029c <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	a313      	add	r3, pc, #76	@ (adr r3, 8002210 <_Z16mpu6050_readDatav+0x3f0>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fa1f 	bl	8000608 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4614      	mov	r4, r2
 80021d0:	461d      	mov	r5, r3
 80021d2:	a311      	add	r3, pc, #68	@ (adr r3, 8002218 <_Z16mpu6050_readDatav+0x3f8>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f858 	bl	800029c <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	490d      	ldr	r1, [pc, #52]	@ (8002228 <_Z16mpu6050_readDatav+0x408>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]

			//printf("Roll: %f \n", filterRoll);
			//printf("Pitch: %f \n", filterPitch);
			//printf("Yaw: %f \n", gyroYaw);

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2110      	movs	r1, #16
 80021fa:	480c      	ldr	r0, [pc, #48]	@ (800222c <_Z16mpu6050_readDatav+0x40c>)
 80021fc:	f001 f9a2 	bl	8003544 <HAL_GPIO_WritePin>
		}
	}
}
 8002200:	bf00      	nop
 8002202:	3750      	adds	r7, #80	@ 0x50
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800220a:	bf00      	nop
 800220c:	f3af 8000 	nop.w
 8002210:	7ae147ae 	.word	0x7ae147ae
 8002214:	3fefae14 	.word	0x3fefae14
 8002218:	47ae1480 	.word	0x47ae1480
 800221c:	3f847ae1 	.word	0x3f847ae1
 8002220:	20000508 	.word	0x20000508
 8002224:	20000510 	.word	0x20000510
 8002228:	20000518 	.word	0x20000518
 800222c:	40020000 	.word	0x40020000

08002230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a0f      	ldr	r2, [pc, #60]	@ (800227c <HAL_MspInit+0x4c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <HAL_MspInit+0x4c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <HAL_MspInit+0x4c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <HAL_I2C_MspInit+0xa4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d13b      	bne.n	800231a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022be:	23c0      	movs	r3, #192	@ 0xc0
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c2:	2312      	movs	r3, #18
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ce:	2304      	movs	r3, #4
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4814      	ldr	r0, [pc, #80]	@ (800232c <HAL_I2C_MspInit+0xac>)
 80022da:	f000 ffaf 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_I2C_MspInit+0xa8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	201f      	movs	r0, #31
 8002300:	f000 fbdb 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002304:	201f      	movs	r0, #31
 8002306:	f000 fbf4 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2020      	movs	r0, #32
 8002310:	f000 fbd3 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002314:	2020      	movs	r0, #32
 8002316:	f000 fbec 	bl	8002af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	@ 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40005400 	.word	0x40005400
 8002328:	40023800 	.word	0x40023800
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a33      	ldr	r2, [pc, #204]	@ (800240c <HAL_TIM_Base_MspInit+0xdc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d144      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a31      	ldr	r2, [pc, #196]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800235e:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002360:	4a2d      	ldr	r2, [pc, #180]	@ (8002418 <HAL_TIM_Base_MspInit+0xe8>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002366:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800236a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 800237a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800237e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002386:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 800238a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800238e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002390:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002396:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80023a2:	481c      	ldr	r0, [pc, #112]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 80023a4:	f000 fbc0 	bl	8002b28 <HAL_DMA_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023ae:	f7ff fc1f 	bl	8001bf0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 80023b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023b8:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80023c4:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_TIM_Base_MspInit+0xe4>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023ca:	e01a      	b.n	8002402 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a12      	ldr	r2, [pc, #72]	@ (800241c <HAL_TIM_Base_MspInit+0xec>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d115      	bne.n	8002402 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	4a0c      	ldr	r2, [pc, #48]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_TIM_Base_MspInit+0xe0>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	201e      	movs	r0, #30
 80023f8:	f000 fb5f 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023fc:	201e      	movs	r0, #30
 80023fe:	f000 fb78 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40000400 	.word	0x40000400
 8002410:	40023800 	.word	0x40023800
 8002414:	20000410 	.word	0x20000410
 8002418:	40026070 	.word	0x40026070
 800241c:	40000800 	.word	0x40000800

08002420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <HAL_TIM_MspPostInit+0x68>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11d      	bne.n	800247e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_TIM_MspPostInit+0x6c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a10      	ldr	r2, [pc, #64]	@ (800248c <HAL_TIM_MspPostInit+0x6c>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <HAL_TIM_MspPostInit+0x6c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800245e:	2310      	movs	r3, #16
 8002460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800246e:	2302      	movs	r3, #2
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	@ (8002490 <HAL_TIM_MspPostInit+0x70>)
 800247a:	f000 fedf 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40000400 	.word	0x40000400
 800248c:	40023800 	.word	0x40023800
 8002490:	40020400 	.word	0x40020400

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	@ 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_UART_MspInit+0x94>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d133      	bne.n	800251e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a14      	ldr	r2, [pc, #80]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_UART_MspInit+0x98>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ee:	230c      	movs	r3, #12
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fe:	2307      	movs	r3, #7
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	4809      	ldr	r0, [pc, #36]	@ (8002530 <HAL_UART_MspInit+0x9c>)
 800250a:	f000 fe97 	bl	800323c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2026      	movs	r0, #38	@ 0x26
 8002514:	f000 fad1 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002518:	2026      	movs	r0, #38	@ 0x26
 800251a:	f000 faea 	bl	8002af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800251e:	bf00      	nop
 8002520:	3728      	adds	r7, #40	@ 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40004400 	.word	0x40004400
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <NMI_Handler+0x4>

0800253c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <HardFault_Handler+0x4>

08002544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <MemManage_Handler+0x4>

0800254c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <UsageFault_Handler+0x4>

0800255c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258a:	f000 f977 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <DMA1_Stream4_IRQHandler+0x10>)
 800259a:	f000 fc05 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000410 	.word	0x20000410

080025a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <TIM4_IRQHandler+0x10>)
 80025ae:	f005 feeb 	bl	8008388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200003c8 	.word	0x200003c8

080025bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <I2C1_EV_IRQHandler+0x10>)
 80025c2:	f001 fda7 	bl	8004114 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000032c 	.word	0x2000032c

080025d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <I2C1_ER_IRQHandler+0x10>)
 80025d6:	f001 fef0 	bl	80043ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000032c 	.word	0x2000032c

080025e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <USART2_IRQHandler+0x10>)
 80025ea:	f006 fdc9 	bl	8009180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000470 	.word	0x20000470

080025f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <OTG_FS_IRQHandler+0x10>)
 80025fe:	f003 ff62 	bl	80064c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20001a20 	.word	0x20001a20

0800260c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_kill>:

int _kill(int pid, int sig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002626:	f00c fefb 	bl	800f420 <__errno>
 800262a:	4603      	mov	r3, r0
 800262c:	2216      	movs	r2, #22
 800262e:	601a      	str	r2, [r3, #0]
  return -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_exit>:

void _exit (int status)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffe7 	bl	800261c <_kill>
  while (1) {}    /* Make sure we hang here */
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <_exit+0x12>

08002652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e00a      	b.n	800267a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002664:	f3af 8000 	nop.w
 8002668:	4601      	mov	r1, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	60ba      	str	r2, [r7, #8]
 8002670:	b2ca      	uxtb	r2, r1
 8002672:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbf0      	blt.n	8002664 <_read+0x12>
  }

  return len;
 8002682:	687b      	ldr	r3, [r7, #4]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_close>:
  }
  return len;
}

int _close(int file)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b4:	605a      	str	r2, [r3, #4]
  return 0;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_isatty>:

int _isatty(int file)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f00c fe7c 	bl	800f420 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20020000 	.word	0x20020000
 8002754:	00000400 	.word	0x00000400
 8002758:	20000538 	.word	0x20000538
 800275c:	20002270 	.word	0x20002270

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002788:	f7ff ffea 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800278c:	480c      	ldr	r0, [pc, #48]	@ (80027c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800278e:	490d      	ldr	r1, [pc, #52]	@ (80027c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002790:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a4:	4c0a      	ldr	r4, [pc, #40]	@ (80027d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027b2:	f00c fe3b 	bl	800f42c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b6:	f7fe fedb 	bl	8001570 <main>
  bx  lr    
 80027ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80027c8:	0801167c 	.word	0x0801167c
  ldr r2, =_sbss
 80027cc:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80027d0:	20002270 	.word	0x20002270

080027d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC_IRQHandler>
	...

080027d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <HAL_Init+0x40>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <HAL_Init+0x40>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <HAL_Init+0x40>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002800:	2003      	movs	r0, #3
 8002802:	f000 f94f 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002806:	200f      	movs	r0, #15
 8002808:	f000 f808 	bl	800281c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800280c:	f7ff fd10 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_InitTick+0x54>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_InitTick+0x58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f967 	bl	8002b0e <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d80a      	bhi.n	8002866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 f92f 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <HAL_InitTick+0x5c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000018 	.word	0x20000018
 8002874:	20000020 	.word	0x20000020
 8002878:	2000001c 	.word	0x2000001c

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000020 	.word	0x20000020
 80028a0:	2000053c 	.word	0x2000053c

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	@ (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000053c 	.word	0x2000053c

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000020 	.word	0x20000020

08002904 <__NVIC_SetPriorityGrouping>:
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff29 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff3e 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff31 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa2 	bl	8002a60 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff feb6 	bl	80028a4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e099      	b.n	8002c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	e00f      	b.n	8002b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b66:	f7ff fe9d 	bl	80028a4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d908      	bls.n	8002b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e078      	b.n	8002c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e8      	bne.n	8002b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <HAL_DMA_Init+0x158>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d117      	bne.n	8002c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa89 	bl	8003144 <DMA_CheckFifoParam>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2240      	movs	r2, #64	@ 0x40
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c46:	2301      	movs	r3, #1
 8002c48:	e016      	b.n	8002c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa40 	bl	80030d8 <DMA_CalcBaseAndBitshift>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	223f      	movs	r2, #63	@ 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	f010803f 	.word	0xf010803f

08002c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff fe07 	bl	80028a4 <HAL_GetTick>
 8002c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2280      	movs	r2, #128	@ 0x80
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e052      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0216 	bic.w	r2, r2, #22
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_DMA_Abort+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	e013      	b.n	8002d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d08:	f7ff fdcc 	bl	80028a4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d90c      	bls.n	8002d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e015      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	223f      	movs	r2, #63	@ 0x3f
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	@ 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00c      	b.n	8002d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002db4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff0 <HAL_DMA_IRQHandler+0x248>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ff4 <HAL_DMA_IRQHandler+0x24c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2208      	movs	r2, #8
 8002e02:	409a      	lsls	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	f043 0202 	orr.w	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	2210      	movs	r2, #16
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d043      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03c      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d024      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
 8002ed6:	e01f      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 808f 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8087 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2220      	movs	r2, #32
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d136      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0216 	bic.w	r2, r2, #22
 8002f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	223f      	movs	r2, #63	@ 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
        }
        return;
 8002fbe:	e079      	b.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e02c      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
 8002fee:	bf00      	nop
 8002ff0:	20000018 	.word	0x20000018
 8002ff4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e01e      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0210 	bic.w	r2, r2, #16
 8003026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2205      	movs	r2, #5
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d307      	bcc.n	8003090 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_DMA_IRQHandler+0x2cc>
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003090:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030b4:	bf00      	nop
    }
  }
}
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ca:	b2db      	uxtb	r3, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b10      	subs	r3, #16
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <DMA_CalcBaseAndBitshift+0x64>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f2:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d909      	bls.n	800311a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	@ 0x58
 8003118:	e007      	b.n	800312a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	aaaaaaab 	.word	0xaaaaaaab
 8003140:	0801127c 	.word	0x0801127c

08003144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d856      	bhi.n	8003212 <DMA_CheckFifoParam+0xce>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <DMA_CheckFifoParam+0x28>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003213 	.word	0x08003213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d046      	beq.n	8003216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e043      	b.n	8003216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003196:	d140      	bne.n	800321a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e03d      	b.n	800321a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a6:	d121      	bne.n	80031ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d837      	bhi.n	800321e <DMA_CheckFifoParam+0xda>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <DMA_CheckFifoParam+0x70>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031cb 	.word	0x080031cb
 80031bc:	080031c5 	.word	0x080031c5
 80031c0:	080031dd 	.word	0x080031dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e030      	b.n	800322c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d025      	beq.n	8003222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e022      	b.n	8003222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031e4:	d11f      	bne.n	8003226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ea:	e01c      	b.n	8003226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d903      	bls.n	80031fa <DMA_CheckFifoParam+0xb6>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d003      	beq.n	8003200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f8:	e018      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e015      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e00b      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003212:	bf00      	nop
 8003214:	e00a      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e008      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;   
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
    }
  } 
  
  return status; 
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e159      	b.n	800350c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	f040 8148 	bne.w	8003506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	2b02      	cmp	r3, #2
 800328c:	d130      	bne.n	80032f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	2203      	movs	r2, #3
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0201 	and.w	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d017      	beq.n	800332c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d123      	bne.n	8003380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80a2 	beq.w	8003506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <HAL_GPIO_Init+0x2e8>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033de:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a49      	ldr	r2, [pc, #292]	@ (800352c <HAL_GPIO_Init+0x2f0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d019      	beq.n	800343e <HAL_GPIO_Init+0x202>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a48      	ldr	r2, [pc, #288]	@ (8003530 <HAL_GPIO_Init+0x2f4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_GPIO_Init+0x1fe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <HAL_GPIO_Init+0x2f8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00d      	beq.n	8003436 <HAL_GPIO_Init+0x1fa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_GPIO_Init+0x2fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0x1f6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a45      	ldr	r2, [pc, #276]	@ (800353c <HAL_GPIO_Init+0x300>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_GPIO_Init+0x1f2>
 800342a:	2304      	movs	r3, #4
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800342e:	2307      	movs	r3, #7
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x204>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x204>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	@ (8003528 <HAL_GPIO_Init+0x2ec>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345e:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003482:	4a2f      	ldr	r2, [pc, #188]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_GPIO_Init+0x304>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ac:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034dc:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_GPIO_Init+0x304>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <HAL_GPIO_Init+0x304>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f aea2 	bls.w	8003258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003560:	e003      	b.n	800356a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	041a      	lsls	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	041a      	lsls	r2, r3, #16
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43d9      	mvns	r1, r3
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	400b      	ands	r3, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e12b      	b.n	8003816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fe54 	bl	8002280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003610:	f004 fcd6 	bl	8007fc0 <HAL_RCC_GetPCLK1Freq>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a81      	ldr	r2, [pc, #516]	@ (8003820 <HAL_I2C_Init+0x274>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d807      	bhi.n	8003630 <HAL_I2C_Init+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a80      	ldr	r2, [pc, #512]	@ (8003824 <HAL_I2C_Init+0x278>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e006      	b.n	800363e <HAL_I2C_Init+0x92>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a7d      	ldr	r2, [pc, #500]	@ (8003828 <HAL_I2C_Init+0x27c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0e7      	b.n	8003816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a78      	ldr	r2, [pc, #480]	@ (800382c <HAL_I2C_Init+0x280>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	0c9b      	lsrs	r3, r3, #18
 8003650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a6a      	ldr	r2, [pc, #424]	@ (8003820 <HAL_I2C_Init+0x274>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d802      	bhi.n	8003680 <HAL_I2C_Init+0xd4>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	e009      	b.n	8003694 <HAL_I2C_Init+0xe8>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_I2C_Init+0x284>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	3301      	adds	r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	495c      	ldr	r1, [pc, #368]	@ (8003820 <HAL_I2C_Init+0x274>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d819      	bhi.n	80036e8 <HAL_I2C_Init+0x13c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e59      	subs	r1, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c8:	400b      	ands	r3, r1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_I2C_Init+0x138>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e59      	subs	r1, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e2:	e051      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e4:	2304      	movs	r3, #4
 80036e6:	e04f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <HAL_I2C_Init+0x168>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e012      	b.n	800373a <HAL_I2C_Init+0x18e>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Init+0x196>
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10e      	bne.n	8003768 <HAL_I2C_Init+0x1bc>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e58      	subs	r0, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	440b      	add	r3, r1
 8003758:	fbb0 f3f3 	udiv	r3, r0, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003766:	e00f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	0099      	lsls	r1, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6809      	ldr	r1, [r1, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6911      	ldr	r1, [r2, #16]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	000186a0 	.word	0x000186a0
 8003824:	001e847f 	.word	0x001e847f
 8003828:	003d08ff 	.word	0x003d08ff
 800382c:	431bde83 	.word	0x431bde83
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	2b80      	cmp	r3, #128	@ 0x80
 8003848:	d103      	bne.n	8003852 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	460b      	mov	r3, r1
 8003874:	813b      	strh	r3, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387a:	f7ff f813 	bl	80028a4 <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	f040 80d9 	bne.w	8003a40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	496d      	ldr	r1, [pc, #436]	@ (8003a4c <HAL_I2C_Mem_Write+0x1ec>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f002 fa4d 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0cc      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Mem_Write+0x56>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0c5      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d007      	beq.n	80038dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2221      	movs	r2, #33	@ 0x21
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a50 <HAL_I2C_Mem_Write+0x1f0>)
 800391c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	88f8      	ldrh	r0, [r7, #6]
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	8979      	ldrh	r1, [r7, #10]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4603      	mov	r3, r0
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f001 ffdc 	bl	80058ec <I2C_RequestMemoryWrite>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d052      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e081      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f002 fb12 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_I2C_Mem_Write+0x180>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1aa      	bne.n	800393e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f002 fb05 	bl	8005ffc <I2C_WaitOnBTFFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d107      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e016      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000

08003a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	@ 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7fe ff19 	bl	80028a4 <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f040 8214 	bne.w	8003eaa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2319      	movs	r3, #25
 8003a88:	2201      	movs	r2, #1
 8003a8a:	497b      	ldr	r1, [pc, #492]	@ (8003c78 <HAL_I2C_Mem_Read+0x224>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f002 f953 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e207      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x56>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e200      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d007      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2222      	movs	r2, #34	@ 0x22
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_I2C_Mem_Read+0x228>)
 8003b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b12:	88f8      	ldrh	r0, [r7, #6]
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	8979      	ldrh	r1, [r7, #10]
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4603      	mov	r3, r0
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f001 ff78 	bl	8005a18 <I2C_RequestMemoryRead>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1bc      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d113      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e190      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d11b      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e170      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d11b      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	e150      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf8:	e144      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f200 80f1 	bhi.w	8003de6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d123      	bne.n	8003c54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f002 fa6d 	bl	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e145      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c52:	e117      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d14e      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	2200      	movs	r2, #0
 8003c64:	4906      	ldr	r1, [pc, #24]	@ (8003c80 <HAL_I2C_Mem_Read+0x22c>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f002 f866 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e11a      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000
 8003c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf8:	e0c4      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	2200      	movs	r2, #0
 8003d02:	496c      	ldr	r1, [pc, #432]	@ (8003eb4 <HAL_I2C_Mem_Read+0x460>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f002 f817 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0cb      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4955      	ldr	r1, [pc, #340]	@ (8003eb4 <HAL_I2C_Mem_Read+0x460>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f001 ffe9 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e09d      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de4:	e04e      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f002 f980 	bl	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e058      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d124      	bne.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f aeb6 	bne.w	8003bfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3728      	adds	r7, #40	@ 0x28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00010004 	.word	0x00010004

08003eb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7fe fcec 	bl	80028a4 <HAL_GetTick>
 8003ecc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	f040 8111 	bne.w	8004102 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2319      	movs	r3, #25
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4988      	ldr	r1, [pc, #544]	@ (800410c <HAL_I2C_IsDeviceReady+0x254>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f001 ff24 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e104      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2C_IsDeviceReady+0x50>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e0fd      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d007      	beq.n	8003f2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2224      	movs	r2, #36	@ 0x24
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a70      	ldr	r2, [pc, #448]	@ (8004110 <HAL_I2C_IsDeviceReady+0x258>)
 8003f50:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f001 fee2 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f88:	d103      	bne.n	8003f92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0b6      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fc7d 	bl	80028a4 <HAL_GetTick>
 8003faa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fda:	e025      	b.n	8004028 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fdc:	f7fe fc62 	bl	80028a4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <HAL_I2C_IsDeviceReady+0x13a>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22a0      	movs	r2, #160	@ 0xa0
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2ba0      	cmp	r3, #160	@ 0xa0
 8004032:	d005      	beq.n	8004040 <HAL_I2C_IsDeviceReady+0x188>
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_I2C_IsDeviceReady+0x188>
 800403a:	7dbb      	ldrb	r3, [r7, #22]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0cd      	beq.n	8003fdc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d129      	bne.n	80040aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004064:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2319      	movs	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	4921      	ldr	r1, [pc, #132]	@ (800410c <HAL_I2C_IsDeviceReady+0x254>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f001 fe56 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e036      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e02c      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	490f      	ldr	r1, [pc, #60]	@ (800410c <HAL_I2C_IsDeviceReady+0x254>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 fe32 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e012      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f4ff af32 	bcc.w	8003f52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00100002 	.word	0x00100002
 8004110:	ffff0000 	.word	0xffff0000

08004114 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004134:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d003      	beq.n	800414c <HAL_I2C_EV_IRQHandler+0x38>
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	f040 80b1 	bne.w	80042ae <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <HAL_I2C_EV_IRQHandler+0x6e>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800416c:	d003      	beq.n	8004176 <HAL_I2C_EV_IRQHandler+0x62>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004174:	d101      	bne.n	800417a <HAL_I2C_EV_IRQHandler+0x66>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_I2C_EV_IRQHandler+0x68>
 800417a:	2300      	movs	r3, #0
 800417c:	2b01      	cmp	r3, #1
 800417e:	f000 8114 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x90>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f002 f836 	bl	8006208 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fd88 	bl	8004cb2 <I2C_Master_SB>
 80041a2:	e083      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0xac>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fe00 	bl	8004dbe <I2C_Master_ADD10>
 80041be:	e075      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_I2C_EV_IRQHandler+0xc8>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fe1c 	bl	8004e12 <I2C_Master_ADDR>
 80041da:	e067      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d036      	beq.n	8004254 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f4:	f000 80db 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00d      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x10a>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x10a>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9e4 	bl	80045e4 <I2C_MasterTransmit_TXE>
 800421c:	e046      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80c2 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80bc 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004236:	7bbb      	ldrb	r3, [r7, #14]
 8004238:	2b21      	cmp	r3, #33	@ 0x21
 800423a:	d103      	bne.n	8004244 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa6d 	bl	800471c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004242:	e0b4      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	f040 80b1 	bne.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fadb 	bl	8004808 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004252:	e0ac      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004262:	f000 80a4 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x178>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x178>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fb57 	bl	8004938 <I2C_MasterReceive_RXNE>
 800428a:	e00f      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 808b 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8085 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fc0f 	bl	8004ac8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042aa:	e080      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
 80042ac:	e07f      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e007      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x1ea>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 ffda 	bl	80052b0 <I2C_Slave_ADDR>
 80042fc:	e05a      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_I2C_EV_IRQHandler+0x206>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 f814 	bl	8005340 <I2C_Slave_STOPF>
 8004318:	e04c      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800431a:	7bbb      	ldrb	r3, [r7, #14]
 800431c:	2b21      	cmp	r3, #33	@ 0x21
 800431e:	d002      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x212>
 8004320:	7bbb      	ldrb	r3, [r7, #14]
 8004322:	2b29      	cmp	r3, #41	@ 0x29
 8004324:	d120      	bne.n	8004368 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <HAL_I2C_EV_IRQHandler+0x238>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_I2C_EV_IRQHandler+0x238>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fef5 	bl	8005134 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800434a:	e032      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02d      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0x29e>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800435c:	2b00      	cmp	r3, #0
 800435e:	d028      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 ff24 	bl	80051ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004366:	e024      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x27a>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x27a>
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 ff32 	bl	80051f0 <I2C_SlaveReceive_RXNE>
 800438c:	e012      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 ff62 	bl	800526c <I2C_SlaveReceive_BTF>
 80043a8:	e004      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	@ 0x28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <HAL_I2C_ER_IRQHandler+0x4a>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004402:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <HAL_I2C_ER_IRQHandler+0x70>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004428:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d03e      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xf8>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d039      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800443e:	7efb      	ldrb	r3, [r7, #27]
 8004440:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004458:	7ebb      	ldrb	r3, [r7, #26]
 800445a:	2b20      	cmp	r3, #32
 800445c:	d112      	bne.n	8004484 <HAL_I2C_ER_IRQHandler+0xca>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10f      	bne.n	8004484 <HAL_I2C_ER_IRQHandler+0xca>
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	2b21      	cmp	r3, #33	@ 0x21
 8004468:	d008      	beq.n	800447c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b29      	cmp	r3, #41	@ 0x29
 800446e:	d005      	beq.n	800447c <HAL_I2C_ER_IRQHandler+0xc2>
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b28      	cmp	r3, #40	@ 0x28
 8004474:	d106      	bne.n	8004484 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b21      	cmp	r3, #33	@ 0x21
 800447a:	d103      	bne.n	8004484 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 f88f 	bl	80055a0 <I2C_Slave_AF>
 8004482:	e016      	b.n	80044b2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800448c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004496:	7efb      	ldrb	r3, [r7, #27]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d002      	beq.n	80044a2 <HAL_I2C_ER_IRQHandler+0xe8>
 800449c:	7efb      	ldrb	r3, [r7, #27]
 800449e:	2b40      	cmp	r3, #64	@ 0x40
 80044a0:	d107      	bne.n	80044b2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <HAL_I2C_ER_IRQHandler+0x11e>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80044d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 f8cc 	bl	8005688 <I2C_ITError>
  }
}
 80044f0:	bf00      	nop
 80044f2:	3728      	adds	r7, #40	@ 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
 8004554:	4613      	mov	r3, r2
 8004556:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d6:	b2db      	uxtb	r3, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	2b00      	cmp	r3, #0
 8004608:	d150      	bne.n	80046ac <I2C_MasterTransmit_TXE+0xc8>
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b21      	cmp	r3, #33	@ 0x21
 800460e:	d14d      	bne.n	80046ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d01d      	beq.n	8004652 <I2C_MasterTransmit_TXE+0x6e>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b20      	cmp	r3, #32
 800461a:	d01a      	beq.n	8004652 <I2C_MasterTransmit_TXE+0x6e>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004622:	d016      	beq.n	8004652 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004632:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2211      	movs	r2, #17
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff54 	bl	80044f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004650:	e060      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004660:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004670:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d107      	bne.n	800469c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ff6f 	bl	8004578 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800469a:	e03b      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff27 	bl	80044f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046aa:	e033      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b21      	cmp	r3, #33	@ 0x21
 80046b0:	d005      	beq.n	80046be <I2C_MasterTransmit_TXE+0xda>
 80046b2:	7bbb      	ldrb	r3, [r7, #14]
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d12d      	bne.n	8004714 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b22      	cmp	r3, #34	@ 0x22
 80046bc:	d12a      	bne.n	8004714 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046d8:	e01c      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d103      	bne.n	80046ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f88e 	bl	8004808 <I2C_MemoryTransmit_TXE_BTF>
}
 80046ec:	e012      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004712:	e7ff      	b.n	8004714 <I2C_MasterTransmit_TXE+0x130>
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b21      	cmp	r3, #33	@ 0x21
 8004734:	d164      	bne.n	8004800 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004764:	e04c      	b.n	8004800 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d01d      	beq.n	80047a8 <I2C_MasterTransmit_BTF+0x8c>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b20      	cmp	r3, #32
 8004770:	d01a      	beq.n	80047a8 <I2C_MasterTransmit_BTF+0x8c>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004778:	d016      	beq.n	80047a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004788:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2211      	movs	r2, #17
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fea9 	bl	80044f8 <HAL_I2C_MasterTxCpltCallback>
}
 80047a6:	e02b      	b.n	8004800 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b40      	cmp	r3, #64	@ 0x40
 80047e0:	d107      	bne.n	80047f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fec4 	bl	8004578 <HAL_I2C_MemTxCpltCallback>
}
 80047f0:	e006      	b.n	8004800 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fe7c 	bl	80044f8 <HAL_I2C_MasterTxCpltCallback>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11d      	bne.n	800485c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10b      	bne.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482c:	b2da      	uxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004838:	1c9a      	adds	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800483e:	e077      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004844:	b29b      	uxth	r3, r3
 8004846:	121b      	asrs	r3, r3, #8
 8004848:	b2da      	uxtb	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800485a:	e069      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10b      	bne.n	800487c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004868:	b2da      	uxtb	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800487a:	e059      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004880:	2b02      	cmp	r3, #2
 8004882:	d152      	bne.n	800492a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b22      	cmp	r3, #34	@ 0x22
 8004888:	d10d      	bne.n	80048a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004898:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048a4:	e044      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b21      	cmp	r3, #33	@ 0x21
 80048b4:	d112      	bne.n	80048dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048da:	e029      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d124      	bne.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b21      	cmp	r3, #33	@ 0x21
 80048ea:	d121      	bne.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fe28 	bl	8004578 <HAL_I2C_MemTxCpltCallback>
}
 8004928:	e002      	b.n	8004930 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fe ff82 	bl	8003834 <I2C_Flush_DR>
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b22      	cmp	r3, #34	@ 0x22
 800494a:	f040 80b9 	bne.w	8004ac0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d921      	bls.n	80049a6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b03      	cmp	r3, #3
 8004990:	f040 8096 	bne.w	8004ac0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80049a4:	e08c      	b.n	8004ac0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d07f      	beq.n	8004aae <I2C_MasterReceive_RXNE+0x176>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d002      	beq.n	80049ba <I2C_MasterReceive_RXNE+0x82>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d179      	bne.n	8004aae <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 fb66 	bl	800608c <I2C_WaitOnSTOPRequestThroughIT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d14c      	bne.n	8004a60 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d10a      	bne.n	8004a36 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fdac 	bl	800458c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a34:	e044      	b.n	8004ac0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d002      	beq.n	8004a4a <I2C_MasterReceive_RXNE+0x112>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d103      	bne.n	8004a52 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a50:	e002      	b.n	8004a58 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2212      	movs	r2, #18
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fd57 	bl	800450c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a5e:	e02f      	b.n	8004ac0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fd7a 	bl	80045a0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004aac:	e008      	b.n	8004ac0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abc:	605a      	str	r2, [r3, #4]
}
 8004abe:	e7ff      	b.n	8004ac0 <I2C_MasterReceive_RXNE+0x188>
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d11b      	bne.n	8004b18 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b16:	e0c8      	b.n	8004caa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d129      	bne.n	8004b76 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d00a      	beq.n	8004b4e <I2C_MasterReceive_BTF+0x86>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d007      	beq.n	8004b4e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b74:	e099      	b.n	8004caa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	f040 8081 	bne.w	8004c84 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d002      	beq.n	8004b8e <I2C_MasterReceive_BTF+0xc6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d108      	bne.n	8004ba0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e019      	b.n	8004bd4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d002      	beq.n	8004bac <I2C_MasterReceive_BTF+0xe4>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d108      	bne.n	8004bbe <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e00a      	b.n	8004bd4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d007      	beq.n	8004bd4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d10a      	bne.n	8004c5a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fc9a 	bl	800458c <HAL_I2C_MemRxCpltCallback>
}
 8004c58:	e027      	b.n	8004caa <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d002      	beq.n	8004c6e <I2C_MasterReceive_BTF+0x1a6>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d103      	bne.n	8004c76 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c74:	e002      	b.n	8004c7c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2212      	movs	r2, #18
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff fc45 	bl	800450c <HAL_I2C_MasterRxCpltCallback>
}
 8004c82:	e012      	b.n	8004caa <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d117      	bne.n	8004cf6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cde:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ce0:	e067      	b.n	8004db2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]
}
 8004cf4:	e05d      	b.n	8004db2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cfe:	d133      	bne.n	8004d68 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b21      	cmp	r3, #33	@ 0x21
 8004d0a:	d109      	bne.n	8004d20 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d1c:	611a      	str	r2, [r3, #16]
 8004d1e:	e008      	b.n	8004d32 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <I2C_Master_SB+0x92>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d032      	beq.n	8004db2 <I2C_Master_SB+0x100>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d02d      	beq.n	8004db2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d64:	605a      	str	r2, [r3, #4]
}
 8004d66:	e024      	b.n	8004db2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10e      	bne.n	8004d8e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	11db      	asrs	r3, r3, #7
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 0306 	and.w	r3, r3, #6
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f063 030f 	orn	r3, r3, #15
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]
}
 8004d8c:	e011      	b.n	8004db2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10d      	bne.n	8004db2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	11db      	asrs	r3, r3, #7
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0306 	and.w	r3, r3, #6
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f063 030e 	orn	r3, r3, #14
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <I2C_Master_ADD10+0x26>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <I2C_Master_ADD10+0x48>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e04:	605a      	str	r2, [r3, #4]
  }
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b091      	sub	sp, #68	@ 0x44
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b22      	cmp	r3, #34	@ 0x22
 8004e3a:	f040 8169 	bne.w	8005110 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <I2C_Master_ADDR+0x54>
 8004e46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e4a:	2b40      	cmp	r3, #64	@ 0x40
 8004e4c:	d10b      	bne.n	8004e66 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	e160      	b.n	8005128 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <I2C_Master_ADDR+0x98>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e76:	d118      	bne.n	8004eaa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ea8:	e13e      	b.n	8005128 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e115      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	f040 808a 	bne.w	8004ffc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eee:	d137      	bne.n	8004f60 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0e:	d113      	bne.n	8004f38 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	e0e7      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e0d3      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d02e      	beq.n	8004fc4 <I2C_Master_ADDR+0x1b2>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d02b      	beq.n	8004fc4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d102      	bne.n	8004f78 <I2C_Master_ADDR+0x166>
 8004f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d125      	bne.n	8004fc4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d00e      	beq.n	8004f9c <I2C_Master_ADDR+0x18a>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d00b      	beq.n	8004f9c <I2C_Master_ADDR+0x18a>
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d008      	beq.n	8004f9c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004faa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	e0a1      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e085      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d14d      	bne.n	80050a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	2b04      	cmp	r3, #4
 800500a:	d016      	beq.n	800503a <I2C_Master_ADDR+0x228>
 800500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500e:	2b02      	cmp	r3, #2
 8005010:	d013      	beq.n	800503a <I2C_Master_ADDR+0x228>
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	2b10      	cmp	r3, #16
 8005016:	d010      	beq.n	800503a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005026:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e007      	b.n	800504a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005048:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005058:	d117      	bne.n	800508a <I2C_Master_ADDR+0x278>
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005060:	d00b      	beq.n	800507a <I2C_Master_ADDR+0x268>
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	2b01      	cmp	r3, #1
 8005066:	d008      	beq.n	800507a <I2C_Master_ADDR+0x268>
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	2b08      	cmp	r3, #8
 800506c:	d005      	beq.n	800507a <I2C_Master_ADDR+0x268>
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	2b10      	cmp	r3, #16
 8005072:	d002      	beq.n	800507a <I2C_Master_ADDR+0x268>
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	2b20      	cmp	r3, #32
 8005078:	d107      	bne.n	800508a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005088:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	e032      	b.n	8005108 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c0:	d117      	bne.n	80050f2 <I2C_Master_ADDR+0x2e0>
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050c8:	d00b      	beq.n	80050e2 <I2C_Master_ADDR+0x2d0>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d008      	beq.n	80050e2 <I2C_Master_ADDR+0x2d0>
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d005      	beq.n	80050e2 <I2C_Master_ADDR+0x2d0>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d002      	beq.n	80050e2 <I2C_Master_ADDR+0x2d0>
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d107      	bne.n	80050f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800510e:	e00b      	b.n	8005128 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
}
 8005126:	e7ff      	b.n	8005128 <I2C_Master_ADDR+0x316>
 8005128:	bf00      	nop
 800512a:	3744      	adds	r7, #68	@ 0x44
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005142:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d02b      	beq.n	80051a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d114      	bne.n	80051a6 <I2C_SlaveTransmit_TXE+0x72>
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b29      	cmp	r3, #41	@ 0x29
 8005180:	d111      	bne.n	80051a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005190:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2221      	movs	r2, #33	@ 0x21
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2228      	movs	r2, #40	@ 0x28
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f9bd 	bl	8004520 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02c      	beq.n	8005264 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d114      	bne.n	8005264 <I2C_SlaveReceive_RXNE+0x74>
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b2a      	cmp	r3, #42	@ 0x2a
 800523e:	d111      	bne.n	8005264 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800524e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2222      	movs	r2, #34	@ 0x22
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2228      	movs	r2, #40	@ 0x28
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff f968 	bl	8004534 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052ca:	2b28      	cmp	r3, #40	@ 0x28
 80052cc:	d125      	bne.n	800531a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	81bb      	strh	r3, [r7, #12]
 80052fc:	e002      	b.n	8005304 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800530c:	89ba      	ldrh	r2, [r7, #12]
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff f918 	bl	8004548 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005318:	e00e      	b.n	8005338 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800535e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539c:	d172      	bne.n	8005484 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b22      	cmp	r3, #34	@ 0x22
 80053a2:	d002      	beq.n	80053aa <I2C_Slave_STOPF+0x6a>
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a8:	d135      	bne.n	8005416 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	f043 0204 	orr.w	r2, r3, #4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd fe6a 	bl	80030bc <HAL_DMA_GetState>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d049      	beq.n	8005482 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	4a69      	ldr	r2, [pc, #420]	@ (8005598 <I2C_Slave_STOPF+0x258>)
 80053f4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fd fcb2 	bl	8002d64 <HAL_DMA_Abort_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03d      	beq.n	8005482 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005414:	e035      	b.n	8005482 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	f043 0204 	orr.w	r2, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005448:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fe34 	bl	80030bc <HAL_DMA_GetState>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d014      	beq.n	8005484 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545e:	4a4e      	ldr	r2, [pc, #312]	@ (8005598 <I2C_Slave_STOPF+0x258>)
 8005460:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd fc7c 	bl	8002d64 <HAL_DMA_Abort_IT>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800547c:	4610      	mov	r0, r2
 800547e:	4798      	blx	r3
 8005480:	e000      	b.n	8005484 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005482:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d03e      	beq.n	800550c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d112      	bne.n	80054c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b40      	cmp	r3, #64	@ 0x40
 80054ce:	d112      	bne.n	80054f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	f043 0204 	orr.w	r2, r3, #4
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f8b7 	bl	8005688 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800551a:	e039      	b.n	8005590 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005520:	d109      	bne.n	8005536 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2228      	movs	r2, #40	@ 0x28
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fe ffff 	bl	8004534 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b28      	cmp	r3, #40	@ 0x28
 8005540:	d111      	bne.n	8005566 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a15      	ldr	r2, [pc, #84]	@ (800559c <I2C_Slave_STOPF+0x25c>)
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff f800 	bl	8004564 <HAL_I2C_ListenCpltCallback>
}
 8005564:	e014      	b.n	8005590 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	2b22      	cmp	r3, #34	@ 0x22
 800556c:	d002      	beq.n	8005574 <I2C_Slave_STOPF+0x234>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b22      	cmp	r3, #34	@ 0x22
 8005572:	d10d      	bne.n	8005590 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fe ffd2 	bl	8004534 <HAL_I2C_SlaveRxCpltCallback>
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	08005be9 	.word	0x08005be9
 800559c:	ffff0000 	.word	0xffff0000

080055a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d002      	beq.n	80055c2 <I2C_Slave_AF+0x22>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d129      	bne.n	8005616 <I2C_Slave_AF+0x76>
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b28      	cmp	r3, #40	@ 0x28
 80055c6:	d126      	bne.n	8005616 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005684 <I2C_Slave_AF+0xe4>)
 80055cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fe ffa8 	bl	8004564 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005614:	e031      	b.n	800567a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b21      	cmp	r3, #33	@ 0x21
 800561a:	d129      	bne.n	8005670 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <I2C_Slave_AF+0xe4>)
 8005620:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2221      	movs	r2, #33	@ 0x21
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005646:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005650:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005660:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fe f8e6 	bl	8003834 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe ff59 	bl	8004520 <HAL_I2C_SlaveTxCpltCallback>
}
 800566e:	e004      	b.n	800567a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005678:	615a      	str	r2, [r3, #20]
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	ffff0000 	.word	0xffff0000

08005688 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005696:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800569e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056a0:	7bbb      	ldrb	r3, [r7, #14]
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d002      	beq.n	80056ac <I2C_ITError+0x24>
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d10a      	bne.n	80056c2 <I2C_ITError+0x3a>
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b22      	cmp	r3, #34	@ 0x22
 80056b0:	d107      	bne.n	80056c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056c8:	2b28      	cmp	r3, #40	@ 0x28
 80056ca:	d107      	bne.n	80056dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2228      	movs	r2, #40	@ 0x28
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056da:	e015      	b.n	8005708 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ea:	d00a      	beq.n	8005702 <I2C_ITError+0x7a>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b60      	cmp	r3, #96	@ 0x60
 80056f0:	d007      	beq.n	8005702 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005716:	d162      	bne.n	80057de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005726:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d020      	beq.n	8005778 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573a:	4a6a      	ldr	r2, [pc, #424]	@ (80058e4 <I2C_ITError+0x25c>)
 800573c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fb0e 	bl	8002d64 <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8089 	beq.w	8005862 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005772:	4610      	mov	r0, r2
 8005774:	4798      	blx	r3
 8005776:	e074      	b.n	8005862 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	4a59      	ldr	r2, [pc, #356]	@ (80058e4 <I2C_ITError+0x25c>)
 800577e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	4618      	mov	r0, r3
 8005786:	f7fd faed 	bl	8002d64 <HAL_DMA_Abort_IT>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d068      	beq.n	8005862 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d10b      	bne.n	80057b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	e041      	b.n	8005862 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b60      	cmp	r3, #96	@ 0x60
 80057e8:	d125      	bne.n	8005836 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d10b      	bne.n	800581e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fe fec0 	bl	80045b4 <HAL_I2C_AbortCpltCallback>
 8005834:	e015      	b.n	8005862 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d10b      	bne.n	800585c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fe fe9f 	bl	80045a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10e      	bne.n	8005890 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d113      	bne.n	80058dc <I2C_ITError+0x254>
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b28      	cmp	r3, #40	@ 0x28
 80058b8:	d110      	bne.n	80058dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <I2C_ITError+0x260>)
 80058be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe fe44 	bl	8004564 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08005be9 	.word	0x08005be9
 80058e8:	ffff0000 	.word	0xffff0000

080058ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2200      	movs	r2, #0
 800591e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa08 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593c:	d103      	bne.n	8005946 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e05f      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	492d      	ldr	r1, [pc, #180]	@ (8005a14 <I2C_RequestMemoryWrite+0x128>)
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fa63 	bl	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e04c      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 faee 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	2b04      	cmp	r3, #4
 800599c:	d107      	bne.n	80059ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e02b      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b8:	893b      	ldrh	r3, [r7, #8]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	e021      	b.n	8005a08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	6a39      	ldr	r1, [r7, #32]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fac8 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d107      	bne.n	80059fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e005      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	00010002 	.word	0x00010002

08005a18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	817b      	strh	r3, [r7, #10]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	813b      	strh	r3, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f96a 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a78:	d103      	bne.n	8005a82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e0aa      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a86:	897b      	ldrh	r3, [r7, #10]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	4952      	ldr	r1, [pc, #328]	@ (8005be4 <I2C_RequestMemoryRead+0x1cc>)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f9c5 	bl	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e097      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	6a39      	ldr	r1, [r7, #32]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fa50 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d107      	bne.n	8005aea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e076      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af4:	893b      	ldrh	r3, [r7, #8]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	611a      	str	r2, [r3, #16]
 8005afe:	e021      	b.n	8005b44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fa2a 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d107      	bne.n	8005b36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e050      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b46:	6a39      	ldr	r1, [r7, #32]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fa0f 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d107      	bne.n	8005b6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e035      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f8d3 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba6:	d103      	bne.n	8005bb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e013      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bb4:	897b      	ldrh	r3, [r7, #10]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	4906      	ldr	r1, [pc, #24]	@ (8005be4 <I2C_RequestMemoryRead+0x1cc>)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f92e 	bl	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	00010002 	.word	0x00010002

08005be8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c02:	4b4b      	ldr	r3, [pc, #300]	@ (8005d30 <I2C_DMAAbort+0x148>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	08db      	lsrs	r3, r3, #3
 8005c08:	4a4a      	ldr	r2, [pc, #296]	@ (8005d34 <I2C_DMAAbort+0x14c>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0a1a      	lsrs	r2, r3, #8
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00da      	lsls	r2, r3, #3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c2e:	e00a      	b.n	8005c46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c44:	d0ea      	beq.n	8005c1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c52:	2200      	movs	r2, #0
 8005c54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c62:	2200      	movs	r2, #0
 8005c64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c88:	2200      	movs	r2, #0
 8005c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b60      	cmp	r3, #96	@ 0x60
 8005cb6:	d10e      	bne.n	8005cd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7fe fc70 	bl	80045b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cd4:	e027      	b.n	8005d26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cdc:	2b28      	cmp	r3, #40	@ 0x28
 8005cde:	d117      	bne.n	8005d10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2228      	movs	r2, #40	@ 0x28
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d0e:	e007      	b.n	8005d20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f7fe fc3d 	bl	80045a0 <HAL_I2C_ErrorCallback>
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000018 	.word	0x20000018
 8005d34:	14f8b589 	.word	0x14f8b589

08005d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d48:	e048      	b.n	8005ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d044      	beq.n	8005ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d52:	f7fc fda7 	bl	80028a4 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d139      	bne.n	8005ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10d      	bne.n	8005d8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	43da      	mvns	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	e00c      	b.n	8005da8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	43da      	mvns	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d116      	bne.n	8005ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	f043 0220 	orr.w	r2, r3, #32
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e023      	b.n	8005e24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10d      	bne.n	8005e02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	43da      	mvns	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	e00c      	b.n	8005e1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	43da      	mvns	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d093      	beq.n	8005d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e3a:	e071      	b.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4a:	d123      	bne.n	8005e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e067      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d041      	beq.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9c:	f7fc fd02 	bl	80028a4 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d136      	bne.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10c      	bne.n	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e00b      	b.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	43da      	mvns	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e021      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	0c1b      	lsrs	r3, r3, #16
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10c      	bne.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	43da      	mvns	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e00b      	b.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	43da      	mvns	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	bf14      	ite	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	2300      	moveq	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f af6d 	bne.w	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f78:	e034      	b.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f915 	bl	80061aa <I2C_IsAcknowledgeFailed>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e034      	b.n	8005ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d028      	beq.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fc fc87 	bl	80028a4 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11d      	bne.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	2b80      	cmp	r3, #128	@ 0x80
 8005fb4:	d016      	beq.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e007      	b.n	8005ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fee:	2b80      	cmp	r3, #128	@ 0x80
 8005ff0:	d1c3      	bne.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006008:	e034      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f8cd 	bl	80061aa <I2C_IsAcknowledgeFailed>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e034      	b.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d028      	beq.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fc fc3f 	bl	80028a4 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11d      	bne.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d016      	beq.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	f043 0220 	orr.w	r2, r3, #32
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d1c3      	bne.n	800600a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006098:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	4a13      	ldr	r2, [pc, #76]	@ (80060ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	0a1a      	lsrs	r2, r3, #8
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d107      	bne.n	80060ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e008      	b.n	80060dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d8:	d0e9      	beq.n	80060ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	20000018 	.word	0x20000018
 80060ec:	14f8b589 	.word	0x14f8b589

080060f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060fc:	e049      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b10      	cmp	r3, #16
 800610a:	d119      	bne.n	8006140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0210 	mvn.w	r2, #16
 8006114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e030      	b.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006140:	f7fc fbb0 	bl	80028a4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d11d      	bne.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b40      	cmp	r3, #64	@ 0x40
 8006162:	d016      	beq.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e007      	b.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d1ae      	bne.n	80060fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c0:	d11b      	bne.n	80061fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	f043 0204 	orr.w	r2, r3, #4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006218:	d103      	bne.n	8006222 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006220:	e007      	b.n	8006232 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800622a:	d102      	bne.n	8006232 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2208      	movs	r2, #8
 8006230:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af02      	add	r7, sp, #8
 8006244:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e101      	b.n	8006454 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f007 fb98 	bl	800d9a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2203      	movs	r2, #3
 8006274:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800627e:	d102      	bne.n	8006286 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f003 ffe5 	bl	800a25a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7c1a      	ldrb	r2, [r3, #16]
 8006298:	f88d 2000 	strb.w	r2, [sp]
 800629c:	3304      	adds	r3, #4
 800629e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a0:	f003 fec4 	bl	800a02c <USB_CoreInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0ce      	b.n	8006454 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f003 ffdd 	bl	800a27c <USB_SetCurrentMode>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0bf      	b.n	8006454 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e04a      	b.n	8006370 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062da:	7bfa      	ldrb	r2, [r7, #15]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3315      	adds	r3, #21
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062ee:	7bfa      	ldrb	r2, [r7, #15]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3314      	adds	r3, #20
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	b298      	uxth	r0, r3
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	332e      	adds	r3, #46	@ 0x2e
 8006316:	4602      	mov	r2, r0
 8006318:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800631a:	7bfa      	ldrb	r2, [r7, #15]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3318      	adds	r3, #24
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	331c      	adds	r3, #28
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006342:	7bfa      	ldrb	r2, [r7, #15]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3320      	adds	r3, #32
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006356:	7bfa      	ldrb	r2, [r7, #15]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	3324      	adds	r3, #36	@ 0x24
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	3301      	adds	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	791b      	ldrb	r3, [r3, #4]
 8006374:	7bfa      	ldrb	r2, [r7, #15]
 8006376:	429a      	cmp	r2, r3
 8006378:	d3af      	bcc.n	80062da <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
 800637e:	e044      	b.n	800640a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	3301      	adds	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	791b      	ldrb	r3, [r3, #4]
 800640e:	7bfa      	ldrb	r2, [r7, #15]
 8006410:	429a      	cmp	r2, r3
 8006412:	d3b5      	bcc.n	8006380 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7c1a      	ldrb	r2, [r3, #16]
 800641c:	f88d 2000 	strb.w	r2, [sp]
 8006420:	3304      	adds	r3, #4
 8006422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006424:	f003 ff76 	bl	800a314 <USB_DevInit>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e00c      	b.n	8006454 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f004 ffc0 	bl	800b3d2 <USB_DevDisconnect>

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_PCD_Start+0x1c>
 8006474:	2302      	movs	r3, #2
 8006476:	e022      	b.n	80064be <HAL_PCD_Start+0x62>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006490:	2b01      	cmp	r3, #1
 8006492:	d105      	bne.n	80064a0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f003 fec7 	bl	800a238 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f004 ff6e 	bl	800b390 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064c6:	b590      	push	{r4, r7, lr}
 80064c8:	b08d      	sub	sp, #52	@ 0x34
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f005 f82c 	bl	800b53a <USB_GetMode>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 848c 	bne.w	8006e02 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 ff90 	bl	800b414 <USB_ReadInterrupts>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8482 	beq.w	8006e00 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f004 ff7d 	bl	800b414 <USB_ReadInterrupts>
 800651a:	4603      	mov	r3, r0
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d107      	bne.n	8006534 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f002 0202 	and.w	r2, r2, #2
 8006532:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f004 ff6b 	bl	800b414 <USB_ReadInterrupts>
 800653e:	4603      	mov	r3, r0
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b10      	cmp	r3, #16
 8006546:	d161      	bne.n	800660c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0210 	bic.w	r2, r2, #16
 8006556:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	4613      	mov	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	3304      	adds	r3, #4
 8006576:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	0c5b      	lsrs	r3, r3, #17
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	2b02      	cmp	r3, #2
 8006582:	d124      	bne.n	80065ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d035      	beq.n	80065fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800659a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	6a38      	ldr	r0, [r7, #32]
 80065a4:	f004 fda2 	bl	800b0ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065b4:	441a      	add	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065c6:	441a      	add	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	615a      	str	r2, [r3, #20]
 80065cc:	e016      	b.n	80065fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	0c5b      	lsrs	r3, r3, #17
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d110      	bne.n	80065fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065e0:	2208      	movs	r2, #8
 80065e2:	4619      	mov	r1, r3
 80065e4:	6a38      	ldr	r0, [r7, #32]
 80065e6:	f004 fd81 	bl	800b0ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065f6:	441a      	add	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0210 	orr.w	r2, r2, #16
 800660a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f004 feff 	bl	800b414 <USB_ReadInterrupts>
 8006616:	4603      	mov	r3, r0
 8006618:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800661c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006620:	f040 80a7 	bne.w	8006772 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f004 ff04 	bl	800b43a <USB_ReadDevAllOutEpInterrupt>
 8006632:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006634:	e099      	b.n	800676a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 808e 	beq.w	800675e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f004 ff28 	bl	800b4a2 <USB_ReadDevOutEPInterrupt>
 8006652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	2301      	movs	r3, #1
 800666e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fea4 	bl	80073c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668e:	461a      	mov	r2, r3
 8006690:	2308      	movs	r3, #8
 8006692:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 ff7a 	bl	8007590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	2310      	movs	r3, #16
 80066b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d030      	beq.n	8006724 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ca:	2b80      	cmp	r3, #128	@ 0x80
 80066cc:	d109      	bne.n	80066e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d108      	bne.n	8006712 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2200      	movs	r2, #0
 8006704:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f007 fa43 	bl	800db98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	2302      	movs	r3, #2
 8006722:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673a:	461a      	mov	r2, r3
 800673c:	2320      	movs	r3, #32
 800673e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006756:	461a      	mov	r2, r3
 8006758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800675c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	3301      	adds	r3, #1
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	f47f af62 	bne.w	8006636 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f004 fe4c 	bl	800b414 <USB_ReadInterrupts>
 800677c:	4603      	mov	r3, r0
 800677e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006786:	f040 80db 	bne.w	8006940 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f004 fe6d 	bl	800b46e <USB_ReadDevAllInEpInterrupt>
 8006794:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800679a:	e0cd      	b.n	8006938 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80c2 	beq.w	800692c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f004 fe93 	bl	800b4de <USB_ReadDevInEPInterrupt>
 80067b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d057      	beq.n	8006874 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	43db      	mvns	r3, r3
 80067de:	69f9      	ldr	r1, [r7, #28]
 80067e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e4:	4013      	ands	r3, r2
 80067e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	461a      	mov	r2, r3
 80067f6:	2301      	movs	r3, #1
 80067f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	799b      	ldrb	r3, [r3, #6]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d132      	bne.n	8006868 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006806:	4613      	mov	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3320      	adds	r3, #32
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4403      	add	r3, r0
 8006822:	331c      	adds	r3, #28
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4419      	add	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4403      	add	r3, r0
 8006836:	3320      	adds	r3, #32
 8006838:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d113      	bne.n	8006868 <HAL_PCD_IRQHandler+0x3a2>
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	3324      	adds	r3, #36	@ 0x24
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006860:	461a      	mov	r2, r3
 8006862:	2101      	movs	r1, #1
 8006864:	f004 fe9a 	bl	800b59c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	b2db      	uxtb	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f007 f917 	bl	800daa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688a:	461a      	mov	r2, r3
 800688c:	2308      	movs	r3, #8
 800688e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a6:	461a      	mov	r2, r3
 80068a8:	2310      	movs	r3, #16
 80068aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c2:	461a      	mov	r2, r3
 80068c4:	2340      	movs	r3, #64	@ 0x40
 80068c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d023      	beq.n	800691a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80068d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068d4:	6a38      	ldr	r0, [r7, #32]
 80068d6:	f003 fe81 	bl	800a5dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80068da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3310      	adds	r3, #16
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	3304      	adds	r3, #4
 80068ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	78db      	ldrb	r3, [r3, #3]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d108      	bne.n	8006908 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f007 f95a 	bl	800dbbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006914:	461a      	mov	r2, r3
 8006916:	2302      	movs	r3, #2
 8006918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcbd 	bl	80072a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	3301      	adds	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	f47f af2e 	bne.w	800679c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f004 fd65 	bl	800b414 <USB_ReadInterrupts>
 800694a:	4603      	mov	r3, r0
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006954:	d122      	bne.n	800699c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006970:	2b01      	cmp	r3, #1
 8006972:	d108      	bne.n	8006986 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fea4 	bl	80076cc <HAL_PCDEx_LPM_Callback>
 8006984:	e002      	b.n	800698c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f007 f8f8 	bl	800db7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800699a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f004 fd37 	bl	800b414 <USB_ReadInterrupts>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b0:	d112      	bne.n	80069d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d102      	bne.n	80069c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f007 f8b4 	bl	800db30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80069d6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f004 fd19 	bl	800b414 <USB_ReadInterrupts>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ec:	f040 80b7 	bne.w	8006b5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2110      	movs	r1, #16
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f003 fde6 	bl	800a5dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a14:	e046      	b.n	8006aa4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a22:	461a      	mov	r2, r3
 8006a24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a56:	461a      	mov	r2, r3
 8006a58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	791b      	ldrb	r3, [r3, #4]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d3b2      	bcc.n	8006a16 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006abe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006ac2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7bdb      	ldrb	r3, [r3, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d016      	beq.n	8006afa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006adc:	f043 030b 	orr.w	r3, r3, #11
 8006ae0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006af2:	f043 030b 	orr.w	r3, r3, #11
 8006af6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006af8:	e015      	b.n	8006b26 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006b0c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006b10:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b20:	f043 030b 	orr.w	r3, r3, #11
 8006b24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b34:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f004 fd27 	bl	800b59c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f004 fc56 	bl	800b414 <USB_ReadInterrupts>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b72:	d123      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f004 fcec 	bl	800b556 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f003 fda3 	bl	800a6ce <USB_GetDevSpeed>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681c      	ldr	r4, [r3, #0]
 8006b94:	f001 fa08 	bl	8007fa8 <HAL_RCC_GetHCLKFreq>
 8006b98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f003 faa7 	bl	800a0f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f006 ffa3 	bl	800daf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f004 fc27 	bl	800b414 <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10a      	bne.n	8006be6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f006 ff80 	bl	800dad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f002 0208 	and.w	r2, r2, #8
 8006be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f004 fc12 	bl	800b414 <USB_ReadInterrupts>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	2b80      	cmp	r3, #128	@ 0x80
 8006bf8:	d123      	bne.n	8006c42 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c06:	2301      	movs	r3, #1
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0a:	e014      	b.n	8006c36 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fb0a 	bl	8007244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	3301      	adds	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	791b      	ldrb	r3, [r3, #4]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d3e4      	bcc.n	8006c0c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 fbe4 	bl	800b414 <USB_ReadInterrupts>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c56:	d13c      	bne.n	8006cd2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c58:	2301      	movs	r3, #1
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5c:	e02b      	b.n	8006cb6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c72:	4613      	mov	r3, r2
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3318      	adds	r3, #24
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d115      	bne.n	8006cb0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006c84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da12      	bge.n	8006cb0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3317      	adds	r3, #23
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 faca 	bl	8007244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	791b      	ldrb	r3, [r3, #4]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d3cd      	bcc.n	8006c5e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f004 fb9c 	bl	800b414 <USB_ReadInterrupts>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ce2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce6:	d156      	bne.n	8006d96 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cec:	e045      	b.n	8006d7a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d12e      	bne.n	8006d74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da2b      	bge.n	8006d74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006d28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d121      	bne.n	8006d74 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d34:	4613      	mov	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d70:	6053      	str	r3, [r2, #4]
            break;
 8006d72:	e008      	b.n	8006d86 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	3301      	adds	r3, #1
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d3b3      	bcc.n	8006cee <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f004 fb3a 	bl	800b414 <USB_ReadInterrupts>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d10a      	bne.n	8006dc2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f006 ff17 	bl	800dbe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f004 fb24 	bl	800b414 <USB_ReadInterrupts>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d115      	bne.n	8006e02 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f006 ff07 	bl	800dbfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	e000      	b.n	8006e02 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006e00:	bf00      	nop
    }
  }
}
 8006e02:	3734      	adds	r7, #52	@ 0x34
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd90      	pop	{r4, r7, pc}

08006e08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_PCD_SetAddress+0x1a>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e012      	b.n	8006e48 <HAL_PCD_SetAddress+0x40>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	78fa      	ldrb	r2, [r7, #3]
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 fa83 	bl	800b344 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	70fb      	strb	r3, [r7, #3]
 8006e62:	460b      	mov	r3, r1
 8006e64:	803b      	strh	r3, [r7, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da0f      	bge.n	8006e96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	3310      	adds	r3, #16
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	705a      	strb	r2, [r3, #1]
 8006e94:	e00f      	b.n	8006eb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	3304      	adds	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006ec2:	883b      	ldrh	r3, [r7, #0]
 8006ec4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	78ba      	ldrb	r2, [r7, #2]
 8006ed0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ee4:	78bb      	ldrb	r3, [r7, #2]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d102      	bne.n	8006ef0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_PCD_EP_Open+0xae>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e00e      	b.n	8006f1c <HAL_PCD_EP_Open+0xcc>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f003 fc03 	bl	800a718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	da0f      	bge.n	8006f58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	3310      	adds	r3, #16
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	705a      	strb	r2, [r3, #1]
 8006f56:	e00f      	b.n	8006f78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	4613      	mov	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3304      	adds	r3, #4
 8006f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_PCD_EP_Close+0x6e>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e00e      	b.n	8006fb0 <HAL_PCD_EP_Close+0x8c>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f003 fc41 	bl	800a828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	4613      	mov	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3304      	adds	r3, #4
 8006fe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	b2da      	uxtb	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	799b      	ldrb	r3, [r3, #6]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d102      	bne.n	8007014 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	799b      	ldrb	r3, [r3, #6]
 800701c:	461a      	mov	r2, r3
 800701e:	6979      	ldr	r1, [r7, #20]
 8007020:	f003 fcde 	bl	800a9e0 <USB_EPStartXfer>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007050:	681b      	ldr	r3, [r3, #0]
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	460b      	mov	r3, r1
 800706c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	f003 020f 	and.w	r2, r3, #15
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	3310      	adds	r3, #16
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	3304      	adds	r3, #4
 8007084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2201      	movs	r2, #1
 800709c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	799b      	ldrb	r3, [r3, #6]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d102      	bne.n	80070b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	799b      	ldrb	r3, [r3, #6]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	f003 fc8c 	bl	800a9e0 <USB_EPStartXfer>

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7912      	ldrb	r2, [r2, #4]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d901      	bls.n	80070f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e04f      	b.n	8007190 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da0f      	bge.n	8007118 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	3310      	adds	r3, #16
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	3304      	adds	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	705a      	strb	r2, [r3, #1]
 8007116:	e00d      	b.n	8007134 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	3304      	adds	r3, #4
 800712c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_PCD_EP_SetStall+0x82>
 8007150:	2302      	movs	r3, #2
 8007152:	e01d      	b.n	8007190 <HAL_PCD_EP_SetStall+0xbe>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	4618      	mov	r0, r3
 8007164:	f004 f81a 	bl	800b19c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7999      	ldrb	r1, [r3, #6]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007180:	461a      	mov	r2, r3
 8007182:	f004 fa0b 	bl	800b59c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	7912      	ldrb	r2, [r2, #4]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d901      	bls.n	80071b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e042      	b.n	800723c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da0f      	bge.n	80071de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 020f 	and.w	r2, r3, #15
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	3310      	adds	r3, #16
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	705a      	strb	r2, [r3, #1]
 80071dc:	e00f      	b.n	80071fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f003 020f 	and.w	r2, r3, #15
 80071e4:	4613      	mov	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	3304      	adds	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_PCD_EP_ClrStall+0x86>
 800721a:	2302      	movs	r3, #2
 800721c:	e00e      	b.n	800723c <HAL_PCD_EP_ClrStall+0xa4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	4618      	mov	r0, r3
 800722e:	f004 f823 	bl	800b278 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007254:	2b00      	cmp	r3, #0
 8007256:	da0c      	bge.n	8007272 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	f003 020f 	and.w	r2, r3, #15
 800725e:	4613      	mov	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	3310      	adds	r3, #16
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	3304      	adds	r3, #4
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e00c      	b.n	800728c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 020f 	and.w	r2, r3, #15
 8007278:	4613      	mov	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	3304      	adds	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68f9      	ldr	r1, [r7, #12]
 8007292:	4618      	mov	r0, r3
 8007294:	f003 fe42 	bl	800af1c <USB_EPStopXfer>
 8007298:	4603      	mov	r3, r0
 800729a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800729c:	7afb      	ldrb	r3, [r7, #11]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b08a      	sub	sp, #40	@ 0x28
 80072aa:	af02      	add	r7, sp, #8
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	3310      	adds	r3, #16
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	3304      	adds	r3, #4
 80072cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	695a      	ldr	r2, [r3, #20]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d901      	bls.n	80072de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e06b      	b.n	80073b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d902      	bls.n	80072fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3303      	adds	r3, #3
 80072fe:	089b      	lsrs	r3, r3, #2
 8007300:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007302:	e02a      	b.n	800735a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	429a      	cmp	r2, r3
 8007318:	d902      	bls.n	8007320 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3303      	adds	r3, #3
 8007324:	089b      	lsrs	r3, r3, #2
 8007326:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68d9      	ldr	r1, [r3, #12]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4603      	mov	r3, r0
 800733c:	6978      	ldr	r0, [r7, #20]
 800733e:	f003 fe97 	bl	800b070 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	441a      	add	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	441a      	add	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	d809      	bhi.n	8007384 <PCD_WriteEmptyTxFifo+0xde>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	695a      	ldr	r2, [r3, #20]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007378:	429a      	cmp	r2, r3
 800737a:	d203      	bcs.n	8007384 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1bf      	bne.n	8007304 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	429a      	cmp	r2, r3
 800738e:	d811      	bhi.n	80073b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	43db      	mvns	r3, r3
 80073aa:	6939      	ldr	r1, [r7, #16]
 80073ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073b0:	4013      	ands	r3, r2
 80073b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	333c      	adds	r3, #60	@ 0x3c
 80073d8:	3304      	adds	r3, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	799b      	ldrb	r3, [r3, #6]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d17b      	bne.n	80074ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	4a61      	ldr	r2, [pc, #388]	@ (8007588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	f240 80b9 	bls.w	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80b3 	beq.w	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	461a      	mov	r2, r3
 8007424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007428:	6093      	str	r3, [r2, #8]
 800742a:	e0a7      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	461a      	mov	r2, r3
 8007444:	2320      	movs	r3, #32
 8007446:	6093      	str	r3, [r2, #8]
 8007448:	e098      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 8093 	bne.w	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4a4b      	ldr	r2, [pc, #300]	@ (8007588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d90f      	bls.n	800747e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007474:	461a      	mov	r2, r3
 8007476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800747a:	6093      	str	r3, [r2, #8]
 800747c:	e07e      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	4413      	add	r3, r2
 8007490:	3304      	adds	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	0159      	lsls	r1, r3, #5
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	440b      	add	r3, r1
 80074a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d114      	bne.n	80074e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d109      	bne.n	80074d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074c8:	461a      	mov	r2, r3
 80074ca:	2101      	movs	r1, #1
 80074cc:	f004 f866 	bl	800b59c <USB_EP0_OutStart>
 80074d0:	e006      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	441a      	add	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f006 fac0 	bl	800da6c <HAL_PCD_DataOutStageCallback>
 80074ec:	e046      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4a26      	ldr	r2, [pc, #152]	@ (800758c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d124      	bne.n	8007540 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750c:	461a      	mov	r2, r3
 800750e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007512:	6093      	str	r3, [r2, #8]
 8007514:	e032      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752c:	461a      	mov	r2, r3
 800752e:	2320      	movs	r3, #32
 8007530:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f006 fa97 	bl	800da6c <HAL_PCD_DataOutStageCallback>
 800753e:	e01d      	b.n	800757c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d114      	bne.n	8007570 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d108      	bne.n	8007570 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007568:	461a      	mov	r2, r3
 800756a:	2100      	movs	r1, #0
 800756c:	f004 f816 	bl	800b59c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f006 fa78 	bl	800da6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	4f54300a 	.word	0x4f54300a
 800758c:	4f54310a 	.word	0x4f54310a

08007590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	333c      	adds	r3, #60	@ 0x3c
 80075a8:	3304      	adds	r3, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a15      	ldr	r2, [pc, #84]	@ (8007618 <PCD_EP_OutSetupPacket_int+0x88>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d90e      	bls.n	80075e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075dc:	461a      	mov	r2, r3
 80075de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f006 fa2f 	bl	800da48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007618 <PCD_EP_OutSetupPacket_int+0x88>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d90c      	bls.n	800760c <PCD_EP_OutSetupPacket_int+0x7c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	799b      	ldrb	r3, [r3, #6]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d108      	bne.n	800760c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007604:	461a      	mov	r2, r3
 8007606:	2101      	movs	r1, #1
 8007608:	f003 ffc8 	bl	800b59c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	4f54300a 	.word	0x4f54300a

0800761c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
 8007628:	4613      	mov	r3, r2
 800762a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d107      	bne.n	800764a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800763a:	883b      	ldrh	r3, [r7, #0]
 800763c:	0419      	lsls	r1, r3, #16
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	430a      	orrs	r2, r1
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28
 8007648:	e028      	b.n	800769c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e00d      	b.n	800767a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	3340      	adds	r3, #64	@ 0x40
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	3301      	adds	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	7bfa      	ldrb	r2, [r7, #15]
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	3b01      	subs	r3, #1
 8007680:	429a      	cmp	r2, r3
 8007682:	d3ec      	bcc.n	800765e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007684:	883b      	ldrh	r3, [r7, #0]
 8007686:	0418      	lsls	r0, r3, #16
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6819      	ldr	r1, [r3, #0]
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	3b01      	subs	r3, #1
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4302      	orrs	r2, r0
 8007694:	3340      	adds	r3, #64	@ 0x40
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	887a      	ldrh	r2, [r7, #2]
 80076bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e267      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d075      	beq.n	80077ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007702:	4b88      	ldr	r3, [pc, #544]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 030c 	and.w	r3, r3, #12
 800770a:	2b04      	cmp	r3, #4
 800770c:	d00c      	beq.n	8007728 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800770e:	4b85      	ldr	r3, [pc, #532]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007716:	2b08      	cmp	r3, #8
 8007718:	d112      	bne.n	8007740 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800771a:	4b82      	ldr	r3, [pc, #520]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007726:	d10b      	bne.n	8007740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007728:	4b7e      	ldr	r3, [pc, #504]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05b      	beq.n	80077ec <HAL_RCC_OscConfig+0x108>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d157      	bne.n	80077ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e242      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007748:	d106      	bne.n	8007758 <HAL_RCC_OscConfig+0x74>
 800774a:	4b76      	ldr	r3, [pc, #472]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a75      	ldr	r2, [pc, #468]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e01d      	b.n	8007794 <HAL_RCC_OscConfig+0xb0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007760:	d10c      	bne.n	800777c <HAL_RCC_OscConfig+0x98>
 8007762:	4b70      	ldr	r3, [pc, #448]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a6f      	ldr	r2, [pc, #444]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	4b6d      	ldr	r3, [pc, #436]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a6c      	ldr	r2, [pc, #432]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e00b      	b.n	8007794 <HAL_RCC_OscConfig+0xb0>
 800777c:	4b69      	ldr	r3, [pc, #420]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a68      	ldr	r2, [pc, #416]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	4b66      	ldr	r3, [pc, #408]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a65      	ldr	r2, [pc, #404]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 800778e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d013      	beq.n	80077c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779c:	f7fb f882 	bl	80028a4 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a4:	f7fb f87e 	bl	80028a4 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b64      	cmp	r3, #100	@ 0x64
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e207      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCC_OscConfig+0xc0>
 80077c2:	e014      	b.n	80077ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c4:	f7fb f86e 	bl	80028a4 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077cc:	f7fb f86a 	bl	80028a4 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b64      	cmp	r3, #100	@ 0x64
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e1f3      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077de:	4b51      	ldr	r3, [pc, #324]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f0      	bne.n	80077cc <HAL_RCC_OscConfig+0xe8>
 80077ea:	e000      	b.n	80077ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d063      	beq.n	80078c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80077fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007806:	4b47      	ldr	r3, [pc, #284]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800780e:	2b08      	cmp	r3, #8
 8007810:	d11c      	bne.n	800784c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007812:	4b44      	ldr	r3, [pc, #272]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d116      	bne.n	800784c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800781e:	4b41      	ldr	r3, [pc, #260]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_RCC_OscConfig+0x152>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d001      	beq.n	8007836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e1c7      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007836:	4b3b      	ldr	r3, [pc, #236]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4937      	ldr	r1, [pc, #220]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800784a:	e03a      	b.n	80078c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d020      	beq.n	8007896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007854:	4b34      	ldr	r3, [pc, #208]	@ (8007928 <HAL_RCC_OscConfig+0x244>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785a:	f7fb f823 	bl	80028a4 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007862:	f7fb f81f 	bl	80028a4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e1a8      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007874:	4b2b      	ldr	r3, [pc, #172]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	4925      	ldr	r1, [pc, #148]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]
 8007894:	e015      	b.n	80078c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007896:	4b24      	ldr	r3, [pc, #144]	@ (8007928 <HAL_RCC_OscConfig+0x244>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb f802 	bl	80028a4 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a4:	f7fa fffe 	bl	80028a4 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e187      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d036      	beq.n	800793c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d016      	beq.n	8007904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078d6:	4b15      	ldr	r3, [pc, #84]	@ (800792c <HAL_RCC_OscConfig+0x248>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078dc:	f7fa ffe2 	bl	80028a4 <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e4:	f7fa ffde 	bl	80028a4 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e167      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <HAL_RCC_OscConfig+0x240>)
 80078f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0f0      	beq.n	80078e4 <HAL_RCC_OscConfig+0x200>
 8007902:	e01b      	b.n	800793c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007904:	4b09      	ldr	r3, [pc, #36]	@ (800792c <HAL_RCC_OscConfig+0x248>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790a:	f7fa ffcb 	bl	80028a4 <HAL_GetTick>
 800790e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007910:	e00e      	b.n	8007930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007912:	f7fa ffc7 	bl	80028a4 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d907      	bls.n	8007930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e150      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
 8007924:	40023800 	.word	0x40023800
 8007928:	42470000 	.word	0x42470000
 800792c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007930:	4b88      	ldr	r3, [pc, #544]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ea      	bne.n	8007912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8097 	beq.w	8007a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794a:	2300      	movs	r3, #0
 800794c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800794e:	4b81      	ldr	r3, [pc, #516]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	4b7d      	ldr	r3, [pc, #500]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	4a7c      	ldr	r2, [pc, #496]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	@ 0x40
 800796a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797a:	4b77      	ldr	r3, [pc, #476]	@ (8007b58 <HAL_RCC_OscConfig+0x474>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d118      	bne.n	80079b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007986:	4b74      	ldr	r3, [pc, #464]	@ (8007b58 <HAL_RCC_OscConfig+0x474>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a73      	ldr	r2, [pc, #460]	@ (8007b58 <HAL_RCC_OscConfig+0x474>)
 800798c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007992:	f7fa ff87 	bl	80028a4 <HAL_GetTick>
 8007996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007998:	e008      	b.n	80079ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799a:	f7fa ff83 	bl	80028a4 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e10c      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007b58 <HAL_RCC_OscConfig+0x474>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d106      	bne.n	80079ce <HAL_RCC_OscConfig+0x2ea>
 80079c0:	4b64      	ldr	r3, [pc, #400]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c4:	4a63      	ldr	r2, [pc, #396]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80079cc:	e01c      	b.n	8007a08 <HAL_RCC_OscConfig+0x324>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCC_OscConfig+0x30c>
 80079d6:	4b5f      	ldr	r3, [pc, #380]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079da:	4a5e      	ldr	r2, [pc, #376]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80079e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079e8:	f043 0301 	orr.w	r3, r3, #1
 80079ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80079ee:	e00b      	b.n	8007a08 <HAL_RCC_OscConfig+0x324>
 80079f0:	4b58      	ldr	r3, [pc, #352]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f4:	4a57      	ldr	r2, [pc, #348]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80079fc:	4b55      	ldr	r3, [pc, #340]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a00:	4a54      	ldr	r2, [pc, #336]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a02:	f023 0304 	bic.w	r3, r3, #4
 8007a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d015      	beq.n	8007a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a10:	f7fa ff48 	bl	80028a4 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fa ff44 	bl	80028a4 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e0cb      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2e:	4b49      	ldr	r3, [pc, #292]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ee      	beq.n	8007a18 <HAL_RCC_OscConfig+0x334>
 8007a3a:	e014      	b.n	8007a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a3c:	f7fa ff32 	bl	80028a4 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a44:	f7fa ff2e 	bl	80028a4 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e0b5      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1ee      	bne.n	8007a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a6c:	4b39      	ldr	r3, [pc, #228]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a70:	4a38      	ldr	r2, [pc, #224]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a1 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a82:	4b34      	ldr	r3, [pc, #208]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d05c      	beq.n	8007b48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d141      	bne.n	8007b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a96:	4b31      	ldr	r3, [pc, #196]	@ (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fa ff02 	bl	80028a4 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fa fefe 	bl	80028a4 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e087      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab6:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	019b      	lsls	r3, r3, #6
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	3b01      	subs	r3, #1
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	061b      	lsls	r3, r3, #24
 8007ae6:	491b      	ldr	r1, [pc, #108]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aec:	4b1b      	ldr	r3, [pc, #108]	@ (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af2:	f7fa fed7 	bl	80028a4 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007afa:	f7fa fed3 	bl	80028a4 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e05c      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b0c:	4b11      	ldr	r3, [pc, #68]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCC_OscConfig+0x416>
 8007b18:	e054      	b.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1a:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b20:	f7fa fec0 	bl	80028a4 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b28:	f7fa febc 	bl	80028a4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e045      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x444>
 8007b46:	e03d      	b.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d107      	bne.n	8007b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e038      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
 8007b54:	40023800 	.word	0x40023800
 8007b58:	40007000 	.word	0x40007000
 8007b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b60:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd0 <HAL_RCC_OscConfig+0x4ec>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d028      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d121      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d11a      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b90:	4013      	ands	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d111      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40023800 	.word	0x40023800

08007bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0cc      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007be8:	4b68      	ldr	r3, [pc, #416]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d90c      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf6:	4b65      	ldr	r3, [pc, #404]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfe:	4b63      	ldr	r3, [pc, #396]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0b8      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d020      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c28:	4b59      	ldr	r3, [pc, #356]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	4a58      	ldr	r2, [pc, #352]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c40:	4b53      	ldr	r3, [pc, #332]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4a52      	ldr	r2, [pc, #328]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c4c:	4b50      	ldr	r3, [pc, #320]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	494d      	ldr	r1, [pc, #308]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d044      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c72:	4b47      	ldr	r3, [pc, #284]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d119      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e07f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d003      	beq.n	8007c92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d107      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c92:	4b3f      	ldr	r3, [pc, #252]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e06f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e067      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cb2:	4b37      	ldr	r3, [pc, #220]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f023 0203 	bic.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4934      	ldr	r1, [pc, #208]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cc4:	f7fa fdee 	bl	80028a4 <HAL_GetTick>
 8007cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ccc:	f7fa fdea 	bl	80028a4 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e04f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 020c 	and.w	r2, r3, #12
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d1eb      	bne.n	8007ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b25      	ldr	r3, [pc, #148]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d20c      	bcs.n	8007d1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b22      	ldr	r3, [pc, #136]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0a:	4b20      	ldr	r3, [pc, #128]	@ (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e032      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d28:	4b19      	ldr	r3, [pc, #100]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4916      	ldr	r1, [pc, #88]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d46:	4b12      	ldr	r3, [pc, #72]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	490e      	ldr	r1, [pc, #56]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d5a:	f000 f821 	bl	8007da0 <HAL_RCC_GetSysClockFreq>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	490a      	ldr	r1, [pc, #40]	@ (8007d94 <HAL_RCC_ClockConfig+0x1c0>)
 8007d6c:	5ccb      	ldrb	r3, [r1, r3]
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	4a09      	ldr	r2, [pc, #36]	@ (8007d98 <HAL_RCC_ClockConfig+0x1c4>)
 8007d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007d76:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <HAL_RCC_ClockConfig+0x1c8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fa fd4e 	bl	800281c <HAL_InitTick>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023c00 	.word	0x40023c00
 8007d90:	40023800 	.word	0x40023800
 8007d94:	08011264 	.word	0x08011264
 8007d98:	20000018 	.word	0x20000018
 8007d9c:	2000001c 	.word	0x2000001c

08007da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b094      	sub	sp, #80	@ 0x50
 8007da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007db8:	4b79      	ldr	r3, [pc, #484]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 030c 	and.w	r3, r3, #12
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d00d      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0x40>
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	f200 80e1 	bhi.w	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d003      	beq.n	8007dda <HAL_RCC_GetSysClockFreq+0x3a>
 8007dd2:	e0db      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b73      	ldr	r3, [pc, #460]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dd8:	e0db      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dda:	4b72      	ldr	r3, [pc, #456]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007dde:	e0d8      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007de0:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007de8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dea:	4b6d      	ldr	r3, [pc, #436]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d063      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df6:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f04f 0000 	mov.w	r0, #0
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	0159      	lsls	r1, r3, #5
 8007e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e24:	0150      	lsls	r0, r2, #5
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	1a51      	subs	r1, r2, r1
 8007e2e:	6139      	str	r1, [r7, #16]
 8007e30:	4629      	mov	r1, r5
 8007e32:	eb63 0301 	sbc.w	r3, r3, r1
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e44:	4659      	mov	r1, fp
 8007e46:	018b      	lsls	r3, r1, #6
 8007e48:	4651      	mov	r1, sl
 8007e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e4e:	4651      	mov	r1, sl
 8007e50:	018a      	lsls	r2, r1, #6
 8007e52:	4651      	mov	r1, sl
 8007e54:	ebb2 0801 	subs.w	r8, r2, r1
 8007e58:	4659      	mov	r1, fp
 8007e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e72:	4690      	mov	r8, r2
 8007e74:	4699      	mov	r9, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	eb18 0303 	adds.w	r3, r8, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	462b      	mov	r3, r5
 8007e80:	eb49 0303 	adc.w	r3, r9, r3
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e92:	4629      	mov	r1, r5
 8007e94:	028b      	lsls	r3, r1, #10
 8007e96:	4621      	mov	r1, r4
 8007e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	028a      	lsls	r2, r1, #10
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007eb0:	f7f8 fea2 	bl	8000bf8 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ebc:	e058      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b38      	ldr	r3, [pc, #224]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ece:	623b      	str	r3, [r7, #32]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f04f 0000 	mov.w	r0, #0
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	0159      	lsls	r1, r3, #5
 8007ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eea:	0150      	lsls	r0, r2, #5
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f10:	ebb2 040a 	subs.w	r4, r2, sl
 8007f14:	eb63 050b 	sbc.w	r5, r3, fp
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	00eb      	lsls	r3, r5, #3
 8007f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f26:	00e2      	lsls	r2, r4, #3
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	18e3      	adds	r3, r4, r3
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	464b      	mov	r3, r9
 8007f34:	eb45 0303 	adc.w	r3, r5, r3
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f46:	4629      	mov	r1, r5
 8007f48:	028b      	lsls	r3, r1, #10
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f50:	4621      	mov	r1, r4
 8007f52:	028a      	lsls	r2, r1, #10
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	61fa      	str	r2, [r7, #28]
 8007f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f64:	f7f8 fe48 	bl	8000bf8 <__aeabi_uldivmod>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007f70:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f8a:	e002      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3750      	adds	r7, #80	@ 0x50
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	00f42400 	.word	0x00f42400

08007fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fac:	4b03      	ldr	r3, [pc, #12]	@ (8007fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8007fae:	681b      	ldr	r3, [r3, #0]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000018 	.word	0x20000018

08007fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fc4:	f7ff fff0 	bl	8007fa8 <HAL_RCC_GetHCLKFreq>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	0a9b      	lsrs	r3, r3, #10
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	4903      	ldr	r1, [pc, #12]	@ (8007fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fd6:	5ccb      	ldrb	r3, [r1, r3]
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	08011274 	.word	0x08011274

08007fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fec:	f7ff ffdc 	bl	8007fa8 <HAL_RCC_GetHCLKFreq>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0b5b      	lsrs	r3, r3, #13
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	4903      	ldr	r1, [pc, #12]	@ (800800c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ffe:	5ccb      	ldrb	r3, [r1, r3]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	40023800 	.word	0x40023800
 800800c:	08011274 	.word	0x08011274

08008010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e041      	b.n	80080a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fa f97a 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 fc3c 	bl	80088cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d001      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e044      	b.n	8008152 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008160 <HAL_TIM_Base_Start_IT+0xb0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f2:	d013      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008164 <HAL_TIM_Base_Start_IT+0xb4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a19      	ldr	r2, [pc, #100]	@ (8008168 <HAL_TIM_Base_Start_IT+0xb8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a17      	ldr	r2, [pc, #92]	@ (800816c <HAL_TIM_Base_Start_IT+0xbc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x6c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a16      	ldr	r2, [pc, #88]	@ (8008170 <HAL_TIM_Base_Start_IT+0xc0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d111      	bne.n	8008140 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b06      	cmp	r3, #6
 800812c:	d010      	beq.n	8008150 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e007      	b.n	8008150 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40014000 	.word	0x40014000

08008174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e041      	b.n	800820a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f839 	bl	8008212 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f000 fb8a 	bl	80088cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <HAL_TIM_PWM_Start+0x24>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	bf14      	ite	ne
 8008244:	2301      	movne	r3, #1
 8008246:	2300      	moveq	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	e022      	b.n	8008292 <HAL_TIM_PWM_Start+0x6a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b04      	cmp	r3, #4
 8008250:	d109      	bne.n	8008266 <HAL_TIM_PWM_Start+0x3e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b01      	cmp	r3, #1
 800825c:	bf14      	ite	ne
 800825e:	2301      	movne	r3, #1
 8008260:	2300      	moveq	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	e015      	b.n	8008292 <HAL_TIM_PWM_Start+0x6a>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b08      	cmp	r3, #8
 800826a:	d109      	bne.n	8008280 <HAL_TIM_PWM_Start+0x58>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	e008      	b.n	8008292 <HAL_TIM_PWM_Start+0x6a>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b01      	cmp	r3, #1
 800828a:	bf14      	ite	ne
 800828c:	2301      	movne	r3, #1
 800828e:	2300      	moveq	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e068      	b.n	800836c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <HAL_TIM_PWM_Start+0x82>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082a8:	e013      	b.n	80082d2 <HAL_TIM_PWM_Start+0xaa>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d104      	bne.n	80082ba <HAL_TIM_PWM_Start+0x92>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082b8:	e00b      	b.n	80082d2 <HAL_TIM_PWM_Start+0xaa>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d104      	bne.n	80082ca <HAL_TIM_PWM_Start+0xa2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c8:	e003      	b.n	80082d2 <HAL_TIM_PWM_Start+0xaa>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2201      	movs	r2, #1
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fda8 	bl	8008e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a23      	ldr	r2, [pc, #140]	@ (8008374 <HAL_TIM_PWM_Start+0x14c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d107      	bne.n	80082fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <HAL_TIM_PWM_Start+0x14c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d018      	beq.n	8008336 <HAL_TIM_PWM_Start+0x10e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800830c:	d013      	beq.n	8008336 <HAL_TIM_PWM_Start+0x10e>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a19      	ldr	r2, [pc, #100]	@ (8008378 <HAL_TIM_PWM_Start+0x150>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00e      	beq.n	8008336 <HAL_TIM_PWM_Start+0x10e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a17      	ldr	r2, [pc, #92]	@ (800837c <HAL_TIM_PWM_Start+0x154>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_TIM_PWM_Start+0x10e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a16      	ldr	r2, [pc, #88]	@ (8008380 <HAL_TIM_PWM_Start+0x158>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_TIM_PWM_Start+0x10e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <HAL_TIM_PWM_Start+0x15c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d111      	bne.n	800835a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b06      	cmp	r3, #6
 8008346:	d010      	beq.n	800836a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008358:	e007      	b.n	800836a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0201 	orr.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40014000 	.word	0x40014000

08008388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d020      	beq.n	80083ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01b      	beq.n	80083ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0202 	mvn.w	r2, #2
 80083bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa5b 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 80083d8:	e005      	b.n	80083e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa4d 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fa5e 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d020      	beq.n	8008438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01b      	beq.n	8008438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f06f 0204 	mvn.w	r2, #4
 8008408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa35 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 8008424:	e005      	b.n	8008432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa27 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fa38 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d020      	beq.n	8008484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0208 	mvn.w	r2, #8
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2204      	movs	r2, #4
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa0f 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa01 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fa12 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0210 	mvn.w	r2, #16
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2208      	movs	r2, #8
 80084a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9e9 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 80084bc:	e005      	b.n	80084ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9db 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f9ec 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0201 	mvn.w	r2, #1
 80084ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7f8 fcfa 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fd2a 	bl	8008f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f9bd 	bl	80088b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0220 	mvn.w	r2, #32
 8008558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fcfc 	bl	8008f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008582:	2302      	movs	r3, #2
 8008584:	e0ae      	b.n	80086e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	f200 809f 	bhi.w	80086d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085d1 	.word	0x080085d1
 80085a0:	080086d5 	.word	0x080086d5
 80085a4:	080086d5 	.word	0x080086d5
 80085a8:	080086d5 	.word	0x080086d5
 80085ac:	08008611 	.word	0x08008611
 80085b0:	080086d5 	.word	0x080086d5
 80085b4:	080086d5 	.word	0x080086d5
 80085b8:	080086d5 	.word	0x080086d5
 80085bc:	08008653 	.word	0x08008653
 80085c0:	080086d5 	.word	0x080086d5
 80085c4:	080086d5 	.word	0x080086d5
 80085c8:	080086d5 	.word	0x080086d5
 80085cc:	08008693 	.word	0x08008693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fa04 	bl	80089e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0208 	orr.w	r2, r2, #8
 80085ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0204 	bic.w	r2, r2, #4
 80085fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6999      	ldr	r1, [r3, #24]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	691a      	ldr	r2, [r3, #16]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	619a      	str	r2, [r3, #24]
      break;
 800860e:	e064      	b.n	80086da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fa4a 	bl	8008ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800862a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699a      	ldr	r2, [r3, #24]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800863a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6999      	ldr	r1, [r3, #24]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	021a      	lsls	r2, r3, #8
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	619a      	str	r2, [r3, #24]
      break;
 8008650:	e043      	b.n	80086da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fa95 	bl	8008b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0208 	orr.w	r2, r2, #8
 800866c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69da      	ldr	r2, [r3, #28]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0204 	bic.w	r2, r2, #4
 800867c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69d9      	ldr	r1, [r3, #28]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	61da      	str	r2, [r3, #28]
      break;
 8008690:	e023      	b.n	80086da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fadf 	bl	8008c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69d9      	ldr	r1, [r3, #28]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	021a      	lsls	r2, r3, #8
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	61da      	str	r2, [r3, #28]
      break;
 80086d2:	e002      	b.n	80086da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
      break;
 80086d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIM_ConfigClockSource+0x1c>
 8008704:	2302      	movs	r3, #2
 8008706:	e0b4      	b.n	8008872 <HAL_TIM_ConfigClockSource+0x186>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800872e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008740:	d03e      	beq.n	80087c0 <HAL_TIM_ConfigClockSource+0xd4>
 8008742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008746:	f200 8087 	bhi.w	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800874e:	f000 8086 	beq.w	800885e <HAL_TIM_ConfigClockSource+0x172>
 8008752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008756:	d87f      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008758:	2b70      	cmp	r3, #112	@ 0x70
 800875a:	d01a      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0xa6>
 800875c:	2b70      	cmp	r3, #112	@ 0x70
 800875e:	d87b      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008760:	2b60      	cmp	r3, #96	@ 0x60
 8008762:	d050      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0x11a>
 8008764:	2b60      	cmp	r3, #96	@ 0x60
 8008766:	d877      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b50      	cmp	r3, #80	@ 0x50
 800876a:	d03c      	beq.n	80087e6 <HAL_TIM_ConfigClockSource+0xfa>
 800876c:	2b50      	cmp	r3, #80	@ 0x50
 800876e:	d873      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	d058      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x13a>
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d86f      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008778:	2b30      	cmp	r3, #48	@ 0x30
 800877a:	d064      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0x15a>
 800877c:	2b30      	cmp	r3, #48	@ 0x30
 800877e:	d86b      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008780:	2b20      	cmp	r3, #32
 8008782:	d060      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0x15a>
 8008784:	2b20      	cmp	r3, #32
 8008786:	d867      	bhi.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05c      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0x15a>
 800878c:	2b10      	cmp	r3, #16
 800878e:	d05a      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0x15a>
 8008790:	e062      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087a2:	f000 fb25 	bl	8008df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	609a      	str	r2, [r3, #8]
      break;
 80087be:	e04f      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087d0:	f000 fb0e 	bl	8008df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087e2:	609a      	str	r2, [r3, #8]
      break;
 80087e4:	e03c      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f2:	461a      	mov	r2, r3
 80087f4:	f000 fa82 	bl	8008cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2150      	movs	r1, #80	@ 0x50
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fadb 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 8008804:	e02c      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008812:	461a      	mov	r2, r3
 8008814:	f000 faa1 	bl	8008d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2160      	movs	r1, #96	@ 0x60
 800881e:	4618      	mov	r0, r3
 8008820:	f000 facb 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 8008824:	e01c      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008832:	461a      	mov	r2, r3
 8008834:	f000 fa62 	bl	8008cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2140      	movs	r1, #64	@ 0x40
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fabb 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 8008844:	e00c      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f000 fab2 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 8008856:	e003      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
      break;
 800885c:	e000      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800885e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a3a      	ldr	r2, [pc, #232]	@ (80089c8 <TIM_Base_SetConfig+0xfc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00f      	beq.n	8008904 <TIM_Base_SetConfig+0x38>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ea:	d00b      	beq.n	8008904 <TIM_Base_SetConfig+0x38>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a37      	ldr	r2, [pc, #220]	@ (80089cc <TIM_Base_SetConfig+0x100>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_Base_SetConfig+0x38>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a36      	ldr	r2, [pc, #216]	@ (80089d0 <TIM_Base_SetConfig+0x104>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_Base_SetConfig+0x38>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a35      	ldr	r2, [pc, #212]	@ (80089d4 <TIM_Base_SetConfig+0x108>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d108      	bne.n	8008916 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a2b      	ldr	r2, [pc, #172]	@ (80089c8 <TIM_Base_SetConfig+0xfc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01b      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008924:	d017      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a28      	ldr	r2, [pc, #160]	@ (80089cc <TIM_Base_SetConfig+0x100>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d013      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a27      	ldr	r2, [pc, #156]	@ (80089d0 <TIM_Base_SetConfig+0x104>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00f      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <TIM_Base_SetConfig+0x108>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00b      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a25      	ldr	r2, [pc, #148]	@ (80089d8 <TIM_Base_SetConfig+0x10c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a24      	ldr	r2, [pc, #144]	@ (80089dc <TIM_Base_SetConfig+0x110>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_Base_SetConfig+0x8a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a23      	ldr	r2, [pc, #140]	@ (80089e0 <TIM_Base_SetConfig+0x114>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d108      	bne.n	8008968 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800895c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a0e      	ldr	r2, [pc, #56]	@ (80089c8 <TIM_Base_SetConfig+0xfc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d105      	bne.n	80089ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f023 0201 	bic.w	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	611a      	str	r2, [r3, #16]
  }
}
 80089ba:	bf00      	nop
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	40010000 	.word	0x40010000
 80089cc:	40000400 	.word	0x40000400
 80089d0:	40000800 	.word	0x40000800
 80089d4:	40000c00 	.word	0x40000c00
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800

080089e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	f023 0201 	bic.w	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f023 0302 	bic.w	r3, r3, #2
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008aac <TIM_OC1_SetConfig+0xc8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10c      	bne.n	8008a5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0308 	bic.w	r3, r3, #8
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a13      	ldr	r2, [pc, #76]	@ (8008aac <TIM_OC1_SetConfig+0xc8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d111      	bne.n	8008a86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	621a      	str	r2, [r3, #32]
}
 8008aa0:	bf00      	nop
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40010000 	.word	0x40010000

08008ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 0210 	bic.w	r2, r3, #16
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f023 0320 	bic.w	r3, r3, #32
 8008afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008b84 <TIM_OC2_SetConfig+0xd4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10d      	bne.n	8008b2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a15      	ldr	r2, [pc, #84]	@ (8008b84 <TIM_OC2_SetConfig+0xd4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d113      	bne.n	8008b5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	621a      	str	r2, [r3, #32]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000

08008b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c58 <TIM_OC3_SetConfig+0xd0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d10d      	bne.n	8008c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a14      	ldr	r2, [pc, #80]	@ (8008c58 <TIM_OC3_SetConfig+0xd0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d113      	bne.n	8008c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	621a      	str	r2, [r3, #32]
}
 8008c4c:	bf00      	nop
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	40010000 	.word	0x40010000

08008c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	021b      	lsls	r3, r3, #8
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	031b      	lsls	r3, r3, #12
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a10      	ldr	r2, [pc, #64]	@ (8008cf8 <TIM_OC4_SetConfig+0x9c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d109      	bne.n	8008cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	019b      	lsls	r3, r3, #6
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40010000 	.word	0x40010000

08008cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f023 0201 	bic.w	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 030a 	bic.w	r3, r3, #10
 8008d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	f023 0210 	bic.w	r2, r3, #16
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f043 0307 	orr.w	r3, r3, #7
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	609a      	str	r2, [r3, #8]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	021a      	lsls	r2, r3, #8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	609a      	str	r2, [r3, #8]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2201      	movs	r2, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	fa01 f303 	lsl.w	r3, r1, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	621a      	str	r2, [r3, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e050      	b.n	8008f36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d018      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee0:	d013      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a18      	ldr	r2, [pc, #96]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00e      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a16      	ldr	r2, [pc, #88]	@ (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d009      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a15      	ldr	r2, [pc, #84]	@ (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d004      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a13      	ldr	r2, [pc, #76]	@ (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10c      	bne.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40010000 	.word	0x40010000
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40000800 	.word	0x40000800
 8008f50:	40000c00 	.word	0x40000c00
 8008f54:	40014000 	.word	0x40014000

08008f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e042      	b.n	8009018 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7f9 fa74 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	@ 0x24
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fdbd 	bl	8009b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	@ 0x28
 8009024:	af02      	add	r7, sp, #8
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	4613      	mov	r3, r2
 800902e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b20      	cmp	r3, #32
 800903e:	d175      	bne.n	800912c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_UART_Transmit+0x2c>
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e06e      	b.n	800912e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2221      	movs	r2, #33	@ 0x21
 800905a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800905e:	f7f9 fc21 	bl	80028a4 <HAL_GetTick>
 8009062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	88fa      	ldrh	r2, [r7, #6]
 800906e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009078:	d108      	bne.n	800908c <HAL_UART_Transmit+0x6c>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e003      	b.n	8009094 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009094:	e02e      	b.n	80090f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2200      	movs	r2, #0
 800909e:	2180      	movs	r1, #128	@ 0x80
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fb1f 	bl	80096e4 <UART_WaitOnFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d005      	beq.n	80090b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e03a      	b.n	800912e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10b      	bne.n	80090d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3302      	adds	r3, #2
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	e007      	b.n	80090e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1cb      	bne.n	8009096 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	2140      	movs	r1, #64	@ 0x40
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 faeb 	bl	80096e4 <UART_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e006      	b.n	800912e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	e000      	b.n	800912e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800912c:	2302      	movs	r3, #2
  }
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	4613      	mov	r3, r2
 8009142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b20      	cmp	r3, #32
 800914e:	d112      	bne.n	8009176 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_UART_Receive_IT+0x26>
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e00b      	b.n	8009178 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	461a      	mov	r2, r3
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb12 	bl	8009796 <UART_Start_Receive_IT>
 8009172:	4603      	mov	r3, r0
 8009174:	e000      	b.n	8009178 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009176:	2302      	movs	r3, #2
  }
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b0ba      	sub	sp, #232	@ 0xe8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80091be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10f      	bne.n	80091e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <HAL_UART_IRQHandler+0x66>
 80091d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fbf2 	bl	80099c8 <UART_Receive_IT>
      return;
 80091e4:	e25b      	b.n	800969e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 80de 	beq.w	80093ac <HAL_UART_IRQHandler+0x22c>
 80091f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d106      	bne.n	800920a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009200:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80d1 	beq.w	80093ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800920a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00b      	beq.n	800922e <HAL_UART_IRQHandler+0xae>
 8009216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800921a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	f043 0201 	orr.w	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <HAL_UART_IRQHandler+0xd2>
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924a:	f043 0202 	orr.w	r2, r3, #2
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <HAL_UART_IRQHandler+0xf6>
 800925e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926e:	f043 0204 	orr.w	r2, r3, #4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d011      	beq.n	80092a6 <HAL_UART_IRQHandler+0x126>
 8009282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800928e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929e:	f043 0208 	orr.w	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 81f2 	beq.w	8009694 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_UART_IRQHandler+0x14e>
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fb7d 	bl	80099c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b40      	cmp	r3, #64	@ 0x40
 80092da:	bf0c      	ite	eq
 80092dc:	2301      	moveq	r3, #1
 80092de:	2300      	movne	r3, #0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ea:	f003 0308 	and.w	r3, r3, #8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d103      	bne.n	80092fa <HAL_UART_IRQHandler+0x17a>
 80092f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d04f      	beq.n	800939a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa85 	bl	800980a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930a:	2b40      	cmp	r3, #64	@ 0x40
 800930c:	d141      	bne.n	8009392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800932c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3314      	adds	r3, #20
 8009336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800933a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800933e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1d9      	bne.n	800930e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d013      	beq.n	800938a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009366:	4a7e      	ldr	r2, [pc, #504]	@ (8009560 <HAL_UART_IRQHandler+0x3e0>)
 8009368:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936e:	4618      	mov	r0, r3
 8009370:	f7f9 fcf8 	bl	8002d64 <HAL_DMA_Abort_IT>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d016      	beq.n	80093a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009388:	e00e      	b.n	80093a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f994 	bl	80096b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	e00a      	b.n	80093a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f990 	bl	80096b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	e006      	b.n	80093a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f98c 	bl	80096b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80093a6:	e175      	b.n	8009694 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a8:	bf00      	nop
    return;
 80093aa:	e173      	b.n	8009694 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	f040 814f 	bne.w	8009654 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 8148 	beq.w	8009654 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8141 	beq.w	8009654 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093d2:	2300      	movs	r3, #0
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60bb      	str	r3, [r7, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	60bb      	str	r3, [r7, #8]
 80093e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f2:	2b40      	cmp	r3, #64	@ 0x40
 80093f4:	f040 80b6 	bne.w	8009564 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 8145 	beq.w	8009698 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009416:	429a      	cmp	r2, r3
 8009418:	f080 813e 	bcs.w	8009698 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009422:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800942e:	f000 8088 	beq.w	8009542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	330c      	adds	r3, #12
 8009438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800944c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	330c      	adds	r3, #12
 800945a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800945e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800946a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1d9      	bne.n	8009432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800948e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3314      	adds	r3, #20
 800949e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80094a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80094a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e1      	bne.n	800947e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3314      	adds	r3, #20
 80094da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e3      	bne.n	80094ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	330c      	adds	r3, #12
 8009506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009512:	f023 0310 	bic.w	r3, r3, #16
 8009516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	330c      	adds	r3, #12
 8009520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009526:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800952a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e3      	bne.n	8009500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953c:	4618      	mov	r0, r3
 800953e:	f7f9 fba1 	bl	8002c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2202      	movs	r2, #2
 8009546:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009550:	b29b      	uxth	r3, r3
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	b29b      	uxth	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f8b7 	bl	80096cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800955e:	e09b      	b.n	8009698 <HAL_UART_IRQHandler+0x518>
 8009560:	080098d1 	.word	0x080098d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800956c:	b29b      	uxth	r3, r3
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 808e 	beq.w	800969c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8089 	beq.w	800969c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	330c      	adds	r3, #12
 8009590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800959a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80095ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80095b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e3      	bne.n	800958a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3314      	adds	r3, #20
 80095c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	623b      	str	r3, [r7, #32]
   return(result);
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3314      	adds	r3, #20
 80095e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e3      	bne.n	80095c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	330c      	adds	r3, #12
 800960e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	60fb      	str	r3, [r7, #12]
   return(result);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0310 	bic.w	r3, r3, #16
 800961e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	330c      	adds	r3, #12
 8009628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800962c:	61fa      	str	r2, [r7, #28]
 800962e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	617b      	str	r3, [r7, #20]
   return(result);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e3      	bne.n	8009608 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f83d 	bl	80096cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009652:	e023      	b.n	800969c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965c:	2b00      	cmp	r3, #0
 800965e:	d009      	beq.n	8009674 <HAL_UART_IRQHandler+0x4f4>
 8009660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f943 	bl	80098f8 <UART_Transmit_IT>
    return;
 8009672:	e014      	b.n	800969e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <HAL_UART_IRQHandler+0x51e>
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f983 	bl	8009998 <UART_EndTransmit_IT>
    return;
 8009692:	e004      	b.n	800969e <HAL_UART_IRQHandler+0x51e>
    return;
 8009694:	bf00      	nop
 8009696:	e002      	b.n	800969e <HAL_UART_IRQHandler+0x51e>
      return;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <HAL_UART_IRQHandler+0x51e>
      return;
 800969c:	bf00      	nop
  }
}
 800969e:	37e8      	adds	r7, #232	@ 0xe8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f4:	e03b      	b.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d037      	beq.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096fe:	f7f9 f8d1 	bl	80028a4 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	6a3a      	ldr	r2, [r7, #32]
 800970a:	429a      	cmp	r2, r3
 800970c:	d302      	bcc.n	8009714 <UART_WaitOnFlagUntilTimeout+0x30>
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e03a      	b.n	800978e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d023      	beq.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b80      	cmp	r3, #128	@ 0x80
 800972a:	d020      	beq.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	d01d      	beq.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b08      	cmp	r3, #8
 800973e:	d116      	bne.n	800976e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f857 	bl	800980a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2208      	movs	r2, #8
 8009760:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e00f      	b.n	800978e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4013      	ands	r3, r2
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	429a      	cmp	r2, r3
 800977c:	bf0c      	ite	eq
 800977e:	2301      	moveq	r3, #1
 8009780:	2300      	movne	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	429a      	cmp	r2, r3
 800978a:	d0b4      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	4613      	mov	r3, r2
 80097a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	88fa      	ldrh	r2, [r7, #6]
 80097b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2222      	movs	r2, #34	@ 0x22
 80097c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d007      	beq.n	80097dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695a      	ldr	r2, [r3, #20]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0201 	orr.w	r2, r2, #1
 80097ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0220 	orr.w	r2, r2, #32
 80097fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800980a:	b480      	push	{r7}
 800980c:	b095      	sub	sp, #84	@ 0x54
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	330c      	adds	r3, #12
 8009830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009832:	643a      	str	r2, [r7, #64]	@ 0x40
 8009834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3314      	adds	r3, #20
 800984c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	61fb      	str	r3, [r7, #28]
   return(result);
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f023 0301 	bic.w	r3, r3, #1
 800985c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3314      	adds	r3, #20
 8009864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009868:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800986c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987e:	2b01      	cmp	r3, #1
 8009880:	d119      	bne.n	80098b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	330c      	adds	r3, #12
 8009888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	60bb      	str	r3, [r7, #8]
   return(result);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	647b      	str	r3, [r7, #68]	@ 0x44
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	330c      	adds	r3, #12
 80098a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a2:	61ba      	str	r2, [r7, #24]
 80098a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6979      	ldr	r1, [r7, #20]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	613b      	str	r3, [r7, #16]
   return(result);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e5      	bne.n	8009882 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2220      	movs	r2, #32
 80098ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098c4:	bf00      	nop
 80098c6:	3754      	adds	r7, #84	@ 0x54
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7ff fee4 	bl	80096b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b21      	cmp	r3, #33	@ 0x21
 800990a:	d13e      	bne.n	800998a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009914:	d114      	bne.n	8009940 <UART_Transmit_IT+0x48>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d110      	bne.n	8009940 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009932:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	1c9a      	adds	r2, r3, #2
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	621a      	str	r2, [r3, #32]
 800993e:	e008      	b.n	8009952 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	1c59      	adds	r1, r3, #1
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6211      	str	r1, [r2, #32]
 800994a:	781a      	ldrb	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29b      	uxth	r3, r3
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4619      	mov	r1, r3
 8009960:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10f      	bne.n	8009986 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009974:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009984:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	e000      	b.n	800998c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800998a:	2302      	movs	r3, #2
  }
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fe73 	bl	80096a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	@ 0x30
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b22      	cmp	r3, #34	@ 0x22
 80099da:	f040 80ae 	bne.w	8009b3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e6:	d117      	bne.n	8009a18 <UART_Receive_IT+0x50>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d113      	bne.n	8009a18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a16:	e026      	b.n	8009a66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2a:	d007      	beq.n	8009a3c <UART_Receive_IT+0x74>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <UART_Receive_IT+0x82>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	e008      	b.n	8009a5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	4619      	mov	r1, r3
 8009a74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d15d      	bne.n	8009b36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0220 	bic.w	r2, r2, #32
 8009a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695a      	ldr	r2, [r3, #20]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d135      	bne.n	8009b2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	330c      	adds	r3, #12
 8009acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f023 0310 	bic.w	r3, r3, #16
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	330c      	adds	r3, #12
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae6:	623a      	str	r2, [r7, #32]
 8009ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	69f9      	ldr	r1, [r7, #28]
 8009aec:	6a3a      	ldr	r2, [r7, #32]
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d10a      	bne.n	8009b1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff fdd1 	bl	80096cc <HAL_UARTEx_RxEventCallback>
 8009b2a:	e002      	b.n	8009b32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7f7 fc4b 	bl	80013c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e002      	b.n	8009b3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b3a:	2302      	movs	r3, #2
  }
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3730      	adds	r7, #48	@ 0x30
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b48:	b0c0      	sub	sp, #256	@ 0x100
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	68d9      	ldr	r1, [r3, #12]
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	ea40 0301 	orr.w	r3, r0, r1
 8009b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b9c:	f021 010c 	bic.w	r1, r1, #12
 8009ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009baa:	430b      	orrs	r3, r1
 8009bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbe:	6999      	ldr	r1, [r3, #24]
 8009bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	ea40 0301 	orr.w	r3, r0, r1
 8009bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8009e10 <UART_SetConfig+0x2cc>)
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d005      	beq.n	8009be4 <UART_SetConfig+0xa0>
 8009bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	4b8d      	ldr	r3, [pc, #564]	@ (8009e14 <UART_SetConfig+0x2d0>)
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d104      	bne.n	8009bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009be4:	f7fe fa00 	bl	8007fe8 <HAL_RCC_GetPCLK2Freq>
 8009be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009bec:	e003      	b.n	8009bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bee:	f7fe f9e7 	bl	8007fc0 <HAL_RCC_GetPCLK1Freq>
 8009bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c00:	f040 810c 	bne.w	8009e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c16:	4622      	mov	r2, r4
 8009c18:	462b      	mov	r3, r5
 8009c1a:	1891      	adds	r1, r2, r2
 8009c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c1e:	415b      	adcs	r3, r3
 8009c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c26:	4621      	mov	r1, r4
 8009c28:	eb12 0801 	adds.w	r8, r2, r1
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	eb43 0901 	adc.w	r9, r3, r1
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c46:	4690      	mov	r8, r2
 8009c48:	4699      	mov	r9, r3
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	eb18 0303 	adds.w	r3, r8, r3
 8009c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c54:	462b      	mov	r3, r5
 8009c56:	eb49 0303 	adc.w	r3, r9, r3
 8009c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c72:	460b      	mov	r3, r1
 8009c74:	18db      	adds	r3, r3, r3
 8009c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c78:	4613      	mov	r3, r2
 8009c7a:	eb42 0303 	adc.w	r3, r2, r3
 8009c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c88:	f7f6 ffb6 	bl	8000bf8 <__aeabi_uldivmod>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4b61      	ldr	r3, [pc, #388]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009c92:	fba3 2302 	umull	r2, r3, r3, r2
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	011c      	lsls	r4, r3, #4
 8009c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009cac:	4642      	mov	r2, r8
 8009cae:	464b      	mov	r3, r9
 8009cb0:	1891      	adds	r1, r2, r2
 8009cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cb4:	415b      	adcs	r3, r3
 8009cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cbc:	4641      	mov	r1, r8
 8009cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cdc:	4692      	mov	sl, r2
 8009cde:	469b      	mov	fp, r3
 8009ce0:	4643      	mov	r3, r8
 8009ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cea:	464b      	mov	r3, r9
 8009cec:	eb4b 0303 	adc.w	r3, fp, r3
 8009cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	18db      	adds	r3, r3, r3
 8009d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d0e:	4613      	mov	r3, r2
 8009d10:	eb42 0303 	adc.w	r3, r2, r3
 8009d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d1e:	f7f6 ff6b 	bl	8000bf8 <__aeabi_uldivmod>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	4b3b      	ldr	r3, [pc, #236]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2264      	movs	r2, #100	@ 0x64
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	1acb      	subs	r3, r1, r3
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d3e:	4b36      	ldr	r3, [pc, #216]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009d40:	fba3 2302 	umull	r2, r3, r3, r2
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d4c:	441c      	add	r4, r3
 8009d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d60:	4642      	mov	r2, r8
 8009d62:	464b      	mov	r3, r9
 8009d64:	1891      	adds	r1, r2, r2
 8009d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d68:	415b      	adcs	r3, r3
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d70:	4641      	mov	r1, r8
 8009d72:	1851      	adds	r1, r2, r1
 8009d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d76:	4649      	mov	r1, r9
 8009d78:	414b      	adcs	r3, r1
 8009d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d88:	4659      	mov	r1, fp
 8009d8a:	00cb      	lsls	r3, r1, #3
 8009d8c:	4651      	mov	r1, sl
 8009d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d92:	4651      	mov	r1, sl
 8009d94:	00ca      	lsls	r2, r1, #3
 8009d96:	4610      	mov	r0, r2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	189b      	adds	r3, r3, r2
 8009da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009da4:	464b      	mov	r3, r9
 8009da6:	460a      	mov	r2, r1
 8009da8:	eb42 0303 	adc.w	r3, r2, r3
 8009dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	18db      	adds	r3, r3, r3
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dca:	4613      	mov	r3, r2
 8009dcc:	eb42 0303 	adc.w	r3, r2, r3
 8009dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009dda:	f7f6 ff0d 	bl	8000bf8 <__aeabi_uldivmod>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009de4:	fba3 1302 	umull	r1, r3, r3, r2
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	2164      	movs	r1, #100	@ 0x64
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	3332      	adds	r3, #50	@ 0x32
 8009df6:	4a08      	ldr	r2, [pc, #32]	@ (8009e18 <UART_SetConfig+0x2d4>)
 8009df8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfc:	095b      	lsrs	r3, r3, #5
 8009dfe:	f003 0207 	and.w	r2, r3, #7
 8009e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4422      	add	r2, r4
 8009e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e0c:	e106      	b.n	800a01c <UART_SetConfig+0x4d8>
 8009e0e:	bf00      	nop
 8009e10:	40011000 	.word	0x40011000
 8009e14:	40011400 	.word	0x40011400
 8009e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e2e:	4642      	mov	r2, r8
 8009e30:	464b      	mov	r3, r9
 8009e32:	1891      	adds	r1, r2, r2
 8009e34:	6239      	str	r1, [r7, #32]
 8009e36:	415b      	adcs	r3, r3
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e3e:	4641      	mov	r1, r8
 8009e40:	1854      	adds	r4, r2, r1
 8009e42:	4649      	mov	r1, r9
 8009e44:	eb43 0501 	adc.w	r5, r3, r1
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	f04f 0300 	mov.w	r3, #0
 8009e50:	00eb      	lsls	r3, r5, #3
 8009e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e56:	00e2      	lsls	r2, r4, #3
 8009e58:	4614      	mov	r4, r2
 8009e5a:	461d      	mov	r5, r3
 8009e5c:	4643      	mov	r3, r8
 8009e5e:	18e3      	adds	r3, r4, r3
 8009e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e64:	464b      	mov	r3, r9
 8009e66:	eb45 0303 	adc.w	r3, r5, r3
 8009e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	008b      	lsls	r3, r1, #2
 8009e8e:	4621      	mov	r1, r4
 8009e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e94:	4621      	mov	r1, r4
 8009e96:	008a      	lsls	r2, r1, #2
 8009e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e9c:	f7f6 feac 	bl	8000bf8 <__aeabi_uldivmod>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4b60      	ldr	r3, [pc, #384]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eaa:	095b      	lsrs	r3, r3, #5
 8009eac:	011c      	lsls	r4, r3, #4
 8009eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ec0:	4642      	mov	r2, r8
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	1891      	adds	r1, r2, r2
 8009ec6:	61b9      	str	r1, [r7, #24]
 8009ec8:	415b      	adcs	r3, r3
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	1851      	adds	r1, r2, r1
 8009ed4:	6139      	str	r1, [r7, #16]
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	414b      	adcs	r3, r1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ee8:	4659      	mov	r1, fp
 8009eea:	00cb      	lsls	r3, r1, #3
 8009eec:	4651      	mov	r1, sl
 8009eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ef2:	4651      	mov	r1, sl
 8009ef4:	00ca      	lsls	r2, r1, #3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	4642      	mov	r2, r8
 8009efe:	189b      	adds	r3, r3, r2
 8009f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f04:	464b      	mov	r3, r9
 8009f06:	460a      	mov	r2, r1
 8009f08:	eb42 0303 	adc.w	r3, r2, r3
 8009f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f28:	4649      	mov	r1, r9
 8009f2a:	008b      	lsls	r3, r1, #2
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f32:	4641      	mov	r1, r8
 8009f34:	008a      	lsls	r2, r1, #2
 8009f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f3a:	f7f6 fe5d 	bl	8000bf8 <__aeabi_uldivmod>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	4b38      	ldr	r3, [pc, #224]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009f46:	fba3 2301 	umull	r2, r3, r3, r1
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	2264      	movs	r2, #100	@ 0x64
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	1acb      	subs	r3, r1, r3
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	3332      	adds	r3, #50	@ 0x32
 8009f58:	4a33      	ldr	r2, [pc, #204]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f64:	441c      	add	r4, r3
 8009f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f74:	4642      	mov	r2, r8
 8009f76:	464b      	mov	r3, r9
 8009f78:	1891      	adds	r1, r2, r2
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	415b      	adcs	r3, r3
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f84:	4641      	mov	r1, r8
 8009f86:	1851      	adds	r1, r2, r1
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	414b      	adcs	r3, r1
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	00cb      	lsls	r3, r1, #3
 8009fa0:	4651      	mov	r1, sl
 8009fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fa6:	4651      	mov	r1, sl
 8009fa8:	00ca      	lsls	r2, r1, #3
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	460a      	mov	r2, r1
 8009fba:	eb42 0303 	adc.w	r3, r2, r3
 8009fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	f04f 0300 	mov.w	r3, #0
 8009fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fd8:	4649      	mov	r1, r9
 8009fda:	008b      	lsls	r3, r1, #2
 8009fdc:	4641      	mov	r1, r8
 8009fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	008a      	lsls	r2, r1, #2
 8009fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fea:	f7f6 fe05 	bl	8000bf8 <__aeabi_uldivmod>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <UART_SetConfig+0x4e4>)
 8009ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ff8:	095b      	lsrs	r3, r3, #5
 8009ffa:	2164      	movs	r1, #100	@ 0x64
 8009ffc:	fb01 f303 	mul.w	r3, r1, r3
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	3332      	adds	r3, #50	@ 0x32
 800a006:	4a08      	ldr	r2, [pc, #32]	@ (800a028 <UART_SetConfig+0x4e4>)
 800a008:	fba2 2303 	umull	r2, r3, r2, r3
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	f003 020f 	and.w	r2, r3, #15
 800a012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4422      	add	r2, r4
 800a01a:	609a      	str	r2, [r3, #8]
}
 800a01c:	bf00      	nop
 800a01e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a022:	46bd      	mov	sp, r7
 800a024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a028:	51eb851f 	.word	0x51eb851f

0800a02c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a02c:	b084      	sub	sp, #16
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	f107 001c 	add.w	r0, r7, #28
 800a03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a03e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a042:	2b01      	cmp	r3, #1
 800a044:	d123      	bne.n	800a08e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a05a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a06e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a072:	2b01      	cmp	r3, #1
 800a074:	d105      	bne.n	800a082 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fae8 	bl	800b658 <USB_CoreReset>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
 800a08c:	e01b      	b.n	800a0c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fadc 	bl	800b658 <USB_CoreReset>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0b8:	e005      	b.n	800a0c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0c6:	7fbb      	ldrb	r3, [r7, #30]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d10b      	bne.n	800a0e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f043 0206 	orr.w	r2, r3, #6
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f043 0220 	orr.w	r2, r3, #32
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0f0:	b004      	add	sp, #16
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d165      	bne.n	800a1d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4a41      	ldr	r2, [pc, #260]	@ (800a210 <USB_SetTurnaroundTime+0x11c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d906      	bls.n	800a11e <USB_SetTurnaroundTime+0x2a>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	4a40      	ldr	r2, [pc, #256]	@ (800a214 <USB_SetTurnaroundTime+0x120>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d202      	bcs.n	800a11e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a118:	230f      	movs	r3, #15
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e062      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a3c      	ldr	r2, [pc, #240]	@ (800a214 <USB_SetTurnaroundTime+0x120>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d306      	bcc.n	800a134 <USB_SetTurnaroundTime+0x40>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	4a3b      	ldr	r2, [pc, #236]	@ (800a218 <USB_SetTurnaroundTime+0x124>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d202      	bcs.n	800a134 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a12e:	230e      	movs	r3, #14
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	e057      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4a38      	ldr	r2, [pc, #224]	@ (800a218 <USB_SetTurnaroundTime+0x124>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d306      	bcc.n	800a14a <USB_SetTurnaroundTime+0x56>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4a37      	ldr	r2, [pc, #220]	@ (800a21c <USB_SetTurnaroundTime+0x128>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d202      	bcs.n	800a14a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a144:	230d      	movs	r3, #13
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e04c      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a33      	ldr	r2, [pc, #204]	@ (800a21c <USB_SetTurnaroundTime+0x128>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d306      	bcc.n	800a160 <USB_SetTurnaroundTime+0x6c>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4a32      	ldr	r2, [pc, #200]	@ (800a220 <USB_SetTurnaroundTime+0x12c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d802      	bhi.n	800a160 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a15a:	230c      	movs	r3, #12
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e041      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4a2f      	ldr	r2, [pc, #188]	@ (800a220 <USB_SetTurnaroundTime+0x12c>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d906      	bls.n	800a176 <USB_SetTurnaroundTime+0x82>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4a2e      	ldr	r2, [pc, #184]	@ (800a224 <USB_SetTurnaroundTime+0x130>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d802      	bhi.n	800a176 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a170:	230b      	movs	r3, #11
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e036      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a2a      	ldr	r2, [pc, #168]	@ (800a224 <USB_SetTurnaroundTime+0x130>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d906      	bls.n	800a18c <USB_SetTurnaroundTime+0x98>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a29      	ldr	r2, [pc, #164]	@ (800a228 <USB_SetTurnaroundTime+0x134>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d802      	bhi.n	800a18c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a186:	230a      	movs	r3, #10
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e02b      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4a26      	ldr	r2, [pc, #152]	@ (800a228 <USB_SetTurnaroundTime+0x134>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d906      	bls.n	800a1a2 <USB_SetTurnaroundTime+0xae>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4a25      	ldr	r2, [pc, #148]	@ (800a22c <USB_SetTurnaroundTime+0x138>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d202      	bcs.n	800a1a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a19c:	2309      	movs	r3, #9
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e020      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4a21      	ldr	r2, [pc, #132]	@ (800a22c <USB_SetTurnaroundTime+0x138>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d306      	bcc.n	800a1b8 <USB_SetTurnaroundTime+0xc4>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a20      	ldr	r2, [pc, #128]	@ (800a230 <USB_SetTurnaroundTime+0x13c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d802      	bhi.n	800a1b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e015      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a230 <USB_SetTurnaroundTime+0x13c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d906      	bls.n	800a1ce <USB_SetTurnaroundTime+0xda>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a234 <USB_SetTurnaroundTime+0x140>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d202      	bcs.n	800a1ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1c8:	2307      	movs	r3, #7
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e00a      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1ce:	2306      	movs	r3, #6
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	e007      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1da:	2309      	movs	r3, #9
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e001      	b.n	800a1e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1e0:	2309      	movs	r3, #9
 800a1e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	029b      	lsls	r3, r3, #10
 800a1f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	00d8acbf 	.word	0x00d8acbf
 800a214:	00e4e1c0 	.word	0x00e4e1c0
 800a218:	00f42400 	.word	0x00f42400
 800a21c:	01067380 	.word	0x01067380
 800a220:	011a499f 	.word	0x011a499f
 800a224:	01312cff 	.word	0x01312cff
 800a228:	014ca43f 	.word	0x014ca43f
 800a22c:	016e3600 	.word	0x016e3600
 800a230:	01a6ab1f 	.word	0x01a6ab1f
 800a234:	01e84800 	.word	0x01e84800

0800a238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f043 0201 	orr.w	r2, r3, #1
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f023 0201 	bic.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d115      	bne.n	800a2ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2aa:	200a      	movs	r0, #10
 800a2ac:	f7f8 fb06 	bl	80028bc <HAL_Delay>
      ms += 10U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	330a      	adds	r3, #10
 800a2b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f93f 	bl	800b53a <USB_GetMode>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d01e      	beq.n	800a300 <USB_SetCurrentMode+0x84>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2c6:	d9f0      	bls.n	800a2aa <USB_SetCurrentMode+0x2e>
 800a2c8:	e01a      	b.n	800a300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d115      	bne.n	800a2fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2dc:	200a      	movs	r0, #10
 800a2de:	f7f8 faed 	bl	80028bc <HAL_Delay>
      ms += 10U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	330a      	adds	r3, #10
 800a2e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f926 	bl	800b53a <USB_GetMode>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <USB_SetCurrentMode+0x84>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2f8:	d9f0      	bls.n	800a2dc <USB_SetCurrentMode+0x60>
 800a2fa:	e001      	b.n	800a300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e005      	b.n	800a30c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2bc8      	cmp	r3, #200	@ 0xc8
 800a304:	d101      	bne.n	800a30a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a314:	b084      	sub	sp, #16
 800a316:	b580      	push	{r7, lr}
 800a318:	b086      	sub	sp, #24
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a32e:	2300      	movs	r3, #0
 800a330:	613b      	str	r3, [r7, #16]
 800a332:	e009      	b.n	800a348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	3340      	adds	r3, #64	@ 0x40
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b0e      	cmp	r3, #14
 800a34c:	d9f2      	bls.n	800a334 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a34e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a352:	2b00      	cmp	r3, #0
 800a354:	d11c      	bne.n	800a390 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a364:	f043 0302 	orr.w	r3, r3, #2
 800a368:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a38e:	e00b      	b.n	800a3a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a394:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d10d      	bne.n	800a3d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f968 	bl	800a69c <USB_SetDevSpeed>
 800a3cc:	e008      	b.n	800a3e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f963 	bl	800a69c <USB_SetDevSpeed>
 800a3d6:	e003      	b.n	800a3e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3d8:	2103      	movs	r1, #3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f95e 	bl	800a69c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3e0:	2110      	movs	r1, #16
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8fa 	bl	800a5dc <USB_FlushTxFifo>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f924 	bl	800a640 <USB_FlushRxFifo>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a408:	461a      	mov	r2, r3
 800a40a:	2300      	movs	r3, #0
 800a40c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a414:	461a      	mov	r2, r3
 800a416:	2300      	movs	r3, #0
 800a418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	461a      	mov	r2, r3
 800a422:	2300      	movs	r3, #0
 800a424:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a426:	2300      	movs	r3, #0
 800a428:	613b      	str	r3, [r7, #16]
 800a42a:	e043      	b.n	800a4b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a43e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a442:	d118      	bne.n	800a476 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a456:	461a      	mov	r2, r3
 800a458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	e013      	b.n	800a488 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a46c:	461a      	mov	r2, r3
 800a46e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	e008      	b.n	800a488 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a482:	461a      	mov	r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	461a      	mov	r2, r3
 800a496:	2300      	movs	r3, #0
 800a498:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	613b      	str	r3, [r7, #16]
 800a4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d3b5      	bcc.n	800a42c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	e043      	b.n	800a54e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4dc:	d118      	bne.n	800a510 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	e013      	b.n	800a522 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a506:	461a      	mov	r2, r3
 800a508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e008      	b.n	800a522 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	461a      	mov	r2, r3
 800a51e:	2300      	movs	r3, #0
 800a520:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	461a      	mov	r2, r3
 800a530:	2300      	movs	r3, #0
 800a532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a540:	461a      	mov	r2, r3
 800a542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a552:	461a      	mov	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	4293      	cmp	r3, r2
 800a558:	d3b5      	bcc.n	800a4c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a56c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a57a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a57c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	f043 0210 	orr.w	r2, r3, #16
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699a      	ldr	r2, [r3, #24]
 800a594:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <USB_DevInit+0x2c4>)
 800a596:	4313      	orrs	r3, r2
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a59c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	f043 0208 	orr.w	r2, r3, #8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d107      	bne.n	800a5c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5c0:	f043 0304 	orr.w	r3, r3, #4
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5d4:	b004      	add	sp, #16
 800a5d6:	4770      	bx	lr
 800a5d8:	803c3800 	.word	0x803c3800

0800a5dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5f6:	d901      	bls.n	800a5fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e01b      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	daf2      	bge.n	800a5ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	019b      	lsls	r3, r3, #6
 800a60c:	f043 0220 	orr.w	r2, r3, #32
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a620:	d901      	bls.n	800a626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e006      	b.n	800a634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d0f0      	beq.n	800a614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3301      	adds	r3, #1
 800a650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a658:	d901      	bls.n	800a65e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e018      	b.n	800a690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	daf2      	bge.n	800a64c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2210      	movs	r2, #16
 800a66e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a67c:	d901      	bls.n	800a682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e006      	b.n	800a690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0310 	and.w	r3, r3, #16
 800a68a:	2b10      	cmp	r3, #16
 800a68c:	d0f0      	beq.n	800a670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	68f9      	ldr	r1, [r7, #12]
 800a6b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0306 	and.w	r3, r3, #6
 800a6e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	75fb      	strb	r3, [r7, #23]
 800a6f2:	e00a      	b.n	800a70a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d002      	beq.n	800a700 <USB_GetDevSpeed+0x32>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b06      	cmp	r3, #6
 800a6fe:	d102      	bne.n	800a706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a700:	2302      	movs	r3, #2
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	e001      	b.n	800a70a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a706:	230f      	movs	r3, #15
 800a708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	371c      	adds	r7, #28
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d13a      	bne.n	800a7aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	2101      	movs	r1, #1
 800a746:	fa01 f303 	lsl.w	r3, r1, r3
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	68f9      	ldr	r1, [r7, #12]
 800a74e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a752:	4313      	orrs	r3, r2
 800a754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d155      	bne.n	800a818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	059b      	lsls	r3, r3, #22
 800a78e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a790:	4313      	orrs	r3, r2
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e036      	b.n	800a818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11a      	bne.n	800a818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	791b      	ldrb	r3, [r3, #4]
 800a7fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7fe:	430b      	orrs	r3, r1
 800a800:	4313      	orrs	r3, r2
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a80e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
	...

0800a828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d161      	bne.n	800a908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a85a:	d11f      	bne.n	800a89c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	440a      	add	r2, r1
 800a872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a876:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a87a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a896:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a89a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8bc:	4013      	ands	r3, r2
 800a8be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c6:	69da      	ldr	r2, [r3, #28]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	43db      	mvns	r3, r3
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	0159      	lsls	r1, r3, #5
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	440b      	add	r3, r1
 800a8fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fe:	4619      	mov	r1, r3
 800a900:	4b35      	ldr	r3, [pc, #212]	@ (800a9d8 <USB_DeactivateEndpoint+0x1b0>)
 800a902:	4013      	ands	r3, r2
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	e060      	b.n	800a9ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a91a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a91e:	d11f      	bne.n	800a960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	0151      	lsls	r1, r2, #5
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	440a      	add	r2, r1
 800a936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a93e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	440a      	add	r2, r1
 800a956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a95a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a95e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	2101      	movs	r1, #1
 800a972:	fa01 f303 	lsl.w	r3, r1, r3
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	43db      	mvns	r3, r3
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a980:	4013      	ands	r3, r2
 800a982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98a:	69da      	ldr	r2, [r3, #28]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	2101      	movs	r1, #1
 800a996:	fa01 f303 	lsl.w	r3, r1, r3
 800a99a:	041b      	lsls	r3, r3, #16
 800a99c:	43db      	mvns	r3, r3
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	0159      	lsls	r1, r3, #5
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	440b      	add	r3, r1
 800a9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4b05      	ldr	r3, [pc, #20]	@ (800a9dc <USB_DeactivateEndpoint+0x1b4>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	ec337800 	.word	0xec337800
 800a9dc:	eff37800 	.word	0xeff37800

0800a9e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	@ 0x28
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	f040 817f 	bne.w	800ad00 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d132      	bne.n	800aa70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	0151      	lsls	r1, r2, #5
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	440a      	add	r2, r1
 800aa44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	0151      	lsls	r1, r2, #5
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	440a      	add	r2, r1
 800aa64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa68:	0cdb      	lsrs	r3, r3, #19
 800aa6a:	04db      	lsls	r3, r3, #19
 800aa6c:	6113      	str	r3, [r2, #16]
 800aa6e:	e097      	b.n	800aba0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa8a:	0cdb      	lsrs	r3, r3, #19
 800aa8c:	04db      	lsls	r3, r3, #19
 800aa8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaaa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aaae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aab2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d11a      	bne.n	800aaf0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d903      	bls.n	800aace <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaec:	6113      	str	r3, [r2, #16]
 800aaee:	e044      	b.n	800ab7a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	691a      	ldr	r2, [r3, #16]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	4413      	add	r3, r2
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab04:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	8afb      	ldrh	r3, [r7, #22]
 800ab16:	04d9      	lsls	r1, r3, #19
 800ab18:	4ba4      	ldr	r3, [pc, #656]	@ (800adac <USB_EPStartXfer+0x3cc>)
 800ab1a:	400b      	ands	r3, r1
 800ab1c:	69b9      	ldr	r1, [r7, #24]
 800ab1e:	0148      	lsls	r0, r1, #5
 800ab20:	69f9      	ldr	r1, [r7, #28]
 800ab22:	4401      	add	r1, r0
 800ab24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	791b      	ldrb	r3, [r3, #4]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d122      	bne.n	800ab7a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ab52:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab60:	691a      	ldr	r2, [r3, #16]
 800ab62:	8afb      	ldrh	r3, [r7, #22]
 800ab64:	075b      	lsls	r3, r3, #29
 800ab66:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ab6a:	69b9      	ldr	r1, [r7, #24]
 800ab6c:	0148      	lsls	r0, r1, #5
 800ab6e:	69f9      	ldr	r1, [r7, #28]
 800ab70:	4401      	add	r1, r0
 800ab72:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab76:	4313      	orrs	r3, r2
 800ab78:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab86:	691a      	ldr	r2, [r3, #16]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab90:	69b9      	ldr	r1, [r7, #24]
 800ab92:	0148      	lsls	r0, r1, #5
 800ab94:	69f9      	ldr	r1, [r7, #28]
 800ab96:	4401      	add	r1, r0
 800ab98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d14b      	bne.n	800ac3e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abba:	461a      	mov	r2, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	791b      	ldrb	r3, [r3, #4]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d128      	bne.n	800ac1c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d110      	bne.n	800abfc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	69fa      	ldr	r2, [r7, #28]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	e00f      	b.n	800ac1c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69ba      	ldr	r2, [r7, #24]
 800ac2c:	0151      	lsls	r1, r2, #5
 800ac2e:	69fa      	ldr	r2, [r7, #28]
 800ac30:	440a      	add	r2, r1
 800ac32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	e166      	b.n	800af0c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	0151      	lsls	r1, r2, #5
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	440a      	add	r2, r1
 800ac54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac5c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d015      	beq.n	800ac92 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 814e 	beq.w	800af0c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 030f 	and.w	r3, r3, #15
 800ac80:	2101      	movs	r1, #1
 800ac82:	fa01 f303 	lsl.w	r3, r1, r3
 800ac86:	69f9      	ldr	r1, [r7, #28]
 800ac88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac90:	e13c      	b.n	800af0c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d110      	bne.n	800acc4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e00f      	b.n	800ace4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ace2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	68d9      	ldr	r1, [r3, #12]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	b298      	uxth	r0, r3
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4603      	mov	r3, r0
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f9b9 	bl	800b070 <USB_WritePacket>
 800acfe:	e105      	b.n	800af0c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad1a:	0cdb      	lsrs	r3, r3, #19
 800ad1c:	04db      	lsls	r3, r3, #19
 800ad1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad42:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d132      	bne.n	800adb0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	689a      	ldr	r2, [r3, #8]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad78:	69b9      	ldr	r1, [r7, #24]
 800ad7a:	0148      	lsls	r0, r1, #5
 800ad7c:	69f9      	ldr	r1, [r7, #28]
 800ad7e:	4401      	add	r1, r0
 800ad80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad84:	4313      	orrs	r3, r2
 800ad86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ada6:	6113      	str	r3, [r2, #16]
 800ada8:	e062      	b.n	800ae70 <USB_EPStartXfer+0x490>
 800adaa:	bf00      	nop
 800adac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d123      	bne.n	800ae00 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adce:	69b9      	ldr	r1, [r7, #24]
 800add0:	0148      	lsls	r0, r1, #5
 800add2:	69f9      	ldr	r1, [r7, #28]
 800add4:	4401      	add	r1, r0
 800add6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800adda:	4313      	orrs	r3, r2
 800addc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adfc:	6113      	str	r3, [r2, #16]
 800adfe:	e037      	b.n	800ae70 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	691a      	ldr	r2, [r3, #16]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4413      	add	r3, r2
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	8afa      	ldrh	r2, [r7, #22]
 800ae1c:	fb03 f202 	mul.w	r2, r3, r2
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae30:	691a      	ldr	r2, [r3, #16]
 800ae32:	8afb      	ldrh	r3, [r7, #22]
 800ae34:	04d9      	lsls	r1, r3, #19
 800ae36:	4b38      	ldr	r3, [pc, #224]	@ (800af18 <USB_EPStartXfer+0x538>)
 800ae38:	400b      	ands	r3, r1
 800ae3a:	69b9      	ldr	r1, [r7, #24]
 800ae3c:	0148      	lsls	r0, r1, #5
 800ae3e:	69f9      	ldr	r1, [r7, #28]
 800ae40:	4401      	add	r1, r0
 800ae42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae46:	4313      	orrs	r3, r2
 800ae48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae56:	691a      	ldr	r2, [r3, #16]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae60:	69b9      	ldr	r1, [r7, #24]
 800ae62:	0148      	lsls	r0, r1, #5
 800ae64:	69f9      	ldr	r1, [r7, #28]
 800ae66:	4401      	add	r1, r0
 800ae68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d10d      	bne.n	800ae92 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	68d9      	ldr	r1, [r3, #12]
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae8e:	460a      	mov	r2, r1
 800ae90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	791b      	ldrb	r3, [r3, #4]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d128      	bne.n	800aeec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d110      	bne.n	800aecc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	0151      	lsls	r1, r2, #5
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	440a      	add	r2, r1
 800aec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	e00f      	b.n	800aeec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	1ff80000 	.word	0x1ff80000

0800af1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	785b      	ldrb	r3, [r3, #1]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d14a      	bne.n	800afd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af52:	f040 8086 	bne.w	800b062 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	0151      	lsls	r1, r2, #5
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	440a      	add	r2, r1
 800af70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	7812      	ldrb	r2, [r2, #0]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	440a      	add	r2, r1
 800af94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3301      	adds	r3, #1
 800afa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afaa:	4293      	cmp	r3, r2
 800afac:	d902      	bls.n	800afb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]
          break;
 800afb2:	e056      	b.n	800b062 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afcc:	d0e7      	beq.n	800af9e <USB_EPStopXfer+0x82>
 800afce:	e048      	b.n	800b062 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afe4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afe8:	d13b      	bne.n	800b062 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b008:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b00c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	7812      	ldrb	r2, [r2, #0]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b02c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b030:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b03e:	4293      	cmp	r3, r2
 800b040:	d902      	bls.n	800b048 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]
          break;
 800b046:	e00c      	b.n	800b062 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b05c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b060:	d0e7      	beq.n	800b032 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	371c      	adds	r7, #28
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b070:	b480      	push	{r7}
 800b072:	b089      	sub	sp, #36	@ 0x24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	460b      	mov	r3, r1
 800b080:	71fb      	strb	r3, [r7, #7]
 800b082:	4613      	mov	r3, r2
 800b084:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b08e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d123      	bne.n	800b0de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b096:	88bb      	ldrh	r3, [r7, #4]
 800b098:	3303      	adds	r3, #3
 800b09a:	089b      	lsrs	r3, r3, #2
 800b09c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	e018      	b.n	800b0d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	031a      	lsls	r2, r3, #12
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d3e2      	bcc.n	800b0a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3724      	adds	r7, #36	@ 0x24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b08b      	sub	sp, #44	@ 0x2c
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	b29b      	uxth	r3, r3
 800b108:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b112:	2300      	movs	r3, #0
 800b114:	623b      	str	r3, [r7, #32]
 800b116:	e014      	b.n	800b142 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	601a      	str	r2, [r3, #0]
    pDest++;
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	3301      	adds	r3, #1
 800b128:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12c:	3301      	adds	r3, #1
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	3301      	adds	r3, #1
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	3301      	adds	r3, #1
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	3301      	adds	r3, #1
 800b140:	623b      	str	r3, [r7, #32]
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	429a      	cmp	r2, r3
 800b148:	d3e6      	bcc.n	800b118 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b14a:	8bfb      	ldrh	r3, [r7, #30]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01e      	beq.n	800b18e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b15a:	461a      	mov	r2, r3
 800b15c:	f107 0310 	add.w	r3, r7, #16
 800b160:	6812      	ldr	r2, [r2, #0]
 800b162:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	fa22 f303 	lsr.w	r3, r2, r3
 800b170:	b2da      	uxtb	r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	701a      	strb	r2, [r3, #0]
      i++;
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	3301      	adds	r3, #1
 800b17a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	3301      	adds	r3, #1
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b182:	8bfb      	ldrh	r3, [r7, #30]
 800b184:	3b01      	subs	r3, #1
 800b186:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b188:	8bfb      	ldrh	r3, [r7, #30]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1ea      	bne.n	800b164 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b190:	4618      	mov	r0, r3
 800b192:	372c      	adds	r7, #44	@ 0x2c
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	785b      	ldrb	r3, [r3, #1]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d12c      	bne.n	800b212 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	db12      	blt.n	800b1f0 <USB_EPSetStall+0x54>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00f      	beq.n	800b1f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	0151      	lsls	r1, r2, #5
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	440a      	add	r2, r1
 800b1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	0151      	lsls	r1, r2, #5
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	440a      	add	r2, r1
 800b206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b20a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	e02b      	b.n	800b26a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	db12      	blt.n	800b24a <USB_EPSetStall+0xae>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b244:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b248:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d128      	bne.n	800b2e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	791b      	ldrb	r3, [r3, #4]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d003      	beq.n	800b2c4 <USB_EPClearStall+0x4c>
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	791b      	ldrb	r3, [r3, #4]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d138      	bne.n	800b336 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	0151      	lsls	r1, r2, #5
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	440a      	add	r2, r1
 800b2da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	e027      	b.n	800b336 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b300:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b304:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	791b      	ldrb	r3, [r3, #4]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d003      	beq.n	800b316 <USB_EPClearStall+0x9e>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	791b      	ldrb	r3, [r3, #4]
 800b312:	2b02      	cmp	r3, #2
 800b314:	d10f      	bne.n	800b336 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	0151      	lsls	r1, r2, #5
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	440a      	add	r2, r1
 800b32c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b334:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b362:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b366:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	011b      	lsls	r3, r3, #4
 800b374:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b378:	68f9      	ldr	r1, [r7, #12]
 800b37a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b37e:	4313      	orrs	r3, r2
 800b380:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3be:	f023 0302 	bic.w	r3, r3, #2
 800b3c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3ec:	f023 0303 	bic.w	r3, r3, #3
 800b3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b400:	f043 0302 	orr.w	r3, r3, #2
 800b404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4013      	ands	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b42c:	68fb      	ldr	r3, [r7, #12]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	4013      	ands	r3, r2
 800b45c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	0c1b      	lsrs	r3, r3, #16
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4013      	ands	r3, r2
 800b490:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	b29b      	uxth	r3, r3
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b500:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	01db      	lsls	r3, r3, #7
 800b510:	b2db      	uxtb	r3, r3
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	4313      	orrs	r3, r2
 800b516:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4013      	ands	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b52c:	68bb      	ldr	r3, [r7, #8]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0301 	and.w	r3, r3, #1
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b570:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b574:	f023 0307 	bic.w	r3, r3, #7
 800b578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b58c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	333c      	adds	r3, #60	@ 0x3c
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	4a26      	ldr	r2, [pc, #152]	@ (800b654 <USB_EP0_OutStart+0xb8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d90a      	bls.n	800b5d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5d0:	d101      	bne.n	800b5d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e037      	b.n	800b646 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5dc:	461a      	mov	r2, r3
 800b5de:	2300      	movs	r3, #0
 800b5e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b604:	f043 0318 	orr.w	r3, r3, #24
 800b608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b618:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b61c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b61e:	7afb      	ldrb	r3, [r7, #11]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d10f      	bne.n	800b644 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62a:	461a      	mov	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b63e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	371c      	adds	r7, #28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	4f54300a 	.word	0x4f54300a

0800b658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3301      	adds	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b670:	d901      	bls.n	800b676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e01b      	b.n	800b6ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	daf2      	bge.n	800b664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f043 0201 	orr.w	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3301      	adds	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b69a:	d901      	bls.n	800b6a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e006      	b.n	800b6ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d0f0      	beq.n	800b68e <USB_CoreReset+0x36>

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
	...

0800b6bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b6cc:	f002 fc2e 	bl	800df2c <USBD_static_malloc>
 800b6d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	@ 0xb0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e0d4      	b.n	800b896 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b6ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f003 fe42 	bl	800f37c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32b0      	adds	r2, #176	@ 0xb0
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	32b0      	adds	r2, #176	@ 0xb0
 800b712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7c1b      	ldrb	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d138      	bne.n	800b796 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b724:	4b5e      	ldr	r3, [pc, #376]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b726:	7819      	ldrb	r1, [r3, #0]
 800b728:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b72c:	2202      	movs	r2, #2
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f002 fad9 	bl	800dce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b734:	4b5a      	ldr	r3, [pc, #360]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 020f 	and.w	r2, r3, #15
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	440b      	add	r3, r1
 800b748:	3324      	adds	r3, #36	@ 0x24
 800b74a:	2201      	movs	r2, #1
 800b74c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b74e:	4b55      	ldr	r3, [pc, #340]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b750:	7819      	ldrb	r1, [r3, #0]
 800b752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b756:	2202      	movs	r2, #2
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f002 fac4 	bl	800dce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b75e:	4b51      	ldr	r3, [pc, #324]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	f003 020f 	and.w	r2, r3, #15
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	440b      	add	r3, r1
 800b772:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b776:	2201      	movs	r2, #1
 800b778:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b77a:	4b4b      	ldr	r3, [pc, #300]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 020f 	and.w	r2, r3, #15
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	3326      	adds	r3, #38	@ 0x26
 800b790:	2210      	movs	r2, #16
 800b792:	801a      	strh	r2, [r3, #0]
 800b794:	e035      	b.n	800b802 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b796:	4b42      	ldr	r3, [pc, #264]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b798:	7819      	ldrb	r1, [r3, #0]
 800b79a:	2340      	movs	r3, #64	@ 0x40
 800b79c:	2202      	movs	r2, #2
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f002 faa1 	bl	800dce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a0 <USBD_CDC_Init+0x1e4>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 020f 	and.w	r2, r3, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3324      	adds	r3, #36	@ 0x24
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7be:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	2340      	movs	r3, #64	@ 0x40
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f002 fa8d 	bl	800dce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7cc:	4b35      	ldr	r3, [pc, #212]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	f003 020f 	and.w	r2, r3, #15
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	440b      	add	r3, r1
 800b7e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 020f 	and.w	r2, r3, #15
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	440b      	add	r3, r1
 800b7fc:	3326      	adds	r3, #38	@ 0x26
 800b7fe:	2210      	movs	r2, #16
 800b800:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b802:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b804:	7819      	ldrb	r1, [r3, #0]
 800b806:	2308      	movs	r3, #8
 800b808:	2203      	movs	r2, #3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f002 fa6b 	bl	800dce6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b810:	4b25      	ldr	r3, [pc, #148]	@ (800b8a8 <USBD_CDC_Init+0x1ec>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	f003 020f 	and.w	r2, r3, #15
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	440b      	add	r3, r1
 800b824:	3324      	adds	r3, #36	@ 0x24
 800b826:	2201      	movs	r2, #1
 800b828:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	33b0      	adds	r3, #176	@ 0xb0
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b860:	2302      	movs	r3, #2
 800b862:	e018      	b.n	800b896 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7c1b      	ldrb	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b86c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b86e:	7819      	ldrb	r1, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 fb22 	bl	800dec4 <USBD_LL_PrepareReceive>
 800b880:	e008      	b.n	800b894 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b882:	4b08      	ldr	r3, [pc, #32]	@ (800b8a4 <USBD_CDC_Init+0x1e8>)
 800b884:	7819      	ldrb	r1, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b88c:	2340      	movs	r3, #64	@ 0x40
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f002 fb18 	bl	800dec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200000ab 	.word	0x200000ab
 800b8a4:	200000ac 	.word	0x200000ac
 800b8a8:	200000ad 	.word	0x200000ad

0800b8ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8b8:	4b3a      	ldr	r3, [pc, #232]	@ (800b9a4 <USBD_CDC_DeInit+0xf8>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f002 fa37 	bl	800dd32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8c4:	4b37      	ldr	r3, [pc, #220]	@ (800b9a4 <USBD_CDC_DeInit+0xf8>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 020f 	and.w	r2, r3, #15
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	440b      	add	r3, r1
 800b8d8:	3324      	adds	r3, #36	@ 0x24
 800b8da:	2200      	movs	r2, #0
 800b8dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b8de:	4b32      	ldr	r3, [pc, #200]	@ (800b9a8 <USBD_CDC_DeInit+0xfc>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f002 fa24 	bl	800dd32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a8 <USBD_CDC_DeInit+0xfc>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	f003 020f 	and.w	r2, r3, #15
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	440b      	add	r3, r1
 800b8fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b902:	2200      	movs	r2, #0
 800b904:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b906:	4b29      	ldr	r3, [pc, #164]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f002 fa10 	bl	800dd32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b912:	4b26      	ldr	r3, [pc, #152]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 020f 	and.w	r2, r3, #15
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3324      	adds	r3, #36	@ 0x24
 800b928:	2200      	movs	r2, #0
 800b92a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b92c:	4b1f      	ldr	r3, [pc, #124]	@ (800b9ac <USBD_CDC_DeInit+0x100>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 020f 	and.w	r2, r3, #15
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	3326      	adds	r3, #38	@ 0x26
 800b942:	2200      	movs	r2, #0
 800b944:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	32b0      	adds	r2, #176	@ 0xb0
 800b950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01f      	beq.n	800b998 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	33b0      	adds	r3, #176	@ 0xb0
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	32b0      	adds	r2, #176	@ 0xb0
 800b976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f002 fae4 	bl	800df48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	32b0      	adds	r2, #176	@ 0xb0
 800b98a:	2100      	movs	r1, #0
 800b98c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200000ab 	.word	0x200000ab
 800b9a8:	200000ac 	.word	0x200000ac
 800b9ac:	200000ad 	.word	0x200000ad

0800b9b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	32b0      	adds	r2, #176	@ 0xb0
 800b9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e0bf      	b.n	800bb60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d050      	beq.n	800ba8e <USBD_CDC_Setup+0xde>
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	f040 80af 	bne.w	800bb50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	88db      	ldrh	r3, [r3, #6]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d03a      	beq.n	800ba70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da1b      	bge.n	800ba3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	33b0      	adds	r3, #176	@ 0xb0
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	88d2      	ldrh	r2, [r2, #6]
 800ba20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	88db      	ldrh	r3, [r3, #6]
 800ba26:	2b07      	cmp	r3, #7
 800ba28:	bf28      	it	cs
 800ba2a:	2307      	movcs	r3, #7
 800ba2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	89fa      	ldrh	r2, [r7, #14]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 fd53 	bl	800d4e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba3a:	e090      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	785a      	ldrb	r2, [r3, #1]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	88db      	ldrh	r3, [r3, #6]
 800ba4a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ba4c:	d803      	bhi.n	800ba56 <USBD_CDC_Setup+0xa6>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	88db      	ldrh	r3, [r3, #6]
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	e000      	b.n	800ba58 <USBD_CDC_Setup+0xa8>
 800ba56:	2240      	movs	r2, #64	@ 0x40
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba5e:	6939      	ldr	r1, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ba66:	461a      	mov	r2, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fd65 	bl	800d538 <USBD_CtlPrepareRx>
      break;
 800ba6e:	e076      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	33b0      	adds	r3, #176	@ 0xb0
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	7850      	ldrb	r0, [r2, #1]
 800ba86:	2200      	movs	r2, #0
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	4798      	blx	r3
      break;
 800ba8c:	e067      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b0b      	cmp	r3, #11
 800ba94:	d851      	bhi.n	800bb3a <USBD_CDC_Setup+0x18a>
 800ba96:	a201      	add	r2, pc, #4	@ (adr r2, 800ba9c <USBD_CDC_Setup+0xec>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bacd 	.word	0x0800bacd
 800baa0:	0800bb49 	.word	0x0800bb49
 800baa4:	0800bb3b 	.word	0x0800bb3b
 800baa8:	0800bb3b 	.word	0x0800bb3b
 800baac:	0800bb3b 	.word	0x0800bb3b
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb3b 	.word	0x0800bb3b
 800bab8:	0800bb3b 	.word	0x0800bb3b
 800babc:	0800bb3b 	.word	0x0800bb3b
 800bac0:	0800bb3b 	.word	0x0800bb3b
 800bac4:	0800baf7 	.word	0x0800baf7
 800bac8:	0800bb21 	.word	0x0800bb21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d107      	bne.n	800bae8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bad8:	f107 030a 	add.w	r3, r7, #10
 800badc:	2202      	movs	r2, #2
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 fcfd 	bl	800d4e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bae6:	e032      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 fc7b 	bl	800d3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800baf0:	2303      	movs	r3, #3
 800baf2:	75fb      	strb	r3, [r7, #23]
          break;
 800baf4:	e02b      	b.n	800bb4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d107      	bne.n	800bb12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb02:	f107 030d 	add.w	r3, r7, #13
 800bb06:	2201      	movs	r2, #1
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 fce8 	bl	800d4e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb10:	e01d      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 fc66 	bl	800d3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb1e:	e016      	b.n	800bb4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d00f      	beq.n	800bb4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f001 fc59 	bl	800d3e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb34:	2303      	movs	r3, #3
 800bb36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb38:	e008      	b.n	800bb4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 fc52 	bl	800d3e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb42:	2303      	movs	r3, #3
 800bb44:	75fb      	strb	r3, [r7, #23]
          break;
 800bb46:	e002      	b.n	800bb4e <USBD_CDC_Setup+0x19e>
          break;
 800bb48:	bf00      	nop
 800bb4a:	e008      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>
          break;
 800bb4c:	bf00      	nop
      }
      break;
 800bb4e:	e006      	b.n	800bb5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fc47 	bl	800d3e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	32b0      	adds	r2, #176	@ 0xb0
 800bb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e065      	b.n	800bc5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	32b0      	adds	r2, #176	@ 0xb0
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f003 020f 	and.w	r2, r3, #15
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	440b      	add	r3, r1
 800bbb4:	3318      	adds	r3, #24
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02f      	beq.n	800bc1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbbc:	78fb      	ldrb	r3, [r7, #3]
 800bbbe:	f003 020f 	and.w	r2, r3, #15
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	3318      	adds	r3, #24
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	f003 010f 	and.w	r1, r3, #15
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	440b      	add	r3, r1
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4403      	add	r3, r0
 800bbe4:	331c      	adds	r3, #28
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbec:	fb01 f303 	mul.w	r3, r1, r3
 800bbf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d112      	bne.n	800bc1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	f003 020f 	and.w	r2, r3, #15
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3318      	adds	r3, #24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f002 f934 	bl	800de82 <USBD_LL_Transmit>
 800bc1a:	e01f      	b.n	800bc5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	33b0      	adds	r3, #176	@ 0xb0
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d010      	beq.n	800bc5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	33b0      	adds	r3, #176	@ 0xb0
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bc58:	78fa      	ldrb	r2, [r7, #3]
 800bc5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	32b0      	adds	r2, #176	@ 0xb0
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32b0      	adds	r2, #176	@ 0xb0
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e01a      	b.n	800bcce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 f932 	bl	800df06 <USBD_LL_GetRxDataSize>
 800bca2:	4602      	mov	r2, r0
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	33b0      	adds	r3, #176	@ 0xb0
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	32b0      	adds	r2, #176	@ 0xb0
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e024      	b.n	800bd42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	33b0      	adds	r3, #176	@ 0xb0
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d019      	beq.n	800bd40 <USBD_CDC_EP0_RxReady+0x6a>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd12:	2bff      	cmp	r3, #255	@ 0xff
 800bd14:	d014      	beq.n	800bd40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	33b0      	adds	r3, #176	@ 0xb0
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	22ff      	movs	r2, #255	@ 0xff
 800bd3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd54:	2182      	movs	r1, #130	@ 0x82
 800bd56:	4818      	ldr	r0, [pc, #96]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd58:	f000 fd0f 	bl	800c77a <USBD_GetEpDesc>
 800bd5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd5e:	2101      	movs	r1, #1
 800bd60:	4815      	ldr	r0, [pc, #84]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd62:	f000 fd0a 	bl	800c77a <USBD_GetEpDesc>
 800bd66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd68:	2181      	movs	r1, #129	@ 0x81
 800bd6a:	4813      	ldr	r0, [pc, #76]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd6c:	f000 fd05 	bl	800c77a <USBD_GetEpDesc>
 800bd70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2210      	movs	r2, #16
 800bd7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d006      	beq.n	800bd92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd8c:	711a      	strb	r2, [r3, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bda0:	711a      	strb	r2, [r3, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2243      	movs	r2, #67	@ 0x43
 800bdaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000068 	.word	0x20000068

0800bdbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdc4:	2182      	movs	r1, #130	@ 0x82
 800bdc6:	4818      	ldr	r0, [pc, #96]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdc8:	f000 fcd7 	bl	800c77a <USBD_GetEpDesc>
 800bdcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdce:	2101      	movs	r1, #1
 800bdd0:	4815      	ldr	r0, [pc, #84]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdd2:	f000 fcd2 	bl	800c77a <USBD_GetEpDesc>
 800bdd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdd8:	2181      	movs	r1, #129	@ 0x81
 800bdda:	4813      	ldr	r0, [pc, #76]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bddc:	f000 fccd 	bl	800c77a <USBD_GetEpDesc>
 800bde0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2210      	movs	r2, #16
 800bdec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	711a      	strb	r2, [r3, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f042 0202 	orr.w	r2, r2, #2
 800be00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d006      	beq.n	800be16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	711a      	strb	r2, [r3, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f042 0202 	orr.w	r2, r2, #2
 800be14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2243      	movs	r2, #67	@ 0x43
 800be1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be1c:	4b02      	ldr	r3, [pc, #8]	@ (800be28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20000068 	.word	0x20000068

0800be2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be34:	2182      	movs	r1, #130	@ 0x82
 800be36:	4818      	ldr	r0, [pc, #96]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be38:	f000 fc9f 	bl	800c77a <USBD_GetEpDesc>
 800be3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be3e:	2101      	movs	r1, #1
 800be40:	4815      	ldr	r0, [pc, #84]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be42:	f000 fc9a 	bl	800c77a <USBD_GetEpDesc>
 800be46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be48:	2181      	movs	r1, #129	@ 0x81
 800be4a:	4813      	ldr	r0, [pc, #76]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be4c:	f000 fc95 	bl	800c77a <USBD_GetEpDesc>
 800be50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2210      	movs	r2, #16
 800be5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d006      	beq.n	800be72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2200      	movs	r2, #0
 800be68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be6c:	711a      	strb	r2, [r3, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d006      	beq.n	800be86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be80:	711a      	strb	r2, [r3, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2243      	movs	r2, #67	@ 0x43
 800be8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be8c:	4b02      	ldr	r3, [pc, #8]	@ (800be98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000068 	.word	0x20000068

0800be9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	220a      	movs	r2, #10
 800bea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800beaa:	4b03      	ldr	r3, [pc, #12]	@ (800beb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	20000024 	.word	0x20000024

0800bebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	e009      	b.n	800bee4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	33b0      	adds	r3, #176	@ 0xb0
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	32b0      	adds	r2, #176	@ 0xb0
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e008      	b.n	800bf28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	32b0      	adds	r2, #176	@ 0xb0
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e004      	b.n	800bf62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	32b0      	adds	r2, #176	@ 0xb0
 800bf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	32b0      	adds	r2, #176	@ 0xb0
 800bf92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e018      	b.n	800bfd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	7c1b      	ldrb	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10a      	bne.n	800bfbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfa6:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd8 <USBD_CDC_ReceivePacket+0x68>)
 800bfa8:	7819      	ldrb	r1, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f001 ff85 	bl	800dec4 <USBD_LL_PrepareReceive>
 800bfba:	e008      	b.n	800bfce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <USBD_CDC_ReceivePacket+0x68>)
 800bfbe:	7819      	ldrb	r1, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfc6:	2340      	movs	r3, #64	@ 0x40
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 ff7b 	bl	800dec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200000ac 	.word	0x200000ac

0800bfdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e01f      	b.n	800c034 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	79fa      	ldrb	r2, [r7, #7]
 800c026:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f001 fdf5 	bl	800dc18 <USBD_LL_Init>
 800c02e:	4603      	mov	r3, r0
 800c030:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c046:	2300      	movs	r3, #0
 800c048:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c050:	2303      	movs	r3, #3
 800c052:	e025      	b.n	800c0a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	32ae      	adds	r2, #174	@ 0xae
 800c066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00f      	beq.n	800c090 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	32ae      	adds	r2, #174	@ 0xae
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c080:	f107 020e 	add.w	r2, r7, #14
 800c084:	4610      	mov	r0, r2
 800c086:	4798      	blx	r3
 800c088:	4602      	mov	r2, r0
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 fdfd 	bl	800dcb0 <USBD_LL_Start>
 800c0b6:	4603      	mov	r3, r0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d009      	beq.n	800c104 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	78fa      	ldrb	r2, [r7, #3]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	4798      	blx	r3
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	78fa      	ldrb	r2, [r7, #3]
 800c128:	4611      	mov	r1, r2
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	4798      	blx	r3
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c134:	2303      	movs	r3, #3
 800c136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c138:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	4618      	mov	r0, r3
 800c156:	f001 f90c 	bl	800d372 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c176:	f003 031f 	and.w	r3, r3, #31
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d01a      	beq.n	800c1b4 <USBD_LL_SetupStage+0x72>
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d822      	bhi.n	800c1c8 <USBD_LL_SetupStage+0x86>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <USBD_LL_SetupStage+0x4a>
 800c186:	2b01      	cmp	r3, #1
 800c188:	d00a      	beq.n	800c1a0 <USBD_LL_SetupStage+0x5e>
 800c18a:	e01d      	b.n	800c1c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb63 	bl	800c860 <USBD_StdDevReq>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73fb      	strb	r3, [r7, #15]
      break;
 800c19e:	e020      	b.n	800c1e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fbcb 	bl	800c944 <USBD_StdItfReq>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b2:	e016      	b.n	800c1e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fc2d 	bl	800ca1c <USBD_StdEPReq>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c6:	e00c      	b.n	800c1e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 fdca 	bl	800dd70 <USBD_LL_StallEP>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e0:	bf00      	nop
  }

  return ret;
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d16e      	bne.n	800c2e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c20a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c212:	2b03      	cmp	r3, #3
 800c214:	f040 8098 	bne.w	800c348 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	429a      	cmp	r2, r3
 800c222:	d913      	bls.n	800c24c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	1ad2      	subs	r2, r2, r3
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	bf28      	it	cs
 800c23e:	4613      	movcs	r3, r2
 800c240:	461a      	mov	r2, r3
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f001 f994 	bl	800d572 <USBD_CtlContinueRx>
 800c24a:	e07d      	b.n	800c348 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c252:	f003 031f 	and.w	r3, r3, #31
 800c256:	2b02      	cmp	r3, #2
 800c258:	d014      	beq.n	800c284 <USBD_LL_DataOutStage+0x98>
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d81d      	bhi.n	800c29a <USBD_LL_DataOutStage+0xae>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <USBD_LL_DataOutStage+0x7c>
 800c262:	2b01      	cmp	r3, #1
 800c264:	d003      	beq.n	800c26e <USBD_LL_DataOutStage+0x82>
 800c266:	e018      	b.n	800c29a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	75bb      	strb	r3, [r7, #22]
            break;
 800c26c:	e018      	b.n	800c2a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c274:	b2db      	uxtb	r3, r3
 800c276:	4619      	mov	r1, r3
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f000 fa64 	bl	800c746 <USBD_CoreFindIF>
 800c27e:	4603      	mov	r3, r0
 800c280:	75bb      	strb	r3, [r7, #22]
            break;
 800c282:	e00d      	b.n	800c2a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	4619      	mov	r1, r3
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fa66 	bl	800c760 <USBD_CoreFindEP>
 800c294:	4603      	mov	r3, r0
 800c296:	75bb      	strb	r3, [r7, #22]
            break;
 800c298:	e002      	b.n	800c2a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75bb      	strb	r3, [r7, #22]
            break;
 800c29e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c2a0:	7dbb      	ldrb	r3, [r7, #22]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d119      	bne.n	800c2da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d113      	bne.n	800c2da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c2b2:	7dba      	ldrb	r2, [r7, #22]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	32ae      	adds	r2, #174	@ 0xae
 800c2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00b      	beq.n	800c2da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c2c2:	7dba      	ldrb	r2, [r7, #22]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c2ca:	7dba      	ldrb	r2, [r7, #22]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	32ae      	adds	r2, #174	@ 0xae
 800c2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f001 f95a 	bl	800d594 <USBD_CtlSendStatus>
 800c2e0:	e032      	b.n	800c348 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c2e2:	7afb      	ldrb	r3, [r7, #11]
 800c2e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 fa37 	bl	800c760 <USBD_CoreFindEP>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2f6:	7dbb      	ldrb	r3, [r7, #22]
 800c2f8:	2bff      	cmp	r3, #255	@ 0xff
 800c2fa:	d025      	beq.n	800c348 <USBD_LL_DataOutStage+0x15c>
 800c2fc:	7dbb      	ldrb	r3, [r7, #22]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d122      	bne.n	800c348 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d117      	bne.n	800c33e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c30e:	7dba      	ldrb	r2, [r7, #22]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	32ae      	adds	r2, #174	@ 0xae
 800c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c31e:	7dba      	ldrb	r2, [r7, #22]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c326:	7dba      	ldrb	r2, [r7, #22]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	32ae      	adds	r2, #174	@ 0xae
 800c32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	7afa      	ldrb	r2, [r7, #11]
 800c334:	4611      	mov	r1, r2
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	4798      	blx	r3
 800c33a:	4603      	mov	r3, r0
 800c33c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c344:	7dfb      	ldrb	r3, [r7, #23]
 800c346:	e000      	b.n	800c34a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b086      	sub	sp, #24
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	460b      	mov	r3, r1
 800c35c:	607a      	str	r2, [r7, #4]
 800c35e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c360:	7afb      	ldrb	r3, [r7, #11]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d16f      	bne.n	800c446 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3314      	adds	r3, #20
 800c36a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c372:	2b02      	cmp	r3, #2
 800c374:	d15a      	bne.n	800c42c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d914      	bls.n	800c3ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	461a      	mov	r2, r3
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f001 f8bc 	bl	800d516 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c39e:	2300      	movs	r3, #0
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f001 fd8d 	bl	800dec4 <USBD_LL_PrepareReceive>
 800c3aa:	e03f      	b.n	800c42c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	68da      	ldr	r2, [r3, #12]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d11c      	bne.n	800c3f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d316      	bcc.n	800c3f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d20f      	bcs.n	800c3f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f001 f89d 	bl	800d516 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f001 fd6a 	bl	800dec4 <USBD_LL_PrepareReceive>
 800c3f0:	e01c      	b.n	800c42c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d10f      	bne.n	800c41e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d009      	beq.n	800c41e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c41e:	2180      	movs	r1, #128	@ 0x80
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f001 fca5 	bl	800dd70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f001 f8c7 	bl	800d5ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d03a      	beq.n	800c4ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f7ff fe42 	bl	800c0c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c444:	e032      	b.n	800c4ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c446:	7afb      	ldrb	r3, [r7, #11]
 800c448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	4619      	mov	r1, r3
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 f985 	bl	800c760 <USBD_CoreFindEP>
 800c456:	4603      	mov	r3, r0
 800c458:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	2bff      	cmp	r3, #255	@ 0xff
 800c45e:	d025      	beq.n	800c4ac <USBD_LL_DataInStage+0x15a>
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d122      	bne.n	800c4ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d11c      	bne.n	800c4ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c472:	7dfa      	ldrb	r2, [r7, #23]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	32ae      	adds	r2, #174	@ 0xae
 800c478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d014      	beq.n	800c4ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c482:	7dfa      	ldrb	r2, [r7, #23]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c48a:	7dfa      	ldrb	r2, [r7, #23]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	32ae      	adds	r2, #174	@ 0xae
 800c490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	7afa      	ldrb	r2, [r7, #11]
 800c498:	4611      	mov	r1, r2
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	4798      	blx	r3
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c4a2:	7dbb      	ldrb	r3, [r7, #22]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c4a8:	7dbb      	ldrb	r3, [r7, #22]
 800c4aa:	e000      	b.n	800c4ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d014      	beq.n	800c51c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	6852      	ldr	r2, [r2, #4]
 800c50a:	b2d2      	uxtb	r2, r2
 800c50c:	4611      	mov	r1, r2
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	4798      	blx	r3
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c518:	2303      	movs	r3, #3
 800c51a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c51c:	2340      	movs	r3, #64	@ 0x40
 800c51e:	2200      	movs	r2, #0
 800c520:	2100      	movs	r1, #0
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f001 fbdf 	bl	800dce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2240      	movs	r2, #64	@ 0x40
 800c534:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c538:	2340      	movs	r3, #64	@ 0x40
 800c53a:	2200      	movs	r2, #0
 800c53c:	2180      	movs	r1, #128	@ 0x80
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 fbd1 	bl	800dce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2240      	movs	r2, #64	@ 0x40
 800c54e:	621a      	str	r2, [r3, #32]

  return ret;
 800c550:	7bfb      	ldrb	r3, [r7, #15]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	460b      	mov	r3, r1
 800c564:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b04      	cmp	r3, #4
 800c58c:	d006      	beq.n	800c59c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c594:	b2da      	uxtb	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b04      	cmp	r3, #4
 800c5c4:	d106      	bne.n	800c5d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d110      	bne.n	800c618 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00b      	beq.n	800c618 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d005      	beq.n	800c618 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c612:	69db      	ldr	r3, [r3, #28]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b082      	sub	sp, #8
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32ae      	adds	r2, #174	@ 0xae
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d101      	bne.n	800c644 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c640:	2303      	movs	r3, #3
 800c642:	e01c      	b.n	800c67e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d115      	bne.n	800c67c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	32ae      	adds	r2, #174	@ 0xae
 800c65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	32ae      	adds	r2, #174	@ 0xae
 800c66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	78fa      	ldrb	r2, [r7, #3]
 800c676:	4611      	mov	r1, r2
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b082      	sub	sp, #8
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	460b      	mov	r3, r1
 800c690:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	32ae      	adds	r2, #174	@ 0xae
 800c69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e01c      	b.n	800c6e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d115      	bne.n	800c6e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	32ae      	adds	r2, #174	@ 0xae
 800c6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	32ae      	adds	r2, #174	@ 0xae
 800c6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	4611      	mov	r1, r2
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00e      	beq.n	800c73c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	6852      	ldr	r2, [r2, #4]
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	4611      	mov	r1, r2
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c738:	2303      	movs	r3, #3
 800c73a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c752:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c76c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	460b      	mov	r3, r1
 800c784:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	b29b      	uxth	r3, r3
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	7812      	ldrb	r2, [r2, #0]
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d91f      	bls.n	800c7e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c7a6:	e013      	b.n	800c7d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c7a8:	f107 030a 	add.w	r3, r7, #10
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6978      	ldr	r0, [r7, #20]
 800c7b0:	f000 f81b 	bl	800c7ea <USBD_GetNextDesc>
 800c7b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	785b      	ldrb	r3, [r3, #1]
 800c7ba:	2b05      	cmp	r3, #5
 800c7bc:	d108      	bne.n	800c7d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	789b      	ldrb	r3, [r3, #2]
 800c7c6:	78fa      	ldrb	r2, [r7, #3]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d008      	beq.n	800c7de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	885b      	ldrh	r3, [r3, #2]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	897b      	ldrh	r3, [r7, #10]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d8e5      	bhi.n	800c7a8 <USBD_GetEpDesc+0x2e>
 800c7dc:	e000      	b.n	800c7e0 <USBD_GetEpDesc+0x66>
          break;
 800c7de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c7e0:	693b      	ldr	r3, [r7, #16]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	7812      	ldrb	r2, [r2, #0]
 800c800:	4413      	add	r3, r2
 800c802:	b29a      	uxth	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4413      	add	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c814:	68fb      	ldr	r3, [r7, #12]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c822:	b480      	push	{r7}
 800c824:	b087      	sub	sp, #28
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	3301      	adds	r3, #1
 800c838:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c840:	8a3b      	ldrh	r3, [r7, #16]
 800c842:	021b      	lsls	r3, r3, #8
 800c844:	b21a      	sxth	r2, r3
 800c846:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	b21b      	sxth	r3, r3
 800c84e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c850:	89fb      	ldrh	r3, [r7, #14]
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
	...

0800c860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c876:	2b40      	cmp	r3, #64	@ 0x40
 800c878:	d005      	beq.n	800c886 <USBD_StdDevReq+0x26>
 800c87a:	2b40      	cmp	r3, #64	@ 0x40
 800c87c:	d857      	bhi.n	800c92e <USBD_StdDevReq+0xce>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00f      	beq.n	800c8a2 <USBD_StdDevReq+0x42>
 800c882:	2b20      	cmp	r3, #32
 800c884:	d153      	bne.n	800c92e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	32ae      	adds	r2, #174	@ 0xae
 800c890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	4798      	blx	r3
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]
      break;
 800c8a0:	e04a      	b.n	800c938 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	785b      	ldrb	r3, [r3, #1]
 800c8a6:	2b09      	cmp	r3, #9
 800c8a8:	d83b      	bhi.n	800c922 <USBD_StdDevReq+0xc2>
 800c8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b0 <USBD_StdDevReq+0x50>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c919 	.word	0x0800c919
 800c8b8:	0800c923 	.word	0x0800c923
 800c8bc:	0800c90f 	.word	0x0800c90f
 800c8c0:	0800c923 	.word	0x0800c923
 800c8c4:	0800c8e3 	.word	0x0800c8e3
 800c8c8:	0800c8d9 	.word	0x0800c8d9
 800c8cc:	0800c923 	.word	0x0800c923
 800c8d0:	0800c8fb 	.word	0x0800c8fb
 800c8d4:	0800c8ed 	.word	0x0800c8ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8d8:	6839      	ldr	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa3c 	bl	800cd58 <USBD_GetDescriptor>
          break;
 800c8e0:	e024      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fba1 	bl	800d02c <USBD_SetAddress>
          break;
 800c8ea:	e01f      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fbe0 	bl	800d0b4 <USBD_SetConfig>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73fb      	strb	r3, [r7, #15]
          break;
 800c8f8:	e018      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fc83 	bl	800d208 <USBD_GetConfig>
          break;
 800c902:	e013      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fcb4 	bl	800d274 <USBD_GetStatus>
          break;
 800c90c:	e00e      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fce3 	bl	800d2dc <USBD_SetFeature>
          break;
 800c916:	e009      	b.n	800c92c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fd07 	bl	800d32e <USBD_ClrFeature>
          break;
 800c920:	e004      	b.n	800c92c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fd5e 	bl	800d3e6 <USBD_CtlError>
          break;
 800c92a:	bf00      	nop
      }
      break;
 800c92c:	e004      	b.n	800c938 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fd58 	bl	800d3e6 <USBD_CtlError>
      break;
 800c936:	bf00      	nop
  }

  return ret;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop

0800c944 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c95a:	2b40      	cmp	r3, #64	@ 0x40
 800c95c:	d005      	beq.n	800c96a <USBD_StdItfReq+0x26>
 800c95e:	2b40      	cmp	r3, #64	@ 0x40
 800c960:	d852      	bhi.n	800ca08 <USBD_StdItfReq+0xc4>
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <USBD_StdItfReq+0x26>
 800c966:	2b20      	cmp	r3, #32
 800c968:	d14e      	bne.n	800ca08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c970:	b2db      	uxtb	r3, r3
 800c972:	3b01      	subs	r3, #1
 800c974:	2b02      	cmp	r3, #2
 800c976:	d840      	bhi.n	800c9fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	889b      	ldrh	r3, [r3, #4]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d836      	bhi.n	800c9f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	889b      	ldrh	r3, [r3, #4]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff fedb 	bl	800c746 <USBD_CoreFindIF>
 800c990:	4603      	mov	r3, r0
 800c992:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c994:	7bbb      	ldrb	r3, [r7, #14]
 800c996:	2bff      	cmp	r3, #255	@ 0xff
 800c998:	d01d      	beq.n	800c9d6 <USBD_StdItfReq+0x92>
 800c99a:	7bbb      	ldrb	r3, [r7, #14]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d11a      	bne.n	800c9d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c9a0:	7bba      	ldrb	r2, [r7, #14]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	32ae      	adds	r2, #174	@ 0xae
 800c9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00f      	beq.n	800c9d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c9b0:	7bba      	ldrb	r2, [r7, #14]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c9b8:	7bba      	ldrb	r2, [r7, #14]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32ae      	adds	r2, #174	@ 0xae
 800c9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	4798      	blx	r3
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9ce:	e004      	b.n	800c9da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9d4:	e001      	b.n	800c9da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	88db      	ldrh	r3, [r3, #6]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d110      	bne.n	800ca04 <USBD_StdItfReq+0xc0>
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10d      	bne.n	800ca04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fdd3 	bl	800d594 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9ee:	e009      	b.n	800ca04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fcf7 	bl	800d3e6 <USBD_CtlError>
          break;
 800c9f8:	e004      	b.n	800ca04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fcf2 	bl	800d3e6 <USBD_CtlError>
          break;
 800ca02:	e000      	b.n	800ca06 <USBD_StdItfReq+0xc2>
          break;
 800ca04:	bf00      	nop
      }
      break;
 800ca06:	e004      	b.n	800ca12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fceb 	bl	800d3e6 <USBD_CtlError>
      break;
 800ca10:	bf00      	nop
  }

  return ret;
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	889b      	ldrh	r3, [r3, #4]
 800ca2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca38:	2b40      	cmp	r3, #64	@ 0x40
 800ca3a:	d007      	beq.n	800ca4c <USBD_StdEPReq+0x30>
 800ca3c:	2b40      	cmp	r3, #64	@ 0x40
 800ca3e:	f200 817f 	bhi.w	800cd40 <USBD_StdEPReq+0x324>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d02a      	beq.n	800ca9c <USBD_StdEPReq+0x80>
 800ca46:	2b20      	cmp	r3, #32
 800ca48:	f040 817a 	bne.w	800cd40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff fe85 	bl	800c760 <USBD_CoreFindEP>
 800ca56:	4603      	mov	r3, r0
 800ca58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca5a:	7b7b      	ldrb	r3, [r7, #13]
 800ca5c:	2bff      	cmp	r3, #255	@ 0xff
 800ca5e:	f000 8174 	beq.w	800cd4a <USBD_StdEPReq+0x32e>
 800ca62:	7b7b      	ldrb	r3, [r7, #13]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f040 8170 	bne.w	800cd4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca6a:	7b7a      	ldrb	r2, [r7, #13]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca72:	7b7a      	ldrb	r2, [r7, #13]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	32ae      	adds	r2, #174	@ 0xae
 800ca78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 8163 	beq.w	800cd4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca84:	7b7a      	ldrb	r2, [r7, #13]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	32ae      	adds	r2, #174	@ 0xae
 800ca8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	4798      	blx	r3
 800ca96:	4603      	mov	r3, r0
 800ca98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca9a:	e156      	b.n	800cd4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d008      	beq.n	800cab6 <USBD_StdEPReq+0x9a>
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	f300 8145 	bgt.w	800cd34 <USBD_StdEPReq+0x318>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 809b 	beq.w	800cbe6 <USBD_StdEPReq+0x1ca>
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d03c      	beq.n	800cb2e <USBD_StdEPReq+0x112>
 800cab4:	e13e      	b.n	800cd34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d002      	beq.n	800cac8 <USBD_StdEPReq+0xac>
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d016      	beq.n	800caf4 <USBD_StdEPReq+0xd8>
 800cac6:	e02c      	b.n	800cb22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00d      	beq.n	800caea <USBD_StdEPReq+0xce>
 800cace:	7bbb      	ldrb	r3, [r7, #14]
 800cad0:	2b80      	cmp	r3, #128	@ 0x80
 800cad2:	d00a      	beq.n	800caea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 f949 	bl	800dd70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cade:	2180      	movs	r1, #128	@ 0x80
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 f945 	bl	800dd70 <USBD_LL_StallEP>
 800cae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cae8:	e020      	b.n	800cb2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fc7a 	bl	800d3e6 <USBD_CtlError>
              break;
 800caf2:	e01b      	b.n	800cb2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	885b      	ldrh	r3, [r3, #2]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10e      	bne.n	800cb1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cafc:	7bbb      	ldrb	r3, [r7, #14]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <USBD_StdEPReq+0xfe>
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
 800cb04:	2b80      	cmp	r3, #128	@ 0x80
 800cb06:	d008      	beq.n	800cb1a <USBD_StdEPReq+0xfe>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	88db      	ldrh	r3, [r3, #6]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d104      	bne.n	800cb1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb10:	7bbb      	ldrb	r3, [r7, #14]
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 f92b 	bl	800dd70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fd3a 	bl	800d594 <USBD_CtlSendStatus>

              break;
 800cb20:	e004      	b.n	800cb2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fc5e 	bl	800d3e6 <USBD_CtlError>
              break;
 800cb2a:	bf00      	nop
          }
          break;
 800cb2c:	e107      	b.n	800cd3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d002      	beq.n	800cb40 <USBD_StdEPReq+0x124>
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d016      	beq.n	800cb6c <USBD_StdEPReq+0x150>
 800cb3e:	e04b      	b.n	800cbd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00d      	beq.n	800cb62 <USBD_StdEPReq+0x146>
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b80      	cmp	r3, #128	@ 0x80
 800cb4a:	d00a      	beq.n	800cb62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 f90d 	bl	800dd70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb56:	2180      	movs	r1, #128	@ 0x80
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f001 f909 	bl	800dd70 <USBD_LL_StallEP>
 800cb5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb60:	e040      	b.n	800cbe4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fc3e 	bl	800d3e6 <USBD_CtlError>
              break;
 800cb6a:	e03b      	b.n	800cbe4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	885b      	ldrh	r3, [r3, #2]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d136      	bne.n	800cbe2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d004      	beq.n	800cb88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb7e:	7bbb      	ldrb	r3, [r7, #14]
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 f913 	bl	800ddae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fd03 	bl	800d594 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb8e:	7bbb      	ldrb	r3, [r7, #14]
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff fde4 	bl	800c760 <USBD_CoreFindEP>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb9c:	7b7b      	ldrb	r3, [r7, #13]
 800cb9e:	2bff      	cmp	r3, #255	@ 0xff
 800cba0:	d01f      	beq.n	800cbe2 <USBD_StdEPReq+0x1c6>
 800cba2:	7b7b      	ldrb	r3, [r7, #13]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d11c      	bne.n	800cbe2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cba8:	7b7a      	ldrb	r2, [r7, #13]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cbb0:	7b7a      	ldrb	r2, [r7, #13]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	32ae      	adds	r2, #174	@ 0xae
 800cbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d010      	beq.n	800cbe2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cbc0:	7b7a      	ldrb	r2, [r7, #13]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	32ae      	adds	r2, #174	@ 0xae
 800cbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	4798      	blx	r3
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cbd6:	e004      	b.n	800cbe2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fc03 	bl	800d3e6 <USBD_CtlError>
              break;
 800cbe0:	e000      	b.n	800cbe4 <USBD_StdEPReq+0x1c8>
              break;
 800cbe2:	bf00      	nop
          }
          break;
 800cbe4:	e0ab      	b.n	800cd3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d002      	beq.n	800cbf8 <USBD_StdEPReq+0x1dc>
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d032      	beq.n	800cc5c <USBD_StdEPReq+0x240>
 800cbf6:	e097      	b.n	800cd28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d007      	beq.n	800cc0e <USBD_StdEPReq+0x1f2>
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	2b80      	cmp	r3, #128	@ 0x80
 800cc02:	d004      	beq.n	800cc0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 fbed 	bl	800d3e6 <USBD_CtlError>
                break;
 800cc0c:	e091      	b.n	800cd32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da0b      	bge.n	800cc2e <USBD_StdEPReq+0x212>
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	3310      	adds	r3, #16
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	4413      	add	r3, r2
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	e00b      	b.n	800cc46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc2e:	7bbb      	ldrb	r3, [r7, #14]
 800cc30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	4413      	add	r3, r2
 800cc44:	3304      	adds	r3, #4
 800cc46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2202      	movs	r2, #2
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fc43 	bl	800d4e0 <USBD_CtlSendData>
              break;
 800cc5a:	e06a      	b.n	800cd32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	da11      	bge.n	800cc88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	f003 020f 	and.w	r2, r3, #15
 800cc6a:	6879      	ldr	r1, [r7, #4]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	440b      	add	r3, r1
 800cc76:	3324      	adds	r3, #36	@ 0x24
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d117      	bne.n	800ccae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc7e:	6839      	ldr	r1, [r7, #0]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fbb0 	bl	800d3e6 <USBD_CtlError>
                  break;
 800cc86:	e054      	b.n	800cd32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc88:	7bbb      	ldrb	r3, [r7, #14]
 800cc8a:	f003 020f 	and.w	r2, r3, #15
 800cc8e:	6879      	ldr	r1, [r7, #4]
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	440b      	add	r3, r1
 800cc9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d104      	bne.n	800ccae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fb9d 	bl	800d3e6 <USBD_CtlError>
                  break;
 800ccac:	e041      	b.n	800cd32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	da0b      	bge.n	800ccce <USBD_StdEPReq+0x2b2>
 800ccb6:	7bbb      	ldrb	r3, [r7, #14]
 800ccb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	3310      	adds	r3, #16
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4413      	add	r3, r2
 800ccca:	3304      	adds	r3, #4
 800cccc:	e00b      	b.n	800cce6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
 800ccd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	4413      	add	r3, r2
 800cce4:	3304      	adds	r3, #4
 800cce6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <USBD_StdEPReq+0x2d8>
 800ccee:	7bbb      	ldrb	r3, [r7, #14]
 800ccf0:	2b80      	cmp	r3, #128	@ 0x80
 800ccf2:	d103      	bne.n	800ccfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	e00e      	b.n	800cd1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 f873 	bl	800ddec <USBD_LL_IsStallEP>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	e002      	b.n	800cd1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2200      	movs	r2, #0
 800cd18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fbdd 	bl	800d4e0 <USBD_CtlSendData>
              break;
 800cd26:	e004      	b.n	800cd32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fb5b 	bl	800d3e6 <USBD_CtlError>
              break;
 800cd30:	bf00      	nop
          }
          break;
 800cd32:	e004      	b.n	800cd3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fb55 	bl	800d3e6 <USBD_CtlError>
          break;
 800cd3c:	bf00      	nop
      }
      break;
 800cd3e:	e005      	b.n	800cd4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fb4f 	bl	800d3e6 <USBD_CtlError>
      break;
 800cd48:	e000      	b.n	800cd4c <USBD_StdEPReq+0x330>
      break;
 800cd4a:	bf00      	nop
  }

  return ret;
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	885b      	ldrh	r3, [r3, #2]
 800cd72:	0a1b      	lsrs	r3, r3, #8
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	3b01      	subs	r3, #1
 800cd78:	2b06      	cmp	r3, #6
 800cd7a:	f200 8128 	bhi.w	800cfce <USBD_GetDescriptor+0x276>
 800cd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd84 <USBD_GetDescriptor+0x2c>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cda1 	.word	0x0800cda1
 800cd88:	0800cdb9 	.word	0x0800cdb9
 800cd8c:	0800cdf9 	.word	0x0800cdf9
 800cd90:	0800cfcf 	.word	0x0800cfcf
 800cd94:	0800cfcf 	.word	0x0800cfcf
 800cd98:	0800cf6f 	.word	0x0800cf6f
 800cd9c:	0800cf9b 	.word	0x0800cf9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	7c12      	ldrb	r2, [r2, #16]
 800cdac:	f107 0108 	add.w	r1, r7, #8
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	4798      	blx	r3
 800cdb4:	60f8      	str	r0, [r7, #12]
      break;
 800cdb6:	e112      	b.n	800cfde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	7c1b      	ldrb	r3, [r3, #16]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10d      	bne.n	800cddc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc8:	f107 0208 	add.w	r2, r7, #8
 800cdcc:	4610      	mov	r0, r2
 800cdce:	4798      	blx	r3
 800cdd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdda:	e100      	b.n	800cfde <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde4:	f107 0208 	add.w	r2, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	701a      	strb	r2, [r3, #0]
      break;
 800cdf6:	e0f2      	b.n	800cfde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	885b      	ldrh	r3, [r3, #2]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	2b05      	cmp	r3, #5
 800ce00:	f200 80ac 	bhi.w	800cf5c <USBD_GetDescriptor+0x204>
 800ce04:	a201      	add	r2, pc, #4	@ (adr r2, 800ce0c <USBD_GetDescriptor+0xb4>)
 800ce06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0a:	bf00      	nop
 800ce0c:	0800ce25 	.word	0x0800ce25
 800ce10:	0800ce59 	.word	0x0800ce59
 800ce14:	0800ce8d 	.word	0x0800ce8d
 800ce18:	0800cec1 	.word	0x0800cec1
 800ce1c:	0800cef5 	.word	0x0800cef5
 800ce20:	0800cf29 	.word	0x0800cf29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	7c12      	ldrb	r2, [r2, #16]
 800ce3c:	f107 0108 	add.w	r1, r7, #8
 800ce40:	4610      	mov	r0, r2
 800ce42:	4798      	blx	r3
 800ce44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce46:	e091      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 facb 	bl	800d3e6 <USBD_CtlError>
            err++;
 800ce50:	7afb      	ldrb	r3, [r7, #11]
 800ce52:	3301      	adds	r3, #1
 800ce54:	72fb      	strb	r3, [r7, #11]
          break;
 800ce56:	e089      	b.n	800cf6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00b      	beq.n	800ce7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	7c12      	ldrb	r2, [r2, #16]
 800ce70:	f107 0108 	add.w	r1, r7, #8
 800ce74:	4610      	mov	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce7a:	e077      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fab1 	bl	800d3e6 <USBD_CtlError>
            err++;
 800ce84:	7afb      	ldrb	r3, [r7, #11]
 800ce86:	3301      	adds	r3, #1
 800ce88:	72fb      	strb	r3, [r7, #11]
          break;
 800ce8a:	e06f      	b.n	800cf6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	7c12      	ldrb	r2, [r2, #16]
 800cea4:	f107 0108 	add.w	r1, r7, #8
 800cea8:	4610      	mov	r0, r2
 800ceaa:	4798      	blx	r3
 800ceac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceae:	e05d      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fa97 	bl	800d3e6 <USBD_CtlError>
            err++;
 800ceb8:	7afb      	ldrb	r3, [r7, #11]
 800ceba:	3301      	adds	r3, #1
 800cebc:	72fb      	strb	r3, [r7, #11]
          break;
 800cebe:	e055      	b.n	800cf6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00b      	beq.n	800cee4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	7c12      	ldrb	r2, [r2, #16]
 800ced8:	f107 0108 	add.w	r1, r7, #8
 800cedc:	4610      	mov	r0, r2
 800cede:	4798      	blx	r3
 800cee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cee2:	e043      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fa7d 	bl	800d3e6 <USBD_CtlError>
            err++;
 800ceec:	7afb      	ldrb	r3, [r7, #11]
 800ceee:	3301      	adds	r3, #1
 800cef0:	72fb      	strb	r3, [r7, #11]
          break;
 800cef2:	e03b      	b.n	800cf6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00b      	beq.n	800cf18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	7c12      	ldrb	r2, [r2, #16]
 800cf0c:	f107 0108 	add.w	r1, r7, #8
 800cf10:	4610      	mov	r0, r2
 800cf12:	4798      	blx	r3
 800cf14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf16:	e029      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa63 	bl	800d3e6 <USBD_CtlError>
            err++;
 800cf20:	7afb      	ldrb	r3, [r7, #11]
 800cf22:	3301      	adds	r3, #1
 800cf24:	72fb      	strb	r3, [r7, #11]
          break;
 800cf26:	e021      	b.n	800cf6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	7c12      	ldrb	r2, [r2, #16]
 800cf40:	f107 0108 	add.w	r1, r7, #8
 800cf44:	4610      	mov	r0, r2
 800cf46:	4798      	blx	r3
 800cf48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf4a:	e00f      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fa49 	bl	800d3e6 <USBD_CtlError>
            err++;
 800cf54:	7afb      	ldrb	r3, [r7, #11]
 800cf56:	3301      	adds	r3, #1
 800cf58:	72fb      	strb	r3, [r7, #11]
          break;
 800cf5a:	e007      	b.n	800cf6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fa41 	bl	800d3e6 <USBD_CtlError>
          err++;
 800cf64:	7afb      	ldrb	r3, [r7, #11]
 800cf66:	3301      	adds	r3, #1
 800cf68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf6a:	bf00      	nop
      }
      break;
 800cf6c:	e037      	b.n	800cfde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	7c1b      	ldrb	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d109      	bne.n	800cf8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf7e:	f107 0208 	add.w	r2, r7, #8
 800cf82:	4610      	mov	r0, r2
 800cf84:	4798      	blx	r3
 800cf86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf88:	e029      	b.n	800cfde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fa2a 	bl	800d3e6 <USBD_CtlError>
        err++;
 800cf92:	7afb      	ldrb	r3, [r7, #11]
 800cf94:	3301      	adds	r3, #1
 800cf96:	72fb      	strb	r3, [r7, #11]
      break;
 800cf98:	e021      	b.n	800cfde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7c1b      	ldrb	r3, [r3, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10d      	bne.n	800cfbe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfaa:	f107 0208 	add.w	r2, r7, #8
 800cfae:	4610      	mov	r0, r2
 800cfb0:	4798      	blx	r3
 800cfb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	2207      	movs	r2, #7
 800cfba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfbc:	e00f      	b.n	800cfde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fa10 	bl	800d3e6 <USBD_CtlError>
        err++;
 800cfc6:	7afb      	ldrb	r3, [r7, #11]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	72fb      	strb	r3, [r7, #11]
      break;
 800cfcc:	e007      	b.n	800cfde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fa08 	bl	800d3e6 <USBD_CtlError>
      err++;
 800cfd6:	7afb      	ldrb	r3, [r7, #11]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	72fb      	strb	r3, [r7, #11]
      break;
 800cfdc:	bf00      	nop
  }

  if (err != 0U)
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d11e      	bne.n	800d022 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	88db      	ldrh	r3, [r3, #6]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d016      	beq.n	800d01a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cfec:	893b      	ldrh	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00e      	beq.n	800d010 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	88da      	ldrh	r2, [r3, #6]
 800cff6:	893b      	ldrh	r3, [r7, #8]
 800cff8:	4293      	cmp	r3, r2
 800cffa:	bf28      	it	cs
 800cffc:	4613      	movcs	r3, r2
 800cffe:	b29b      	uxth	r3, r3
 800d000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d002:	893b      	ldrh	r3, [r7, #8]
 800d004:	461a      	mov	r2, r3
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fa69 	bl	800d4e0 <USBD_CtlSendData>
 800d00e:	e009      	b.n	800d024 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f9e7 	bl	800d3e6 <USBD_CtlError>
 800d018:	e004      	b.n	800d024 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 faba 	bl	800d594 <USBD_CtlSendStatus>
 800d020:	e000      	b.n	800d024 <USBD_GetDescriptor+0x2cc>
    return;
 800d022:	bf00      	nop
  }
}
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop

0800d02c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	889b      	ldrh	r3, [r3, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d131      	bne.n	800d0a2 <USBD_SetAddress+0x76>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	88db      	ldrh	r3, [r3, #6]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d12d      	bne.n	800d0a2 <USBD_SetAddress+0x76>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d04c:	d829      	bhi.n	800d0a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	885b      	ldrh	r3, [r3, #2]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b03      	cmp	r3, #3
 800d064:	d104      	bne.n	800d070 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f9bc 	bl	800d3e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d06e:	e01d      	b.n	800d0ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7bfa      	ldrb	r2, [r7, #15]
 800d074:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fee1 	bl	800de44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fa86 	bl	800d594 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d004      	beq.n	800d098 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2202      	movs	r2, #2
 800d092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d096:	e009      	b.n	800d0ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0a0:	e004      	b.n	800d0ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f99e 	bl	800d3e6 <USBD_CtlError>
  }
}
 800d0aa:	bf00      	nop
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	885b      	ldrh	r3, [r3, #2]
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	4b4e      	ldr	r3, [pc, #312]	@ (800d204 <USBD_SetConfig+0x150>)
 800d0ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0cc:	4b4d      	ldr	r3, [pc, #308]	@ (800d204 <USBD_SetConfig+0x150>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d905      	bls.n	800d0e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f985 	bl	800d3e6 <USBD_CtlError>
    return USBD_FAIL;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e08c      	b.n	800d1fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d002      	beq.n	800d0f2 <USBD_SetConfig+0x3e>
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d029      	beq.n	800d144 <USBD_SetConfig+0x90>
 800d0f0:	e075      	b.n	800d1de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0f2:	4b44      	ldr	r3, [pc, #272]	@ (800d204 <USBD_SetConfig+0x150>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d020      	beq.n	800d13c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d0fa:	4b42      	ldr	r3, [pc, #264]	@ (800d204 <USBD_SetConfig+0x150>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d104:	4b3f      	ldr	r3, [pc, #252]	@ (800d204 <USBD_SetConfig+0x150>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7fe ffe3 	bl	800c0d6 <USBD_SetClassConfig>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d008      	beq.n	800d12c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f962 	bl	800d3e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2202      	movs	r2, #2
 800d126:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d12a:	e065      	b.n	800d1f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fa31 	bl	800d594 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2203      	movs	r2, #3
 800d136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d13a:	e05d      	b.n	800d1f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fa29 	bl	800d594 <USBD_CtlSendStatus>
      break;
 800d142:	e059      	b.n	800d1f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d144:	4b2f      	ldr	r3, [pc, #188]	@ (800d204 <USBD_SetConfig+0x150>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d112      	bne.n	800d172 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d154:	4b2b      	ldr	r3, [pc, #172]	@ (800d204 <USBD_SetConfig+0x150>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	461a      	mov	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d15e:	4b29      	ldr	r3, [pc, #164]	@ (800d204 <USBD_SetConfig+0x150>)
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7fe ffd2 	bl	800c10e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fa12 	bl	800d594 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d170:	e042      	b.n	800d1f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d172:	4b24      	ldr	r3, [pc, #144]	@ (800d204 <USBD_SetConfig+0x150>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d02a      	beq.n	800d1d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	4619      	mov	r1, r3
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7fe ffc0 	bl	800c10e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d18e:	4b1d      	ldr	r3, [pc, #116]	@ (800d204 <USBD_SetConfig+0x150>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d198:	4b1a      	ldr	r3, [pc, #104]	@ (800d204 <USBD_SetConfig+0x150>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7fe ff99 	bl	800c0d6 <USBD_SetClassConfig>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00f      	beq.n	800d1ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f918 	bl	800d3e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7fe ffa5 	bl	800c10e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1cc:	e014      	b.n	800d1f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f9e0 	bl	800d594 <USBD_CtlSendStatus>
      break;
 800d1d4:	e010      	b.n	800d1f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f9dc 	bl	800d594 <USBD_CtlSendStatus>
      break;
 800d1dc:	e00c      	b.n	800d1f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f900 	bl	800d3e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1e6:	4b07      	ldr	r3, [pc, #28]	@ (800d204 <USBD_SetConfig+0x150>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7fe ff8e 	bl	800c10e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f6:	bf00      	nop
  }

  return ret;
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20000540 	.word	0x20000540

0800d208 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	88db      	ldrh	r3, [r3, #6]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d004      	beq.n	800d224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f8e2 	bl	800d3e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d222:	e023      	b.n	800d26c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	dc02      	bgt.n	800d236 <USBD_GetConfig+0x2e>
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc03      	bgt.n	800d23c <USBD_GetConfig+0x34>
 800d234:	e015      	b.n	800d262 <USBD_GetConfig+0x5a>
 800d236:	2b03      	cmp	r3, #3
 800d238:	d00b      	beq.n	800d252 <USBD_GetConfig+0x4a>
 800d23a:	e012      	b.n	800d262 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3308      	adds	r3, #8
 800d246:	2201      	movs	r2, #1
 800d248:	4619      	mov	r1, r3
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f948 	bl	800d4e0 <USBD_CtlSendData>
        break;
 800d250:	e00c      	b.n	800d26c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3304      	adds	r3, #4
 800d256:	2201      	movs	r2, #1
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f940 	bl	800d4e0 <USBD_CtlSendData>
        break;
 800d260:	e004      	b.n	800d26c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f8be 	bl	800d3e6 <USBD_CtlError>
        break;
 800d26a:	bf00      	nop
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	3b01      	subs	r3, #1
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d81e      	bhi.n	800d2ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	88db      	ldrh	r3, [r3, #6]
 800d290:	2b02      	cmp	r3, #2
 800d292:	d004      	beq.n	800d29e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f8a5 	bl	800d3e6 <USBD_CtlError>
        break;
 800d29c:	e01a      	b.n	800d2d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	f043 0202 	orr.w	r2, r3, #2
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	330c      	adds	r3, #12
 800d2be:	2202      	movs	r2, #2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f90c 	bl	800d4e0 <USBD_CtlSendData>
      break;
 800d2c8:	e004      	b.n	800d2d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f88a 	bl	800d3e6 <USBD_CtlError>
      break;
 800d2d2:	bf00      	nop
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	885b      	ldrh	r3, [r3, #2]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d107      	bne.n	800d2fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f94c 	bl	800d594 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d2fc:	e013      	b.n	800d326 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	885b      	ldrh	r3, [r3, #2]
 800d302:	2b02      	cmp	r3, #2
 800d304:	d10b      	bne.n	800d31e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	889b      	ldrh	r3, [r3, #4]
 800d30a:	0a1b      	lsrs	r3, r3, #8
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f93c 	bl	800d594 <USBD_CtlSendStatus>
}
 800d31c:	e003      	b.n	800d326 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f860 	bl	800d3e6 <USBD_CtlError>
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	3b01      	subs	r3, #1
 800d342:	2b02      	cmp	r3, #2
 800d344:	d80b      	bhi.n	800d35e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	885b      	ldrh	r3, [r3, #2]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d10c      	bne.n	800d368 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f91c 	bl	800d594 <USBD_CtlSendStatus>
      }
      break;
 800d35c:	e004      	b.n	800d368 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f840 	bl	800d3e6 <USBD_CtlError>
      break;
 800d366:	e000      	b.n	800d36a <USBD_ClrFeature+0x3c>
      break;
 800d368:	bf00      	nop
  }
}
 800d36a:	bf00      	nop
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b084      	sub	sp, #16
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3301      	adds	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3301      	adds	r3, #1
 800d39a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7ff fa40 	bl	800c822 <SWAPBYTE>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7ff fa33 	bl	800c822 <SWAPBYTE>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	461a      	mov	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f7ff fa26 	bl	800c822 <SWAPBYTE>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	461a      	mov	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	80da      	strh	r2, [r3, #6]
}
 800d3de:	bf00      	nop
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3f0:	2180      	movs	r1, #128	@ 0x80
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fcbc 	bl	800dd70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fcb8 	bl	800dd70 <USBD_LL_StallEP>
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d414:	2300      	movs	r3, #0
 800d416:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d042      	beq.n	800d4a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d422:	6938      	ldr	r0, [r7, #16]
 800d424:	f000 f842 	bl	800d4ac <USBD_GetLen>
 800d428:	4603      	mov	r3, r0
 800d42a:	3301      	adds	r3, #1
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d432:	d808      	bhi.n	800d446 <USBD_GetString+0x3e>
 800d434:	6938      	ldr	r0, [r7, #16]
 800d436:	f000 f839 	bl	800d4ac <USBD_GetLen>
 800d43a:	4603      	mov	r3, r0
 800d43c:	3301      	adds	r3, #1
 800d43e:	b29b      	uxth	r3, r3
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	b29a      	uxth	r2, r3
 800d444:	e001      	b.n	800d44a <USBD_GetString+0x42>
 800d446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	4413      	add	r3, r2
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	7812      	ldrb	r2, [r2, #0]
 800d458:	701a      	strb	r2, [r3, #0]
  idx++;
 800d45a:	7dfb      	ldrb	r3, [r7, #23]
 800d45c:	3301      	adds	r3, #1
 800d45e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	4413      	add	r3, r2
 800d466:	2203      	movs	r2, #3
 800d468:	701a      	strb	r2, [r3, #0]
  idx++;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	3301      	adds	r3, #1
 800d46e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d470:	e013      	b.n	800d49a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	4413      	add	r3, r2
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	613b      	str	r3, [r7, #16]
    idx++;
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	3301      	adds	r3, #1
 800d488:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	4413      	add	r3, r2
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
    idx++;
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	3301      	adds	r3, #1
 800d498:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e7      	bne.n	800d472 <USBD_GetString+0x6a>
 800d4a2:	e000      	b.n	800d4a6 <USBD_GetString+0x9e>
    return;
 800d4a4:	bf00      	nop
  }
}
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d4bc:	e005      	b.n	800d4ca <USBD_GetLen+0x1e>
  {
    len++;
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f5      	bne.n	800d4be <USBD_GetLen+0x12>
  }

  return len;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	2100      	movs	r1, #0
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fcbb 	bl	800de82 <USBD_LL_Transmit>

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	2100      	movs	r1, #0
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 fcaa 	bl	800de82 <USBD_LL_Transmit>

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2203      	movs	r2, #3
 800d548:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	2100      	movs	r1, #0
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f000 fcae 	bl	800dec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68ba      	ldr	r2, [r7, #8]
 800d582:	2100      	movs	r1, #0
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 fc9d 	bl	800dec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2204      	movs	r2, #4
 800d5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fc69 	bl	800de82 <USBD_LL_Transmit>

  return USBD_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b082      	sub	sp, #8
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2205      	movs	r2, #5
 800d5c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fc77 	bl	800dec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	4912      	ldr	r1, [pc, #72]	@ (800d630 <MX_USB_DEVICE_Init+0x50>)
 800d5e8:	4812      	ldr	r0, [pc, #72]	@ (800d634 <MX_USB_DEVICE_Init+0x54>)
 800d5ea:	f7fe fcf7 	bl	800bfdc <USBD_Init>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5f4:	f7f4 fafc 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5f8:	490f      	ldr	r1, [pc, #60]	@ (800d638 <MX_USB_DEVICE_Init+0x58>)
 800d5fa:	480e      	ldr	r0, [pc, #56]	@ (800d634 <MX_USB_DEVICE_Init+0x54>)
 800d5fc:	f7fe fd1e 	bl	800c03c <USBD_RegisterClass>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d606:	f7f4 faf3 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d60a:	490c      	ldr	r1, [pc, #48]	@ (800d63c <MX_USB_DEVICE_Init+0x5c>)
 800d60c:	4809      	ldr	r0, [pc, #36]	@ (800d634 <MX_USB_DEVICE_Init+0x54>)
 800d60e:	f7fe fc55 	bl	800bebc <USBD_CDC_RegisterInterface>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d618:	f7f4 faea 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d61c:	4805      	ldr	r0, [pc, #20]	@ (800d634 <MX_USB_DEVICE_Init+0x54>)
 800d61e:	f7fe fd43 	bl	800c0a8 <USBD_Start>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d628:	f7f4 fae2 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d62c:	bf00      	nop
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	200000c4 	.word	0x200000c4
 800d634:	20000544 	.word	0x20000544
 800d638:	20000030 	.word	0x20000030
 800d63c:	200000b0 	.word	0x200000b0

0800d640 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d644:	2200      	movs	r2, #0
 800d646:	4905      	ldr	r1, [pc, #20]	@ (800d65c <CDC_Init_FS+0x1c>)
 800d648:	4805      	ldr	r0, [pc, #20]	@ (800d660 <CDC_Init_FS+0x20>)
 800d64a:	f7fe fc51 	bl	800bef0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d64e:	4905      	ldr	r1, [pc, #20]	@ (800d664 <CDC_Init_FS+0x24>)
 800d650:	4803      	ldr	r0, [pc, #12]	@ (800d660 <CDC_Init_FS+0x20>)
 800d652:	f7fe fc6f 	bl	800bf34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d656:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d658:	4618      	mov	r0, r3
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20001020 	.word	0x20001020
 800d660:	20000544 	.word	0x20000544
 800d664:	20000820 	.word	0x20000820

0800d668 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d66c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d66e:	4618      	mov	r0, r3
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	6039      	str	r1, [r7, #0]
 800d682:	71fb      	strb	r3, [r7, #7]
 800d684:	4613      	mov	r3, r2
 800d686:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d688:	79fb      	ldrb	r3, [r7, #7]
 800d68a:	2b23      	cmp	r3, #35	@ 0x23
 800d68c:	d84a      	bhi.n	800d724 <CDC_Control_FS+0xac>
 800d68e:	a201      	add	r2, pc, #4	@ (adr r2, 800d694 <CDC_Control_FS+0x1c>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d725 	.word	0x0800d725
 800d698:	0800d725 	.word	0x0800d725
 800d69c:	0800d725 	.word	0x0800d725
 800d6a0:	0800d725 	.word	0x0800d725
 800d6a4:	0800d725 	.word	0x0800d725
 800d6a8:	0800d725 	.word	0x0800d725
 800d6ac:	0800d725 	.word	0x0800d725
 800d6b0:	0800d725 	.word	0x0800d725
 800d6b4:	0800d725 	.word	0x0800d725
 800d6b8:	0800d725 	.word	0x0800d725
 800d6bc:	0800d725 	.word	0x0800d725
 800d6c0:	0800d725 	.word	0x0800d725
 800d6c4:	0800d725 	.word	0x0800d725
 800d6c8:	0800d725 	.word	0x0800d725
 800d6cc:	0800d725 	.word	0x0800d725
 800d6d0:	0800d725 	.word	0x0800d725
 800d6d4:	0800d725 	.word	0x0800d725
 800d6d8:	0800d725 	.word	0x0800d725
 800d6dc:	0800d725 	.word	0x0800d725
 800d6e0:	0800d725 	.word	0x0800d725
 800d6e4:	0800d725 	.word	0x0800d725
 800d6e8:	0800d725 	.word	0x0800d725
 800d6ec:	0800d725 	.word	0x0800d725
 800d6f0:	0800d725 	.word	0x0800d725
 800d6f4:	0800d725 	.word	0x0800d725
 800d6f8:	0800d725 	.word	0x0800d725
 800d6fc:	0800d725 	.word	0x0800d725
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d725 	.word	0x0800d725
 800d708:	0800d725 	.word	0x0800d725
 800d70c:	0800d725 	.word	0x0800d725
 800d710:	0800d725 	.word	0x0800d725
 800d714:	0800d725 	.word	0x0800d725
 800d718:	0800d725 	.word	0x0800d725
 800d71c:	0800d725 	.word	0x0800d725
 800d720:	0800d725 	.word	0x0800d725
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d724:	bf00      	nop
  }

  return (USBD_OK);
 800d726:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d73e:	6879      	ldr	r1, [r7, #4]
 800d740:	4805      	ldr	r0, [pc, #20]	@ (800d758 <CDC_Receive_FS+0x24>)
 800d742:	f7fe fbf7 	bl	800bf34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d746:	4804      	ldr	r0, [pc, #16]	@ (800d758 <CDC_Receive_FS+0x24>)
 800d748:	f7fe fc12 	bl	800bf70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d74c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000544 	.word	0x20000544

0800d75c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	4613      	mov	r3, r2
 800d768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d772:	4618      	mov	r0, r3
 800d774:	371c      	adds	r7, #28
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
	...

0800d780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	6039      	str	r1, [r7, #0]
 800d78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2212      	movs	r2, #18
 800d790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d792:	4b03      	ldr	r3, [pc, #12]	@ (800d7a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d794:	4618      	mov	r0, r3
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	200000e0 	.word	0x200000e0

0800d7a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	6039      	str	r1, [r7, #0]
 800d7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7b6:	4b03      	ldr	r3, [pc, #12]	@ (800d7c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	200000f4 	.word	0x200000f4

0800d7c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	4907      	ldr	r1, [pc, #28]	@ (800d7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7de:	4808      	ldr	r0, [pc, #32]	@ (800d800 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e0:	f7ff fe12 	bl	800d408 <USBD_GetString>
 800d7e4:	e004      	b.n	800d7f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4904      	ldr	r1, [pc, #16]	@ (800d7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	@ (800d800 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7ec:	f7ff fe0c 	bl	800d408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7f0:	4b02      	ldr	r3, [pc, #8]	@ (800d7fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20001820 	.word	0x20001820
 800d800:	0801121c 	.word	0x0801121c

0800d804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	6039      	str	r1, [r7, #0]
 800d80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d810:	683a      	ldr	r2, [r7, #0]
 800d812:	4904      	ldr	r1, [pc, #16]	@ (800d824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d814:	4804      	ldr	r0, [pc, #16]	@ (800d828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d816:	f7ff fdf7 	bl	800d408 <USBD_GetString>
  return USBD_StrDesc;
 800d81a:	4b02      	ldr	r3, [pc, #8]	@ (800d824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	20001820 	.word	0x20001820
 800d828:	08011234 	.word	0x08011234

0800d82c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	6039      	str	r1, [r7, #0]
 800d836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	221a      	movs	r2, #26
 800d83c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d83e:	f000 f843 	bl	800d8c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d842:	4b02      	ldr	r3, [pc, #8]	@ (800d84c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	200000f8 	.word	0x200000f8

0800d850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	6039      	str	r1, [r7, #0]
 800d85a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d85c:	79fb      	ldrb	r3, [r7, #7]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d105      	bne.n	800d86e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	4907      	ldr	r1, [pc, #28]	@ (800d884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d866:	4808      	ldr	r0, [pc, #32]	@ (800d888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d868:	f7ff fdce 	bl	800d408 <USBD_GetString>
 800d86c:	e004      	b.n	800d878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4904      	ldr	r1, [pc, #16]	@ (800d884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d872:	4805      	ldr	r0, [pc, #20]	@ (800d888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d874:	f7ff fdc8 	bl	800d408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d878:	4b02      	ldr	r3, [pc, #8]	@ (800d884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20001820 	.word	0x20001820
 800d888:	08011248 	.word	0x08011248

0800d88c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	6039      	str	r1, [r7, #0]
 800d896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d898:	79fb      	ldrb	r3, [r7, #7]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d105      	bne.n	800d8aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	4907      	ldr	r1, [pc, #28]	@ (800d8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8a2:	4808      	ldr	r0, [pc, #32]	@ (800d8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8a4:	f7ff fdb0 	bl	800d408 <USBD_GetString>
 800d8a8:	e004      	b.n	800d8b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4904      	ldr	r1, [pc, #16]	@ (800d8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8ae:	4805      	ldr	r0, [pc, #20]	@ (800d8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8b0:	f7ff fdaa 	bl	800d408 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	20001820 	.word	0x20001820
 800d8c4:	08011254 	.word	0x08011254

0800d8c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d90c <Get_SerialNum+0x44>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d910 <Get_SerialNum+0x48>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8da:	4b0e      	ldr	r3, [pc, #56]	@ (800d914 <Get_SerialNum+0x4c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d009      	beq.n	800d902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8ee:	2208      	movs	r2, #8
 800d8f0:	4909      	ldr	r1, [pc, #36]	@ (800d918 <Get_SerialNum+0x50>)
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 f814 	bl	800d920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	4908      	ldr	r1, [pc, #32]	@ (800d91c <Get_SerialNum+0x54>)
 800d8fc:	68b8      	ldr	r0, [r7, #8]
 800d8fe:	f000 f80f 	bl	800d920 <IntToUnicode>
  }
}
 800d902:	bf00      	nop
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	1fff7a10 	.word	0x1fff7a10
 800d910:	1fff7a14 	.word	0x1fff7a14
 800d914:	1fff7a18 	.word	0x1fff7a18
 800d918:	200000fa 	.word	0x200000fa
 800d91c:	2000010a 	.word	0x2000010a

0800d920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d932:	2300      	movs	r3, #0
 800d934:	75fb      	strb	r3, [r7, #23]
 800d936:	e027      	b.n	800d988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0f1b      	lsrs	r3, r3, #28
 800d93c:	2b09      	cmp	r3, #9
 800d93e:	d80b      	bhi.n	800d958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	0f1b      	lsrs	r3, r3, #28
 800d944:	b2da      	uxtb	r2, r3
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4619      	mov	r1, r3
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	440b      	add	r3, r1
 800d950:	3230      	adds	r2, #48	@ 0x30
 800d952:	b2d2      	uxtb	r2, r2
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	e00a      	b.n	800d96e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	0f1b      	lsrs	r3, r3, #28
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	4619      	mov	r1, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	440b      	add	r3, r1
 800d968:	3237      	adds	r2, #55	@ 0x37
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	3301      	adds	r3, #1
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4413      	add	r3, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	3301      	adds	r3, #1
 800d986:	75fb      	strb	r3, [r7, #23]
 800d988:	7dfa      	ldrb	r2, [r7, #23]
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d3d3      	bcc.n	800d938 <IntToUnicode+0x18>
  }
}
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	371c      	adds	r7, #28
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
	...

0800d9a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08a      	sub	sp, #40	@ 0x28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a8:	f107 0314 	add.w	r3, r7, #20
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	605a      	str	r2, [r3, #4]
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9c0:	d13a      	bne.n	800da38 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	4b1e      	ldr	r3, [pc, #120]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800d9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ca:	4a1d      	ldr	r2, [pc, #116]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800d9cc:	f043 0301 	orr.w	r3, r3, #1
 800d9d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9d2:	4b1b      	ldr	r3, [pc, #108]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	613b      	str	r3, [r7, #16]
 800d9dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d9de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d9e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9f0:	230a      	movs	r3, #10
 800d9f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9f4:	f107 0314 	add.w	r3, r7, #20
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4812      	ldr	r0, [pc, #72]	@ (800da44 <HAL_PCD_MspInit+0xa4>)
 800d9fc:	f7f5 fc1e 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da00:	4b0f      	ldr	r3, [pc, #60]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800da02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da04:	4a0e      	ldr	r2, [pc, #56]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800da06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0a:	6353      	str	r3, [r2, #52]	@ 0x34
 800da0c:	2300      	movs	r3, #0
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800da12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da14:	4a0a      	ldr	r2, [pc, #40]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800da16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da1a:	6453      	str	r3, [r2, #68]	@ 0x44
 800da1c:	4b08      	ldr	r3, [pc, #32]	@ (800da40 <HAL_PCD_MspInit+0xa0>)
 800da1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da24:	60fb      	str	r3, [r7, #12]
 800da26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da28:	2200      	movs	r2, #0
 800da2a:	2100      	movs	r1, #0
 800da2c:	2043      	movs	r0, #67	@ 0x43
 800da2e:	f7f5 f844 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da32:	2043      	movs	r0, #67	@ 0x43
 800da34:	f7f5 f85d 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da38:	bf00      	nop
 800da3a:	3728      	adds	r7, #40	@ 0x28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	40023800 	.word	0x40023800
 800da44:	40020000 	.word	0x40020000

0800da48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7fe fb6f 	bl	800c142 <USBD_LL_SetupStage>
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800da7e:	78fa      	ldrb	r2, [r7, #3]
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	4613      	mov	r3, r2
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	4413      	add	r3, r2
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	440b      	add	r3, r1
 800da8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	78fb      	ldrb	r3, [r7, #3]
 800da94:	4619      	mov	r1, r3
 800da96:	f7fe fba9 	bl	800c1ec <USBD_LL_DataOutStage>
}
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dab4:	78fa      	ldrb	r2, [r7, #3]
 800dab6:	6879      	ldr	r1, [r7, #4]
 800dab8:	4613      	mov	r3, r2
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	4413      	add	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	440b      	add	r3, r1
 800dac2:	3320      	adds	r3, #32
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	78fb      	ldrb	r3, [r7, #3]
 800dac8:	4619      	mov	r1, r3
 800daca:	f7fe fc42 	bl	800c352 <USBD_LL_DataInStage>
}
 800dace:	bf00      	nop
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fd7c 	bl	800c5e2 <USBD_LL_SOF>
}
 800daea:	bf00      	nop
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dafa:	2301      	movs	r3, #1
 800dafc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	79db      	ldrb	r3, [r3, #7]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d001      	beq.n	800db0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db06:	f7f4 f873 	bl	8001bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db10:	7bfa      	ldrb	r2, [r7, #15]
 800db12:	4611      	mov	r1, r2
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe fd20 	bl	800c55a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fcc8 	bl	800c4b6 <USBD_LL_Reset>
}
 800db26:	bf00      	nop
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fd1b 	bl	800c57a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	6812      	ldr	r2, [r2, #0]
 800db52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7adb      	ldrb	r3, [r3, #11]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d005      	beq.n	800db70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db64:	4b04      	ldr	r3, [pc, #16]	@ (800db78 <HAL_PCD_SuspendCallback+0x48>)
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	4a03      	ldr	r2, [pc, #12]	@ (800db78 <HAL_PCD_SuspendCallback+0x48>)
 800db6a:	f043 0306 	orr.w	r3, r3, #6
 800db6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	e000ed00 	.word	0xe000ed00

0800db7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fd11 	bl	800c5b2 <USBD_LL_Resume>
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	460b      	mov	r3, r1
 800dba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbaa:	78fa      	ldrb	r2, [r7, #3]
 800dbac:	4611      	mov	r1, r2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe fd69 	bl	800c686 <USBD_LL_IsoOUTIncomplete>
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbce:	78fa      	ldrb	r2, [r7, #3]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe fd25 	bl	800c622 <USBD_LL_IsoINIncomplete>
}
 800dbd8:	bf00      	nop
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fd7b 	bl	800c6ea <USBD_LL_DevConnected>
}
 800dbf4:	bf00      	nop
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fd78 	bl	800c700 <USBD_LL_DevDisconnected>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d13c      	bne.n	800dca2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc28:	4a20      	ldr	r2, [pc, #128]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a1e      	ldr	r2, [pc, #120]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc34:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc38:	4b1c      	ldr	r3, [pc, #112]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dc40:	4b1a      	ldr	r3, [pc, #104]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc42:	2204      	movs	r2, #4
 800dc44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc46:	4b19      	ldr	r3, [pc, #100]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc48:	2202      	movs	r2, #2
 800dc4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc4c:	4b17      	ldr	r3, [pc, #92]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc52:	4b16      	ldr	r3, [pc, #88]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc54:	2202      	movs	r2, #2
 800dc56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc58:	4b14      	ldr	r3, [pc, #80]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc5e:	4b13      	ldr	r3, [pc, #76]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc64:	4b11      	ldr	r3, [pc, #68]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc6a:	4b10      	ldr	r3, [pc, #64]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc70:	4b0e      	ldr	r3, [pc, #56]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc76:	480d      	ldr	r0, [pc, #52]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc78:	f7f8 fae1 	bl	800623e <HAL_PCD_Init>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dc82:	f7f3 ffb5 	bl	8001bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc86:	2180      	movs	r1, #128	@ 0x80
 800dc88:	4808      	ldr	r0, [pc, #32]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc8a:	f7f9 fd0e 	bl	80076aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc8e:	2240      	movs	r2, #64	@ 0x40
 800dc90:	2100      	movs	r1, #0
 800dc92:	4806      	ldr	r0, [pc, #24]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc94:	f7f9 fcc2 	bl	800761c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc98:	2280      	movs	r2, #128	@ 0x80
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	4803      	ldr	r0, [pc, #12]	@ (800dcac <USBD_LL_Init+0x94>)
 800dc9e:	f7f9 fcbd 	bl	800761c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20001a20 	.word	0x20001a20

0800dcb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7f8 fbc8 	bl	800645c <HAL_PCD_Start>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f942 	bl	800df5c <USBD_Get_USB_Status>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	70fb      	strb	r3, [r7, #3]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	70bb      	strb	r3, [r7, #2]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd0e:	78bb      	ldrb	r3, [r7, #2]
 800dd10:	883a      	ldrh	r2, [r7, #0]
 800dd12:	78f9      	ldrb	r1, [r7, #3]
 800dd14:	f7f9 f89c 	bl	8006e50 <HAL_PCD_EP_Open>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 f91c 	bl	800df5c <USBD_Get_USB_Status>
 800dd24:	4603      	mov	r3, r0
 800dd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd28:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd42:	2300      	movs	r3, #0
 800dd44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd4c:	78fa      	ldrb	r2, [r7, #3]
 800dd4e:	4611      	mov	r1, r2
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f9 f8e7 	bl	8006f24 <HAL_PCD_EP_Close>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 f8fd 	bl	800df5c <USBD_Get_USB_Status>
 800dd62:	4603      	mov	r3, r0
 800dd64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd66:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd8a:	78fa      	ldrb	r2, [r7, #3]
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7f9 f99f 	bl	80070d2 <HAL_PCD_EP_SetStall>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 f8de 	bl	800df5c <USBD_Get_USB_Status>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddc8:	78fa      	ldrb	r2, [r7, #3]
 800ddca:	4611      	mov	r1, r2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f9 f9e3 	bl	8007198 <HAL_PCD_EP_ClrStall>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 f8bf 	bl	800df5c <USBD_Get_USB_Status>
 800ddde:	4603      	mov	r3, r0
 800dde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de04:	2b00      	cmp	r3, #0
 800de06:	da0b      	bge.n	800de20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de08:	78fb      	ldrb	r3, [r7, #3]
 800de0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de0e:	68f9      	ldr	r1, [r7, #12]
 800de10:	4613      	mov	r3, r2
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	3316      	adds	r3, #22
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	e00b      	b.n	800de38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de26:	68f9      	ldr	r1, [r7, #12]
 800de28:	4613      	mov	r3, r2
 800de2a:	00db      	lsls	r3, r3, #3
 800de2c:	4413      	add	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de5e:	78fa      	ldrb	r2, [r7, #3]
 800de60:	4611      	mov	r1, r2
 800de62:	4618      	mov	r0, r3
 800de64:	f7f8 ffd0 	bl	8006e08 <HAL_PCD_SetAddress>
 800de68:	4603      	mov	r3, r0
 800de6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 f874 	bl	800df5c <USBD_Get_USB_Status>
 800de74:	4603      	mov	r3, r0
 800de76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de78:	7bbb      	ldrb	r3, [r7, #14]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b086      	sub	sp, #24
 800de86:	af00      	add	r7, sp, #0
 800de88:	60f8      	str	r0, [r7, #12]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
 800de8e:	460b      	mov	r3, r1
 800de90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dea0:	7af9      	ldrb	r1, [r7, #11]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	f7f9 f8da 	bl	800705e <HAL_PCD_EP_Transmit>
 800deaa:	4603      	mov	r3, r0
 800deac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f000 f853 	bl	800df5c <USBD_Get_USB_Status>
 800deb6:	4603      	mov	r3, r0
 800deb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deba:	7dbb      	ldrb	r3, [r7, #22]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3718      	adds	r7, #24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	607a      	str	r2, [r7, #4]
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	460b      	mov	r3, r1
 800ded2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded8:	2300      	movs	r3, #0
 800deda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dee2:	7af9      	ldrb	r1, [r7, #11]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	f7f9 f866 	bl	8006fb8 <HAL_PCD_EP_Receive>
 800deec:	4603      	mov	r3, r0
 800deee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	4618      	mov	r0, r3
 800def4:	f000 f832 	bl	800df5c <USBD_Get_USB_Status>
 800def8:	4603      	mov	r3, r0
 800defa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800defc:	7dbb      	ldrb	r3, [r7, #22]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3718      	adds	r7, #24
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b082      	sub	sp, #8
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	460b      	mov	r3, r1
 800df10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df18:	78fa      	ldrb	r2, [r7, #3]
 800df1a:	4611      	mov	r1, r2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7f9 f886 	bl	800702e <HAL_PCD_EP_GetRxCount>
 800df22:	4603      	mov	r3, r0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df34:	4b03      	ldr	r3, [pc, #12]	@ (800df44 <USBD_static_malloc+0x18>)
}
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	20001f04 	.word	0x20001f04

0800df48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]

}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	2b03      	cmp	r3, #3
 800df6e:	d817      	bhi.n	800dfa0 <USBD_Get_USB_Status+0x44>
 800df70:	a201      	add	r2, pc, #4	@ (adr r2, 800df78 <USBD_Get_USB_Status+0x1c>)
 800df72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df76:	bf00      	nop
 800df78:	0800df89 	.word	0x0800df89
 800df7c:	0800df8f 	.word	0x0800df8f
 800df80:	0800df95 	.word	0x0800df95
 800df84:	0800df9b 	.word	0x0800df9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	73fb      	strb	r3, [r7, #15]
    break;
 800df8c:	e00b      	b.n	800dfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df8e:	2303      	movs	r3, #3
 800df90:	73fb      	strb	r3, [r7, #15]
    break;
 800df92:	e008      	b.n	800dfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df94:	2301      	movs	r3, #1
 800df96:	73fb      	strb	r3, [r7, #15]
    break;
 800df98:	e005      	b.n	800dfa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df9a:	2303      	movs	r3, #3
 800df9c:	73fb      	strb	r3, [r7, #15]
    break;
 800df9e:	e002      	b.n	800dfa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dfa0:	2303      	movs	r3, #3
 800dfa2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa4:	bf00      	nop
  }
  return usb_status;
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <__cxa_guard_acquire>:
 800dfb4:	6802      	ldr	r2, [r0, #0]
 800dfb6:	07d2      	lsls	r2, r2, #31
 800dfb8:	4603      	mov	r3, r0
 800dfba:	d405      	bmi.n	800dfc8 <__cxa_guard_acquire+0x14>
 800dfbc:	7842      	ldrb	r2, [r0, #1]
 800dfbe:	b102      	cbz	r2, 800dfc2 <__cxa_guard_acquire+0xe>
 800dfc0:	deff      	udf	#255	@ 0xff
 800dfc2:	2001      	movs	r0, #1
 800dfc4:	7058      	strb	r0, [r3, #1]
 800dfc6:	4770      	bx	lr
 800dfc8:	2000      	movs	r0, #0
 800dfca:	4770      	bx	lr

0800dfcc <__cxa_guard_release>:
 800dfcc:	2301      	movs	r3, #1
 800dfce:	6003      	str	r3, [r0, #0]
 800dfd0:	4770      	bx	lr

0800dfd2 <atan2>:
 800dfd2:	f000 b909 	b.w	800e1e8 <__ieee754_atan2>

0800dfd6 <sqrt>:
 800dfd6:	b538      	push	{r3, r4, r5, lr}
 800dfd8:	ed2d 8b02 	vpush	{d8}
 800dfdc:	ec55 4b10 	vmov	r4, r5, d0
 800dfe0:	f000 f826 	bl	800e030 <__ieee754_sqrt>
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	462b      	mov	r3, r5
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4629      	mov	r1, r5
 800dfec:	eeb0 8a40 	vmov.f32	s16, s0
 800dff0:	eef0 8a60 	vmov.f32	s17, s1
 800dff4:	f7f2 fda2 	bl	8000b3c <__aeabi_dcmpun>
 800dff8:	b990      	cbnz	r0, 800e020 <sqrt+0x4a>
 800dffa:	2200      	movs	r2, #0
 800dffc:	2300      	movs	r3, #0
 800dffe:	4620      	mov	r0, r4
 800e000:	4629      	mov	r1, r5
 800e002:	f7f2 fd73 	bl	8000aec <__aeabi_dcmplt>
 800e006:	b158      	cbz	r0, 800e020 <sqrt+0x4a>
 800e008:	f001 fa0a 	bl	800f420 <__errno>
 800e00c:	2321      	movs	r3, #33	@ 0x21
 800e00e:	6003      	str	r3, [r0, #0]
 800e010:	2200      	movs	r2, #0
 800e012:	2300      	movs	r3, #0
 800e014:	4610      	mov	r0, r2
 800e016:	4619      	mov	r1, r3
 800e018:	f7f2 fc20 	bl	800085c <__aeabi_ddiv>
 800e01c:	ec41 0b18 	vmov	d8, r0, r1
 800e020:	eeb0 0a48 	vmov.f32	s0, s16
 800e024:	eef0 0a68 	vmov.f32	s1, s17
 800e028:	ecbd 8b02 	vpop	{d8}
 800e02c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e030 <__ieee754_sqrt>:
 800e030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	4a68      	ldr	r2, [pc, #416]	@ (800e1d8 <__ieee754_sqrt+0x1a8>)
 800e036:	ec55 4b10 	vmov	r4, r5, d0
 800e03a:	43aa      	bics	r2, r5
 800e03c:	462b      	mov	r3, r5
 800e03e:	4621      	mov	r1, r4
 800e040:	d110      	bne.n	800e064 <__ieee754_sqrt+0x34>
 800e042:	4622      	mov	r2, r4
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 fade 	bl	8000608 <__aeabi_dmul>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	4620      	mov	r0, r4
 800e052:	4629      	mov	r1, r5
 800e054:	f7f2 f922 	bl	800029c <__adddf3>
 800e058:	4604      	mov	r4, r0
 800e05a:	460d      	mov	r5, r1
 800e05c:	ec45 4b10 	vmov	d0, r4, r5
 800e060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e064:	2d00      	cmp	r5, #0
 800e066:	dc0e      	bgt.n	800e086 <__ieee754_sqrt+0x56>
 800e068:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e06c:	4322      	orrs	r2, r4
 800e06e:	d0f5      	beq.n	800e05c <__ieee754_sqrt+0x2c>
 800e070:	b19d      	cbz	r5, 800e09a <__ieee754_sqrt+0x6a>
 800e072:	4622      	mov	r2, r4
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 f90e 	bl	8000298 <__aeabi_dsub>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	f7f2 fbec 	bl	800085c <__aeabi_ddiv>
 800e084:	e7e8      	b.n	800e058 <__ieee754_sqrt+0x28>
 800e086:	152a      	asrs	r2, r5, #20
 800e088:	d115      	bne.n	800e0b6 <__ieee754_sqrt+0x86>
 800e08a:	2000      	movs	r0, #0
 800e08c:	e009      	b.n	800e0a2 <__ieee754_sqrt+0x72>
 800e08e:	0acb      	lsrs	r3, r1, #11
 800e090:	3a15      	subs	r2, #21
 800e092:	0549      	lsls	r1, r1, #21
 800e094:	2b00      	cmp	r3, #0
 800e096:	d0fa      	beq.n	800e08e <__ieee754_sqrt+0x5e>
 800e098:	e7f7      	b.n	800e08a <__ieee754_sqrt+0x5a>
 800e09a:	462a      	mov	r2, r5
 800e09c:	e7fa      	b.n	800e094 <__ieee754_sqrt+0x64>
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	02dc      	lsls	r4, r3, #11
 800e0a4:	d5fb      	bpl.n	800e09e <__ieee754_sqrt+0x6e>
 800e0a6:	1e44      	subs	r4, r0, #1
 800e0a8:	1b12      	subs	r2, r2, r4
 800e0aa:	f1c0 0420 	rsb	r4, r0, #32
 800e0ae:	fa21 f404 	lsr.w	r4, r1, r4
 800e0b2:	4323      	orrs	r3, r4
 800e0b4:	4081      	lsls	r1, r0
 800e0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e0be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0c2:	07d2      	lsls	r2, r2, #31
 800e0c4:	bf5c      	itt	pl
 800e0c6:	005b      	lslpl	r3, r3, #1
 800e0c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e0cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0d0:	bf58      	it	pl
 800e0d2:	0049      	lslpl	r1, r1, #1
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e0da:	106d      	asrs	r5, r5, #1
 800e0dc:	0049      	lsls	r1, r1, #1
 800e0de:	2016      	movs	r0, #22
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e0e6:	1917      	adds	r7, r2, r4
 800e0e8:	429f      	cmp	r7, r3
 800e0ea:	bfde      	ittt	le
 800e0ec:	193a      	addle	r2, r7, r4
 800e0ee:	1bdb      	suble	r3, r3, r7
 800e0f0:	1936      	addle	r6, r6, r4
 800e0f2:	0fcf      	lsrs	r7, r1, #31
 800e0f4:	3801      	subs	r0, #1
 800e0f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e0fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e102:	d1f0      	bne.n	800e0e6 <__ieee754_sqrt+0xb6>
 800e104:	4604      	mov	r4, r0
 800e106:	2720      	movs	r7, #32
 800e108:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e10c:	429a      	cmp	r2, r3
 800e10e:	eb00 0e0c 	add.w	lr, r0, ip
 800e112:	db02      	blt.n	800e11a <__ieee754_sqrt+0xea>
 800e114:	d113      	bne.n	800e13e <__ieee754_sqrt+0x10e>
 800e116:	458e      	cmp	lr, r1
 800e118:	d811      	bhi.n	800e13e <__ieee754_sqrt+0x10e>
 800e11a:	f1be 0f00 	cmp.w	lr, #0
 800e11e:	eb0e 000c 	add.w	r0, lr, ip
 800e122:	da42      	bge.n	800e1aa <__ieee754_sqrt+0x17a>
 800e124:	2800      	cmp	r0, #0
 800e126:	db40      	blt.n	800e1aa <__ieee754_sqrt+0x17a>
 800e128:	f102 0801 	add.w	r8, r2, #1
 800e12c:	1a9b      	subs	r3, r3, r2
 800e12e:	458e      	cmp	lr, r1
 800e130:	bf88      	it	hi
 800e132:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e136:	eba1 010e 	sub.w	r1, r1, lr
 800e13a:	4464      	add	r4, ip
 800e13c:	4642      	mov	r2, r8
 800e13e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e142:	3f01      	subs	r7, #1
 800e144:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e148:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e14c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e150:	d1dc      	bne.n	800e10c <__ieee754_sqrt+0xdc>
 800e152:	4319      	orrs	r1, r3
 800e154:	d01b      	beq.n	800e18e <__ieee754_sqrt+0x15e>
 800e156:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e1dc <__ieee754_sqrt+0x1ac>
 800e15a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e1e0 <__ieee754_sqrt+0x1b0>
 800e15e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e162:	e9db 2300 	ldrd	r2, r3, [fp]
 800e166:	f7f2 f897 	bl	8000298 <__aeabi_dsub>
 800e16a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4640      	mov	r0, r8
 800e174:	4649      	mov	r1, r9
 800e176:	f7f2 fcc3 	bl	8000b00 <__aeabi_dcmple>
 800e17a:	b140      	cbz	r0, 800e18e <__ieee754_sqrt+0x15e>
 800e17c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e180:	e9da 0100 	ldrd	r0, r1, [sl]
 800e184:	e9db 2300 	ldrd	r2, r3, [fp]
 800e188:	d111      	bne.n	800e1ae <__ieee754_sqrt+0x17e>
 800e18a:	3601      	adds	r6, #1
 800e18c:	463c      	mov	r4, r7
 800e18e:	1072      	asrs	r2, r6, #1
 800e190:	0863      	lsrs	r3, r4, #1
 800e192:	07f1      	lsls	r1, r6, #31
 800e194:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e198:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e19c:	bf48      	it	mi
 800e19e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e1a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	e756      	b.n	800e058 <__ieee754_sqrt+0x28>
 800e1aa:	4690      	mov	r8, r2
 800e1ac:	e7be      	b.n	800e12c <__ieee754_sqrt+0xfc>
 800e1ae:	f7f2 f875 	bl	800029c <__adddf3>
 800e1b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	4649      	mov	r1, r9
 800e1be:	f7f2 fc95 	bl	8000aec <__aeabi_dcmplt>
 800e1c2:	b120      	cbz	r0, 800e1ce <__ieee754_sqrt+0x19e>
 800e1c4:	1ca0      	adds	r0, r4, #2
 800e1c6:	bf08      	it	eq
 800e1c8:	3601      	addeq	r6, #1
 800e1ca:	3402      	adds	r4, #2
 800e1cc:	e7df      	b.n	800e18e <__ieee754_sqrt+0x15e>
 800e1ce:	1c63      	adds	r3, r4, #1
 800e1d0:	f023 0401 	bic.w	r4, r3, #1
 800e1d4:	e7db      	b.n	800e18e <__ieee754_sqrt+0x15e>
 800e1d6:	bf00      	nop
 800e1d8:	7ff00000 	.word	0x7ff00000
 800e1dc:	20000120 	.word	0x20000120
 800e1e0:	20000118 	.word	0x20000118
 800e1e4:	00000000 	.word	0x00000000

0800e1e8 <__ieee754_atan2>:
 800e1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ec:	ec57 6b11 	vmov	r6, r7, d1
 800e1f0:	4273      	negs	r3, r6
 800e1f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e370 <__ieee754_atan2+0x188>
 800e1f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e1fa:	4333      	orrs	r3, r6
 800e1fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e200:	4543      	cmp	r3, r8
 800e202:	ec51 0b10 	vmov	r0, r1, d0
 800e206:	4635      	mov	r5, r6
 800e208:	d809      	bhi.n	800e21e <__ieee754_atan2+0x36>
 800e20a:	4244      	negs	r4, r0
 800e20c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e210:	4304      	orrs	r4, r0
 800e212:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e216:	4544      	cmp	r4, r8
 800e218:	468e      	mov	lr, r1
 800e21a:	4681      	mov	r9, r0
 800e21c:	d907      	bls.n	800e22e <__ieee754_atan2+0x46>
 800e21e:	4632      	mov	r2, r6
 800e220:	463b      	mov	r3, r7
 800e222:	f7f2 f83b 	bl	800029c <__adddf3>
 800e226:	ec41 0b10 	vmov	d0, r0, r1
 800e22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e232:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e236:	4334      	orrs	r4, r6
 800e238:	d103      	bne.n	800e242 <__ieee754_atan2+0x5a>
 800e23a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e23e:	f000 b89b 	b.w	800e378 <atan>
 800e242:	17bc      	asrs	r4, r7, #30
 800e244:	f004 0402 	and.w	r4, r4, #2
 800e248:	ea53 0909 	orrs.w	r9, r3, r9
 800e24c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e250:	d107      	bne.n	800e262 <__ieee754_atan2+0x7a>
 800e252:	2c02      	cmp	r4, #2
 800e254:	d05f      	beq.n	800e316 <__ieee754_atan2+0x12e>
 800e256:	2c03      	cmp	r4, #3
 800e258:	d1e5      	bne.n	800e226 <__ieee754_atan2+0x3e>
 800e25a:	a141      	add	r1, pc, #260	@ (adr r1, 800e360 <__ieee754_atan2+0x178>)
 800e25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e260:	e7e1      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e262:	4315      	orrs	r5, r2
 800e264:	d106      	bne.n	800e274 <__ieee754_atan2+0x8c>
 800e266:	f1be 0f00 	cmp.w	lr, #0
 800e26a:	da5f      	bge.n	800e32c <__ieee754_atan2+0x144>
 800e26c:	a13e      	add	r1, pc, #248	@ (adr r1, 800e368 <__ieee754_atan2+0x180>)
 800e26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e272:	e7d8      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e274:	4542      	cmp	r2, r8
 800e276:	d10f      	bne.n	800e298 <__ieee754_atan2+0xb0>
 800e278:	4293      	cmp	r3, r2
 800e27a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e27e:	d107      	bne.n	800e290 <__ieee754_atan2+0xa8>
 800e280:	2c02      	cmp	r4, #2
 800e282:	d84c      	bhi.n	800e31e <__ieee754_atan2+0x136>
 800e284:	4b34      	ldr	r3, [pc, #208]	@ (800e358 <__ieee754_atan2+0x170>)
 800e286:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e28a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e28e:	e7ca      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e290:	2c02      	cmp	r4, #2
 800e292:	d848      	bhi.n	800e326 <__ieee754_atan2+0x13e>
 800e294:	4b31      	ldr	r3, [pc, #196]	@ (800e35c <__ieee754_atan2+0x174>)
 800e296:	e7f6      	b.n	800e286 <__ieee754_atan2+0x9e>
 800e298:	4543      	cmp	r3, r8
 800e29a:	d0e4      	beq.n	800e266 <__ieee754_atan2+0x7e>
 800e29c:	1a9b      	subs	r3, r3, r2
 800e29e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e2a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e2a6:	da1e      	bge.n	800e2e6 <__ieee754_atan2+0xfe>
 800e2a8:	2f00      	cmp	r7, #0
 800e2aa:	da01      	bge.n	800e2b0 <__ieee754_atan2+0xc8>
 800e2ac:	323c      	adds	r2, #60	@ 0x3c
 800e2ae:	db1e      	blt.n	800e2ee <__ieee754_atan2+0x106>
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	f7f2 fad2 	bl	800085c <__aeabi_ddiv>
 800e2b8:	ec41 0b10 	vmov	d0, r0, r1
 800e2bc:	f000 f9f4 	bl	800e6a8 <fabs>
 800e2c0:	f000 f85a 	bl	800e378 <atan>
 800e2c4:	ec51 0b10 	vmov	r0, r1, d0
 800e2c8:	2c01      	cmp	r4, #1
 800e2ca:	d013      	beq.n	800e2f4 <__ieee754_atan2+0x10c>
 800e2cc:	2c02      	cmp	r4, #2
 800e2ce:	d015      	beq.n	800e2fc <__ieee754_atan2+0x114>
 800e2d0:	2c00      	cmp	r4, #0
 800e2d2:	d0a8      	beq.n	800e226 <__ieee754_atan2+0x3e>
 800e2d4:	a318      	add	r3, pc, #96	@ (adr r3, 800e338 <__ieee754_atan2+0x150>)
 800e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2da:	f7f1 ffdd 	bl	8000298 <__aeabi_dsub>
 800e2de:	a318      	add	r3, pc, #96	@ (adr r3, 800e340 <__ieee754_atan2+0x158>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	e014      	b.n	800e310 <__ieee754_atan2+0x128>
 800e2e6:	a118      	add	r1, pc, #96	@ (adr r1, 800e348 <__ieee754_atan2+0x160>)
 800e2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ec:	e7ec      	b.n	800e2c8 <__ieee754_atan2+0xe0>
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	e7e9      	b.n	800e2c8 <__ieee754_atan2+0xe0>
 800e2f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	e794      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e2fc:	a30e      	add	r3, pc, #56	@ (adr r3, 800e338 <__ieee754_atan2+0x150>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	f7f1 ffc9 	bl	8000298 <__aeabi_dsub>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e340 <__ieee754_atan2+0x158>)
 800e30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e310:	f7f1 ffc2 	bl	8000298 <__aeabi_dsub>
 800e314:	e787      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e316:	a10a      	add	r1, pc, #40	@ (adr r1, 800e340 <__ieee754_atan2+0x158>)
 800e318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e31c:	e783      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e31e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e350 <__ieee754_atan2+0x168>)
 800e320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e324:	e77f      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e326:	2000      	movs	r0, #0
 800e328:	2100      	movs	r1, #0
 800e32a:	e77c      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e32c:	a106      	add	r1, pc, #24	@ (adr r1, 800e348 <__ieee754_atan2+0x160>)
 800e32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e332:	e778      	b.n	800e226 <__ieee754_atan2+0x3e>
 800e334:	f3af 8000 	nop.w
 800e338:	33145c07 	.word	0x33145c07
 800e33c:	3ca1a626 	.word	0x3ca1a626
 800e340:	54442d18 	.word	0x54442d18
 800e344:	400921fb 	.word	0x400921fb
 800e348:	54442d18 	.word	0x54442d18
 800e34c:	3ff921fb 	.word	0x3ff921fb
 800e350:	54442d18 	.word	0x54442d18
 800e354:	3fe921fb 	.word	0x3fe921fb
 800e358:	080112a0 	.word	0x080112a0
 800e35c:	08011288 	.word	0x08011288
 800e360:	54442d18 	.word	0x54442d18
 800e364:	c00921fb 	.word	0xc00921fb
 800e368:	54442d18 	.word	0x54442d18
 800e36c:	bff921fb 	.word	0xbff921fb
 800e370:	7ff00000 	.word	0x7ff00000
 800e374:	00000000 	.word	0x00000000

0800e378 <atan>:
 800e378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e37c:	ec55 4b10 	vmov	r4, r5, d0
 800e380:	4bbf      	ldr	r3, [pc, #764]	@ (800e680 <atan+0x308>)
 800e382:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e386:	429e      	cmp	r6, r3
 800e388:	46ab      	mov	fp, r5
 800e38a:	d918      	bls.n	800e3be <atan+0x46>
 800e38c:	4bbd      	ldr	r3, [pc, #756]	@ (800e684 <atan+0x30c>)
 800e38e:	429e      	cmp	r6, r3
 800e390:	d801      	bhi.n	800e396 <atan+0x1e>
 800e392:	d109      	bne.n	800e3a8 <atan+0x30>
 800e394:	b144      	cbz	r4, 800e3a8 <atan+0x30>
 800e396:	4622      	mov	r2, r4
 800e398:	462b      	mov	r3, r5
 800e39a:	4620      	mov	r0, r4
 800e39c:	4629      	mov	r1, r5
 800e39e:	f7f1 ff7d 	bl	800029c <__adddf3>
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	460d      	mov	r5, r1
 800e3a6:	e006      	b.n	800e3b6 <atan+0x3e>
 800e3a8:	f1bb 0f00 	cmp.w	fp, #0
 800e3ac:	f340 812b 	ble.w	800e606 <atan+0x28e>
 800e3b0:	a597      	add	r5, pc, #604	@ (adr r5, 800e610 <atan+0x298>)
 800e3b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e3b6:	ec45 4b10 	vmov	d0, r4, r5
 800e3ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	4bb2      	ldr	r3, [pc, #712]	@ (800e688 <atan+0x310>)
 800e3c0:	429e      	cmp	r6, r3
 800e3c2:	d813      	bhi.n	800e3ec <atan+0x74>
 800e3c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e3c8:	429e      	cmp	r6, r3
 800e3ca:	d80c      	bhi.n	800e3e6 <atan+0x6e>
 800e3cc:	a392      	add	r3, pc, #584	@ (adr r3, 800e618 <atan+0x2a0>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	f7f1 ff61 	bl	800029c <__adddf3>
 800e3da:	4bac      	ldr	r3, [pc, #688]	@ (800e68c <atan+0x314>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f7f2 fba3 	bl	8000b28 <__aeabi_dcmpgt>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d1e7      	bne.n	800e3b6 <atan+0x3e>
 800e3e6:	f04f 3aff 	mov.w	sl, #4294967295
 800e3ea:	e029      	b.n	800e440 <atan+0xc8>
 800e3ec:	f000 f95c 	bl	800e6a8 <fabs>
 800e3f0:	4ba7      	ldr	r3, [pc, #668]	@ (800e690 <atan+0x318>)
 800e3f2:	429e      	cmp	r6, r3
 800e3f4:	ec55 4b10 	vmov	r4, r5, d0
 800e3f8:	f200 80bc 	bhi.w	800e574 <atan+0x1fc>
 800e3fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e400:	429e      	cmp	r6, r3
 800e402:	f200 809e 	bhi.w	800e542 <atan+0x1ca>
 800e406:	4622      	mov	r2, r4
 800e408:	462b      	mov	r3, r5
 800e40a:	4620      	mov	r0, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	f7f1 ff45 	bl	800029c <__adddf3>
 800e412:	4b9e      	ldr	r3, [pc, #632]	@ (800e68c <atan+0x314>)
 800e414:	2200      	movs	r2, #0
 800e416:	f7f1 ff3f 	bl	8000298 <__aeabi_dsub>
 800e41a:	2200      	movs	r2, #0
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f1 ff38 	bl	800029c <__adddf3>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	4630      	mov	r0, r6
 800e432:	4639      	mov	r1, r7
 800e434:	f7f2 fa12 	bl	800085c <__aeabi_ddiv>
 800e438:	f04f 0a00 	mov.w	sl, #0
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	4622      	mov	r2, r4
 800e442:	462b      	mov	r3, r5
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7f2 f8de 	bl	8000608 <__aeabi_dmul>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	4680      	mov	r8, r0
 800e452:	4689      	mov	r9, r1
 800e454:	f7f2 f8d8 	bl	8000608 <__aeabi_dmul>
 800e458:	a371      	add	r3, pc, #452	@ (adr r3, 800e620 <atan+0x2a8>)
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	4606      	mov	r6, r0
 800e460:	460f      	mov	r7, r1
 800e462:	f7f2 f8d1 	bl	8000608 <__aeabi_dmul>
 800e466:	a370      	add	r3, pc, #448	@ (adr r3, 800e628 <atan+0x2b0>)
 800e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46c:	f7f1 ff16 	bl	800029c <__adddf3>
 800e470:	4632      	mov	r2, r6
 800e472:	463b      	mov	r3, r7
 800e474:	f7f2 f8c8 	bl	8000608 <__aeabi_dmul>
 800e478:	a36d      	add	r3, pc, #436	@ (adr r3, 800e630 <atan+0x2b8>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	f7f1 ff0d 	bl	800029c <__adddf3>
 800e482:	4632      	mov	r2, r6
 800e484:	463b      	mov	r3, r7
 800e486:	f7f2 f8bf 	bl	8000608 <__aeabi_dmul>
 800e48a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e638 <atan+0x2c0>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f1 ff04 	bl	800029c <__adddf3>
 800e494:	4632      	mov	r2, r6
 800e496:	463b      	mov	r3, r7
 800e498:	f7f2 f8b6 	bl	8000608 <__aeabi_dmul>
 800e49c:	a368      	add	r3, pc, #416	@ (adr r3, 800e640 <atan+0x2c8>)
 800e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a2:	f7f1 fefb 	bl	800029c <__adddf3>
 800e4a6:	4632      	mov	r2, r6
 800e4a8:	463b      	mov	r3, r7
 800e4aa:	f7f2 f8ad 	bl	8000608 <__aeabi_dmul>
 800e4ae:	a366      	add	r3, pc, #408	@ (adr r3, 800e648 <atan+0x2d0>)
 800e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b4:	f7f1 fef2 	bl	800029c <__adddf3>
 800e4b8:	4642      	mov	r2, r8
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	f7f2 f8a4 	bl	8000608 <__aeabi_dmul>
 800e4c0:	a363      	add	r3, pc, #396	@ (adr r3, 800e650 <atan+0x2d8>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	4680      	mov	r8, r0
 800e4c8:	4689      	mov	r9, r1
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	f7f2 f89b 	bl	8000608 <__aeabi_dmul>
 800e4d2:	a361      	add	r3, pc, #388	@ (adr r3, 800e658 <atan+0x2e0>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f7f1 fede 	bl	8000298 <__aeabi_dsub>
 800e4dc:	4632      	mov	r2, r6
 800e4de:	463b      	mov	r3, r7
 800e4e0:	f7f2 f892 	bl	8000608 <__aeabi_dmul>
 800e4e4:	a35e      	add	r3, pc, #376	@ (adr r3, 800e660 <atan+0x2e8>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	f7f1 fed5 	bl	8000298 <__aeabi_dsub>
 800e4ee:	4632      	mov	r2, r6
 800e4f0:	463b      	mov	r3, r7
 800e4f2:	f7f2 f889 	bl	8000608 <__aeabi_dmul>
 800e4f6:	a35c      	add	r3, pc, #368	@ (adr r3, 800e668 <atan+0x2f0>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f1 fecc 	bl	8000298 <__aeabi_dsub>
 800e500:	4632      	mov	r2, r6
 800e502:	463b      	mov	r3, r7
 800e504:	f7f2 f880 	bl	8000608 <__aeabi_dmul>
 800e508:	a359      	add	r3, pc, #356	@ (adr r3, 800e670 <atan+0x2f8>)
 800e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50e:	f7f1 fec3 	bl	8000298 <__aeabi_dsub>
 800e512:	4632      	mov	r2, r6
 800e514:	463b      	mov	r3, r7
 800e516:	f7f2 f877 	bl	8000608 <__aeabi_dmul>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	f7f1 febb 	bl	800029c <__adddf3>
 800e526:	4622      	mov	r2, r4
 800e528:	462b      	mov	r3, r5
 800e52a:	f7f2 f86d 	bl	8000608 <__aeabi_dmul>
 800e52e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	d148      	bne.n	800e5ca <atan+0x252>
 800e538:	4620      	mov	r0, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 feac 	bl	8000298 <__aeabi_dsub>
 800e540:	e72f      	b.n	800e3a2 <atan+0x2a>
 800e542:	4b52      	ldr	r3, [pc, #328]	@ (800e68c <atan+0x314>)
 800e544:	2200      	movs	r2, #0
 800e546:	4620      	mov	r0, r4
 800e548:	4629      	mov	r1, r5
 800e54a:	f7f1 fea5 	bl	8000298 <__aeabi_dsub>
 800e54e:	4b4f      	ldr	r3, [pc, #316]	@ (800e68c <atan+0x314>)
 800e550:	4606      	mov	r6, r0
 800e552:	460f      	mov	r7, r1
 800e554:	2200      	movs	r2, #0
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	f7f1 fe9f 	bl	800029c <__adddf3>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4630      	mov	r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	f7f2 f979 	bl	800085c <__aeabi_ddiv>
 800e56a:	f04f 0a01 	mov.w	sl, #1
 800e56e:	4604      	mov	r4, r0
 800e570:	460d      	mov	r5, r1
 800e572:	e765      	b.n	800e440 <atan+0xc8>
 800e574:	4b47      	ldr	r3, [pc, #284]	@ (800e694 <atan+0x31c>)
 800e576:	429e      	cmp	r6, r3
 800e578:	d21c      	bcs.n	800e5b4 <atan+0x23c>
 800e57a:	4b47      	ldr	r3, [pc, #284]	@ (800e698 <atan+0x320>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	4620      	mov	r0, r4
 800e580:	4629      	mov	r1, r5
 800e582:	f7f1 fe89 	bl	8000298 <__aeabi_dsub>
 800e586:	4b44      	ldr	r3, [pc, #272]	@ (800e698 <atan+0x320>)
 800e588:	4606      	mov	r6, r0
 800e58a:	460f      	mov	r7, r1
 800e58c:	2200      	movs	r2, #0
 800e58e:	4620      	mov	r0, r4
 800e590:	4629      	mov	r1, r5
 800e592:	f7f2 f839 	bl	8000608 <__aeabi_dmul>
 800e596:	4b3d      	ldr	r3, [pc, #244]	@ (800e68c <atan+0x314>)
 800e598:	2200      	movs	r2, #0
 800e59a:	f7f1 fe7f 	bl	800029c <__adddf3>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	4639      	mov	r1, r7
 800e5a6:	f7f2 f959 	bl	800085c <__aeabi_ddiv>
 800e5aa:	f04f 0a02 	mov.w	sl, #2
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	e745      	b.n	800e440 <atan+0xc8>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	4938      	ldr	r1, [pc, #224]	@ (800e69c <atan+0x324>)
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	f7f2 f94e 	bl	800085c <__aeabi_ddiv>
 800e5c0:	f04f 0a03 	mov.w	sl, #3
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	e73a      	b.n	800e440 <atan+0xc8>
 800e5ca:	4b35      	ldr	r3, [pc, #212]	@ (800e6a0 <atan+0x328>)
 800e5cc:	4e35      	ldr	r6, [pc, #212]	@ (800e6a4 <atan+0x32c>)
 800e5ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f1 fe5f 	bl	8000298 <__aeabi_dsub>
 800e5da:	4622      	mov	r2, r4
 800e5dc:	462b      	mov	r3, r5
 800e5de:	f7f1 fe5b 	bl	8000298 <__aeabi_dsub>
 800e5e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e5ee:	f7f1 fe53 	bl	8000298 <__aeabi_dsub>
 800e5f2:	f1bb 0f00 	cmp.w	fp, #0
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	f6bf aedc 	bge.w	800e3b6 <atan+0x3e>
 800e5fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e602:	461d      	mov	r5, r3
 800e604:	e6d7      	b.n	800e3b6 <atan+0x3e>
 800e606:	a51c      	add	r5, pc, #112	@ (adr r5, 800e678 <atan+0x300>)
 800e608:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e60c:	e6d3      	b.n	800e3b6 <atan+0x3e>
 800e60e:	bf00      	nop
 800e610:	54442d18 	.word	0x54442d18
 800e614:	3ff921fb 	.word	0x3ff921fb
 800e618:	8800759c 	.word	0x8800759c
 800e61c:	7e37e43c 	.word	0x7e37e43c
 800e620:	e322da11 	.word	0xe322da11
 800e624:	3f90ad3a 	.word	0x3f90ad3a
 800e628:	24760deb 	.word	0x24760deb
 800e62c:	3fa97b4b 	.word	0x3fa97b4b
 800e630:	a0d03d51 	.word	0xa0d03d51
 800e634:	3fb10d66 	.word	0x3fb10d66
 800e638:	c54c206e 	.word	0xc54c206e
 800e63c:	3fb745cd 	.word	0x3fb745cd
 800e640:	920083ff 	.word	0x920083ff
 800e644:	3fc24924 	.word	0x3fc24924
 800e648:	5555550d 	.word	0x5555550d
 800e64c:	3fd55555 	.word	0x3fd55555
 800e650:	2c6a6c2f 	.word	0x2c6a6c2f
 800e654:	bfa2b444 	.word	0xbfa2b444
 800e658:	52defd9a 	.word	0x52defd9a
 800e65c:	3fadde2d 	.word	0x3fadde2d
 800e660:	af749a6d 	.word	0xaf749a6d
 800e664:	3fb3b0f2 	.word	0x3fb3b0f2
 800e668:	fe231671 	.word	0xfe231671
 800e66c:	3fbc71c6 	.word	0x3fbc71c6
 800e670:	9998ebc4 	.word	0x9998ebc4
 800e674:	3fc99999 	.word	0x3fc99999
 800e678:	54442d18 	.word	0x54442d18
 800e67c:	bff921fb 	.word	0xbff921fb
 800e680:	440fffff 	.word	0x440fffff
 800e684:	7ff00000 	.word	0x7ff00000
 800e688:	3fdbffff 	.word	0x3fdbffff
 800e68c:	3ff00000 	.word	0x3ff00000
 800e690:	3ff2ffff 	.word	0x3ff2ffff
 800e694:	40038000 	.word	0x40038000
 800e698:	3ff80000 	.word	0x3ff80000
 800e69c:	bff00000 	.word	0xbff00000
 800e6a0:	080112b8 	.word	0x080112b8
 800e6a4:	080112d8 	.word	0x080112d8

0800e6a8 <fabs>:
 800e6a8:	ec51 0b10 	vmov	r0, r1, d0
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e6b2:	ec43 2b10 	vmov	d0, r2, r3
 800e6b6:	4770      	bx	lr

0800e6b8 <__cvt>:
 800e6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	ec57 6b10 	vmov	r6, r7, d0
 800e6c0:	2f00      	cmp	r7, #0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	463b      	mov	r3, r7
 800e6c8:	bfbb      	ittet	lt
 800e6ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e6ce:	461f      	movlt	r7, r3
 800e6d0:	2300      	movge	r3, #0
 800e6d2:	232d      	movlt	r3, #45	@ 0x2d
 800e6d4:	700b      	strb	r3, [r1, #0]
 800e6d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e6dc:	4691      	mov	r9, r2
 800e6de:	f023 0820 	bic.w	r8, r3, #32
 800e6e2:	bfbc      	itt	lt
 800e6e4:	4632      	movlt	r2, r6
 800e6e6:	4616      	movlt	r6, r2
 800e6e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6ec:	d005      	beq.n	800e6fa <__cvt+0x42>
 800e6ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e6f2:	d100      	bne.n	800e6f6 <__cvt+0x3e>
 800e6f4:	3401      	adds	r4, #1
 800e6f6:	2102      	movs	r1, #2
 800e6f8:	e000      	b.n	800e6fc <__cvt+0x44>
 800e6fa:	2103      	movs	r1, #3
 800e6fc:	ab03      	add	r3, sp, #12
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	ab02      	add	r3, sp, #8
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	ec47 6b10 	vmov	d0, r6, r7
 800e708:	4653      	mov	r3, sl
 800e70a:	4622      	mov	r2, r4
 800e70c:	f000 ff40 	bl	800f590 <_dtoa_r>
 800e710:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e714:	4605      	mov	r5, r0
 800e716:	d119      	bne.n	800e74c <__cvt+0x94>
 800e718:	f019 0f01 	tst.w	r9, #1
 800e71c:	d00e      	beq.n	800e73c <__cvt+0x84>
 800e71e:	eb00 0904 	add.w	r9, r0, r4
 800e722:	2200      	movs	r2, #0
 800e724:	2300      	movs	r3, #0
 800e726:	4630      	mov	r0, r6
 800e728:	4639      	mov	r1, r7
 800e72a:	f7f2 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800e72e:	b108      	cbz	r0, 800e734 <__cvt+0x7c>
 800e730:	f8cd 900c 	str.w	r9, [sp, #12]
 800e734:	2230      	movs	r2, #48	@ 0x30
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	454b      	cmp	r3, r9
 800e73a:	d31e      	bcc.n	800e77a <__cvt+0xc2>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e740:	1b5b      	subs	r3, r3, r5
 800e742:	4628      	mov	r0, r5
 800e744:	6013      	str	r3, [r2, #0]
 800e746:	b004      	add	sp, #16
 800e748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e750:	eb00 0904 	add.w	r9, r0, r4
 800e754:	d1e5      	bne.n	800e722 <__cvt+0x6a>
 800e756:	7803      	ldrb	r3, [r0, #0]
 800e758:	2b30      	cmp	r3, #48	@ 0x30
 800e75a:	d10a      	bne.n	800e772 <__cvt+0xba>
 800e75c:	2200      	movs	r2, #0
 800e75e:	2300      	movs	r3, #0
 800e760:	4630      	mov	r0, r6
 800e762:	4639      	mov	r1, r7
 800e764:	f7f2 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e768:	b918      	cbnz	r0, 800e772 <__cvt+0xba>
 800e76a:	f1c4 0401 	rsb	r4, r4, #1
 800e76e:	f8ca 4000 	str.w	r4, [sl]
 800e772:	f8da 3000 	ldr.w	r3, [sl]
 800e776:	4499      	add	r9, r3
 800e778:	e7d3      	b.n	800e722 <__cvt+0x6a>
 800e77a:	1c59      	adds	r1, r3, #1
 800e77c:	9103      	str	r1, [sp, #12]
 800e77e:	701a      	strb	r2, [r3, #0]
 800e780:	e7d9      	b.n	800e736 <__cvt+0x7e>

0800e782 <__exponent>:
 800e782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e784:	2900      	cmp	r1, #0
 800e786:	bfba      	itte	lt
 800e788:	4249      	neglt	r1, r1
 800e78a:	232d      	movlt	r3, #45	@ 0x2d
 800e78c:	232b      	movge	r3, #43	@ 0x2b
 800e78e:	2909      	cmp	r1, #9
 800e790:	7002      	strb	r2, [r0, #0]
 800e792:	7043      	strb	r3, [r0, #1]
 800e794:	dd29      	ble.n	800e7ea <__exponent+0x68>
 800e796:	f10d 0307 	add.w	r3, sp, #7
 800e79a:	461d      	mov	r5, r3
 800e79c:	270a      	movs	r7, #10
 800e79e:	461a      	mov	r2, r3
 800e7a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e7a4:	fb07 1416 	mls	r4, r7, r6, r1
 800e7a8:	3430      	adds	r4, #48	@ 0x30
 800e7aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	2c63      	cmp	r4, #99	@ 0x63
 800e7b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	dcf1      	bgt.n	800e79e <__exponent+0x1c>
 800e7ba:	3130      	adds	r1, #48	@ 0x30
 800e7bc:	1e94      	subs	r4, r2, #2
 800e7be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7c2:	1c41      	adds	r1, r0, #1
 800e7c4:	4623      	mov	r3, r4
 800e7c6:	42ab      	cmp	r3, r5
 800e7c8:	d30a      	bcc.n	800e7e0 <__exponent+0x5e>
 800e7ca:	f10d 0309 	add.w	r3, sp, #9
 800e7ce:	1a9b      	subs	r3, r3, r2
 800e7d0:	42ac      	cmp	r4, r5
 800e7d2:	bf88      	it	hi
 800e7d4:	2300      	movhi	r3, #0
 800e7d6:	3302      	adds	r3, #2
 800e7d8:	4403      	add	r3, r0
 800e7da:	1a18      	subs	r0, r3, r0
 800e7dc:	b003      	add	sp, #12
 800e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7e8:	e7ed      	b.n	800e7c6 <__exponent+0x44>
 800e7ea:	2330      	movs	r3, #48	@ 0x30
 800e7ec:	3130      	adds	r1, #48	@ 0x30
 800e7ee:	7083      	strb	r3, [r0, #2]
 800e7f0:	70c1      	strb	r1, [r0, #3]
 800e7f2:	1d03      	adds	r3, r0, #4
 800e7f4:	e7f1      	b.n	800e7da <__exponent+0x58>
	...

0800e7f8 <_printf_float>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	b08d      	sub	sp, #52	@ 0x34
 800e7fe:	460c      	mov	r4, r1
 800e800:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e804:	4616      	mov	r6, r2
 800e806:	461f      	mov	r7, r3
 800e808:	4605      	mov	r5, r0
 800e80a:	f000 fdbf 	bl	800f38c <_localeconv_r>
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	4618      	mov	r0, r3
 800e814:	f7f1 fd34 	bl	8000280 <strlen>
 800e818:	2300      	movs	r3, #0
 800e81a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e81c:	f8d8 3000 	ldr.w	r3, [r8]
 800e820:	9005      	str	r0, [sp, #20]
 800e822:	3307      	adds	r3, #7
 800e824:	f023 0307 	bic.w	r3, r3, #7
 800e828:	f103 0208 	add.w	r2, r3, #8
 800e82c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e830:	f8d4 b000 	ldr.w	fp, [r4]
 800e834:	f8c8 2000 	str.w	r2, [r8]
 800e838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e83c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e840:	9307      	str	r3, [sp, #28]
 800e842:	f8cd 8018 	str.w	r8, [sp, #24]
 800e846:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e84e:	4b9c      	ldr	r3, [pc, #624]	@ (800eac0 <_printf_float+0x2c8>)
 800e850:	f04f 32ff 	mov.w	r2, #4294967295
 800e854:	f7f2 f972 	bl	8000b3c <__aeabi_dcmpun>
 800e858:	bb70      	cbnz	r0, 800e8b8 <_printf_float+0xc0>
 800e85a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e85e:	4b98      	ldr	r3, [pc, #608]	@ (800eac0 <_printf_float+0x2c8>)
 800e860:	f04f 32ff 	mov.w	r2, #4294967295
 800e864:	f7f2 f94c 	bl	8000b00 <__aeabi_dcmple>
 800e868:	bb30      	cbnz	r0, 800e8b8 <_printf_float+0xc0>
 800e86a:	2200      	movs	r2, #0
 800e86c:	2300      	movs	r3, #0
 800e86e:	4640      	mov	r0, r8
 800e870:	4649      	mov	r1, r9
 800e872:	f7f2 f93b 	bl	8000aec <__aeabi_dcmplt>
 800e876:	b110      	cbz	r0, 800e87e <_printf_float+0x86>
 800e878:	232d      	movs	r3, #45	@ 0x2d
 800e87a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e87e:	4a91      	ldr	r2, [pc, #580]	@ (800eac4 <_printf_float+0x2cc>)
 800e880:	4b91      	ldr	r3, [pc, #580]	@ (800eac8 <_printf_float+0x2d0>)
 800e882:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e886:	bf94      	ite	ls
 800e888:	4690      	movls	r8, r2
 800e88a:	4698      	movhi	r8, r3
 800e88c:	2303      	movs	r3, #3
 800e88e:	6123      	str	r3, [r4, #16]
 800e890:	f02b 0304 	bic.w	r3, fp, #4
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	f04f 0900 	mov.w	r9, #0
 800e89a:	9700      	str	r7, [sp, #0]
 800e89c:	4633      	mov	r3, r6
 800e89e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f000 f9d2 	bl	800ec4c <_printf_common>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	f040 808d 	bne.w	800e9c8 <_printf_float+0x1d0>
 800e8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b2:	b00d      	add	sp, #52	@ 0x34
 800e8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b8:	4642      	mov	r2, r8
 800e8ba:	464b      	mov	r3, r9
 800e8bc:	4640      	mov	r0, r8
 800e8be:	4649      	mov	r1, r9
 800e8c0:	f7f2 f93c 	bl	8000b3c <__aeabi_dcmpun>
 800e8c4:	b140      	cbz	r0, 800e8d8 <_printf_float+0xe0>
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bfbc      	itt	lt
 800e8cc:	232d      	movlt	r3, #45	@ 0x2d
 800e8ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e8d2:	4a7e      	ldr	r2, [pc, #504]	@ (800eacc <_printf_float+0x2d4>)
 800e8d4:	4b7e      	ldr	r3, [pc, #504]	@ (800ead0 <_printf_float+0x2d8>)
 800e8d6:	e7d4      	b.n	800e882 <_printf_float+0x8a>
 800e8d8:	6863      	ldr	r3, [r4, #4]
 800e8da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e8de:	9206      	str	r2, [sp, #24]
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	d13b      	bne.n	800e95c <_printf_float+0x164>
 800e8e4:	2306      	movs	r3, #6
 800e8e6:	6063      	str	r3, [r4, #4]
 800e8e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6022      	str	r2, [r4, #0]
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e8f8:	ab09      	add	r3, sp, #36	@ 0x24
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	6861      	ldr	r1, [r4, #4]
 800e8fe:	ec49 8b10 	vmov	d0, r8, r9
 800e902:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e906:	4628      	mov	r0, r5
 800e908:	f7ff fed6 	bl	800e6b8 <__cvt>
 800e90c:	9b06      	ldr	r3, [sp, #24]
 800e90e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e910:	2b47      	cmp	r3, #71	@ 0x47
 800e912:	4680      	mov	r8, r0
 800e914:	d129      	bne.n	800e96a <_printf_float+0x172>
 800e916:	1cc8      	adds	r0, r1, #3
 800e918:	db02      	blt.n	800e920 <_printf_float+0x128>
 800e91a:	6863      	ldr	r3, [r4, #4]
 800e91c:	4299      	cmp	r1, r3
 800e91e:	dd41      	ble.n	800e9a4 <_printf_float+0x1ac>
 800e920:	f1aa 0a02 	sub.w	sl, sl, #2
 800e924:	fa5f fa8a 	uxtb.w	sl, sl
 800e928:	3901      	subs	r1, #1
 800e92a:	4652      	mov	r2, sl
 800e92c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e930:	9109      	str	r1, [sp, #36]	@ 0x24
 800e932:	f7ff ff26 	bl	800e782 <__exponent>
 800e936:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e938:	1813      	adds	r3, r2, r0
 800e93a:	2a01      	cmp	r2, #1
 800e93c:	4681      	mov	r9, r0
 800e93e:	6123      	str	r3, [r4, #16]
 800e940:	dc02      	bgt.n	800e948 <_printf_float+0x150>
 800e942:	6822      	ldr	r2, [r4, #0]
 800e944:	07d2      	lsls	r2, r2, #31
 800e946:	d501      	bpl.n	800e94c <_printf_float+0x154>
 800e948:	3301      	adds	r3, #1
 800e94a:	6123      	str	r3, [r4, #16]
 800e94c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e950:	2b00      	cmp	r3, #0
 800e952:	d0a2      	beq.n	800e89a <_printf_float+0xa2>
 800e954:	232d      	movs	r3, #45	@ 0x2d
 800e956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e95a:	e79e      	b.n	800e89a <_printf_float+0xa2>
 800e95c:	9a06      	ldr	r2, [sp, #24]
 800e95e:	2a47      	cmp	r2, #71	@ 0x47
 800e960:	d1c2      	bne.n	800e8e8 <_printf_float+0xf0>
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1c0      	bne.n	800e8e8 <_printf_float+0xf0>
 800e966:	2301      	movs	r3, #1
 800e968:	e7bd      	b.n	800e8e6 <_printf_float+0xee>
 800e96a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e96e:	d9db      	bls.n	800e928 <_printf_float+0x130>
 800e970:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e974:	d118      	bne.n	800e9a8 <_printf_float+0x1b0>
 800e976:	2900      	cmp	r1, #0
 800e978:	6863      	ldr	r3, [r4, #4]
 800e97a:	dd0b      	ble.n	800e994 <_printf_float+0x19c>
 800e97c:	6121      	str	r1, [r4, #16]
 800e97e:	b913      	cbnz	r3, 800e986 <_printf_float+0x18e>
 800e980:	6822      	ldr	r2, [r4, #0]
 800e982:	07d0      	lsls	r0, r2, #31
 800e984:	d502      	bpl.n	800e98c <_printf_float+0x194>
 800e986:	3301      	adds	r3, #1
 800e988:	440b      	add	r3, r1
 800e98a:	6123      	str	r3, [r4, #16]
 800e98c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e98e:	f04f 0900 	mov.w	r9, #0
 800e992:	e7db      	b.n	800e94c <_printf_float+0x154>
 800e994:	b913      	cbnz	r3, 800e99c <_printf_float+0x1a4>
 800e996:	6822      	ldr	r2, [r4, #0]
 800e998:	07d2      	lsls	r2, r2, #31
 800e99a:	d501      	bpl.n	800e9a0 <_printf_float+0x1a8>
 800e99c:	3302      	adds	r3, #2
 800e99e:	e7f4      	b.n	800e98a <_printf_float+0x192>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e7f2      	b.n	800e98a <_printf_float+0x192>
 800e9a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9aa:	4299      	cmp	r1, r3
 800e9ac:	db05      	blt.n	800e9ba <_printf_float+0x1c2>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	6121      	str	r1, [r4, #16]
 800e9b2:	07d8      	lsls	r0, r3, #31
 800e9b4:	d5ea      	bpl.n	800e98c <_printf_float+0x194>
 800e9b6:	1c4b      	adds	r3, r1, #1
 800e9b8:	e7e7      	b.n	800e98a <_printf_float+0x192>
 800e9ba:	2900      	cmp	r1, #0
 800e9bc:	bfd4      	ite	le
 800e9be:	f1c1 0202 	rsble	r2, r1, #2
 800e9c2:	2201      	movgt	r2, #1
 800e9c4:	4413      	add	r3, r2
 800e9c6:	e7e0      	b.n	800e98a <_printf_float+0x192>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	055a      	lsls	r2, r3, #21
 800e9cc:	d407      	bmi.n	800e9de <_printf_float+0x1e6>
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	4642      	mov	r2, r8
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	47b8      	blx	r7
 800e9d8:	3001      	adds	r0, #1
 800e9da:	d12b      	bne.n	800ea34 <_printf_float+0x23c>
 800e9dc:	e767      	b.n	800e8ae <_printf_float+0xb6>
 800e9de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9e2:	f240 80dd 	bls.w	800eba0 <_printf_float+0x3a8>
 800e9e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f7f2 f873 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d033      	beq.n	800ea5e <_printf_float+0x266>
 800e9f6:	4a37      	ldr	r2, [pc, #220]	@ (800ead4 <_printf_float+0x2dc>)
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	47b8      	blx	r7
 800ea00:	3001      	adds	r0, #1
 800ea02:	f43f af54 	beq.w	800e8ae <_printf_float+0xb6>
 800ea06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea0a:	4543      	cmp	r3, r8
 800ea0c:	db02      	blt.n	800ea14 <_printf_float+0x21c>
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	07d8      	lsls	r0, r3, #31
 800ea12:	d50f      	bpl.n	800ea34 <_printf_float+0x23c>
 800ea14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea18:	4631      	mov	r1, r6
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	47b8      	blx	r7
 800ea1e:	3001      	adds	r0, #1
 800ea20:	f43f af45 	beq.w	800e8ae <_printf_float+0xb6>
 800ea24:	f04f 0900 	mov.w	r9, #0
 800ea28:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea2c:	f104 0a1a 	add.w	sl, r4, #26
 800ea30:	45c8      	cmp	r8, r9
 800ea32:	dc09      	bgt.n	800ea48 <_printf_float+0x250>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	079b      	lsls	r3, r3, #30
 800ea38:	f100 8103 	bmi.w	800ec42 <_printf_float+0x44a>
 800ea3c:	68e0      	ldr	r0, [r4, #12]
 800ea3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea40:	4298      	cmp	r0, r3
 800ea42:	bfb8      	it	lt
 800ea44:	4618      	movlt	r0, r3
 800ea46:	e734      	b.n	800e8b2 <_printf_float+0xba>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	4652      	mov	r2, sl
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4628      	mov	r0, r5
 800ea50:	47b8      	blx	r7
 800ea52:	3001      	adds	r0, #1
 800ea54:	f43f af2b 	beq.w	800e8ae <_printf_float+0xb6>
 800ea58:	f109 0901 	add.w	r9, r9, #1
 800ea5c:	e7e8      	b.n	800ea30 <_printf_float+0x238>
 800ea5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	dc39      	bgt.n	800ead8 <_printf_float+0x2e0>
 800ea64:	4a1b      	ldr	r2, [pc, #108]	@ (800ead4 <_printf_float+0x2dc>)
 800ea66:	2301      	movs	r3, #1
 800ea68:	4631      	mov	r1, r6
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b8      	blx	r7
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f43f af1d 	beq.w	800e8ae <_printf_float+0xb6>
 800ea74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea78:	ea59 0303 	orrs.w	r3, r9, r3
 800ea7c:	d102      	bne.n	800ea84 <_printf_float+0x28c>
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	07d9      	lsls	r1, r3, #31
 800ea82:	d5d7      	bpl.n	800ea34 <_printf_float+0x23c>
 800ea84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea88:	4631      	mov	r1, r6
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	47b8      	blx	r7
 800ea8e:	3001      	adds	r0, #1
 800ea90:	f43f af0d 	beq.w	800e8ae <_printf_float+0xb6>
 800ea94:	f04f 0a00 	mov.w	sl, #0
 800ea98:	f104 0b1a 	add.w	fp, r4, #26
 800ea9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea9e:	425b      	negs	r3, r3
 800eaa0:	4553      	cmp	r3, sl
 800eaa2:	dc01      	bgt.n	800eaa8 <_printf_float+0x2b0>
 800eaa4:	464b      	mov	r3, r9
 800eaa6:	e793      	b.n	800e9d0 <_printf_float+0x1d8>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	465a      	mov	r2, fp
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	f43f aefb 	beq.w	800e8ae <_printf_float+0xb6>
 800eab8:	f10a 0a01 	add.w	sl, sl, #1
 800eabc:	e7ee      	b.n	800ea9c <_printf_float+0x2a4>
 800eabe:	bf00      	nop
 800eac0:	7fefffff 	.word	0x7fefffff
 800eac4:	080112f8 	.word	0x080112f8
 800eac8:	080112fc 	.word	0x080112fc
 800eacc:	08011300 	.word	0x08011300
 800ead0:	08011304 	.word	0x08011304
 800ead4:	08011308 	.word	0x08011308
 800ead8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eada:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eade:	4553      	cmp	r3, sl
 800eae0:	bfa8      	it	ge
 800eae2:	4653      	movge	r3, sl
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	4699      	mov	r9, r3
 800eae8:	dc36      	bgt.n	800eb58 <_printf_float+0x360>
 800eaea:	f04f 0b00 	mov.w	fp, #0
 800eaee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaf2:	f104 021a 	add.w	r2, r4, #26
 800eaf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eaf8:	9306      	str	r3, [sp, #24]
 800eafa:	eba3 0309 	sub.w	r3, r3, r9
 800eafe:	455b      	cmp	r3, fp
 800eb00:	dc31      	bgt.n	800eb66 <_printf_float+0x36e>
 800eb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb04:	459a      	cmp	sl, r3
 800eb06:	dc3a      	bgt.n	800eb7e <_printf_float+0x386>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	07da      	lsls	r2, r3, #31
 800eb0c:	d437      	bmi.n	800eb7e <_printf_float+0x386>
 800eb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb10:	ebaa 0903 	sub.w	r9, sl, r3
 800eb14:	9b06      	ldr	r3, [sp, #24]
 800eb16:	ebaa 0303 	sub.w	r3, sl, r3
 800eb1a:	4599      	cmp	r9, r3
 800eb1c:	bfa8      	it	ge
 800eb1e:	4699      	movge	r9, r3
 800eb20:	f1b9 0f00 	cmp.w	r9, #0
 800eb24:	dc33      	bgt.n	800eb8e <_printf_float+0x396>
 800eb26:	f04f 0800 	mov.w	r8, #0
 800eb2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb2e:	f104 0b1a 	add.w	fp, r4, #26
 800eb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb34:	ebaa 0303 	sub.w	r3, sl, r3
 800eb38:	eba3 0309 	sub.w	r3, r3, r9
 800eb3c:	4543      	cmp	r3, r8
 800eb3e:	f77f af79 	ble.w	800ea34 <_printf_float+0x23c>
 800eb42:	2301      	movs	r3, #1
 800eb44:	465a      	mov	r2, fp
 800eb46:	4631      	mov	r1, r6
 800eb48:	4628      	mov	r0, r5
 800eb4a:	47b8      	blx	r7
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	f43f aeae 	beq.w	800e8ae <_printf_float+0xb6>
 800eb52:	f108 0801 	add.w	r8, r8, #1
 800eb56:	e7ec      	b.n	800eb32 <_printf_float+0x33a>
 800eb58:	4642      	mov	r2, r8
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	47b8      	blx	r7
 800eb60:	3001      	adds	r0, #1
 800eb62:	d1c2      	bne.n	800eaea <_printf_float+0x2f2>
 800eb64:	e6a3      	b.n	800e8ae <_printf_float+0xb6>
 800eb66:	2301      	movs	r3, #1
 800eb68:	4631      	mov	r1, r6
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	9206      	str	r2, [sp, #24]
 800eb6e:	47b8      	blx	r7
 800eb70:	3001      	adds	r0, #1
 800eb72:	f43f ae9c 	beq.w	800e8ae <_printf_float+0xb6>
 800eb76:	9a06      	ldr	r2, [sp, #24]
 800eb78:	f10b 0b01 	add.w	fp, fp, #1
 800eb7c:	e7bb      	b.n	800eaf6 <_printf_float+0x2fe>
 800eb7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb82:	4631      	mov	r1, r6
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b8      	blx	r7
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d1c0      	bne.n	800eb0e <_printf_float+0x316>
 800eb8c:	e68f      	b.n	800e8ae <_printf_float+0xb6>
 800eb8e:	9a06      	ldr	r2, [sp, #24]
 800eb90:	464b      	mov	r3, r9
 800eb92:	4442      	add	r2, r8
 800eb94:	4631      	mov	r1, r6
 800eb96:	4628      	mov	r0, r5
 800eb98:	47b8      	blx	r7
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d1c3      	bne.n	800eb26 <_printf_float+0x32e>
 800eb9e:	e686      	b.n	800e8ae <_printf_float+0xb6>
 800eba0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eba4:	f1ba 0f01 	cmp.w	sl, #1
 800eba8:	dc01      	bgt.n	800ebae <_printf_float+0x3b6>
 800ebaa:	07db      	lsls	r3, r3, #31
 800ebac:	d536      	bpl.n	800ec1c <_printf_float+0x424>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	47b8      	blx	r7
 800ebb8:	3001      	adds	r0, #1
 800ebba:	f43f ae78 	beq.w	800e8ae <_printf_float+0xb6>
 800ebbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	47b8      	blx	r7
 800ebc8:	3001      	adds	r0, #1
 800ebca:	f43f ae70 	beq.w	800e8ae <_printf_float+0xb6>
 800ebce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebda:	f7f1 ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebde:	b9c0      	cbnz	r0, 800ec12 <_printf_float+0x41a>
 800ebe0:	4653      	mov	r3, sl
 800ebe2:	f108 0201 	add.w	r2, r8, #1
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b8      	blx	r7
 800ebec:	3001      	adds	r0, #1
 800ebee:	d10c      	bne.n	800ec0a <_printf_float+0x412>
 800ebf0:	e65d      	b.n	800e8ae <_printf_float+0xb6>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	465a      	mov	r2, fp
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f ae56 	beq.w	800e8ae <_printf_float+0xb6>
 800ec02:	f108 0801 	add.w	r8, r8, #1
 800ec06:	45d0      	cmp	r8, sl
 800ec08:	dbf3      	blt.n	800ebf2 <_printf_float+0x3fa>
 800ec0a:	464b      	mov	r3, r9
 800ec0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec10:	e6df      	b.n	800e9d2 <_printf_float+0x1da>
 800ec12:	f04f 0800 	mov.w	r8, #0
 800ec16:	f104 0b1a 	add.w	fp, r4, #26
 800ec1a:	e7f4      	b.n	800ec06 <_printf_float+0x40e>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	4642      	mov	r2, r8
 800ec20:	e7e1      	b.n	800ebe6 <_printf_float+0x3ee>
 800ec22:	2301      	movs	r3, #1
 800ec24:	464a      	mov	r2, r9
 800ec26:	4631      	mov	r1, r6
 800ec28:	4628      	mov	r0, r5
 800ec2a:	47b8      	blx	r7
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	f43f ae3e 	beq.w	800e8ae <_printf_float+0xb6>
 800ec32:	f108 0801 	add.w	r8, r8, #1
 800ec36:	68e3      	ldr	r3, [r4, #12]
 800ec38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec3a:	1a5b      	subs	r3, r3, r1
 800ec3c:	4543      	cmp	r3, r8
 800ec3e:	dcf0      	bgt.n	800ec22 <_printf_float+0x42a>
 800ec40:	e6fc      	b.n	800ea3c <_printf_float+0x244>
 800ec42:	f04f 0800 	mov.w	r8, #0
 800ec46:	f104 0919 	add.w	r9, r4, #25
 800ec4a:	e7f4      	b.n	800ec36 <_printf_float+0x43e>

0800ec4c <_printf_common>:
 800ec4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec50:	4616      	mov	r6, r2
 800ec52:	4698      	mov	r8, r3
 800ec54:	688a      	ldr	r2, [r1, #8]
 800ec56:	690b      	ldr	r3, [r1, #16]
 800ec58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	bfb8      	it	lt
 800ec60:	4613      	movlt	r3, r2
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec68:	4607      	mov	r7, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	b10a      	cbz	r2, 800ec72 <_printf_common+0x26>
 800ec6e:	3301      	adds	r3, #1
 800ec70:	6033      	str	r3, [r6, #0]
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	0699      	lsls	r1, r3, #26
 800ec76:	bf42      	ittt	mi
 800ec78:	6833      	ldrmi	r3, [r6, #0]
 800ec7a:	3302      	addmi	r3, #2
 800ec7c:	6033      	strmi	r3, [r6, #0]
 800ec7e:	6825      	ldr	r5, [r4, #0]
 800ec80:	f015 0506 	ands.w	r5, r5, #6
 800ec84:	d106      	bne.n	800ec94 <_printf_common+0x48>
 800ec86:	f104 0a19 	add.w	sl, r4, #25
 800ec8a:	68e3      	ldr	r3, [r4, #12]
 800ec8c:	6832      	ldr	r2, [r6, #0]
 800ec8e:	1a9b      	subs	r3, r3, r2
 800ec90:	42ab      	cmp	r3, r5
 800ec92:	dc26      	bgt.n	800ece2 <_printf_common+0x96>
 800ec94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec98:	6822      	ldr	r2, [r4, #0]
 800ec9a:	3b00      	subs	r3, #0
 800ec9c:	bf18      	it	ne
 800ec9e:	2301      	movne	r3, #1
 800eca0:	0692      	lsls	r2, r2, #26
 800eca2:	d42b      	bmi.n	800ecfc <_printf_common+0xb0>
 800eca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eca8:	4641      	mov	r1, r8
 800ecaa:	4638      	mov	r0, r7
 800ecac:	47c8      	blx	r9
 800ecae:	3001      	adds	r0, #1
 800ecb0:	d01e      	beq.n	800ecf0 <_printf_common+0xa4>
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	6922      	ldr	r2, [r4, #16]
 800ecb6:	f003 0306 	and.w	r3, r3, #6
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	bf02      	ittt	eq
 800ecbe:	68e5      	ldreq	r5, [r4, #12]
 800ecc0:	6833      	ldreq	r3, [r6, #0]
 800ecc2:	1aed      	subeq	r5, r5, r3
 800ecc4:	68a3      	ldr	r3, [r4, #8]
 800ecc6:	bf0c      	ite	eq
 800ecc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eccc:	2500      	movne	r5, #0
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	bfc4      	itt	gt
 800ecd2:	1a9b      	subgt	r3, r3, r2
 800ecd4:	18ed      	addgt	r5, r5, r3
 800ecd6:	2600      	movs	r6, #0
 800ecd8:	341a      	adds	r4, #26
 800ecda:	42b5      	cmp	r5, r6
 800ecdc:	d11a      	bne.n	800ed14 <_printf_common+0xc8>
 800ecde:	2000      	movs	r0, #0
 800ece0:	e008      	b.n	800ecf4 <_printf_common+0xa8>
 800ece2:	2301      	movs	r3, #1
 800ece4:	4652      	mov	r2, sl
 800ece6:	4641      	mov	r1, r8
 800ece8:	4638      	mov	r0, r7
 800ecea:	47c8      	blx	r9
 800ecec:	3001      	adds	r0, #1
 800ecee:	d103      	bne.n	800ecf8 <_printf_common+0xac>
 800ecf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf8:	3501      	adds	r5, #1
 800ecfa:	e7c6      	b.n	800ec8a <_printf_common+0x3e>
 800ecfc:	18e1      	adds	r1, r4, r3
 800ecfe:	1c5a      	adds	r2, r3, #1
 800ed00:	2030      	movs	r0, #48	@ 0x30
 800ed02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed06:	4422      	add	r2, r4
 800ed08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed10:	3302      	adds	r3, #2
 800ed12:	e7c7      	b.n	800eca4 <_printf_common+0x58>
 800ed14:	2301      	movs	r3, #1
 800ed16:	4622      	mov	r2, r4
 800ed18:	4641      	mov	r1, r8
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	47c8      	blx	r9
 800ed1e:	3001      	adds	r0, #1
 800ed20:	d0e6      	beq.n	800ecf0 <_printf_common+0xa4>
 800ed22:	3601      	adds	r6, #1
 800ed24:	e7d9      	b.n	800ecda <_printf_common+0x8e>
	...

0800ed28 <_printf_i>:
 800ed28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	7e0f      	ldrb	r7, [r1, #24]
 800ed2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed30:	2f78      	cmp	r7, #120	@ 0x78
 800ed32:	4691      	mov	r9, r2
 800ed34:	4680      	mov	r8, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	469a      	mov	sl, r3
 800ed3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed3e:	d807      	bhi.n	800ed50 <_printf_i+0x28>
 800ed40:	2f62      	cmp	r7, #98	@ 0x62
 800ed42:	d80a      	bhi.n	800ed5a <_printf_i+0x32>
 800ed44:	2f00      	cmp	r7, #0
 800ed46:	f000 80d2 	beq.w	800eeee <_printf_i+0x1c6>
 800ed4a:	2f58      	cmp	r7, #88	@ 0x58
 800ed4c:	f000 80b9 	beq.w	800eec2 <_printf_i+0x19a>
 800ed50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed58:	e03a      	b.n	800edd0 <_printf_i+0xa8>
 800ed5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed5e:	2b15      	cmp	r3, #21
 800ed60:	d8f6      	bhi.n	800ed50 <_printf_i+0x28>
 800ed62:	a101      	add	r1, pc, #4	@ (adr r1, 800ed68 <_printf_i+0x40>)
 800ed64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed68:	0800edc1 	.word	0x0800edc1
 800ed6c:	0800edd5 	.word	0x0800edd5
 800ed70:	0800ed51 	.word	0x0800ed51
 800ed74:	0800ed51 	.word	0x0800ed51
 800ed78:	0800ed51 	.word	0x0800ed51
 800ed7c:	0800ed51 	.word	0x0800ed51
 800ed80:	0800edd5 	.word	0x0800edd5
 800ed84:	0800ed51 	.word	0x0800ed51
 800ed88:	0800ed51 	.word	0x0800ed51
 800ed8c:	0800ed51 	.word	0x0800ed51
 800ed90:	0800ed51 	.word	0x0800ed51
 800ed94:	0800eed5 	.word	0x0800eed5
 800ed98:	0800edff 	.word	0x0800edff
 800ed9c:	0800ee8f 	.word	0x0800ee8f
 800eda0:	0800ed51 	.word	0x0800ed51
 800eda4:	0800ed51 	.word	0x0800ed51
 800eda8:	0800eef7 	.word	0x0800eef7
 800edac:	0800ed51 	.word	0x0800ed51
 800edb0:	0800edff 	.word	0x0800edff
 800edb4:	0800ed51 	.word	0x0800ed51
 800edb8:	0800ed51 	.word	0x0800ed51
 800edbc:	0800ee97 	.word	0x0800ee97
 800edc0:	6833      	ldr	r3, [r6, #0]
 800edc2:	1d1a      	adds	r2, r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6032      	str	r2, [r6, #0]
 800edc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edd0:	2301      	movs	r3, #1
 800edd2:	e09d      	b.n	800ef10 <_printf_i+0x1e8>
 800edd4:	6833      	ldr	r3, [r6, #0]
 800edd6:	6820      	ldr	r0, [r4, #0]
 800edd8:	1d19      	adds	r1, r3, #4
 800edda:	6031      	str	r1, [r6, #0]
 800eddc:	0606      	lsls	r6, r0, #24
 800edde:	d501      	bpl.n	800ede4 <_printf_i+0xbc>
 800ede0:	681d      	ldr	r5, [r3, #0]
 800ede2:	e003      	b.n	800edec <_printf_i+0xc4>
 800ede4:	0645      	lsls	r5, r0, #25
 800ede6:	d5fb      	bpl.n	800ede0 <_printf_i+0xb8>
 800ede8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edec:	2d00      	cmp	r5, #0
 800edee:	da03      	bge.n	800edf8 <_printf_i+0xd0>
 800edf0:	232d      	movs	r3, #45	@ 0x2d
 800edf2:	426d      	negs	r5, r5
 800edf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf8:	4859      	ldr	r0, [pc, #356]	@ (800ef60 <_printf_i+0x238>)
 800edfa:	230a      	movs	r3, #10
 800edfc:	e011      	b.n	800ee22 <_printf_i+0xfa>
 800edfe:	6821      	ldr	r1, [r4, #0]
 800ee00:	6833      	ldr	r3, [r6, #0]
 800ee02:	0608      	lsls	r0, r1, #24
 800ee04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee08:	d402      	bmi.n	800ee10 <_printf_i+0xe8>
 800ee0a:	0649      	lsls	r1, r1, #25
 800ee0c:	bf48      	it	mi
 800ee0e:	b2ad      	uxthmi	r5, r5
 800ee10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee12:	4853      	ldr	r0, [pc, #332]	@ (800ef60 <_printf_i+0x238>)
 800ee14:	6033      	str	r3, [r6, #0]
 800ee16:	bf14      	ite	ne
 800ee18:	230a      	movne	r3, #10
 800ee1a:	2308      	moveq	r3, #8
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee22:	6866      	ldr	r6, [r4, #4]
 800ee24:	60a6      	str	r6, [r4, #8]
 800ee26:	2e00      	cmp	r6, #0
 800ee28:	bfa2      	ittt	ge
 800ee2a:	6821      	ldrge	r1, [r4, #0]
 800ee2c:	f021 0104 	bicge.w	r1, r1, #4
 800ee30:	6021      	strge	r1, [r4, #0]
 800ee32:	b90d      	cbnz	r5, 800ee38 <_printf_i+0x110>
 800ee34:	2e00      	cmp	r6, #0
 800ee36:	d04b      	beq.n	800eed0 <_printf_i+0x1a8>
 800ee38:	4616      	mov	r6, r2
 800ee3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ee42:	5dc7      	ldrb	r7, [r0, r7]
 800ee44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee48:	462f      	mov	r7, r5
 800ee4a:	42bb      	cmp	r3, r7
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	d9f4      	bls.n	800ee3a <_printf_i+0x112>
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d10b      	bne.n	800ee6c <_printf_i+0x144>
 800ee54:	6823      	ldr	r3, [r4, #0]
 800ee56:	07df      	lsls	r7, r3, #31
 800ee58:	d508      	bpl.n	800ee6c <_printf_i+0x144>
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	6861      	ldr	r1, [r4, #4]
 800ee5e:	4299      	cmp	r1, r3
 800ee60:	bfde      	ittt	le
 800ee62:	2330      	movle	r3, #48	@ 0x30
 800ee64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee6c:	1b92      	subs	r2, r2, r6
 800ee6e:	6122      	str	r2, [r4, #16]
 800ee70:	f8cd a000 	str.w	sl, [sp]
 800ee74:	464b      	mov	r3, r9
 800ee76:	aa03      	add	r2, sp, #12
 800ee78:	4621      	mov	r1, r4
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	f7ff fee6 	bl	800ec4c <_printf_common>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d14a      	bne.n	800ef1a <_printf_i+0x1f2>
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	b004      	add	sp, #16
 800ee8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	f043 0320 	orr.w	r3, r3, #32
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	4833      	ldr	r0, [pc, #204]	@ (800ef64 <_printf_i+0x23c>)
 800ee98:	2778      	movs	r7, #120	@ 0x78
 800ee9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	6831      	ldr	r1, [r6, #0]
 800eea2:	061f      	lsls	r7, r3, #24
 800eea4:	f851 5b04 	ldr.w	r5, [r1], #4
 800eea8:	d402      	bmi.n	800eeb0 <_printf_i+0x188>
 800eeaa:	065f      	lsls	r7, r3, #25
 800eeac:	bf48      	it	mi
 800eeae:	b2ad      	uxthmi	r5, r5
 800eeb0:	6031      	str	r1, [r6, #0]
 800eeb2:	07d9      	lsls	r1, r3, #31
 800eeb4:	bf44      	itt	mi
 800eeb6:	f043 0320 	orrmi.w	r3, r3, #32
 800eeba:	6023      	strmi	r3, [r4, #0]
 800eebc:	b11d      	cbz	r5, 800eec6 <_printf_i+0x19e>
 800eebe:	2310      	movs	r3, #16
 800eec0:	e7ac      	b.n	800ee1c <_printf_i+0xf4>
 800eec2:	4827      	ldr	r0, [pc, #156]	@ (800ef60 <_printf_i+0x238>)
 800eec4:	e7e9      	b.n	800ee9a <_printf_i+0x172>
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	f023 0320 	bic.w	r3, r3, #32
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	e7f6      	b.n	800eebe <_printf_i+0x196>
 800eed0:	4616      	mov	r6, r2
 800eed2:	e7bd      	b.n	800ee50 <_printf_i+0x128>
 800eed4:	6833      	ldr	r3, [r6, #0]
 800eed6:	6825      	ldr	r5, [r4, #0]
 800eed8:	6961      	ldr	r1, [r4, #20]
 800eeda:	1d18      	adds	r0, r3, #4
 800eedc:	6030      	str	r0, [r6, #0]
 800eede:	062e      	lsls	r6, r5, #24
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	d501      	bpl.n	800eee8 <_printf_i+0x1c0>
 800eee4:	6019      	str	r1, [r3, #0]
 800eee6:	e002      	b.n	800eeee <_printf_i+0x1c6>
 800eee8:	0668      	lsls	r0, r5, #25
 800eeea:	d5fb      	bpl.n	800eee4 <_printf_i+0x1bc>
 800eeec:	8019      	strh	r1, [r3, #0]
 800eeee:	2300      	movs	r3, #0
 800eef0:	6123      	str	r3, [r4, #16]
 800eef2:	4616      	mov	r6, r2
 800eef4:	e7bc      	b.n	800ee70 <_printf_i+0x148>
 800eef6:	6833      	ldr	r3, [r6, #0]
 800eef8:	1d1a      	adds	r2, r3, #4
 800eefa:	6032      	str	r2, [r6, #0]
 800eefc:	681e      	ldr	r6, [r3, #0]
 800eefe:	6862      	ldr	r2, [r4, #4]
 800ef00:	2100      	movs	r1, #0
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7f1 f96c 	bl	80001e0 <memchr>
 800ef08:	b108      	cbz	r0, 800ef0e <_printf_i+0x1e6>
 800ef0a:	1b80      	subs	r0, r0, r6
 800ef0c:	6060      	str	r0, [r4, #4]
 800ef0e:	6863      	ldr	r3, [r4, #4]
 800ef10:	6123      	str	r3, [r4, #16]
 800ef12:	2300      	movs	r3, #0
 800ef14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef18:	e7aa      	b.n	800ee70 <_printf_i+0x148>
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	4649      	mov	r1, r9
 800ef20:	4640      	mov	r0, r8
 800ef22:	47d0      	blx	sl
 800ef24:	3001      	adds	r0, #1
 800ef26:	d0ad      	beq.n	800ee84 <_printf_i+0x15c>
 800ef28:	6823      	ldr	r3, [r4, #0]
 800ef2a:	079b      	lsls	r3, r3, #30
 800ef2c:	d413      	bmi.n	800ef56 <_printf_i+0x22e>
 800ef2e:	68e0      	ldr	r0, [r4, #12]
 800ef30:	9b03      	ldr	r3, [sp, #12]
 800ef32:	4298      	cmp	r0, r3
 800ef34:	bfb8      	it	lt
 800ef36:	4618      	movlt	r0, r3
 800ef38:	e7a6      	b.n	800ee88 <_printf_i+0x160>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	4632      	mov	r2, r6
 800ef3e:	4649      	mov	r1, r9
 800ef40:	4640      	mov	r0, r8
 800ef42:	47d0      	blx	sl
 800ef44:	3001      	adds	r0, #1
 800ef46:	d09d      	beq.n	800ee84 <_printf_i+0x15c>
 800ef48:	3501      	adds	r5, #1
 800ef4a:	68e3      	ldr	r3, [r4, #12]
 800ef4c:	9903      	ldr	r1, [sp, #12]
 800ef4e:	1a5b      	subs	r3, r3, r1
 800ef50:	42ab      	cmp	r3, r5
 800ef52:	dcf2      	bgt.n	800ef3a <_printf_i+0x212>
 800ef54:	e7eb      	b.n	800ef2e <_printf_i+0x206>
 800ef56:	2500      	movs	r5, #0
 800ef58:	f104 0619 	add.w	r6, r4, #25
 800ef5c:	e7f5      	b.n	800ef4a <_printf_i+0x222>
 800ef5e:	bf00      	nop
 800ef60:	0801130a 	.word	0x0801130a
 800ef64:	0801131b 	.word	0x0801131b

0800ef68 <std>:
 800ef68:	2300      	movs	r3, #0
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ef72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef76:	6083      	str	r3, [r0, #8]
 800ef78:	8181      	strh	r1, [r0, #12]
 800ef7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef7c:	81c2      	strh	r2, [r0, #14]
 800ef7e:	6183      	str	r3, [r0, #24]
 800ef80:	4619      	mov	r1, r3
 800ef82:	2208      	movs	r2, #8
 800ef84:	305c      	adds	r0, #92	@ 0x5c
 800ef86:	f000 f9f9 	bl	800f37c <memset>
 800ef8a:	4b0d      	ldr	r3, [pc, #52]	@ (800efc0 <std+0x58>)
 800ef8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <std+0x5c>)
 800ef90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef92:	4b0d      	ldr	r3, [pc, #52]	@ (800efc8 <std+0x60>)
 800ef94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef96:	4b0d      	ldr	r3, [pc, #52]	@ (800efcc <std+0x64>)
 800ef98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef9a:	4b0d      	ldr	r3, [pc, #52]	@ (800efd0 <std+0x68>)
 800ef9c:	6224      	str	r4, [r4, #32]
 800ef9e:	429c      	cmp	r4, r3
 800efa0:	d006      	beq.n	800efb0 <std+0x48>
 800efa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800efa6:	4294      	cmp	r4, r2
 800efa8:	d002      	beq.n	800efb0 <std+0x48>
 800efaa:	33d0      	adds	r3, #208	@ 0xd0
 800efac:	429c      	cmp	r4, r3
 800efae:	d105      	bne.n	800efbc <std+0x54>
 800efb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800efb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb8:	f000 ba5c 	b.w	800f474 <__retarget_lock_init_recursive>
 800efbc:	bd10      	pop	{r4, pc}
 800efbe:	bf00      	nop
 800efc0:	0800f1cd 	.word	0x0800f1cd
 800efc4:	0800f1ef 	.word	0x0800f1ef
 800efc8:	0800f227 	.word	0x0800f227
 800efcc:	0800f24b 	.word	0x0800f24b
 800efd0:	20002124 	.word	0x20002124

0800efd4 <stdio_exit_handler>:
 800efd4:	4a02      	ldr	r2, [pc, #8]	@ (800efe0 <stdio_exit_handler+0xc>)
 800efd6:	4903      	ldr	r1, [pc, #12]	@ (800efe4 <stdio_exit_handler+0x10>)
 800efd8:	4803      	ldr	r0, [pc, #12]	@ (800efe8 <stdio_exit_handler+0x14>)
 800efda:	f000 b869 	b.w	800f0b0 <_fwalk_sglue>
 800efde:	bf00      	nop
 800efe0:	20000128 	.word	0x20000128
 800efe4:	08010da9 	.word	0x08010da9
 800efe8:	20000138 	.word	0x20000138

0800efec <cleanup_stdio>:
 800efec:	6841      	ldr	r1, [r0, #4]
 800efee:	4b0c      	ldr	r3, [pc, #48]	@ (800f020 <cleanup_stdio+0x34>)
 800eff0:	4299      	cmp	r1, r3
 800eff2:	b510      	push	{r4, lr}
 800eff4:	4604      	mov	r4, r0
 800eff6:	d001      	beq.n	800effc <cleanup_stdio+0x10>
 800eff8:	f001 fed6 	bl	8010da8 <_fflush_r>
 800effc:	68a1      	ldr	r1, [r4, #8]
 800effe:	4b09      	ldr	r3, [pc, #36]	@ (800f024 <cleanup_stdio+0x38>)
 800f000:	4299      	cmp	r1, r3
 800f002:	d002      	beq.n	800f00a <cleanup_stdio+0x1e>
 800f004:	4620      	mov	r0, r4
 800f006:	f001 fecf 	bl	8010da8 <_fflush_r>
 800f00a:	68e1      	ldr	r1, [r4, #12]
 800f00c:	4b06      	ldr	r3, [pc, #24]	@ (800f028 <cleanup_stdio+0x3c>)
 800f00e:	4299      	cmp	r1, r3
 800f010:	d004      	beq.n	800f01c <cleanup_stdio+0x30>
 800f012:	4620      	mov	r0, r4
 800f014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f018:	f001 bec6 	b.w	8010da8 <_fflush_r>
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	bf00      	nop
 800f020:	20002124 	.word	0x20002124
 800f024:	2000218c 	.word	0x2000218c
 800f028:	200021f4 	.word	0x200021f4

0800f02c <global_stdio_init.part.0>:
 800f02c:	b510      	push	{r4, lr}
 800f02e:	4b0b      	ldr	r3, [pc, #44]	@ (800f05c <global_stdio_init.part.0+0x30>)
 800f030:	4c0b      	ldr	r4, [pc, #44]	@ (800f060 <global_stdio_init.part.0+0x34>)
 800f032:	4a0c      	ldr	r2, [pc, #48]	@ (800f064 <global_stdio_init.part.0+0x38>)
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	4620      	mov	r0, r4
 800f038:	2200      	movs	r2, #0
 800f03a:	2104      	movs	r1, #4
 800f03c:	f7ff ff94 	bl	800ef68 <std>
 800f040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f044:	2201      	movs	r2, #1
 800f046:	2109      	movs	r1, #9
 800f048:	f7ff ff8e 	bl	800ef68 <std>
 800f04c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f050:	2202      	movs	r2, #2
 800f052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f056:	2112      	movs	r1, #18
 800f058:	f7ff bf86 	b.w	800ef68 <std>
 800f05c:	2000225c 	.word	0x2000225c
 800f060:	20002124 	.word	0x20002124
 800f064:	0800efd5 	.word	0x0800efd5

0800f068 <__sfp_lock_acquire>:
 800f068:	4801      	ldr	r0, [pc, #4]	@ (800f070 <__sfp_lock_acquire+0x8>)
 800f06a:	f000 ba04 	b.w	800f476 <__retarget_lock_acquire_recursive>
 800f06e:	bf00      	nop
 800f070:	20002265 	.word	0x20002265

0800f074 <__sfp_lock_release>:
 800f074:	4801      	ldr	r0, [pc, #4]	@ (800f07c <__sfp_lock_release+0x8>)
 800f076:	f000 b9ff 	b.w	800f478 <__retarget_lock_release_recursive>
 800f07a:	bf00      	nop
 800f07c:	20002265 	.word	0x20002265

0800f080 <__sinit>:
 800f080:	b510      	push	{r4, lr}
 800f082:	4604      	mov	r4, r0
 800f084:	f7ff fff0 	bl	800f068 <__sfp_lock_acquire>
 800f088:	6a23      	ldr	r3, [r4, #32]
 800f08a:	b11b      	cbz	r3, 800f094 <__sinit+0x14>
 800f08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f090:	f7ff bff0 	b.w	800f074 <__sfp_lock_release>
 800f094:	4b04      	ldr	r3, [pc, #16]	@ (800f0a8 <__sinit+0x28>)
 800f096:	6223      	str	r3, [r4, #32]
 800f098:	4b04      	ldr	r3, [pc, #16]	@ (800f0ac <__sinit+0x2c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1f5      	bne.n	800f08c <__sinit+0xc>
 800f0a0:	f7ff ffc4 	bl	800f02c <global_stdio_init.part.0>
 800f0a4:	e7f2      	b.n	800f08c <__sinit+0xc>
 800f0a6:	bf00      	nop
 800f0a8:	0800efed 	.word	0x0800efed
 800f0ac:	2000225c 	.word	0x2000225c

0800f0b0 <_fwalk_sglue>:
 800f0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	4688      	mov	r8, r1
 800f0b8:	4614      	mov	r4, r2
 800f0ba:	2600      	movs	r6, #0
 800f0bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0c0:	f1b9 0901 	subs.w	r9, r9, #1
 800f0c4:	d505      	bpl.n	800f0d2 <_fwalk_sglue+0x22>
 800f0c6:	6824      	ldr	r4, [r4, #0]
 800f0c8:	2c00      	cmp	r4, #0
 800f0ca:	d1f7      	bne.n	800f0bc <_fwalk_sglue+0xc>
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0d2:	89ab      	ldrh	r3, [r5, #12]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d907      	bls.n	800f0e8 <_fwalk_sglue+0x38>
 800f0d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	d003      	beq.n	800f0e8 <_fwalk_sglue+0x38>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	47c0      	blx	r8
 800f0e6:	4306      	orrs	r6, r0
 800f0e8:	3568      	adds	r5, #104	@ 0x68
 800f0ea:	e7e9      	b.n	800f0c0 <_fwalk_sglue+0x10>

0800f0ec <iprintf>:
 800f0ec:	b40f      	push	{r0, r1, r2, r3}
 800f0ee:	b507      	push	{r0, r1, r2, lr}
 800f0f0:	4906      	ldr	r1, [pc, #24]	@ (800f10c <iprintf+0x20>)
 800f0f2:	ab04      	add	r3, sp, #16
 800f0f4:	6808      	ldr	r0, [r1, #0]
 800f0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0fa:	6881      	ldr	r1, [r0, #8]
 800f0fc:	9301      	str	r3, [sp, #4]
 800f0fe:	f001 fcb7 	bl	8010a70 <_vfiprintf_r>
 800f102:	b003      	add	sp, #12
 800f104:	f85d eb04 	ldr.w	lr, [sp], #4
 800f108:	b004      	add	sp, #16
 800f10a:	4770      	bx	lr
 800f10c:	20000134 	.word	0x20000134

0800f110 <_puts_r>:
 800f110:	6a03      	ldr	r3, [r0, #32]
 800f112:	b570      	push	{r4, r5, r6, lr}
 800f114:	6884      	ldr	r4, [r0, #8]
 800f116:	4605      	mov	r5, r0
 800f118:	460e      	mov	r6, r1
 800f11a:	b90b      	cbnz	r3, 800f120 <_puts_r+0x10>
 800f11c:	f7ff ffb0 	bl	800f080 <__sinit>
 800f120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f122:	07db      	lsls	r3, r3, #31
 800f124:	d405      	bmi.n	800f132 <_puts_r+0x22>
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	0598      	lsls	r0, r3, #22
 800f12a:	d402      	bmi.n	800f132 <_puts_r+0x22>
 800f12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f12e:	f000 f9a2 	bl	800f476 <__retarget_lock_acquire_recursive>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	0719      	lsls	r1, r3, #28
 800f136:	d502      	bpl.n	800f13e <_puts_r+0x2e>
 800f138:	6923      	ldr	r3, [r4, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d135      	bne.n	800f1aa <_puts_r+0x9a>
 800f13e:	4621      	mov	r1, r4
 800f140:	4628      	mov	r0, r5
 800f142:	f000 f8c5 	bl	800f2d0 <__swsetup_r>
 800f146:	b380      	cbz	r0, 800f1aa <_puts_r+0x9a>
 800f148:	f04f 35ff 	mov.w	r5, #4294967295
 800f14c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f14e:	07da      	lsls	r2, r3, #31
 800f150:	d405      	bmi.n	800f15e <_puts_r+0x4e>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	059b      	lsls	r3, r3, #22
 800f156:	d402      	bmi.n	800f15e <_puts_r+0x4e>
 800f158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f15a:	f000 f98d 	bl	800f478 <__retarget_lock_release_recursive>
 800f15e:	4628      	mov	r0, r5
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	2b00      	cmp	r3, #0
 800f164:	da04      	bge.n	800f170 <_puts_r+0x60>
 800f166:	69a2      	ldr	r2, [r4, #24]
 800f168:	429a      	cmp	r2, r3
 800f16a:	dc17      	bgt.n	800f19c <_puts_r+0x8c>
 800f16c:	290a      	cmp	r1, #10
 800f16e:	d015      	beq.n	800f19c <_puts_r+0x8c>
 800f170:	6823      	ldr	r3, [r4, #0]
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	6022      	str	r2, [r4, #0]
 800f176:	7019      	strb	r1, [r3, #0]
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f17e:	3b01      	subs	r3, #1
 800f180:	60a3      	str	r3, [r4, #8]
 800f182:	2900      	cmp	r1, #0
 800f184:	d1ed      	bne.n	800f162 <_puts_r+0x52>
 800f186:	2b00      	cmp	r3, #0
 800f188:	da11      	bge.n	800f1ae <_puts_r+0x9e>
 800f18a:	4622      	mov	r2, r4
 800f18c:	210a      	movs	r1, #10
 800f18e:	4628      	mov	r0, r5
 800f190:	f000 f85f 	bl	800f252 <__swbuf_r>
 800f194:	3001      	adds	r0, #1
 800f196:	d0d7      	beq.n	800f148 <_puts_r+0x38>
 800f198:	250a      	movs	r5, #10
 800f19a:	e7d7      	b.n	800f14c <_puts_r+0x3c>
 800f19c:	4622      	mov	r2, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f857 	bl	800f252 <__swbuf_r>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d1e7      	bne.n	800f178 <_puts_r+0x68>
 800f1a8:	e7ce      	b.n	800f148 <_puts_r+0x38>
 800f1aa:	3e01      	subs	r6, #1
 800f1ac:	e7e4      	b.n	800f178 <_puts_r+0x68>
 800f1ae:	6823      	ldr	r3, [r4, #0]
 800f1b0:	1c5a      	adds	r2, r3, #1
 800f1b2:	6022      	str	r2, [r4, #0]
 800f1b4:	220a      	movs	r2, #10
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	e7ee      	b.n	800f198 <_puts_r+0x88>
	...

0800f1bc <puts>:
 800f1bc:	4b02      	ldr	r3, [pc, #8]	@ (800f1c8 <puts+0xc>)
 800f1be:	4601      	mov	r1, r0
 800f1c0:	6818      	ldr	r0, [r3, #0]
 800f1c2:	f7ff bfa5 	b.w	800f110 <_puts_r>
 800f1c6:	bf00      	nop
 800f1c8:	20000134 	.word	0x20000134

0800f1cc <__sread>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d4:	f000 f900 	bl	800f3d8 <_read_r>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	bfab      	itete	ge
 800f1dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1de:	89a3      	ldrhlt	r3, [r4, #12]
 800f1e0:	181b      	addge	r3, r3, r0
 800f1e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1e6:	bfac      	ite	ge
 800f1e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1ea:	81a3      	strhlt	r3, [r4, #12]
 800f1ec:	bd10      	pop	{r4, pc}

0800f1ee <__swrite>:
 800f1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f2:	461f      	mov	r7, r3
 800f1f4:	898b      	ldrh	r3, [r1, #12]
 800f1f6:	05db      	lsls	r3, r3, #23
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	4616      	mov	r6, r2
 800f1fe:	d505      	bpl.n	800f20c <__swrite+0x1e>
 800f200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f204:	2302      	movs	r3, #2
 800f206:	2200      	movs	r2, #0
 800f208:	f000 f8d4 	bl	800f3b4 <_lseek_r>
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	4632      	mov	r2, r6
 800f21a:	463b      	mov	r3, r7
 800f21c:	4628      	mov	r0, r5
 800f21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	f000 b8eb 	b.w	800f3fc <_write_r>

0800f226 <__sseek>:
 800f226:	b510      	push	{r4, lr}
 800f228:	460c      	mov	r4, r1
 800f22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22e:	f000 f8c1 	bl	800f3b4 <_lseek_r>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	bf15      	itete	ne
 800f238:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f23a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f23e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f242:	81a3      	strheq	r3, [r4, #12]
 800f244:	bf18      	it	ne
 800f246:	81a3      	strhne	r3, [r4, #12]
 800f248:	bd10      	pop	{r4, pc}

0800f24a <__sclose>:
 800f24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24e:	f000 b8a1 	b.w	800f394 <_close_r>

0800f252 <__swbuf_r>:
 800f252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f254:	460e      	mov	r6, r1
 800f256:	4614      	mov	r4, r2
 800f258:	4605      	mov	r5, r0
 800f25a:	b118      	cbz	r0, 800f264 <__swbuf_r+0x12>
 800f25c:	6a03      	ldr	r3, [r0, #32]
 800f25e:	b90b      	cbnz	r3, 800f264 <__swbuf_r+0x12>
 800f260:	f7ff ff0e 	bl	800f080 <__sinit>
 800f264:	69a3      	ldr	r3, [r4, #24]
 800f266:	60a3      	str	r3, [r4, #8]
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	071a      	lsls	r2, r3, #28
 800f26c:	d501      	bpl.n	800f272 <__swbuf_r+0x20>
 800f26e:	6923      	ldr	r3, [r4, #16]
 800f270:	b943      	cbnz	r3, 800f284 <__swbuf_r+0x32>
 800f272:	4621      	mov	r1, r4
 800f274:	4628      	mov	r0, r5
 800f276:	f000 f82b 	bl	800f2d0 <__swsetup_r>
 800f27a:	b118      	cbz	r0, 800f284 <__swbuf_r+0x32>
 800f27c:	f04f 37ff 	mov.w	r7, #4294967295
 800f280:	4638      	mov	r0, r7
 800f282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	6922      	ldr	r2, [r4, #16]
 800f288:	1a98      	subs	r0, r3, r2
 800f28a:	6963      	ldr	r3, [r4, #20]
 800f28c:	b2f6      	uxtb	r6, r6
 800f28e:	4283      	cmp	r3, r0
 800f290:	4637      	mov	r7, r6
 800f292:	dc05      	bgt.n	800f2a0 <__swbuf_r+0x4e>
 800f294:	4621      	mov	r1, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f001 fd86 	bl	8010da8 <_fflush_r>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d1ed      	bne.n	800f27c <__swbuf_r+0x2a>
 800f2a0:	68a3      	ldr	r3, [r4, #8]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	60a3      	str	r3, [r4, #8]
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	701e      	strb	r6, [r3, #0]
 800f2ae:	6962      	ldr	r2, [r4, #20]
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d004      	beq.n	800f2c0 <__swbuf_r+0x6e>
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	07db      	lsls	r3, r3, #31
 800f2ba:	d5e1      	bpl.n	800f280 <__swbuf_r+0x2e>
 800f2bc:	2e0a      	cmp	r6, #10
 800f2be:	d1df      	bne.n	800f280 <__swbuf_r+0x2e>
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f001 fd70 	bl	8010da8 <_fflush_r>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d0d9      	beq.n	800f280 <__swbuf_r+0x2e>
 800f2cc:	e7d6      	b.n	800f27c <__swbuf_r+0x2a>
	...

0800f2d0 <__swsetup_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4b29      	ldr	r3, [pc, #164]	@ (800f378 <__swsetup_r+0xa8>)
 800f2d4:	4605      	mov	r5, r0
 800f2d6:	6818      	ldr	r0, [r3, #0]
 800f2d8:	460c      	mov	r4, r1
 800f2da:	b118      	cbz	r0, 800f2e4 <__swsetup_r+0x14>
 800f2dc:	6a03      	ldr	r3, [r0, #32]
 800f2de:	b90b      	cbnz	r3, 800f2e4 <__swsetup_r+0x14>
 800f2e0:	f7ff fece 	bl	800f080 <__sinit>
 800f2e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e8:	0719      	lsls	r1, r3, #28
 800f2ea:	d422      	bmi.n	800f332 <__swsetup_r+0x62>
 800f2ec:	06da      	lsls	r2, r3, #27
 800f2ee:	d407      	bmi.n	800f300 <__swsetup_r+0x30>
 800f2f0:	2209      	movs	r2, #9
 800f2f2:	602a      	str	r2, [r5, #0]
 800f2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2f8:	81a3      	strh	r3, [r4, #12]
 800f2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fe:	e033      	b.n	800f368 <__swsetup_r+0x98>
 800f300:	0758      	lsls	r0, r3, #29
 800f302:	d512      	bpl.n	800f32a <__swsetup_r+0x5a>
 800f304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f306:	b141      	cbz	r1, 800f31a <__swsetup_r+0x4a>
 800f308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f30c:	4299      	cmp	r1, r3
 800f30e:	d002      	beq.n	800f316 <__swsetup_r+0x46>
 800f310:	4628      	mov	r0, r5
 800f312:	f000 ff01 	bl	8010118 <_free_r>
 800f316:	2300      	movs	r3, #0
 800f318:	6363      	str	r3, [r4, #52]	@ 0x34
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f320:	81a3      	strh	r3, [r4, #12]
 800f322:	2300      	movs	r3, #0
 800f324:	6063      	str	r3, [r4, #4]
 800f326:	6923      	ldr	r3, [r4, #16]
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	f043 0308 	orr.w	r3, r3, #8
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	6923      	ldr	r3, [r4, #16]
 800f334:	b94b      	cbnz	r3, 800f34a <__swsetup_r+0x7a>
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f340:	d003      	beq.n	800f34a <__swsetup_r+0x7a>
 800f342:	4621      	mov	r1, r4
 800f344:	4628      	mov	r0, r5
 800f346:	f001 fd7d 	bl	8010e44 <__smakebuf_r>
 800f34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f34e:	f013 0201 	ands.w	r2, r3, #1
 800f352:	d00a      	beq.n	800f36a <__swsetup_r+0x9a>
 800f354:	2200      	movs	r2, #0
 800f356:	60a2      	str	r2, [r4, #8]
 800f358:	6962      	ldr	r2, [r4, #20]
 800f35a:	4252      	negs	r2, r2
 800f35c:	61a2      	str	r2, [r4, #24]
 800f35e:	6922      	ldr	r2, [r4, #16]
 800f360:	b942      	cbnz	r2, 800f374 <__swsetup_r+0xa4>
 800f362:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f366:	d1c5      	bne.n	800f2f4 <__swsetup_r+0x24>
 800f368:	bd38      	pop	{r3, r4, r5, pc}
 800f36a:	0799      	lsls	r1, r3, #30
 800f36c:	bf58      	it	pl
 800f36e:	6962      	ldrpl	r2, [r4, #20]
 800f370:	60a2      	str	r2, [r4, #8]
 800f372:	e7f4      	b.n	800f35e <__swsetup_r+0x8e>
 800f374:	2000      	movs	r0, #0
 800f376:	e7f7      	b.n	800f368 <__swsetup_r+0x98>
 800f378:	20000134 	.word	0x20000134

0800f37c <memset>:
 800f37c:	4402      	add	r2, r0
 800f37e:	4603      	mov	r3, r0
 800f380:	4293      	cmp	r3, r2
 800f382:	d100      	bne.n	800f386 <memset+0xa>
 800f384:	4770      	bx	lr
 800f386:	f803 1b01 	strb.w	r1, [r3], #1
 800f38a:	e7f9      	b.n	800f380 <memset+0x4>

0800f38c <_localeconv_r>:
 800f38c:	4800      	ldr	r0, [pc, #0]	@ (800f390 <_localeconv_r+0x4>)
 800f38e:	4770      	bx	lr
 800f390:	20000274 	.word	0x20000274

0800f394 <_close_r>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	4d06      	ldr	r5, [pc, #24]	@ (800f3b0 <_close_r+0x1c>)
 800f398:	2300      	movs	r3, #0
 800f39a:	4604      	mov	r4, r0
 800f39c:	4608      	mov	r0, r1
 800f39e:	602b      	str	r3, [r5, #0]
 800f3a0:	f7f3 f974 	bl	800268c <_close>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	d102      	bne.n	800f3ae <_close_r+0x1a>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b103      	cbz	r3, 800f3ae <_close_r+0x1a>
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	bd38      	pop	{r3, r4, r5, pc}
 800f3b0:	20002260 	.word	0x20002260

0800f3b4 <_lseek_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	@ (800f3d4 <_lseek_r+0x20>)
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	4611      	mov	r1, r2
 800f3be:	2200      	movs	r2, #0
 800f3c0:	602a      	str	r2, [r5, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f7f3 f989 	bl	80026da <_lseek>
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	d102      	bne.n	800f3d2 <_lseek_r+0x1e>
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	b103      	cbz	r3, 800f3d2 <_lseek_r+0x1e>
 800f3d0:	6023      	str	r3, [r4, #0]
 800f3d2:	bd38      	pop	{r3, r4, r5, pc}
 800f3d4:	20002260 	.word	0x20002260

0800f3d8 <_read_r>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	4d07      	ldr	r5, [pc, #28]	@ (800f3f8 <_read_r+0x20>)
 800f3dc:	4604      	mov	r4, r0
 800f3de:	4608      	mov	r0, r1
 800f3e0:	4611      	mov	r1, r2
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	602a      	str	r2, [r5, #0]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	f7f3 f933 	bl	8002652 <_read>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d102      	bne.n	800f3f6 <_read_r+0x1e>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b103      	cbz	r3, 800f3f6 <_read_r+0x1e>
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	20002260 	.word	0x20002260

0800f3fc <_write_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	4d07      	ldr	r5, [pc, #28]	@ (800f41c <_write_r+0x20>)
 800f400:	4604      	mov	r4, r0
 800f402:	4608      	mov	r0, r1
 800f404:	4611      	mov	r1, r2
 800f406:	2200      	movs	r2, #0
 800f408:	602a      	str	r2, [r5, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	f7f2 fbd4 	bl	8001bb8 <_write>
 800f410:	1c43      	adds	r3, r0, #1
 800f412:	d102      	bne.n	800f41a <_write_r+0x1e>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	b103      	cbz	r3, 800f41a <_write_r+0x1e>
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	20002260 	.word	0x20002260

0800f420 <__errno>:
 800f420:	4b01      	ldr	r3, [pc, #4]	@ (800f428 <__errno+0x8>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	20000134 	.word	0x20000134

0800f42c <__libc_init_array>:
 800f42c:	b570      	push	{r4, r5, r6, lr}
 800f42e:	4d0d      	ldr	r5, [pc, #52]	@ (800f464 <__libc_init_array+0x38>)
 800f430:	4c0d      	ldr	r4, [pc, #52]	@ (800f468 <__libc_init_array+0x3c>)
 800f432:	1b64      	subs	r4, r4, r5
 800f434:	10a4      	asrs	r4, r4, #2
 800f436:	2600      	movs	r6, #0
 800f438:	42a6      	cmp	r6, r4
 800f43a:	d109      	bne.n	800f450 <__libc_init_array+0x24>
 800f43c:	4d0b      	ldr	r5, [pc, #44]	@ (800f46c <__libc_init_array+0x40>)
 800f43e:	4c0c      	ldr	r4, [pc, #48]	@ (800f470 <__libc_init_array+0x44>)
 800f440:	f001 fe2c 	bl	801109c <_init>
 800f444:	1b64      	subs	r4, r4, r5
 800f446:	10a4      	asrs	r4, r4, #2
 800f448:	2600      	movs	r6, #0
 800f44a:	42a6      	cmp	r6, r4
 800f44c:	d105      	bne.n	800f45a <__libc_init_array+0x2e>
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	f855 3b04 	ldr.w	r3, [r5], #4
 800f454:	4798      	blx	r3
 800f456:	3601      	adds	r6, #1
 800f458:	e7ee      	b.n	800f438 <__libc_init_array+0xc>
 800f45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f45e:	4798      	blx	r3
 800f460:	3601      	adds	r6, #1
 800f462:	e7f2      	b.n	800f44a <__libc_init_array+0x1e>
 800f464:	08011670 	.word	0x08011670
 800f468:	08011670 	.word	0x08011670
 800f46c:	08011670 	.word	0x08011670
 800f470:	08011678 	.word	0x08011678

0800f474 <__retarget_lock_init_recursive>:
 800f474:	4770      	bx	lr

0800f476 <__retarget_lock_acquire_recursive>:
 800f476:	4770      	bx	lr

0800f478 <__retarget_lock_release_recursive>:
 800f478:	4770      	bx	lr

0800f47a <quorem>:
 800f47a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f47e:	6903      	ldr	r3, [r0, #16]
 800f480:	690c      	ldr	r4, [r1, #16]
 800f482:	42a3      	cmp	r3, r4
 800f484:	4607      	mov	r7, r0
 800f486:	db7e      	blt.n	800f586 <quorem+0x10c>
 800f488:	3c01      	subs	r4, #1
 800f48a:	f101 0814 	add.w	r8, r1, #20
 800f48e:	00a3      	lsls	r3, r4, #2
 800f490:	f100 0514 	add.w	r5, r0, #20
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f49a:	9301      	str	r3, [sp, #4]
 800f49c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4b0:	d32e      	bcc.n	800f510 <quorem+0x96>
 800f4b2:	f04f 0a00 	mov.w	sl, #0
 800f4b6:	46c4      	mov	ip, r8
 800f4b8:	46ae      	mov	lr, r5
 800f4ba:	46d3      	mov	fp, sl
 800f4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4c0:	b298      	uxth	r0, r3
 800f4c2:	fb06 a000 	mla	r0, r6, r0, sl
 800f4c6:	0c02      	lsrs	r2, r0, #16
 800f4c8:	0c1b      	lsrs	r3, r3, #16
 800f4ca:	fb06 2303 	mla	r3, r6, r3, r2
 800f4ce:	f8de 2000 	ldr.w	r2, [lr]
 800f4d2:	b280      	uxth	r0, r0
 800f4d4:	b292      	uxth	r2, r2
 800f4d6:	1a12      	subs	r2, r2, r0
 800f4d8:	445a      	add	r2, fp
 800f4da:	f8de 0000 	ldr.w	r0, [lr]
 800f4de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f4e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f4ec:	b292      	uxth	r2, r2
 800f4ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f4f2:	45e1      	cmp	r9, ip
 800f4f4:	f84e 2b04 	str.w	r2, [lr], #4
 800f4f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f4fc:	d2de      	bcs.n	800f4bc <quorem+0x42>
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	58eb      	ldr	r3, [r5, r3]
 800f502:	b92b      	cbnz	r3, 800f510 <quorem+0x96>
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	3b04      	subs	r3, #4
 800f508:	429d      	cmp	r5, r3
 800f50a:	461a      	mov	r2, r3
 800f50c:	d32f      	bcc.n	800f56e <quorem+0xf4>
 800f50e:	613c      	str	r4, [r7, #16]
 800f510:	4638      	mov	r0, r7
 800f512:	f001 f97b 	bl	801080c <__mcmp>
 800f516:	2800      	cmp	r0, #0
 800f518:	db25      	blt.n	800f566 <quorem+0xec>
 800f51a:	4629      	mov	r1, r5
 800f51c:	2000      	movs	r0, #0
 800f51e:	f858 2b04 	ldr.w	r2, [r8], #4
 800f522:	f8d1 c000 	ldr.w	ip, [r1]
 800f526:	fa1f fe82 	uxth.w	lr, r2
 800f52a:	fa1f f38c 	uxth.w	r3, ip
 800f52e:	eba3 030e 	sub.w	r3, r3, lr
 800f532:	4403      	add	r3, r0
 800f534:	0c12      	lsrs	r2, r2, #16
 800f536:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f53a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f53e:	b29b      	uxth	r3, r3
 800f540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f544:	45c1      	cmp	r9, r8
 800f546:	f841 3b04 	str.w	r3, [r1], #4
 800f54a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f54e:	d2e6      	bcs.n	800f51e <quorem+0xa4>
 800f550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f558:	b922      	cbnz	r2, 800f564 <quorem+0xea>
 800f55a:	3b04      	subs	r3, #4
 800f55c:	429d      	cmp	r5, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	d30b      	bcc.n	800f57a <quorem+0x100>
 800f562:	613c      	str	r4, [r7, #16]
 800f564:	3601      	adds	r6, #1
 800f566:	4630      	mov	r0, r6
 800f568:	b003      	add	sp, #12
 800f56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56e:	6812      	ldr	r2, [r2, #0]
 800f570:	3b04      	subs	r3, #4
 800f572:	2a00      	cmp	r2, #0
 800f574:	d1cb      	bne.n	800f50e <quorem+0x94>
 800f576:	3c01      	subs	r4, #1
 800f578:	e7c6      	b.n	800f508 <quorem+0x8e>
 800f57a:	6812      	ldr	r2, [r2, #0]
 800f57c:	3b04      	subs	r3, #4
 800f57e:	2a00      	cmp	r2, #0
 800f580:	d1ef      	bne.n	800f562 <quorem+0xe8>
 800f582:	3c01      	subs	r4, #1
 800f584:	e7ea      	b.n	800f55c <quorem+0xe2>
 800f586:	2000      	movs	r0, #0
 800f588:	e7ee      	b.n	800f568 <quorem+0xee>
 800f58a:	0000      	movs	r0, r0
 800f58c:	0000      	movs	r0, r0
	...

0800f590 <_dtoa_r>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	69c7      	ldr	r7, [r0, #28]
 800f596:	b099      	sub	sp, #100	@ 0x64
 800f598:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f59c:	ec55 4b10 	vmov	r4, r5, d0
 800f5a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f5a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5a4:	4683      	mov	fp, r0
 800f5a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5aa:	b97f      	cbnz	r7, 800f5cc <_dtoa_r+0x3c>
 800f5ac:	2010      	movs	r0, #16
 800f5ae:	f000 fdfd 	bl	80101ac <malloc>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f5b8:	b920      	cbnz	r0, 800f5c4 <_dtoa_r+0x34>
 800f5ba:	4ba7      	ldr	r3, [pc, #668]	@ (800f858 <_dtoa_r+0x2c8>)
 800f5bc:	21ef      	movs	r1, #239	@ 0xef
 800f5be:	48a7      	ldr	r0, [pc, #668]	@ (800f85c <_dtoa_r+0x2cc>)
 800f5c0:	f001 fcbc 	bl	8010f3c <__assert_func>
 800f5c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f5c8:	6007      	str	r7, [r0, #0]
 800f5ca:	60c7      	str	r7, [r0, #12]
 800f5cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5d0:	6819      	ldr	r1, [r3, #0]
 800f5d2:	b159      	cbz	r1, 800f5ec <_dtoa_r+0x5c>
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	604a      	str	r2, [r1, #4]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	4093      	lsls	r3, r2
 800f5dc:	608b      	str	r3, [r1, #8]
 800f5de:	4658      	mov	r0, fp
 800f5e0:	f000 feda 	bl	8010398 <_Bfree>
 800f5e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	1e2b      	subs	r3, r5, #0
 800f5ee:	bfb9      	ittee	lt
 800f5f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f5f4:	9303      	strlt	r3, [sp, #12]
 800f5f6:	2300      	movge	r3, #0
 800f5f8:	6033      	strge	r3, [r6, #0]
 800f5fa:	9f03      	ldr	r7, [sp, #12]
 800f5fc:	4b98      	ldr	r3, [pc, #608]	@ (800f860 <_dtoa_r+0x2d0>)
 800f5fe:	bfbc      	itt	lt
 800f600:	2201      	movlt	r2, #1
 800f602:	6032      	strlt	r2, [r6, #0]
 800f604:	43bb      	bics	r3, r7
 800f606:	d112      	bne.n	800f62e <_dtoa_r+0x9e>
 800f608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f60a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f614:	4323      	orrs	r3, r4
 800f616:	f000 854d 	beq.w	80100b4 <_dtoa_r+0xb24>
 800f61a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f61c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f874 <_dtoa_r+0x2e4>
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 854f 	beq.w	80100c4 <_dtoa_r+0xb34>
 800f626:	f10a 0303 	add.w	r3, sl, #3
 800f62a:	f000 bd49 	b.w	80100c0 <_dtoa_r+0xb30>
 800f62e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f632:	2200      	movs	r2, #0
 800f634:	ec51 0b17 	vmov	r0, r1, d7
 800f638:	2300      	movs	r3, #0
 800f63a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f63e:	f7f1 fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f642:	4680      	mov	r8, r0
 800f644:	b158      	cbz	r0, 800f65e <_dtoa_r+0xce>
 800f646:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f648:	2301      	movs	r3, #1
 800f64a:	6013      	str	r3, [r2, #0]
 800f64c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f64e:	b113      	cbz	r3, 800f656 <_dtoa_r+0xc6>
 800f650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f652:	4b84      	ldr	r3, [pc, #528]	@ (800f864 <_dtoa_r+0x2d4>)
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f878 <_dtoa_r+0x2e8>
 800f65a:	f000 bd33 	b.w	80100c4 <_dtoa_r+0xb34>
 800f65e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f662:	aa16      	add	r2, sp, #88	@ 0x58
 800f664:	a917      	add	r1, sp, #92	@ 0x5c
 800f666:	4658      	mov	r0, fp
 800f668:	f001 f980 	bl	801096c <__d2b>
 800f66c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f670:	4681      	mov	r9, r0
 800f672:	2e00      	cmp	r6, #0
 800f674:	d077      	beq.n	800f766 <_dtoa_r+0x1d6>
 800f676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f678:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f684:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f688:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f68c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f690:	4619      	mov	r1, r3
 800f692:	2200      	movs	r2, #0
 800f694:	4b74      	ldr	r3, [pc, #464]	@ (800f868 <_dtoa_r+0x2d8>)
 800f696:	f7f0 fdff 	bl	8000298 <__aeabi_dsub>
 800f69a:	a369      	add	r3, pc, #420	@ (adr r3, 800f840 <_dtoa_r+0x2b0>)
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	f7f0 ffb2 	bl	8000608 <__aeabi_dmul>
 800f6a4:	a368      	add	r3, pc, #416	@ (adr r3, 800f848 <_dtoa_r+0x2b8>)
 800f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6aa:	f7f0 fdf7 	bl	800029c <__adddf3>
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	f7f0 ff3e 	bl	8000534 <__aeabi_i2d>
 800f6b8:	a365      	add	r3, pc, #404	@ (adr r3, 800f850 <_dtoa_r+0x2c0>)
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	f7f0 ffa3 	bl	8000608 <__aeabi_dmul>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7f0 fde7 	bl	800029c <__adddf3>
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	460d      	mov	r5, r1
 800f6d2:	f7f1 fa49 	bl	8000b68 <__aeabi_d2iz>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4607      	mov	r7, r0
 800f6da:	2300      	movs	r3, #0
 800f6dc:	4620      	mov	r0, r4
 800f6de:	4629      	mov	r1, r5
 800f6e0:	f7f1 fa04 	bl	8000aec <__aeabi_dcmplt>
 800f6e4:	b140      	cbz	r0, 800f6f8 <_dtoa_r+0x168>
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	f7f0 ff24 	bl	8000534 <__aeabi_i2d>
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	462b      	mov	r3, r5
 800f6f0:	f7f1 f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6f4:	b900      	cbnz	r0, 800f6f8 <_dtoa_r+0x168>
 800f6f6:	3f01      	subs	r7, #1
 800f6f8:	2f16      	cmp	r7, #22
 800f6fa:	d851      	bhi.n	800f7a0 <_dtoa_r+0x210>
 800f6fc:	4b5b      	ldr	r3, [pc, #364]	@ (800f86c <_dtoa_r+0x2dc>)
 800f6fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f70a:	f7f1 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d048      	beq.n	800f7a4 <_dtoa_r+0x214>
 800f712:	3f01      	subs	r7, #1
 800f714:	2300      	movs	r3, #0
 800f716:	9312      	str	r3, [sp, #72]	@ 0x48
 800f718:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f71a:	1b9b      	subs	r3, r3, r6
 800f71c:	1e5a      	subs	r2, r3, #1
 800f71e:	bf44      	itt	mi
 800f720:	f1c3 0801 	rsbmi	r8, r3, #1
 800f724:	2300      	movmi	r3, #0
 800f726:	9208      	str	r2, [sp, #32]
 800f728:	bf54      	ite	pl
 800f72a:	f04f 0800 	movpl.w	r8, #0
 800f72e:	9308      	strmi	r3, [sp, #32]
 800f730:	2f00      	cmp	r7, #0
 800f732:	db39      	blt.n	800f7a8 <_dtoa_r+0x218>
 800f734:	9b08      	ldr	r3, [sp, #32]
 800f736:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f738:	443b      	add	r3, r7
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	2300      	movs	r3, #0
 800f73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f742:	2b09      	cmp	r3, #9
 800f744:	d864      	bhi.n	800f810 <_dtoa_r+0x280>
 800f746:	2b05      	cmp	r3, #5
 800f748:	bfc4      	itt	gt
 800f74a:	3b04      	subgt	r3, #4
 800f74c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f750:	f1a3 0302 	sub.w	r3, r3, #2
 800f754:	bfcc      	ite	gt
 800f756:	2400      	movgt	r4, #0
 800f758:	2401      	movle	r4, #1
 800f75a:	2b03      	cmp	r3, #3
 800f75c:	d863      	bhi.n	800f826 <_dtoa_r+0x296>
 800f75e:	e8df f003 	tbb	[pc, r3]
 800f762:	372a      	.short	0x372a
 800f764:	5535      	.short	0x5535
 800f766:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f76a:	441e      	add	r6, r3
 800f76c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f770:	2b20      	cmp	r3, #32
 800f772:	bfc1      	itttt	gt
 800f774:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f778:	409f      	lslgt	r7, r3
 800f77a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f77e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f782:	bfd6      	itet	le
 800f784:	f1c3 0320 	rsble	r3, r3, #32
 800f788:	ea47 0003 	orrgt.w	r0, r7, r3
 800f78c:	fa04 f003 	lslle.w	r0, r4, r3
 800f790:	f7f0 fec0 	bl	8000514 <__aeabi_ui2d>
 800f794:	2201      	movs	r2, #1
 800f796:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f79a:	3e01      	subs	r6, #1
 800f79c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f79e:	e777      	b.n	800f690 <_dtoa_r+0x100>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	e7b8      	b.n	800f716 <_dtoa_r+0x186>
 800f7a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f7a6:	e7b7      	b.n	800f718 <_dtoa_r+0x188>
 800f7a8:	427b      	negs	r3, r7
 800f7aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	eba8 0807 	sub.w	r8, r8, r7
 800f7b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7b4:	e7c4      	b.n	800f740 <_dtoa_r+0x1b0>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dc35      	bgt.n	800f82c <_dtoa_r+0x29c>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	9307      	str	r3, [sp, #28]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7ca:	e00b      	b.n	800f7e4 <_dtoa_r+0x254>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	e7f3      	b.n	800f7b8 <_dtoa_r+0x228>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7d6:	18fb      	adds	r3, r7, r3
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	9307      	str	r3, [sp, #28]
 800f7e0:	bfb8      	it	lt
 800f7e2:	2301      	movlt	r3, #1
 800f7e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	2204      	movs	r2, #4
 800f7ec:	f102 0514 	add.w	r5, r2, #20
 800f7f0:	429d      	cmp	r5, r3
 800f7f2:	d91f      	bls.n	800f834 <_dtoa_r+0x2a4>
 800f7f4:	6041      	str	r1, [r0, #4]
 800f7f6:	4658      	mov	r0, fp
 800f7f8:	f000 fd8e 	bl	8010318 <_Balloc>
 800f7fc:	4682      	mov	sl, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d13c      	bne.n	800f87c <_dtoa_r+0x2ec>
 800f802:	4b1b      	ldr	r3, [pc, #108]	@ (800f870 <_dtoa_r+0x2e0>)
 800f804:	4602      	mov	r2, r0
 800f806:	f240 11af 	movw	r1, #431	@ 0x1af
 800f80a:	e6d8      	b.n	800f5be <_dtoa_r+0x2e>
 800f80c:	2301      	movs	r3, #1
 800f80e:	e7e0      	b.n	800f7d2 <_dtoa_r+0x242>
 800f810:	2401      	movs	r4, #1
 800f812:	2300      	movs	r3, #0
 800f814:	9309      	str	r3, [sp, #36]	@ 0x24
 800f816:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f818:	f04f 33ff 	mov.w	r3, #4294967295
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	9307      	str	r3, [sp, #28]
 800f820:	2200      	movs	r2, #0
 800f822:	2312      	movs	r3, #18
 800f824:	e7d0      	b.n	800f7c8 <_dtoa_r+0x238>
 800f826:	2301      	movs	r3, #1
 800f828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f82a:	e7f5      	b.n	800f818 <_dtoa_r+0x288>
 800f82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	9307      	str	r3, [sp, #28]
 800f832:	e7d7      	b.n	800f7e4 <_dtoa_r+0x254>
 800f834:	3101      	adds	r1, #1
 800f836:	0052      	lsls	r2, r2, #1
 800f838:	e7d8      	b.n	800f7ec <_dtoa_r+0x25c>
 800f83a:	bf00      	nop
 800f83c:	f3af 8000 	nop.w
 800f840:	636f4361 	.word	0x636f4361
 800f844:	3fd287a7 	.word	0x3fd287a7
 800f848:	8b60c8b3 	.word	0x8b60c8b3
 800f84c:	3fc68a28 	.word	0x3fc68a28
 800f850:	509f79fb 	.word	0x509f79fb
 800f854:	3fd34413 	.word	0x3fd34413
 800f858:	08011339 	.word	0x08011339
 800f85c:	08011350 	.word	0x08011350
 800f860:	7ff00000 	.word	0x7ff00000
 800f864:	08011309 	.word	0x08011309
 800f868:	3ff80000 	.word	0x3ff80000
 800f86c:	08011448 	.word	0x08011448
 800f870:	080113a8 	.word	0x080113a8
 800f874:	08011335 	.word	0x08011335
 800f878:	08011308 	.word	0x08011308
 800f87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f880:	6018      	str	r0, [r3, #0]
 800f882:	9b07      	ldr	r3, [sp, #28]
 800f884:	2b0e      	cmp	r3, #14
 800f886:	f200 80a4 	bhi.w	800f9d2 <_dtoa_r+0x442>
 800f88a:	2c00      	cmp	r4, #0
 800f88c:	f000 80a1 	beq.w	800f9d2 <_dtoa_r+0x442>
 800f890:	2f00      	cmp	r7, #0
 800f892:	dd33      	ble.n	800f8fc <_dtoa_r+0x36c>
 800f894:	4bad      	ldr	r3, [pc, #692]	@ (800fb4c <_dtoa_r+0x5bc>)
 800f896:	f007 020f 	and.w	r2, r7, #15
 800f89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f89e:	ed93 7b00 	vldr	d7, [r3]
 800f8a2:	05f8      	lsls	r0, r7, #23
 800f8a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f8a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f8ac:	d516      	bpl.n	800f8dc <_dtoa_r+0x34c>
 800f8ae:	4ba8      	ldr	r3, [pc, #672]	@ (800fb50 <_dtoa_r+0x5c0>)
 800f8b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8b8:	f7f0 ffd0 	bl	800085c <__aeabi_ddiv>
 800f8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8c0:	f004 040f 	and.w	r4, r4, #15
 800f8c4:	2603      	movs	r6, #3
 800f8c6:	4da2      	ldr	r5, [pc, #648]	@ (800fb50 <_dtoa_r+0x5c0>)
 800f8c8:	b954      	cbnz	r4, 800f8e0 <_dtoa_r+0x350>
 800f8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8d2:	f7f0 ffc3 	bl	800085c <__aeabi_ddiv>
 800f8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8da:	e028      	b.n	800f92e <_dtoa_r+0x39e>
 800f8dc:	2602      	movs	r6, #2
 800f8de:	e7f2      	b.n	800f8c6 <_dtoa_r+0x336>
 800f8e0:	07e1      	lsls	r1, r4, #31
 800f8e2:	d508      	bpl.n	800f8f6 <_dtoa_r+0x366>
 800f8e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8ec:	f7f0 fe8c 	bl	8000608 <__aeabi_dmul>
 800f8f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8f4:	3601      	adds	r6, #1
 800f8f6:	1064      	asrs	r4, r4, #1
 800f8f8:	3508      	adds	r5, #8
 800f8fa:	e7e5      	b.n	800f8c8 <_dtoa_r+0x338>
 800f8fc:	f000 80d2 	beq.w	800faa4 <_dtoa_r+0x514>
 800f900:	427c      	negs	r4, r7
 800f902:	4b92      	ldr	r3, [pc, #584]	@ (800fb4c <_dtoa_r+0x5bc>)
 800f904:	4d92      	ldr	r5, [pc, #584]	@ (800fb50 <_dtoa_r+0x5c0>)
 800f906:	f004 020f 	and.w	r2, r4, #15
 800f90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f916:	f7f0 fe77 	bl	8000608 <__aeabi_dmul>
 800f91a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f91e:	1124      	asrs	r4, r4, #4
 800f920:	2300      	movs	r3, #0
 800f922:	2602      	movs	r6, #2
 800f924:	2c00      	cmp	r4, #0
 800f926:	f040 80b2 	bne.w	800fa8e <_dtoa_r+0x4fe>
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1d3      	bne.n	800f8d6 <_dtoa_r+0x346>
 800f92e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f930:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 80b7 	beq.w	800faa8 <_dtoa_r+0x518>
 800f93a:	4b86      	ldr	r3, [pc, #536]	@ (800fb54 <_dtoa_r+0x5c4>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f1 f8d3 	bl	8000aec <__aeabi_dcmplt>
 800f946:	2800      	cmp	r0, #0
 800f948:	f000 80ae 	beq.w	800faa8 <_dtoa_r+0x518>
 800f94c:	9b07      	ldr	r3, [sp, #28]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80aa 	beq.w	800faa8 <_dtoa_r+0x518>
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	dd37      	ble.n	800f9ca <_dtoa_r+0x43a>
 800f95a:	1e7b      	subs	r3, r7, #1
 800f95c:	9304      	str	r3, [sp, #16]
 800f95e:	4620      	mov	r0, r4
 800f960:	4b7d      	ldr	r3, [pc, #500]	@ (800fb58 <_dtoa_r+0x5c8>)
 800f962:	2200      	movs	r2, #0
 800f964:	4629      	mov	r1, r5
 800f966:	f7f0 fe4f 	bl	8000608 <__aeabi_dmul>
 800f96a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f96e:	9c00      	ldr	r4, [sp, #0]
 800f970:	3601      	adds	r6, #1
 800f972:	4630      	mov	r0, r6
 800f974:	f7f0 fdde 	bl	8000534 <__aeabi_i2d>
 800f978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f97c:	f7f0 fe44 	bl	8000608 <__aeabi_dmul>
 800f980:	4b76      	ldr	r3, [pc, #472]	@ (800fb5c <_dtoa_r+0x5cc>)
 800f982:	2200      	movs	r2, #0
 800f984:	f7f0 fc8a 	bl	800029c <__adddf3>
 800f988:	4605      	mov	r5, r0
 800f98a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f98e:	2c00      	cmp	r4, #0
 800f990:	f040 808d 	bne.w	800faae <_dtoa_r+0x51e>
 800f994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f998:	4b71      	ldr	r3, [pc, #452]	@ (800fb60 <_dtoa_r+0x5d0>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	f7f0 fc7c 	bl	8000298 <__aeabi_dsub>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9a8:	462a      	mov	r2, r5
 800f9aa:	4633      	mov	r3, r6
 800f9ac:	f7f1 f8bc 	bl	8000b28 <__aeabi_dcmpgt>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f040 828b 	bne.w	800fecc <_dtoa_r+0x93c>
 800f9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9ba:	462a      	mov	r2, r5
 800f9bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f9c0:	f7f1 f894 	bl	8000aec <__aeabi_dcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f040 8128 	bne.w	800fc1a <_dtoa_r+0x68a>
 800f9ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f9ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f9d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f2c0 815a 	blt.w	800fc8e <_dtoa_r+0x6fe>
 800f9da:	2f0e      	cmp	r7, #14
 800f9dc:	f300 8157 	bgt.w	800fc8e <_dtoa_r+0x6fe>
 800f9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800fb4c <_dtoa_r+0x5bc>)
 800f9e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f9e6:	ed93 7b00 	vldr	d7, [r3]
 800f9ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	ed8d 7b00 	vstr	d7, [sp]
 800f9f2:	da03      	bge.n	800f9fc <_dtoa_r+0x46c>
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f340 8101 	ble.w	800fbfe <_dtoa_r+0x66e>
 800f9fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fa00:	4656      	mov	r6, sl
 800fa02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7f0 ff27 	bl	800085c <__aeabi_ddiv>
 800fa0e:	f7f1 f8ab 	bl	8000b68 <__aeabi_d2iz>
 800fa12:	4680      	mov	r8, r0
 800fa14:	f7f0 fd8e 	bl	8000534 <__aeabi_i2d>
 800fa18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa1c:	f7f0 fdf4 	bl	8000608 <__aeabi_dmul>
 800fa20:	4602      	mov	r2, r0
 800fa22:	460b      	mov	r3, r1
 800fa24:	4620      	mov	r0, r4
 800fa26:	4629      	mov	r1, r5
 800fa28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fa2c:	f7f0 fc34 	bl	8000298 <__aeabi_dsub>
 800fa30:	f806 4b01 	strb.w	r4, [r6], #1
 800fa34:	9d07      	ldr	r5, [sp, #28]
 800fa36:	eba6 040a 	sub.w	r4, r6, sl
 800fa3a:	42a5      	cmp	r5, r4
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	f040 8117 	bne.w	800fc72 <_dtoa_r+0x6e2>
 800fa44:	f7f0 fc2a 	bl	800029c <__adddf3>
 800fa48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	460d      	mov	r5, r1
 800fa50:	f7f1 f86a 	bl	8000b28 <__aeabi_dcmpgt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	f040 80f9 	bne.w	800fc4c <_dtoa_r+0x6bc>
 800fa5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	4629      	mov	r1, r5
 800fa62:	f7f1 f839 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa66:	b118      	cbz	r0, 800fa70 <_dtoa_r+0x4e0>
 800fa68:	f018 0f01 	tst.w	r8, #1
 800fa6c:	f040 80ee 	bne.w	800fc4c <_dtoa_r+0x6bc>
 800fa70:	4649      	mov	r1, r9
 800fa72:	4658      	mov	r0, fp
 800fa74:	f000 fc90 	bl	8010398 <_Bfree>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	7033      	strb	r3, [r6, #0]
 800fa7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa7e:	3701      	adds	r7, #1
 800fa80:	601f      	str	r7, [r3, #0]
 800fa82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f000 831d 	beq.w	80100c4 <_dtoa_r+0xb34>
 800fa8a:	601e      	str	r6, [r3, #0]
 800fa8c:	e31a      	b.n	80100c4 <_dtoa_r+0xb34>
 800fa8e:	07e2      	lsls	r2, r4, #31
 800fa90:	d505      	bpl.n	800fa9e <_dtoa_r+0x50e>
 800fa92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa96:	f7f0 fdb7 	bl	8000608 <__aeabi_dmul>
 800fa9a:	3601      	adds	r6, #1
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	1064      	asrs	r4, r4, #1
 800faa0:	3508      	adds	r5, #8
 800faa2:	e73f      	b.n	800f924 <_dtoa_r+0x394>
 800faa4:	2602      	movs	r6, #2
 800faa6:	e742      	b.n	800f92e <_dtoa_r+0x39e>
 800faa8:	9c07      	ldr	r4, [sp, #28]
 800faaa:	9704      	str	r7, [sp, #16]
 800faac:	e761      	b.n	800f972 <_dtoa_r+0x3e2>
 800faae:	4b27      	ldr	r3, [pc, #156]	@ (800fb4c <_dtoa_r+0x5bc>)
 800fab0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fab6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faba:	4454      	add	r4, sl
 800fabc:	2900      	cmp	r1, #0
 800fabe:	d053      	beq.n	800fb68 <_dtoa_r+0x5d8>
 800fac0:	4928      	ldr	r1, [pc, #160]	@ (800fb64 <_dtoa_r+0x5d4>)
 800fac2:	2000      	movs	r0, #0
 800fac4:	f7f0 feca 	bl	800085c <__aeabi_ddiv>
 800fac8:	4633      	mov	r3, r6
 800faca:	462a      	mov	r2, r5
 800facc:	f7f0 fbe4 	bl	8000298 <__aeabi_dsub>
 800fad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fad4:	4656      	mov	r6, sl
 800fad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fada:	f7f1 f845 	bl	8000b68 <__aeabi_d2iz>
 800fade:	4605      	mov	r5, r0
 800fae0:	f7f0 fd28 	bl	8000534 <__aeabi_i2d>
 800fae4:	4602      	mov	r2, r0
 800fae6:	460b      	mov	r3, r1
 800fae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faec:	f7f0 fbd4 	bl	8000298 <__aeabi_dsub>
 800faf0:	3530      	adds	r5, #48	@ 0x30
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fafa:	f806 5b01 	strb.w	r5, [r6], #1
 800fafe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb02:	f7f0 fff3 	bl	8000aec <__aeabi_dcmplt>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d171      	bne.n	800fbee <_dtoa_r+0x65e>
 800fb0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb0e:	4911      	ldr	r1, [pc, #68]	@ (800fb54 <_dtoa_r+0x5c4>)
 800fb10:	2000      	movs	r0, #0
 800fb12:	f7f0 fbc1 	bl	8000298 <__aeabi_dsub>
 800fb16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb1a:	f7f0 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	f040 8095 	bne.w	800fc4e <_dtoa_r+0x6be>
 800fb24:	42a6      	cmp	r6, r4
 800fb26:	f43f af50 	beq.w	800f9ca <_dtoa_r+0x43a>
 800fb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb58 <_dtoa_r+0x5c8>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	f7f0 fd69 	bl	8000608 <__aeabi_dmul>
 800fb36:	4b08      	ldr	r3, [pc, #32]	@ (800fb58 <_dtoa_r+0x5c8>)
 800fb38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb42:	f7f0 fd61 	bl	8000608 <__aeabi_dmul>
 800fb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb4a:	e7c4      	b.n	800fad6 <_dtoa_r+0x546>
 800fb4c:	08011448 	.word	0x08011448
 800fb50:	08011420 	.word	0x08011420
 800fb54:	3ff00000 	.word	0x3ff00000
 800fb58:	40240000 	.word	0x40240000
 800fb5c:	401c0000 	.word	0x401c0000
 800fb60:	40140000 	.word	0x40140000
 800fb64:	3fe00000 	.word	0x3fe00000
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f7f0 fd4c 	bl	8000608 <__aeabi_dmul>
 800fb70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb74:	9415      	str	r4, [sp, #84]	@ 0x54
 800fb76:	4656      	mov	r6, sl
 800fb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb7c:	f7f0 fff4 	bl	8000b68 <__aeabi_d2iz>
 800fb80:	4605      	mov	r5, r0
 800fb82:	f7f0 fcd7 	bl	8000534 <__aeabi_i2d>
 800fb86:	4602      	mov	r2, r0
 800fb88:	460b      	mov	r3, r1
 800fb8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb8e:	f7f0 fb83 	bl	8000298 <__aeabi_dsub>
 800fb92:	3530      	adds	r5, #48	@ 0x30
 800fb94:	f806 5b01 	strb.w	r5, [r6], #1
 800fb98:	4602      	mov	r2, r0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	42a6      	cmp	r6, r4
 800fb9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fba2:	f04f 0200 	mov.w	r2, #0
 800fba6:	d124      	bne.n	800fbf2 <_dtoa_r+0x662>
 800fba8:	4bac      	ldr	r3, [pc, #688]	@ (800fe5c <_dtoa_r+0x8cc>)
 800fbaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fbae:	f7f0 fb75 	bl	800029c <__adddf3>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbba:	f7f0 ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d145      	bne.n	800fc4e <_dtoa_r+0x6be>
 800fbc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fbc6:	49a5      	ldr	r1, [pc, #660]	@ (800fe5c <_dtoa_r+0x8cc>)
 800fbc8:	2000      	movs	r0, #0
 800fbca:	f7f0 fb65 	bl	8000298 <__aeabi_dsub>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbd6:	f7f0 ff89 	bl	8000aec <__aeabi_dcmplt>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	f43f aef5 	beq.w	800f9ca <_dtoa_r+0x43a>
 800fbe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fbe2:	1e73      	subs	r3, r6, #1
 800fbe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fbe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbea:	2b30      	cmp	r3, #48	@ 0x30
 800fbec:	d0f8      	beq.n	800fbe0 <_dtoa_r+0x650>
 800fbee:	9f04      	ldr	r7, [sp, #16]
 800fbf0:	e73e      	b.n	800fa70 <_dtoa_r+0x4e0>
 800fbf2:	4b9b      	ldr	r3, [pc, #620]	@ (800fe60 <_dtoa_r+0x8d0>)
 800fbf4:	f7f0 fd08 	bl	8000608 <__aeabi_dmul>
 800fbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbfc:	e7bc      	b.n	800fb78 <_dtoa_r+0x5e8>
 800fbfe:	d10c      	bne.n	800fc1a <_dtoa_r+0x68a>
 800fc00:	4b98      	ldr	r3, [pc, #608]	@ (800fe64 <_dtoa_r+0x8d4>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc08:	f7f0 fcfe 	bl	8000608 <__aeabi_dmul>
 800fc0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc10:	f7f0 ff80 	bl	8000b14 <__aeabi_dcmpge>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	f000 8157 	beq.w	800fec8 <_dtoa_r+0x938>
 800fc1a:	2400      	movs	r4, #0
 800fc1c:	4625      	mov	r5, r4
 800fc1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc20:	43db      	mvns	r3, r3
 800fc22:	9304      	str	r3, [sp, #16]
 800fc24:	4656      	mov	r6, sl
 800fc26:	2700      	movs	r7, #0
 800fc28:	4621      	mov	r1, r4
 800fc2a:	4658      	mov	r0, fp
 800fc2c:	f000 fbb4 	bl	8010398 <_Bfree>
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	d0dc      	beq.n	800fbee <_dtoa_r+0x65e>
 800fc34:	b12f      	cbz	r7, 800fc42 <_dtoa_r+0x6b2>
 800fc36:	42af      	cmp	r7, r5
 800fc38:	d003      	beq.n	800fc42 <_dtoa_r+0x6b2>
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	4658      	mov	r0, fp
 800fc3e:	f000 fbab 	bl	8010398 <_Bfree>
 800fc42:	4629      	mov	r1, r5
 800fc44:	4658      	mov	r0, fp
 800fc46:	f000 fba7 	bl	8010398 <_Bfree>
 800fc4a:	e7d0      	b.n	800fbee <_dtoa_r+0x65e>
 800fc4c:	9704      	str	r7, [sp, #16]
 800fc4e:	4633      	mov	r3, r6
 800fc50:	461e      	mov	r6, r3
 800fc52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc56:	2a39      	cmp	r2, #57	@ 0x39
 800fc58:	d107      	bne.n	800fc6a <_dtoa_r+0x6da>
 800fc5a:	459a      	cmp	sl, r3
 800fc5c:	d1f8      	bne.n	800fc50 <_dtoa_r+0x6c0>
 800fc5e:	9a04      	ldr	r2, [sp, #16]
 800fc60:	3201      	adds	r2, #1
 800fc62:	9204      	str	r2, [sp, #16]
 800fc64:	2230      	movs	r2, #48	@ 0x30
 800fc66:	f88a 2000 	strb.w	r2, [sl]
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	3201      	adds	r2, #1
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	e7bd      	b.n	800fbee <_dtoa_r+0x65e>
 800fc72:	4b7b      	ldr	r3, [pc, #492]	@ (800fe60 <_dtoa_r+0x8d0>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4604      	mov	r4, r0
 800fc80:	460d      	mov	r5, r1
 800fc82:	f7f0 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f43f aebb 	beq.w	800fa02 <_dtoa_r+0x472>
 800fc8c:	e6f0      	b.n	800fa70 <_dtoa_r+0x4e0>
 800fc8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc90:	2a00      	cmp	r2, #0
 800fc92:	f000 80db 	beq.w	800fe4c <_dtoa_r+0x8bc>
 800fc96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc98:	2a01      	cmp	r2, #1
 800fc9a:	f300 80bf 	bgt.w	800fe1c <_dtoa_r+0x88c>
 800fc9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	f000 80b7 	beq.w	800fe14 <_dtoa_r+0x884>
 800fca6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fcaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fcac:	4646      	mov	r6, r8
 800fcae:	9a08      	ldr	r2, [sp, #32]
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	441a      	add	r2, r3
 800fcb4:	4658      	mov	r0, fp
 800fcb6:	4498      	add	r8, r3
 800fcb8:	9208      	str	r2, [sp, #32]
 800fcba:	f000 fc21 	bl	8010500 <__i2b>
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	b15e      	cbz	r6, 800fcda <_dtoa_r+0x74a>
 800fcc2:	9b08      	ldr	r3, [sp, #32]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd08      	ble.n	800fcda <_dtoa_r+0x74a>
 800fcc8:	42b3      	cmp	r3, r6
 800fcca:	9a08      	ldr	r2, [sp, #32]
 800fccc:	bfa8      	it	ge
 800fcce:	4633      	movge	r3, r6
 800fcd0:	eba8 0803 	sub.w	r8, r8, r3
 800fcd4:	1af6      	subs	r6, r6, r3
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	9308      	str	r3, [sp, #32]
 800fcda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcdc:	b1f3      	cbz	r3, 800fd1c <_dtoa_r+0x78c>
 800fcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 80b7 	beq.w	800fe54 <_dtoa_r+0x8c4>
 800fce6:	b18c      	cbz	r4, 800fd0c <_dtoa_r+0x77c>
 800fce8:	4629      	mov	r1, r5
 800fcea:	4622      	mov	r2, r4
 800fcec:	4658      	mov	r0, fp
 800fcee:	f000 fcc7 	bl	8010680 <__pow5mult>
 800fcf2:	464a      	mov	r2, r9
 800fcf4:	4601      	mov	r1, r0
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	4658      	mov	r0, fp
 800fcfa:	f000 fc17 	bl	801052c <__multiply>
 800fcfe:	4649      	mov	r1, r9
 800fd00:	9004      	str	r0, [sp, #16]
 800fd02:	4658      	mov	r0, fp
 800fd04:	f000 fb48 	bl	8010398 <_Bfree>
 800fd08:	9b04      	ldr	r3, [sp, #16]
 800fd0a:	4699      	mov	r9, r3
 800fd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd0e:	1b1a      	subs	r2, r3, r4
 800fd10:	d004      	beq.n	800fd1c <_dtoa_r+0x78c>
 800fd12:	4649      	mov	r1, r9
 800fd14:	4658      	mov	r0, fp
 800fd16:	f000 fcb3 	bl	8010680 <__pow5mult>
 800fd1a:	4681      	mov	r9, r0
 800fd1c:	2101      	movs	r1, #1
 800fd1e:	4658      	mov	r0, fp
 800fd20:	f000 fbee 	bl	8010500 <__i2b>
 800fd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd26:	4604      	mov	r4, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 81cf 	beq.w	80100cc <_dtoa_r+0xb3c>
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4601      	mov	r1, r0
 800fd32:	4658      	mov	r0, fp
 800fd34:	f000 fca4 	bl	8010680 <__pow5mult>
 800fd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	4604      	mov	r4, r0
 800fd3e:	f300 8095 	bgt.w	800fe6c <_dtoa_r+0x8dc>
 800fd42:	9b02      	ldr	r3, [sp, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f040 8087 	bne.w	800fe58 <_dtoa_r+0x8c8>
 800fd4a:	9b03      	ldr	r3, [sp, #12]
 800fd4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f040 8089 	bne.w	800fe68 <_dtoa_r+0x8d8>
 800fd56:	9b03      	ldr	r3, [sp, #12]
 800fd58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd5c:	0d1b      	lsrs	r3, r3, #20
 800fd5e:	051b      	lsls	r3, r3, #20
 800fd60:	b12b      	cbz	r3, 800fd6e <_dtoa_r+0x7de>
 800fd62:	9b08      	ldr	r3, [sp, #32]
 800fd64:	3301      	adds	r3, #1
 800fd66:	9308      	str	r3, [sp, #32]
 800fd68:	f108 0801 	add.w	r8, r8, #1
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f000 81b0 	beq.w	80100d8 <_dtoa_r+0xb48>
 800fd78:	6923      	ldr	r3, [r4, #16]
 800fd7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd7e:	6918      	ldr	r0, [r3, #16]
 800fd80:	f000 fb72 	bl	8010468 <__hi0bits>
 800fd84:	f1c0 0020 	rsb	r0, r0, #32
 800fd88:	9b08      	ldr	r3, [sp, #32]
 800fd8a:	4418      	add	r0, r3
 800fd8c:	f010 001f 	ands.w	r0, r0, #31
 800fd90:	d077      	beq.n	800fe82 <_dtoa_r+0x8f2>
 800fd92:	f1c0 0320 	rsb	r3, r0, #32
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	dd6b      	ble.n	800fe72 <_dtoa_r+0x8e2>
 800fd9a:	9b08      	ldr	r3, [sp, #32]
 800fd9c:	f1c0 001c 	rsb	r0, r0, #28
 800fda0:	4403      	add	r3, r0
 800fda2:	4480      	add	r8, r0
 800fda4:	4406      	add	r6, r0
 800fda6:	9308      	str	r3, [sp, #32]
 800fda8:	f1b8 0f00 	cmp.w	r8, #0
 800fdac:	dd05      	ble.n	800fdba <_dtoa_r+0x82a>
 800fdae:	4649      	mov	r1, r9
 800fdb0:	4642      	mov	r2, r8
 800fdb2:	4658      	mov	r0, fp
 800fdb4:	f000 fcbe 	bl	8010734 <__lshift>
 800fdb8:	4681      	mov	r9, r0
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	dd05      	ble.n	800fdcc <_dtoa_r+0x83c>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4658      	mov	r0, fp
 800fdc6:	f000 fcb5 	bl	8010734 <__lshift>
 800fdca:	4604      	mov	r4, r0
 800fdcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d059      	beq.n	800fe86 <_dtoa_r+0x8f6>
 800fdd2:	4621      	mov	r1, r4
 800fdd4:	4648      	mov	r0, r9
 800fdd6:	f000 fd19 	bl	801080c <__mcmp>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	da53      	bge.n	800fe86 <_dtoa_r+0x8f6>
 800fdde:	1e7b      	subs	r3, r7, #1
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	4649      	mov	r1, r9
 800fde4:	2300      	movs	r3, #0
 800fde6:	220a      	movs	r2, #10
 800fde8:	4658      	mov	r0, fp
 800fdea:	f000 faf7 	bl	80103dc <__multadd>
 800fdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdf0:	4681      	mov	r9, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 8172 	beq.w	80100dc <_dtoa_r+0xb4c>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	220a      	movs	r2, #10
 800fdfe:	4658      	mov	r0, fp
 800fe00:	f000 faec 	bl	80103dc <__multadd>
 800fe04:	9b00      	ldr	r3, [sp, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	4605      	mov	r5, r0
 800fe0a:	dc67      	bgt.n	800fedc <_dtoa_r+0x94c>
 800fe0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	dc41      	bgt.n	800fe96 <_dtoa_r+0x906>
 800fe12:	e063      	b.n	800fedc <_dtoa_r+0x94c>
 800fe14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe1a:	e746      	b.n	800fcaa <_dtoa_r+0x71a>
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	1e5c      	subs	r4, r3, #1
 800fe20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe22:	42a3      	cmp	r3, r4
 800fe24:	bfbf      	itttt	lt
 800fe26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fe28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fe2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fe2c:	1ae3      	sublt	r3, r4, r3
 800fe2e:	bfb4      	ite	lt
 800fe30:	18d2      	addlt	r2, r2, r3
 800fe32:	1b1c      	subge	r4, r3, r4
 800fe34:	9b07      	ldr	r3, [sp, #28]
 800fe36:	bfbc      	itt	lt
 800fe38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fe3a:	2400      	movlt	r4, #0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	bfb5      	itete	lt
 800fe40:	eba8 0603 	sublt.w	r6, r8, r3
 800fe44:	9b07      	ldrge	r3, [sp, #28]
 800fe46:	2300      	movlt	r3, #0
 800fe48:	4646      	movge	r6, r8
 800fe4a:	e730      	b.n	800fcae <_dtoa_r+0x71e>
 800fe4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fe50:	4646      	mov	r6, r8
 800fe52:	e735      	b.n	800fcc0 <_dtoa_r+0x730>
 800fe54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe56:	e75c      	b.n	800fd12 <_dtoa_r+0x782>
 800fe58:	2300      	movs	r3, #0
 800fe5a:	e788      	b.n	800fd6e <_dtoa_r+0x7de>
 800fe5c:	3fe00000 	.word	0x3fe00000
 800fe60:	40240000 	.word	0x40240000
 800fe64:	40140000 	.word	0x40140000
 800fe68:	9b02      	ldr	r3, [sp, #8]
 800fe6a:	e780      	b.n	800fd6e <_dtoa_r+0x7de>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe70:	e782      	b.n	800fd78 <_dtoa_r+0x7e8>
 800fe72:	d099      	beq.n	800fda8 <_dtoa_r+0x818>
 800fe74:	9a08      	ldr	r2, [sp, #32]
 800fe76:	331c      	adds	r3, #28
 800fe78:	441a      	add	r2, r3
 800fe7a:	4498      	add	r8, r3
 800fe7c:	441e      	add	r6, r3
 800fe7e:	9208      	str	r2, [sp, #32]
 800fe80:	e792      	b.n	800fda8 <_dtoa_r+0x818>
 800fe82:	4603      	mov	r3, r0
 800fe84:	e7f6      	b.n	800fe74 <_dtoa_r+0x8e4>
 800fe86:	9b07      	ldr	r3, [sp, #28]
 800fe88:	9704      	str	r7, [sp, #16]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	dc20      	bgt.n	800fed0 <_dtoa_r+0x940>
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	dd1e      	ble.n	800fed4 <_dtoa_r+0x944>
 800fe96:	9b00      	ldr	r3, [sp, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f47f aec0 	bne.w	800fc1e <_dtoa_r+0x68e>
 800fe9e:	4621      	mov	r1, r4
 800fea0:	2205      	movs	r2, #5
 800fea2:	4658      	mov	r0, fp
 800fea4:	f000 fa9a 	bl	80103dc <__multadd>
 800fea8:	4601      	mov	r1, r0
 800feaa:	4604      	mov	r4, r0
 800feac:	4648      	mov	r0, r9
 800feae:	f000 fcad 	bl	801080c <__mcmp>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	f77f aeb3 	ble.w	800fc1e <_dtoa_r+0x68e>
 800feb8:	4656      	mov	r6, sl
 800feba:	2331      	movs	r3, #49	@ 0x31
 800febc:	f806 3b01 	strb.w	r3, [r6], #1
 800fec0:	9b04      	ldr	r3, [sp, #16]
 800fec2:	3301      	adds	r3, #1
 800fec4:	9304      	str	r3, [sp, #16]
 800fec6:	e6ae      	b.n	800fc26 <_dtoa_r+0x696>
 800fec8:	9c07      	ldr	r4, [sp, #28]
 800feca:	9704      	str	r7, [sp, #16]
 800fecc:	4625      	mov	r5, r4
 800fece:	e7f3      	b.n	800feb8 <_dtoa_r+0x928>
 800fed0:	9b07      	ldr	r3, [sp, #28]
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 8104 	beq.w	80100e4 <_dtoa_r+0xb54>
 800fedc:	2e00      	cmp	r6, #0
 800fede:	dd05      	ble.n	800feec <_dtoa_r+0x95c>
 800fee0:	4629      	mov	r1, r5
 800fee2:	4632      	mov	r2, r6
 800fee4:	4658      	mov	r0, fp
 800fee6:	f000 fc25 	bl	8010734 <__lshift>
 800feea:	4605      	mov	r5, r0
 800feec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d05a      	beq.n	800ffa8 <_dtoa_r+0xa18>
 800fef2:	6869      	ldr	r1, [r5, #4]
 800fef4:	4658      	mov	r0, fp
 800fef6:	f000 fa0f 	bl	8010318 <_Balloc>
 800fefa:	4606      	mov	r6, r0
 800fefc:	b928      	cbnz	r0, 800ff0a <_dtoa_r+0x97a>
 800fefe:	4b84      	ldr	r3, [pc, #528]	@ (8010110 <_dtoa_r+0xb80>)
 800ff00:	4602      	mov	r2, r0
 800ff02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ff06:	f7ff bb5a 	b.w	800f5be <_dtoa_r+0x2e>
 800ff0a:	692a      	ldr	r2, [r5, #16]
 800ff0c:	3202      	adds	r2, #2
 800ff0e:	0092      	lsls	r2, r2, #2
 800ff10:	f105 010c 	add.w	r1, r5, #12
 800ff14:	300c      	adds	r0, #12
 800ff16:	f001 f803 	bl	8010f20 <memcpy>
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	4631      	mov	r1, r6
 800ff1e:	4658      	mov	r0, fp
 800ff20:	f000 fc08 	bl	8010734 <__lshift>
 800ff24:	f10a 0301 	add.w	r3, sl, #1
 800ff28:	9307      	str	r3, [sp, #28]
 800ff2a:	9b00      	ldr	r3, [sp, #0]
 800ff2c:	4453      	add	r3, sl
 800ff2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff30:	9b02      	ldr	r3, [sp, #8]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	462f      	mov	r7, r5
 800ff38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	9b07      	ldr	r3, [sp, #28]
 800ff3e:	4621      	mov	r1, r4
 800ff40:	3b01      	subs	r3, #1
 800ff42:	4648      	mov	r0, r9
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	f7ff fa98 	bl	800f47a <quorem>
 800ff4a:	4639      	mov	r1, r7
 800ff4c:	9002      	str	r0, [sp, #8]
 800ff4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ff52:	4648      	mov	r0, r9
 800ff54:	f000 fc5a 	bl	801080c <__mcmp>
 800ff58:	462a      	mov	r2, r5
 800ff5a:	9008      	str	r0, [sp, #32]
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4658      	mov	r0, fp
 800ff60:	f000 fc70 	bl	8010844 <__mdiff>
 800ff64:	68c2      	ldr	r2, [r0, #12]
 800ff66:	4606      	mov	r6, r0
 800ff68:	bb02      	cbnz	r2, 800ffac <_dtoa_r+0xa1c>
 800ff6a:	4601      	mov	r1, r0
 800ff6c:	4648      	mov	r0, r9
 800ff6e:	f000 fc4d 	bl	801080c <__mcmp>
 800ff72:	4602      	mov	r2, r0
 800ff74:	4631      	mov	r1, r6
 800ff76:	4658      	mov	r0, fp
 800ff78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff7a:	f000 fa0d 	bl	8010398 <_Bfree>
 800ff7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff82:	9e07      	ldr	r6, [sp, #28]
 800ff84:	ea43 0102 	orr.w	r1, r3, r2
 800ff88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff8a:	4319      	orrs	r1, r3
 800ff8c:	d110      	bne.n	800ffb0 <_dtoa_r+0xa20>
 800ff8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ff92:	d029      	beq.n	800ffe8 <_dtoa_r+0xa58>
 800ff94:	9b08      	ldr	r3, [sp, #32]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	dd02      	ble.n	800ffa0 <_dtoa_r+0xa10>
 800ff9a:	9b02      	ldr	r3, [sp, #8]
 800ff9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ffa0:	9b00      	ldr	r3, [sp, #0]
 800ffa2:	f883 8000 	strb.w	r8, [r3]
 800ffa6:	e63f      	b.n	800fc28 <_dtoa_r+0x698>
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	e7bb      	b.n	800ff24 <_dtoa_r+0x994>
 800ffac:	2201      	movs	r2, #1
 800ffae:	e7e1      	b.n	800ff74 <_dtoa_r+0x9e4>
 800ffb0:	9b08      	ldr	r3, [sp, #32]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	db04      	blt.n	800ffc0 <_dtoa_r+0xa30>
 800ffb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffb8:	430b      	orrs	r3, r1
 800ffba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ffbc:	430b      	orrs	r3, r1
 800ffbe:	d120      	bne.n	8010002 <_dtoa_r+0xa72>
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	dded      	ble.n	800ffa0 <_dtoa_r+0xa10>
 800ffc4:	4649      	mov	r1, r9
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	4658      	mov	r0, fp
 800ffca:	f000 fbb3 	bl	8010734 <__lshift>
 800ffce:	4621      	mov	r1, r4
 800ffd0:	4681      	mov	r9, r0
 800ffd2:	f000 fc1b 	bl	801080c <__mcmp>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	dc03      	bgt.n	800ffe2 <_dtoa_r+0xa52>
 800ffda:	d1e1      	bne.n	800ffa0 <_dtoa_r+0xa10>
 800ffdc:	f018 0f01 	tst.w	r8, #1
 800ffe0:	d0de      	beq.n	800ffa0 <_dtoa_r+0xa10>
 800ffe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffe6:	d1d8      	bne.n	800ff9a <_dtoa_r+0xa0a>
 800ffe8:	9a00      	ldr	r2, [sp, #0]
 800ffea:	2339      	movs	r3, #57	@ 0x39
 800ffec:	7013      	strb	r3, [r2, #0]
 800ffee:	4633      	mov	r3, r6
 800fff0:	461e      	mov	r6, r3
 800fff2:	3b01      	subs	r3, #1
 800fff4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fff8:	2a39      	cmp	r2, #57	@ 0x39
 800fffa:	d052      	beq.n	80100a2 <_dtoa_r+0xb12>
 800fffc:	3201      	adds	r2, #1
 800fffe:	701a      	strb	r2, [r3, #0]
 8010000:	e612      	b.n	800fc28 <_dtoa_r+0x698>
 8010002:	2a00      	cmp	r2, #0
 8010004:	dd07      	ble.n	8010016 <_dtoa_r+0xa86>
 8010006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801000a:	d0ed      	beq.n	800ffe8 <_dtoa_r+0xa58>
 801000c:	9a00      	ldr	r2, [sp, #0]
 801000e:	f108 0301 	add.w	r3, r8, #1
 8010012:	7013      	strb	r3, [r2, #0]
 8010014:	e608      	b.n	800fc28 <_dtoa_r+0x698>
 8010016:	9b07      	ldr	r3, [sp, #28]
 8010018:	9a07      	ldr	r2, [sp, #28]
 801001a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801001e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010020:	4293      	cmp	r3, r2
 8010022:	d028      	beq.n	8010076 <_dtoa_r+0xae6>
 8010024:	4649      	mov	r1, r9
 8010026:	2300      	movs	r3, #0
 8010028:	220a      	movs	r2, #10
 801002a:	4658      	mov	r0, fp
 801002c:	f000 f9d6 	bl	80103dc <__multadd>
 8010030:	42af      	cmp	r7, r5
 8010032:	4681      	mov	r9, r0
 8010034:	f04f 0300 	mov.w	r3, #0
 8010038:	f04f 020a 	mov.w	r2, #10
 801003c:	4639      	mov	r1, r7
 801003e:	4658      	mov	r0, fp
 8010040:	d107      	bne.n	8010052 <_dtoa_r+0xac2>
 8010042:	f000 f9cb 	bl	80103dc <__multadd>
 8010046:	4607      	mov	r7, r0
 8010048:	4605      	mov	r5, r0
 801004a:	9b07      	ldr	r3, [sp, #28]
 801004c:	3301      	adds	r3, #1
 801004e:	9307      	str	r3, [sp, #28]
 8010050:	e774      	b.n	800ff3c <_dtoa_r+0x9ac>
 8010052:	f000 f9c3 	bl	80103dc <__multadd>
 8010056:	4629      	mov	r1, r5
 8010058:	4607      	mov	r7, r0
 801005a:	2300      	movs	r3, #0
 801005c:	220a      	movs	r2, #10
 801005e:	4658      	mov	r0, fp
 8010060:	f000 f9bc 	bl	80103dc <__multadd>
 8010064:	4605      	mov	r5, r0
 8010066:	e7f0      	b.n	801004a <_dtoa_r+0xaba>
 8010068:	9b00      	ldr	r3, [sp, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	bfcc      	ite	gt
 801006e:	461e      	movgt	r6, r3
 8010070:	2601      	movle	r6, #1
 8010072:	4456      	add	r6, sl
 8010074:	2700      	movs	r7, #0
 8010076:	4649      	mov	r1, r9
 8010078:	2201      	movs	r2, #1
 801007a:	4658      	mov	r0, fp
 801007c:	f000 fb5a 	bl	8010734 <__lshift>
 8010080:	4621      	mov	r1, r4
 8010082:	4681      	mov	r9, r0
 8010084:	f000 fbc2 	bl	801080c <__mcmp>
 8010088:	2800      	cmp	r0, #0
 801008a:	dcb0      	bgt.n	800ffee <_dtoa_r+0xa5e>
 801008c:	d102      	bne.n	8010094 <_dtoa_r+0xb04>
 801008e:	f018 0f01 	tst.w	r8, #1
 8010092:	d1ac      	bne.n	800ffee <_dtoa_r+0xa5e>
 8010094:	4633      	mov	r3, r6
 8010096:	461e      	mov	r6, r3
 8010098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801009c:	2a30      	cmp	r2, #48	@ 0x30
 801009e:	d0fa      	beq.n	8010096 <_dtoa_r+0xb06>
 80100a0:	e5c2      	b.n	800fc28 <_dtoa_r+0x698>
 80100a2:	459a      	cmp	sl, r3
 80100a4:	d1a4      	bne.n	800fff0 <_dtoa_r+0xa60>
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	3301      	adds	r3, #1
 80100aa:	9304      	str	r3, [sp, #16]
 80100ac:	2331      	movs	r3, #49	@ 0x31
 80100ae:	f88a 3000 	strb.w	r3, [sl]
 80100b2:	e5b9      	b.n	800fc28 <_dtoa_r+0x698>
 80100b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010114 <_dtoa_r+0xb84>
 80100ba:	b11b      	cbz	r3, 80100c4 <_dtoa_r+0xb34>
 80100bc:	f10a 0308 	add.w	r3, sl, #8
 80100c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	4650      	mov	r0, sl
 80100c6:	b019      	add	sp, #100	@ 0x64
 80100c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	f77f ae37 	ble.w	800fd42 <_dtoa_r+0x7b2>
 80100d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80100d8:	2001      	movs	r0, #1
 80100da:	e655      	b.n	800fd88 <_dtoa_r+0x7f8>
 80100dc:	9b00      	ldr	r3, [sp, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f77f aed6 	ble.w	800fe90 <_dtoa_r+0x900>
 80100e4:	4656      	mov	r6, sl
 80100e6:	4621      	mov	r1, r4
 80100e8:	4648      	mov	r0, r9
 80100ea:	f7ff f9c6 	bl	800f47a <quorem>
 80100ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80100f2:	f806 8b01 	strb.w	r8, [r6], #1
 80100f6:	9b00      	ldr	r3, [sp, #0]
 80100f8:	eba6 020a 	sub.w	r2, r6, sl
 80100fc:	4293      	cmp	r3, r2
 80100fe:	ddb3      	ble.n	8010068 <_dtoa_r+0xad8>
 8010100:	4649      	mov	r1, r9
 8010102:	2300      	movs	r3, #0
 8010104:	220a      	movs	r2, #10
 8010106:	4658      	mov	r0, fp
 8010108:	f000 f968 	bl	80103dc <__multadd>
 801010c:	4681      	mov	r9, r0
 801010e:	e7ea      	b.n	80100e6 <_dtoa_r+0xb56>
 8010110:	080113a8 	.word	0x080113a8
 8010114:	0801132c 	.word	0x0801132c

08010118 <_free_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4605      	mov	r5, r0
 801011c:	2900      	cmp	r1, #0
 801011e:	d041      	beq.n	80101a4 <_free_r+0x8c>
 8010120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010124:	1f0c      	subs	r4, r1, #4
 8010126:	2b00      	cmp	r3, #0
 8010128:	bfb8      	it	lt
 801012a:	18e4      	addlt	r4, r4, r3
 801012c:	f000 f8e8 	bl	8010300 <__malloc_lock>
 8010130:	4a1d      	ldr	r2, [pc, #116]	@ (80101a8 <_free_r+0x90>)
 8010132:	6813      	ldr	r3, [r2, #0]
 8010134:	b933      	cbnz	r3, 8010144 <_free_r+0x2c>
 8010136:	6063      	str	r3, [r4, #4]
 8010138:	6014      	str	r4, [r2, #0]
 801013a:	4628      	mov	r0, r5
 801013c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010140:	f000 b8e4 	b.w	801030c <__malloc_unlock>
 8010144:	42a3      	cmp	r3, r4
 8010146:	d908      	bls.n	801015a <_free_r+0x42>
 8010148:	6820      	ldr	r0, [r4, #0]
 801014a:	1821      	adds	r1, r4, r0
 801014c:	428b      	cmp	r3, r1
 801014e:	bf01      	itttt	eq
 8010150:	6819      	ldreq	r1, [r3, #0]
 8010152:	685b      	ldreq	r3, [r3, #4]
 8010154:	1809      	addeq	r1, r1, r0
 8010156:	6021      	streq	r1, [r4, #0]
 8010158:	e7ed      	b.n	8010136 <_free_r+0x1e>
 801015a:	461a      	mov	r2, r3
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	b10b      	cbz	r3, 8010164 <_free_r+0x4c>
 8010160:	42a3      	cmp	r3, r4
 8010162:	d9fa      	bls.n	801015a <_free_r+0x42>
 8010164:	6811      	ldr	r1, [r2, #0]
 8010166:	1850      	adds	r0, r2, r1
 8010168:	42a0      	cmp	r0, r4
 801016a:	d10b      	bne.n	8010184 <_free_r+0x6c>
 801016c:	6820      	ldr	r0, [r4, #0]
 801016e:	4401      	add	r1, r0
 8010170:	1850      	adds	r0, r2, r1
 8010172:	4283      	cmp	r3, r0
 8010174:	6011      	str	r1, [r2, #0]
 8010176:	d1e0      	bne.n	801013a <_free_r+0x22>
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	6053      	str	r3, [r2, #4]
 801017e:	4408      	add	r0, r1
 8010180:	6010      	str	r0, [r2, #0]
 8010182:	e7da      	b.n	801013a <_free_r+0x22>
 8010184:	d902      	bls.n	801018c <_free_r+0x74>
 8010186:	230c      	movs	r3, #12
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	e7d6      	b.n	801013a <_free_r+0x22>
 801018c:	6820      	ldr	r0, [r4, #0]
 801018e:	1821      	adds	r1, r4, r0
 8010190:	428b      	cmp	r3, r1
 8010192:	bf04      	itt	eq
 8010194:	6819      	ldreq	r1, [r3, #0]
 8010196:	685b      	ldreq	r3, [r3, #4]
 8010198:	6063      	str	r3, [r4, #4]
 801019a:	bf04      	itt	eq
 801019c:	1809      	addeq	r1, r1, r0
 801019e:	6021      	streq	r1, [r4, #0]
 80101a0:	6054      	str	r4, [r2, #4]
 80101a2:	e7ca      	b.n	801013a <_free_r+0x22>
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
 80101a6:	bf00      	nop
 80101a8:	2000226c 	.word	0x2000226c

080101ac <malloc>:
 80101ac:	4b02      	ldr	r3, [pc, #8]	@ (80101b8 <malloc+0xc>)
 80101ae:	4601      	mov	r1, r0
 80101b0:	6818      	ldr	r0, [r3, #0]
 80101b2:	f000 b825 	b.w	8010200 <_malloc_r>
 80101b6:	bf00      	nop
 80101b8:	20000134 	.word	0x20000134

080101bc <sbrk_aligned>:
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	4e0f      	ldr	r6, [pc, #60]	@ (80101fc <sbrk_aligned+0x40>)
 80101c0:	460c      	mov	r4, r1
 80101c2:	6831      	ldr	r1, [r6, #0]
 80101c4:	4605      	mov	r5, r0
 80101c6:	b911      	cbnz	r1, 80101ce <sbrk_aligned+0x12>
 80101c8:	f000 fe9a 	bl	8010f00 <_sbrk_r>
 80101cc:	6030      	str	r0, [r6, #0]
 80101ce:	4621      	mov	r1, r4
 80101d0:	4628      	mov	r0, r5
 80101d2:	f000 fe95 	bl	8010f00 <_sbrk_r>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	d103      	bne.n	80101e2 <sbrk_aligned+0x26>
 80101da:	f04f 34ff 	mov.w	r4, #4294967295
 80101de:	4620      	mov	r0, r4
 80101e0:	bd70      	pop	{r4, r5, r6, pc}
 80101e2:	1cc4      	adds	r4, r0, #3
 80101e4:	f024 0403 	bic.w	r4, r4, #3
 80101e8:	42a0      	cmp	r0, r4
 80101ea:	d0f8      	beq.n	80101de <sbrk_aligned+0x22>
 80101ec:	1a21      	subs	r1, r4, r0
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 fe86 	bl	8010f00 <_sbrk_r>
 80101f4:	3001      	adds	r0, #1
 80101f6:	d1f2      	bne.n	80101de <sbrk_aligned+0x22>
 80101f8:	e7ef      	b.n	80101da <sbrk_aligned+0x1e>
 80101fa:	bf00      	nop
 80101fc:	20002268 	.word	0x20002268

08010200 <_malloc_r>:
 8010200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010204:	1ccd      	adds	r5, r1, #3
 8010206:	f025 0503 	bic.w	r5, r5, #3
 801020a:	3508      	adds	r5, #8
 801020c:	2d0c      	cmp	r5, #12
 801020e:	bf38      	it	cc
 8010210:	250c      	movcc	r5, #12
 8010212:	2d00      	cmp	r5, #0
 8010214:	4606      	mov	r6, r0
 8010216:	db01      	blt.n	801021c <_malloc_r+0x1c>
 8010218:	42a9      	cmp	r1, r5
 801021a:	d904      	bls.n	8010226 <_malloc_r+0x26>
 801021c:	230c      	movs	r3, #12
 801021e:	6033      	str	r3, [r6, #0]
 8010220:	2000      	movs	r0, #0
 8010222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80102fc <_malloc_r+0xfc>
 801022a:	f000 f869 	bl	8010300 <__malloc_lock>
 801022e:	f8d8 3000 	ldr.w	r3, [r8]
 8010232:	461c      	mov	r4, r3
 8010234:	bb44      	cbnz	r4, 8010288 <_malloc_r+0x88>
 8010236:	4629      	mov	r1, r5
 8010238:	4630      	mov	r0, r6
 801023a:	f7ff ffbf 	bl	80101bc <sbrk_aligned>
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	4604      	mov	r4, r0
 8010242:	d158      	bne.n	80102f6 <_malloc_r+0xf6>
 8010244:	f8d8 4000 	ldr.w	r4, [r8]
 8010248:	4627      	mov	r7, r4
 801024a:	2f00      	cmp	r7, #0
 801024c:	d143      	bne.n	80102d6 <_malloc_r+0xd6>
 801024e:	2c00      	cmp	r4, #0
 8010250:	d04b      	beq.n	80102ea <_malloc_r+0xea>
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	4639      	mov	r1, r7
 8010256:	4630      	mov	r0, r6
 8010258:	eb04 0903 	add.w	r9, r4, r3
 801025c:	f000 fe50 	bl	8010f00 <_sbrk_r>
 8010260:	4581      	cmp	r9, r0
 8010262:	d142      	bne.n	80102ea <_malloc_r+0xea>
 8010264:	6821      	ldr	r1, [r4, #0]
 8010266:	1a6d      	subs	r5, r5, r1
 8010268:	4629      	mov	r1, r5
 801026a:	4630      	mov	r0, r6
 801026c:	f7ff ffa6 	bl	80101bc <sbrk_aligned>
 8010270:	3001      	adds	r0, #1
 8010272:	d03a      	beq.n	80102ea <_malloc_r+0xea>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	442b      	add	r3, r5
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	f8d8 3000 	ldr.w	r3, [r8]
 801027e:	685a      	ldr	r2, [r3, #4]
 8010280:	bb62      	cbnz	r2, 80102dc <_malloc_r+0xdc>
 8010282:	f8c8 7000 	str.w	r7, [r8]
 8010286:	e00f      	b.n	80102a8 <_malloc_r+0xa8>
 8010288:	6822      	ldr	r2, [r4, #0]
 801028a:	1b52      	subs	r2, r2, r5
 801028c:	d420      	bmi.n	80102d0 <_malloc_r+0xd0>
 801028e:	2a0b      	cmp	r2, #11
 8010290:	d917      	bls.n	80102c2 <_malloc_r+0xc2>
 8010292:	1961      	adds	r1, r4, r5
 8010294:	42a3      	cmp	r3, r4
 8010296:	6025      	str	r5, [r4, #0]
 8010298:	bf18      	it	ne
 801029a:	6059      	strne	r1, [r3, #4]
 801029c:	6863      	ldr	r3, [r4, #4]
 801029e:	bf08      	it	eq
 80102a0:	f8c8 1000 	streq.w	r1, [r8]
 80102a4:	5162      	str	r2, [r4, r5]
 80102a6:	604b      	str	r3, [r1, #4]
 80102a8:	4630      	mov	r0, r6
 80102aa:	f000 f82f 	bl	801030c <__malloc_unlock>
 80102ae:	f104 000b 	add.w	r0, r4, #11
 80102b2:	1d23      	adds	r3, r4, #4
 80102b4:	f020 0007 	bic.w	r0, r0, #7
 80102b8:	1ac2      	subs	r2, r0, r3
 80102ba:	bf1c      	itt	ne
 80102bc:	1a1b      	subne	r3, r3, r0
 80102be:	50a3      	strne	r3, [r4, r2]
 80102c0:	e7af      	b.n	8010222 <_malloc_r+0x22>
 80102c2:	6862      	ldr	r2, [r4, #4]
 80102c4:	42a3      	cmp	r3, r4
 80102c6:	bf0c      	ite	eq
 80102c8:	f8c8 2000 	streq.w	r2, [r8]
 80102cc:	605a      	strne	r2, [r3, #4]
 80102ce:	e7eb      	b.n	80102a8 <_malloc_r+0xa8>
 80102d0:	4623      	mov	r3, r4
 80102d2:	6864      	ldr	r4, [r4, #4]
 80102d4:	e7ae      	b.n	8010234 <_malloc_r+0x34>
 80102d6:	463c      	mov	r4, r7
 80102d8:	687f      	ldr	r7, [r7, #4]
 80102da:	e7b6      	b.n	801024a <_malloc_r+0x4a>
 80102dc:	461a      	mov	r2, r3
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	42a3      	cmp	r3, r4
 80102e2:	d1fb      	bne.n	80102dc <_malloc_r+0xdc>
 80102e4:	2300      	movs	r3, #0
 80102e6:	6053      	str	r3, [r2, #4]
 80102e8:	e7de      	b.n	80102a8 <_malloc_r+0xa8>
 80102ea:	230c      	movs	r3, #12
 80102ec:	6033      	str	r3, [r6, #0]
 80102ee:	4630      	mov	r0, r6
 80102f0:	f000 f80c 	bl	801030c <__malloc_unlock>
 80102f4:	e794      	b.n	8010220 <_malloc_r+0x20>
 80102f6:	6005      	str	r5, [r0, #0]
 80102f8:	e7d6      	b.n	80102a8 <_malloc_r+0xa8>
 80102fa:	bf00      	nop
 80102fc:	2000226c 	.word	0x2000226c

08010300 <__malloc_lock>:
 8010300:	4801      	ldr	r0, [pc, #4]	@ (8010308 <__malloc_lock+0x8>)
 8010302:	f7ff b8b8 	b.w	800f476 <__retarget_lock_acquire_recursive>
 8010306:	bf00      	nop
 8010308:	20002264 	.word	0x20002264

0801030c <__malloc_unlock>:
 801030c:	4801      	ldr	r0, [pc, #4]	@ (8010314 <__malloc_unlock+0x8>)
 801030e:	f7ff b8b3 	b.w	800f478 <__retarget_lock_release_recursive>
 8010312:	bf00      	nop
 8010314:	20002264 	.word	0x20002264

08010318 <_Balloc>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	69c6      	ldr	r6, [r0, #28]
 801031c:	4604      	mov	r4, r0
 801031e:	460d      	mov	r5, r1
 8010320:	b976      	cbnz	r6, 8010340 <_Balloc+0x28>
 8010322:	2010      	movs	r0, #16
 8010324:	f7ff ff42 	bl	80101ac <malloc>
 8010328:	4602      	mov	r2, r0
 801032a:	61e0      	str	r0, [r4, #28]
 801032c:	b920      	cbnz	r0, 8010338 <_Balloc+0x20>
 801032e:	4b18      	ldr	r3, [pc, #96]	@ (8010390 <_Balloc+0x78>)
 8010330:	4818      	ldr	r0, [pc, #96]	@ (8010394 <_Balloc+0x7c>)
 8010332:	216b      	movs	r1, #107	@ 0x6b
 8010334:	f000 fe02 	bl	8010f3c <__assert_func>
 8010338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801033c:	6006      	str	r6, [r0, #0]
 801033e:	60c6      	str	r6, [r0, #12]
 8010340:	69e6      	ldr	r6, [r4, #28]
 8010342:	68f3      	ldr	r3, [r6, #12]
 8010344:	b183      	cbz	r3, 8010368 <_Balloc+0x50>
 8010346:	69e3      	ldr	r3, [r4, #28]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801034e:	b9b8      	cbnz	r0, 8010380 <_Balloc+0x68>
 8010350:	2101      	movs	r1, #1
 8010352:	fa01 f605 	lsl.w	r6, r1, r5
 8010356:	1d72      	adds	r2, r6, #5
 8010358:	0092      	lsls	r2, r2, #2
 801035a:	4620      	mov	r0, r4
 801035c:	f000 fe0c 	bl	8010f78 <_calloc_r>
 8010360:	b160      	cbz	r0, 801037c <_Balloc+0x64>
 8010362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010366:	e00e      	b.n	8010386 <_Balloc+0x6e>
 8010368:	2221      	movs	r2, #33	@ 0x21
 801036a:	2104      	movs	r1, #4
 801036c:	4620      	mov	r0, r4
 801036e:	f000 fe03 	bl	8010f78 <_calloc_r>
 8010372:	69e3      	ldr	r3, [r4, #28]
 8010374:	60f0      	str	r0, [r6, #12]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1e4      	bne.n	8010346 <_Balloc+0x2e>
 801037c:	2000      	movs	r0, #0
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	6802      	ldr	r2, [r0, #0]
 8010382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010386:	2300      	movs	r3, #0
 8010388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801038c:	e7f7      	b.n	801037e <_Balloc+0x66>
 801038e:	bf00      	nop
 8010390:	08011339 	.word	0x08011339
 8010394:	080113b9 	.word	0x080113b9

08010398 <_Bfree>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	69c6      	ldr	r6, [r0, #28]
 801039c:	4605      	mov	r5, r0
 801039e:	460c      	mov	r4, r1
 80103a0:	b976      	cbnz	r6, 80103c0 <_Bfree+0x28>
 80103a2:	2010      	movs	r0, #16
 80103a4:	f7ff ff02 	bl	80101ac <malloc>
 80103a8:	4602      	mov	r2, r0
 80103aa:	61e8      	str	r0, [r5, #28]
 80103ac:	b920      	cbnz	r0, 80103b8 <_Bfree+0x20>
 80103ae:	4b09      	ldr	r3, [pc, #36]	@ (80103d4 <_Bfree+0x3c>)
 80103b0:	4809      	ldr	r0, [pc, #36]	@ (80103d8 <_Bfree+0x40>)
 80103b2:	218f      	movs	r1, #143	@ 0x8f
 80103b4:	f000 fdc2 	bl	8010f3c <__assert_func>
 80103b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103bc:	6006      	str	r6, [r0, #0]
 80103be:	60c6      	str	r6, [r0, #12]
 80103c0:	b13c      	cbz	r4, 80103d2 <_Bfree+0x3a>
 80103c2:	69eb      	ldr	r3, [r5, #28]
 80103c4:	6862      	ldr	r2, [r4, #4]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103cc:	6021      	str	r1, [r4, #0]
 80103ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	08011339 	.word	0x08011339
 80103d8:	080113b9 	.word	0x080113b9

080103dc <__multadd>:
 80103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	690d      	ldr	r5, [r1, #16]
 80103e2:	4607      	mov	r7, r0
 80103e4:	460c      	mov	r4, r1
 80103e6:	461e      	mov	r6, r3
 80103e8:	f101 0c14 	add.w	ip, r1, #20
 80103ec:	2000      	movs	r0, #0
 80103ee:	f8dc 3000 	ldr.w	r3, [ip]
 80103f2:	b299      	uxth	r1, r3
 80103f4:	fb02 6101 	mla	r1, r2, r1, r6
 80103f8:	0c1e      	lsrs	r6, r3, #16
 80103fa:	0c0b      	lsrs	r3, r1, #16
 80103fc:	fb02 3306 	mla	r3, r2, r6, r3
 8010400:	b289      	uxth	r1, r1
 8010402:	3001      	adds	r0, #1
 8010404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010408:	4285      	cmp	r5, r0
 801040a:	f84c 1b04 	str.w	r1, [ip], #4
 801040e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010412:	dcec      	bgt.n	80103ee <__multadd+0x12>
 8010414:	b30e      	cbz	r6, 801045a <__multadd+0x7e>
 8010416:	68a3      	ldr	r3, [r4, #8]
 8010418:	42ab      	cmp	r3, r5
 801041a:	dc19      	bgt.n	8010450 <__multadd+0x74>
 801041c:	6861      	ldr	r1, [r4, #4]
 801041e:	4638      	mov	r0, r7
 8010420:	3101      	adds	r1, #1
 8010422:	f7ff ff79 	bl	8010318 <_Balloc>
 8010426:	4680      	mov	r8, r0
 8010428:	b928      	cbnz	r0, 8010436 <__multadd+0x5a>
 801042a:	4602      	mov	r2, r0
 801042c:	4b0c      	ldr	r3, [pc, #48]	@ (8010460 <__multadd+0x84>)
 801042e:	480d      	ldr	r0, [pc, #52]	@ (8010464 <__multadd+0x88>)
 8010430:	21ba      	movs	r1, #186	@ 0xba
 8010432:	f000 fd83 	bl	8010f3c <__assert_func>
 8010436:	6922      	ldr	r2, [r4, #16]
 8010438:	3202      	adds	r2, #2
 801043a:	f104 010c 	add.w	r1, r4, #12
 801043e:	0092      	lsls	r2, r2, #2
 8010440:	300c      	adds	r0, #12
 8010442:	f000 fd6d 	bl	8010f20 <memcpy>
 8010446:	4621      	mov	r1, r4
 8010448:	4638      	mov	r0, r7
 801044a:	f7ff ffa5 	bl	8010398 <_Bfree>
 801044e:	4644      	mov	r4, r8
 8010450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010454:	3501      	adds	r5, #1
 8010456:	615e      	str	r6, [r3, #20]
 8010458:	6125      	str	r5, [r4, #16]
 801045a:	4620      	mov	r0, r4
 801045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010460:	080113a8 	.word	0x080113a8
 8010464:	080113b9 	.word	0x080113b9

08010468 <__hi0bits>:
 8010468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801046c:	4603      	mov	r3, r0
 801046e:	bf36      	itet	cc
 8010470:	0403      	lslcc	r3, r0, #16
 8010472:	2000      	movcs	r0, #0
 8010474:	2010      	movcc	r0, #16
 8010476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801047a:	bf3c      	itt	cc
 801047c:	021b      	lslcc	r3, r3, #8
 801047e:	3008      	addcc	r0, #8
 8010480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010484:	bf3c      	itt	cc
 8010486:	011b      	lslcc	r3, r3, #4
 8010488:	3004      	addcc	r0, #4
 801048a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801048e:	bf3c      	itt	cc
 8010490:	009b      	lslcc	r3, r3, #2
 8010492:	3002      	addcc	r0, #2
 8010494:	2b00      	cmp	r3, #0
 8010496:	db05      	blt.n	80104a4 <__hi0bits+0x3c>
 8010498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801049c:	f100 0001 	add.w	r0, r0, #1
 80104a0:	bf08      	it	eq
 80104a2:	2020      	moveq	r0, #32
 80104a4:	4770      	bx	lr

080104a6 <__lo0bits>:
 80104a6:	6803      	ldr	r3, [r0, #0]
 80104a8:	4602      	mov	r2, r0
 80104aa:	f013 0007 	ands.w	r0, r3, #7
 80104ae:	d00b      	beq.n	80104c8 <__lo0bits+0x22>
 80104b0:	07d9      	lsls	r1, r3, #31
 80104b2:	d421      	bmi.n	80104f8 <__lo0bits+0x52>
 80104b4:	0798      	lsls	r0, r3, #30
 80104b6:	bf49      	itett	mi
 80104b8:	085b      	lsrmi	r3, r3, #1
 80104ba:	089b      	lsrpl	r3, r3, #2
 80104bc:	2001      	movmi	r0, #1
 80104be:	6013      	strmi	r3, [r2, #0]
 80104c0:	bf5c      	itt	pl
 80104c2:	6013      	strpl	r3, [r2, #0]
 80104c4:	2002      	movpl	r0, #2
 80104c6:	4770      	bx	lr
 80104c8:	b299      	uxth	r1, r3
 80104ca:	b909      	cbnz	r1, 80104d0 <__lo0bits+0x2a>
 80104cc:	0c1b      	lsrs	r3, r3, #16
 80104ce:	2010      	movs	r0, #16
 80104d0:	b2d9      	uxtb	r1, r3
 80104d2:	b909      	cbnz	r1, 80104d8 <__lo0bits+0x32>
 80104d4:	3008      	adds	r0, #8
 80104d6:	0a1b      	lsrs	r3, r3, #8
 80104d8:	0719      	lsls	r1, r3, #28
 80104da:	bf04      	itt	eq
 80104dc:	091b      	lsreq	r3, r3, #4
 80104de:	3004      	addeq	r0, #4
 80104e0:	0799      	lsls	r1, r3, #30
 80104e2:	bf04      	itt	eq
 80104e4:	089b      	lsreq	r3, r3, #2
 80104e6:	3002      	addeq	r0, #2
 80104e8:	07d9      	lsls	r1, r3, #31
 80104ea:	d403      	bmi.n	80104f4 <__lo0bits+0x4e>
 80104ec:	085b      	lsrs	r3, r3, #1
 80104ee:	f100 0001 	add.w	r0, r0, #1
 80104f2:	d003      	beq.n	80104fc <__lo0bits+0x56>
 80104f4:	6013      	str	r3, [r2, #0]
 80104f6:	4770      	bx	lr
 80104f8:	2000      	movs	r0, #0
 80104fa:	4770      	bx	lr
 80104fc:	2020      	movs	r0, #32
 80104fe:	4770      	bx	lr

08010500 <__i2b>:
 8010500:	b510      	push	{r4, lr}
 8010502:	460c      	mov	r4, r1
 8010504:	2101      	movs	r1, #1
 8010506:	f7ff ff07 	bl	8010318 <_Balloc>
 801050a:	4602      	mov	r2, r0
 801050c:	b928      	cbnz	r0, 801051a <__i2b+0x1a>
 801050e:	4b05      	ldr	r3, [pc, #20]	@ (8010524 <__i2b+0x24>)
 8010510:	4805      	ldr	r0, [pc, #20]	@ (8010528 <__i2b+0x28>)
 8010512:	f240 1145 	movw	r1, #325	@ 0x145
 8010516:	f000 fd11 	bl	8010f3c <__assert_func>
 801051a:	2301      	movs	r3, #1
 801051c:	6144      	str	r4, [r0, #20]
 801051e:	6103      	str	r3, [r0, #16]
 8010520:	bd10      	pop	{r4, pc}
 8010522:	bf00      	nop
 8010524:	080113a8 	.word	0x080113a8
 8010528:	080113b9 	.word	0x080113b9

0801052c <__multiply>:
 801052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010530:	4614      	mov	r4, r2
 8010532:	690a      	ldr	r2, [r1, #16]
 8010534:	6923      	ldr	r3, [r4, #16]
 8010536:	429a      	cmp	r2, r3
 8010538:	bfa8      	it	ge
 801053a:	4623      	movge	r3, r4
 801053c:	460f      	mov	r7, r1
 801053e:	bfa4      	itt	ge
 8010540:	460c      	movge	r4, r1
 8010542:	461f      	movge	r7, r3
 8010544:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010548:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801054c:	68a3      	ldr	r3, [r4, #8]
 801054e:	6861      	ldr	r1, [r4, #4]
 8010550:	eb0a 0609 	add.w	r6, sl, r9
 8010554:	42b3      	cmp	r3, r6
 8010556:	b085      	sub	sp, #20
 8010558:	bfb8      	it	lt
 801055a:	3101      	addlt	r1, #1
 801055c:	f7ff fedc 	bl	8010318 <_Balloc>
 8010560:	b930      	cbnz	r0, 8010570 <__multiply+0x44>
 8010562:	4602      	mov	r2, r0
 8010564:	4b44      	ldr	r3, [pc, #272]	@ (8010678 <__multiply+0x14c>)
 8010566:	4845      	ldr	r0, [pc, #276]	@ (801067c <__multiply+0x150>)
 8010568:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801056c:	f000 fce6 	bl	8010f3c <__assert_func>
 8010570:	f100 0514 	add.w	r5, r0, #20
 8010574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010578:	462b      	mov	r3, r5
 801057a:	2200      	movs	r2, #0
 801057c:	4543      	cmp	r3, r8
 801057e:	d321      	bcc.n	80105c4 <__multiply+0x98>
 8010580:	f107 0114 	add.w	r1, r7, #20
 8010584:	f104 0214 	add.w	r2, r4, #20
 8010588:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801058c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010590:	9302      	str	r3, [sp, #8]
 8010592:	1b13      	subs	r3, r2, r4
 8010594:	3b15      	subs	r3, #21
 8010596:	f023 0303 	bic.w	r3, r3, #3
 801059a:	3304      	adds	r3, #4
 801059c:	f104 0715 	add.w	r7, r4, #21
 80105a0:	42ba      	cmp	r2, r7
 80105a2:	bf38      	it	cc
 80105a4:	2304      	movcc	r3, #4
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	9103      	str	r1, [sp, #12]
 80105ac:	428b      	cmp	r3, r1
 80105ae:	d80c      	bhi.n	80105ca <__multiply+0x9e>
 80105b0:	2e00      	cmp	r6, #0
 80105b2:	dd03      	ble.n	80105bc <__multiply+0x90>
 80105b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d05b      	beq.n	8010674 <__multiply+0x148>
 80105bc:	6106      	str	r6, [r0, #16]
 80105be:	b005      	add	sp, #20
 80105c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c4:	f843 2b04 	str.w	r2, [r3], #4
 80105c8:	e7d8      	b.n	801057c <__multiply+0x50>
 80105ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80105ce:	f1ba 0f00 	cmp.w	sl, #0
 80105d2:	d024      	beq.n	801061e <__multiply+0xf2>
 80105d4:	f104 0e14 	add.w	lr, r4, #20
 80105d8:	46a9      	mov	r9, r5
 80105da:	f04f 0c00 	mov.w	ip, #0
 80105de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105e2:	f8d9 3000 	ldr.w	r3, [r9]
 80105e6:	fa1f fb87 	uxth.w	fp, r7
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80105f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80105f4:	f8d9 7000 	ldr.w	r7, [r9]
 80105f8:	4463      	add	r3, ip
 80105fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80105fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8010602:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010606:	b29b      	uxth	r3, r3
 8010608:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801060c:	4572      	cmp	r2, lr
 801060e:	f849 3b04 	str.w	r3, [r9], #4
 8010612:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010616:	d8e2      	bhi.n	80105de <__multiply+0xb2>
 8010618:	9b01      	ldr	r3, [sp, #4]
 801061a:	f845 c003 	str.w	ip, [r5, r3]
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010624:	3104      	adds	r1, #4
 8010626:	f1b9 0f00 	cmp.w	r9, #0
 801062a:	d021      	beq.n	8010670 <__multiply+0x144>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	f104 0c14 	add.w	ip, r4, #20
 8010632:	46ae      	mov	lr, r5
 8010634:	f04f 0a00 	mov.w	sl, #0
 8010638:	f8bc b000 	ldrh.w	fp, [ip]
 801063c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010640:	fb09 770b 	mla	r7, r9, fp, r7
 8010644:	4457      	add	r7, sl
 8010646:	b29b      	uxth	r3, r3
 8010648:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801064c:	f84e 3b04 	str.w	r3, [lr], #4
 8010650:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010658:	f8be 3000 	ldrh.w	r3, [lr]
 801065c:	fb09 330a 	mla	r3, r9, sl, r3
 8010660:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010664:	4562      	cmp	r2, ip
 8010666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801066a:	d8e5      	bhi.n	8010638 <__multiply+0x10c>
 801066c:	9f01      	ldr	r7, [sp, #4]
 801066e:	51eb      	str	r3, [r5, r7]
 8010670:	3504      	adds	r5, #4
 8010672:	e799      	b.n	80105a8 <__multiply+0x7c>
 8010674:	3e01      	subs	r6, #1
 8010676:	e79b      	b.n	80105b0 <__multiply+0x84>
 8010678:	080113a8 	.word	0x080113a8
 801067c:	080113b9 	.word	0x080113b9

08010680 <__pow5mult>:
 8010680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010684:	4615      	mov	r5, r2
 8010686:	f012 0203 	ands.w	r2, r2, #3
 801068a:	4607      	mov	r7, r0
 801068c:	460e      	mov	r6, r1
 801068e:	d007      	beq.n	80106a0 <__pow5mult+0x20>
 8010690:	4c25      	ldr	r4, [pc, #148]	@ (8010728 <__pow5mult+0xa8>)
 8010692:	3a01      	subs	r2, #1
 8010694:	2300      	movs	r3, #0
 8010696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801069a:	f7ff fe9f 	bl	80103dc <__multadd>
 801069e:	4606      	mov	r6, r0
 80106a0:	10ad      	asrs	r5, r5, #2
 80106a2:	d03d      	beq.n	8010720 <__pow5mult+0xa0>
 80106a4:	69fc      	ldr	r4, [r7, #28]
 80106a6:	b97c      	cbnz	r4, 80106c8 <__pow5mult+0x48>
 80106a8:	2010      	movs	r0, #16
 80106aa:	f7ff fd7f 	bl	80101ac <malloc>
 80106ae:	4602      	mov	r2, r0
 80106b0:	61f8      	str	r0, [r7, #28]
 80106b2:	b928      	cbnz	r0, 80106c0 <__pow5mult+0x40>
 80106b4:	4b1d      	ldr	r3, [pc, #116]	@ (801072c <__pow5mult+0xac>)
 80106b6:	481e      	ldr	r0, [pc, #120]	@ (8010730 <__pow5mult+0xb0>)
 80106b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80106bc:	f000 fc3e 	bl	8010f3c <__assert_func>
 80106c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106c4:	6004      	str	r4, [r0, #0]
 80106c6:	60c4      	str	r4, [r0, #12]
 80106c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80106cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106d0:	b94c      	cbnz	r4, 80106e6 <__pow5mult+0x66>
 80106d2:	f240 2171 	movw	r1, #625	@ 0x271
 80106d6:	4638      	mov	r0, r7
 80106d8:	f7ff ff12 	bl	8010500 <__i2b>
 80106dc:	2300      	movs	r3, #0
 80106de:	f8c8 0008 	str.w	r0, [r8, #8]
 80106e2:	4604      	mov	r4, r0
 80106e4:	6003      	str	r3, [r0, #0]
 80106e6:	f04f 0900 	mov.w	r9, #0
 80106ea:	07eb      	lsls	r3, r5, #31
 80106ec:	d50a      	bpl.n	8010704 <__pow5mult+0x84>
 80106ee:	4631      	mov	r1, r6
 80106f0:	4622      	mov	r2, r4
 80106f2:	4638      	mov	r0, r7
 80106f4:	f7ff ff1a 	bl	801052c <__multiply>
 80106f8:	4631      	mov	r1, r6
 80106fa:	4680      	mov	r8, r0
 80106fc:	4638      	mov	r0, r7
 80106fe:	f7ff fe4b 	bl	8010398 <_Bfree>
 8010702:	4646      	mov	r6, r8
 8010704:	106d      	asrs	r5, r5, #1
 8010706:	d00b      	beq.n	8010720 <__pow5mult+0xa0>
 8010708:	6820      	ldr	r0, [r4, #0]
 801070a:	b938      	cbnz	r0, 801071c <__pow5mult+0x9c>
 801070c:	4622      	mov	r2, r4
 801070e:	4621      	mov	r1, r4
 8010710:	4638      	mov	r0, r7
 8010712:	f7ff ff0b 	bl	801052c <__multiply>
 8010716:	6020      	str	r0, [r4, #0]
 8010718:	f8c0 9000 	str.w	r9, [r0]
 801071c:	4604      	mov	r4, r0
 801071e:	e7e4      	b.n	80106ea <__pow5mult+0x6a>
 8010720:	4630      	mov	r0, r6
 8010722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010726:	bf00      	nop
 8010728:	08011414 	.word	0x08011414
 801072c:	08011339 	.word	0x08011339
 8010730:	080113b9 	.word	0x080113b9

08010734 <__lshift>:
 8010734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010738:	460c      	mov	r4, r1
 801073a:	6849      	ldr	r1, [r1, #4]
 801073c:	6923      	ldr	r3, [r4, #16]
 801073e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010742:	68a3      	ldr	r3, [r4, #8]
 8010744:	4607      	mov	r7, r0
 8010746:	4691      	mov	r9, r2
 8010748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801074c:	f108 0601 	add.w	r6, r8, #1
 8010750:	42b3      	cmp	r3, r6
 8010752:	db0b      	blt.n	801076c <__lshift+0x38>
 8010754:	4638      	mov	r0, r7
 8010756:	f7ff fddf 	bl	8010318 <_Balloc>
 801075a:	4605      	mov	r5, r0
 801075c:	b948      	cbnz	r0, 8010772 <__lshift+0x3e>
 801075e:	4602      	mov	r2, r0
 8010760:	4b28      	ldr	r3, [pc, #160]	@ (8010804 <__lshift+0xd0>)
 8010762:	4829      	ldr	r0, [pc, #164]	@ (8010808 <__lshift+0xd4>)
 8010764:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010768:	f000 fbe8 	bl	8010f3c <__assert_func>
 801076c:	3101      	adds	r1, #1
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	e7ee      	b.n	8010750 <__lshift+0x1c>
 8010772:	2300      	movs	r3, #0
 8010774:	f100 0114 	add.w	r1, r0, #20
 8010778:	f100 0210 	add.w	r2, r0, #16
 801077c:	4618      	mov	r0, r3
 801077e:	4553      	cmp	r3, sl
 8010780:	db33      	blt.n	80107ea <__lshift+0xb6>
 8010782:	6920      	ldr	r0, [r4, #16]
 8010784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010788:	f104 0314 	add.w	r3, r4, #20
 801078c:	f019 091f 	ands.w	r9, r9, #31
 8010790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010798:	d02b      	beq.n	80107f2 <__lshift+0xbe>
 801079a:	f1c9 0e20 	rsb	lr, r9, #32
 801079e:	468a      	mov	sl, r1
 80107a0:	2200      	movs	r2, #0
 80107a2:	6818      	ldr	r0, [r3, #0]
 80107a4:	fa00 f009 	lsl.w	r0, r0, r9
 80107a8:	4310      	orrs	r0, r2
 80107aa:	f84a 0b04 	str.w	r0, [sl], #4
 80107ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80107b2:	459c      	cmp	ip, r3
 80107b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80107b8:	d8f3      	bhi.n	80107a2 <__lshift+0x6e>
 80107ba:	ebac 0304 	sub.w	r3, ip, r4
 80107be:	3b15      	subs	r3, #21
 80107c0:	f023 0303 	bic.w	r3, r3, #3
 80107c4:	3304      	adds	r3, #4
 80107c6:	f104 0015 	add.w	r0, r4, #21
 80107ca:	4584      	cmp	ip, r0
 80107cc:	bf38      	it	cc
 80107ce:	2304      	movcc	r3, #4
 80107d0:	50ca      	str	r2, [r1, r3]
 80107d2:	b10a      	cbz	r2, 80107d8 <__lshift+0xa4>
 80107d4:	f108 0602 	add.w	r6, r8, #2
 80107d8:	3e01      	subs	r6, #1
 80107da:	4638      	mov	r0, r7
 80107dc:	612e      	str	r6, [r5, #16]
 80107de:	4621      	mov	r1, r4
 80107e0:	f7ff fdda 	bl	8010398 <_Bfree>
 80107e4:	4628      	mov	r0, r5
 80107e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80107ee:	3301      	adds	r3, #1
 80107f0:	e7c5      	b.n	801077e <__lshift+0x4a>
 80107f2:	3904      	subs	r1, #4
 80107f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80107fc:	459c      	cmp	ip, r3
 80107fe:	d8f9      	bhi.n	80107f4 <__lshift+0xc0>
 8010800:	e7ea      	b.n	80107d8 <__lshift+0xa4>
 8010802:	bf00      	nop
 8010804:	080113a8 	.word	0x080113a8
 8010808:	080113b9 	.word	0x080113b9

0801080c <__mcmp>:
 801080c:	690a      	ldr	r2, [r1, #16]
 801080e:	4603      	mov	r3, r0
 8010810:	6900      	ldr	r0, [r0, #16]
 8010812:	1a80      	subs	r0, r0, r2
 8010814:	b530      	push	{r4, r5, lr}
 8010816:	d10e      	bne.n	8010836 <__mcmp+0x2a>
 8010818:	3314      	adds	r3, #20
 801081a:	3114      	adds	r1, #20
 801081c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010820:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010824:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010828:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801082c:	4295      	cmp	r5, r2
 801082e:	d003      	beq.n	8010838 <__mcmp+0x2c>
 8010830:	d205      	bcs.n	801083e <__mcmp+0x32>
 8010832:	f04f 30ff 	mov.w	r0, #4294967295
 8010836:	bd30      	pop	{r4, r5, pc}
 8010838:	42a3      	cmp	r3, r4
 801083a:	d3f3      	bcc.n	8010824 <__mcmp+0x18>
 801083c:	e7fb      	b.n	8010836 <__mcmp+0x2a>
 801083e:	2001      	movs	r0, #1
 8010840:	e7f9      	b.n	8010836 <__mcmp+0x2a>
	...

08010844 <__mdiff>:
 8010844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010848:	4689      	mov	r9, r1
 801084a:	4606      	mov	r6, r0
 801084c:	4611      	mov	r1, r2
 801084e:	4648      	mov	r0, r9
 8010850:	4614      	mov	r4, r2
 8010852:	f7ff ffdb 	bl	801080c <__mcmp>
 8010856:	1e05      	subs	r5, r0, #0
 8010858:	d112      	bne.n	8010880 <__mdiff+0x3c>
 801085a:	4629      	mov	r1, r5
 801085c:	4630      	mov	r0, r6
 801085e:	f7ff fd5b 	bl	8010318 <_Balloc>
 8010862:	4602      	mov	r2, r0
 8010864:	b928      	cbnz	r0, 8010872 <__mdiff+0x2e>
 8010866:	4b3f      	ldr	r3, [pc, #252]	@ (8010964 <__mdiff+0x120>)
 8010868:	f240 2137 	movw	r1, #567	@ 0x237
 801086c:	483e      	ldr	r0, [pc, #248]	@ (8010968 <__mdiff+0x124>)
 801086e:	f000 fb65 	bl	8010f3c <__assert_func>
 8010872:	2301      	movs	r3, #1
 8010874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010878:	4610      	mov	r0, r2
 801087a:	b003      	add	sp, #12
 801087c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010880:	bfbc      	itt	lt
 8010882:	464b      	movlt	r3, r9
 8010884:	46a1      	movlt	r9, r4
 8010886:	4630      	mov	r0, r6
 8010888:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801088c:	bfba      	itte	lt
 801088e:	461c      	movlt	r4, r3
 8010890:	2501      	movlt	r5, #1
 8010892:	2500      	movge	r5, #0
 8010894:	f7ff fd40 	bl	8010318 <_Balloc>
 8010898:	4602      	mov	r2, r0
 801089a:	b918      	cbnz	r0, 80108a4 <__mdiff+0x60>
 801089c:	4b31      	ldr	r3, [pc, #196]	@ (8010964 <__mdiff+0x120>)
 801089e:	f240 2145 	movw	r1, #581	@ 0x245
 80108a2:	e7e3      	b.n	801086c <__mdiff+0x28>
 80108a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80108a8:	6926      	ldr	r6, [r4, #16]
 80108aa:	60c5      	str	r5, [r0, #12]
 80108ac:	f109 0310 	add.w	r3, r9, #16
 80108b0:	f109 0514 	add.w	r5, r9, #20
 80108b4:	f104 0e14 	add.w	lr, r4, #20
 80108b8:	f100 0b14 	add.w	fp, r0, #20
 80108bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80108c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	46d9      	mov	r9, fp
 80108c8:	f04f 0c00 	mov.w	ip, #0
 80108cc:	9b01      	ldr	r3, [sp, #4]
 80108ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80108d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80108d6:	9301      	str	r3, [sp, #4]
 80108d8:	fa1f f38a 	uxth.w	r3, sl
 80108dc:	4619      	mov	r1, r3
 80108de:	b283      	uxth	r3, r0
 80108e0:	1acb      	subs	r3, r1, r3
 80108e2:	0c00      	lsrs	r0, r0, #16
 80108e4:	4463      	add	r3, ip
 80108e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80108ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80108f4:	4576      	cmp	r6, lr
 80108f6:	f849 3b04 	str.w	r3, [r9], #4
 80108fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80108fe:	d8e5      	bhi.n	80108cc <__mdiff+0x88>
 8010900:	1b33      	subs	r3, r6, r4
 8010902:	3b15      	subs	r3, #21
 8010904:	f023 0303 	bic.w	r3, r3, #3
 8010908:	3415      	adds	r4, #21
 801090a:	3304      	adds	r3, #4
 801090c:	42a6      	cmp	r6, r4
 801090e:	bf38      	it	cc
 8010910:	2304      	movcc	r3, #4
 8010912:	441d      	add	r5, r3
 8010914:	445b      	add	r3, fp
 8010916:	461e      	mov	r6, r3
 8010918:	462c      	mov	r4, r5
 801091a:	4544      	cmp	r4, r8
 801091c:	d30e      	bcc.n	801093c <__mdiff+0xf8>
 801091e:	f108 0103 	add.w	r1, r8, #3
 8010922:	1b49      	subs	r1, r1, r5
 8010924:	f021 0103 	bic.w	r1, r1, #3
 8010928:	3d03      	subs	r5, #3
 801092a:	45a8      	cmp	r8, r5
 801092c:	bf38      	it	cc
 801092e:	2100      	movcc	r1, #0
 8010930:	440b      	add	r3, r1
 8010932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010936:	b191      	cbz	r1, 801095e <__mdiff+0x11a>
 8010938:	6117      	str	r7, [r2, #16]
 801093a:	e79d      	b.n	8010878 <__mdiff+0x34>
 801093c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010940:	46e6      	mov	lr, ip
 8010942:	0c08      	lsrs	r0, r1, #16
 8010944:	fa1c fc81 	uxtah	ip, ip, r1
 8010948:	4471      	add	r1, lr
 801094a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801094e:	b289      	uxth	r1, r1
 8010950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010954:	f846 1b04 	str.w	r1, [r6], #4
 8010958:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801095c:	e7dd      	b.n	801091a <__mdiff+0xd6>
 801095e:	3f01      	subs	r7, #1
 8010960:	e7e7      	b.n	8010932 <__mdiff+0xee>
 8010962:	bf00      	nop
 8010964:	080113a8 	.word	0x080113a8
 8010968:	080113b9 	.word	0x080113b9

0801096c <__d2b>:
 801096c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010970:	460f      	mov	r7, r1
 8010972:	2101      	movs	r1, #1
 8010974:	ec59 8b10 	vmov	r8, r9, d0
 8010978:	4616      	mov	r6, r2
 801097a:	f7ff fccd 	bl	8010318 <_Balloc>
 801097e:	4604      	mov	r4, r0
 8010980:	b930      	cbnz	r0, 8010990 <__d2b+0x24>
 8010982:	4602      	mov	r2, r0
 8010984:	4b23      	ldr	r3, [pc, #140]	@ (8010a14 <__d2b+0xa8>)
 8010986:	4824      	ldr	r0, [pc, #144]	@ (8010a18 <__d2b+0xac>)
 8010988:	f240 310f 	movw	r1, #783	@ 0x30f
 801098c:	f000 fad6 	bl	8010f3c <__assert_func>
 8010990:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010998:	b10d      	cbz	r5, 801099e <__d2b+0x32>
 801099a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	f1b8 0300 	subs.w	r3, r8, #0
 80109a4:	d023      	beq.n	80109ee <__d2b+0x82>
 80109a6:	4668      	mov	r0, sp
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	f7ff fd7c 	bl	80104a6 <__lo0bits>
 80109ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80109b2:	b1d0      	cbz	r0, 80109ea <__d2b+0x7e>
 80109b4:	f1c0 0320 	rsb	r3, r0, #32
 80109b8:	fa02 f303 	lsl.w	r3, r2, r3
 80109bc:	430b      	orrs	r3, r1
 80109be:	40c2      	lsrs	r2, r0
 80109c0:	6163      	str	r3, [r4, #20]
 80109c2:	9201      	str	r2, [sp, #4]
 80109c4:	9b01      	ldr	r3, [sp, #4]
 80109c6:	61a3      	str	r3, [r4, #24]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	bf0c      	ite	eq
 80109cc:	2201      	moveq	r2, #1
 80109ce:	2202      	movne	r2, #2
 80109d0:	6122      	str	r2, [r4, #16]
 80109d2:	b1a5      	cbz	r5, 80109fe <__d2b+0x92>
 80109d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80109d8:	4405      	add	r5, r0
 80109da:	603d      	str	r5, [r7, #0]
 80109dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80109e0:	6030      	str	r0, [r6, #0]
 80109e2:	4620      	mov	r0, r4
 80109e4:	b003      	add	sp, #12
 80109e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ea:	6161      	str	r1, [r4, #20]
 80109ec:	e7ea      	b.n	80109c4 <__d2b+0x58>
 80109ee:	a801      	add	r0, sp, #4
 80109f0:	f7ff fd59 	bl	80104a6 <__lo0bits>
 80109f4:	9b01      	ldr	r3, [sp, #4]
 80109f6:	6163      	str	r3, [r4, #20]
 80109f8:	3020      	adds	r0, #32
 80109fa:	2201      	movs	r2, #1
 80109fc:	e7e8      	b.n	80109d0 <__d2b+0x64>
 80109fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010a06:	6038      	str	r0, [r7, #0]
 8010a08:	6918      	ldr	r0, [r3, #16]
 8010a0a:	f7ff fd2d 	bl	8010468 <__hi0bits>
 8010a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a12:	e7e5      	b.n	80109e0 <__d2b+0x74>
 8010a14:	080113a8 	.word	0x080113a8
 8010a18:	080113b9 	.word	0x080113b9

08010a1c <__sfputc_r>:
 8010a1c:	6893      	ldr	r3, [r2, #8]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	b410      	push	{r4}
 8010a24:	6093      	str	r3, [r2, #8]
 8010a26:	da08      	bge.n	8010a3a <__sfputc_r+0x1e>
 8010a28:	6994      	ldr	r4, [r2, #24]
 8010a2a:	42a3      	cmp	r3, r4
 8010a2c:	db01      	blt.n	8010a32 <__sfputc_r+0x16>
 8010a2e:	290a      	cmp	r1, #10
 8010a30:	d103      	bne.n	8010a3a <__sfputc_r+0x1e>
 8010a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a36:	f7fe bc0c 	b.w	800f252 <__swbuf_r>
 8010a3a:	6813      	ldr	r3, [r2, #0]
 8010a3c:	1c58      	adds	r0, r3, #1
 8010a3e:	6010      	str	r0, [r2, #0]
 8010a40:	7019      	strb	r1, [r3, #0]
 8010a42:	4608      	mov	r0, r1
 8010a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <__sfputs_r>:
 8010a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	460f      	mov	r7, r1
 8010a50:	4614      	mov	r4, r2
 8010a52:	18d5      	adds	r5, r2, r3
 8010a54:	42ac      	cmp	r4, r5
 8010a56:	d101      	bne.n	8010a5c <__sfputs_r+0x12>
 8010a58:	2000      	movs	r0, #0
 8010a5a:	e007      	b.n	8010a6c <__sfputs_r+0x22>
 8010a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a60:	463a      	mov	r2, r7
 8010a62:	4630      	mov	r0, r6
 8010a64:	f7ff ffda 	bl	8010a1c <__sfputc_r>
 8010a68:	1c43      	adds	r3, r0, #1
 8010a6a:	d1f3      	bne.n	8010a54 <__sfputs_r+0xa>
 8010a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a70 <_vfiprintf_r>:
 8010a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	460d      	mov	r5, r1
 8010a76:	b09d      	sub	sp, #116	@ 0x74
 8010a78:	4614      	mov	r4, r2
 8010a7a:	4698      	mov	r8, r3
 8010a7c:	4606      	mov	r6, r0
 8010a7e:	b118      	cbz	r0, 8010a88 <_vfiprintf_r+0x18>
 8010a80:	6a03      	ldr	r3, [r0, #32]
 8010a82:	b90b      	cbnz	r3, 8010a88 <_vfiprintf_r+0x18>
 8010a84:	f7fe fafc 	bl	800f080 <__sinit>
 8010a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a8a:	07d9      	lsls	r1, r3, #31
 8010a8c:	d405      	bmi.n	8010a9a <_vfiprintf_r+0x2a>
 8010a8e:	89ab      	ldrh	r3, [r5, #12]
 8010a90:	059a      	lsls	r2, r3, #22
 8010a92:	d402      	bmi.n	8010a9a <_vfiprintf_r+0x2a>
 8010a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a96:	f7fe fcee 	bl	800f476 <__retarget_lock_acquire_recursive>
 8010a9a:	89ab      	ldrh	r3, [r5, #12]
 8010a9c:	071b      	lsls	r3, r3, #28
 8010a9e:	d501      	bpl.n	8010aa4 <_vfiprintf_r+0x34>
 8010aa0:	692b      	ldr	r3, [r5, #16]
 8010aa2:	b99b      	cbnz	r3, 8010acc <_vfiprintf_r+0x5c>
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	f7fe fc12 	bl	800f2d0 <__swsetup_r>
 8010aac:	b170      	cbz	r0, 8010acc <_vfiprintf_r+0x5c>
 8010aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ab0:	07dc      	lsls	r4, r3, #31
 8010ab2:	d504      	bpl.n	8010abe <_vfiprintf_r+0x4e>
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	b01d      	add	sp, #116	@ 0x74
 8010aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	0598      	lsls	r0, r3, #22
 8010ac2:	d4f7      	bmi.n	8010ab4 <_vfiprintf_r+0x44>
 8010ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ac6:	f7fe fcd7 	bl	800f478 <__retarget_lock_release_recursive>
 8010aca:	e7f3      	b.n	8010ab4 <_vfiprintf_r+0x44>
 8010acc:	2300      	movs	r3, #0
 8010ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ad0:	2320      	movs	r3, #32
 8010ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ada:	2330      	movs	r3, #48	@ 0x30
 8010adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c8c <_vfiprintf_r+0x21c>
 8010ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ae4:	f04f 0901 	mov.w	r9, #1
 8010ae8:	4623      	mov	r3, r4
 8010aea:	469a      	mov	sl, r3
 8010aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010af0:	b10a      	cbz	r2, 8010af6 <_vfiprintf_r+0x86>
 8010af2:	2a25      	cmp	r2, #37	@ 0x25
 8010af4:	d1f9      	bne.n	8010aea <_vfiprintf_r+0x7a>
 8010af6:	ebba 0b04 	subs.w	fp, sl, r4
 8010afa:	d00b      	beq.n	8010b14 <_vfiprintf_r+0xa4>
 8010afc:	465b      	mov	r3, fp
 8010afe:	4622      	mov	r2, r4
 8010b00:	4629      	mov	r1, r5
 8010b02:	4630      	mov	r0, r6
 8010b04:	f7ff ffa1 	bl	8010a4a <__sfputs_r>
 8010b08:	3001      	adds	r0, #1
 8010b0a:	f000 80a7 	beq.w	8010c5c <_vfiprintf_r+0x1ec>
 8010b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b10:	445a      	add	r2, fp
 8010b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b14:	f89a 3000 	ldrb.w	r3, [sl]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f000 809f 	beq.w	8010c5c <_vfiprintf_r+0x1ec>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	f04f 32ff 	mov.w	r2, #4294967295
 8010b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b28:	f10a 0a01 	add.w	sl, sl, #1
 8010b2c:	9304      	str	r3, [sp, #16]
 8010b2e:	9307      	str	r3, [sp, #28]
 8010b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b36:	4654      	mov	r4, sl
 8010b38:	2205      	movs	r2, #5
 8010b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b3e:	4853      	ldr	r0, [pc, #332]	@ (8010c8c <_vfiprintf_r+0x21c>)
 8010b40:	f7ef fb4e 	bl	80001e0 <memchr>
 8010b44:	9a04      	ldr	r2, [sp, #16]
 8010b46:	b9d8      	cbnz	r0, 8010b80 <_vfiprintf_r+0x110>
 8010b48:	06d1      	lsls	r1, r2, #27
 8010b4a:	bf44      	itt	mi
 8010b4c:	2320      	movmi	r3, #32
 8010b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b52:	0713      	lsls	r3, r2, #28
 8010b54:	bf44      	itt	mi
 8010b56:	232b      	movmi	r3, #43	@ 0x2b
 8010b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b62:	d015      	beq.n	8010b90 <_vfiprintf_r+0x120>
 8010b64:	9a07      	ldr	r2, [sp, #28]
 8010b66:	4654      	mov	r4, sl
 8010b68:	2000      	movs	r0, #0
 8010b6a:	f04f 0c0a 	mov.w	ip, #10
 8010b6e:	4621      	mov	r1, r4
 8010b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b74:	3b30      	subs	r3, #48	@ 0x30
 8010b76:	2b09      	cmp	r3, #9
 8010b78:	d94b      	bls.n	8010c12 <_vfiprintf_r+0x1a2>
 8010b7a:	b1b0      	cbz	r0, 8010baa <_vfiprintf_r+0x13a>
 8010b7c:	9207      	str	r2, [sp, #28]
 8010b7e:	e014      	b.n	8010baa <_vfiprintf_r+0x13a>
 8010b80:	eba0 0308 	sub.w	r3, r0, r8
 8010b84:	fa09 f303 	lsl.w	r3, r9, r3
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	9304      	str	r3, [sp, #16]
 8010b8c:	46a2      	mov	sl, r4
 8010b8e:	e7d2      	b.n	8010b36 <_vfiprintf_r+0xc6>
 8010b90:	9b03      	ldr	r3, [sp, #12]
 8010b92:	1d19      	adds	r1, r3, #4
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	9103      	str	r1, [sp, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	bfbb      	ittet	lt
 8010b9c:	425b      	neglt	r3, r3
 8010b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8010ba2:	9307      	strge	r3, [sp, #28]
 8010ba4:	9307      	strlt	r3, [sp, #28]
 8010ba6:	bfb8      	it	lt
 8010ba8:	9204      	strlt	r2, [sp, #16]
 8010baa:	7823      	ldrb	r3, [r4, #0]
 8010bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bae:	d10a      	bne.n	8010bc6 <_vfiprintf_r+0x156>
 8010bb0:	7863      	ldrb	r3, [r4, #1]
 8010bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bb4:	d132      	bne.n	8010c1c <_vfiprintf_r+0x1ac>
 8010bb6:	9b03      	ldr	r3, [sp, #12]
 8010bb8:	1d1a      	adds	r2, r3, #4
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	9203      	str	r2, [sp, #12]
 8010bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bc2:	3402      	adds	r4, #2
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c9c <_vfiprintf_r+0x22c>
 8010bca:	7821      	ldrb	r1, [r4, #0]
 8010bcc:	2203      	movs	r2, #3
 8010bce:	4650      	mov	r0, sl
 8010bd0:	f7ef fb06 	bl	80001e0 <memchr>
 8010bd4:	b138      	cbz	r0, 8010be6 <_vfiprintf_r+0x176>
 8010bd6:	9b04      	ldr	r3, [sp, #16]
 8010bd8:	eba0 000a 	sub.w	r0, r0, sl
 8010bdc:	2240      	movs	r2, #64	@ 0x40
 8010bde:	4082      	lsls	r2, r0
 8010be0:	4313      	orrs	r3, r2
 8010be2:	3401      	adds	r4, #1
 8010be4:	9304      	str	r3, [sp, #16]
 8010be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bea:	4829      	ldr	r0, [pc, #164]	@ (8010c90 <_vfiprintf_r+0x220>)
 8010bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010bf0:	2206      	movs	r2, #6
 8010bf2:	f7ef faf5 	bl	80001e0 <memchr>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	d03f      	beq.n	8010c7a <_vfiprintf_r+0x20a>
 8010bfa:	4b26      	ldr	r3, [pc, #152]	@ (8010c94 <_vfiprintf_r+0x224>)
 8010bfc:	bb1b      	cbnz	r3, 8010c46 <_vfiprintf_r+0x1d6>
 8010bfe:	9b03      	ldr	r3, [sp, #12]
 8010c00:	3307      	adds	r3, #7
 8010c02:	f023 0307 	bic.w	r3, r3, #7
 8010c06:	3308      	adds	r3, #8
 8010c08:	9303      	str	r3, [sp, #12]
 8010c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c0c:	443b      	add	r3, r7
 8010c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c10:	e76a      	b.n	8010ae8 <_vfiprintf_r+0x78>
 8010c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c16:	460c      	mov	r4, r1
 8010c18:	2001      	movs	r0, #1
 8010c1a:	e7a8      	b.n	8010b6e <_vfiprintf_r+0xfe>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	3401      	adds	r4, #1
 8010c20:	9305      	str	r3, [sp, #20]
 8010c22:	4619      	mov	r1, r3
 8010c24:	f04f 0c0a 	mov.w	ip, #10
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c2e:	3a30      	subs	r2, #48	@ 0x30
 8010c30:	2a09      	cmp	r2, #9
 8010c32:	d903      	bls.n	8010c3c <_vfiprintf_r+0x1cc>
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d0c6      	beq.n	8010bc6 <_vfiprintf_r+0x156>
 8010c38:	9105      	str	r1, [sp, #20]
 8010c3a:	e7c4      	b.n	8010bc6 <_vfiprintf_r+0x156>
 8010c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c40:	4604      	mov	r4, r0
 8010c42:	2301      	movs	r3, #1
 8010c44:	e7f0      	b.n	8010c28 <_vfiprintf_r+0x1b8>
 8010c46:	ab03      	add	r3, sp, #12
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	462a      	mov	r2, r5
 8010c4c:	4b12      	ldr	r3, [pc, #72]	@ (8010c98 <_vfiprintf_r+0x228>)
 8010c4e:	a904      	add	r1, sp, #16
 8010c50:	4630      	mov	r0, r6
 8010c52:	f7fd fdd1 	bl	800e7f8 <_printf_float>
 8010c56:	4607      	mov	r7, r0
 8010c58:	1c78      	adds	r0, r7, #1
 8010c5a:	d1d6      	bne.n	8010c0a <_vfiprintf_r+0x19a>
 8010c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c5e:	07d9      	lsls	r1, r3, #31
 8010c60:	d405      	bmi.n	8010c6e <_vfiprintf_r+0x1fe>
 8010c62:	89ab      	ldrh	r3, [r5, #12]
 8010c64:	059a      	lsls	r2, r3, #22
 8010c66:	d402      	bmi.n	8010c6e <_vfiprintf_r+0x1fe>
 8010c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c6a:	f7fe fc05 	bl	800f478 <__retarget_lock_release_recursive>
 8010c6e:	89ab      	ldrh	r3, [r5, #12]
 8010c70:	065b      	lsls	r3, r3, #25
 8010c72:	f53f af1f 	bmi.w	8010ab4 <_vfiprintf_r+0x44>
 8010c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c78:	e71e      	b.n	8010ab8 <_vfiprintf_r+0x48>
 8010c7a:	ab03      	add	r3, sp, #12
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	462a      	mov	r2, r5
 8010c80:	4b05      	ldr	r3, [pc, #20]	@ (8010c98 <_vfiprintf_r+0x228>)
 8010c82:	a904      	add	r1, sp, #16
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7fe f84f 	bl	800ed28 <_printf_i>
 8010c8a:	e7e4      	b.n	8010c56 <_vfiprintf_r+0x1e6>
 8010c8c:	08011510 	.word	0x08011510
 8010c90:	0801151a 	.word	0x0801151a
 8010c94:	0800e7f9 	.word	0x0800e7f9
 8010c98:	08010a4b 	.word	0x08010a4b
 8010c9c:	08011516 	.word	0x08011516

08010ca0 <__sflush_r>:
 8010ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca8:	0716      	lsls	r6, r2, #28
 8010caa:	4605      	mov	r5, r0
 8010cac:	460c      	mov	r4, r1
 8010cae:	d454      	bmi.n	8010d5a <__sflush_r+0xba>
 8010cb0:	684b      	ldr	r3, [r1, #4]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	dc02      	bgt.n	8010cbc <__sflush_r+0x1c>
 8010cb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	dd48      	ble.n	8010d4e <__sflush_r+0xae>
 8010cbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cbe:	2e00      	cmp	r6, #0
 8010cc0:	d045      	beq.n	8010d4e <__sflush_r+0xae>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010cc8:	682f      	ldr	r7, [r5, #0]
 8010cca:	6a21      	ldr	r1, [r4, #32]
 8010ccc:	602b      	str	r3, [r5, #0]
 8010cce:	d030      	beq.n	8010d32 <__sflush_r+0x92>
 8010cd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010cd2:	89a3      	ldrh	r3, [r4, #12]
 8010cd4:	0759      	lsls	r1, r3, #29
 8010cd6:	d505      	bpl.n	8010ce4 <__sflush_r+0x44>
 8010cd8:	6863      	ldr	r3, [r4, #4]
 8010cda:	1ad2      	subs	r2, r2, r3
 8010cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010cde:	b10b      	cbz	r3, 8010ce4 <__sflush_r+0x44>
 8010ce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ce2:	1ad2      	subs	r2, r2, r3
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ce8:	6a21      	ldr	r1, [r4, #32]
 8010cea:	4628      	mov	r0, r5
 8010cec:	47b0      	blx	r6
 8010cee:	1c43      	adds	r3, r0, #1
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	d106      	bne.n	8010d02 <__sflush_r+0x62>
 8010cf4:	6829      	ldr	r1, [r5, #0]
 8010cf6:	291d      	cmp	r1, #29
 8010cf8:	d82b      	bhi.n	8010d52 <__sflush_r+0xb2>
 8010cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8010da4 <__sflush_r+0x104>)
 8010cfc:	410a      	asrs	r2, r1
 8010cfe:	07d6      	lsls	r6, r2, #31
 8010d00:	d427      	bmi.n	8010d52 <__sflush_r+0xb2>
 8010d02:	2200      	movs	r2, #0
 8010d04:	6062      	str	r2, [r4, #4]
 8010d06:	04d9      	lsls	r1, r3, #19
 8010d08:	6922      	ldr	r2, [r4, #16]
 8010d0a:	6022      	str	r2, [r4, #0]
 8010d0c:	d504      	bpl.n	8010d18 <__sflush_r+0x78>
 8010d0e:	1c42      	adds	r2, r0, #1
 8010d10:	d101      	bne.n	8010d16 <__sflush_r+0x76>
 8010d12:	682b      	ldr	r3, [r5, #0]
 8010d14:	b903      	cbnz	r3, 8010d18 <__sflush_r+0x78>
 8010d16:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d1a:	602f      	str	r7, [r5, #0]
 8010d1c:	b1b9      	cbz	r1, 8010d4e <__sflush_r+0xae>
 8010d1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d22:	4299      	cmp	r1, r3
 8010d24:	d002      	beq.n	8010d2c <__sflush_r+0x8c>
 8010d26:	4628      	mov	r0, r5
 8010d28:	f7ff f9f6 	bl	8010118 <_free_r>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d30:	e00d      	b.n	8010d4e <__sflush_r+0xae>
 8010d32:	2301      	movs	r3, #1
 8010d34:	4628      	mov	r0, r5
 8010d36:	47b0      	blx	r6
 8010d38:	4602      	mov	r2, r0
 8010d3a:	1c50      	adds	r0, r2, #1
 8010d3c:	d1c9      	bne.n	8010cd2 <__sflush_r+0x32>
 8010d3e:	682b      	ldr	r3, [r5, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d0c6      	beq.n	8010cd2 <__sflush_r+0x32>
 8010d44:	2b1d      	cmp	r3, #29
 8010d46:	d001      	beq.n	8010d4c <__sflush_r+0xac>
 8010d48:	2b16      	cmp	r3, #22
 8010d4a:	d11e      	bne.n	8010d8a <__sflush_r+0xea>
 8010d4c:	602f      	str	r7, [r5, #0]
 8010d4e:	2000      	movs	r0, #0
 8010d50:	e022      	b.n	8010d98 <__sflush_r+0xf8>
 8010d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d56:	b21b      	sxth	r3, r3
 8010d58:	e01b      	b.n	8010d92 <__sflush_r+0xf2>
 8010d5a:	690f      	ldr	r7, [r1, #16]
 8010d5c:	2f00      	cmp	r7, #0
 8010d5e:	d0f6      	beq.n	8010d4e <__sflush_r+0xae>
 8010d60:	0793      	lsls	r3, r2, #30
 8010d62:	680e      	ldr	r6, [r1, #0]
 8010d64:	bf08      	it	eq
 8010d66:	694b      	ldreq	r3, [r1, #20]
 8010d68:	600f      	str	r7, [r1, #0]
 8010d6a:	bf18      	it	ne
 8010d6c:	2300      	movne	r3, #0
 8010d6e:	eba6 0807 	sub.w	r8, r6, r7
 8010d72:	608b      	str	r3, [r1, #8]
 8010d74:	f1b8 0f00 	cmp.w	r8, #0
 8010d78:	dde9      	ble.n	8010d4e <__sflush_r+0xae>
 8010d7a:	6a21      	ldr	r1, [r4, #32]
 8010d7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d7e:	4643      	mov	r3, r8
 8010d80:	463a      	mov	r2, r7
 8010d82:	4628      	mov	r0, r5
 8010d84:	47b0      	blx	r6
 8010d86:	2800      	cmp	r0, #0
 8010d88:	dc08      	bgt.n	8010d9c <__sflush_r+0xfc>
 8010d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d92:	81a3      	strh	r3, [r4, #12]
 8010d94:	f04f 30ff 	mov.w	r0, #4294967295
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9c:	4407      	add	r7, r0
 8010d9e:	eba8 0800 	sub.w	r8, r8, r0
 8010da2:	e7e7      	b.n	8010d74 <__sflush_r+0xd4>
 8010da4:	dfbffffe 	.word	0xdfbffffe

08010da8 <_fflush_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	690b      	ldr	r3, [r1, #16]
 8010dac:	4605      	mov	r5, r0
 8010dae:	460c      	mov	r4, r1
 8010db0:	b913      	cbnz	r3, 8010db8 <_fflush_r+0x10>
 8010db2:	2500      	movs	r5, #0
 8010db4:	4628      	mov	r0, r5
 8010db6:	bd38      	pop	{r3, r4, r5, pc}
 8010db8:	b118      	cbz	r0, 8010dc2 <_fflush_r+0x1a>
 8010dba:	6a03      	ldr	r3, [r0, #32]
 8010dbc:	b90b      	cbnz	r3, 8010dc2 <_fflush_r+0x1a>
 8010dbe:	f7fe f95f 	bl	800f080 <__sinit>
 8010dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d0f3      	beq.n	8010db2 <_fflush_r+0xa>
 8010dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010dcc:	07d0      	lsls	r0, r2, #31
 8010dce:	d404      	bmi.n	8010dda <_fflush_r+0x32>
 8010dd0:	0599      	lsls	r1, r3, #22
 8010dd2:	d402      	bmi.n	8010dda <_fflush_r+0x32>
 8010dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dd6:	f7fe fb4e 	bl	800f476 <__retarget_lock_acquire_recursive>
 8010dda:	4628      	mov	r0, r5
 8010ddc:	4621      	mov	r1, r4
 8010dde:	f7ff ff5f 	bl	8010ca0 <__sflush_r>
 8010de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010de4:	07da      	lsls	r2, r3, #31
 8010de6:	4605      	mov	r5, r0
 8010de8:	d4e4      	bmi.n	8010db4 <_fflush_r+0xc>
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	059b      	lsls	r3, r3, #22
 8010dee:	d4e1      	bmi.n	8010db4 <_fflush_r+0xc>
 8010df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010df2:	f7fe fb41 	bl	800f478 <__retarget_lock_release_recursive>
 8010df6:	e7dd      	b.n	8010db4 <_fflush_r+0xc>

08010df8 <__swhatbuf_r>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e00:	2900      	cmp	r1, #0
 8010e02:	b096      	sub	sp, #88	@ 0x58
 8010e04:	4615      	mov	r5, r2
 8010e06:	461e      	mov	r6, r3
 8010e08:	da0d      	bge.n	8010e26 <__swhatbuf_r+0x2e>
 8010e0a:	89a3      	ldrh	r3, [r4, #12]
 8010e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e10:	f04f 0100 	mov.w	r1, #0
 8010e14:	bf14      	ite	ne
 8010e16:	2340      	movne	r3, #64	@ 0x40
 8010e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	6031      	str	r1, [r6, #0]
 8010e20:	602b      	str	r3, [r5, #0]
 8010e22:	b016      	add	sp, #88	@ 0x58
 8010e24:	bd70      	pop	{r4, r5, r6, pc}
 8010e26:	466a      	mov	r2, sp
 8010e28:	f000 f848 	bl	8010ebc <_fstat_r>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	dbec      	blt.n	8010e0a <__swhatbuf_r+0x12>
 8010e30:	9901      	ldr	r1, [sp, #4]
 8010e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e3a:	4259      	negs	r1, r3
 8010e3c:	4159      	adcs	r1, r3
 8010e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e42:	e7eb      	b.n	8010e1c <__swhatbuf_r+0x24>

08010e44 <__smakebuf_r>:
 8010e44:	898b      	ldrh	r3, [r1, #12]
 8010e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e48:	079d      	lsls	r5, r3, #30
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	460c      	mov	r4, r1
 8010e4e:	d507      	bpl.n	8010e60 <__smakebuf_r+0x1c>
 8010e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e54:	6023      	str	r3, [r4, #0]
 8010e56:	6123      	str	r3, [r4, #16]
 8010e58:	2301      	movs	r3, #1
 8010e5a:	6163      	str	r3, [r4, #20]
 8010e5c:	b003      	add	sp, #12
 8010e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e60:	ab01      	add	r3, sp, #4
 8010e62:	466a      	mov	r2, sp
 8010e64:	f7ff ffc8 	bl	8010df8 <__swhatbuf_r>
 8010e68:	9f00      	ldr	r7, [sp, #0]
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f7ff f9c6 	bl	8010200 <_malloc_r>
 8010e74:	b948      	cbnz	r0, 8010e8a <__smakebuf_r+0x46>
 8010e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e7a:	059a      	lsls	r2, r3, #22
 8010e7c:	d4ee      	bmi.n	8010e5c <__smakebuf_r+0x18>
 8010e7e:	f023 0303 	bic.w	r3, r3, #3
 8010e82:	f043 0302 	orr.w	r3, r3, #2
 8010e86:	81a3      	strh	r3, [r4, #12]
 8010e88:	e7e2      	b.n	8010e50 <__smakebuf_r+0xc>
 8010e8a:	89a3      	ldrh	r3, [r4, #12]
 8010e8c:	6020      	str	r0, [r4, #0]
 8010e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e92:	81a3      	strh	r3, [r4, #12]
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e9a:	b15b      	cbz	r3, 8010eb4 <__smakebuf_r+0x70>
 8010e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f000 f81d 	bl	8010ee0 <_isatty_r>
 8010ea6:	b128      	cbz	r0, 8010eb4 <__smakebuf_r+0x70>
 8010ea8:	89a3      	ldrh	r3, [r4, #12]
 8010eaa:	f023 0303 	bic.w	r3, r3, #3
 8010eae:	f043 0301 	orr.w	r3, r3, #1
 8010eb2:	81a3      	strh	r3, [r4, #12]
 8010eb4:	89a3      	ldrh	r3, [r4, #12]
 8010eb6:	431d      	orrs	r5, r3
 8010eb8:	81a5      	strh	r5, [r4, #12]
 8010eba:	e7cf      	b.n	8010e5c <__smakebuf_r+0x18>

08010ebc <_fstat_r>:
 8010ebc:	b538      	push	{r3, r4, r5, lr}
 8010ebe:	4d07      	ldr	r5, [pc, #28]	@ (8010edc <_fstat_r+0x20>)
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	4608      	mov	r0, r1
 8010ec6:	4611      	mov	r1, r2
 8010ec8:	602b      	str	r3, [r5, #0]
 8010eca:	f7f1 fbeb 	bl	80026a4 <_fstat>
 8010ece:	1c43      	adds	r3, r0, #1
 8010ed0:	d102      	bne.n	8010ed8 <_fstat_r+0x1c>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	b103      	cbz	r3, 8010ed8 <_fstat_r+0x1c>
 8010ed6:	6023      	str	r3, [r4, #0]
 8010ed8:	bd38      	pop	{r3, r4, r5, pc}
 8010eda:	bf00      	nop
 8010edc:	20002260 	.word	0x20002260

08010ee0 <_isatty_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4d06      	ldr	r5, [pc, #24]	@ (8010efc <_isatty_r+0x1c>)
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4608      	mov	r0, r1
 8010eea:	602b      	str	r3, [r5, #0]
 8010eec:	f7f1 fbea 	bl	80026c4 <_isatty>
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	d102      	bne.n	8010efa <_isatty_r+0x1a>
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	b103      	cbz	r3, 8010efa <_isatty_r+0x1a>
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	bd38      	pop	{r3, r4, r5, pc}
 8010efc:	20002260 	.word	0x20002260

08010f00 <_sbrk_r>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	4d06      	ldr	r5, [pc, #24]	@ (8010f1c <_sbrk_r+0x1c>)
 8010f04:	2300      	movs	r3, #0
 8010f06:	4604      	mov	r4, r0
 8010f08:	4608      	mov	r0, r1
 8010f0a:	602b      	str	r3, [r5, #0]
 8010f0c:	f7f1 fbf2 	bl	80026f4 <_sbrk>
 8010f10:	1c43      	adds	r3, r0, #1
 8010f12:	d102      	bne.n	8010f1a <_sbrk_r+0x1a>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b103      	cbz	r3, 8010f1a <_sbrk_r+0x1a>
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	20002260 	.word	0x20002260

08010f20 <memcpy>:
 8010f20:	440a      	add	r2, r1
 8010f22:	4291      	cmp	r1, r2
 8010f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f28:	d100      	bne.n	8010f2c <memcpy+0xc>
 8010f2a:	4770      	bx	lr
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f36:	4291      	cmp	r1, r2
 8010f38:	d1f9      	bne.n	8010f2e <memcpy+0xe>
 8010f3a:	bd10      	pop	{r4, pc}

08010f3c <__assert_func>:
 8010f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f3e:	4614      	mov	r4, r2
 8010f40:	461a      	mov	r2, r3
 8010f42:	4b09      	ldr	r3, [pc, #36]	@ (8010f68 <__assert_func+0x2c>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4605      	mov	r5, r0
 8010f48:	68d8      	ldr	r0, [r3, #12]
 8010f4a:	b954      	cbnz	r4, 8010f62 <__assert_func+0x26>
 8010f4c:	4b07      	ldr	r3, [pc, #28]	@ (8010f6c <__assert_func+0x30>)
 8010f4e:	461c      	mov	r4, r3
 8010f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f54:	9100      	str	r1, [sp, #0]
 8010f56:	462b      	mov	r3, r5
 8010f58:	4905      	ldr	r1, [pc, #20]	@ (8010f70 <__assert_func+0x34>)
 8010f5a:	f000 f841 	bl	8010fe0 <fiprintf>
 8010f5e:	f000 f851 	bl	8011004 <abort>
 8010f62:	4b04      	ldr	r3, [pc, #16]	@ (8010f74 <__assert_func+0x38>)
 8010f64:	e7f4      	b.n	8010f50 <__assert_func+0x14>
 8010f66:	bf00      	nop
 8010f68:	20000134 	.word	0x20000134
 8010f6c:	08011566 	.word	0x08011566
 8010f70:	08011538 	.word	0x08011538
 8010f74:	0801152b 	.word	0x0801152b

08010f78 <_calloc_r>:
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	fba1 5402 	umull	r5, r4, r1, r2
 8010f7e:	b93c      	cbnz	r4, 8010f90 <_calloc_r+0x18>
 8010f80:	4629      	mov	r1, r5
 8010f82:	f7ff f93d 	bl	8010200 <_malloc_r>
 8010f86:	4606      	mov	r6, r0
 8010f88:	b928      	cbnz	r0, 8010f96 <_calloc_r+0x1e>
 8010f8a:	2600      	movs	r6, #0
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	220c      	movs	r2, #12
 8010f92:	6002      	str	r2, [r0, #0]
 8010f94:	e7f9      	b.n	8010f8a <_calloc_r+0x12>
 8010f96:	462a      	mov	r2, r5
 8010f98:	4621      	mov	r1, r4
 8010f9a:	f7fe f9ef 	bl	800f37c <memset>
 8010f9e:	e7f5      	b.n	8010f8c <_calloc_r+0x14>

08010fa0 <__ascii_mbtowc>:
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	b901      	cbnz	r1, 8010fa6 <__ascii_mbtowc+0x6>
 8010fa4:	a901      	add	r1, sp, #4
 8010fa6:	b142      	cbz	r2, 8010fba <__ascii_mbtowc+0x1a>
 8010fa8:	b14b      	cbz	r3, 8010fbe <__ascii_mbtowc+0x1e>
 8010faa:	7813      	ldrb	r3, [r2, #0]
 8010fac:	600b      	str	r3, [r1, #0]
 8010fae:	7812      	ldrb	r2, [r2, #0]
 8010fb0:	1e10      	subs	r0, r2, #0
 8010fb2:	bf18      	it	ne
 8010fb4:	2001      	movne	r0, #1
 8010fb6:	b002      	add	sp, #8
 8010fb8:	4770      	bx	lr
 8010fba:	4610      	mov	r0, r2
 8010fbc:	e7fb      	b.n	8010fb6 <__ascii_mbtowc+0x16>
 8010fbe:	f06f 0001 	mvn.w	r0, #1
 8010fc2:	e7f8      	b.n	8010fb6 <__ascii_mbtowc+0x16>

08010fc4 <__ascii_wctomb>:
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	4608      	mov	r0, r1
 8010fc8:	b141      	cbz	r1, 8010fdc <__ascii_wctomb+0x18>
 8010fca:	2aff      	cmp	r2, #255	@ 0xff
 8010fcc:	d904      	bls.n	8010fd8 <__ascii_wctomb+0x14>
 8010fce:	228a      	movs	r2, #138	@ 0x8a
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fd6:	4770      	bx	lr
 8010fd8:	700a      	strb	r2, [r1, #0]
 8010fda:	2001      	movs	r0, #1
 8010fdc:	4770      	bx	lr
	...

08010fe0 <fiprintf>:
 8010fe0:	b40e      	push	{r1, r2, r3}
 8010fe2:	b503      	push	{r0, r1, lr}
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	ab03      	add	r3, sp, #12
 8010fe8:	4805      	ldr	r0, [pc, #20]	@ (8011000 <fiprintf+0x20>)
 8010fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fee:	6800      	ldr	r0, [r0, #0]
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	f7ff fd3d 	bl	8010a70 <_vfiprintf_r>
 8010ff6:	b002      	add	sp, #8
 8010ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ffc:	b003      	add	sp, #12
 8010ffe:	4770      	bx	lr
 8011000:	20000134 	.word	0x20000134

08011004 <abort>:
 8011004:	b508      	push	{r3, lr}
 8011006:	2006      	movs	r0, #6
 8011008:	f000 f82c 	bl	8011064 <raise>
 801100c:	2001      	movs	r0, #1
 801100e:	f7f1 fb15 	bl	800263c <_exit>

08011012 <_raise_r>:
 8011012:	291f      	cmp	r1, #31
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	4605      	mov	r5, r0
 8011018:	460c      	mov	r4, r1
 801101a:	d904      	bls.n	8011026 <_raise_r+0x14>
 801101c:	2316      	movs	r3, #22
 801101e:	6003      	str	r3, [r0, #0]
 8011020:	f04f 30ff 	mov.w	r0, #4294967295
 8011024:	bd38      	pop	{r3, r4, r5, pc}
 8011026:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011028:	b112      	cbz	r2, 8011030 <_raise_r+0x1e>
 801102a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801102e:	b94b      	cbnz	r3, 8011044 <_raise_r+0x32>
 8011030:	4628      	mov	r0, r5
 8011032:	f000 f831 	bl	8011098 <_getpid_r>
 8011036:	4622      	mov	r2, r4
 8011038:	4601      	mov	r1, r0
 801103a:	4628      	mov	r0, r5
 801103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011040:	f000 b818 	b.w	8011074 <_kill_r>
 8011044:	2b01      	cmp	r3, #1
 8011046:	d00a      	beq.n	801105e <_raise_r+0x4c>
 8011048:	1c59      	adds	r1, r3, #1
 801104a:	d103      	bne.n	8011054 <_raise_r+0x42>
 801104c:	2316      	movs	r3, #22
 801104e:	6003      	str	r3, [r0, #0]
 8011050:	2001      	movs	r0, #1
 8011052:	e7e7      	b.n	8011024 <_raise_r+0x12>
 8011054:	2100      	movs	r1, #0
 8011056:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801105a:	4620      	mov	r0, r4
 801105c:	4798      	blx	r3
 801105e:	2000      	movs	r0, #0
 8011060:	e7e0      	b.n	8011024 <_raise_r+0x12>
	...

08011064 <raise>:
 8011064:	4b02      	ldr	r3, [pc, #8]	@ (8011070 <raise+0xc>)
 8011066:	4601      	mov	r1, r0
 8011068:	6818      	ldr	r0, [r3, #0]
 801106a:	f7ff bfd2 	b.w	8011012 <_raise_r>
 801106e:	bf00      	nop
 8011070:	20000134 	.word	0x20000134

08011074 <_kill_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4d07      	ldr	r5, [pc, #28]	@ (8011094 <_kill_r+0x20>)
 8011078:	2300      	movs	r3, #0
 801107a:	4604      	mov	r4, r0
 801107c:	4608      	mov	r0, r1
 801107e:	4611      	mov	r1, r2
 8011080:	602b      	str	r3, [r5, #0]
 8011082:	f7f1 facb 	bl	800261c <_kill>
 8011086:	1c43      	adds	r3, r0, #1
 8011088:	d102      	bne.n	8011090 <_kill_r+0x1c>
 801108a:	682b      	ldr	r3, [r5, #0]
 801108c:	b103      	cbz	r3, 8011090 <_kill_r+0x1c>
 801108e:	6023      	str	r3, [r4, #0]
 8011090:	bd38      	pop	{r3, r4, r5, pc}
 8011092:	bf00      	nop
 8011094:	20002260 	.word	0x20002260

08011098 <_getpid_r>:
 8011098:	f7f1 bab8 	b.w	800260c <_getpid>

0801109c <_init>:
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	bf00      	nop
 80110a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110a2:	bc08      	pop	{r3}
 80110a4:	469e      	mov	lr, r3
 80110a6:	4770      	bx	lr

080110a8 <_fini>:
 80110a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110aa:	bf00      	nop
 80110ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ae:	bc08      	pop	{r3}
 80110b0:	469e      	mov	lr, r3
 80110b2:	4770      	bx	lr
