
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08010e10  08010e10  00011e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113c0  080113c0  000132d8  2**0
                  CONTENTS
  4 .ARM          00000008  080113c0  080113c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113c8  080113c8  000132d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113c8  080113c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113cc  080113cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080113d0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f40  200002d8  080116a8  000132d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  080116a8  00014218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4d4  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045b3  00000000  00000000  000317dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00035d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001271  00000000  00000000  00037560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e41f  00000000  00000000  000387d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd17  00000000  00000000  00056bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a866  00000000  00000000  00076907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011116d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007658  00000000  00000000  001111b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00118808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010df4 	.word	0x08010df4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08010df4 	.word	0x08010df4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
 **		  TIMER-INTERRUPT	     **
 **********************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	static uint8_t interruptState = readData;
    if (htim->Instance == TIM4)  // Check if the interrupt comes from TIM4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        switch(interruptState)
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d827      	bhi.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f3d 	.word	0x08000f3d
 8000f14:	08000f4b 	.word	0x08000f4b
        {
        	case readData:
        		mpu6050_readData();
 8000f18:	f000 fe2e 	bl	8001b78 <_Z16mpu6050_readDatav>
        		interruptState++;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f26:	701a      	strb	r2, [r3, #0]
        	break;
 8000f28:	e013      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_X_Axis:
        		controlRoll();
 8000f2a:	f000 f8ef 	bl	800110c <_Z11controlRollv>
				interruptState++;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f38:	701a      	strb	r2, [r3, #0]
			break;
 8000f3a:	e00a      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Y_Axis:
				interruptState++;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f46:	701a      	strb	r2, [r3, #0]
			break;
 8000f48:	e003      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x6a>

        	case control_Z_Axis:
				interruptState = readData;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			break;
 8000f50:	bf00      	nop

        }
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	200002f4 	.word	0x200002f4

08000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>:

Motor::Motor(TIM_HandleTypeDef *htim, unsigned int Channel, GPIO_TypeDef *motorPort, uint16_t directionPin, uint16_t enablePin, uint16_t brakePin)
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
{
	Motor::timer = htim;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	601a      	str	r2, [r3, #0]
	Motor::timerChannel = Channel;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
	Motor::motorPort = motorPort;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
	Motor::directionPin = directionPin;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8b3a      	ldrh	r2, [r7, #24]
 8000f88:	819a      	strh	r2, [r3, #12]
	Motor::enablePin = enablePin;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	8bba      	ldrh	r2, [r7, #28]
 8000f8e:	81da      	strh	r2, [r3, #14]
	Motor::brakePin = brakePin;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8c3a      	ldrh	r2, [r7, #32]
 8000f94:	821a      	strh	r2, [r3, #16]

	HAL_TIM_PWM_Start(timer, timerChannel);  // Start PWM
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f006 ffed 	bl	8007f80 <HAL_TIM_PWM_Start>

	changeDirection(CCW);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 f86d 	bl	8001088 <_ZN5Motor15changeDirectionEb>

	changeBrakeState(enableBrake);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f87f 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>

	changeMotorState(disableMotor);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f891 	bl	80010e0 <_ZN5Motor16changeMotorStateEb>

}
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZN5Motor11changeSpeedEh>:

void Motor::changeSpeed(uint8_t newMotorSpeed)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
	speed = newMotorSpeed;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	749a      	strb	r2, [r3, #18]

	uint32_t CCR_Value = (uint32_t)((__HAL_TIM_GET_AUTORELOAD(timer) + 1) * ((100.0 - speed) / 100.0));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa95 	bl	8000514 <__aeabi_ui2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7c9b      	ldrb	r3, [r3, #18]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa9e 	bl	8000534 <__aeabi_i2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	f04f 0000 	mov.w	r0, #0
 8001000:	4920      	ldr	r1, [pc, #128]	@ (8001084 <_ZN5Motor11changeSpeedEh+0xbc>)
 8001002:	f7ff f949 	bl	8000298 <__aeabi_dsub>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <_ZN5Motor11changeSpeedEh+0xbc>)
 8001014:	f7ff fc22 	bl	800085c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4620      	mov	r0, r4
 800101e:	4629      	mov	r1, r5
 8001020:	f7ff faf2 	bl	8000608 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fdc4 	bl	8000bb8 <__aeabi_d2uiz>
 8001030:	4603      	mov	r3, r0
 8001032:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <_ZN5Motor11changeSpeedEh+0x80>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001046:	e018      	b.n	800107a <_ZN5Motor11changeSpeedEh+0xb2>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <_ZN5Motor11changeSpeedEh+0x94>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800105a:	e00e      	b.n	800107a <_ZN5Motor11changeSpeedEh+0xb2>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b08      	cmp	r3, #8
 8001062:	d105      	bne.n	8001070 <_ZN5Motor11changeSpeedEh+0xa8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800106e:	e004      	b.n	800107a <_ZN5Motor11changeSpeedEh+0xb2>
	__HAL_TIM_SET_COMPARE(timer, timerChannel, CCR_Value);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop
 8001084:	40590000 	.word	0x40590000

08001088 <_ZN5Motor15changeDirectionEb>:

void Motor::changeDirection(bool newMotorDirection)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	direction = newMotorDirection;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(motorPort, directionPin, (GPIO_PinState)direction);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6898      	ldr	r0, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8999      	ldrh	r1, [r3, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7cdb      	ldrb	r3, [r3, #19]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f002 f8f8 	bl	800329c <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN5Motor16changeBrakeStateEb>:

void Motor::changeBrakeState(bool newBrakeState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	brakeState = newBrakeState;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(motorPort, brakePin, (GPIO_PinState)brakeState);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	8a19      	ldrh	r1, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7d1b      	ldrb	r3, [r3, #20]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f002 f8e2 	bl	800329c <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN5Motor16changeMotorStateEb>:

void Motor::changeMotorState(bool newMotorState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	motorState = newMotorState;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	755a      	strb	r2, [r3, #21]
	HAL_GPIO_WritePin(motorPort, enablePin, (GPIO_PinState)motorState);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6898      	ldr	r0, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	89d9      	ldrh	r1, [r3, #14]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7d5b      	ldrb	r3, [r3, #21]
 80010fe:	461a      	mov	r2, r3
 8001100:	f002 f8cc 	bl	800329c <HAL_GPIO_WritePin>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_Z11controlRollv>:

void controlRoll()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	double error;
	switch(balanceMode)
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_Z11controlRollv+0x4c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d00c      	beq.n	8001134 <_Z11controlRollv+0x28>
	{
		case oneDimensional:
			error = 45 - filterRoll;
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_Z11controlRollv+0x50>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	490e      	ldr	r1, [pc, #56]	@ (8001160 <_Z11controlRollv+0x54>)
 8001126:	f7ff f8b7 	bl	8000298 <__aeabi_dsub>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 2300 	strd	r2, r3, [r7]
		break;
 8001132:	e00c      	b.n	800114e <_Z11controlRollv+0x42>

		case threeDimensional:
			error = 45 - filterRoll;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <_Z11controlRollv+0x50>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <_Z11controlRollv+0x54>)
 8001140:	f7ff f8aa 	bl	8000298 <__aeabi_dsub>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2300 	strd	r2, r3, [r7]
		break;
 800114c:	bf00      	nop
	}
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000485 	.word	0x20000485
 800115c:	200004b8 	.word	0x200004b8
 8001160:	40468000 	.word	0x40468000

08001164 <_Z9hc05_initv>:
 **		  BT-MODULE INIT	     **
 **********************************
*/

void hc05_init()
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <_Z9hc05_initv+0x40>)
 800116c:	463c      	mov	r4, r7
 800116e:	461d      	mov	r5, r3
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001178:	c407      	stmia	r4!, {r0, r1, r2}
 800117a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f87e 	bl	8000280 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4639      	mov	r1, r7
 800118a:	2364      	movs	r3, #100	@ 0x64
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <_Z9hc05_initv+0x44>)
 800118e:	f007 fdf3 	bl	8008d78 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	4905      	ldr	r1, [pc, #20]	@ (80011ac <_Z9hc05_initv+0x48>)
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <_Z9hc05_initv+0x44>)
 8001198:	f007 fe79 	bl	8008e8e <HAL_UART_Receive_IT>
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	08010e10 	.word	0x08010e10
 80011a8:	2000043c 	.word	0x2000043c
 80011ac:	200002f5 	.word	0x200002f5

080011b0 <HAL_UART_RxCpltCallback>:
 **		  BT-MSG INTERRUPT	     **
 **********************************
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <HAL_UART_RxCpltCallback+0x40>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d112      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x38>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag_1D)
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_UART_RxCpltCallback+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b53      	cmp	r3, #83	@ 0x53
 80011c8:	d109      	bne.n	80011de <HAL_UART_RxCpltCallback+0x2e>
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_UART_RxCpltCallback+0x48>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag_1D = true;
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <HAL_UART_RxCpltCallback+0x48>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 80011de:	2201      	movs	r2, #1
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <HAL_UART_RxCpltCallback+0x44>)
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <HAL_UART_RxCpltCallback+0x4c>)
 80011e4:	f007 fe53 	bl	8008e8e <HAL_UART_Receive_IT>
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	200002f5 	.word	0x200002f5
 80011f8:	20000484 	.word	0x20000484
 80011fc:	2000043c 	.word	0x2000043c

08001200 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001208:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800120c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001218:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800121c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001220:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <ITM_SendChar+0x2c>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <ITM_SendChar+0x2e>
 800122c:	2300      	movs	r3, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d010      	beq.n	8001254 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001232:	e000      	b.n	8001236 <ITM_SendChar+0x36>
    {
      __NOP();
 8001234:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001236:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f4      	bne.n	8001234 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800124a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	@ 0x30
 8001268:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126a:	f001 f961 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f907 	bl	8001480 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fae3 	bl	800183c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001276:	f000 fac1 	bl	80017fc <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 800127a:	f00c f85d 	bl	800d338 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800127e:	f000 f971 	bl	8001564 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001282:	f000 f9a3 	bl	80015cc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001286:	f000 fa8b 	bl	80017a0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 800128a:	f000 fa2d 	bl	80016e8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  //MPU-6050 Init
  mpu6050_init(false);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 fb8e 	bl	80019b0 <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 8001294:	f7ff ff66 	bl	8001164 <_Z9hc05_initv>

  //Motor-Init
  Motor Motor_3(&htim3, TIM_CHANNEL_1, GPIOB, GPIO_PIN_9, GPIO_PIN_5, GPIO_PIN_8);
 8001298:	1d38      	adds	r0, r7, #4
 800129a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2320      	movs	r3, #32
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <main+0x1ec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	4969      	ldr	r1, [pc, #420]	@ (8001454 <main+0x1f0>)
 80012b0:	f7ff fe58 	bl	8000f64 <_ZN5MotorC1EP17TIM_HandleTypeDefjP12GPIO_TypeDefttt>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
  */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 80012b4:	2200      	movs	r2, #0
 80012b6:	2101      	movs	r1, #1
 80012b8:	4867      	ldr	r0, [pc, #412]	@ (8001458 <main+0x1f4>)
 80012ba:	f001 ffef 	bl	800329c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	static uint32_t timeSaveBlink = HAL_GetTick();
 80012be:	4b67      	ldr	r3, [pc, #412]	@ (800145c <main+0x1f8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3bf 8f5b 	dmb	ish
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <main+0x9a>
 80012d8:	4860      	ldr	r0, [pc, #384]	@ (800145c <main+0x1f8>)
 80012da:	f00c fd17 	bl	800dd0c <__cxa_guard_acquire>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <main+0x9a>
 80012ee:	f001 f985 	bl	80025fc <HAL_GetTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001460 <main+0x1fc>)
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4858      	ldr	r0, [pc, #352]	@ (800145c <main+0x1f8>)
 80012fa:	f00c fd13 	bl	800dd24 <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= 1000) // 1000 ms delay
 80012fe:	f001 f97d 	bl	80025fc <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	4b56      	ldr	r3, [pc, #344]	@ (8001460 <main+0x1fc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800130e:	4293      	cmp	r3, r2
 8001310:	bf8c      	ite	hi
 8001312:	2301      	movhi	r3, #1
 8001314:	2300      	movls	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <main+0xca>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800131c:	2104      	movs	r1, #4
 800131e:	484c      	ldr	r0, [pc, #304]	@ (8001450 <main+0x1ec>)
 8001320:	f001 ffd5 	bl	80032ce <HAL_GPIO_TogglePin>

		timeSaveBlink = HAL_GetTick();
 8001324:	f001 f96a 	bl	80025fc <HAL_GetTick>
 8001328:	4603      	mov	r3, r0
 800132a:	4a4d      	ldr	r2, [pc, #308]	@ (8001460 <main+0x1fc>)
 800132c:	6013      	str	r3, [r2, #0]
	}

	static uint8_t PWMspeed = 0;
	static uint32_t timeSaveMotorTest = 0;
	if(HAL_GetTick() - timeSaveMotorTest >= 10000)
 800132e:	f001 f965 	bl	80025fc <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	4b4b      	ldr	r3, [pc, #300]	@ (8001464 <main+0x200>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800133e:	4293      	cmp	r3, r2
 8001340:	bf8c      	ite	hi
 8001342:	2301      	movhi	r3, #1
 8001344:	2300      	movls	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d039      	beq.n	80013c0 <main+0x15c>
	{
		uint8_t newSpeed; // in %
		switch(PWMspeed)
 800134c:	4b46      	ldr	r3, [pc, #280]	@ (8001468 <main+0x204>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d024      	beq.n	800139e <main+0x13a>
 8001354:	2b02      	cmp	r3, #2
 8001356:	dc2e      	bgt.n	80013b6 <main+0x152>
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <main+0xfe>
 800135c:	2b01      	cmp	r3, #1
 800135e:	d00f      	beq.n	8001380 <main+0x11c>
 8001360:	e029      	b.n	80013b6 <main+0x152>
		{
			case 0:
				newSpeed = 50;
 8001362:	2332      	movs	r3, #50	@ 0x32
 8001364:	77fb      	strb	r3, [r7, #31]
				Motor_3.changeSpeed(newSpeed);
 8001366:	7ffa      	ldrb	r2, [r7, #31]
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe2b 	bl	8000fc8 <_ZN5Motor11changeSpeedEh>
				PWMspeed++;
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <main+0x204>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <main+0x204>)
 800137c:	701a      	strb	r2, [r3, #0]
			break;
 800137e:	e01a      	b.n	80013b6 <main+0x152>

			case 1:
				newSpeed = 60;
 8001380:	233c      	movs	r3, #60	@ 0x3c
 8001382:	77fb      	strb	r3, [r7, #31]
				Motor_3.changeSpeed(newSpeed);
 8001384:	7ffa      	ldrb	r2, [r7, #31]
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe1c 	bl	8000fc8 <_ZN5Motor11changeSpeedEh>
				PWMspeed++;
 8001390:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <main+0x204>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <main+0x204>)
 800139a:	701a      	strb	r2, [r3, #0]
			break;
 800139c:	e00b      	b.n	80013b6 <main+0x152>

			case 2:
				newSpeed = 25;
 800139e:	2319      	movs	r3, #25
 80013a0:	77fb      	strb	r3, [r7, #31]
				Motor_3.changeSpeed(newSpeed);
 80013a2:	7ffa      	ldrb	r2, [r7, #31]
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe0d 	bl	8000fc8 <_ZN5Motor11changeSpeedEh>
				PWMspeed = 0;
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <main+0x204>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
			break;
 80013b4:	bf00      	nop
		}
		timeSaveMotorTest = HAL_GetTick();
 80013b6:	f001 f921 	bl	80025fc <HAL_GetTick>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a29      	ldr	r2, [pc, #164]	@ (8001464 <main+0x200>)
 80013be:	6013      	str	r3, [r2, #0]
	}

	if (receivedStart_Flag_1D)
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <main+0x208>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f43f af7a 	beq.w	80012be <main+0x5a>
	{
	    static uint32_t timeSaveBuzzer = 0;
	    static bool buzzerActive = false;

	    if (!buzzerActive)  // If the buzzer is not already on, start it
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <main+0x20c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <main+0x18e>
	    {
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Turn on buzzer
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	481e      	ldr	r0, [pc, #120]	@ (8001458 <main+0x1f4>)
 80013de:	f001 ff5d 	bl	800329c <HAL_GPIO_WritePin>
	        timeSaveBuzzer = HAL_GetTick(); // Save the current time
 80013e2:	f001 f90b 	bl	80025fc <HAL_GetTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <main+0x210>)
 80013ea:	6013      	str	r3, [r2, #0]
	        buzzerActive = true;
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <main+0x20c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
	    }

	    if (buzzerActive && (HAL_GetTick() - timeSaveBuzzer >= 500)) // 500 ms delay
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <main+0x20c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <main+0x1ac>
 80013fa:	f001 f8ff 	bl	80025fc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <main+0x210>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800140a:	d301      	bcc.n	8001410 <main+0x1ac>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <main+0x1ae>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f43f af53 	beq.w	80012be <main+0x5a>
	    {
	        printf("Start \n");
 8001418:	4817      	ldr	r0, [pc, #92]	@ (8001478 <main+0x214>)
 800141a:	f00d fd7b 	bl	800ef14 <puts>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Turn off buzzer
 800141e:	2201      	movs	r2, #1
 8001420:	2104      	movs	r1, #4
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <main+0x1f4>)
 8001424:	f001 ff3a 	bl	800329c <HAL_GPIO_WritePin>
	        buzzerActive = false;  // Reset buzzer state
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <main+0x20c>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
	        balanceMode = oneDimensional;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <main+0x218>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	        Motor_3.changeMotorState(enableMotor);
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe51 	bl	80010e0 <_ZN5Motor16changeMotorStateEb>
	        Motor_3.changeBrakeState(disableBrake);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe36 	bl	80010b4 <_ZN5Motor16changeBrakeStateEb>
	        receivedStart_Flag_1D = false; // Reset the Start Flag
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <main+0x208>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800144e:	e736      	b.n	80012be <main+0x5a>
 8001450:	40020400 	.word	0x40020400
 8001454:	2000034c 	.word	0x2000034c
 8001458:	40020800 	.word	0x40020800
 800145c:	2000048c 	.word	0x2000048c
 8001460:	20000488 	.word	0x20000488
 8001464:	20000494 	.word	0x20000494
 8001468:	20000490 	.word	0x20000490
 800146c:	20000484 	.word	0x20000484
 8001470:	2000049c 	.word	0x2000049c
 8001474:	20000498 	.word	0x20000498
 8001478:	08010e30 	.word	0x08010e30
 800147c:	20000485 	.word	0x20000485

08001480 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	@ 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	2230      	movs	r2, #48	@ 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00d fe20 	bl	800f0d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <_Z18SystemClock_Configv+0xdc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <_Z18SystemClock_Configv+0xdc>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <_Z18SystemClock_Configv+0xdc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <_Z18SystemClock_Configv+0xe0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <_Z18SystemClock_Configv+0xe0>)
 80014ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <_Z18SystemClock_Configv+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014dc:	2301      	movs	r3, #1
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f0:	2310      	movs	r3, #16
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014f4:	23c0      	movs	r3, #192	@ 0xc0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fc:	2304      	movs	r3, #4
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f005 ff99 	bl	800743c <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800151a:	f000 fa43 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001522:	2301      	movs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 f9f7 	bl	800792c <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800154e:	f000 fa29 	bl	80019a4 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	@ 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800156a:	4a16      	ldr	r2, [pc, #88]	@ (80015c4 <_ZL12MX_I2C1_Initv+0x60>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001570:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <_ZL12MX_I2C1_Initv+0x64>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80015a2:	f001 feaf 	bl	8003304 <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015b6:	f000 f9f5 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	@ 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fc:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 80015fe:	4a39      	ldr	r2, [pc, #228]	@ (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001602:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001604:	2207      	movs	r2, #7
 8001606:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001610:	2263      	movs	r2, #99	@ 0x63
 8001612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001620:	482f      	ldr	r0, [pc, #188]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001622:	f006 fba1 	bl	8007d68 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001636:	f000 f9b5 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001644:	4619      	mov	r1, r3
 8001646:	4826      	ldr	r0, [pc, #152]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001648:	f006 fefc 	bl	8008444 <HAL_TIM_ConfigClockSource>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf14      	ite	ne
 8001652:	2301      	movne	r3, #1
 8001654:	2300      	moveq	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800165c:	f000 f9a2 	bl	80019a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001660:	481f      	ldr	r0, [pc, #124]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 8001662:	f006 fc33 	bl	8007ecc <HAL_TIM_PWM_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001676:	f000 f995 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	4619      	mov	r1, r3
 8001688:	4815      	ldr	r0, [pc, #84]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 800168a:	f007 faa3 	bl	8008bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800169e:	f000 f981 	bl	80019a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	@ 0x60
 80016a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 80016ba:	f006 fe01 	bl	80082c0 <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80016ce:	f000 f969 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d2:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <_ZL12MX_TIM3_Initv+0x114>)
 80016d4:	f000 fd50 	bl	8002178 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	@ 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000034c 	.word	0x2000034c
 80016e4:	40000400 	.word	0x40000400

080016e8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001706:	4a25      	ldr	r2, [pc, #148]	@ (800179c <_ZL12MX_TIM4_Initv+0xb4>)
 8001708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 800170c:	2207      	movs	r2, #7
 800170e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001718:	f242 720f 	movw	r2, #9999	@ 0x270f
 800171c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800172a:	481b      	ldr	r0, [pc, #108]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 800172c:	f006 fb1c 	bl	8007d68 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001740:	f000 f930 	bl	80019a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4619      	mov	r1, r3
 8001750:	4811      	ldr	r0, [pc, #68]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001752:	f006 fe77 	bl	8008444 <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001766:	f000 f91d 	bl	80019a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4808      	ldr	r0, [pc, #32]	@ (8001798 <_ZL12MX_TIM4_Initv+0xb0>)
 8001778:	f007 fa2c 	bl	8008bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 800178c:	f000 f90a 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000394 	.word	0x20000394
 800179c:	40000800 	.word	0x40000800

080017a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a6:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d8:	f007 fa7e 	bl	8008cd8 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80017ec:	f000 f8da 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000043c 	.word	0x2000043c
 80017f8:	40004400 	.word	0x40004400

080017fc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <_ZL11MX_DMA_Initv+0x3c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <_ZL11MX_DMA_Initv+0x3c>)
 800180c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <_ZL11MX_DMA_Initv+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	200f      	movs	r0, #15
 8001824:	f000 fff5 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001828:	200f      	movs	r0, #15
 800182a:	f001 f80e 	bl	800284a <HAL_NVIC_EnableIRQ>

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b41      	ldr	r3, [pc, #260]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a40      	ldr	r2, [pc, #256]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b3e      	ldr	r3, [pc, #248]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b3a      	ldr	r3, [pc, #232]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a39      	ldr	r2, [pc, #228]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b37      	ldr	r3, [pc, #220]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b33      	ldr	r3, [pc, #204]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a32      	ldr	r2, [pc, #200]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b30      	ldr	r3, [pc, #192]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a2b      	ldr	r2, [pc, #172]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b29      	ldr	r3, [pc, #164]	@ (800195c <_ZL12MX_GPIO_Initv+0x120>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2107      	movs	r1, #7
 80018c6:	4826      	ldr	r0, [pc, #152]	@ (8001960 <_ZL12MX_GPIO_Initv+0x124>)
 80018c8:	f001 fce8 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2110      	movs	r1, #16
 80018d0:	4824      	ldr	r0, [pc, #144]	@ (8001964 <_ZL12MX_GPIO_Initv+0x128>)
 80018d2:	f001 fce3 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 7149 	mov.w	r1, #804	@ 0x324
 80018dc:	4822      	ldr	r0, [pc, #136]	@ (8001968 <_ZL12MX_GPIO_Initv+0x12c>)
 80018de:	f001 fcdd 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4819      	ldr	r0, [pc, #100]	@ (8001960 <_ZL12MX_GPIO_Initv+0x124>)
 80018fa:	f001 fb4b 	bl	8002f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018fe:	2310      	movs	r3, #16
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4813      	ldr	r0, [pc, #76]	@ (8001964 <_ZL12MX_GPIO_Initv+0x128>)
 8001916:	f001 fb3d 	bl	8002f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800191a:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	@ (8001968 <_ZL12MX_GPIO_Initv+0x12c>)
 8001934:	f001 fb2e 	bl	8002f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800193e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4804      	ldr	r0, [pc, #16]	@ (8001960 <_ZL12MX_GPIO_Initv+0x124>)
 8001950:	f001 fb20 	bl	8002f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40020800 	.word	0x40020800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400

0800196c <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e009      	b.n	8001992 <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc3a 	bl	8001200 <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbf1      	blt.n	800197e <_write+0x12>
		}
		return len;
 800199a:	687b      	ldr	r3, [r7, #4]
	}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <Error_Handler+0x8>

080019b0 <_Z12mpu6050_initb>:
 **		  IMU-INITIALIZATION	     **
 **********************************
*/

void mpu6050_init(bool interruptEnable)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 80019ba:	2364      	movs	r3, #100	@ 0x64
 80019bc:	2201      	movs	r2, #1
 80019be:	21d0      	movs	r1, #208	@ 0xd0
 80019c0:	4861      	ldr	r0, [pc, #388]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 80019c2:	f002 f925 	bl	8003c10 <HAL_I2C_IsDeviceReady>
 80019c6:	4603      	mov	r3, r0
 80019c8:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 80019d0:	485e      	ldr	r0, [pc, #376]	@ (8001b4c <_Z12mpu6050_initb+0x19c>)
 80019d2:	f00d fa9f 	bl	800ef14 <puts>
 80019d6:	e002      	b.n	80019de <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 80019d8:	485d      	ldr	r0, [pc, #372]	@ (8001b50 <_Z12mpu6050_initb+0x1a0>)
 80019da:	f00d fa9b 	bl	800ef14 <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 80019de:	2300      	movs	r3, #0
 80019e0:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80019e2:	2364      	movs	r3, #100	@ 0x64
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	f107 030e 	add.w	r3, r7, #14
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	226b      	movs	r2, #107	@ 0x6b
 80019f4:	21d0      	movs	r1, #208	@ 0xd0
 80019f6:	4854      	ldr	r0, [pc, #336]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 80019f8:	f001 fdde 	bl	80035b8 <HAL_I2C_Mem_Write>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d110      	bne.n	8001a28 <_Z12mpu6050_initb+0x78>
	{
		printf("Exited sleep mode \n");
 8001a06:	4853      	ldr	r0, [pc, #332]	@ (8001b54 <_Z12mpu6050_initb+0x1a4>)
 8001a08:	f00d fa84 	bl	800ef14 <puts>
		if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8001a0c:	4852      	ldr	r0, [pc, #328]	@ (8001b58 <_Z12mpu6050_initb+0x1a8>)
 8001a0e:	f006 f9fb 	bl	8007e08 <HAL_TIM_Base_Start_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <_Z12mpu6050_initb+0x7e>
		{
			// Starting Error
			Error_Handler();
 8001a22:	f7ff ffbf 	bl	80019a4 <Error_Handler>
 8001a26:	e002      	b.n	8001a2e <_Z12mpu6050_initb+0x7e>
		}
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 8001a28:	484c      	ldr	r0, [pc, #304]	@ (8001b5c <_Z12mpu6050_initb+0x1ac>)
 8001a2a:	f00d fa73 	bl	800ef14 <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 8001a2e:	2364      	movs	r3, #100	@ 0x64
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2301      	movs	r3, #1
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	f107 030e 	add.w	r3, r7, #14
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	221a      	movs	r2, #26
 8001a40:	21d1      	movs	r1, #209	@ 0xd1
 8001a42:	4841      	ldr	r0, [pc, #260]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001a44:	f001 feb2 	bl	80037ac <HAL_I2C_Mem_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001a56:	2364      	movs	r3, #100	@ 0x64
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f107 030e 	add.w	r3, r7, #14
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2301      	movs	r3, #1
 8001a66:	221a      	movs	r2, #26
 8001a68:	21d0      	movs	r1, #208	@ 0xd0
 8001a6a:	4837      	ldr	r0, [pc, #220]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001a6c:	f001 fda4 	bl	80035b8 <HAL_I2C_Mem_Write>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d104      	bne.n	8001a84 <_Z12mpu6050_initb+0xd4>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4838      	ldr	r0, [pc, #224]	@ (8001b60 <_Z12mpu6050_initb+0x1b0>)
 8001a7e:	f00d f9e1 	bl	800ee44 <iprintf>
 8001a82:	e002      	b.n	8001a8a <_Z12mpu6050_initb+0xda>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 8001a84:	4837      	ldr	r0, [pc, #220]	@ (8001b64 <_Z12mpu6050_initb+0x1b4>)
 8001a86:	f00d fa45 	bl	800ef14 <puts>
	}

	//Interrupt-Enable
	if(interruptEnable)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d056      	beq.n	8001b3e <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 8001a90:	2364      	movs	r3, #100	@ 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f107 030e 	add.w	r3, r7, #14
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2237      	movs	r2, #55	@ 0x37
 8001aa2:	21d1      	movs	r1, #209	@ 0xd1
 8001aa4:	4828      	ldr	r0, [pc, #160]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001aa6:	f001 fe81 	bl	80037ac <HAL_I2C_Mem_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001ab8:	2364      	movs	r3, #100	@ 0x64
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	2301      	movs	r3, #1
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	f107 030e 	add.w	r3, r7, #14
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2237      	movs	r2, #55	@ 0x37
 8001aca:	21d0      	movs	r1, #208	@ 0xd0
 8001acc:	481e      	ldr	r0, [pc, #120]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001ace:	f001 fd73 	bl	80035b8 <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 8001adc:	4822      	ldr	r0, [pc, #136]	@ (8001b68 <_Z12mpu6050_initb+0x1b8>)
 8001ade:	f00d fa19 	bl	800ef14 <puts>
 8001ae2:	e002      	b.n	8001aea <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 8001ae4:	4821      	ldr	r0, [pc, #132]	@ (8001b6c <_Z12mpu6050_initb+0x1bc>)
 8001ae6:	f00d fa15 	bl	800ef14 <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 8001aea:	2364      	movs	r3, #100	@ 0x64
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	2301      	movs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f107 030e 	add.w	r3, r7, #14
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	2238      	movs	r2, #56	@ 0x38
 8001afc:	21d1      	movs	r1, #209	@ 0xd1
 8001afe:	4812      	ldr	r0, [pc, #72]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001b00:	f001 fe54 	bl	80037ac <HAL_I2C_Mem_Read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001b0c:	2364      	movs	r3, #100	@ 0x64
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f107 030e 	add.w	r3, r7, #14
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2238      	movs	r2, #56	@ 0x38
 8001b1e:	21d0      	movs	r1, #208	@ 0xd0
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <_Z12mpu6050_initb+0x198>)
 8001b22:	f001 fd49 	bl	80035b8 <HAL_I2C_Mem_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 8001b30:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <_Z12mpu6050_initb+0x1c0>)
 8001b32:	f00d f9ef 	bl	800ef14 <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8001b36:	e002      	b.n	8001b3e <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8001b38:	480e      	ldr	r0, [pc, #56]	@ (8001b74 <_Z12mpu6050_initb+0x1c4>)
 8001b3a:	f00d f9eb 	bl	800ef14 <puts>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002f8 	.word	0x200002f8
 8001b4c:	08010e38 	.word	0x08010e38
 8001b50:	08010e50 	.word	0x08010e50
 8001b54:	08010e6c 	.word	0x08010e6c
 8001b58:	20000394 	.word	0x20000394
 8001b5c:	08010e80 	.word	0x08010e80
 8001b60:	08010e9c 	.word	0x08010e9c
 8001b64:	08010ec0 	.word	0x08010ec0
 8001b68:	08010eec 	.word	0x08010eec
 8001b6c:	08010f18 	.word	0x08010f18
 8001b70:	08010f34 	.word	0x08010f34
 8001b74:	08010f54 	.word	0x08010f54

08001b78 <_Z16mpu6050_readDatav>:
 **		  READ IMU-SENSOR	     **
 **********************************
*/

void mpu6050_readData()
{
 8001b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b7c:	b098      	sub	sp, #96	@ 0x60
 8001b7e:	af04      	add	r7, sp, #16
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001b80:	48b9      	ldr	r0, [pc, #740]	@ (8001e68 <_Z16mpu6050_readDatav+0x2f0>)
 8001b82:	f002 fbcd 	bl	8004320 <HAL_I2C_GetState>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 81e0 	beq.w	8001f58 <_Z16mpu6050_readDatav+0x3e0>
	{
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14, 100);
 8001b98:	2364      	movs	r3, #100	@ 0x64
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	4bb2      	ldr	r3, [pc, #712]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	223b      	movs	r2, #59	@ 0x3b
 8001ba8:	21d1      	movs	r1, #209	@ 0xd1
 8001baa:	48af      	ldr	r0, [pc, #700]	@ (8001e68 <_Z16mpu6050_readDatav+0x2f0>)
 8001bac:	f001 fdfe 	bl	80037ac <HAL_I2C_Mem_Read>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(ret == HAL_OK)
 8001bb6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 81cc 	bne.w	8001f58 <_Z16mpu6050_readDatav+0x3e0>
			double accX, accY, accZ, gyroX, gyroY, gyroZ, dt, accRoll, accPitch;
			static double gyroAngleX = 0.0, gyroAngleY = 0.0;
			static uint32_t currentTime, previousTime;

			//Accelerometer Data (Registers 59 to 64)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	48aa      	ldr	r0, [pc, #680]	@ (8001e70 <_Z16mpu6050_readDatav+0x2f8>)
 8001bc6:	f001 fb69 	bl	800329c <HAL_GPIO_WritePin>
			accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 8001bca:	4ba8      	ldr	r3, [pc, #672]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4ba6      	ldr	r3, [pc, #664]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fca9 	bl	8000534 <__aeabi_i2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4ba3      	ldr	r3, [pc, #652]	@ (8001e74 <_Z16mpu6050_readDatav+0x2fc>)
 8001be8:	f7fe fe38 	bl	800085c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			//printf("Accel-X [g]: %f \n", accX);

			accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 8001bf4:	4b9d      	ldr	r3, [pc, #628]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001bf6:	789b      	ldrb	r3, [r3, #2]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc94 	bl	8000534 <__aeabi_i2d>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b98      	ldr	r3, [pc, #608]	@ (8001e74 <_Z16mpu6050_readDatav+0x2fc>)
 8001c12:	f7fe fe23 	bl	800085c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			//printf("Accel-Y [g]: %f \n", accY);

			accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 8001c1e:	4b93      	ldr	r3, [pc, #588]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	4b91      	ldr	r3, [pc, #580]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001c28:	795b      	ldrb	r3, [r3, #5]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc7f 	bl	8000534 <__aeabi_i2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e74 <_Z16mpu6050_readDatav+0x2fc>)
 8001c3c:	f7fe fe0e 	bl	800085c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			//printf("Accel-Z [g]: %f \n", accZ);

			//Roll and Pitch Angles from Accelerometer
			accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001c48:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c4c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001c58:	f7fe fcd6 	bl	8000608 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c6c:	f7fe fccc 	bl	8000608 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4640      	mov	r0, r8
 8001c76:	4649      	mov	r1, r9
 8001c78:	f7fe fb10 	bl	800029c <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	ec43 2b17 	vmov	d7, r2, r3
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	eef0 0a67 	vmov.f32	s1, s15
 8001c8c:	f00c f84f 	bl	800dd2e <sqrt>
 8001c90:	eeb0 7a40 	vmov.f32	s14, s0
 8001c94:	eef0 7a60 	vmov.f32	s15, s1
 8001c98:	eeb0 1a47 	vmov.f32	s2, s14
 8001c9c:	eef0 1a67 	vmov.f32	s3, s15
 8001ca0:	ec45 4b10 	vmov	d0, r4, r5
 8001ca4:	f00c f841 	bl	800dd2a <atan2>
 8001ca8:	ec51 0b10 	vmov	r0, r1, d0
 8001cac:	a36a      	add	r3, pc, #424	@ (adr r3, 8001e58 <_Z16mpu6050_readDatav+0x2e0>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fca9 	bl	8000608 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

			/*estimation that works only if sensor is level (small pitch angle)
			accRoll = atan2(accY, accZ) * 57.3;
			printf("Roll1: %f \n", accRoll);
			*/
			accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001cc6:	f7fe fc9f 	bl	8000608 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cda:	f7fe fc95 	bl	8000608 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fad9 	bl	800029c <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	ec43 2b17 	vmov	d7, r2, r3
 8001cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf6:	eef0 0a67 	vmov.f32	s1, s15
 8001cfa:	f00c f818 	bl	800dd2e <sqrt>
 8001cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8001d02:	eef0 7a60 	vmov.f32	s15, s1
 8001d06:	eeb0 1a47 	vmov.f32	s2, s14
 8001d0a:	eef0 1a67 	vmov.f32	s3, s15
 8001d0e:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001d12:	f00c f80a 	bl	800dd2a <atan2>
 8001d16:	ec51 0b10 	vmov	r0, r1, d0
 8001d1a:	a34f      	add	r3, pc, #316	@ (adr r3, 8001e58 <_Z16mpu6050_readDatav+0x2e0>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fc72 	bl	8000608 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	e9c7 2308 	strd	r2, r3, [r7, #32]


			//Temperature Data (Registers 65 and 66)

			//Gyroscope Data (Registers 67 to 72)
			currentTime = HAL_GetTick();
 8001d2c:	f000 fc66 	bl	80025fc <HAL_GetTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <_Z16mpu6050_readDatav+0x300>)
 8001d34:	6013      	str	r3, [r2, #0]
			dt = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8001d36:	4b50      	ldr	r3, [pc, #320]	@ (8001e78 <_Z16mpu6050_readDatav+0x300>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b50      	ldr	r3, [pc, #320]	@ (8001e7c <_Z16mpu6050_readDatav+0x304>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbe7 	bl	8000514 <__aeabi_ui2d>
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <_Z16mpu6050_readDatav+0x308>)
 8001d4c:	f7fe fd86 	bl	800085c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 2306 	strd	r2, r3, [r7, #24]
			previousTime = currentTime;
 8001d58:	4b47      	ldr	r3, [pc, #284]	@ (8001e78 <_Z16mpu6050_readDatav+0x300>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a47      	ldr	r2, [pc, #284]	@ (8001e7c <_Z16mpu6050_readDatav+0x304>)
 8001d5e:	6013      	str	r3, [r2, #0]

			gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8001d60:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001d62:	7a1b      	ldrb	r3, [r3, #8]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001d6a:	7a5b      	ldrb	r3, [r3, #9]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbde 	bl	8000534 <__aeabi_i2d>
 8001d78:	a339      	add	r3, pc, #228	@ (adr r3, 8001e60 <_Z16mpu6050_readDatav+0x2e8>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fd6d 	bl	800085c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
			//printf("Gyro-X [°/s]: %f \n", gyroX);

			gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001d8c:	7a9b      	ldrb	r3, [r3, #10]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001d94:	7adb      	ldrb	r3, [r3, #11]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbc9 	bl	8000534 <__aeabi_i2d>
 8001da2:	a32f      	add	r3, pc, #188	@ (adr r3, 8001e60 <_Z16mpu6050_readDatav+0x2e8>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fd58 	bl	800085c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2302 	strd	r2, r3, [r7, #8]
			//printf("Gyro-Y [°/s]: %f \n", gyroY);

			gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001db6:	7b1b      	ldrb	r3, [r3, #12]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <_Z16mpu6050_readDatav+0x2f4>)
 8001dbe:	7b5b      	ldrb	r3, [r3, #13]
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbb4 	bl	8000534 <__aeabi_i2d>
 8001dcc:	a324      	add	r3, pc, #144	@ (adr r3, 8001e60 <_Z16mpu6050_readDatav+0x2e8>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fd43 	bl	800085c <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2300 	strd	r2, r3, [r7]
			//printf("Gyro-Z [°/s]: %f \n", gyroZ);

			//Angles and yaw from Gyroscope
			gyroAngleX += gyroX * dt;
 8001dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001de6:	f7fe fc0f 	bl	8000608 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <_Z16mpu6050_readDatav+0x30c>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fa50 	bl	800029c <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4920      	ldr	r1, [pc, #128]	@ (8001e84 <_Z16mpu6050_readDatav+0x30c>)
 8001e02:	e9c1 2300 	strd	r2, r3, [r1]
			gyroAngleY += gyroY * dt;
 8001e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e0e:	f7fe fbfb 	bl	8000608 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <_Z16mpu6050_readDatav+0x310>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fa3c 	bl	800029c <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4917      	ldr	r1, [pc, #92]	@ (8001e88 <_Z16mpu6050_readDatav+0x310>)
 8001e2a:	e9c1 2300 	strd	r2, r3, [r1]
			gyroYaw += gyroZ * dt;
 8001e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e36:	f7fe fbe7 	bl	8000608 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <_Z16mpu6050_readDatav+0x314>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fa28 	bl	800029c <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e01e      	b.n	8001e90 <_Z16mpu6050_readDatav+0x318>
 8001e52:	bf00      	nop
 8001e54:	f3af 8000 	nop.w
 8001e58:	c63f1412 	.word	0xc63f1412
 8001e5c:	404ca5dc 	.word	0x404ca5dc
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40606000 	.word	0x40606000
 8001e68:	200002f8 	.word	0x200002f8
 8001e6c:	200004a0 	.word	0x200004a0
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40d00000 	.word	0x40d00000
 8001e78:	200004d8 	.word	0x200004d8
 8001e7c:	200004dc 	.word	0x200004dc
 8001e80:	408f4000 	.word	0x408f4000
 8001e84:	200004c8 	.word	0x200004c8
 8001e88:	200004d0 	.word	0x200004d0
 8001e8c:	200004b0 	.word	0x200004b0
 8001e90:	4939      	ldr	r1, [pc, #228]	@ (8001f78 <_Z16mpu6050_readDatav+0x400>)
 8001e92:	e9c1 2300 	strd	r2, r3, [r1]

			//Complementary Filter
			filterRoll = GYRO_FILTER_WEIGHT * (filterRoll + gyroX * dt) + (1 - GYRO_FILTER_WEIGHT) * accRoll;
 8001e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e9e:	f7fe fbb3 	bl	8000608 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <_Z16mpu6050_readDatav+0x404>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe f9f4 	bl	800029c <__adddf3>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001f68 <_Z16mpu6050_readDatav+0x3f0>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fba1 	bl	8000608 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	a328      	add	r3, pc, #160	@ (adr r3, 8001f70 <_Z16mpu6050_readDatav+0x3f8>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ed8:	f7fe fb96 	bl	8000608 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	f7fe f9da 	bl	800029c <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <_Z16mpu6050_readDatav+0x404>)
 8001eee:	e9c1 2300 	strd	r2, r3, [r1]
			filterPitch = GYRO_FILTER_WEIGHT * (filterPitch + gyroY * dt) + (1 - GYRO_FILTER_WEIGHT) * accPitch;
 8001ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efa:	f7fe fb85 	bl	8000608 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <_Z16mpu6050_readDatav+0x408>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe f9c6 	bl	800029c <__adddf3>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	a313      	add	r3, pc, #76	@ (adr r3, 8001f68 <_Z16mpu6050_readDatav+0x3f0>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb73 	bl	8000608 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	461d      	mov	r5, r3
 8001f2a:	a311      	add	r3, pc, #68	@ (adr r3, 8001f70 <_Z16mpu6050_readDatav+0x3f8>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f34:	f7fe fb68 	bl	8000608 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe f9ac 	bl	800029c <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <_Z16mpu6050_readDatav+0x408>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
			/*
			printf("Roll: %f \n", filterRoll);
			printf("Pitch: %f \n", filterPitch);
			printf("Yaw: %f \n", gyroYaw);
			*/
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2110      	movs	r1, #16
 8001f52:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <_Z16mpu6050_readDatav+0x40c>)
 8001f54:	f001 f9a2 	bl	800329c <HAL_GPIO_WritePin>
		}
	}
}
 8001f58:	bf00      	nop
 8001f5a:	3750      	adds	r7, #80	@ 0x50
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	7ae147ae 	.word	0x7ae147ae
 8001f6c:	3fefae14 	.word	0x3fefae14
 8001f70:	47ae1480 	.word	0x47ae1480
 8001f74:	3f847ae1 	.word	0x3f847ae1
 8001f78:	200004b0 	.word	0x200004b0
 8001f7c:	200004b8 	.word	0x200004b8
 8001f80:	200004c0 	.word	0x200004c0
 8001f84:	40020000 	.word	0x40020000

08001f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a21      	ldr	r2, [pc, #132]	@ (800207c <HAL_I2C_MspInit+0xa4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d13b      	bne.n	8002072 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a1f      	ldr	r2, [pc, #124]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002016:	23c0      	movs	r3, #192	@ 0xc0
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201a:	2312      	movs	r3, #18
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002026:	2304      	movs	r3, #4
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4814      	ldr	r0, [pc, #80]	@ (8002084 <HAL_I2C_MspInit+0xac>)
 8002032:	f000 ffaf 	bl	8002f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a10      	ldr	r2, [pc, #64]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 8002040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_I2C_MspInit+0xa8>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	201f      	movs	r0, #31
 8002058:	f000 fbdb 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800205c:	201f      	movs	r0, #31
 800205e:	f000 fbf4 	bl	800284a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2020      	movs	r0, #32
 8002068:	f000 fbd3 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800206c:	2020      	movs	r0, #32
 800206e:	f000 fbec 	bl	800284a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	@ 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40005400 	.word	0x40005400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a33      	ldr	r2, [pc, #204]	@ (8002164 <HAL_TIM_Base_MspInit+0xdc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d144      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a31      	ldr	r2, [pc, #196]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <HAL_TIM_Base_MspInit+0xe8>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80020bc:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020be:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c4:	4b29      	ldr	r3, [pc, #164]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	4b28      	ldr	r3, [pc, #160]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80020d0:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020de:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80020fa:	481c      	ldr	r0, [pc, #112]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 80020fc:	f000 fbc0 	bl	8002880 <HAL_DMA_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002106:	f7ff fc4d 	bl	80019a4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002110:	4a16      	ldr	r2, [pc, #88]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 800211a:	639a      	str	r2, [r3, #56]	@ 0x38
 800211c:	4a13      	ldr	r2, [pc, #76]	@ (800216c <HAL_TIM_Base_MspInit+0xe4>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002122:	e01a      	b.n	800215a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <HAL_TIM_Base_MspInit+0xec>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d115      	bne.n	800215a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_TIM_Base_MspInit+0xe0>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	201e      	movs	r0, #30
 8002150:	f000 fb5f 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002154:	201e      	movs	r0, #30
 8002156:	f000 fb78 	bl	800284a <HAL_NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40000400 	.word	0x40000400
 8002168:	40023800 	.word	0x40023800
 800216c:	200003dc 	.word	0x200003dc
 8002170:	40026070 	.word	0x40026070
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <HAL_TIM_MspPostInit+0x68>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11d      	bne.n	80021d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_TIM_MspPostInit+0x6c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_TIM_MspPostInit+0x6c>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_TIM_MspPostInit+0x6c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021b6:	2310      	movs	r3, #16
 80021b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <HAL_TIM_MspPostInit+0x70>)
 80021d2:	f000 fedf 	bl	8002f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020400 	.word	0x40020400

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_UART_MspInit+0x94>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d133      	bne.n	8002276 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <HAL_UART_MspInit+0x98>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <HAL_UART_MspInit+0x98>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_UART_MspInit+0x98>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_UART_MspInit+0x98>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <HAL_UART_MspInit+0x98>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_UART_MspInit+0x98>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002246:	230c      	movs	r3, #12
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002256:	2307      	movs	r3, #7
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4809      	ldr	r0, [pc, #36]	@ (8002288 <HAL_UART_MspInit+0x9c>)
 8002262:	f000 fe97 	bl	8002f94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2026      	movs	r0, #38	@ 0x26
 800226c:	f000 fad1 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002270:	2026      	movs	r0, #38	@ 0x26
 8002272:	f000 faea 	bl	800284a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	@ 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40004400 	.word	0x40004400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e2:	f000 f977 	bl	80025d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <DMA1_Stream4_IRQHandler+0x10>)
 80022f2:	f000 fc05 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003dc 	.word	0x200003dc

08002300 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <TIM4_IRQHandler+0x10>)
 8002306:	f005 feeb 	bl	80080e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000394 	.word	0x20000394

08002314 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <I2C1_EV_IRQHandler+0x10>)
 800231a:	f001 fda7 	bl	8003e6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200002f8 	.word	0x200002f8

08002328 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <I2C1_ER_IRQHandler+0x10>)
 800232e:	f001 fef0 	bl	8004112 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002f8 	.word	0x200002f8

0800233c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <USART2_IRQHandler+0x10>)
 8002342:	f006 fdc9 	bl	8008ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000043c 	.word	0x2000043c

08002350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <OTG_FS_IRQHandler+0x10>)
 8002356:	f003 ff62 	bl	800621e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200019c8 	.word	0x200019c8

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800237e:	f00c fefb 	bl	800f178 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
  return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <_exit+0x12>

080023aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023bc:	f3af 8000 	nop.w
 80023c0:	4601      	mov	r1, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf0      	blt.n	80023bc <_read+0x12>
  }

  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800240c:	605a      	str	r2, [r3, #4]
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_isatty>:

int _isatty(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f00c fe7c 	bl	800f178 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20020000 	.word	0x20020000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	200004e0 	.word	0x200004e0
 80024b4:	20002218 	.word	0x20002218

080024b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e0:	f7ff ffea 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	@ (800251c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250a:	f00c fe3b 	bl	800f184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250e:	f7fe fea9 	bl	8001264 <main>
  bx  lr    
 8002512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002520:	080113d0 	.word	0x080113d0
  ldr r2, =_sbss
 8002524:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002528:	20002218 	.word	0x20002218

0800252c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC_IRQHandler>
	...

08002530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002534:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <HAL_Init+0x40>)
 800253a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800253e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_Init+0x40>)
 8002546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800254a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <HAL_Init+0x40>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f94f 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255e:	200f      	movs	r0, #15
 8002560:	f000 f808 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002564:	f7ff fd10 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00

08002574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_InitTick+0x54>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x58>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f967 	bl	8002866 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d80a      	bhi.n	80025be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f000 f92f 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4a06      	ldr	r2, [pc, #24]	@ (80025d0 <HAL_InitTick+0x5c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000008 	.word	0x20000008
 80025f8:	200004e4 	.word	0x200004e4

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200004e4 	.word	0x200004e4

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff ffee 	bl	80025fc <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d005      	beq.n	800263a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_Delay+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263a:	bf00      	nop
 800263c:	f7ff ffde 	bl	80025fc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f7      	bhi.n	800263c <HAL_Delay+0x28>
  {
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000008 	.word	0x20000008

0800265c <__NVIC_SetPriorityGrouping>:
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	@ (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	@ (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	@ 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff29 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff3e 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff8e 	bl	8002750 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5d 	bl	80026fc <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff31 	bl	80026c0 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff feb6 	bl	80025fc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e099      	b.n	80029d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028bc:	e00f      	b.n	80028de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028be:	f7ff fe9d 	bl	80025fc <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d908      	bls.n	80028de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e078      	b.n	80029d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <HAL_DMA_Init+0x158>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2b04      	cmp	r3, #4
 8002970:	d117      	bne.n	80029a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa89 	bl	8002e9c <DMA_CheckFifoParam>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800299e:	2301      	movs	r3, #1
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa40 	bl	8002e30 <DMA_CalcBaseAndBitshift>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b8:	223f      	movs	r2, #63	@ 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	f010803f 	.word	0xf010803f

080029dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029ea:	f7ff fe07 	bl	80025fc <HAL_GetTick>
 80029ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d008      	beq.n	8002a0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e052      	b.n	8002ab4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0216 	bic.w	r2, r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_DMA_Abort+0x62>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5e:	e013      	b.n	8002a88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a60:	f7ff fdcc 	bl	80025fc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d90c      	bls.n	8002a88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2203      	movs	r2, #3
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e015      	b.n	8002ab4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e4      	bne.n	8002a60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	223f      	movs	r2, #63	@ 0x3f
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d004      	beq.n	8002ada <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00c      	b.n	8002af4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2205      	movs	r2, #5
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d48 <HAL_DMA_IRQHandler+0x248>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8e      	ldr	r2, [pc, #568]	@ (8002d4c <HAL_DMA_IRQHandler+0x24c>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	2208      	movs	r2, #8
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d012      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	2210      	movs	r2, #16
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d043      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d03c      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d018      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d024      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
 8002c2e:	e01f      	b.n	8002c70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
 8002c40:	e016      	b.n	8002c70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0208 	bic.w	r2, r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	2220      	movs	r2, #32
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 808f 	beq.w	8002da0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8087 	beq.w	8002da0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	2220      	movs	r2, #32
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d136      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0216 	bic.w	r2, r2, #22
 8002cb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <HAL_DMA_IRQHandler+0x1da>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0208 	bic.w	r2, r2, #8
 8002ce8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	223f      	movs	r2, #63	@ 0x3f
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d07e      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
        }
        return;
 8002d16:	e079      	b.n	8002e0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01d      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d031      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
 8002d44:	e02c      	b.n	8002da0 <HAL_DMA_IRQHandler+0x2a0>
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d023      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e01e      	b.n	8002da0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0210 	bic.w	r2, r2, #16
 8002d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d032      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2205      	movs	r2, #5
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d307      	bcc.n	8002de8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f2      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x2cc>
 8002de6:	e000      	b.n	8002dea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
 8002e0a:	e000      	b.n	8002e0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e0c:	bf00      	nop
    }
  }
}
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e22:	b2db      	uxtb	r3, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3b10      	subs	r3, #16
 8002e40:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <DMA_CalcBaseAndBitshift+0x64>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e4a:	4a13      	ldr	r2, [pc, #76]	@ (8002e98 <DMA_CalcBaseAndBitshift+0x68>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d909      	bls.n	8002e72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	1d1a      	adds	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e70:	e007      	b.n	8002e82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	aaaaaaab 	.word	0xaaaaaaab
 8002e98:	08010fd4 	.word	0x08010fd4

08002e9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11f      	bne.n	8002ef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d856      	bhi.n	8002f6a <DMA_CheckFifoParam+0xce>
 8002ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <DMA_CheckFifoParam+0x28>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002ee7 	.word	0x08002ee7
 8002ecc:	08002ed5 	.word	0x08002ed5
 8002ed0:	08002f6b 	.word	0x08002f6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d046      	beq.n	8002f6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee4:	e043      	b.n	8002f6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eee:	d140      	bne.n	8002f72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e03d      	b.n	8002f72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efe:	d121      	bne.n	8002f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d837      	bhi.n	8002f76 <DMA_CheckFifoParam+0xda>
 8002f06:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <DMA_CheckFifoParam+0x70>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f23 	.word	0x08002f23
 8002f14:	08002f1d 	.word	0x08002f1d
 8002f18:	08002f35 	.word	0x08002f35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f20:	e030      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d025      	beq.n	8002f7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f32:	e022      	b.n	8002f7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f3c:	d11f      	bne.n	8002f7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f42:	e01c      	b.n	8002f7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d903      	bls.n	8002f52 <DMA_CheckFifoParam+0xb6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f50:	e018      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      break;
 8002f56:	e015      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      break;
 8002f68:	e00b      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e00a      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e008      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;
 8002f72:	bf00      	nop
 8002f74:	e006      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;
 8002f76:	bf00      	nop
 8002f78:	e004      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
    }
  } 
  
  return status; 
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	e159      	b.n	8003264 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8148 	bne.w	800325e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d005      	beq.n	8002fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d130      	bne.n	8003048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0201 	and.w	r2, r3, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b03      	cmp	r3, #3
 8003052:	d017      	beq.n	8003084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d123      	bne.n	80030d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	08da      	lsrs	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0203 	and.w	r2, r3, #3
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a2 	beq.w	800325e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b57      	ldr	r3, [pc, #348]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a56      	ldr	r2, [pc, #344]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b54      	ldr	r3, [pc, #336]	@ (800327c <HAL_GPIO_Init+0x2e8>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003136:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_GPIO_Init+0x2ec>)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a49      	ldr	r2, [pc, #292]	@ (8003284 <HAL_GPIO_Init+0x2f0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x202>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a48      	ldr	r2, [pc, #288]	@ (8003288 <HAL_GPIO_Init+0x2f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x1fe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a47      	ldr	r2, [pc, #284]	@ (800328c <HAL_GPIO_Init+0x2f8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x1fa>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <HAL_GPIO_Init+0x2fc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x1f6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a45      	ldr	r2, [pc, #276]	@ (8003294 <HAL_GPIO_Init+0x300>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x1f2>
 8003182:	2304      	movs	r3, #4
 8003184:	e008      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003186:	2307      	movs	r3, #7
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x204>
 800318a:	2303      	movs	r3, #3
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x204>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x204>
 8003196:	2300      	movs	r3, #0
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f002 0203 	and.w	r2, r2, #3
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	@ (8003280 <HAL_GPIO_Init+0x2ec>)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b6:	4b38      	ldr	r3, [pc, #224]	@ (8003298 <HAL_GPIO_Init+0x304>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031da:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <HAL_GPIO_Init+0x304>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_GPIO_Init+0x304>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003204:	4a24      	ldr	r2, [pc, #144]	@ (8003298 <HAL_GPIO_Init+0x304>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320a:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <HAL_GPIO_Init+0x304>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322e:	4a1a      	ldr	r2, [pc, #104]	@ (8003298 <HAL_GPIO_Init+0x304>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_GPIO_Init+0x304>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003258:	4a0f      	ldr	r2, [pc, #60]	@ (8003298 <HAL_GPIO_Init+0x304>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	f67f aea2 	bls.w	8002fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	@ 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40013800 	.word	0x40013800
 8003284:	40020000 	.word	0x40020000
 8003288:	40020400 	.word	0x40020400
 800328c:	40020800 	.word	0x40020800
 8003290:	40020c00 	.word	0x40020c00
 8003294:	40021000 	.word	0x40021000
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e0:	887a      	ldrh	r2, [r7, #2]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	041a      	lsls	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	400b      	ands	r3, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e12b      	b.n	800356e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fe54 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003368:	f004 fcd6 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a81      	ldr	r2, [pc, #516]	@ (8003578 <HAL_I2C_Init+0x274>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d807      	bhi.n	8003388 <HAL_I2C_Init+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a80      	ldr	r2, [pc, #512]	@ (800357c <HAL_I2C_Init+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	bf94      	ite	ls
 8003380:	2301      	movls	r3, #1
 8003382:	2300      	movhi	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e006      	b.n	8003396 <HAL_I2C_Init+0x92>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a7d      	ldr	r2, [pc, #500]	@ (8003580 <HAL_I2C_Init+0x27c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	bf94      	ite	ls
 8003390:	2301      	movls	r3, #1
 8003392:	2300      	movhi	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0e7      	b.n	800356e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a78      	ldr	r2, [pc, #480]	@ (8003584 <HAL_I2C_Init+0x280>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0c9b      	lsrs	r3, r3, #18
 80033a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003578 <HAL_I2C_Init+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d802      	bhi.n	80033d8 <HAL_I2C_Init+0xd4>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	e009      	b.n	80033ec <HAL_I2C_Init+0xe8>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	4a69      	ldr	r2, [pc, #420]	@ (8003588 <HAL_I2C_Init+0x284>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	3301      	adds	r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	495c      	ldr	r1, [pc, #368]	@ (8003578 <HAL_I2C_Init+0x274>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d819      	bhi.n	8003440 <HAL_I2C_Init+0x13c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e59      	subs	r1, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fbb1 f3f3 	udiv	r3, r1, r3
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003420:	400b      	ands	r3, r1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_I2C_Init+0x138>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e59      	subs	r1, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fbb1 f3f3 	udiv	r3, r1, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343a:	e051      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800343c:	2304      	movs	r3, #4
 800343e:	e04f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d111      	bne.n	800346c <HAL_I2C_Init+0x168>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e012      	b.n	8003492 <HAL_I2C_Init+0x18e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	0099      	lsls	r1, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Init+0x196>
 8003496:	2301      	movs	r3, #1
 8003498:	e022      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <HAL_I2C_Init+0x1bc>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e58      	subs	r0, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	440b      	add	r3, r1
 80034b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034be:	e00f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	0099      	lsls	r1, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	6809      	ldr	r1, [r1, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800350e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6911      	ldr	r1, [r2, #16]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	430b      	orrs	r3, r1
 8003522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	000186a0 	.word	0x000186a0
 800357c:	001e847f 	.word	0x001e847f
 8003580:	003d08ff 	.word	0x003d08ff
 8003584:	431bde83 	.word	0x431bde83
 8003588:	10624dd3 	.word	0x10624dd3

0800358c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d103      	bne.n	80035aa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
  }
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d2:	f7ff f813 	bl	80025fc <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	f040 80d9 	bne.w	8003798 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2319      	movs	r3, #25
 80035ec:	2201      	movs	r2, #1
 80035ee:	496d      	ldr	r1, [pc, #436]	@ (80037a4 <HAL_I2C_Mem_Write+0x1ec>)
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f002 fa4d 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0cc      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_I2C_Mem_Write+0x56>
 800360a:	2302      	movs	r3, #2
 800360c:	e0c5      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d007      	beq.n	8003634 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2221      	movs	r2, #33	@ 0x21
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2240      	movs	r2, #64	@ 0x40
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003676:	88f8      	ldrh	r0, [r7, #6]
 8003678:	893a      	ldrh	r2, [r7, #8]
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4603      	mov	r3, r0
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f001 ffdc 	bl	8005644 <I2C_RequestMemoryWrite>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d052      	beq.n	8003738 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e081      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f002 fb12 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d107      	bne.n	80036be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06b      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d11b      	bne.n	8003738 <HAL_I2C_Mem_Write+0x180>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d017      	beq.n	8003738 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1aa      	bne.n	8003696 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f002 fb05 	bl	8005d54 <I2C_WaitOnBTFFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	2b04      	cmp	r3, #4
 8003756:	d107      	bne.n	8003768 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003766:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e016      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	00100002 	.word	0x00100002
 80037a8:	ffff0000 	.word	0xffff0000

080037ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	@ 0x30
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	817b      	strh	r3, [r7, #10]
 80037be:	460b      	mov	r3, r1
 80037c0:	813b      	strh	r3, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c6:	f7fe ff19 	bl	80025fc <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	f040 8214 	bne.w	8003c02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	2319      	movs	r3, #25
 80037e0:	2201      	movs	r2, #1
 80037e2:	497b      	ldr	r1, [pc, #492]	@ (80039d0 <HAL_I2C_Mem_Read+0x224>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f002 f953 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
 80037f2:	e207      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_I2C_Mem_Read+0x56>
 80037fe:	2302      	movs	r3, #2
 8003800:	e200      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d007      	beq.n	8003828 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2222      	movs	r2, #34	@ 0x22
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2240      	movs	r2, #64	@ 0x40
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a5b      	ldr	r2, [pc, #364]	@ (80039d4 <HAL_I2C_Mem_Read+0x228>)
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386a:	88f8      	ldrh	r0, [r7, #6]
 800386c:	893a      	ldrh	r2, [r7, #8]
 800386e:	8979      	ldrh	r1, [r7, #10]
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4603      	mov	r3, r0
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f001 ff78 	bl	8005770 <I2C_RequestMemoryRead>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1bc      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d113      	bne.n	80038ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e190      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d11b      	bne.n	80038fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e170      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d11b      	bne.n	800393a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	e150      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003950:	e144      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003956:	2b03      	cmp	r3, #3
 8003958:	f200 80f1 	bhi.w	8003b3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	2b01      	cmp	r3, #1
 8003962:	d123      	bne.n	80039ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f002 fa6d 	bl	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e145      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039aa:	e117      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d14e      	bne.n	8003a52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ba:	2200      	movs	r2, #0
 80039bc:	4906      	ldr	r1, [pc, #24]	@ (80039d8 <HAL_I2C_Mem_Read+0x22c>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f002 f866 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e11a      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
 80039ce:	bf00      	nop
 80039d0:	00100002 	.word	0x00100002
 80039d4:	ffff0000 	.word	0xffff0000
 80039d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a50:	e0c4      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a58:	2200      	movs	r2, #0
 8003a5a:	496c      	ldr	r1, [pc, #432]	@ (8003c0c <HAL_I2C_Mem_Read+0x460>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f002 f817 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0cb      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4955      	ldr	r1, [pc, #340]	@ (8003c0c <HAL_I2C_Mem_Read+0x460>)
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 ffe9 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e09d      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b3c:	e04e      	b.n	8003bdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f002 f980 	bl	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e058      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d124      	bne.n	8003bdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f aeb6 	bne.w	8003952 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	@ 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	00010004 	.word	0x00010004

08003c10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7fe fcec 	bl	80025fc <HAL_GetTick>
 8003c24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 8111 	bne.w	8003e5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4988      	ldr	r1, [pc, #544]	@ (8003e64 <HAL_I2C_IsDeviceReady+0x254>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f001 ff24 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e104      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2C_IsDeviceReady+0x50>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0fd      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d007      	beq.n	8003c86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2224      	movs	r2, #36	@ 0x24
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a70      	ldr	r2, [pc, #448]	@ (8003e68 <HAL_I2C_IsDeviceReady+0x258>)
 8003ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f001 fee2 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce0:	d103      	bne.n	8003cea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0b6      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fc7d 	bl	80025fc <HAL_GetTick>
 8003d02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d32:	e025      	b.n	8003d80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe fc62 	bl	80025fc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <HAL_I2C_IsDeviceReady+0x13a>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	22a0      	movs	r2, #160	@ 0xa0
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_IsDeviceReady+0x188>
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_I2C_IsDeviceReady+0x188>
 8003d92:	7dbb      	ldrb	r3, [r7, #22]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0cd      	beq.n	8003d34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d129      	bne.n	8003e02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2319      	movs	r3, #25
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4921      	ldr	r1, [pc, #132]	@ (8003e64 <HAL_I2C_IsDeviceReady+0x254>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f001 fe56 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e036      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e02c      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	490f      	ldr	r1, [pc, #60]	@ (8003e64 <HAL_I2C_IsDeviceReady+0x254>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 fe32 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e012      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	f4ff af32 	bcc.w	8003caa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00100002 	.word	0x00100002
 8003e68:	ffff0000 	.word	0xffff0000

08003e6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d003      	beq.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x38>
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	f040 80b1 	bne.w	8004006 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <HAL_I2C_EV_IRQHandler+0x6e>
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003ec4:	d003      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x62>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x66>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f000 8114 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x90>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f002 f836 	bl	8005f60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fd88 	bl	8004a0a <I2C_Master_SB>
 8003efa:	e083      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_I2C_EV_IRQHandler+0xac>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fe00 	bl	8004b16 <I2C_Master_ADD10>
 8003f16:	e075      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_I2C_EV_IRQHandler+0xc8>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fe1c 	bl	8004b6a <I2C_Master_ADDR>
 8003f32:	e067      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d036      	beq.n	8003fac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4c:	f000 80db 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x10a>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x10a>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9e4 	bl	800433c <I2C_MasterTransmit_TXE>
 8003f74:	e046      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80c2 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80bc 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f8e:	7bbb      	ldrb	r3, [r7, #14]
 8003f90:	2b21      	cmp	r3, #33	@ 0x21
 8003f92:	d103      	bne.n	8003f9c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa6d 	bl	8004474 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9a:	e0b4      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b40      	cmp	r3, #64	@ 0x40
 8003fa0:	f040 80b1 	bne.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fadb 	bl	8004560 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003faa:	e0ac      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fba:	f000 80a4 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x178>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x178>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb57 	bl	8004690 <I2C_MasterReceive_RXNE>
 8003fe2:	e00f      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 808b 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8085 	beq.w	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fc0f 	bl	8004820 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004002:	e080      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
 8004004:	e07f      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e007      	b.n	8004028 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 ffda 	bl	8005008 <I2C_Slave_ADDR>
 8004054:	e05a      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_I2C_EV_IRQHandler+0x206>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 f814 	bl	8005098 <I2C_Slave_STOPF>
 8004070:	e04c      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004072:	7bbb      	ldrb	r3, [r7, #14]
 8004074:	2b21      	cmp	r3, #33	@ 0x21
 8004076:	d002      	beq.n	800407e <HAL_I2C_EV_IRQHandler+0x212>
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	2b29      	cmp	r3, #41	@ 0x29
 800407c:	d120      	bne.n	80040c0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <HAL_I2C_EV_IRQHandler+0x238>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_I2C_EV_IRQHandler+0x238>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fef5 	bl	8004e8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040a2:	e032      	b.n	800410a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02d      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x29e>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d028      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 ff24 	bl	8004f06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040be:	e024      	b.n	800410a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ff32 	bl	8004f48 <I2C_SlaveReceive_RXNE>
 80040e4:	e012      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 ff62 	bl	8004fc4 <I2C_SlaveReceive_BTF>
 8004100:	e004      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800410a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b08a      	sub	sp, #40	@ 0x28
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004134:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <HAL_I2C_ER_IRQHandler+0x4a>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800415a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <HAL_I2C_ER_IRQHandler+0x70>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004180:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03e      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0xf8>
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d039      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004196:	7efb      	ldrb	r3, [r7, #27]
 8004198:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80041b0:	7ebb      	ldrb	r3, [r7, #26]
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d112      	bne.n	80041dc <HAL_I2C_ER_IRQHandler+0xca>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <HAL_I2C_ER_IRQHandler+0xca>
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b21      	cmp	r3, #33	@ 0x21
 80041c0:	d008      	beq.n	80041d4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b29      	cmp	r3, #41	@ 0x29
 80041c6:	d005      	beq.n	80041d4 <HAL_I2C_ER_IRQHandler+0xc2>
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b28      	cmp	r3, #40	@ 0x28
 80041cc:	d106      	bne.n	80041dc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b21      	cmp	r3, #33	@ 0x21
 80041d2:	d103      	bne.n	80041dc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 f88f 	bl	80052f8 <I2C_Slave_AF>
 80041da:	e016      	b.n	800420a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041ee:	7efb      	ldrb	r3, [r7, #27]
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d002      	beq.n	80041fa <HAL_I2C_ER_IRQHandler+0xe8>
 80041f4:	7efb      	ldrb	r3, [r7, #27]
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d107      	bne.n	800420a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_I2C_ER_IRQHandler+0x11e>
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800422e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 f8cc 	bl	80053e0 <I2C_ITError>
  }
}
 8004248:	bf00      	nop
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
 80042ac:	4613      	mov	r3, r2
 80042ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432e:	b2db      	uxtb	r3, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004352:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d150      	bne.n	8004404 <I2C_MasterTransmit_TXE+0xc8>
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b21      	cmp	r3, #33	@ 0x21
 8004366:	d14d      	bne.n	8004404 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d01d      	beq.n	80043aa <I2C_MasterTransmit_TXE+0x6e>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b20      	cmp	r3, #32
 8004372:	d01a      	beq.n	80043aa <I2C_MasterTransmit_TXE+0x6e>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800437a:	d016      	beq.n	80043aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800438a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2211      	movs	r2, #17
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ff54 	bl	8004250 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043a8:	e060      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d107      	bne.n	80043f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff6f 	bl	80042d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043f2:	e03b      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff27 	bl	8004250 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004402:	e033      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b21      	cmp	r3, #33	@ 0x21
 8004408:	d005      	beq.n	8004416 <I2C_MasterTransmit_TXE+0xda>
 800440a:	7bbb      	ldrb	r3, [r7, #14]
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d12d      	bne.n	800446c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b22      	cmp	r3, #34	@ 0x22
 8004414:	d12a      	bne.n	800446c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d108      	bne.n	8004432 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004430:	e01c      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d103      	bne.n	8004446 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f88e 	bl	8004560 <I2C_MemoryTransmit_TXE_BTF>
}
 8004444:	e012      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800446a:	e7ff      	b.n	800446c <I2C_MasterTransmit_TXE+0x130>
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b21      	cmp	r3, #33	@ 0x21
 800448c:	d164      	bne.n	8004558 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044bc:	e04c      	b.n	8004558 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d01d      	beq.n	8004500 <I2C_MasterTransmit_BTF+0x8c>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d01a      	beq.n	8004500 <I2C_MasterTransmit_BTF+0x8c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044d0:	d016      	beq.n	8004500 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2211      	movs	r2, #17
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fea9 	bl	8004250 <HAL_I2C_MasterTxCpltCallback>
}
 80044fe:	e02b      	b.n	8004558 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800450e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800451e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b40      	cmp	r3, #64	@ 0x40
 8004538:	d107      	bne.n	800454a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fec4 	bl	80042d0 <HAL_I2C_MemTxCpltCallback>
}
 8004548:	e006      	b.n	8004558 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe7c 	bl	8004250 <HAL_I2C_MasterTxCpltCallback>
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11d      	bne.n	80045b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10b      	bne.n	8004598 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004584:	b2da      	uxtb	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004596:	e077      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459c:	b29b      	uxth	r3, r3
 800459e:	121b      	asrs	r3, r3, #8
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045b2:	e069      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10b      	bne.n	80045d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045d2:	e059      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d152      	bne.n	8004682 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b22      	cmp	r3, #34	@ 0x22
 80045e0:	d10d      	bne.n	80045fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045fc:	e044      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b21      	cmp	r3, #33	@ 0x21
 800460c:	d112      	bne.n	8004634 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004632:	e029      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d124      	bne.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b21      	cmp	r3, #33	@ 0x21
 8004642:	d121      	bne.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004652:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004662:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe28 	bl	80042d0 <HAL_I2C_MemTxCpltCallback>
}
 8004680:	e002      	b.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe ff82 	bl	800358c <I2C_Flush_DR>
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b22      	cmp	r3, #34	@ 0x22
 80046a2:	f040 80b9 	bne.w	8004818 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d921      	bls.n	80046fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	f040 8096 	bne.w	8004818 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80046fc:	e08c      	b.n	8004818 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	2b02      	cmp	r3, #2
 8004704:	d07f      	beq.n	8004806 <I2C_MasterReceive_RXNE+0x176>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d002      	beq.n	8004712 <I2C_MasterReceive_RXNE+0x82>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d179      	bne.n	8004806 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fb66 	bl	8005de4 <I2C_WaitOnSTOPRequestThroughIT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d14c      	bne.n	80047b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800473c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d10a      	bne.n	800478e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fdac 	bl	80042e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800478c:	e044      	b.n	8004818 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d002      	beq.n	80047a2 <I2C_MasterReceive_RXNE+0x112>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d103      	bne.n	80047aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a8:	e002      	b.n	80047b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2212      	movs	r2, #18
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fd57 	bl	8004264 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047b6:	e02f      	b.n	8004818 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fd7a 	bl	80042f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004804:	e008      	b.n	8004818 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004814:	605a      	str	r2, [r3, #4]
}
 8004816:	e7ff      	b.n	8004818 <I2C_MasterReceive_RXNE+0x188>
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11b      	bne.n	8004870 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004846:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800486e:	e0c8      	b.n	8004a02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d129      	bne.n	80048ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b04      	cmp	r3, #4
 800488e:	d00a      	beq.n	80048a6 <I2C_MasterReceive_BTF+0x86>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d007      	beq.n	80048a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048cc:	e099      	b.n	8004a02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	f040 8081 	bne.w	80049dc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d002      	beq.n	80048e6 <I2C_MasterReceive_BTF+0xc6>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d108      	bne.n	80048f8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e019      	b.n	800492c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d002      	beq.n	8004904 <I2C_MasterReceive_BTF+0xe4>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d108      	bne.n	8004916 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e00a      	b.n	800492c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d007      	beq.n	800492c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800492a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004986:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d10a      	bne.n	80049b2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff fc9a 	bl	80042e4 <HAL_I2C_MemRxCpltCallback>
}
 80049b0:	e027      	b.n	8004a02 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d002      	beq.n	80049c6 <I2C_MasterReceive_BTF+0x1a6>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d103      	bne.n	80049ce <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80049cc:	e002      	b.n	80049d4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2212      	movs	r2, #18
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fc45 	bl	8004264 <HAL_I2C_MasterRxCpltCallback>
}
 80049da:	e012      	b.n	8004a02 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b40      	cmp	r3, #64	@ 0x40
 8004a1c:	d117      	bne.n	8004a4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a38:	e067      	b.n	8004b0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]
}
 8004a4c:	e05d      	b.n	8004b0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a56:	d133      	bne.n	8004ac0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b21      	cmp	r3, #33	@ 0x21
 8004a62:	d109      	bne.n	8004a78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	e008      	b.n	8004a8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <I2C_Master_SB+0x92>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d032      	beq.n	8004b0a <I2C_Master_SB+0x100>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02d      	beq.n	8004b0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abc:	605a      	str	r2, [r3, #4]
}
 8004abe:	e024      	b.n	8004b0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10e      	bne.n	8004ae6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	11db      	asrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f063 030f 	orn	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
}
 8004ae4:	e011      	b.n	8004b0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10d      	bne.n	8004b0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	11db      	asrs	r3, r3, #7
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f003 0306 	and.w	r3, r3, #6
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f063 030e 	orn	r3, r3, #14
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	611a      	str	r2, [r3, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <I2C_Master_ADD10+0x26>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d108      	bne.n	8004b4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <I2C_Master_ADD10+0x48>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5c:	605a      	str	r2, [r3, #4]
  }
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b091      	sub	sp, #68	@ 0x44
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b22      	cmp	r3, #34	@ 0x22
 8004b92:	f040 8169 	bne.w	8004e68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <I2C_Master_ADDR+0x54>
 8004b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004ba2:	2b40      	cmp	r3, #64	@ 0x40
 8004ba4:	d10b      	bne.n	8004bbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	e160      	b.n	8004e80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11d      	bne.n	8004c02 <I2C_Master_ADDR+0x98>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bce:	d118      	bne.n	8004c02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c00:	e13e      	b.n	8004e80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e115      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	f040 808a 	bne.w	8004d54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c46:	d137      	bne.n	8004cb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c66:	d113      	bne.n	8004c90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	e0e7      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	2300      	movs	r3, #0
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	623b      	str	r3, [r7, #32]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e0d3      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d02e      	beq.n	8004d1c <I2C_Master_ADDR+0x1b2>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d02b      	beq.n	8004d1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc6:	2b12      	cmp	r3, #18
 8004cc8:	d102      	bne.n	8004cd0 <I2C_Master_ADDR+0x166>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d125      	bne.n	8004d1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00e      	beq.n	8004cf4 <I2C_Master_ADDR+0x18a>
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d00b      	beq.n	8004cf4 <I2C_Master_ADDR+0x18a>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d008      	beq.n	8004cf4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e007      	b.n	8004d04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	e0a1      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e085      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d14d      	bne.n	8004dfa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d016      	beq.n	8004d92 <I2C_Master_ADDR+0x228>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d013      	beq.n	8004d92 <I2C_Master_ADDR+0x228>
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d010      	beq.n	8004d92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004da0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db0:	d117      	bne.n	8004de2 <I2C_Master_ADDR+0x278>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db8:	d00b      	beq.n	8004dd2 <I2C_Master_ADDR+0x268>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d008      	beq.n	8004dd2 <I2C_Master_ADDR+0x268>
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d005      	beq.n	8004dd2 <I2C_Master_ADDR+0x268>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d002      	beq.n	8004dd2 <I2C_Master_ADDR+0x268>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d107      	bne.n	8004de2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004de0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	e032      	b.n	8004e60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e18:	d117      	bne.n	8004e4a <I2C_Master_ADDR+0x2e0>
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e20:	d00b      	beq.n	8004e3a <I2C_Master_ADDR+0x2d0>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d008      	beq.n	8004e3a <I2C_Master_ADDR+0x2d0>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d005      	beq.n	8004e3a <I2C_Master_ADDR+0x2d0>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d002      	beq.n	8004e3a <I2C_Master_ADDR+0x2d0>
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d107      	bne.n	8004e4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e66:	e00b      	b.n	8004e80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
}
 8004e7e:	e7ff      	b.n	8004e80 <I2C_Master_ADDR+0x316>
 8004e80:	bf00      	nop
 8004e82:	3744      	adds	r7, #68	@ 0x44
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02b      	beq.n	8004efe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d114      	bne.n	8004efe <I2C_SlaveTransmit_TXE+0x72>
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b29      	cmp	r3, #41	@ 0x29
 8004ed8:	d111      	bne.n	8004efe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2221      	movs	r2, #33	@ 0x21
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2228      	movs	r2, #40	@ 0x28
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff f9bd 	bl	8004278 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d011      	beq.n	8004f3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d02c      	beq.n	8004fbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d114      	bne.n	8004fbc <I2C_SlaveReceive_RXNE+0x74>
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f96:	d111      	bne.n	8004fbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2222      	movs	r2, #34	@ 0x22
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2228      	movs	r2, #40	@ 0x28
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f968 	bl	800428c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d012      	beq.n	8004ffc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005022:	2b28      	cmp	r3, #40	@ 0x28
 8005024:	d125      	bne.n	8005072 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005034:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	81bb      	strh	r3, [r7, #12]
 8005054:	e002      	b.n	800505c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005064:	89ba      	ldrh	r2, [r7, #12]
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff f918 	bl	80042a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005070:	e00e      	b.n	8005090 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f4:	d172      	bne.n	80051dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b22      	cmp	r3, #34	@ 0x22
 80050fa:	d002      	beq.n	8005102 <I2C_Slave_STOPF+0x6a>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005100:	d135      	bne.n	800516e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005134:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	4618      	mov	r0, r3
 800513c:	f7fd fe6a 	bl	8002e14 <HAL_DMA_GetState>
 8005140:	4603      	mov	r3, r0
 8005142:	2b01      	cmp	r3, #1
 8005144:	d049      	beq.n	80051da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	4a69      	ldr	r2, [pc, #420]	@ (80052f0 <I2C_Slave_STOPF+0x258>)
 800514c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fcb2 	bl	8002abc <HAL_DMA_Abort_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03d      	beq.n	80051da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800516c:	e035      	b.n	80051da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b29a      	uxth	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fe34 	bl	8002e14 <HAL_DMA_GetState>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d014      	beq.n	80051dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	4a4e      	ldr	r2, [pc, #312]	@ (80052f0 <I2C_Slave_STOPF+0x258>)
 80051b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd fc7c 	bl	8002abc <HAL_DMA_Abort_IT>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	e000      	b.n	80051dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d03e      	beq.n	8005264 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d112      	bne.n	800521a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	d112      	bne.n	800524e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8b7 	bl	80053e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005272:	e039      	b.n	80052e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b2a      	cmp	r3, #42	@ 0x2a
 8005278:	d109      	bne.n	800528e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2228      	movs	r2, #40	@ 0x28
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fe ffff 	bl	800428c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b28      	cmp	r3, #40	@ 0x28
 8005298:	d111      	bne.n	80052be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <I2C_Slave_STOPF+0x25c>)
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff f800 	bl	80042bc <HAL_I2C_ListenCpltCallback>
}
 80052bc:	e014      	b.n	80052e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	2b22      	cmp	r3, #34	@ 0x22
 80052c4:	d002      	beq.n	80052cc <I2C_Slave_STOPF+0x234>
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b22      	cmp	r3, #34	@ 0x22
 80052ca:	d10d      	bne.n	80052e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fe ffd2 	bl	800428c <HAL_I2C_SlaveRxCpltCallback>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	08005941 	.word	0x08005941
 80052f4:	ffff0000 	.word	0xffff0000

080052f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d002      	beq.n	800531a <I2C_Slave_AF+0x22>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b20      	cmp	r3, #32
 8005318:	d129      	bne.n	800536e <I2C_Slave_AF+0x76>
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b28      	cmp	r3, #40	@ 0x28
 800531e:	d126      	bne.n	800536e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a2e      	ldr	r2, [pc, #184]	@ (80053dc <I2C_Slave_AF+0xe4>)
 8005324:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005334:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800533e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800534e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fe ffa8 	bl	80042bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800536c:	e031      	b.n	80053d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b21      	cmp	r3, #33	@ 0x21
 8005372:	d129      	bne.n	80053c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a19      	ldr	r2, [pc, #100]	@ (80053dc <I2C_Slave_AF+0xe4>)
 8005378:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2221      	movs	r2, #33	@ 0x21
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800539e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fe f8e6 	bl	800358c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fe ff59 	bl	8004278 <HAL_I2C_SlaveTxCpltCallback>
}
 80053c6:	e004      	b.n	80053d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	ffff0000 	.word	0xffff0000

080053e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053f8:	7bbb      	ldrb	r3, [r7, #14]
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d002      	beq.n	8005404 <I2C_ITError+0x24>
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	2b40      	cmp	r3, #64	@ 0x40
 8005402:	d10a      	bne.n	800541a <I2C_ITError+0x3a>
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b22      	cmp	r3, #34	@ 0x22
 8005408:	d107      	bne.n	800541a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005418:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005420:	2b28      	cmp	r3, #40	@ 0x28
 8005422:	d107      	bne.n	8005434 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2228      	movs	r2, #40	@ 0x28
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005432:	e015      	b.n	8005460 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005442:	d00a      	beq.n	800545a <I2C_ITError+0x7a>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b60      	cmp	r3, #96	@ 0x60
 8005448:	d007      	beq.n	800545a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546e:	d162      	bne.n	8005536 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d020      	beq.n	80054d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	4a6a      	ldr	r2, [pc, #424]	@ (800563c <I2C_ITError+0x25c>)
 8005494:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd fb0e 	bl	8002abc <HAL_DMA_Abort_IT>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8089 	beq.w	80055ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
 80054ce:	e074      	b.n	80055ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	4a59      	ldr	r2, [pc, #356]	@ (800563c <I2C_ITError+0x25c>)
 80054d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fd faed 	bl	8002abc <HAL_DMA_Abort_IT>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d068      	beq.n	80055ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d10b      	bne.n	800550e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
 8005534:	e041      	b.n	80055ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b60      	cmp	r3, #96	@ 0x60
 8005540:	d125      	bne.n	800558e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d10b      	bne.n	8005576 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fe fec0 	bl	800430c <HAL_I2C_AbortCpltCallback>
 800558c:	e015      	b.n	80055ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b40      	cmp	r3, #64	@ 0x40
 800559a:	d10b      	bne.n	80055b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fe fe9f 	bl	80042f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10e      	bne.n	80055e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d113      	bne.n	8005634 <I2C_ITError+0x254>
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b28      	cmp	r3, #40	@ 0x28
 8005610:	d110      	bne.n	8005634 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <I2C_ITError+0x260>)
 8005616:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fe fe44 	bl	80042bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08005941 	.word	0x08005941
 8005640:	ffff0000 	.word	0xffff0000

08005644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	461a      	mov	r2, r3
 8005652:	4603      	mov	r3, r0
 8005654:	817b      	strh	r3, [r7, #10]
 8005656:	460b      	mov	r3, r1
 8005658:	813b      	strh	r3, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800566c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	2200      	movs	r2, #0
 8005676:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa08 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005694:	d103      	bne.n	800569e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800569c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e05f      	b.n	8005762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056a2:	897b      	ldrh	r3, [r7, #10]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	6a3a      	ldr	r2, [r7, #32]
 80056b6:	492d      	ldr	r1, [pc, #180]	@ (800576c <I2C_RequestMemoryWrite+0x128>)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fa63 	bl	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e04c      	b.n	8005762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	6a39      	ldr	r1, [r7, #32]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 faee 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d107      	bne.n	8005706 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e02b      	b.n	8005762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d105      	bne.n	800571c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005710:	893b      	ldrh	r3, [r7, #8]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	611a      	str	r2, [r3, #16]
 800571a:	e021      	b.n	8005760 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	b29b      	uxth	r3, r3
 8005722:	b2da      	uxtb	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fac8 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b04      	cmp	r3, #4
 8005740:	d107      	bne.n	8005752 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e005      	b.n	8005762 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005756:	893b      	ldrh	r3, [r7, #8]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	00010002 	.word	0x00010002

08005770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f96a 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d103      	bne.n	80057da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0aa      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057de:	897b      	ldrh	r3, [r7, #10]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	4952      	ldr	r1, [pc, #328]	@ (800593c <I2C_RequestMemoryRead+0x1cc>)
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f9c5 	bl	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e097      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581c:	6a39      	ldr	r1, [r7, #32]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fa50 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2b04      	cmp	r3, #4
 8005830:	d107      	bne.n	8005842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e076      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d105      	bne.n	8005858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800584c:	893b      	ldrh	r3, [r7, #8]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]
 8005856:	e021      	b.n	800589c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005858:	893b      	ldrh	r3, [r7, #8]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b29b      	uxth	r3, r3
 800585e:	b2da      	uxtb	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fa2a 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	2b04      	cmp	r3, #4
 800587c:	d107      	bne.n	800588e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800588c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e050      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005892:	893b      	ldrh	r3, [r7, #8]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589e:	6a39      	ldr	r1, [r7, #32]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa0f 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d107      	bne.n	80058c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e035      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	2200      	movs	r2, #0
 80058e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f8d3 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fe:	d103      	bne.n	8005908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e013      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	4906      	ldr	r1, [pc, #24]	@ (800593c <I2C_RequestMemoryRead+0x1cc>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f92e 	bl	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	00010002 	.word	0x00010002

08005940 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005958:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800595a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a88 <I2C_DMAAbort+0x148>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	08db      	lsrs	r3, r3, #3
 8005960:	4a4a      	ldr	r2, [pc, #296]	@ (8005a8c <I2C_DMAAbort+0x14c>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0a1a      	lsrs	r2, r3, #8
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00da      	lsls	r2, r3, #3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005986:	e00a      	b.n	800599e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800599c:	d0ea      	beq.n	8005974 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059aa:	2200      	movs	r2, #0
 80059ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	2200      	movs	r2, #0
 80059bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e0:	2200      	movs	r2, #0
 80059e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	2200      	movs	r2, #0
 80059f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b60      	cmp	r3, #96	@ 0x60
 8005a0e:	d10e      	bne.n	8005a2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f7fe fc70 	bl	800430c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a2c:	e027      	b.n	8005a7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a34:	2b28      	cmp	r3, #40	@ 0x28
 8005a36:	d117      	bne.n	8005a68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2228      	movs	r2, #40	@ 0x28
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a66:	e007      	b.n	8005a78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a78:	6978      	ldr	r0, [r7, #20]
 8005a7a:	f7fe fc3d 	bl	80042f8 <HAL_I2C_ErrorCallback>
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	14f8b589 	.word	0x14f8b589

08005a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aa0:	e048      	b.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d044      	beq.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc fda7 	bl	80025fc <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d139      	bne.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10d      	bne.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	43da      	mvns	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	e00c      	b.n	8005b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d116      	bne.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e023      	b.n	8005b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10d      	bne.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	43da      	mvns	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	e00c      	b.n	8005b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	43da      	mvns	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d093      	beq.n	8005aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b92:	e071      	b.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba2:	d123      	bne.n	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e067      	b.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d041      	beq.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf4:	f7fc fd02 	bl	80025fc <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d136      	bne.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10c      	bne.n	8005c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e00b      	b.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	43da      	mvns	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e021      	b.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10c      	bne.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	43da      	mvns	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e00b      	b.n	8005cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af6d 	bne.w	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd0:	e034      	b.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f915 	bl	8005f02 <I2C_IsAcknowledgeFailed>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e034      	b.n	8005d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d028      	beq.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cea:	f7fc fc87 	bl	80025fc <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d302      	bcc.n	8005d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11d      	bne.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0a:	2b80      	cmp	r3, #128	@ 0x80
 8005d0c:	d016      	beq.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b80      	cmp	r3, #128	@ 0x80
 8005d48:	d1c3      	bne.n	8005cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d60:	e034      	b.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f8cd 	bl	8005f02 <I2C_IsAcknowledgeFailed>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e034      	b.n	8005ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d028      	beq.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7a:	f7fc fc3f 	bl	80025fc <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d302      	bcc.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11d      	bne.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d016      	beq.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e007      	b.n	8005ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d1c3      	bne.n	8005d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005df0:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	0a1a      	lsrs	r2, r3, #8
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e008      	b.n	8005e34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e30:	d0e9      	beq.n	8005e06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000000 	.word	0x20000000
 8005e44:	14f8b589 	.word	0x14f8b589

08005e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e54:	e049      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d119      	bne.n	8005e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0210 	mvn.w	r2, #16
 8005e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e030      	b.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e98:	f7fc fbb0 	bl	80025fc <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11d      	bne.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d016      	beq.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e007      	b.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b40      	cmp	r3, #64	@ 0x40
 8005ef6:	d1ae      	bne.n	8005e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f18:	d11b      	bne.n	8005f52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	f043 0204 	orr.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005f70:	d103      	bne.n	8005f7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f78:	e007      	b.n	8005f8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005f82:	d102      	bne.n	8005f8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2208      	movs	r2, #8
 8005f88:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af02      	add	r7, sp, #8
 8005f9c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e101      	b.n	80061ac <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f007 fb98 	bl	800d6f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd6:	d102      	bne.n	8005fde <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f003 ffe5 	bl	8009fb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	7c1a      	ldrb	r2, [r3, #16]
 8005ff0:	f88d 2000 	strb.w	r2, [sp]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ff8:	f003 fec4 	bl	8009d84 <USB_CoreInit>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e0ce      	b.n	80061ac <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f003 ffdd 	bl	8009fd4 <USB_SetCurrentMode>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0bf      	b.n	80061ac <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800602c:	2300      	movs	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e04a      	b.n	80060c8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3315      	adds	r3, #21
 8006042:	2201      	movs	r2, #1
 8006044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006046:	7bfa      	ldrb	r2, [r7, #15]
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	3314      	adds	r3, #20
 8006056:	7bfa      	ldrb	r2, [r7, #15]
 8006058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	b298      	uxth	r0, r3
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	332e      	adds	r3, #46	@ 0x2e
 800606e:	4602      	mov	r2, r0
 8006070:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3318      	adds	r3, #24
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	331c      	adds	r3, #28
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3320      	adds	r3, #32
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060ae:	7bfa      	ldrb	r2, [r7, #15]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	3324      	adds	r3, #36	@ 0x24
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	3301      	adds	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d3af      	bcc.n	8006032 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e044      	b.n	8006162 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80060ea:	2200      	movs	r2, #0
 80060ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006100:	7bfa      	ldrb	r2, [r7, #15]
 8006102:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	3301      	adds	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	791b      	ldrb	r3, [r3, #4]
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3b5      	bcc.n	80060d8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7c1a      	ldrb	r2, [r3, #16]
 8006174:	f88d 2000 	strb.w	r2, [sp]
 8006178:	3304      	adds	r3, #4
 800617a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800617c:	f003 ff76 	bl	800a06c <USB_DevInit>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e00c      	b.n	80061ac <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f004 ffc0 	bl	800b12a <USB_DevDisconnect>

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_PCD_Start+0x1c>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e022      	b.n	8006216 <HAL_PCD_Start+0x62>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f003 fec7 	bl	8009f90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f004 ff6e 	bl	800b0e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800621e:	b590      	push	{r4, r7, lr}
 8006220:	b08d      	sub	sp, #52	@ 0x34
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f005 f82c 	bl	800b292 <USB_GetMode>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 848c 	bne.w	8006b5a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f004 ff90 	bl	800b16c <USB_ReadInterrupts>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8482 	beq.w	8006b58 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f004 ff7d 	bl	800b16c <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d107      	bne.n	800628c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f002 0202 	and.w	r2, r2, #2
 800628a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f004 ff6b 	bl	800b16c <USB_ReadInterrupts>
 8006296:	4603      	mov	r3, r0
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b10      	cmp	r3, #16
 800629e:	d161      	bne.n	8006364 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0210 	bic.w	r2, r2, #16
 80062ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f003 020f 	and.w	r2, r3, #15
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	3304      	adds	r3, #4
 80062ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	0c5b      	lsrs	r3, r3, #17
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d124      	bne.n	8006326 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d035      	beq.n	8006354 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	6a38      	ldr	r0, [r7, #32]
 80062fc:	f004 fda2 	bl	800ae44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	091b      	lsrs	r3, r3, #4
 8006308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630c:	441a      	add	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631e:	441a      	add	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	615a      	str	r2, [r3, #20]
 8006324:	e016      	b.n	8006354 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	0c5b      	lsrs	r3, r3, #17
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	2b06      	cmp	r3, #6
 8006330:	d110      	bne.n	8006354 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006338:	2208      	movs	r2, #8
 800633a:	4619      	mov	r1, r3
 800633c:	6a38      	ldr	r0, [r7, #32]
 800633e:	f004 fd81 	bl	800ae44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634e:	441a      	add	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0210 	orr.w	r2, r2, #16
 8006362:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f004 feff 	bl	800b16c <USB_ReadInterrupts>
 800636e:	4603      	mov	r3, r0
 8006370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006374:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006378:	f040 80a7 	bne.w	80064ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f004 ff04 	bl	800b192 <USB_ReadDevAllOutEpInterrupt>
 800638a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800638c:	e099      	b.n	80064c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 808e 	beq.w	80064b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f004 ff28 	bl	800b1fa <USB_ReadDevOutEPInterrupt>
 80063aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00c      	beq.n	80063d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	2301      	movs	r3, #1
 80063c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fea4 	bl	8007118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	2308      	movs	r3, #8
 80063ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ff7a 	bl	80072e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2310      	movs	r3, #16
 800640e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d030      	beq.n	800647c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006422:	2b80      	cmp	r3, #128	@ 0x80
 8006424:	d109      	bne.n	800643a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006434:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006438:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800643a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4413      	add	r3, r2
 800644c:	3304      	adds	r3, #4
 800644e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	78db      	ldrb	r3, [r3, #3]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d108      	bne.n	800646a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	b2db      	uxtb	r3, r3
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f007 fa43 	bl	800d8f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	2302      	movs	r3, #2
 800647a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	2320      	movs	r3, #32
 8006496:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	3301      	adds	r3, #1
 80064ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f47f af62 	bne.w	800638e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f004 fe4c 	bl	800b16c <USB_ReadInterrupts>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064de:	f040 80db 	bne.w	8006698 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f004 fe6d 	bl	800b1c6 <USB_ReadDevAllInEpInterrupt>
 80064ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80064f2:	e0cd      	b.n	8006690 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80c2 	beq.w	8006684 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f004 fe93 	bl	800b236 <USB_ReadDevInEPInterrupt>
 8006510:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d057      	beq.n	80065cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	2201      	movs	r2, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	43db      	mvns	r3, r3
 8006536:	69f9      	ldr	r1, [r7, #28]
 8006538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800653c:	4013      	ands	r3, r2
 800653e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654c:	461a      	mov	r2, r3
 800654e:	2301      	movs	r3, #1
 8006550:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	799b      	ldrb	r3, [r3, #6]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d132      	bne.n	80065c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	3320      	adds	r3, #32
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006570:	4613      	mov	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4403      	add	r3, r0
 800657a:	331c      	adds	r3, #28
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4419      	add	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4403      	add	r3, r0
 800658e:	3320      	adds	r3, #32
 8006590:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d113      	bne.n	80065c0 <HAL_PCD_IRQHandler+0x3a2>
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3324      	adds	r3, #36	@ 0x24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d108      	bne.n	80065c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065b8:	461a      	mov	r2, r3
 80065ba:	2101      	movs	r1, #1
 80065bc:	f004 fe9a 	bl	800b2f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f007 f917 	bl	800d7fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e2:	461a      	mov	r2, r3
 80065e4:	2308      	movs	r3, #8
 80065e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fe:	461a      	mov	r2, r3
 8006600:	2310      	movs	r3, #16
 8006602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661a:	461a      	mov	r2, r3
 800661c:	2340      	movs	r3, #64	@ 0x40
 800661e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d023      	beq.n	8006672 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800662a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800662c:	6a38      	ldr	r0, [r7, #32]
 800662e:	f003 fe81 	bl	800a334 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	3310      	adds	r3, #16
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	78db      	ldrb	r3, [r3, #3]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d108      	bne.n	8006660 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	b2db      	uxtb	r3, r3
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f007 f95a 	bl	800d914 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	461a      	mov	r2, r3
 800666e:	2302      	movs	r3, #2
 8006670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800667c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fcbd 	bl	8006ffe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	3301      	adds	r3, #1
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	f47f af2e 	bne.w	80064f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f004 fd65 	bl	800b16c <USB_ReadInterrupts>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ac:	d122      	bne.n	80066f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d108      	bne.n	80066de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066d4:	2100      	movs	r1, #0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fea4 	bl	8007424 <HAL_PCDEx_LPM_Callback>
 80066dc:	e002      	b.n	80066e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f007 f8f8 	bl	800d8d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80066f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f004 fd37 	bl	800b16c <USB_ReadInterrupts>
 80066fe:	4603      	mov	r3, r0
 8006700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d112      	bne.n	8006730 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b01      	cmp	r3, #1
 8006718:	d102      	bne.n	8006720 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f007 f8b4 	bl	800d888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800672e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f004 fd19 	bl	800b16c <USB_ReadInterrupts>
 800673a:	4603      	mov	r3, r0
 800673c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006744:	f040 80b7 	bne.w	80068b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2110      	movs	r1, #16
 8006762:	4618      	mov	r0, r3
 8006764:	f003 fde6 	bl	800a334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676c:	e046      	b.n	80067fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800676e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677a:	461a      	mov	r2, r3
 800677c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006780:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ae:	461a      	mov	r2, r3
 80067b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	3301      	adds	r3, #1
 80067fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	461a      	mov	r2, r3
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	4293      	cmp	r3, r2
 8006806:	d3b2      	bcc.n	800676e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006816:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800681a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7bdb      	ldrb	r3, [r3, #15]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d016      	beq.n	8006852 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006834:	f043 030b 	orr.w	r3, r3, #11
 8006838:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800684a:	f043 030b 	orr.w	r3, r3, #11
 800684e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006850:	e015      	b.n	800687e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006860:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006864:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006868:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006878:	f043 030b 	orr.w	r3, r3, #11
 800687c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800688c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006890:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068a0:	461a      	mov	r2, r3
 80068a2:	f004 fd27 	bl	800b2f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80068b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f004 fc56 	bl	800b16c <USB_ReadInterrupts>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ca:	d123      	bne.n	8006914 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f004 fcec 	bl	800b2ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f003 fda3 	bl	800a426 <USB_GetDevSpeed>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681c      	ldr	r4, [r3, #0]
 80068ec:	f001 fa08 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 80068f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068f6:	461a      	mov	r2, r3
 80068f8:	4620      	mov	r0, r4
 80068fa:	f003 faa7 	bl	8009e4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f006 ffa3 	bl	800d84a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006912:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f004 fc27 	bl	800b16c <USB_ReadInterrupts>
 800691e:	4603      	mov	r3, r0
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10a      	bne.n	800693e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f006 ff80 	bl	800d82e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f002 0208 	and.w	r2, r2, #8
 800693c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f004 fc12 	bl	800b16c <USB_ReadInterrupts>
 8006948:	4603      	mov	r3, r0
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d123      	bne.n	800699a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800695e:	2301      	movs	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
 8006962:	e014      	b.n	800698e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006968:	4613      	mov	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	b2db      	uxtb	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fb0a 	bl	8006f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	3301      	adds	r3, #1
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	461a      	mov	r2, r3
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	4293      	cmp	r3, r2
 8006998:	d3e4      	bcc.n	8006964 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f004 fbe4 	bl	800b16c <USB_ReadInterrupts>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ae:	d13c      	bne.n	8006a2a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069b0:	2301      	movs	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b4:	e02b      	b.n	8006a0e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3318      	adds	r3, #24
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d115      	bne.n	8006a08 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80069dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	da12      	bge.n	8006a08 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e6:	4613      	mov	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	3317      	adds	r3, #23
 80069f2:	2201      	movs	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 faca 	bl	8006f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	791b      	ldrb	r3, [r3, #4]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d3cd      	bcc.n	80069b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f004 fb9c 	bl	800b16c <USB_ReadInterrupts>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a3e:	d156      	bne.n	8006aee <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a40:	2301      	movs	r3, #1
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a44:	e045      	b.n	8006ad2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d12e      	bne.n	8006acc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da2b      	bge.n	8006acc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006a80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d121      	bne.n	8006acc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ac8:	6053      	str	r3, [r2, #4]
            break;
 8006aca:	e008      	b.n	8006ade <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	3301      	adds	r3, #1
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	791b      	ldrb	r3, [r3, #4]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d3b3      	bcc.n	8006a46 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f004 fb3a 	bl	800b16c <USB_ReadInterrupts>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b02:	d10a      	bne.n	8006b1a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f006 ff17 	bl	800d938 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f004 fb24 	bl	800b16c <USB_ReadInterrupts>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d115      	bne.n	8006b5a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f006 ff07 	bl	800d954 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6859      	ldr	r1, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	e000      	b.n	8006b5a <HAL_PCD_IRQHandler+0x93c>
      return;
 8006b58:	bf00      	nop
    }
  }
}
 8006b5a:	3734      	adds	r7, #52	@ 0x34
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}

08006b60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_PCD_SetAddress+0x1a>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e012      	b.n	8006ba0 <HAL_PCD_SetAddress+0x40>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f004 fa83 	bl	800b09c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	70fb      	strb	r3, [r7, #3]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	803b      	strh	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da0f      	bge.n	8006bee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	3310      	adds	r3, #16
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	3304      	adds	r3, #4
 8006be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	705a      	strb	r2, [r3, #1]
 8006bec:	e00f      	b.n	8006c0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4413      	add	r3, r2
 8006c04:	3304      	adds	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006c1a:	883b      	ldrh	r3, [r7, #0]
 8006c1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	78ba      	ldrb	r2, [r7, #2]
 8006c28:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c3c:	78bb      	ldrb	r3, [r7, #2]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d102      	bne.n	8006c48 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_PCD_EP_Open+0xae>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e00e      	b.n	8006c74 <HAL_PCD_EP_Open+0xcc>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f003 fc03 	bl	800a470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006c72:	7afb      	ldrb	r3, [r7, #11]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0f      	bge.n	8006cb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	705a      	strb	r2, [r3, #1]
 8006cae:	e00f      	b.n	8006cd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_PCD_EP_Close+0x6e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e00e      	b.n	8006d08 <HAL_PCD_EP_Close+0x8c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f003 fc41 	bl	800a580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	f003 020f 	and.w	r2, r3, #15
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	3304      	adds	r3, #4
 8006d38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	799b      	ldrb	r3, [r3, #6]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d102      	bne.n	8006d6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	799b      	ldrb	r3, [r3, #6]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	f003 fcde 	bl	800a738 <USB_EPStartXfer>

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006da8:	681b      	ldr	r3, [r3, #0]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	3310      	adds	r3, #16
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3304      	adds	r3, #4
 8006ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2201      	movs	r2, #1
 8006df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	799b      	ldrb	r3, [r3, #6]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d102      	bne.n	8006e10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	799b      	ldrb	r3, [r3, #6]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6979      	ldr	r1, [r7, #20]
 8006e1c:	f003 fc8c 	bl	800a738 <USB_EPStartXfer>

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7912      	ldrb	r2, [r2, #4]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d901      	bls.n	8006e48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e04f      	b.n	8006ee8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da0f      	bge.n	8006e70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	f003 020f 	and.w	r2, r3, #15
 8006e56:	4613      	mov	r3, r2
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	3310      	adds	r3, #16
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	3304      	adds	r3, #4
 8006e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	705a      	strb	r2, [r3, #1]
 8006e6e:	e00d      	b.n	8006e8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	4613      	mov	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	3304      	adds	r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_PCD_EP_SetStall+0x82>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e01d      	b.n	8006ee8 <HAL_PCD_EP_SetStall+0xbe>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f004 f81a 	bl	800aef4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7999      	ldrb	r1, [r3, #6]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f004 fa0b 	bl	800b2f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	7912      	ldrb	r2, [r2, #4]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e042      	b.n	8006f94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da0f      	bge.n	8006f36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	3310      	adds	r3, #16
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	705a      	strb	r2, [r3, #1]
 8006f34:	e00f      	b.n	8006f56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	f003 020f 	and.w	r2, r3, #15
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_PCD_EP_ClrStall+0x86>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e00e      	b.n	8006f94 <HAL_PCD_EP_ClrStall+0xa4>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f004 f823 	bl	800afd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da0c      	bge.n	8006fca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	3310      	adds	r3, #16
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e00c      	b.n	8006fe4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68f9      	ldr	r1, [r7, #12]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f003 fe42 	bl	800ac74 <USB_EPStopXfer>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b08a      	sub	sp, #40	@ 0x28
 8007002:	af02      	add	r7, sp, #8
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	3310      	adds	r3, #16
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	429a      	cmp	r2, r3
 8007030:	d901      	bls.n	8007036 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e06b      	b.n	800710e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	429a      	cmp	r2, r3
 800704a:	d902      	bls.n	8007052 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	3303      	adds	r3, #3
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800705a:	e02a      	b.n	80070b2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	429a      	cmp	r2, r3
 8007070:	d902      	bls.n	8007078 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3303      	adds	r3, #3
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68d9      	ldr	r1, [r3, #12]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4603      	mov	r3, r0
 8007094:	6978      	ldr	r0, [r7, #20]
 8007096:	f003 fe97 	bl	800adc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	441a      	add	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d809      	bhi.n	80070dc <PCD_WriteEmptyTxFifo+0xde>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	695a      	ldr	r2, [r3, #20]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d203      	bcs.n	80070dc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1bf      	bne.n	800705c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d811      	bhi.n	800710c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	2201      	movs	r2, #1
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	43db      	mvns	r3, r3
 8007102:	6939      	ldr	r1, [r7, #16]
 8007104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007108:	4013      	ands	r3, r2
 800710a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	333c      	adds	r3, #60	@ 0x3c
 8007130:	3304      	adds	r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	799b      	ldrb	r3, [r3, #6]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d17b      	bne.n	8007246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4a61      	ldr	r2, [pc, #388]	@ (80072e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	f240 80b9 	bls.w	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80b3 	beq.w	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717a:	461a      	mov	r2, r3
 800717c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007180:	6093      	str	r3, [r2, #8]
 8007182:	e0a7      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719a:	461a      	mov	r2, r3
 800719c:	2320      	movs	r3, #32
 800719e:	6093      	str	r3, [r2, #8]
 80071a0:	e098      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 8093 	bne.w	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	4a4b      	ldr	r2, [pc, #300]	@ (80072e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d90f      	bls.n	80071d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	461a      	mov	r2, r3
 80071ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d2:	6093      	str	r3, [r2, #8]
 80071d4:	e07e      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	3304      	adds	r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	0159      	lsls	r1, r3, #5
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	440b      	add	r3, r1
 80071f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d114      	bne.n	8007238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007220:	461a      	mov	r2, r3
 8007222:	2101      	movs	r1, #1
 8007224:	f004 f866 	bl	800b2f4 <USB_EP0_OutStart>
 8007228:	e006      	b.n	8007238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f006 fac0 	bl	800d7c4 <HAL_PCD_DataOutStageCallback>
 8007244:	e046      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4a26      	ldr	r2, [pc, #152]	@ (80072e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d124      	bne.n	8007298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007264:	461a      	mov	r2, r3
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	6093      	str	r3, [r2, #8]
 800726c:	e032      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007284:	461a      	mov	r2, r3
 8007286:	2320      	movs	r3, #32
 8007288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f006 fa97 	bl	800d7c4 <HAL_PCD_DataOutStageCallback>
 8007296:	e01d      	b.n	80072d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d114      	bne.n	80072c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d108      	bne.n	80072c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072c0:	461a      	mov	r2, r3
 80072c2:	2100      	movs	r1, #0
 80072c4:	f004 f816 	bl	800b2f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f006 fa78 	bl	800d7c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	4f54300a 	.word	0x4f54300a
 80072e4:	4f54310a 	.word	0x4f54310a

080072e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	333c      	adds	r3, #60	@ 0x3c
 8007300:	3304      	adds	r3, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a15      	ldr	r2, [pc, #84]	@ (8007370 <PCD_EP_OutSetupPacket_int+0x88>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d90e      	bls.n	800733c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007334:	461a      	mov	r2, r3
 8007336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800733a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f006 fa2f 	bl	800d7a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a0a      	ldr	r2, [pc, #40]	@ (8007370 <PCD_EP_OutSetupPacket_int+0x88>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d90c      	bls.n	8007364 <PCD_EP_OutSetupPacket_int+0x7c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	799b      	ldrb	r3, [r3, #6]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d108      	bne.n	8007364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800735c:	461a      	mov	r2, r3
 800735e:	2101      	movs	r1, #1
 8007360:	f003 ffc8 	bl	800b2f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	4f54300a 	.word	0x4f54300a

08007374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
 8007380:	4613      	mov	r3, r2
 8007382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d107      	bne.n	80073a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007392:	883b      	ldrh	r3, [r7, #0]
 8007394:	0419      	lsls	r1, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	430a      	orrs	r2, r1
 800739e:	629a      	str	r2, [r3, #40]	@ 0x28
 80073a0:	e028      	b.n	80073f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	4413      	add	r3, r2
 80073ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
 80073b4:	e00d      	b.n	80073d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	3340      	adds	r3, #64	@ 0x40
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	3301      	adds	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
 80073d2:	7bfa      	ldrb	r2, [r7, #15]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3ec      	bcc.n	80073b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80073dc:	883b      	ldrh	r3, [r7, #0]
 80073de:	0418      	lsls	r0, r3, #16
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4302      	orrs	r2, r0
 80073ec:	3340      	adds	r3, #64	@ 0x40
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e267      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d075      	beq.n	8007546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800745a:	4b88      	ldr	r3, [pc, #544]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 030c 	and.w	r3, r3, #12
 8007462:	2b04      	cmp	r3, #4
 8007464:	d00c      	beq.n	8007480 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007466:	4b85      	ldr	r3, [pc, #532]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800746e:	2b08      	cmp	r3, #8
 8007470:	d112      	bne.n	8007498 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007472:	4b82      	ldr	r3, [pc, #520]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d10b      	bne.n	8007498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007480:	4b7e      	ldr	r3, [pc, #504]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d05b      	beq.n	8007544 <HAL_RCC_OscConfig+0x108>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d157      	bne.n	8007544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e242      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a0:	d106      	bne.n	80074b0 <HAL_RCC_OscConfig+0x74>
 80074a2:	4b76      	ldr	r3, [pc, #472]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a75      	ldr	r2, [pc, #468]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	e01d      	b.n	80074ec <HAL_RCC_OscConfig+0xb0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCC_OscConfig+0x98>
 80074ba:	4b70      	ldr	r3, [pc, #448]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a6f      	ldr	r2, [pc, #444]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	4b6d      	ldr	r3, [pc, #436]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a6c      	ldr	r2, [pc, #432]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	e00b      	b.n	80074ec <HAL_RCC_OscConfig+0xb0>
 80074d4:	4b69      	ldr	r3, [pc, #420]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a68      	ldr	r2, [pc, #416]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	4b66      	ldr	r3, [pc, #408]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a65      	ldr	r2, [pc, #404]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80074e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d013      	beq.n	800751c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f4:	f7fb f882 	bl	80025fc <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074fc:	f7fb f87e 	bl	80025fc <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b64      	cmp	r3, #100	@ 0x64
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e207      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800750e:	4b5b      	ldr	r3, [pc, #364]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0xc0>
 800751a:	e014      	b.n	8007546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fb f86e 	bl	80025fc <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007524:	f7fb f86a 	bl	80025fc <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b64      	cmp	r3, #100	@ 0x64
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e1f3      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007536:	4b51      	ldr	r3, [pc, #324]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f0      	bne.n	8007524 <HAL_RCC_OscConfig+0xe8>
 8007542:	e000      	b.n	8007546 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d063      	beq.n	800761a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007552:	4b4a      	ldr	r3, [pc, #296]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800755e:	4b47      	ldr	r3, [pc, #284]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007566:	2b08      	cmp	r3, #8
 8007568:	d11c      	bne.n	80075a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800756a:	4b44      	ldr	r3, [pc, #272]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d116      	bne.n	80075a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007576:	4b41      	ldr	r3, [pc, #260]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_RCC_OscConfig+0x152>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d001      	beq.n	800758e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e1c7      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800758e:	4b3b      	ldr	r3, [pc, #236]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4937      	ldr	r1, [pc, #220]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	e03a      	b.n	800761a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d020      	beq.n	80075ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075ac:	4b34      	ldr	r3, [pc, #208]	@ (8007680 <HAL_RCC_OscConfig+0x244>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b2:	f7fb f823 	bl	80025fc <HAL_GetTick>
 80075b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ba:	f7fb f81f 	bl	80025fc <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e1a8      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075cc:	4b2b      	ldr	r3, [pc, #172]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d8:	4b28      	ldr	r3, [pc, #160]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4925      	ldr	r1, [pc, #148]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	600b      	str	r3, [r1, #0]
 80075ec:	e015      	b.n	800761a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075ee:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <HAL_RCC_OscConfig+0x244>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f4:	f7fb f802 	bl	80025fc <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075fc:	f7fa fffe 	bl	80025fc <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e187      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800760e:	4b1b      	ldr	r3, [pc, #108]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d036      	beq.n	8007694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800762e:	4b15      	ldr	r3, [pc, #84]	@ (8007684 <HAL_RCC_OscConfig+0x248>)
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007634:	f7fa ffe2 	bl	80025fc <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800763c:	f7fa ffde 	bl	80025fc <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e167      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800764e:	4b0b      	ldr	r3, [pc, #44]	@ (800767c <HAL_RCC_OscConfig+0x240>)
 8007650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0x200>
 800765a:	e01b      	b.n	8007694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800765c:	4b09      	ldr	r3, [pc, #36]	@ (8007684 <HAL_RCC_OscConfig+0x248>)
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007662:	f7fa ffcb 	bl	80025fc <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007668:	e00e      	b.n	8007688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800766a:	f7fa ffc7 	bl	80025fc <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d907      	bls.n	8007688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e150      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
 800767c:	40023800 	.word	0x40023800
 8007680:	42470000 	.word	0x42470000
 8007684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007688:	4b88      	ldr	r3, [pc, #544]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800768a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1ea      	bne.n	800766a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8097 	beq.w	80077d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076a6:	4b81      	ldr	r3, [pc, #516]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10f      	bne.n	80076d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	4b7d      	ldr	r3, [pc, #500]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	4a7c      	ldr	r2, [pc, #496]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80076bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076c2:	4b7a      	ldr	r3, [pc, #488]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d2:	4b77      	ldr	r3, [pc, #476]	@ (80078b0 <HAL_RCC_OscConfig+0x474>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d118      	bne.n	8007710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076de:	4b74      	ldr	r3, [pc, #464]	@ (80078b0 <HAL_RCC_OscConfig+0x474>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a73      	ldr	r2, [pc, #460]	@ (80078b0 <HAL_RCC_OscConfig+0x474>)
 80076e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ea:	f7fa ff87 	bl	80025fc <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076f2:	f7fa ff83 	bl	80025fc <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e10c      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007704:	4b6a      	ldr	r3, [pc, #424]	@ (80078b0 <HAL_RCC_OscConfig+0x474>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d106      	bne.n	8007726 <HAL_RCC_OscConfig+0x2ea>
 8007718:	4b64      	ldr	r3, [pc, #400]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800771a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771c:	4a63      	ldr	r2, [pc, #396]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	6713      	str	r3, [r2, #112]	@ 0x70
 8007724:	e01c      	b.n	8007760 <HAL_RCC_OscConfig+0x324>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b05      	cmp	r3, #5
 800772c:	d10c      	bne.n	8007748 <HAL_RCC_OscConfig+0x30c>
 800772e:	4b5f      	ldr	r3, [pc, #380]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007732:	4a5e      	ldr	r2, [pc, #376]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007734:	f043 0304 	orr.w	r3, r3, #4
 8007738:	6713      	str	r3, [r2, #112]	@ 0x70
 800773a:	4b5c      	ldr	r3, [pc, #368]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800773e:	4a5b      	ldr	r2, [pc, #364]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	6713      	str	r3, [r2, #112]	@ 0x70
 8007746:	e00b      	b.n	8007760 <HAL_RCC_OscConfig+0x324>
 8007748:	4b58      	ldr	r3, [pc, #352]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800774a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774c:	4a57      	ldr	r2, [pc, #348]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	6713      	str	r3, [r2, #112]	@ 0x70
 8007754:	4b55      	ldr	r3, [pc, #340]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007758:	4a54      	ldr	r2, [pc, #336]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 800775a:	f023 0304 	bic.w	r3, r3, #4
 800775e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d015      	beq.n	8007794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007768:	f7fa ff48 	bl	80025fc <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776e:	e00a      	b.n	8007786 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007770:	f7fa ff44 	bl	80025fc <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800777e:	4293      	cmp	r3, r2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e0cb      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007786:	4b49      	ldr	r3, [pc, #292]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0ee      	beq.n	8007770 <HAL_RCC_OscConfig+0x334>
 8007792:	e014      	b.n	80077be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007794:	f7fa ff32 	bl	80025fc <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779c:	f7fa ff2e 	bl	80025fc <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0b5      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077b2:	4b3e      	ldr	r3, [pc, #248]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1ee      	bne.n	800779c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d105      	bne.n	80077d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077c4:	4b39      	ldr	r3, [pc, #228]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80077c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c8:	4a38      	ldr	r2, [pc, #224]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80077ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80a1 	beq.w	800791c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077da:	4b34      	ldr	r3, [pc, #208]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d05c      	beq.n	80078a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d141      	bne.n	8007872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ee:	4b31      	ldr	r3, [pc, #196]	@ (80078b4 <HAL_RCC_OscConfig+0x478>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fa ff02 	bl	80025fc <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077fc:	f7fa fefe 	bl	80025fc <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e087      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800780e:	4b27      	ldr	r3, [pc, #156]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69da      	ldr	r2, [r3, #28]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	019b      	lsls	r3, r3, #6
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	3b01      	subs	r3, #1
 8007834:	041b      	lsls	r3, r3, #16
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	491b      	ldr	r1, [pc, #108]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007844:	4b1b      	ldr	r3, [pc, #108]	@ (80078b4 <HAL_RCC_OscConfig+0x478>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800784a:	f7fa fed7 	bl	80025fc <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007852:	f7fa fed3 	bl	80025fc <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e05c      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007864:	4b11      	ldr	r3, [pc, #68]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <HAL_RCC_OscConfig+0x416>
 8007870:	e054      	b.n	800791c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007872:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <HAL_RCC_OscConfig+0x478>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007878:	f7fa fec0 	bl	80025fc <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007880:	f7fa febc 	bl	80025fc <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e045      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_RCC_OscConfig+0x470>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0x444>
 800789e:	e03d      	b.n	800791c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d107      	bne.n	80078b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e038      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
 80078ac:	40023800 	.word	0x40023800
 80078b0:	40007000 	.word	0x40007000
 80078b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007928 <HAL_RCC_OscConfig+0x4ec>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d028      	beq.n	8007918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d121      	bne.n	8007918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078de:	429a      	cmp	r2, r3
 80078e0:	d11a      	bne.n	8007918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80078e8:	4013      	ands	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d111      	bne.n	8007918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	3b01      	subs	r3, #1
 8007902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007904:	429a      	cmp	r2, r3
 8007906:	d107      	bne.n	8007918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d001      	beq.n	800791c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40023800 	.word	0x40023800

0800792c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0cc      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007940:	4b68      	ldr	r3, [pc, #416]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d90c      	bls.n	8007968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794e:	4b65      	ldr	r3, [pc, #404]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007956:	4b63      	ldr	r3, [pc, #396]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d001      	beq.n	8007968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e0b8      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d020      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007980:	4b59      	ldr	r3, [pc, #356]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	4a58      	ldr	r2, [pc, #352]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800798a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007998:	4b53      	ldr	r3, [pc, #332]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	4a52      	ldr	r2, [pc, #328]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a4:	4b50      	ldr	r3, [pc, #320]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	494d      	ldr	r1, [pc, #308]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d044      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ca:	4b47      	ldr	r3, [pc, #284]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d119      	bne.n	8007a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e07f      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d003      	beq.n	80079ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d107      	bne.n	80079fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ea:	4b3f      	ldr	r3, [pc, #252]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e06f      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079fa:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e067      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a0a:	4b37      	ldr	r3, [pc, #220]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f023 0203 	bic.w	r2, r3, #3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4934      	ldr	r1, [pc, #208]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a1c:	f7fa fdee 	bl	80025fc <HAL_GetTick>
 8007a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a22:	e00a      	b.n	8007a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a24:	f7fa fdea 	bl	80025fc <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e04f      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 020c 	and.w	r2, r3, #12
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d1eb      	bne.n	8007a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d20c      	bcs.n	8007a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b22      	ldr	r3, [pc, #136]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a62:	4b20      	ldr	r3, [pc, #128]	@ (8007ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d001      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e032      	b.n	8007ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a80:	4b19      	ldr	r3, [pc, #100]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	4916      	ldr	r1, [pc, #88]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	490e      	ldr	r1, [pc, #56]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ab2:	f000 f821 	bl	8007af8 <HAL_RCC_GetSysClockFreq>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	091b      	lsrs	r3, r3, #4
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	490a      	ldr	r1, [pc, #40]	@ (8007aec <HAL_RCC_ClockConfig+0x1c0>)
 8007ac4:	5ccb      	ldrb	r3, [r1, r3]
 8007ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aca:	4a09      	ldr	r2, [pc, #36]	@ (8007af0 <HAL_RCC_ClockConfig+0x1c4>)
 8007acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ace:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fa fd4e 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40023c00 	.word	0x40023c00
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	08010fbc 	.word	0x08010fbc
 8007af0:	20000000 	.word	0x20000000
 8007af4:	20000004 	.word	0x20000004

08007af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007afc:	b094      	sub	sp, #80	@ 0x50
 8007afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b10:	4b79      	ldr	r3, [pc, #484]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 030c 	and.w	r3, r3, #12
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d00d      	beq.n	8007b38 <HAL_RCC_GetSysClockFreq+0x40>
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	f200 80e1 	bhi.w	8007ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0x34>
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d003      	beq.n	8007b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b2a:	e0db      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b2c:	4b73      	ldr	r3, [pc, #460]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b30:	e0db      	b.n	8007cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b32:	4b72      	ldr	r3, [pc, #456]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b36:	e0d8      	b.n	8007cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b38:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b42:	4b6d      	ldr	r3, [pc, #436]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d063      	beq.n	8007c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	2200      	movs	r2, #0
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b62:	2300      	movs	r3, #0
 8007b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	f04f 0000 	mov.w	r0, #0
 8007b72:	f04f 0100 	mov.w	r1, #0
 8007b76:	0159      	lsls	r1, r3, #5
 8007b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b7c:	0150      	lsls	r0, r2, #5
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4621      	mov	r1, r4
 8007b84:	1a51      	subs	r1, r2, r1
 8007b86:	6139      	str	r1, [r7, #16]
 8007b88:	4629      	mov	r1, r5
 8007b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	018b      	lsls	r3, r1, #6
 8007ba0:	4651      	mov	r1, sl
 8007ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ba6:	4651      	mov	r1, sl
 8007ba8:	018a      	lsls	r2, r1, #6
 8007baa:	4651      	mov	r1, sl
 8007bac:	ebb2 0801 	subs.w	r8, r2, r1
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bca:	4690      	mov	r8, r2
 8007bcc:	4699      	mov	r9, r3
 8007bce:	4623      	mov	r3, r4
 8007bd0:	eb18 0303 	adds.w	r3, r8, r3
 8007bd4:	60bb      	str	r3, [r7, #8]
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	eb49 0303 	adc.w	r3, r9, r3
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007bea:	4629      	mov	r1, r5
 8007bec:	028b      	lsls	r3, r1, #10
 8007bee:	4621      	mov	r1, r4
 8007bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	028a      	lsls	r2, r1, #10
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfe:	2200      	movs	r2, #0
 8007c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c08:	f7f8 fff6 	bl	8000bf8 <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4613      	mov	r3, r2
 8007c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c14:	e058      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c16:	4b38      	ldr	r3, [pc, #224]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	099b      	lsrs	r3, r3, #6
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	4611      	mov	r1, r2
 8007c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	f04f 0000 	mov.w	r0, #0
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	0159      	lsls	r1, r3, #5
 8007c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c42:	0150      	lsls	r0, r2, #5
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4641      	mov	r1, r8
 8007c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c4e:	4649      	mov	r1, r9
 8007c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c68:	ebb2 040a 	subs.w	r4, r2, sl
 8007c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	00eb      	lsls	r3, r5, #3
 8007c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c7e:	00e2      	lsls	r2, r4, #3
 8007c80:	4614      	mov	r4, r2
 8007c82:	461d      	mov	r5, r3
 8007c84:	4643      	mov	r3, r8
 8007c86:	18e3      	adds	r3, r4, r3
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	eb45 0303 	adc.w	r3, r5, r3
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	028b      	lsls	r3, r1, #10
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ca8:	4621      	mov	r1, r4
 8007caa:	028a      	lsls	r2, r1, #10
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	61fa      	str	r2, [r7, #28]
 8007cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cbc:	f7f8 ff9c 	bl	8000bf8 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ce2:	e002      	b.n	8007cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8007ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3750      	adds	r7, #80	@ 0x50
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	00f42400 	.word	0x00f42400

08007d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d04:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d06:	681b      	ldr	r3, [r3, #0]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000000 	.word	0x20000000

08007d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d1c:	f7ff fff0 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d20:	4602      	mov	r2, r0
 8007d22:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	0a9b      	lsrs	r3, r3, #10
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	4903      	ldr	r1, [pc, #12]	@ (8007d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d2e:	5ccb      	ldrb	r3, [r1, r3]
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	08010fcc 	.word	0x08010fcc

08007d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d44:	f7ff ffdc 	bl	8007d00 <HAL_RCC_GetHCLKFreq>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	0b5b      	lsrs	r3, r3, #13
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	4903      	ldr	r1, [pc, #12]	@ (8007d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d56:	5ccb      	ldrb	r3, [r1, r3]
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40023800 	.word	0x40023800
 8007d64:	08010fcc 	.word	0x08010fcc

08007d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e041      	b.n	8007dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fa f97a 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f000 fc3c 	bl	8008624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d001      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e044      	b.n	8007eaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d018      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x6c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4a:	d013      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x6c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	@ (8007ebc <HAL_TIM_Base_Start_IT+0xb4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00e      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x6c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a19      	ldr	r2, [pc, #100]	@ (8007ec0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d009      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x6c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x6c>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d111      	bne.n	8007e98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b06      	cmp	r3, #6
 8007e84:	d010      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0201 	orr.w	r2, r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	e007      	b.n	8007ea8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40014000 	.word	0x40014000

08007ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e041      	b.n	8007f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f839 	bl	8007f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f000 fb8a 	bl	8008624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d109      	bne.n	8007fa4 <HAL_TIM_PWM_Start+0x24>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	e022      	b.n	8007fea <HAL_TIM_PWM_Start+0x6a>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d109      	bne.n	8007fbe <HAL_TIM_PWM_Start+0x3e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e015      	b.n	8007fea <HAL_TIM_PWM_Start+0x6a>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d109      	bne.n	8007fd8 <HAL_TIM_PWM_Start+0x58>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	e008      	b.n	8007fea <HAL_TIM_PWM_Start+0x6a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	bf14      	ite	ne
 8007fe4:	2301      	movne	r3, #1
 8007fe6:	2300      	moveq	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e068      	b.n	80080c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d104      	bne.n	8008002 <HAL_TIM_PWM_Start+0x82>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008000:	e013      	b.n	800802a <HAL_TIM_PWM_Start+0xaa>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b04      	cmp	r3, #4
 8008006:	d104      	bne.n	8008012 <HAL_TIM_PWM_Start+0x92>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008010:	e00b      	b.n	800802a <HAL_TIM_PWM_Start+0xaa>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d104      	bne.n	8008022 <HAL_TIM_PWM_Start+0xa2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008020:	e003      	b.n	800802a <HAL_TIM_PWM_Start+0xaa>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2201      	movs	r2, #1
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fda8 	bl	8008b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a23      	ldr	r2, [pc, #140]	@ (80080cc <HAL_TIM_PWM_Start+0x14c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d107      	bne.n	8008052 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <HAL_TIM_PWM_Start+0x14c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d018      	beq.n	800808e <HAL_TIM_PWM_Start+0x10e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008064:	d013      	beq.n	800808e <HAL_TIM_PWM_Start+0x10e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a19      	ldr	r2, [pc, #100]	@ (80080d0 <HAL_TIM_PWM_Start+0x150>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00e      	beq.n	800808e <HAL_TIM_PWM_Start+0x10e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a17      	ldr	r2, [pc, #92]	@ (80080d4 <HAL_TIM_PWM_Start+0x154>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_TIM_PWM_Start+0x10e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a16      	ldr	r2, [pc, #88]	@ (80080d8 <HAL_TIM_PWM_Start+0x158>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d004      	beq.n	800808e <HAL_TIM_PWM_Start+0x10e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a14      	ldr	r2, [pc, #80]	@ (80080dc <HAL_TIM_PWM_Start+0x15c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d111      	bne.n	80080b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b06      	cmp	r3, #6
 800809e:	d010      	beq.n	80080c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b0:	e007      	b.n	80080c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0201 	orr.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40010000 	.word	0x40010000
 80080d0:	40000400 	.word	0x40000400
 80080d4:	40000800 	.word	0x40000800
 80080d8:	40000c00 	.word	0x40000c00
 80080dc:	40014000 	.word	0x40014000

080080e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d020      	beq.n	8008144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01b      	beq.n	8008144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0202 	mvn.w	r2, #2
 8008114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa5b 	bl	80085e6 <HAL_TIM_IC_CaptureCallback>
 8008130:	e005      	b.n	800813e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa4d 	bl	80085d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa5e 	bl	80085fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d020      	beq.n	8008190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01b      	beq.n	8008190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0204 	mvn.w	r2, #4
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa35 	bl	80085e6 <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa27 	bl	80085d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fa38 	bl	80085fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0308 	and.w	r3, r3, #8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d020      	beq.n	80081dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01b      	beq.n	80081dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0208 	mvn.w	r2, #8
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2204      	movs	r2, #4
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa0f 	bl	80085e6 <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa01 	bl	80085d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fa12 	bl	80085fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d020      	beq.n	8008228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01b      	beq.n	8008228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0210 	mvn.w	r2, #16
 80081f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2208      	movs	r2, #8
 80081fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9e9 	bl	80085e6 <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9db 	bl	80085d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9ec 	bl	80085fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0201 	mvn.w	r2, #1
 8008244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7f8 fe4e 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825c:	2b00      	cmp	r3, #0
 800825e:	d007      	beq.n	8008270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fd2a 	bl	8008cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9bd 	bl	800860e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00c      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0220 	mvn.w	r2, #32
 80082b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fcfc 	bl	8008cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082da:	2302      	movs	r3, #2
 80082dc:	e0ae      	b.n	800843c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b0c      	cmp	r3, #12
 80082ea:	f200 809f 	bhi.w	800842c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082ee:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008329 	.word	0x08008329
 80082f8:	0800842d 	.word	0x0800842d
 80082fc:	0800842d 	.word	0x0800842d
 8008300:	0800842d 	.word	0x0800842d
 8008304:	08008369 	.word	0x08008369
 8008308:	0800842d 	.word	0x0800842d
 800830c:	0800842d 	.word	0x0800842d
 8008310:	0800842d 	.word	0x0800842d
 8008314:	080083ab 	.word	0x080083ab
 8008318:	0800842d 	.word	0x0800842d
 800831c:	0800842d 	.word	0x0800842d
 8008320:	0800842d 	.word	0x0800842d
 8008324:	080083eb 	.word	0x080083eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fa04 	bl	800873c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0208 	orr.w	r2, r2, #8
 8008342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0204 	bic.w	r2, r2, #4
 8008352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6999      	ldr	r1, [r3, #24]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691a      	ldr	r2, [r3, #16]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	619a      	str	r2, [r3, #24]
      break;
 8008366:	e064      	b.n	8008432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fa4a 	bl	8008808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6999      	ldr	r1, [r3, #24]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	021a      	lsls	r2, r3, #8
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	619a      	str	r2, [r3, #24]
      break;
 80083a8:	e043      	b.n	8008432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fa95 	bl	80088e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0208 	orr.w	r2, r2, #8
 80083c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0204 	bic.w	r2, r2, #4
 80083d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69d9      	ldr	r1, [r3, #28]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	61da      	str	r2, [r3, #28]
      break;
 80083e8:	e023      	b.n	8008432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fadf 	bl	80089b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69da      	ldr	r2, [r3, #28]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69d9      	ldr	r1, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	021a      	lsls	r2, r3, #8
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	61da      	str	r2, [r3, #28]
      break;
 800842a:	e002      	b.n	8008432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
      break;
 8008430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_TIM_ConfigClockSource+0x1c>
 800845c:	2302      	movs	r3, #2
 800845e:	e0b4      	b.n	80085ca <HAL_TIM_ConfigClockSource+0x186>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800847e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008498:	d03e      	beq.n	8008518 <HAL_TIM_ConfigClockSource+0xd4>
 800849a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800849e:	f200 8087 	bhi.w	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a6:	f000 8086 	beq.w	80085b6 <HAL_TIM_ConfigClockSource+0x172>
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ae:	d87f      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b70      	cmp	r3, #112	@ 0x70
 80084b2:	d01a      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0xa6>
 80084b4:	2b70      	cmp	r3, #112	@ 0x70
 80084b6:	d87b      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084b8:	2b60      	cmp	r3, #96	@ 0x60
 80084ba:	d050      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x11a>
 80084bc:	2b60      	cmp	r3, #96	@ 0x60
 80084be:	d877      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c0:	2b50      	cmp	r3, #80	@ 0x50
 80084c2:	d03c      	beq.n	800853e <HAL_TIM_ConfigClockSource+0xfa>
 80084c4:	2b50      	cmp	r3, #80	@ 0x50
 80084c6:	d873      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c8:	2b40      	cmp	r3, #64	@ 0x40
 80084ca:	d058      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x13a>
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	d86f      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d0:	2b30      	cmp	r3, #48	@ 0x30
 80084d2:	d064      	beq.n	800859e <HAL_TIM_ConfigClockSource+0x15a>
 80084d4:	2b30      	cmp	r3, #48	@ 0x30
 80084d6:	d86b      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d8:	2b20      	cmp	r3, #32
 80084da:	d060      	beq.n	800859e <HAL_TIM_ConfigClockSource+0x15a>
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d867      	bhi.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d05c      	beq.n	800859e <HAL_TIM_ConfigClockSource+0x15a>
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d05a      	beq.n	800859e <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	e062      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	f000 fb25 	bl	8008b48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800850c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	609a      	str	r2, [r3, #8]
      break;
 8008516:	e04f      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	f000 fb0e 	bl	8008b48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800853a:	609a      	str	r2, [r3, #8]
      break;
 800853c:	e03c      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854a:	461a      	mov	r2, r3
 800854c:	f000 fa82 	bl	8008a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2150      	movs	r1, #80	@ 0x50
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fadb 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800855c:	e02c      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800856a:	461a      	mov	r2, r3
 800856c:	f000 faa1 	bl	8008ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2160      	movs	r1, #96	@ 0x60
 8008576:	4618      	mov	r0, r3
 8008578:	f000 facb 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800857c:	e01c      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858a:	461a      	mov	r2, r3
 800858c:	f000 fa62 	bl	8008a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2140      	movs	r1, #64	@ 0x40
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fabb 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800859c:	e00c      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f000 fab2 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 80085ae:	e003      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
      break;
 80085b4:	e000      	b.n	80085b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a3a      	ldr	r2, [pc, #232]	@ (8008720 <TIM_Base_SetConfig+0xfc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00f      	beq.n	800865c <TIM_Base_SetConfig+0x38>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008642:	d00b      	beq.n	800865c <TIM_Base_SetConfig+0x38>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a37      	ldr	r2, [pc, #220]	@ (8008724 <TIM_Base_SetConfig+0x100>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d007      	beq.n	800865c <TIM_Base_SetConfig+0x38>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a36      	ldr	r2, [pc, #216]	@ (8008728 <TIM_Base_SetConfig+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_Base_SetConfig+0x38>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a35      	ldr	r2, [pc, #212]	@ (800872c <TIM_Base_SetConfig+0x108>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d108      	bne.n	800866e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a2b      	ldr	r2, [pc, #172]	@ (8008720 <TIM_Base_SetConfig+0xfc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01b      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867c:	d017      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a28      	ldr	r2, [pc, #160]	@ (8008724 <TIM_Base_SetConfig+0x100>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d013      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a27      	ldr	r2, [pc, #156]	@ (8008728 <TIM_Base_SetConfig+0x104>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00f      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a26      	ldr	r2, [pc, #152]	@ (800872c <TIM_Base_SetConfig+0x108>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00b      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a25      	ldr	r2, [pc, #148]	@ (8008730 <TIM_Base_SetConfig+0x10c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d007      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a24      	ldr	r2, [pc, #144]	@ (8008734 <TIM_Base_SetConfig+0x110>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d003      	beq.n	80086ae <TIM_Base_SetConfig+0x8a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a23      	ldr	r2, [pc, #140]	@ (8008738 <TIM_Base_SetConfig+0x114>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d108      	bne.n	80086c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008720 <TIM_Base_SetConfig+0xfc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d103      	bne.n	80086f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	691a      	ldr	r2, [r3, #16]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b01      	cmp	r3, #1
 8008704:	d105      	bne.n	8008712 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f023 0201 	bic.w	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	611a      	str	r2, [r3, #16]
  }
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40010000 	.word	0x40010000
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800

0800873c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	f023 0201 	bic.w	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800876a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 0302 	bic.w	r3, r3, #2
 8008784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a1c      	ldr	r2, [pc, #112]	@ (8008804 <TIM_OC1_SetConfig+0xc8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d10c      	bne.n	80087b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f023 0308 	bic.w	r3, r3, #8
 800879e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f023 0304 	bic.w	r3, r3, #4
 80087b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a13      	ldr	r2, [pc, #76]	@ (8008804 <TIM_OC1_SetConfig+0xc8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d111      	bne.n	80087de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	40010000 	.word	0x40010000

08008808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f023 0210 	bic.w	r2, r3, #16
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800883e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f023 0320 	bic.w	r3, r3, #32
 8008852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1e      	ldr	r2, [pc, #120]	@ (80088dc <TIM_OC2_SetConfig+0xd4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d10d      	bne.n	8008884 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800886e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a15      	ldr	r2, [pc, #84]	@ (80088dc <TIM_OC2_SetConfig+0xd4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d113      	bne.n	80088b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800889a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	621a      	str	r2, [r3, #32]
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40010000 	.word	0x40010000

080088e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1d      	ldr	r2, [pc, #116]	@ (80089b0 <TIM_OC3_SetConfig+0xd0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d10d      	bne.n	800895a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a14      	ldr	r2, [pc, #80]	@ (80089b0 <TIM_OC3_SetConfig+0xd0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d113      	bne.n	800898a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	621a      	str	r2, [r3, #32]
}
 80089a4:	bf00      	nop
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	40010000 	.word	0x40010000

080089b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	031b      	lsls	r3, r3, #12
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a10      	ldr	r2, [pc, #64]	@ (8008a50 <TIM_OC4_SetConfig+0x9c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d109      	bne.n	8008a28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	019b      	lsls	r3, r3, #6
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	621a      	str	r2, [r3, #32]
}
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40010000 	.word	0x40010000

08008a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f023 0201 	bic.w	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 030a 	bic.w	r3, r3, #10
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f023 0210 	bic.w	r2, r3, #16
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	031b      	lsls	r3, r3, #12
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008aee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	f043 0307 	orr.w	r3, r3, #7
 8008b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	609a      	str	r2, [r3, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	021a      	lsls	r2, r3, #8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	609a      	str	r2, [r3, #8]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 031f 	and.w	r3, r3, #31
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	43db      	mvns	r3, r3
 8008baa:	401a      	ands	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a1a      	ldr	r2, [r3, #32]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e050      	b.n	8008c8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d018      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c38:	d013      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00e      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a16      	ldr	r2, [pc, #88]	@ (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d009      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a15      	ldr	r2, [pc, #84]	@ (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d004      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d10c      	bne.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40010000 	.word	0x40010000
 8008ca0:	40000400 	.word	0x40000400
 8008ca4:	40000800 	.word	0x40000800
 8008ca8:	40000c00 	.word	0x40000c00
 8008cac:	40014000 	.word	0x40014000

08008cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e042      	b.n	8008d70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7f9 fa74 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2224      	movs	r2, #36	@ 0x24
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68da      	ldr	r2, [r3, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fdbd 	bl	800989c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695a      	ldr	r2, [r3, #20]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	@ 0x28
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d175      	bne.n	8008e84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_UART_Transmit+0x2c>
 8008d9e:	88fb      	ldrh	r3, [r7, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e06e      	b.n	8008e86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2221      	movs	r2, #33	@ 0x21
 8008db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008db6:	f7f9 fc21 	bl	80025fc <HAL_GetTick>
 8008dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd0:	d108      	bne.n	8008de4 <HAL_UART_Transmit+0x6c>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d104      	bne.n	8008de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	e003      	b.n	8008dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dec:	e02e      	b.n	8008e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fb1f 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e03a      	b.n	8008e86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e007      	b.n	8008e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1cb      	bne.n	8008dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2140      	movs	r1, #64	@ 0x40
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 faeb 	bl	800943c <UART_WaitOnFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e006      	b.n	8008e86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e000      	b.n	8008e86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008e84:	2302      	movs	r3, #2
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d112      	bne.n	8008ece <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_UART_Receive_IT+0x26>
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e00b      	b.n	8008ed0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fb12 	bl	80094ee <UART_Start_Receive_IT>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	e000      	b.n	8008ed0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b0ba      	sub	sp, #232	@ 0xe8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10f      	bne.n	8008f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <HAL_UART_IRQHandler+0x66>
 8008f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fbf2 	bl	8009720 <UART_Receive_IT>
      return;
 8008f3c:	e25b      	b.n	80093f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 80de 	beq.w	8009104 <HAL_UART_IRQHandler+0x22c>
 8008f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80d1 	beq.w	8009104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00b      	beq.n	8008f86 <HAL_UART_IRQHandler+0xae>
 8008f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d005      	beq.n	8008f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <HAL_UART_IRQHandler+0xd2>
 8008f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa2:	f043 0202 	orr.w	r2, r3, #2
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <HAL_UART_IRQHandler+0xf6>
 8008fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc6:	f043 0204 	orr.w	r2, r3, #4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <HAL_UART_IRQHandler+0x126>
 8008fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff6:	f043 0208 	orr.w	r2, r3, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 81f2 	beq.w	80093ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <HAL_UART_IRQHandler+0x14e>
 8009014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fb7d 	bl	8009720 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b40      	cmp	r3, #64	@ 0x40
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <HAL_UART_IRQHandler+0x17a>
 800904a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d04f      	beq.n	80090f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa85 	bl	8009562 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009062:	2b40      	cmp	r3, #64	@ 0x40
 8009064:	d141      	bne.n	80090ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3314      	adds	r3, #20
 800906c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800907c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3314      	adds	r3, #20
 800908e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800909e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1d9      	bne.n	8009066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d013      	beq.n	80090e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	4a7e      	ldr	r2, [pc, #504]	@ (80092b8 <HAL_UART_IRQHandler+0x3e0>)
 80090c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f9 fcf8 	bl	8002abc <HAL_DMA_Abort_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e0:	e00e      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f994 	bl	8009410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	e00a      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f990 	bl	8009410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e006      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f98c 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80090fe:	e175      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	bf00      	nop
    return;
 8009102:	e173      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009108:	2b01      	cmp	r3, #1
 800910a:	f040 814f 	bne.w	80093ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800910e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8148 	beq.w	80093ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8141 	beq.w	80093ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60bb      	str	r3, [r7, #8]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800914a:	2b40      	cmp	r3, #64	@ 0x40
 800914c:	f040 80b6 	bne.w	80092bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800915c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8145 	beq.w	80093f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800916a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800916e:	429a      	cmp	r2, r3
 8009170:	f080 813e 	bcs.w	80093f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800917a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009186:	f000 8088 	beq.w	800929a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	330c      	adds	r3, #12
 8009190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1d9      	bne.n	800918a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3314      	adds	r3, #20
 80091dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091e8:	f023 0301 	bic.w	r3, r3, #1
 80091ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3314      	adds	r3, #20
 80091f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800920c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e1      	bne.n	80091d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3314      	adds	r3, #20
 8009218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3314      	adds	r3, #20
 8009232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800923c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e3      	bne.n	8009212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800926a:	f023 0310 	bic.w	r3, r3, #16
 800926e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800927c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800927e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800928a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e3      	bne.n	8009258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	4618      	mov	r0, r3
 8009296:	f7f9 fba1 	bl	80029dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f8b7 	bl	8009424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b6:	e09b      	b.n	80093f0 <HAL_UART_IRQHandler+0x518>
 80092b8:	08009629 	.word	0x08009629
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 808e 	beq.w	80093f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80092d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 8089 	beq.w	80093f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009306:	647a      	str	r2, [r7, #68]	@ 0x44
 8009308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800930c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e3      	bne.n	80092e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3314      	adds	r3, #20
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	623b      	str	r3, [r7, #32]
   return(result);
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3314      	adds	r3, #20
 800933a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800933e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800934c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e3      	bne.n	800931a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0310 	bic.w	r3, r3, #16
 8009376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	330c      	adds	r3, #12
 8009380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009384:	61fa      	str	r2, [r7, #28]
 8009386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	69b9      	ldr	r1, [r7, #24]
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	617b      	str	r3, [r7, #20]
   return(result);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e3      	bne.n	8009360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800939e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f83d 	bl	8009424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093aa:	e023      	b.n	80093f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <HAL_UART_IRQHandler+0x4f4>
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f943 	bl	8009650 <UART_Transmit_IT>
    return;
 80093ca:	e014      	b.n	80093f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00e      	beq.n	80093f6 <HAL_UART_IRQHandler+0x51e>
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d008      	beq.n	80093f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f983 	bl	80096f0 <UART_EndTransmit_IT>
    return;
 80093ea:	e004      	b.n	80093f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80093ec:	bf00      	nop
 80093ee:	e002      	b.n	80093f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80093f0:	bf00      	nop
 80093f2:	e000      	b.n	80093f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80093f4:	bf00      	nop
  }
}
 80093f6:	37e8      	adds	r7, #232	@ 0xe8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	e03b      	b.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d037      	beq.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	f7f9 f8d1 	bl	80025fc <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <UART_WaitOnFlagUntilTimeout+0x30>
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e03a      	b.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d023      	beq.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b80      	cmp	r3, #128	@ 0x80
 8009482:	d020      	beq.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d01d      	beq.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b08      	cmp	r3, #8
 8009496:	d116      	bne.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f857 	bl	8009562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2208      	movs	r2, #8
 80094b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e00f      	b.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4013      	ands	r3, r2
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	bf0c      	ite	eq
 80094d6:	2301      	moveq	r3, #1
 80094d8:	2300      	movne	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d0b4      	beq.n	800944e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	4613      	mov	r3, r2
 80094fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2222      	movs	r2, #34	@ 0x22
 8009518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009532:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0220 	orr.w	r2, r2, #32
 8009552:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009562:	b480      	push	{r7}
 8009564:	b095      	sub	sp, #84	@ 0x54
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	330c      	adds	r3, #12
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	330c      	adds	r3, #12
 8009588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800958a:	643a      	str	r2, [r7, #64]	@ 0x40
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e5      	bne.n	800956a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3314      	adds	r3, #20
 80095a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f023 0301 	bic.w	r3, r3, #1
 80095b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3314      	adds	r3, #20
 80095bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e5      	bne.n	800959e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d119      	bne.n	800960e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	330c      	adds	r3, #12
 80095e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f023 0310 	bic.w	r3, r3, #16
 80095f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	330c      	adds	r3, #12
 80095f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095fa:	61ba      	str	r2, [r7, #24]
 80095fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6979      	ldr	r1, [r7, #20]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	613b      	str	r3, [r7, #16]
   return(result);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e5      	bne.n	80095da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800961c:	bf00      	nop
 800961e:	3754      	adds	r7, #84	@ 0x54
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fee4 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009648:	bf00      	nop
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b21      	cmp	r3, #33	@ 0x21
 8009662:	d13e      	bne.n	80096e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800966c:	d114      	bne.n	8009698 <UART_Transmit_IT+0x48>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d110      	bne.n	8009698 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800968a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	1c9a      	adds	r2, r3, #2
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	621a      	str	r2, [r3, #32]
 8009696:	e008      	b.n	80096aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	1c59      	adds	r1, r3, #1
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6211      	str	r1, [r2, #32]
 80096a2:	781a      	ldrb	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4619      	mov	r1, r3
 80096b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10f      	bne.n	80096de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	e000      	b.n	80096e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
  }
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009706:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2220      	movs	r2, #32
 800970c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fe73 	bl	80093fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	@ 0x30
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b22      	cmp	r3, #34	@ 0x22
 8009732:	f040 80ae 	bne.w	8009892 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800973e:	d117      	bne.n	8009770 <UART_Receive_IT+0x50>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d113      	bne.n	8009770 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	b29b      	uxth	r3, r3
 800975a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975e:	b29a      	uxth	r2, r3
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	1c9a      	adds	r2, r3, #2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28
 800976e:	e026      	b.n	80097be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009782:	d007      	beq.n	8009794 <UART_Receive_IT+0x74>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10a      	bne.n	80097a2 <UART_Receive_IT+0x82>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d106      	bne.n	80097a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b2da      	uxtb	r2, r3
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	e008      	b.n	80097b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4619      	mov	r1, r3
 80097cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d15d      	bne.n	800988e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0220 	bic.w	r2, r2, #32
 80097e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0201 	bic.w	r2, r2, #1
 8009800:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2220      	movs	r2, #32
 8009806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009814:	2b01      	cmp	r3, #1
 8009816:	d135      	bne.n	8009884 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	330c      	adds	r3, #12
 8009824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	613b      	str	r3, [r7, #16]
   return(result);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f023 0310 	bic.w	r3, r3, #16
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800983e:	623a      	str	r2, [r7, #32]
 8009840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	69f9      	ldr	r1, [r7, #28]
 8009844:	6a3a      	ldr	r2, [r7, #32]
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	61bb      	str	r3, [r7, #24]
   return(result);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e5      	bne.n	800981e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b10      	cmp	r3, #16
 800985e:	d10a      	bne.n	8009876 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff fdd1 	bl	8009424 <HAL_UARTEx_RxEventCallback>
 8009882:	e002      	b.n	800988a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7f7 fc93 	bl	80011b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e002      	b.n	8009894 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009892:	2302      	movs	r3, #2
  }
}
 8009894:	4618      	mov	r0, r3
 8009896:	3730      	adds	r7, #48	@ 0x30
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800989c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098a0:	b0c0      	sub	sp, #256	@ 0x100
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80098b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098b8:	68d9      	ldr	r1, [r3, #12]
 80098ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	ea40 0301 	orr.w	r3, r0, r1
 80098c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	431a      	orrs	r2, r3
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80098f4:	f021 010c 	bic.w	r1, r1, #12
 80098f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009902:	430b      	orrs	r3, r1
 8009904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009916:	6999      	ldr	r1, [r3, #24]
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	ea40 0301 	orr.w	r3, r0, r1
 8009922:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b8f      	ldr	r3, [pc, #572]	@ (8009b68 <UART_SetConfig+0x2cc>)
 800992c:	429a      	cmp	r2, r3
 800992e:	d005      	beq.n	800993c <UART_SetConfig+0xa0>
 8009930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b8d      	ldr	r3, [pc, #564]	@ (8009b6c <UART_SetConfig+0x2d0>)
 8009938:	429a      	cmp	r2, r3
 800993a:	d104      	bne.n	8009946 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800993c:	f7fe fa00 	bl	8007d40 <HAL_RCC_GetPCLK2Freq>
 8009940:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009944:	e003      	b.n	800994e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009946:	f7fe f9e7 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 800994a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800994e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009958:	f040 810c 	bne.w	8009b74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800995c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009960:	2200      	movs	r2, #0
 8009962:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009966:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800996a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800996e:	4622      	mov	r2, r4
 8009970:	462b      	mov	r3, r5
 8009972:	1891      	adds	r1, r2, r2
 8009974:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009976:	415b      	adcs	r3, r3
 8009978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800997a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800997e:	4621      	mov	r1, r4
 8009980:	eb12 0801 	adds.w	r8, r2, r1
 8009984:	4629      	mov	r1, r5
 8009986:	eb43 0901 	adc.w	r9, r3, r1
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	f04f 0300 	mov.w	r3, #0
 8009992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800999a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800999e:	4690      	mov	r8, r2
 80099a0:	4699      	mov	r9, r3
 80099a2:	4623      	mov	r3, r4
 80099a4:	eb18 0303 	adds.w	r3, r8, r3
 80099a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099ac:	462b      	mov	r3, r5
 80099ae:	eb49 0303 	adc.w	r3, r9, r3
 80099b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80099c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099ca:	460b      	mov	r3, r1
 80099cc:	18db      	adds	r3, r3, r3
 80099ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80099d0:	4613      	mov	r3, r2
 80099d2:	eb42 0303 	adc.w	r3, r2, r3
 80099d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80099d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80099dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80099e0:	f7f7 f90a 	bl	8000bf8 <__aeabi_uldivmod>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4b61      	ldr	r3, [pc, #388]	@ (8009b70 <UART_SetConfig+0x2d4>)
 80099ea:	fba3 2302 	umull	r2, r3, r3, r2
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	011c      	lsls	r4, r3, #4
 80099f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	1891      	adds	r1, r2, r2
 8009a0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a0c:	415b      	adcs	r3, r3
 8009a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a14:	4641      	mov	r1, r8
 8009a16:	eb12 0a01 	adds.w	sl, r2, r1
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	eb43 0b01 	adc.w	fp, r3, r1
 8009a20:	f04f 0200 	mov.w	r2, #0
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a34:	4692      	mov	sl, r2
 8009a36:	469b      	mov	fp, r3
 8009a38:	4643      	mov	r3, r8
 8009a3a:	eb1a 0303 	adds.w	r3, sl, r3
 8009a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a42:	464b      	mov	r3, r9
 8009a44:	eb4b 0303 	adc.w	r3, fp, r3
 8009a48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009a5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a60:	460b      	mov	r3, r1
 8009a62:	18db      	adds	r3, r3, r3
 8009a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a66:	4613      	mov	r3, r2
 8009a68:	eb42 0303 	adc.w	r3, r2, r3
 8009a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009a76:	f7f7 f8bf 	bl	8000bf8 <__aeabi_uldivmod>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	4b3b      	ldr	r3, [pc, #236]	@ (8009b70 <UART_SetConfig+0x2d4>)
 8009a82:	fba3 2301 	umull	r2, r3, r3, r1
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	2264      	movs	r2, #100	@ 0x64
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	1acb      	subs	r3, r1, r3
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009a96:	4b36      	ldr	r3, [pc, #216]	@ (8009b70 <UART_SetConfig+0x2d4>)
 8009a98:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009aa4:	441c      	add	r4, r3
 8009aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ab0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009ab4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	1891      	adds	r1, r2, r2
 8009abe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ac0:	415b      	adcs	r3, r3
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009ac8:	4641      	mov	r1, r8
 8009aca:	1851      	adds	r1, r2, r1
 8009acc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ace:	4649      	mov	r1, r9
 8009ad0:	414b      	adcs	r3, r1
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ae0:	4659      	mov	r1, fp
 8009ae2:	00cb      	lsls	r3, r1, #3
 8009ae4:	4651      	mov	r1, sl
 8009ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aea:	4651      	mov	r1, sl
 8009aec:	00ca      	lsls	r2, r1, #3
 8009aee:	4610      	mov	r0, r2
 8009af0:	4619      	mov	r1, r3
 8009af2:	4603      	mov	r3, r0
 8009af4:	4642      	mov	r2, r8
 8009af6:	189b      	adds	r3, r3, r2
 8009af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009afc:	464b      	mov	r3, r9
 8009afe:	460a      	mov	r2, r1
 8009b00:	eb42 0303 	adc.w	r3, r2, r3
 8009b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	18db      	adds	r3, r3, r3
 8009b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b22:	4613      	mov	r3, r2
 8009b24:	eb42 0303 	adc.w	r3, r2, r3
 8009b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b32:	f7f7 f861 	bl	8000bf8 <__aeabi_uldivmod>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <UART_SetConfig+0x2d4>)
 8009b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	2164      	movs	r1, #100	@ 0x64
 8009b44:	fb01 f303 	mul.w	r3, r1, r3
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	3332      	adds	r3, #50	@ 0x32
 8009b4e:	4a08      	ldr	r2, [pc, #32]	@ (8009b70 <UART_SetConfig+0x2d4>)
 8009b50:	fba2 2303 	umull	r2, r3, r2, r3
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	f003 0207 	and.w	r2, r3, #7
 8009b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4422      	add	r2, r4
 8009b62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b64:	e106      	b.n	8009d74 <UART_SetConfig+0x4d8>
 8009b66:	bf00      	nop
 8009b68:	40011000 	.word	0x40011000
 8009b6c:	40011400 	.word	0x40011400
 8009b70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009b82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009b86:	4642      	mov	r2, r8
 8009b88:	464b      	mov	r3, r9
 8009b8a:	1891      	adds	r1, r2, r2
 8009b8c:	6239      	str	r1, [r7, #32]
 8009b8e:	415b      	adcs	r3, r3
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b96:	4641      	mov	r1, r8
 8009b98:	1854      	adds	r4, r2, r1
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	eb43 0501 	adc.w	r5, r3, r1
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	00eb      	lsls	r3, r5, #3
 8009baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bae:	00e2      	lsls	r2, r4, #3
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	4643      	mov	r3, r8
 8009bb6:	18e3      	adds	r3, r4, r3
 8009bb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	eb45 0303 	adc.w	r3, r5, r3
 8009bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bd6:	f04f 0200 	mov.w	r2, #0
 8009bda:	f04f 0300 	mov.w	r3, #0
 8009bde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009be2:	4629      	mov	r1, r5
 8009be4:	008b      	lsls	r3, r1, #2
 8009be6:	4621      	mov	r1, r4
 8009be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bec:	4621      	mov	r1, r4
 8009bee:	008a      	lsls	r2, r1, #2
 8009bf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009bf4:	f7f7 f800 	bl	8000bf8 <__aeabi_uldivmod>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4b60      	ldr	r3, [pc, #384]	@ (8009d80 <UART_SetConfig+0x4e4>)
 8009bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8009c02:	095b      	lsrs	r3, r3, #5
 8009c04:	011c      	lsls	r4, r3, #4
 8009c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c18:	4642      	mov	r2, r8
 8009c1a:	464b      	mov	r3, r9
 8009c1c:	1891      	adds	r1, r2, r2
 8009c1e:	61b9      	str	r1, [r7, #24]
 8009c20:	415b      	adcs	r3, r3
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c28:	4641      	mov	r1, r8
 8009c2a:	1851      	adds	r1, r2, r1
 8009c2c:	6139      	str	r1, [r7, #16]
 8009c2e:	4649      	mov	r1, r9
 8009c30:	414b      	adcs	r3, r1
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	f04f 0300 	mov.w	r3, #0
 8009c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c40:	4659      	mov	r1, fp
 8009c42:	00cb      	lsls	r3, r1, #3
 8009c44:	4651      	mov	r1, sl
 8009c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c4a:	4651      	mov	r1, sl
 8009c4c:	00ca      	lsls	r2, r1, #3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4619      	mov	r1, r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	4642      	mov	r2, r8
 8009c56:	189b      	adds	r3, r3, r2
 8009c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	460a      	mov	r2, r1
 8009c60:	eb42 0303 	adc.w	r3, r2, r3
 8009c64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009c80:	4649      	mov	r1, r9
 8009c82:	008b      	lsls	r3, r1, #2
 8009c84:	4641      	mov	r1, r8
 8009c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c8a:	4641      	mov	r1, r8
 8009c8c:	008a      	lsls	r2, r1, #2
 8009c8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009c92:	f7f6 ffb1 	bl	8000bf8 <__aeabi_uldivmod>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4b38      	ldr	r3, [pc, #224]	@ (8009d80 <UART_SetConfig+0x4e4>)
 8009c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	2264      	movs	r2, #100	@ 0x64
 8009ca6:	fb02 f303 	mul.w	r3, r2, r3
 8009caa:	1acb      	subs	r3, r1, r3
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	3332      	adds	r3, #50	@ 0x32
 8009cb0:	4a33      	ldr	r2, [pc, #204]	@ (8009d80 <UART_SetConfig+0x4e4>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	095b      	lsrs	r3, r3, #5
 8009cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cbc:	441c      	add	r4, r3
 8009cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009cc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ccc:	4642      	mov	r2, r8
 8009cce:	464b      	mov	r3, r9
 8009cd0:	1891      	adds	r1, r2, r2
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	415b      	adcs	r3, r3
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cdc:	4641      	mov	r1, r8
 8009cde:	1851      	adds	r1, r2, r1
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	414b      	adcs	r3, r1
 8009ce6:	607b      	str	r3, [r7, #4]
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	f04f 0300 	mov.w	r3, #0
 8009cf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009cf4:	4659      	mov	r1, fp
 8009cf6:	00cb      	lsls	r3, r1, #3
 8009cf8:	4651      	mov	r1, sl
 8009cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cfe:	4651      	mov	r1, sl
 8009d00:	00ca      	lsls	r2, r1, #3
 8009d02:	4610      	mov	r0, r2
 8009d04:	4619      	mov	r1, r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	4642      	mov	r2, r8
 8009d0a:	189b      	adds	r3, r3, r2
 8009d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d0e:	464b      	mov	r3, r9
 8009d10:	460a      	mov	r2, r1
 8009d12:	eb42 0303 	adc.w	r3, r2, r3
 8009d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d22:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d30:	4649      	mov	r1, r9
 8009d32:	008b      	lsls	r3, r1, #2
 8009d34:	4641      	mov	r1, r8
 8009d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	008a      	lsls	r2, r1, #2
 8009d3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d42:	f7f6 ff59 	bl	8000bf8 <__aeabi_uldivmod>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d80 <UART_SetConfig+0x4e4>)
 8009d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d50:	095b      	lsrs	r3, r3, #5
 8009d52:	2164      	movs	r1, #100	@ 0x64
 8009d54:	fb01 f303 	mul.w	r3, r1, r3
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	011b      	lsls	r3, r3, #4
 8009d5c:	3332      	adds	r3, #50	@ 0x32
 8009d5e:	4a08      	ldr	r2, [pc, #32]	@ (8009d80 <UART_SetConfig+0x4e4>)
 8009d60:	fba2 2303 	umull	r2, r3, r2, r3
 8009d64:	095b      	lsrs	r3, r3, #5
 8009d66:	f003 020f 	and.w	r2, r3, #15
 8009d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4422      	add	r2, r4
 8009d72:	609a      	str	r2, [r3, #8]
}
 8009d74:	bf00      	nop
 8009d76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d80:	51eb851f 	.word	0x51eb851f

08009d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d84:	b084      	sub	sp, #16
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	f107 001c 	add.w	r0, r7, #28
 8009d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d123      	bne.n	8009de6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d105      	bne.n	8009dda <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fae8 	bl	800b3b0 <USB_CoreReset>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73fb      	strb	r3, [r7, #15]
 8009de4:	e01b      	b.n	8009e1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 fadc 	bl	800b3b0 <USB_CoreReset>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009dfc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e10:	e005      	b.n	8009e1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e1e:	7fbb      	ldrb	r3, [r7, #30]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d10b      	bne.n	8009e3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f043 0206 	orr.w	r2, r3, #6
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f043 0220 	orr.w	r2, r3, #32
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e48:	b004      	add	sp, #16
 8009e4a:	4770      	bx	lr

08009e4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d165      	bne.n	8009f2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4a41      	ldr	r2, [pc, #260]	@ (8009f68 <USB_SetTurnaroundTime+0x11c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d906      	bls.n	8009e76 <USB_SetTurnaroundTime+0x2a>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4a40      	ldr	r2, [pc, #256]	@ (8009f6c <USB_SetTurnaroundTime+0x120>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d202      	bcs.n	8009e76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e70:	230f      	movs	r3, #15
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	e062      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	4a3c      	ldr	r2, [pc, #240]	@ (8009f6c <USB_SetTurnaroundTime+0x120>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d306      	bcc.n	8009e8c <USB_SetTurnaroundTime+0x40>
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4a3b      	ldr	r2, [pc, #236]	@ (8009f70 <USB_SetTurnaroundTime+0x124>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d202      	bcs.n	8009e8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e86:	230e      	movs	r3, #14
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	e057      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4a38      	ldr	r2, [pc, #224]	@ (8009f70 <USB_SetTurnaroundTime+0x124>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d306      	bcc.n	8009ea2 <USB_SetTurnaroundTime+0x56>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4a37      	ldr	r2, [pc, #220]	@ (8009f74 <USB_SetTurnaroundTime+0x128>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d202      	bcs.n	8009ea2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e9c:	230d      	movs	r3, #13
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	e04c      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	4a33      	ldr	r2, [pc, #204]	@ (8009f74 <USB_SetTurnaroundTime+0x128>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d306      	bcc.n	8009eb8 <USB_SetTurnaroundTime+0x6c>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4a32      	ldr	r2, [pc, #200]	@ (8009f78 <USB_SetTurnaroundTime+0x12c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d802      	bhi.n	8009eb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	e041      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4a2f      	ldr	r2, [pc, #188]	@ (8009f78 <USB_SetTurnaroundTime+0x12c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d906      	bls.n	8009ece <USB_SetTurnaroundTime+0x82>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8009f7c <USB_SetTurnaroundTime+0x130>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d802      	bhi.n	8009ece <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ec8:	230b      	movs	r3, #11
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e036      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8009f7c <USB_SetTurnaroundTime+0x130>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d906      	bls.n	8009ee4 <USB_SetTurnaroundTime+0x98>
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	4a29      	ldr	r2, [pc, #164]	@ (8009f80 <USB_SetTurnaroundTime+0x134>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d802      	bhi.n	8009ee4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ede:	230a      	movs	r3, #10
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	e02b      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	4a26      	ldr	r2, [pc, #152]	@ (8009f80 <USB_SetTurnaroundTime+0x134>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d906      	bls.n	8009efa <USB_SetTurnaroundTime+0xae>
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	4a25      	ldr	r2, [pc, #148]	@ (8009f84 <USB_SetTurnaroundTime+0x138>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d202      	bcs.n	8009efa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ef4:	2309      	movs	r3, #9
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e020      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	4a21      	ldr	r2, [pc, #132]	@ (8009f84 <USB_SetTurnaroundTime+0x138>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d306      	bcc.n	8009f10 <USB_SetTurnaroundTime+0xc4>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	4a20      	ldr	r2, [pc, #128]	@ (8009f88 <USB_SetTurnaroundTime+0x13c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d802      	bhi.n	8009f10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	e015      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	4a1d      	ldr	r2, [pc, #116]	@ (8009f88 <USB_SetTurnaroundTime+0x13c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d906      	bls.n	8009f26 <USB_SetTurnaroundTime+0xda>
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009f8c <USB_SetTurnaroundTime+0x140>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d202      	bcs.n	8009f26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f20:	2307      	movs	r3, #7
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e00a      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f26:	2306      	movs	r3, #6
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e007      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f32:	2309      	movs	r3, #9
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	e001      	b.n	8009f3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f38:	2309      	movs	r3, #9
 8009f3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68da      	ldr	r2, [r3, #12]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	029b      	lsls	r3, r3, #10
 8009f50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009f54:	431a      	orrs	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	00d8acbf 	.word	0x00d8acbf
 8009f6c:	00e4e1c0 	.word	0x00e4e1c0
 8009f70:	00f42400 	.word	0x00f42400
 8009f74:	01067380 	.word	0x01067380
 8009f78:	011a499f 	.word	0x011a499f
 8009f7c:	01312cff 	.word	0x01312cff
 8009f80:	014ca43f 	.word	0x014ca43f
 8009f84:	016e3600 	.word	0x016e3600
 8009f88:	01a6ab1f 	.word	0x01a6ab1f
 8009f8c:	01e84800 	.word	0x01e84800

08009f90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f043 0201 	orr.w	r2, r3, #1
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f023 0201 	bic.w	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d115      	bne.n	800a022 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a002:	200a      	movs	r0, #10
 800a004:	f7f8 fb06 	bl	8002614 <HAL_Delay>
      ms += 10U;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	330a      	adds	r3, #10
 800a00c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 f93f 	bl	800b292 <USB_GetMode>
 800a014:	4603      	mov	r3, r0
 800a016:	2b01      	cmp	r3, #1
 800a018:	d01e      	beq.n	800a058 <USB_SetCurrentMode+0x84>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a01e:	d9f0      	bls.n	800a002 <USB_SetCurrentMode+0x2e>
 800a020:	e01a      	b.n	800a058 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d115      	bne.n	800a054 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a034:	200a      	movs	r0, #10
 800a036:	f7f8 faed 	bl	8002614 <HAL_Delay>
      ms += 10U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	330a      	adds	r3, #10
 800a03e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 f926 	bl	800b292 <USB_GetMode>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <USB_SetCurrentMode+0x84>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a050:	d9f0      	bls.n	800a034 <USB_SetCurrentMode+0x60>
 800a052:	e001      	b.n	800a058 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e005      	b.n	800a064 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a05c:	d101      	bne.n	800a062 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a06c:	b084      	sub	sp, #16
 800a06e:	b580      	push	{r7, lr}
 800a070:	b086      	sub	sp, #24
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a07a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a086:	2300      	movs	r3, #0
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	e009      	b.n	800a0a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3340      	adds	r3, #64	@ 0x40
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	2200      	movs	r2, #0
 800a098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3301      	adds	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b0e      	cmp	r3, #14
 800a0a4:	d9f2      	bls.n	800a08c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a0a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d11c      	bne.n	800a0e8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0bc:	f043 0302 	orr.w	r3, r3, #2
 800a0c0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0e6:	e00b      	b.n	800a100 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a106:	461a      	mov	r2, r3
 800a108:	2300      	movs	r3, #0
 800a10a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a10c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a110:	2b01      	cmp	r3, #1
 800a112:	d10d      	bne.n	800a130 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d104      	bne.n	800a126 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a11c:	2100      	movs	r1, #0
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f968 	bl	800a3f4 <USB_SetDevSpeed>
 800a124:	e008      	b.n	800a138 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a126:	2101      	movs	r1, #1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f963 	bl	800a3f4 <USB_SetDevSpeed>
 800a12e:	e003      	b.n	800a138 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a130:	2103      	movs	r1, #3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f95e 	bl	800a3f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a138:	2110      	movs	r1, #16
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8fa 	bl	800a334 <USB_FlushTxFifo>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f924 	bl	800a398 <USB_FlushRxFifo>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a160:	461a      	mov	r2, r3
 800a162:	2300      	movs	r3, #0
 800a164:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a16c:	461a      	mov	r2, r3
 800a16e:	2300      	movs	r3, #0
 800a170:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a178:	461a      	mov	r2, r3
 800a17a:	2300      	movs	r3, #0
 800a17c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a17e:	2300      	movs	r3, #0
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	e043      	b.n	800a20c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a196:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a19a:	d118      	bne.n	800a1ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	e013      	b.n	800a1e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	e008      	b.n	800a1e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1da:	461a      	mov	r2, r3
 800a1dc:	2300      	movs	r3, #0
 800a1de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fe:	461a      	mov	r2, r3
 800a200:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3301      	adds	r3, #1
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a210:	461a      	mov	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	4293      	cmp	r3, r2
 800a216:	d3b5      	bcc.n	800a184 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a218:	2300      	movs	r3, #0
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	e043      	b.n	800a2a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a234:	d118      	bne.n	800a268 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a248:	461a      	mov	r2, r3
 800a24a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	e013      	b.n	800a27a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25e:	461a      	mov	r2, r3
 800a260:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	e008      	b.n	800a27a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a274:	461a      	mov	r2, r3
 800a276:	2300      	movs	r3, #0
 800a278:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a286:	461a      	mov	r2, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	461a      	mov	r2, r3
 800a29a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a29e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d3b5      	bcc.n	800a21e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a2d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d105      	bne.n	800a2e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	f043 0210 	orr.w	r2, r3, #16
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699a      	ldr	r2, [r3, #24]
 800a2ec:	4b10      	ldr	r3, [pc, #64]	@ (800a330 <USB_DevInit+0x2c4>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	f043 0208 	orr.w	r2, r3, #8
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a308:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d107      	bne.n	800a320 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a318:	f043 0304 	orr.w	r3, r3, #4
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a320:	7dfb      	ldrb	r3, [r7, #23]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a32c:	b004      	add	sp, #16
 800a32e:	4770      	bx	lr
 800a330:	803c3800 	.word	0x803c3800

0800a334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3301      	adds	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a34e:	d901      	bls.n	800a354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e01b      	b.n	800a38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	daf2      	bge.n	800a342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	019b      	lsls	r3, r3, #6
 800a364:	f043 0220 	orr.w	r2, r3, #32
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3301      	adds	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a378:	d901      	bls.n	800a37e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e006      	b.n	800a38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b20      	cmp	r3, #32
 800a388:	d0f0      	beq.n	800a36c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3b0:	d901      	bls.n	800a3b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e018      	b.n	800a3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	daf2      	bge.n	800a3a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2210      	movs	r2, #16
 800a3c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3d4:	d901      	bls.n	800a3da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e006      	b.n	800a3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d0f0      	beq.n	800a3c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a414:	4313      	orrs	r3, r2
 800a416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a426:	b480      	push	{r7}
 800a428:	b087      	sub	sp, #28
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f003 0306 	and.w	r3, r3, #6
 800a43e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a446:	2300      	movs	r3, #0
 800a448:	75fb      	strb	r3, [r7, #23]
 800a44a:	e00a      	b.n	800a462 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d002      	beq.n	800a458 <USB_GetDevSpeed+0x32>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b06      	cmp	r3, #6
 800a456:	d102      	bne.n	800a45e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a458:	2302      	movs	r3, #2
 800a45a:	75fb      	strb	r3, [r7, #23]
 800a45c:	e001      	b.n	800a462 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a45e:	230f      	movs	r3, #15
 800a460:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	785b      	ldrb	r3, [r3, #1]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d13a      	bne.n	800a502 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	2101      	movs	r1, #1
 800a49e:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	68f9      	ldr	r1, [r7, #12]
 800a4a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d155      	bne.n	800a570 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	791b      	ldrb	r3, [r3, #4]
 800a4de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	059b      	lsls	r3, r3, #22
 800a4e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	e036      	b.n	800a570 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a508:	69da      	ldr	r2, [r3, #28]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f003 030f 	and.w	r3, r3, #15
 800a512:	2101      	movs	r1, #1
 800a514:	fa01 f303 	lsl.w	r3, r1, r3
 800a518:	041b      	lsls	r3, r3, #16
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a520:	4313      	orrs	r3, r2
 800a522:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d11a      	bne.n	800a570 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	791b      	ldrb	r3, [r3, #4]
 800a554:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a556:	430b      	orrs	r3, r1
 800a558:	4313      	orrs	r3, r2
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	0151      	lsls	r1, r2, #5
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	440a      	add	r2, r1
 800a562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a56e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d161      	bne.n	800a660 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5b2:	d11f      	bne.n	800a5f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	0151      	lsls	r1, r2, #5
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	440a      	add	r2, r1
 800a5ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	2101      	movs	r1, #1
 800a606:	fa01 f303 	lsl.w	r3, r1, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	43db      	mvns	r3, r3
 800a60e:	68f9      	ldr	r1, [r7, #12]
 800a610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a614:	4013      	ands	r3, r2
 800a616:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a61e:	69da      	ldr	r2, [r3, #28]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	2101      	movs	r1, #1
 800a62a:	fa01 f303 	lsl.w	r3, r1, r3
 800a62e:	b29b      	uxth	r3, r3
 800a630:	43db      	mvns	r3, r3
 800a632:	68f9      	ldr	r1, [r7, #12]
 800a634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a638:	4013      	ands	r3, r2
 800a63a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	0159      	lsls	r1, r3, #5
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	440b      	add	r3, r1
 800a652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a656:	4619      	mov	r1, r3
 800a658:	4b35      	ldr	r3, [pc, #212]	@ (800a730 <USB_DeactivateEndpoint+0x1b0>)
 800a65a:	4013      	ands	r3, r2
 800a65c:	600b      	str	r3, [r1, #0]
 800a65e:	e060      	b.n	800a722 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a676:	d11f      	bne.n	800a6b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a692:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a696:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	0151      	lsls	r1, r2, #5
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	440a      	add	r2, r1
 800a6ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ce:	041b      	lsls	r3, r3, #16
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	68f9      	ldr	r1, [r7, #12]
 800a6d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6d8:	4013      	ands	r3, r2
 800a6da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e2:	69da      	ldr	r2, [r3, #28]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 030f 	and.w	r3, r3, #15
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	43db      	mvns	r3, r3
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	0159      	lsls	r1, r3, #5
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	440b      	add	r3, r1
 800a716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71a:	4619      	mov	r1, r3
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <USB_DeactivateEndpoint+0x1b4>)
 800a71e:	4013      	ands	r3, r2
 800a720:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	ec337800 	.word	0xec337800
 800a734:	eff37800 	.word	0xeff37800

0800a738 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08a      	sub	sp, #40	@ 0x28
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	2b01      	cmp	r3, #1
 800a756:	f040 817f 	bne.w	800aa58 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d132      	bne.n	800a7c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	440a      	add	r2, r1
 800a778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a77c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a780:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	0151      	lsls	r1, r2, #5
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	440a      	add	r2, r1
 800a79c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	69fa      	ldr	r2, [r7, #28]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7c0:	0cdb      	lsrs	r3, r3, #19
 800a7c2:	04db      	lsls	r3, r3, #19
 800a7c4:	6113      	str	r3, [r2, #16]
 800a7c6:	e097      	b.n	800a8f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e2:	0cdb      	lsrs	r3, r3, #19
 800a7e4:	04db      	lsls	r3, r3, #19
 800a7e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	0151      	lsls	r1, r2, #5
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a802:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a806:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a80a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d11a      	bne.n	800a848 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	691a      	ldr	r2, [r3, #16]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d903      	bls.n	800a826 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a840:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a844:	6113      	str	r3, [r2, #16]
 800a846:	e044      	b.n	800a8d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	691a      	ldr	r2, [r3, #16]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	4413      	add	r3, r2
 800a852:	1e5a      	subs	r2, r3, #1
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a86a:	691a      	ldr	r2, [r3, #16]
 800a86c:	8afb      	ldrh	r3, [r7, #22]
 800a86e:	04d9      	lsls	r1, r3, #19
 800a870:	4ba4      	ldr	r3, [pc, #656]	@ (800ab04 <USB_EPStartXfer+0x3cc>)
 800a872:	400b      	ands	r3, r1
 800a874:	69b9      	ldr	r1, [r7, #24]
 800a876:	0148      	lsls	r0, r1, #5
 800a878:	69f9      	ldr	r1, [r7, #28]
 800a87a:	4401      	add	r1, r0
 800a87c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a880:	4313      	orrs	r3, r2
 800a882:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	791b      	ldrb	r3, [r3, #4]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d122      	bne.n	800a8d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a8aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b8:	691a      	ldr	r2, [r3, #16]
 800a8ba:	8afb      	ldrh	r3, [r7, #22]
 800a8bc:	075b      	lsls	r3, r3, #29
 800a8be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a8c2:	69b9      	ldr	r1, [r7, #24]
 800a8c4:	0148      	lsls	r0, r1, #5
 800a8c6:	69f9      	ldr	r1, [r7, #28]
 800a8c8:	4401      	add	r1, r0
 800a8ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	0148      	lsls	r0, r1, #5
 800a8ec:	69f9      	ldr	r1, [r7, #28]
 800a8ee:	4401      	add	r1, r0
 800a8f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d14b      	bne.n	800a996 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a912:	461a      	mov	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	791b      	ldrb	r3, [r3, #4]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d128      	bne.n	800a974 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d110      	bne.n	800a954 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	0151      	lsls	r1, r2, #5
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	440a      	add	r2, r1
 800a948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a94c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e00f      	b.n	800a974 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	0151      	lsls	r1, r2, #5
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	440a      	add	r2, r1
 800a96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a96e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a972:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	0151      	lsls	r1, r2, #5
 800a986:	69fa      	ldr	r2, [r7, #28]
 800a988:	440a      	add	r2, r1
 800a98a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a98e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	e166      	b.n	800ac64 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	791b      	ldrb	r3, [r3, #4]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d015      	beq.n	800a9ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 814e 	beq.w	800ac64 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	2101      	movs	r1, #1
 800a9da:	fa01 f303 	lsl.w	r3, r1, r3
 800a9de:	69f9      	ldr	r1, [r7, #28]
 800a9e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a9e8:	e13c      	b.n	800ac64 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d110      	bne.n	800aa1c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e00f      	b.n	800aa3c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	69fa      	ldr	r2, [r7, #28]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	68d9      	ldr	r1, [r3, #12]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	b298      	uxth	r0, r3
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	4603      	mov	r3, r0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 f9b9 	bl	800adc8 <USB_WritePacket>
 800aa56:	e105      	b.n	800ac64 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	0151      	lsls	r1, r2, #5
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa72:	0cdb      	lsrs	r3, r3, #19
 800aa74:	04db      	lsls	r3, r3, #19
 800aa76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa9a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d132      	bne.n	800ab08 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	689a      	ldr	r2, [r3, #8]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aad0:	69b9      	ldr	r1, [r7, #24]
 800aad2:	0148      	lsls	r0, r1, #5
 800aad4:	69f9      	ldr	r1, [r7, #28]
 800aad6:	4401      	add	r1, r0
 800aad8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aadc:	4313      	orrs	r3, r2
 800aade:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	0151      	lsls	r1, r2, #5
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	440a      	add	r2, r1
 800aaf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aafa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aafe:	6113      	str	r3, [r2, #16]
 800ab00:	e062      	b.n	800abc8 <USB_EPStartXfer+0x490>
 800ab02:	bf00      	nop
 800ab04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d123      	bne.n	800ab58 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab1c:	691a      	ldr	r2, [r3, #16]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab26:	69b9      	ldr	r1, [r7, #24]
 800ab28:	0148      	lsls	r0, r1, #5
 800ab2a:	69f9      	ldr	r1, [r7, #28]
 800ab2c:	4401      	add	r1, r0
 800ab2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab32:	4313      	orrs	r3, r2
 800ab34:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab54:	6113      	str	r3, [r2, #16]
 800ab56:	e037      	b.n	800abc8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	4413      	add	r3, r2
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	8afa      	ldrh	r2, [r7, #22]
 800ab74:	fb03 f202 	mul.w	r2, r3, r2
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	691a      	ldr	r2, [r3, #16]
 800ab8a:	8afb      	ldrh	r3, [r7, #22]
 800ab8c:	04d9      	lsls	r1, r3, #19
 800ab8e:	4b38      	ldr	r3, [pc, #224]	@ (800ac70 <USB_EPStartXfer+0x538>)
 800ab90:	400b      	ands	r3, r1
 800ab92:	69b9      	ldr	r1, [r7, #24]
 800ab94:	0148      	lsls	r0, r1, #5
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	4401      	add	r1, r0
 800ab9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abae:	691a      	ldr	r2, [r3, #16]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abb8:	69b9      	ldr	r1, [r7, #24]
 800abba:	0148      	lsls	r0, r1, #5
 800abbc:	69f9      	ldr	r1, [r7, #28]
 800abbe:	4401      	add	r1, r0
 800abc0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800abc4:	4313      	orrs	r3, r2
 800abc6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d10d      	bne.n	800abea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	68d9      	ldr	r1, [r3, #12]
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abe6:	460a      	mov	r2, r1
 800abe8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	791b      	ldrb	r3, [r3, #4]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d128      	bne.n	800ac44 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d110      	bne.n	800ac24 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	e00f      	b.n	800ac44 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	0151      	lsls	r1, r2, #5
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	440a      	add	r2, r1
 800ac3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	0151      	lsls	r1, r2, #5
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	440a      	add	r2, r1
 800ac5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3720      	adds	r7, #32
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	1ff80000 	.word	0x1ff80000

0800ac74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d14a      	bne.n	800ad28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aca6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acaa:	f040 8086 	bne.w	800adba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	7812      	ldrb	r2, [r2, #0]
 800acc2:	0151      	lsls	r1, r2, #5
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	440a      	add	r2, r1
 800acc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800accc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800acd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	7812      	ldrb	r2, [r2, #0]
 800ace6:	0151      	lsls	r1, r2, #5
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	440a      	add	r2, r1
 800acec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3301      	adds	r3, #1
 800acfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d902      	bls.n	800ad0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	75fb      	strb	r3, [r7, #23]
          break;
 800ad0a:	e056      	b.n	800adba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad24:	d0e7      	beq.n	800acf6 <USB_EPStopXfer+0x82>
 800ad26:	e048      	b.n	800adba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	015a      	lsls	r2, r3, #5
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	4413      	add	r3, r2
 800ad32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad40:	d13b      	bne.n	800adba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	0151      	lsls	r1, r2, #5
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	440a      	add	r2, r1
 800ad5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	7812      	ldrb	r2, [r2, #0]
 800ad7a:	0151      	lsls	r1, r2, #5
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	440a      	add	r2, r1
 800ad80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d902      	bls.n	800ada0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ad9e:	e00c      	b.n	800adba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adb8:	d0e7      	beq.n	800ad8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800adba:	7dfb      	ldrb	r3, [r7, #23]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800adc8:	b480      	push	{r7}
 800adca:	b089      	sub	sp, #36	@ 0x24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4611      	mov	r1, r2
 800add4:	461a      	mov	r2, r3
 800add6:	460b      	mov	r3, r1
 800add8:	71fb      	strb	r3, [r7, #7]
 800adda:	4613      	mov	r3, r2
 800addc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ade6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800adea:	2b00      	cmp	r3, #0
 800adec:	d123      	bne.n	800ae36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800adee:	88bb      	ldrh	r3, [r7, #4]
 800adf0:	3303      	adds	r3, #3
 800adf2:	089b      	lsrs	r3, r3, #2
 800adf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800adf6:	2300      	movs	r3, #0
 800adf8:	61bb      	str	r3, [r7, #24]
 800adfa:	e018      	b.n	800ae2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	031a      	lsls	r2, r3, #12
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae08:	461a      	mov	r2, r3
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	3301      	adds	r3, #1
 800ae14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	3301      	adds	r3, #1
 800ae26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	61bb      	str	r3, [r7, #24]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d3e2      	bcc.n	800adfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3724      	adds	r7, #36	@ 0x24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b08b      	sub	sp, #44	@ 0x2c
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	089b      	lsrs	r3, r3, #2
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ae62:	88fb      	ldrh	r3, [r7, #6]
 800ae64:	f003 0303 	and.w	r3, r3, #3
 800ae68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	623b      	str	r3, [r7, #32]
 800ae6e:	e014      	b.n	800ae9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	3301      	adds	r3, #1
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	3301      	adds	r3, #1
 800ae86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae90:	3301      	adds	r3, #1
 800ae92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	3301      	adds	r3, #1
 800ae98:	623b      	str	r3, [r7, #32]
 800ae9a:	6a3a      	ldr	r2, [r7, #32]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d3e6      	bcc.n	800ae70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aea2:	8bfb      	ldrh	r3, [r7, #30]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d01e      	beq.n	800aee6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f107 0310 	add.w	r3, r7, #16
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	00db      	lsls	r3, r3, #3
 800aec4:	fa22 f303 	lsr.w	r3, r2, r3
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	701a      	strb	r2, [r3, #0]
      i++;
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	3301      	adds	r3, #1
 800aed2:	623b      	str	r3, [r7, #32]
      pDest++;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	3301      	adds	r3, #1
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aeda:	8bfb      	ldrh	r3, [r7, #30]
 800aedc:	3b01      	subs	r3, #1
 800aede:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aee0:	8bfb      	ldrh	r3, [r7, #30]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1ea      	bne.n	800aebc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	372c      	adds	r7, #44	@ 0x2c
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d12c      	bne.n	800af6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	015a      	lsls	r2, r3, #5
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4413      	add	r3, r2
 800af18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	db12      	blt.n	800af48 <USB_EPSetStall+0x54>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00f      	beq.n	800af48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	0151      	lsls	r1, r2, #5
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	440a      	add	r2, r1
 800af3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	0151      	lsls	r1, r2, #5
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	440a      	add	r2, r1
 800af5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	e02b      	b.n	800afc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	db12      	blt.n	800afa2 <USB_EPSetStall+0xae>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00f      	beq.n	800afa2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	0151      	lsls	r1, r2, #5
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	440a      	add	r2, r1
 800af98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800afa0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	0151      	lsls	r1, r2, #5
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	440a      	add	r2, r1
 800afb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d128      	bne.n	800b03e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	0151      	lsls	r1, r2, #5
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	440a      	add	r2, r1
 800b002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b00a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	791b      	ldrb	r3, [r3, #4]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d003      	beq.n	800b01c <USB_EPClearStall+0x4c>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d138      	bne.n	800b08e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	e027      	b.n	800b08e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	440a      	add	r2, r1
 800b054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b058:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b05c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	791b      	ldrb	r3, [r3, #4]
 800b062:	2b03      	cmp	r3, #3
 800b064:	d003      	beq.n	800b06e <USB_EPClearStall+0x9e>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	791b      	ldrb	r3, [r3, #4]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d10f      	bne.n	800b08e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	0151      	lsls	r1, r2, #5
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	440a      	add	r2, r1
 800b084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b08c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b0be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b0d0:	68f9      	ldr	r1, [r7, #12]
 800b0d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b102:	f023 0303 	bic.w	r3, r3, #3
 800b106:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b116:	f023 0302 	bic.w	r3, r3, #2
 800b11a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b158:	f043 0302 	orr.w	r3, r3, #2
 800b15c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4013      	ands	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b184:	68fb      	ldr	r3, [r7, #12]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	0c1b      	lsrs	r3, r3, #16
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	b29b      	uxth	r3, r3
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	460b      	mov	r3, r1
 800b204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	4013      	ands	r3, r2
 800b226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b228:	68bb      	ldr	r3, [r7, #8]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b236:	b480      	push	{r7}
 800b238:	b087      	sub	sp, #28
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b258:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	f003 030f 	and.w	r3, r3, #15
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	fa22 f303 	lsr.w	r3, r2, r3
 800b266:	01db      	lsls	r3, r3, #7
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4013      	ands	r3, r2
 800b282:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b284:	68bb      	ldr	r3, [r7, #8]
}
 800b286:	4618      	mov	r0, r3
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	f003 0301 	and.w	r3, r3, #1
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b2cc:	f023 0307 	bic.w	r3, r3, #7
 800b2d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	333c      	adds	r3, #60	@ 0x3c
 800b30a:	3304      	adds	r3, #4
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	4a26      	ldr	r2, [pc, #152]	@ (800b3ac <USB_EP0_OutStart+0xb8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d90a      	bls.n	800b32e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b328:	d101      	bne.n	800b32e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e037      	b.n	800b39e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b334:	461a      	mov	r2, r3
 800b336:	2300      	movs	r3, #0
 800b338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b34c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35c:	f043 0318 	orr.w	r3, r3, #24
 800b360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b370:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b374:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b376:	7afb      	ldrb	r3, [r7, #11]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d10f      	bne.n	800b39c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b382:	461a      	mov	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b396:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b39a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	4f54300a 	.word	0x4f54300a

0800b3b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3c8:	d901      	bls.n	800b3ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e01b      	b.n	800b406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	daf2      	bge.n	800b3bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	f043 0201 	orr.w	r2, r3, #1
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3f2:	d901      	bls.n	800b3f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e006      	b.n	800b406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	2b01      	cmp	r3, #1
 800b402:	d0f0      	beq.n	800b3e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
	...

0800b414 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b420:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b424:	f002 fc2e 	bl	800dc84 <USBD_static_malloc>
 800b428:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	@ 0xb0
 800b43a:	2100      	movs	r1, #0
 800b43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b440:	2302      	movs	r3, #2
 800b442:	e0d4      	b.n	800b5ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b444:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b448:	2100      	movs	r1, #0
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f003 fe42 	bl	800f0d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	32b0      	adds	r2, #176	@ 0xb0
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	32b0      	adds	r2, #176	@ 0xb0
 800b46a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7c1b      	ldrb	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d138      	bne.n	800b4ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b47c:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b484:	2202      	movs	r2, #2
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f002 fad9 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b48c:	4b5a      	ldr	r3, [pc, #360]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	3324      	adds	r3, #36	@ 0x24
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b4a6:	4b55      	ldr	r3, [pc, #340]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f002 fac4 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b4b6:	4b51      	ldr	r3, [pc, #324]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	f003 020f 	and.w	r2, r3, #15
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b4d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f003 020f 	and.w	r2, r3, #15
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	440b      	add	r3, r1
 800b4e6:	3326      	adds	r3, #38	@ 0x26
 800b4e8:	2210      	movs	r2, #16
 800b4ea:	801a      	strh	r2, [r3, #0]
 800b4ec:	e035      	b.n	800b55a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b4ee:	4b42      	ldr	r3, [pc, #264]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4f0:	7819      	ldrb	r1, [r3, #0]
 800b4f2:	2340      	movs	r3, #64	@ 0x40
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f002 faa1 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b4fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 020f 	and.w	r2, r3, #15
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	440b      	add	r3, r1
 800b510:	3324      	adds	r3, #36	@ 0x24
 800b512:	2201      	movs	r2, #1
 800b514:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b516:	4b39      	ldr	r3, [pc, #228]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b518:	7819      	ldrb	r1, [r3, #0]
 800b51a:	2340      	movs	r3, #64	@ 0x40
 800b51c:	2202      	movs	r2, #2
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f002 fa8d 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b524:	4b35      	ldr	r3, [pc, #212]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f003 020f 	and.w	r2, r3, #15
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b53c:	2201      	movs	r2, #1
 800b53e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b540:	4b2f      	ldr	r3, [pc, #188]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3326      	adds	r3, #38	@ 0x26
 800b556:	2210      	movs	r2, #16
 800b558:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b55a:	4b29      	ldr	r3, [pc, #164]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	2308      	movs	r3, #8
 800b560:	2203      	movs	r2, #3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f002 fa6b 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b568:	4b25      	ldr	r3, [pc, #148]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 020f 	and.w	r2, r3, #15
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3324      	adds	r3, #36	@ 0x24
 800b57e:	2201      	movs	r2, #1
 800b580:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33b0      	adds	r3, #176	@ 0xb0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e018      	b.n	800b5ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7c1b      	ldrb	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5c6:	7819      	ldrb	r1, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f002 fb22 	bl	800dc1c <USBD_LL_PrepareReceive>
 800b5d8:	e008      	b.n	800b5ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5da:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5dc:	7819      	ldrb	r1, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5e4:	2340      	movs	r3, #64	@ 0x40
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f002 fb18 	bl	800dc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000093 	.word	0x20000093
 800b5fc:	20000094 	.word	0x20000094
 800b600:	20000095 	.word	0x20000095

0800b604 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b610:	4b3a      	ldr	r3, [pc, #232]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f002 fa37 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b61c:	4b37      	ldr	r3, [pc, #220]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 020f 	and.w	r2, r3, #15
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	3324      	adds	r3, #36	@ 0x24
 800b632:	2200      	movs	r2, #0
 800b634:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b636:	4b32      	ldr	r3, [pc, #200]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f002 fa24 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b642:	4b2f      	ldr	r3, [pc, #188]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f003 020f 	and.w	r2, r3, #15
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b65a:	2200      	movs	r2, #0
 800b65c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b65e:	4b29      	ldr	r3, [pc, #164]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f002 fa10 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b66a:	4b26      	ldr	r3, [pc, #152]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f003 020f 	and.w	r2, r3, #15
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	3324      	adds	r3, #36	@ 0x24
 800b680:	2200      	movs	r2, #0
 800b682:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b684:	4b1f      	ldr	r3, [pc, #124]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 020f 	and.w	r2, r3, #15
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	440b      	add	r3, r1
 800b698:	3326      	adds	r3, #38	@ 0x26
 800b69a:	2200      	movs	r2, #0
 800b69c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	@ 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01f      	beq.n	800b6f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	33b0      	adds	r3, #176	@ 0xb0
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	32b0      	adds	r2, #176	@ 0xb0
 800b6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f002 fae4 	bl	800dca0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	@ 0xb0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000093 	.word	0x20000093
 800b700:	20000094 	.word	0x20000094
 800b704:	20000095 	.word	0x20000095

0800b708 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	32b0      	adds	r2, #176	@ 0xb0
 800b71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b720:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e0bf      	b.n	800b8b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b740:	2b00      	cmp	r3, #0
 800b742:	d050      	beq.n	800b7e6 <USBD_CDC_Setup+0xde>
 800b744:	2b20      	cmp	r3, #32
 800b746:	f040 80af 	bne.w	800b8a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	88db      	ldrh	r3, [r3, #6]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d03a      	beq.n	800b7c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	b25b      	sxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da1b      	bge.n	800b794 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	33b0      	adds	r3, #176	@ 0xb0
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b772:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	88d2      	ldrh	r2, [r2, #6]
 800b778:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	2b07      	cmp	r3, #7
 800b780:	bf28      	it	cs
 800b782:	2307      	movcs	r3, #7
 800b784:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	89fa      	ldrh	r2, [r7, #14]
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 fd53 	bl	800d238 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b792:	e090      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	785a      	ldrb	r2, [r3, #1]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88db      	ldrh	r3, [r3, #6]
 800b7a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b7a4:	d803      	bhi.n	800b7ae <USBD_CDC_Setup+0xa6>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	e000      	b.n	800b7b0 <USBD_CDC_Setup+0xa8>
 800b7ae:	2240      	movs	r2, #64	@ 0x40
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b7b6:	6939      	ldr	r1, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fd65 	bl	800d290 <USBD_CtlPrepareRx>
      break;
 800b7c6:	e076      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	33b0      	adds	r3, #176	@ 0xb0
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	7850      	ldrb	r0, [r2, #1]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	4798      	blx	r3
      break;
 800b7e4:	e067      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	2b0b      	cmp	r3, #11
 800b7ec:	d851      	bhi.n	800b892 <USBD_CDC_Setup+0x18a>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <USBD_CDC_Setup+0xec>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b8a1 	.word	0x0800b8a1
 800b7fc:	0800b893 	.word	0x0800b893
 800b800:	0800b893 	.word	0x0800b893
 800b804:	0800b893 	.word	0x0800b893
 800b808:	0800b893 	.word	0x0800b893
 800b80c:	0800b893 	.word	0x0800b893
 800b810:	0800b893 	.word	0x0800b893
 800b814:	0800b893 	.word	0x0800b893
 800b818:	0800b893 	.word	0x0800b893
 800b81c:	0800b84f 	.word	0x0800b84f
 800b820:	0800b879 	.word	0x0800b879
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d107      	bne.n	800b840 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b830:	f107 030a 	add.w	r3, r7, #10
 800b834:	2202      	movs	r2, #2
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fcfd 	bl	800d238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b83e:	e032      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fc7b 	bl	800d13e <USBD_CtlError>
            ret = USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	75fb      	strb	r3, [r7, #23]
          break;
 800b84c:	e02b      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b03      	cmp	r3, #3
 800b858:	d107      	bne.n	800b86a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b85a:	f107 030d 	add.w	r3, r7, #13
 800b85e:	2201      	movs	r2, #1
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fce8 	bl	800d238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b868:	e01d      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 fc66 	bl	800d13e <USBD_CtlError>
            ret = USBD_FAIL;
 800b872:	2303      	movs	r3, #3
 800b874:	75fb      	strb	r3, [r7, #23]
          break;
 800b876:	e016      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b03      	cmp	r3, #3
 800b882:	d00f      	beq.n	800b8a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 fc59 	bl	800d13e <USBD_CtlError>
            ret = USBD_FAIL;
 800b88c:	2303      	movs	r3, #3
 800b88e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b890:	e008      	b.n	800b8a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 fc52 	bl	800d13e <USBD_CtlError>
          ret = USBD_FAIL;
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
          break;
 800b89e:	e002      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
          break;
 800b8a0:	bf00      	nop
 800b8a2:	e008      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
          break;
 800b8a4:	bf00      	nop
      }
      break;
 800b8a6:	e006      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fc47 	bl	800d13e <USBD_CtlError>
      ret = USBD_FAIL;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32b0      	adds	r2, #176	@ 0xb0
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e065      	b.n	800b9b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	32b0      	adds	r2, #176	@ 0xb0
 800b8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3318      	adds	r3, #24
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02f      	beq.n	800b974 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	f003 020f 	and.w	r2, r3, #15
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3318      	adds	r3, #24
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	f003 010f 	and.w	r1, r3, #15
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	331c      	adds	r3, #28
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d112      	bne.n	800b974 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	f003 020f 	and.w	r2, r3, #15
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3318      	adds	r3, #24
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b966:	78f9      	ldrb	r1, [r7, #3]
 800b968:	2300      	movs	r3, #0
 800b96a:	2200      	movs	r2, #0
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f002 f934 	bl	800dbda <USBD_LL_Transmit>
 800b972:	e01f      	b.n	800b9b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	33b0      	adds	r3, #176	@ 0xb0
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d010      	beq.n	800b9b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	33b0      	adds	r3, #176	@ 0xb0
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32b0      	adds	r2, #176	@ 0xb0
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	32b0      	adds	r2, #176	@ 0xb0
 800b9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e01a      	b.n	800ba26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f002 f932 	bl	800dc5e <USBD_LL_GetRxDataSize>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	33b0      	adds	r3, #176	@ 0xb0
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba20:	4611      	mov	r1, r2
 800ba22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	@ 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e024      	b.n	800ba9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	33b0      	adds	r3, #176	@ 0xb0
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d019      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ba6a:	2bff      	cmp	r3, #255	@ 0xff
 800ba6c:	d014      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	33b0      	adds	r3, #176	@ 0xb0
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ba86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ba8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	22ff      	movs	r2, #255	@ 0xff
 800ba94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800baac:	2182      	movs	r1, #130	@ 0x82
 800baae:	4818      	ldr	r0, [pc, #96]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bab0:	f000 fd0f 	bl	800c4d2 <USBD_GetEpDesc>
 800bab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bab6:	2101      	movs	r1, #1
 800bab8:	4815      	ldr	r0, [pc, #84]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800baba:	f000 fd0a 	bl	800c4d2 <USBD_GetEpDesc>
 800babe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bac0:	2181      	movs	r1, #129	@ 0x81
 800bac2:	4813      	ldr	r0, [pc, #76]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bac4:	f000 fd05 	bl	800c4d2 <USBD_GetEpDesc>
 800bac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2210      	movs	r2, #16
 800bad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d006      	beq.n	800baea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2200      	movs	r2, #0
 800bae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bae4:	711a      	strb	r2, [r3, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baf8:	711a      	strb	r2, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2243      	movs	r2, #67	@ 0x43
 800bb02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb04:	4b02      	ldr	r3, [pc, #8]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000050 	.word	0x20000050

0800bb14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb1c:	2182      	movs	r1, #130	@ 0x82
 800bb1e:	4818      	ldr	r0, [pc, #96]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb20:	f000 fcd7 	bl	800c4d2 <USBD_GetEpDesc>
 800bb24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb26:	2101      	movs	r1, #1
 800bb28:	4815      	ldr	r0, [pc, #84]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb2a:	f000 fcd2 	bl	800c4d2 <USBD_GetEpDesc>
 800bb2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb30:	2181      	movs	r1, #129	@ 0x81
 800bb32:	4813      	ldr	r0, [pc, #76]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb34:	f000 fccd 	bl	800c4d2 <USBD_GetEpDesc>
 800bb38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2210      	movs	r2, #16
 800bb44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d006      	beq.n	800bb5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	711a      	strb	r2, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f042 0202 	orr.w	r2, r2, #2
 800bb58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	711a      	strb	r2, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f042 0202 	orr.w	r2, r2, #2
 800bb6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2243      	movs	r2, #67	@ 0x43
 800bb72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000050 	.word	0x20000050

0800bb84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb8c:	2182      	movs	r1, #130	@ 0x82
 800bb8e:	4818      	ldr	r0, [pc, #96]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb90:	f000 fc9f 	bl	800c4d2 <USBD_GetEpDesc>
 800bb94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb96:	2101      	movs	r1, #1
 800bb98:	4815      	ldr	r0, [pc, #84]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb9a:	f000 fc9a 	bl	800c4d2 <USBD_GetEpDesc>
 800bb9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bba0:	2181      	movs	r1, #129	@ 0x81
 800bba2:	4813      	ldr	r0, [pc, #76]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bba4:	f000 fc95 	bl	800c4d2 <USBD_GetEpDesc>
 800bba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d006      	beq.n	800bbca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbc4:	711a      	strb	r2, [r3, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbd8:	711a      	strb	r2, [r3, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2243      	movs	r2, #67	@ 0x43
 800bbe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000050 	.word	0x20000050

0800bbf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	220a      	movs	r2, #10
 800bc00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc02:	4b03      	ldr	r3, [pc, #12]	@ (800bc10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	2000000c 	.word	0x2000000c

0800bc14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e009      	b.n	800bc3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	33b0      	adds	r3, #176	@ 0xb0
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	32b0      	adds	r2, #176	@ 0xb0
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e008      	b.n	800bc80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	371c      	adds	r7, #28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	32b0      	adds	r2, #176	@ 0xb0
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e004      	b.n	800bcba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	@ 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	32b0      	adds	r2, #176	@ 0xb0
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e018      	b.n	800bd28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	7c1b      	ldrb	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10a      	bne.n	800bd14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <USBD_CDC_ReceivePacket+0x68>)
 800bd00:	7819      	ldrb	r1, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f001 ff85 	bl	800dc1c <USBD_LL_PrepareReceive>
 800bd12:	e008      	b.n	800bd26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd14:	4b06      	ldr	r3, [pc, #24]	@ (800bd30 <USBD_CDC_ReceivePacket+0x68>)
 800bd16:	7819      	ldrb	r1, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd1e:	2340      	movs	r3, #64	@ 0x40
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 ff7b 	bl	800dc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000094 	.word	0x20000094

0800bd34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e01f      	b.n	800bd8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	79fa      	ldrb	r2, [r7, #7]
 800bd7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f001 fdf5 	bl	800d970 <USBD_LL_Init>
 800bd86:	4603      	mov	r3, r0
 800bd88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e025      	b.n	800bdf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	32ae      	adds	r2, #174	@ 0xae
 800bdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00f      	beq.n	800bde8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	32ae      	adds	r2, #174	@ 0xae
 800bdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd8:	f107 020e 	add.w	r2, r7, #14
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	4602      	mov	r2, r0
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f001 fdfd 	bl	800da08 <USBD_LL_Start>
 800be0e:	4603      	mov	r3, r0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800be22:	4618      	mov	r0, r3
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be44:	2b00      	cmp	r3, #0
 800be46:	d009      	beq.n	800be5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	78fa      	ldrb	r2, [r7, #3]
 800be52:	4611      	mov	r1, r2
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	78fa      	ldrb	r2, [r7, #3]
 800be80:	4611      	mov	r1, r2
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	4798      	blx	r3
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f90c 	bl	800d0ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bec0:	461a      	mov	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d01a      	beq.n	800bf0c <USBD_LL_SetupStage+0x72>
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d822      	bhi.n	800bf20 <USBD_LL_SetupStage+0x86>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <USBD_LL_SetupStage+0x4a>
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d00a      	beq.n	800bef8 <USBD_LL_SetupStage+0x5e>
 800bee2:	e01d      	b.n	800bf20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fb63 	bl	800c5b8 <USBD_StdDevReq>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73fb      	strb	r3, [r7, #15]
      break;
 800bef6:	e020      	b.n	800bf3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fbcb 	bl	800c69c <USBD_StdItfReq>
 800bf06:	4603      	mov	r3, r0
 800bf08:	73fb      	strb	r3, [r7, #15]
      break;
 800bf0a:	e016      	b.n	800bf3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fc2d 	bl	800c774 <USBD_StdEPReq>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf1e:	e00c      	b.n	800bf3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f001 fdca 	bl	800dac8 <USBD_LL_StallEP>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73fb      	strb	r3, [r7, #15]
      break;
 800bf38:	bf00      	nop
  }

  return ret;
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bf56:	7afb      	ldrb	r3, [r7, #11]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d16e      	bne.n	800c03a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bf62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	f040 8098 	bne.w	800c0a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d913      	bls.n	800bfa4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	1ad2      	subs	r2, r2, r3
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	bf28      	it	cs
 800bf96:	4613      	movcs	r3, r2
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f001 f994 	bl	800d2ca <USBD_CtlContinueRx>
 800bfa2:	e07d      	b.n	800c0a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfaa:	f003 031f 	and.w	r3, r3, #31
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d014      	beq.n	800bfdc <USBD_LL_DataOutStage+0x98>
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d81d      	bhi.n	800bff2 <USBD_LL_DataOutStage+0xae>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <USBD_LL_DataOutStage+0x7c>
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d003      	beq.n	800bfc6 <USBD_LL_DataOutStage+0x82>
 800bfbe:	e018      	b.n	800bff2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	75bb      	strb	r3, [r7, #22]
            break;
 800bfc4:	e018      	b.n	800bff8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	4619      	mov	r1, r3
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 fa64 	bl	800c49e <USBD_CoreFindIF>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	75bb      	strb	r3, [r7, #22]
            break;
 800bfda:	e00d      	b.n	800bff8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 fa66 	bl	800c4b8 <USBD_CoreFindEP>
 800bfec:	4603      	mov	r3, r0
 800bfee:	75bb      	strb	r3, [r7, #22]
            break;
 800bff0:	e002      	b.n	800bff8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	75bb      	strb	r3, [r7, #22]
            break;
 800bff6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bff8:	7dbb      	ldrb	r3, [r7, #22]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d119      	bne.n	800c032 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b03      	cmp	r3, #3
 800c008:	d113      	bne.n	800c032 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c00a:	7dba      	ldrb	r2, [r7, #22]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	32ae      	adds	r2, #174	@ 0xae
 800c010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00b      	beq.n	800c032 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c01a:	7dba      	ldrb	r2, [r7, #22]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c022:	7dba      	ldrb	r2, [r7, #22]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	32ae      	adds	r2, #174	@ 0xae
 800c028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f001 f95a 	bl	800d2ec <USBD_CtlSendStatus>
 800c038:	e032      	b.n	800c0a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c040:	b2db      	uxtb	r3, r3
 800c042:	4619      	mov	r1, r3
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 fa37 	bl	800c4b8 <USBD_CoreFindEP>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c04e:	7dbb      	ldrb	r3, [r7, #22]
 800c050:	2bff      	cmp	r3, #255	@ 0xff
 800c052:	d025      	beq.n	800c0a0 <USBD_LL_DataOutStage+0x15c>
 800c054:	7dbb      	ldrb	r3, [r7, #22]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d122      	bne.n	800c0a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b03      	cmp	r3, #3
 800c064:	d117      	bne.n	800c096 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c066:	7dba      	ldrb	r2, [r7, #22]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	32ae      	adds	r2, #174	@ 0xae
 800c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00f      	beq.n	800c096 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c076:	7dba      	ldrb	r2, [r7, #22]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c07e:	7dba      	ldrb	r2, [r7, #22]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	32ae      	adds	r2, #174	@ 0xae
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	7afa      	ldrb	r2, [r7, #11]
 800c08c:	4611      	mov	r1, r2
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	4798      	blx	r3
 800c092:	4603      	mov	r3, r0
 800c094:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	e000      	b.n	800c0a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c0b8:	7afb      	ldrb	r3, [r7, #11]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d16f      	bne.n	800c19e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3314      	adds	r3, #20
 800c0c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d15a      	bne.n	800c184 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	689a      	ldr	r2, [r3, #8]
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d914      	bls.n	800c104 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	689a      	ldr	r2, [r3, #8]
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	1ad2      	subs	r2, r2, r3
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f001 f8bc 	bl	800d26e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f001 fd8d 	bl	800dc1c <USBD_LL_PrepareReceive>
 800c102:	e03f      	b.n	800c184 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d11c      	bne.n	800c14a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c118:	429a      	cmp	r2, r3
 800c11a:	d316      	bcc.n	800c14a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c126:	429a      	cmp	r2, r3
 800c128:	d20f      	bcs.n	800c14a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c12a:	2200      	movs	r2, #0
 800c12c:	2100      	movs	r1, #0
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f001 f89d 	bl	800d26e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c13c:	2300      	movs	r3, #0
 800c13e:	2200      	movs	r2, #0
 800c140:	2100      	movs	r1, #0
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f001 fd6a 	bl	800dc1c <USBD_LL_PrepareReceive>
 800c148:	e01c      	b.n	800c184 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b03      	cmp	r3, #3
 800c154:	d10f      	bne.n	800c176 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d009      	beq.n	800c176 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c176:	2180      	movs	r1, #128	@ 0x80
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f001 fca5 	bl	800dac8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f001 f8c7 	bl	800d312 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d03a      	beq.n	800c204 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f7ff fe42 	bl	800be18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c19c:	e032      	b.n	800c204 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c19e:	7afb      	ldrb	r3, [r7, #11]
 800c1a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f985 	bl	800c4b8 <USBD_CoreFindEP>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2bff      	cmp	r3, #255	@ 0xff
 800c1b6:	d025      	beq.n	800c204 <USBD_LL_DataInStage+0x15a>
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d122      	bne.n	800c204 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d11c      	bne.n	800c204 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c1ca:	7dfa      	ldrb	r2, [r7, #23]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	32ae      	adds	r2, #174	@ 0xae
 800c1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d014      	beq.n	800c204 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c1da:	7dfa      	ldrb	r2, [r7, #23]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c1e2:	7dfa      	ldrb	r2, [r7, #23]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	32ae      	adds	r2, #174	@ 0xae
 800c1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	7afa      	ldrb	r2, [r7, #11]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	4798      	blx	r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c1fa:	7dbb      	ldrb	r3, [r7, #22]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c200:	7dbb      	ldrb	r3, [r7, #22]
 800c202:	e000      	b.n	800c206 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c246:	2b00      	cmp	r3, #0
 800c248:	d014      	beq.n	800c274 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00e      	beq.n	800c274 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	6852      	ldr	r2, [r2, #4]
 800c262:	b2d2      	uxtb	r2, r2
 800c264:	4611      	mov	r1, r2
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	4798      	blx	r3
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c270:	2303      	movs	r3, #3
 800c272:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c274:	2340      	movs	r3, #64	@ 0x40
 800c276:	2200      	movs	r2, #0
 800c278:	2100      	movs	r1, #0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f001 fbdf 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2240      	movs	r2, #64	@ 0x40
 800c28c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c290:	2340      	movs	r3, #64	@ 0x40
 800c292:	2200      	movs	r2, #0
 800c294:	2180      	movs	r1, #128	@ 0x80
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fbd1 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2240      	movs	r2, #64	@ 0x40
 800c2a6:	621a      	str	r2, [r3, #32]

  return ret;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	78fa      	ldrb	r2, [r7, #3]
 800c2c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	d006      	beq.n	800c2f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	d106      	bne.n	800c32c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c324:	b2da      	uxtb	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	d110      	bne.n	800c370 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c35e:	69db      	ldr	r3, [r3, #28]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	460b      	mov	r3, r1
 800c384:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	32ae      	adds	r2, #174	@ 0xae
 800c390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c398:	2303      	movs	r3, #3
 800c39a:	e01c      	b.n	800c3d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d115      	bne.n	800c3d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	32ae      	adds	r2, #174	@ 0xae
 800c3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	32ae      	adds	r2, #174	@ 0xae
 800c3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	78fa      	ldrb	r2, [r7, #3]
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	32ae      	adds	r2, #174	@ 0xae
 800c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e01c      	b.n	800c43a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c406:	b2db      	uxtb	r3, r3
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d115      	bne.n	800c438 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	32ae      	adds	r2, #174	@ 0xae
 800c416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	32ae      	adds	r2, #174	@ 0xae
 800c42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c430:	78fa      	ldrb	r2, [r7, #3]
 800c432:	4611      	mov	r1, r2
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00e      	beq.n	800c494 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	6852      	ldr	r2, [r2, #4]
 800c482:	b2d2      	uxtb	r2, r2
 800c484:	4611      	mov	r1, r2
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	4798      	blx	r3
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c490:	2303      	movs	r3, #3
 800c492:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c494:	7bfb      	ldrb	r3, [r7, #15]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b083      	sub	sp, #12
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c4aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c4c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	7812      	ldrb	r2, [r2, #0]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d91f      	bls.n	800c538 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c4fe:	e013      	b.n	800c528 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c500:	f107 030a 	add.w	r3, r7, #10
 800c504:	4619      	mov	r1, r3
 800c506:	6978      	ldr	r0, [r7, #20]
 800c508:	f000 f81b 	bl	800c542 <USBD_GetNextDesc>
 800c50c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	2b05      	cmp	r3, #5
 800c514:	d108      	bne.n	800c528 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	789b      	ldrb	r3, [r3, #2]
 800c51e:	78fa      	ldrb	r2, [r7, #3]
 800c520:	429a      	cmp	r2, r3
 800c522:	d008      	beq.n	800c536 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c524:	2300      	movs	r3, #0
 800c526:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	885b      	ldrh	r3, [r3, #2]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	897b      	ldrh	r3, [r7, #10]
 800c530:	429a      	cmp	r2, r3
 800c532:	d8e5      	bhi.n	800c500 <USBD_GetEpDesc+0x2e>
 800c534:	e000      	b.n	800c538 <USBD_GetEpDesc+0x66>
          break;
 800c536:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c538:	693b      	ldr	r3, [r7, #16]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	7812      	ldrb	r2, [r2, #0]
 800c558:	4413      	add	r3, r2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	461a      	mov	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4413      	add	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b087      	sub	sp, #28
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	3301      	adds	r3, #1
 800c590:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c598:	8a3b      	ldrh	r3, [r7, #16]
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	b21a      	sxth	r2, r3
 800c59e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	b21b      	sxth	r3, r3
 800c5a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c5a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5ce:	2b40      	cmp	r3, #64	@ 0x40
 800c5d0:	d005      	beq.n	800c5de <USBD_StdDevReq+0x26>
 800c5d2:	2b40      	cmp	r3, #64	@ 0x40
 800c5d4:	d857      	bhi.n	800c686 <USBD_StdDevReq+0xce>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00f      	beq.n	800c5fa <USBD_StdDevReq+0x42>
 800c5da:	2b20      	cmp	r3, #32
 800c5dc:	d153      	bne.n	800c686 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	32ae      	adds	r2, #174	@ 0xae
 800c5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	4798      	blx	r3
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f8:	e04a      	b.n	800c690 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	2b09      	cmp	r3, #9
 800c600:	d83b      	bhi.n	800c67a <USBD_StdDevReq+0xc2>
 800c602:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <USBD_StdDevReq+0x50>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c671 	.word	0x0800c671
 800c610:	0800c67b 	.word	0x0800c67b
 800c614:	0800c667 	.word	0x0800c667
 800c618:	0800c67b 	.word	0x0800c67b
 800c61c:	0800c63b 	.word	0x0800c63b
 800c620:	0800c631 	.word	0x0800c631
 800c624:	0800c67b 	.word	0x0800c67b
 800c628:	0800c653 	.word	0x0800c653
 800c62c:	0800c645 	.word	0x0800c645
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa3c 	bl	800cab0 <USBD_GetDescriptor>
          break;
 800c638:	e024      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fba1 	bl	800cd84 <USBD_SetAddress>
          break;
 800c642:	e01f      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c644:	6839      	ldr	r1, [r7, #0]
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fbe0 	bl	800ce0c <USBD_SetConfig>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
          break;
 800c650:	e018      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fc83 	bl	800cf60 <USBD_GetConfig>
          break;
 800c65a:	e013      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fcb4 	bl	800cfcc <USBD_GetStatus>
          break;
 800c664:	e00e      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fce3 	bl	800d034 <USBD_SetFeature>
          break;
 800c66e:	e009      	b.n	800c684 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fd07 	bl	800d086 <USBD_ClrFeature>
          break;
 800c678:	e004      	b.n	800c684 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fd5e 	bl	800d13e <USBD_CtlError>
          break;
 800c682:	bf00      	nop
      }
      break;
 800c684:	e004      	b.n	800c690 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fd58 	bl	800d13e <USBD_CtlError>
      break;
 800c68e:	bf00      	nop
  }

  return ret;
 800c690:	7bfb      	ldrb	r3, [r7, #15]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop

0800c69c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c6b2:	2b40      	cmp	r3, #64	@ 0x40
 800c6b4:	d005      	beq.n	800c6c2 <USBD_StdItfReq+0x26>
 800c6b6:	2b40      	cmp	r3, #64	@ 0x40
 800c6b8:	d852      	bhi.n	800c760 <USBD_StdItfReq+0xc4>
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d001      	beq.n	800c6c2 <USBD_StdItfReq+0x26>
 800c6be:	2b20      	cmp	r3, #32
 800c6c0:	d14e      	bne.n	800c760 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d840      	bhi.n	800c752 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	889b      	ldrh	r3, [r3, #4]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d836      	bhi.n	800c748 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	889b      	ldrh	r3, [r3, #4]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff fedb 	bl	800c49e <USBD_CoreFindIF>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	2bff      	cmp	r3, #255	@ 0xff
 800c6f0:	d01d      	beq.n	800c72e <USBD_StdItfReq+0x92>
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d11a      	bne.n	800c72e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c6f8:	7bba      	ldrb	r2, [r7, #14]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	32ae      	adds	r2, #174	@ 0xae
 800c6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00f      	beq.n	800c728 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c708:	7bba      	ldrb	r2, [r7, #14]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c710:	7bba      	ldrb	r2, [r7, #14]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32ae      	adds	r2, #174	@ 0xae
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	4798      	blx	r3
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c726:	e004      	b.n	800c732 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c728:	2303      	movs	r3, #3
 800c72a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c72c:	e001      	b.n	800c732 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c72e:	2303      	movs	r3, #3
 800c730:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	88db      	ldrh	r3, [r3, #6]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d110      	bne.n	800c75c <USBD_StdItfReq+0xc0>
 800c73a:	7bfb      	ldrb	r3, [r7, #15]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10d      	bne.n	800c75c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fdd3 	bl	800d2ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c746:	e009      	b.n	800c75c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fcf7 	bl	800d13e <USBD_CtlError>
          break;
 800c750:	e004      	b.n	800c75c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fcf2 	bl	800d13e <USBD_CtlError>
          break;
 800c75a:	e000      	b.n	800c75e <USBD_StdItfReq+0xc2>
          break;
 800c75c:	bf00      	nop
      }
      break;
 800c75e:	e004      	b.n	800c76a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fceb 	bl	800d13e <USBD_CtlError>
      break;
 800c768:	bf00      	nop
  }

  return ret;
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	889b      	ldrh	r3, [r3, #4]
 800c786:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c790:	2b40      	cmp	r3, #64	@ 0x40
 800c792:	d007      	beq.n	800c7a4 <USBD_StdEPReq+0x30>
 800c794:	2b40      	cmp	r3, #64	@ 0x40
 800c796:	f200 817f 	bhi.w	800ca98 <USBD_StdEPReq+0x324>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d02a      	beq.n	800c7f4 <USBD_StdEPReq+0x80>
 800c79e:	2b20      	cmp	r3, #32
 800c7a0:	f040 817a 	bne.w	800ca98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff fe85 	bl	800c4b8 <USBD_CoreFindEP>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7b2:	7b7b      	ldrb	r3, [r7, #13]
 800c7b4:	2bff      	cmp	r3, #255	@ 0xff
 800c7b6:	f000 8174 	beq.w	800caa2 <USBD_StdEPReq+0x32e>
 800c7ba:	7b7b      	ldrb	r3, [r7, #13]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f040 8170 	bne.w	800caa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c7c2:	7b7a      	ldrb	r2, [r7, #13]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c7ca:	7b7a      	ldrb	r2, [r7, #13]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	32ae      	adds	r2, #174	@ 0xae
 800c7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8163 	beq.w	800caa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c7dc:	7b7a      	ldrb	r2, [r7, #13]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	32ae      	adds	r2, #174	@ 0xae
 800c7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c7f2:	e156      	b.n	800caa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d008      	beq.n	800c80e <USBD_StdEPReq+0x9a>
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	f300 8145 	bgt.w	800ca8c <USBD_StdEPReq+0x318>
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 809b 	beq.w	800c93e <USBD_StdEPReq+0x1ca>
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d03c      	beq.n	800c886 <USBD_StdEPReq+0x112>
 800c80c:	e13e      	b.n	800ca8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d002      	beq.n	800c820 <USBD_StdEPReq+0xac>
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d016      	beq.n	800c84c <USBD_StdEPReq+0xd8>
 800c81e:	e02c      	b.n	800c87a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00d      	beq.n	800c842 <USBD_StdEPReq+0xce>
 800c826:	7bbb      	ldrb	r3, [r7, #14]
 800c828:	2b80      	cmp	r3, #128	@ 0x80
 800c82a:	d00a      	beq.n	800c842 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f949 	bl	800dac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c836:	2180      	movs	r1, #128	@ 0x80
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 f945 	bl	800dac8 <USBD_LL_StallEP>
 800c83e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c840:	e020      	b.n	800c884 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fc7a 	bl	800d13e <USBD_CtlError>
              break;
 800c84a:	e01b      	b.n	800c884 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	885b      	ldrh	r3, [r3, #2]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10e      	bne.n	800c872 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00b      	beq.n	800c872 <USBD_StdEPReq+0xfe>
 800c85a:	7bbb      	ldrb	r3, [r7, #14]
 800c85c:	2b80      	cmp	r3, #128	@ 0x80
 800c85e:	d008      	beq.n	800c872 <USBD_StdEPReq+0xfe>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	88db      	ldrh	r3, [r3, #6]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d104      	bne.n	800c872 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 f92b 	bl	800dac8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fd3a 	bl	800d2ec <USBD_CtlSendStatus>

              break;
 800c878:	e004      	b.n	800c884 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fc5e 	bl	800d13e <USBD_CtlError>
              break;
 800c882:	bf00      	nop
          }
          break;
 800c884:	e107      	b.n	800ca96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d002      	beq.n	800c898 <USBD_StdEPReq+0x124>
 800c892:	2b03      	cmp	r3, #3
 800c894:	d016      	beq.n	800c8c4 <USBD_StdEPReq+0x150>
 800c896:	e04b      	b.n	800c930 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c898:	7bbb      	ldrb	r3, [r7, #14]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00d      	beq.n	800c8ba <USBD_StdEPReq+0x146>
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	2b80      	cmp	r3, #128	@ 0x80
 800c8a2:	d00a      	beq.n	800c8ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f001 f90d 	bl	800dac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ae:	2180      	movs	r1, #128	@ 0x80
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f001 f909 	bl	800dac8 <USBD_LL_StallEP>
 800c8b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8b8:	e040      	b.n	800c93c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fc3e 	bl	800d13e <USBD_CtlError>
              break;
 800c8c2:	e03b      	b.n	800c93c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	885b      	ldrh	r3, [r3, #2]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d136      	bne.n	800c93a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c8d6:	7bbb      	ldrb	r3, [r7, #14]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 f913 	bl	800db06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fd03 	bl	800d2ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c8e6:	7bbb      	ldrb	r3, [r7, #14]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff fde4 	bl	800c4b8 <USBD_CoreFindEP>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8f4:	7b7b      	ldrb	r3, [r7, #13]
 800c8f6:	2bff      	cmp	r3, #255	@ 0xff
 800c8f8:	d01f      	beq.n	800c93a <USBD_StdEPReq+0x1c6>
 800c8fa:	7b7b      	ldrb	r3, [r7, #13]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d11c      	bne.n	800c93a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c900:	7b7a      	ldrb	r2, [r7, #13]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c908:	7b7a      	ldrb	r2, [r7, #13]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	32ae      	adds	r2, #174	@ 0xae
 800c90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d010      	beq.n	800c93a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c918:	7b7a      	ldrb	r2, [r7, #13]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	32ae      	adds	r2, #174	@ 0xae
 800c91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
 800c92a:	4603      	mov	r3, r0
 800c92c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c92e:	e004      	b.n	800c93a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fc03 	bl	800d13e <USBD_CtlError>
              break;
 800c938:	e000      	b.n	800c93c <USBD_StdEPReq+0x1c8>
              break;
 800c93a:	bf00      	nop
          }
          break;
 800c93c:	e0ab      	b.n	800ca96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d002      	beq.n	800c950 <USBD_StdEPReq+0x1dc>
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d032      	beq.n	800c9b4 <USBD_StdEPReq+0x240>
 800c94e:	e097      	b.n	800ca80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <USBD_StdEPReq+0x1f2>
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b80      	cmp	r3, #128	@ 0x80
 800c95a:	d004      	beq.n	800c966 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fbed 	bl	800d13e <USBD_CtlError>
                break;
 800c964:	e091      	b.n	800ca8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da0b      	bge.n	800c986 <USBD_StdEPReq+0x212>
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c974:	4613      	mov	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	3310      	adds	r3, #16
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	4413      	add	r3, r2
 800c982:	3304      	adds	r3, #4
 800c984:	e00b      	b.n	800c99e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c986:	7bbb      	ldrb	r3, [r7, #14]
 800c988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	4413      	add	r3, r2
 800c99c:	3304      	adds	r3, #4
 800c99e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2202      	movs	r2, #2
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fc43 	bl	800d238 <USBD_CtlSendData>
              break;
 800c9b2:	e06a      	b.n	800ca8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c9b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da11      	bge.n	800c9e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	f003 020f 	and.w	r2, r3, #15
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	440b      	add	r3, r1
 800c9ce:	3324      	adds	r3, #36	@ 0x24
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d117      	bne.n	800ca06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fbb0 	bl	800d13e <USBD_CtlError>
                  break;
 800c9de:	e054      	b.n	800ca8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	f003 020f 	and.w	r2, r3, #15
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	440b      	add	r3, r1
 800c9f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fb9d 	bl	800d13e <USBD_CtlError>
                  break;
 800ca04:	e041      	b.n	800ca8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	da0b      	bge.n	800ca26 <USBD_StdEPReq+0x2b2>
 800ca0e:	7bbb      	ldrb	r3, [r7, #14]
 800ca10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca14:	4613      	mov	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	4413      	add	r3, r2
 800ca22:	3304      	adds	r3, #4
 800ca24:	e00b      	b.n	800ca3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <USBD_StdEPReq+0x2d8>
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	2b80      	cmp	r3, #128	@ 0x80
 800ca4a:	d103      	bne.n	800ca54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	e00e      	b.n	800ca72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	4619      	mov	r1, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 f873 	bl	800db44 <USBD_LL_IsStallEP>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2201      	movs	r2, #1
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2202      	movs	r2, #2
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fbdd 	bl	800d238 <USBD_CtlSendData>
              break;
 800ca7e:	e004      	b.n	800ca8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fb5b 	bl	800d13e <USBD_CtlError>
              break;
 800ca88:	bf00      	nop
          }
          break;
 800ca8a:	e004      	b.n	800ca96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fb55 	bl	800d13e <USBD_CtlError>
          break;
 800ca94:	bf00      	nop
      }
      break;
 800ca96:	e005      	b.n	800caa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fb4f 	bl	800d13e <USBD_CtlError>
      break;
 800caa0:	e000      	b.n	800caa4 <USBD_StdEPReq+0x330>
      break;
 800caa2:	bf00      	nop
  }

  return ret;
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cac2:	2300      	movs	r3, #0
 800cac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	885b      	ldrh	r3, [r3, #2]
 800caca:	0a1b      	lsrs	r3, r3, #8
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	2b06      	cmp	r3, #6
 800cad2:	f200 8128 	bhi.w	800cd26 <USBD_GetDescriptor+0x276>
 800cad6:	a201      	add	r2, pc, #4	@ (adr r2, 800cadc <USBD_GetDescriptor+0x2c>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb11 	.word	0x0800cb11
 800cae4:	0800cb51 	.word	0x0800cb51
 800cae8:	0800cd27 	.word	0x0800cd27
 800caec:	0800cd27 	.word	0x0800cd27
 800caf0:	0800ccc7 	.word	0x0800ccc7
 800caf4:	0800ccf3 	.word	0x0800ccf3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	7c12      	ldrb	r2, [r2, #16]
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
 800cb0c:	60f8      	str	r0, [r7, #12]
      break;
 800cb0e:	e112      	b.n	800cd36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7c1b      	ldrb	r3, [r3, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10d      	bne.n	800cb34 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb20:	f107 0208 	add.w	r2, r7, #8
 800cb24:	4610      	mov	r0, r2
 800cb26:	4798      	blx	r3
 800cb28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	2202      	movs	r2, #2
 800cb30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb32:	e100      	b.n	800cd36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3c:	f107 0208 	add.w	r2, r7, #8
 800cb40:	4610      	mov	r0, r2
 800cb42:	4798      	blx	r3
 800cb44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	701a      	strb	r2, [r3, #0]
      break;
 800cb4e:	e0f2      	b.n	800cd36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	885b      	ldrh	r3, [r3, #2]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b05      	cmp	r3, #5
 800cb58:	f200 80ac 	bhi.w	800ccb4 <USBD_GetDescriptor+0x204>
 800cb5c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb64 <USBD_GetDescriptor+0xb4>)
 800cb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb62:	bf00      	nop
 800cb64:	0800cb7d 	.word	0x0800cb7d
 800cb68:	0800cbb1 	.word	0x0800cbb1
 800cb6c:	0800cbe5 	.word	0x0800cbe5
 800cb70:	0800cc19 	.word	0x0800cc19
 800cb74:	0800cc4d 	.word	0x0800cc4d
 800cb78:	0800cc81 	.word	0x0800cc81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	7c12      	ldrb	r2, [r2, #16]
 800cb94:	f107 0108 	add.w	r1, r7, #8
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4798      	blx	r3
 800cb9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb9e:	e091      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 facb 	bl	800d13e <USBD_CtlError>
            err++;
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	72fb      	strb	r3, [r7, #11]
          break;
 800cbae:	e089      	b.n	800ccc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	7c12      	ldrb	r2, [r2, #16]
 800cbc8:	f107 0108 	add.w	r1, r7, #8
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4798      	blx	r3
 800cbd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbd2:	e077      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fab1 	bl	800d13e <USBD_CtlError>
            err++;
 800cbdc:	7afb      	ldrb	r3, [r7, #11]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbe2:	e06f      	b.n	800ccc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00b      	beq.n	800cc08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	7c12      	ldrb	r2, [r2, #16]
 800cbfc:	f107 0108 	add.w	r1, r7, #8
 800cc00:	4610      	mov	r0, r2
 800cc02:	4798      	blx	r3
 800cc04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc06:	e05d      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fa97 	bl	800d13e <USBD_CtlError>
            err++;
 800cc10:	7afb      	ldrb	r3, [r7, #11]
 800cc12:	3301      	adds	r3, #1
 800cc14:	72fb      	strb	r3, [r7, #11]
          break;
 800cc16:	e055      	b.n	800ccc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	7c12      	ldrb	r2, [r2, #16]
 800cc30:	f107 0108 	add.w	r1, r7, #8
 800cc34:	4610      	mov	r0, r2
 800cc36:	4798      	blx	r3
 800cc38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc3a:	e043      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa7d 	bl	800d13e <USBD_CtlError>
            err++;
 800cc44:	7afb      	ldrb	r3, [r7, #11]
 800cc46:	3301      	adds	r3, #1
 800cc48:	72fb      	strb	r3, [r7, #11]
          break;
 800cc4a:	e03b      	b.n	800ccc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	7c12      	ldrb	r2, [r2, #16]
 800cc64:	f107 0108 	add.w	r1, r7, #8
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
 800cc6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc6e:	e029      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc70:	6839      	ldr	r1, [r7, #0]
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fa63 	bl	800d13e <USBD_CtlError>
            err++;
 800cc78:	7afb      	ldrb	r3, [r7, #11]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc7e:	e021      	b.n	800ccc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00b      	beq.n	800cca4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	7c12      	ldrb	r2, [r2, #16]
 800cc98:	f107 0108 	add.w	r1, r7, #8
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	4798      	blx	r3
 800cca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cca2:	e00f      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fa49 	bl	800d13e <USBD_CtlError>
            err++;
 800ccac:	7afb      	ldrb	r3, [r7, #11]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ccb2:	e007      	b.n	800ccc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fa41 	bl	800d13e <USBD_CtlError>
          err++;
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ccc2:	bf00      	nop
      }
      break;
 800ccc4:	e037      	b.n	800cd36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7c1b      	ldrb	r3, [r3, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d109      	bne.n	800cce2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd6:	f107 0208 	add.w	r2, r7, #8
 800ccda:	4610      	mov	r0, r2
 800ccdc:	4798      	blx	r3
 800ccde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cce0:	e029      	b.n	800cd36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fa2a 	bl	800d13e <USBD_CtlError>
        err++;
 800ccea:	7afb      	ldrb	r3, [r7, #11]
 800ccec:	3301      	adds	r3, #1
 800ccee:	72fb      	strb	r3, [r7, #11]
      break;
 800ccf0:	e021      	b.n	800cd36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	7c1b      	ldrb	r3, [r3, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10d      	bne.n	800cd16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd02:	f107 0208 	add.w	r2, r7, #8
 800cd06:	4610      	mov	r0, r2
 800cd08:	4798      	blx	r3
 800cd0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	2207      	movs	r2, #7
 800cd12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd14:	e00f      	b.n	800cd36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fa10 	bl	800d13e <USBD_CtlError>
        err++;
 800cd1e:	7afb      	ldrb	r3, [r7, #11]
 800cd20:	3301      	adds	r3, #1
 800cd22:	72fb      	strb	r3, [r7, #11]
      break;
 800cd24:	e007      	b.n	800cd36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd26:	6839      	ldr	r1, [r7, #0]
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fa08 	bl	800d13e <USBD_CtlError>
      err++;
 800cd2e:	7afb      	ldrb	r3, [r7, #11]
 800cd30:	3301      	adds	r3, #1
 800cd32:	72fb      	strb	r3, [r7, #11]
      break;
 800cd34:	bf00      	nop
  }

  if (err != 0U)
 800cd36:	7afb      	ldrb	r3, [r7, #11]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d11e      	bne.n	800cd7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	88db      	ldrh	r3, [r3, #6]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d016      	beq.n	800cd72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cd44:	893b      	ldrh	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00e      	beq.n	800cd68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	88da      	ldrh	r2, [r3, #6]
 800cd4e:	893b      	ldrh	r3, [r7, #8]
 800cd50:	4293      	cmp	r3, r2
 800cd52:	bf28      	it	cs
 800cd54:	4613      	movcs	r3, r2
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd5a:	893b      	ldrh	r3, [r7, #8]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fa69 	bl	800d238 <USBD_CtlSendData>
 800cd66:	e009      	b.n	800cd7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f9e7 	bl	800d13e <USBD_CtlError>
 800cd70:	e004      	b.n	800cd7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 faba 	bl	800d2ec <USBD_CtlSendStatus>
 800cd78:	e000      	b.n	800cd7c <USBD_GetDescriptor+0x2cc>
    return;
 800cd7a:	bf00      	nop
  }
}
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop

0800cd84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	889b      	ldrh	r3, [r3, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d131      	bne.n	800cdfa <USBD_SetAddress+0x76>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	88db      	ldrh	r3, [r3, #6]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d12d      	bne.n	800cdfa <USBD_SetAddress+0x76>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	885b      	ldrh	r3, [r3, #2]
 800cda2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cda4:	d829      	bhi.n	800cdfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	885b      	ldrh	r3, [r3, #2]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d104      	bne.n	800cdc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f9bc 	bl	800d13e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc6:	e01d      	b.n	800ce04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7bfa      	ldrb	r2, [r7, #15]
 800cdcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fee1 	bl	800db9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 fa86 	bl	800d2ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d004      	beq.n	800cdf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2202      	movs	r2, #2
 800cdea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdee:	e009      	b.n	800ce04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf8:	e004      	b.n	800ce04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f99e 	bl	800d13e <USBD_CtlError>
  }
}
 800ce02:	bf00      	nop
 800ce04:	bf00      	nop
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	885b      	ldrh	r3, [r3, #2]
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	4b4e      	ldr	r3, [pc, #312]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce24:	4b4d      	ldr	r3, [pc, #308]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d905      	bls.n	800ce38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f985 	bl	800d13e <USBD_CtlError>
    return USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e08c      	b.n	800cf52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d002      	beq.n	800ce4a <USBD_SetConfig+0x3e>
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d029      	beq.n	800ce9c <USBD_SetConfig+0x90>
 800ce48:	e075      	b.n	800cf36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ce4a:	4b44      	ldr	r3, [pc, #272]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d020      	beq.n	800ce94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ce52:	4b42      	ldr	r3, [pc, #264]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce5c:	4b3f      	ldr	r3, [pc, #252]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7fe ffe3 	bl	800be2e <USBD_SetClassConfig>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d008      	beq.n	800ce84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f962 	bl	800d13e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce82:	e065      	b.n	800cf50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fa31 	bl	800d2ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ce92:	e05d      	b.n	800cf50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fa29 	bl	800d2ec <USBD_CtlSendStatus>
      break;
 800ce9a:	e059      	b.n	800cf50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce9c:	4b2f      	ldr	r3, [pc, #188]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d112      	bne.n	800ceca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2202      	movs	r2, #2
 800cea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ceac:	4b2b      	ldr	r3, [pc, #172]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ceb6:	4b29      	ldr	r3, [pc, #164]	@ (800cf5c <USBD_SetConfig+0x150>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7fe ffd2 	bl	800be66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa12 	bl	800d2ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cec8:	e042      	b.n	800cf50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ceca:	4b24      	ldr	r3, [pc, #144]	@ (800cf5c <USBD_SetConfig+0x150>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d02a      	beq.n	800cf2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7fe ffc0 	bl	800be66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cee6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf5c <USBD_SetConfig+0x150>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cef0:	4b1a      	ldr	r3, [pc, #104]	@ (800cf5c <USBD_SetConfig+0x150>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7fe ff99 	bl	800be2e <USBD_SetClassConfig>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00f      	beq.n	800cf26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f918 	bl	800d13e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7fe ffa5 	bl	800be66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cf24:	e014      	b.n	800cf50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f9e0 	bl	800d2ec <USBD_CtlSendStatus>
      break;
 800cf2c:	e010      	b.n	800cf50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f9dc 	bl	800d2ec <USBD_CtlSendStatus>
      break;
 800cf34:	e00c      	b.n	800cf50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f900 	bl	800d13e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf3e:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <USBD_SetConfig+0x150>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7fe ff8e 	bl	800be66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4e:	bf00      	nop
  }

  return ret;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	200004e8 	.word	0x200004e8

0800cf60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	88db      	ldrh	r3, [r3, #6]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d004      	beq.n	800cf7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f8e2 	bl	800d13e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf7a:	e023      	b.n	800cfc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	dc02      	bgt.n	800cf8e <USBD_GetConfig+0x2e>
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	dc03      	bgt.n	800cf94 <USBD_GetConfig+0x34>
 800cf8c:	e015      	b.n	800cfba <USBD_GetConfig+0x5a>
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	d00b      	beq.n	800cfaa <USBD_GetConfig+0x4a>
 800cf92:	e012      	b.n	800cfba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f948 	bl	800d238 <USBD_CtlSendData>
        break;
 800cfa8:	e00c      	b.n	800cfc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3304      	adds	r3, #4
 800cfae:	2201      	movs	r2, #1
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f940 	bl	800d238 <USBD_CtlSendData>
        break;
 800cfb8:	e004      	b.n	800cfc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f8be 	bl	800d13e <USBD_CtlError>
        break;
 800cfc2:	bf00      	nop
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d81e      	bhi.n	800d022 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	88db      	ldrh	r3, [r3, #6]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d004      	beq.n	800cff6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f8a5 	bl	800d13e <USBD_CtlError>
        break;
 800cff4:	e01a      	b.n	800d02c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d002:	2b00      	cmp	r3, #0
 800d004:	d005      	beq.n	800d012 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f043 0202 	orr.w	r2, r3, #2
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	330c      	adds	r3, #12
 800d016:	2202      	movs	r2, #2
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f90c 	bl	800d238 <USBD_CtlSendData>
      break;
 800d020:	e004      	b.n	800d02c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f88a 	bl	800d13e <USBD_CtlError>
      break;
 800d02a:	bf00      	nop
  }
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d107      	bne.n	800d056 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f94c 	bl	800d2ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d054:	e013      	b.n	800d07e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	885b      	ldrh	r3, [r3, #2]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d10b      	bne.n	800d076 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	889b      	ldrh	r3, [r3, #4]
 800d062:	0a1b      	lsrs	r3, r3, #8
 800d064:	b29b      	uxth	r3, r3
 800d066:	b2da      	uxtb	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f93c 	bl	800d2ec <USBD_CtlSendStatus>
}
 800d074:	e003      	b.n	800d07e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f860 	bl	800d13e <USBD_CtlError>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d096:	b2db      	uxtb	r3, r3
 800d098:	3b01      	subs	r3, #1
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d80b      	bhi.n	800d0b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	885b      	ldrh	r3, [r3, #2]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d10c      	bne.n	800d0c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f91c 	bl	800d2ec <USBD_CtlSendStatus>
      }
      break;
 800d0b4:	e004      	b.n	800d0c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f840 	bl	800d13e <USBD_CtlError>
      break;
 800d0be:	e000      	b.n	800d0c2 <USBD_ClrFeature+0x3c>
      break;
 800d0c0:	bf00      	nop
  }
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	781a      	ldrb	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7ff fa40 	bl	800c57a <SWAPBYTE>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3301      	adds	r3, #1
 800d106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f7ff fa33 	bl	800c57a <SWAPBYTE>
 800d114:	4603      	mov	r3, r0
 800d116:	461a      	mov	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3301      	adds	r3, #1
 800d126:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7ff fa26 	bl	800c57a <SWAPBYTE>
 800d12e:	4603      	mov	r3, r0
 800d130:	461a      	mov	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	80da      	strh	r2, [r3, #6]
}
 800d136:	bf00      	nop
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d148:	2180      	movs	r1, #128	@ 0x80
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fcbc 	bl	800dac8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d150:	2100      	movs	r1, #0
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fcb8 	bl	800dac8 <USBD_LL_StallEP>
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d16c:	2300      	movs	r3, #0
 800d16e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d042      	beq.n	800d1fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d17a:	6938      	ldr	r0, [r7, #16]
 800d17c:	f000 f842 	bl	800d204 <USBD_GetLen>
 800d180:	4603      	mov	r3, r0
 800d182:	3301      	adds	r3, #1
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d18a:	d808      	bhi.n	800d19e <USBD_GetString+0x3e>
 800d18c:	6938      	ldr	r0, [r7, #16]
 800d18e:	f000 f839 	bl	800d204 <USBD_GetLen>
 800d192:	4603      	mov	r3, r0
 800d194:	3301      	adds	r3, #1
 800d196:	b29b      	uxth	r3, r3
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	e001      	b.n	800d1a2 <USBD_GetString+0x42>
 800d19e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	7812      	ldrb	r2, [r2, #0]
 800d1b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	4413      	add	r3, r2
 800d1be:	2203      	movs	r2, #3
 800d1c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d1c8:	e013      	b.n	800d1f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	613b      	str	r3, [r7, #16]
    idx++;
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e7      	bne.n	800d1ca <USBD_GetString+0x6a>
 800d1fa:	e000      	b.n	800d1fe <USBD_GetString+0x9e>
    return;
 800d1fc:	bf00      	nop
  }
}
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d214:	e005      	b.n	800d222 <USBD_GetLen+0x1e>
  {
    len++;
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	3301      	adds	r3, #1
 800d21a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3301      	adds	r3, #1
 800d220:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f5      	bne.n	800d216 <USBD_GetLen+0x12>
  }

  return len;
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2202      	movs	r2, #2
 800d248:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	2100      	movs	r1, #0
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f000 fcbb 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b084      	sub	sp, #16
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	2100      	movs	r1, #0
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 fcaa 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2203      	movs	r2, #3
 800d2a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68ba      	ldr	r2, [r7, #8]
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f000 fcae 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	2100      	movs	r1, #0
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 fc9d 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2200      	movs	r2, #0
 800d300:	2100      	movs	r1, #0
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fc69 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b082      	sub	sp, #8
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2205      	movs	r2, #5
 800d31e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d322:	2300      	movs	r3, #0
 800d324:	2200      	movs	r2, #0
 800d326:	2100      	movs	r1, #0
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 fc77 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d33c:	2200      	movs	r2, #0
 800d33e:	4912      	ldr	r1, [pc, #72]	@ (800d388 <MX_USB_DEVICE_Init+0x50>)
 800d340:	4812      	ldr	r0, [pc, #72]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d342:	f7fe fcf7 	bl	800bd34 <USBD_Init>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d34c:	f7f4 fb2a 	bl	80019a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d350:	490f      	ldr	r1, [pc, #60]	@ (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d352:	480e      	ldr	r0, [pc, #56]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d354:	f7fe fd1e 	bl	800bd94 <USBD_RegisterClass>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d35e:	f7f4 fb21 	bl	80019a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d362:	490c      	ldr	r1, [pc, #48]	@ (800d394 <MX_USB_DEVICE_Init+0x5c>)
 800d364:	4809      	ldr	r0, [pc, #36]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d366:	f7fe fc55 	bl	800bc14 <USBD_CDC_RegisterInterface>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d370:	f7f4 fb18 	bl	80019a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d374:	4805      	ldr	r0, [pc, #20]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d376:	f7fe fd43 	bl	800be00 <USBD_Start>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d380:	f7f4 fb10 	bl	80019a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d384:	bf00      	nop
 800d386:	bd80      	pop	{r7, pc}
 800d388:	200000ac 	.word	0x200000ac
 800d38c:	200004ec 	.word	0x200004ec
 800d390:	20000018 	.word	0x20000018
 800d394:	20000098 	.word	0x20000098

0800d398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d39c:	2200      	movs	r2, #0
 800d39e:	4905      	ldr	r1, [pc, #20]	@ (800d3b4 <CDC_Init_FS+0x1c>)
 800d3a0:	4805      	ldr	r0, [pc, #20]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3a2:	f7fe fc51 	bl	800bc48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3a6:	4905      	ldr	r1, [pc, #20]	@ (800d3bc <CDC_Init_FS+0x24>)
 800d3a8:	4803      	ldr	r0, [pc, #12]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3aa:	f7fe fc6f 	bl	800bc8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20000fc8 	.word	0x20000fc8
 800d3b8:	200004ec 	.word	0x200004ec
 800d3bc:	200007c8 	.word	0x200007c8

0800d3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	6039      	str	r1, [r7, #0]
 800d3da:	71fb      	strb	r3, [r7, #7]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	2b23      	cmp	r3, #35	@ 0x23
 800d3e4:	d84a      	bhi.n	800d47c <CDC_Control_FS+0xac>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <CDC_Control_FS+0x1c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d47d 	.word	0x0800d47d
 800d3f0:	0800d47d 	.word	0x0800d47d
 800d3f4:	0800d47d 	.word	0x0800d47d
 800d3f8:	0800d47d 	.word	0x0800d47d
 800d3fc:	0800d47d 	.word	0x0800d47d
 800d400:	0800d47d 	.word	0x0800d47d
 800d404:	0800d47d 	.word	0x0800d47d
 800d408:	0800d47d 	.word	0x0800d47d
 800d40c:	0800d47d 	.word	0x0800d47d
 800d410:	0800d47d 	.word	0x0800d47d
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d47d 	.word	0x0800d47d
 800d41c:	0800d47d 	.word	0x0800d47d
 800d420:	0800d47d 	.word	0x0800d47d
 800d424:	0800d47d 	.word	0x0800d47d
 800d428:	0800d47d 	.word	0x0800d47d
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d47d 	.word	0x0800d47d
 800d434:	0800d47d 	.word	0x0800d47d
 800d438:	0800d47d 	.word	0x0800d47d
 800d43c:	0800d47d 	.word	0x0800d47d
 800d440:	0800d47d 	.word	0x0800d47d
 800d444:	0800d47d 	.word	0x0800d47d
 800d448:	0800d47d 	.word	0x0800d47d
 800d44c:	0800d47d 	.word	0x0800d47d
 800d450:	0800d47d 	.word	0x0800d47d
 800d454:	0800d47d 	.word	0x0800d47d
 800d458:	0800d47d 	.word	0x0800d47d
 800d45c:	0800d47d 	.word	0x0800d47d
 800d460:	0800d47d 	.word	0x0800d47d
 800d464:	0800d47d 	.word	0x0800d47d
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d47d 	.word	0x0800d47d
 800d470:	0800d47d 	.word	0x0800d47d
 800d474:	0800d47d 	.word	0x0800d47d
 800d478:	0800d47d 	.word	0x0800d47d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d47c:	bf00      	nop
  }

  return (USBD_OK);
 800d47e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	4805      	ldr	r0, [pc, #20]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d49a:	f7fe fbf7 	bl	800bc8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d49e:	4804      	ldr	r0, [pc, #16]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d4a0:	f7fe fc12 	bl	800bcc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	200004ec 	.word	0x200004ec

0800d4b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d4c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
	...

0800d4d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2212      	movs	r2, #18
 800d4e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4ea:	4b03      	ldr	r3, [pc, #12]	@ (800d4f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	200000c8 	.word	0x200000c8

0800d4fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	6039      	str	r1, [r7, #0]
 800d506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2204      	movs	r2, #4
 800d50c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d50e:	4b03      	ldr	r3, [pc, #12]	@ (800d51c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	200000dc 	.word	0x200000dc

0800d520 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d105      	bne.n	800d53e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	4907      	ldr	r1, [pc, #28]	@ (800d554 <USBD_FS_ProductStrDescriptor+0x34>)
 800d536:	4808      	ldr	r0, [pc, #32]	@ (800d558 <USBD_FS_ProductStrDescriptor+0x38>)
 800d538:	f7ff fe12 	bl	800d160 <USBD_GetString>
 800d53c:	e004      	b.n	800d548 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	4904      	ldr	r1, [pc, #16]	@ (800d554 <USBD_FS_ProductStrDescriptor+0x34>)
 800d542:	4805      	ldr	r0, [pc, #20]	@ (800d558 <USBD_FS_ProductStrDescriptor+0x38>)
 800d544:	f7ff fe0c 	bl	800d160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d548:	4b02      	ldr	r3, [pc, #8]	@ (800d554 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	200017c8 	.word	0x200017c8
 800d558:	08010f74 	.word	0x08010f74

0800d55c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	4603      	mov	r3, r0
 800d564:	6039      	str	r1, [r7, #0]
 800d566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	4904      	ldr	r1, [pc, #16]	@ (800d57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d56c:	4804      	ldr	r0, [pc, #16]	@ (800d580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d56e:	f7ff fdf7 	bl	800d160 <USBD_GetString>
  return USBD_StrDesc;
 800d572:	4b02      	ldr	r3, [pc, #8]	@ (800d57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	200017c8 	.word	0x200017c8
 800d580:	08010f8c 	.word	0x08010f8c

0800d584 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	6039      	str	r1, [r7, #0]
 800d58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	221a      	movs	r2, #26
 800d594:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d596:	f000 f843 	bl	800d620 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d59a:	4b02      	ldr	r3, [pc, #8]	@ (800d5a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	200000e0 	.word	0x200000e0

0800d5a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d105      	bne.n	800d5c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	4907      	ldr	r1, [pc, #28]	@ (800d5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5be:	4808      	ldr	r0, [pc, #32]	@ (800d5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5c0:	f7ff fdce 	bl	800d160 <USBD_GetString>
 800d5c4:	e004      	b.n	800d5d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	4904      	ldr	r1, [pc, #16]	@ (800d5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5ca:	4805      	ldr	r0, [pc, #20]	@ (800d5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5cc:	f7ff fdc8 	bl	800d160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5d0:	4b02      	ldr	r3, [pc, #8]	@ (800d5dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200017c8 	.word	0x200017c8
 800d5e0:	08010fa0 	.word	0x08010fa0

0800d5e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d105      	bne.n	800d602 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	4907      	ldr	r1, [pc, #28]	@ (800d618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5fa:	4808      	ldr	r0, [pc, #32]	@ (800d61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5fc:	f7ff fdb0 	bl	800d160 <USBD_GetString>
 800d600:	e004      	b.n	800d60c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	4904      	ldr	r1, [pc, #16]	@ (800d618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d606:	4805      	ldr	r0, [pc, #20]	@ (800d61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d608:	f7ff fdaa 	bl	800d160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d60c:	4b02      	ldr	r3, [pc, #8]	@ (800d618 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	200017c8 	.word	0x200017c8
 800d61c:	08010fac 	.word	0x08010fac

0800d620 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d626:	4b0f      	ldr	r3, [pc, #60]	@ (800d664 <Get_SerialNum+0x44>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d62c:	4b0e      	ldr	r3, [pc, #56]	@ (800d668 <Get_SerialNum+0x48>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d632:	4b0e      	ldr	r3, [pc, #56]	@ (800d66c <Get_SerialNum+0x4c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d009      	beq.n	800d65a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d646:	2208      	movs	r2, #8
 800d648:	4909      	ldr	r1, [pc, #36]	@ (800d670 <Get_SerialNum+0x50>)
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f000 f814 	bl	800d678 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d650:	2204      	movs	r2, #4
 800d652:	4908      	ldr	r1, [pc, #32]	@ (800d674 <Get_SerialNum+0x54>)
 800d654:	68b8      	ldr	r0, [r7, #8]
 800d656:	f000 f80f 	bl	800d678 <IntToUnicode>
  }
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	1fff7a10 	.word	0x1fff7a10
 800d668:	1fff7a14 	.word	0x1fff7a14
 800d66c:	1fff7a18 	.word	0x1fff7a18
 800d670:	200000e2 	.word	0x200000e2
 800d674:	200000f2 	.word	0x200000f2

0800d678 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]
 800d68e:	e027      	b.n	800d6e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	0f1b      	lsrs	r3, r3, #28
 800d694:	2b09      	cmp	r3, #9
 800d696:	d80b      	bhi.n	800d6b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	0f1b      	lsrs	r3, r3, #28
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	440b      	add	r3, r1
 800d6a8:	3230      	adds	r2, #48	@ 0x30
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]
 800d6ae:	e00a      	b.n	800d6c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	0f1b      	lsrs	r3, r3, #28
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	440b      	add	r3, r1
 800d6c0:	3237      	adds	r2, #55	@ 0x37
 800d6c2:	b2d2      	uxtb	r2, r2
 800d6c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	011b      	lsls	r3, r3, #4
 800d6ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	75fb      	strb	r3, [r7, #23]
 800d6e0:	7dfa      	ldrb	r2, [r7, #23]
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d3d3      	bcc.n	800d690 <IntToUnicode+0x18>
  }
}
 800d6e8:	bf00      	nop
 800d6ea:	bf00      	nop
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08a      	sub	sp, #40	@ 0x28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d700:	f107 0314 	add.w	r3, r7, #20
 800d704:	2200      	movs	r2, #0
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	605a      	str	r2, [r3, #4]
 800d70a:	609a      	str	r2, [r3, #8]
 800d70c:	60da      	str	r2, [r3, #12]
 800d70e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d718:	d13a      	bne.n	800d790 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d71a:	2300      	movs	r3, #0
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	4b1e      	ldr	r3, [pc, #120]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d722:	4a1d      	ldr	r2, [pc, #116]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d724:	f043 0301 	orr.w	r3, r3, #1
 800d728:	6313      	str	r3, [r2, #48]	@ 0x30
 800d72a:	4b1b      	ldr	r3, [pc, #108]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	613b      	str	r3, [r7, #16]
 800d734:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d736:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d73a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d73c:	2302      	movs	r3, #2
 800d73e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d740:	2300      	movs	r3, #0
 800d742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d744:	2303      	movs	r3, #3
 800d746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d748:	230a      	movs	r3, #10
 800d74a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d74c:	f107 0314 	add.w	r3, r7, #20
 800d750:	4619      	mov	r1, r3
 800d752:	4812      	ldr	r0, [pc, #72]	@ (800d79c <HAL_PCD_MspInit+0xa4>)
 800d754:	f7f5 fc1e 	bl	8002f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d758:	4b0f      	ldr	r3, [pc, #60]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d75a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d75c:	4a0e      	ldr	r2, [pc, #56]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d762:	6353      	str	r3, [r2, #52]	@ 0x34
 800d764:	2300      	movs	r3, #0
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	4b0b      	ldr	r3, [pc, #44]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d76c:	4a0a      	ldr	r2, [pc, #40]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d76e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d772:	6453      	str	r3, [r2, #68]	@ 0x44
 800d774:	4b08      	ldr	r3, [pc, #32]	@ (800d798 <HAL_PCD_MspInit+0xa0>)
 800d776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d780:	2200      	movs	r2, #0
 800d782:	2100      	movs	r1, #0
 800d784:	2043      	movs	r0, #67	@ 0x43
 800d786:	f7f5 f844 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d78a:	2043      	movs	r0, #67	@ 0x43
 800d78c:	f7f5 f85d 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d790:	bf00      	nop
 800d792:	3728      	adds	r7, #40	@ 0x28
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	40023800 	.word	0x40023800
 800d79c:	40020000 	.word	0x40020000

0800d7a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	f7fe fb6f 	bl	800be9a <USBD_LL_SetupStage>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d7d6:	78fa      	ldrb	r2, [r7, #3]
 800d7d8:	6879      	ldr	r1, [r7, #4]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	4413      	add	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	440b      	add	r3, r1
 800d7e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	78fb      	ldrb	r3, [r7, #3]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	f7fe fba9 	bl	800bf44 <USBD_LL_DataOutStage>
}
 800d7f2:	bf00      	nop
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	460b      	mov	r3, r1
 800d804:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	4613      	mov	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	440b      	add	r3, r1
 800d81a:	3320      	adds	r3, #32
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	78fb      	ldrb	r3, [r7, #3]
 800d820:	4619      	mov	r1, r3
 800d822:	f7fe fc42 	bl	800c0aa <USBD_LL_DataInStage>
}
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe fd7c 	bl	800c33a <USBD_LL_SOF>
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d852:	2301      	movs	r3, #1
 800d854:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	79db      	ldrb	r3, [r3, #7]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d001      	beq.n	800d862 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d85e:	f7f4 f8a1 	bl	80019a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d868:	7bfa      	ldrb	r2, [r7, #15]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fd20 	bl	800c2b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fe fcc8 	bl	800c20e <USBD_LL_Reset>
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
	...

0800d888 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fd1b 	bl	800c2d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8ae:	f043 0301 	orr.w	r3, r3, #1
 800d8b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7adb      	ldrb	r3, [r3, #11]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8bc:	4b04      	ldr	r3, [pc, #16]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x48>)
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	4a03      	ldr	r2, [pc, #12]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x48>)
 800d8c2:	f043 0306 	orr.w	r3, r3, #6
 800d8c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	e000ed00 	.word	0xe000ed00

0800d8d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fd11 	bl	800c30a <USBD_LL_Resume>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fd69 	bl	800c3de <USBD_LL_IsoOUTIncomplete>
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d926:	78fa      	ldrb	r2, [r7, #3]
 800d928:	4611      	mov	r1, r2
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fd25 	bl	800c37a <USBD_LL_IsoINIncomplete>
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe fd7b 	bl	800c442 <USBD_LL_DevConnected>
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe fd78 	bl	800c458 <USBD_LL_DevDisconnected>
}
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d13c      	bne.n	800d9fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d980:	4a20      	ldr	r2, [pc, #128]	@ (800da04 <USBD_LL_Init+0x94>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a1e      	ldr	r2, [pc, #120]	@ (800da04 <USBD_LL_Init+0x94>)
 800d98c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d990:	4b1c      	ldr	r3, [pc, #112]	@ (800da04 <USBD_LL_Init+0x94>)
 800d992:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d998:	4b1a      	ldr	r3, [pc, #104]	@ (800da04 <USBD_LL_Init+0x94>)
 800d99a:	2204      	movs	r2, #4
 800d99c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d99e:	4b19      	ldr	r3, [pc, #100]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9a4:	4b17      	ldr	r3, [pc, #92]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9aa:	4b16      	ldr	r3, [pc, #88]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9b0:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9b6:	4b13      	ldr	r3, [pc, #76]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9bc:	4b11      	ldr	r3, [pc, #68]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9c2:	4b10      	ldr	r3, [pc, #64]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9ce:	480d      	ldr	r0, [pc, #52]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9d0:	f7f8 fae1 	bl	8005f96 <HAL_PCD_Init>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9da:	f7f3 ffe3 	bl	80019a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9de:	2180      	movs	r1, #128	@ 0x80
 800d9e0:	4808      	ldr	r0, [pc, #32]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9e2:	f7f9 fd0e 	bl	8007402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9e6:	2240      	movs	r2, #64	@ 0x40
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	4806      	ldr	r0, [pc, #24]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ec:	f7f9 fcc2 	bl	8007374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9f0:	2280      	movs	r2, #128	@ 0x80
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4803      	ldr	r0, [pc, #12]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9f6:	f7f9 fcbd 	bl	8007374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	200019c8 	.word	0x200019c8

0800da08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da1e:	4618      	mov	r0, r3
 800da20:	f7f8 fbc8 	bl	80061b4 <HAL_PCD_Start>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da28:	7bfb      	ldrb	r3, [r7, #15]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 f942 	bl	800dcb4 <USBD_Get_USB_Status>
 800da30:	4603      	mov	r3, r0
 800da32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da34:	7bbb      	ldrb	r3, [r7, #14]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	4608      	mov	r0, r1
 800da48:	4611      	mov	r1, r2
 800da4a:	461a      	mov	r2, r3
 800da4c:	4603      	mov	r3, r0
 800da4e:	70fb      	strb	r3, [r7, #3]
 800da50:	460b      	mov	r3, r1
 800da52:	70bb      	strb	r3, [r7, #2]
 800da54:	4613      	mov	r3, r2
 800da56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da66:	78bb      	ldrb	r3, [r7, #2]
 800da68:	883a      	ldrh	r2, [r7, #0]
 800da6a:	78f9      	ldrb	r1, [r7, #3]
 800da6c:	f7f9 f89c 	bl	8006ba8 <HAL_PCD_EP_Open>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f91c 	bl	800dcb4 <USBD_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daa4:	78fa      	ldrb	r2, [r7, #3]
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f9 f8e7 	bl	8006c7c <HAL_PCD_EP_Close>
 800daae:	4603      	mov	r3, r0
 800dab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 f8fd 	bl	800dcb4 <USBD_Get_USB_Status>
 800daba:	4603      	mov	r3, r0
 800dabc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	460b      	mov	r3, r1
 800dad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dae2:	78fa      	ldrb	r2, [r7, #3]
 800dae4:	4611      	mov	r1, r2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f9 f99f 	bl	8006e2a <HAL_PCD_EP_SetStall>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f8de 	bl	800dcb4 <USBD_Get_USB_Status>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db20:	78fa      	ldrb	r2, [r7, #3]
 800db22:	4611      	mov	r1, r2
 800db24:	4618      	mov	r0, r3
 800db26:	f7f9 f9e3 	bl	8006ef0 <HAL_PCD_EP_ClrStall>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	4618      	mov	r0, r3
 800db32:	f000 f8bf 	bl	800dcb4 <USBD_Get_USB_Status>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	da0b      	bge.n	800db78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db60:	78fb      	ldrb	r3, [r7, #3]
 800db62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	4613      	mov	r3, r2
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	4413      	add	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	440b      	add	r3, r1
 800db72:	3316      	adds	r3, #22
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	e00b      	b.n	800db90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db78:	78fb      	ldrb	r3, [r7, #3]
 800db7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db7e:	68f9      	ldr	r1, [r7, #12]
 800db80:	4613      	mov	r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	440b      	add	r3, r1
 800db8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800db8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbb6:	78fa      	ldrb	r2, [r7, #3]
 800dbb8:	4611      	mov	r1, r2
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f8 ffd0 	bl	8006b60 <HAL_PCD_SetAddress>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 f874 	bl	800dcb4 <USBD_Get_USB_Status>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	60f8      	str	r0, [r7, #12]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dbf8:	7af9      	ldrb	r1, [r7, #11]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	f7f9 f8da 	bl	8006db6 <HAL_PCD_EP_Transmit>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 f853 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc3a:	7af9      	ldrb	r1, [r7, #11]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	f7f9 f866 	bl	8006d10 <HAL_PCD_EP_Receive>
 800dc44:	4603      	mov	r3, r0
 800dc46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f832 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc50:	4603      	mov	r3, r0
 800dc52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc54:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b082      	sub	sp, #8
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	4611      	mov	r1, r2
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7f9 f886 	bl	8006d86 <HAL_PCD_EP_GetRxCount>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc8c:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <USBD_static_malloc+0x18>)
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	20001eac 	.word	0x20001eac

0800dca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d817      	bhi.n	800dcf8 <USBD_Get_USB_Status+0x44>
 800dcc8:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <USBD_Get_USB_Status+0x1c>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dce1 	.word	0x0800dce1
 800dcd4:	0800dce7 	.word	0x0800dce7
 800dcd8:	0800dced 	.word	0x0800dced
 800dcdc:	0800dcf3 	.word	0x0800dcf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
    break;
 800dce4:	e00b      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcea:	e008      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcec:	2301      	movs	r3, #1
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	e005      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf6:	e002      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfc:	bf00      	nop
  }
  return usb_status;
 800dcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <__cxa_guard_acquire>:
 800dd0c:	6802      	ldr	r2, [r0, #0]
 800dd0e:	07d2      	lsls	r2, r2, #31
 800dd10:	4603      	mov	r3, r0
 800dd12:	d405      	bmi.n	800dd20 <__cxa_guard_acquire+0x14>
 800dd14:	7842      	ldrb	r2, [r0, #1]
 800dd16:	b102      	cbz	r2, 800dd1a <__cxa_guard_acquire+0xe>
 800dd18:	deff      	udf	#255	@ 0xff
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	7058      	strb	r0, [r3, #1]
 800dd1e:	4770      	bx	lr
 800dd20:	2000      	movs	r0, #0
 800dd22:	4770      	bx	lr

0800dd24 <__cxa_guard_release>:
 800dd24:	2301      	movs	r3, #1
 800dd26:	6003      	str	r3, [r0, #0]
 800dd28:	4770      	bx	lr

0800dd2a <atan2>:
 800dd2a:	f000 b909 	b.w	800df40 <__ieee754_atan2>

0800dd2e <sqrt>:
 800dd2e:	b538      	push	{r3, r4, r5, lr}
 800dd30:	ed2d 8b02 	vpush	{d8}
 800dd34:	ec55 4b10 	vmov	r4, r5, d0
 800dd38:	f000 f826 	bl	800dd88 <__ieee754_sqrt>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	eeb0 8a40 	vmov.f32	s16, s0
 800dd48:	eef0 8a60 	vmov.f32	s17, s1
 800dd4c:	f7f2 fef6 	bl	8000b3c <__aeabi_dcmpun>
 800dd50:	b990      	cbnz	r0, 800dd78 <sqrt+0x4a>
 800dd52:	2200      	movs	r2, #0
 800dd54:	2300      	movs	r3, #0
 800dd56:	4620      	mov	r0, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	f7f2 fec7 	bl	8000aec <__aeabi_dcmplt>
 800dd5e:	b158      	cbz	r0, 800dd78 <sqrt+0x4a>
 800dd60:	f001 fa0a 	bl	800f178 <__errno>
 800dd64:	2321      	movs	r3, #33	@ 0x21
 800dd66:	6003      	str	r3, [r0, #0]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4619      	mov	r1, r3
 800dd70:	f7f2 fd74 	bl	800085c <__aeabi_ddiv>
 800dd74:	ec41 0b18 	vmov	d8, r0, r1
 800dd78:	eeb0 0a48 	vmov.f32	s0, s16
 800dd7c:	eef0 0a68 	vmov.f32	s1, s17
 800dd80:	ecbd 8b02 	vpop	{d8}
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dd88 <__ieee754_sqrt>:
 800dd88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	4a68      	ldr	r2, [pc, #416]	@ (800df30 <__ieee754_sqrt+0x1a8>)
 800dd8e:	ec55 4b10 	vmov	r4, r5, d0
 800dd92:	43aa      	bics	r2, r5
 800dd94:	462b      	mov	r3, r5
 800dd96:	4621      	mov	r1, r4
 800dd98:	d110      	bne.n	800ddbc <__ieee754_sqrt+0x34>
 800dd9a:	4622      	mov	r2, r4
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 fc32 	bl	8000608 <__aeabi_dmul>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7f2 fa76 	bl	800029c <__adddf3>
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	ec45 4b10 	vmov	d0, r4, r5
 800ddb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddbc:	2d00      	cmp	r5, #0
 800ddbe:	dc0e      	bgt.n	800ddde <__ieee754_sqrt+0x56>
 800ddc0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ddc4:	4322      	orrs	r2, r4
 800ddc6:	d0f5      	beq.n	800ddb4 <__ieee754_sqrt+0x2c>
 800ddc8:	b19d      	cbz	r5, 800ddf2 <__ieee754_sqrt+0x6a>
 800ddca:	4622      	mov	r2, r4
 800ddcc:	4620      	mov	r0, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 fa62 	bl	8000298 <__aeabi_dsub>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	f7f2 fd40 	bl	800085c <__aeabi_ddiv>
 800dddc:	e7e8      	b.n	800ddb0 <__ieee754_sqrt+0x28>
 800ddde:	152a      	asrs	r2, r5, #20
 800dde0:	d115      	bne.n	800de0e <__ieee754_sqrt+0x86>
 800dde2:	2000      	movs	r0, #0
 800dde4:	e009      	b.n	800ddfa <__ieee754_sqrt+0x72>
 800dde6:	0acb      	lsrs	r3, r1, #11
 800dde8:	3a15      	subs	r2, #21
 800ddea:	0549      	lsls	r1, r1, #21
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d0fa      	beq.n	800dde6 <__ieee754_sqrt+0x5e>
 800ddf0:	e7f7      	b.n	800dde2 <__ieee754_sqrt+0x5a>
 800ddf2:	462a      	mov	r2, r5
 800ddf4:	e7fa      	b.n	800ddec <__ieee754_sqrt+0x64>
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	02dc      	lsls	r4, r3, #11
 800ddfc:	d5fb      	bpl.n	800ddf6 <__ieee754_sqrt+0x6e>
 800ddfe:	1e44      	subs	r4, r0, #1
 800de00:	1b12      	subs	r2, r2, r4
 800de02:	f1c0 0420 	rsb	r4, r0, #32
 800de06:	fa21 f404 	lsr.w	r4, r1, r4
 800de0a:	4323      	orrs	r3, r4
 800de0c:	4081      	lsls	r1, r0
 800de0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de12:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800de16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de1a:	07d2      	lsls	r2, r2, #31
 800de1c:	bf5c      	itt	pl
 800de1e:	005b      	lslpl	r3, r3, #1
 800de20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800de24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de28:	bf58      	it	pl
 800de2a:	0049      	lslpl	r1, r1, #1
 800de2c:	2600      	movs	r6, #0
 800de2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800de32:	106d      	asrs	r5, r5, #1
 800de34:	0049      	lsls	r1, r1, #1
 800de36:	2016      	movs	r0, #22
 800de38:	4632      	mov	r2, r6
 800de3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800de3e:	1917      	adds	r7, r2, r4
 800de40:	429f      	cmp	r7, r3
 800de42:	bfde      	ittt	le
 800de44:	193a      	addle	r2, r7, r4
 800de46:	1bdb      	suble	r3, r3, r7
 800de48:	1936      	addle	r6, r6, r4
 800de4a:	0fcf      	lsrs	r7, r1, #31
 800de4c:	3801      	subs	r0, #1
 800de4e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800de52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800de56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800de5a:	d1f0      	bne.n	800de3e <__ieee754_sqrt+0xb6>
 800de5c:	4604      	mov	r4, r0
 800de5e:	2720      	movs	r7, #32
 800de60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800de64:	429a      	cmp	r2, r3
 800de66:	eb00 0e0c 	add.w	lr, r0, ip
 800de6a:	db02      	blt.n	800de72 <__ieee754_sqrt+0xea>
 800de6c:	d113      	bne.n	800de96 <__ieee754_sqrt+0x10e>
 800de6e:	458e      	cmp	lr, r1
 800de70:	d811      	bhi.n	800de96 <__ieee754_sqrt+0x10e>
 800de72:	f1be 0f00 	cmp.w	lr, #0
 800de76:	eb0e 000c 	add.w	r0, lr, ip
 800de7a:	da42      	bge.n	800df02 <__ieee754_sqrt+0x17a>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	db40      	blt.n	800df02 <__ieee754_sqrt+0x17a>
 800de80:	f102 0801 	add.w	r8, r2, #1
 800de84:	1a9b      	subs	r3, r3, r2
 800de86:	458e      	cmp	lr, r1
 800de88:	bf88      	it	hi
 800de8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800de8e:	eba1 010e 	sub.w	r1, r1, lr
 800de92:	4464      	add	r4, ip
 800de94:	4642      	mov	r2, r8
 800de96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800de9a:	3f01      	subs	r7, #1
 800de9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dea0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dea4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dea8:	d1dc      	bne.n	800de64 <__ieee754_sqrt+0xdc>
 800deaa:	4319      	orrs	r1, r3
 800deac:	d01b      	beq.n	800dee6 <__ieee754_sqrt+0x15e>
 800deae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800df34 <__ieee754_sqrt+0x1ac>
 800deb2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800df38 <__ieee754_sqrt+0x1b0>
 800deb6:	e9da 0100 	ldrd	r0, r1, [sl]
 800deba:	e9db 2300 	ldrd	r2, r3, [fp]
 800debe:	f7f2 f9eb 	bl	8000298 <__aeabi_dsub>
 800dec2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	f7f2 fe17 	bl	8000b00 <__aeabi_dcmple>
 800ded2:	b140      	cbz	r0, 800dee6 <__ieee754_sqrt+0x15e>
 800ded4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ded8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dedc:	e9db 2300 	ldrd	r2, r3, [fp]
 800dee0:	d111      	bne.n	800df06 <__ieee754_sqrt+0x17e>
 800dee2:	3601      	adds	r6, #1
 800dee4:	463c      	mov	r4, r7
 800dee6:	1072      	asrs	r2, r6, #1
 800dee8:	0863      	lsrs	r3, r4, #1
 800deea:	07f1      	lsls	r1, r6, #31
 800deec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800def0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800def4:	bf48      	it	mi
 800def6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800defa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800defe:	4618      	mov	r0, r3
 800df00:	e756      	b.n	800ddb0 <__ieee754_sqrt+0x28>
 800df02:	4690      	mov	r8, r2
 800df04:	e7be      	b.n	800de84 <__ieee754_sqrt+0xfc>
 800df06:	f7f2 f9c9 	bl	800029c <__adddf3>
 800df0a:	e9da 8900 	ldrd	r8, r9, [sl]
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fde9 	bl	8000aec <__aeabi_dcmplt>
 800df1a:	b120      	cbz	r0, 800df26 <__ieee754_sqrt+0x19e>
 800df1c:	1ca0      	adds	r0, r4, #2
 800df1e:	bf08      	it	eq
 800df20:	3601      	addeq	r6, #1
 800df22:	3402      	adds	r4, #2
 800df24:	e7df      	b.n	800dee6 <__ieee754_sqrt+0x15e>
 800df26:	1c63      	adds	r3, r4, #1
 800df28:	f023 0401 	bic.w	r4, r3, #1
 800df2c:	e7db      	b.n	800dee6 <__ieee754_sqrt+0x15e>
 800df2e:	bf00      	nop
 800df30:	7ff00000 	.word	0x7ff00000
 800df34:	20000108 	.word	0x20000108
 800df38:	20000100 	.word	0x20000100
 800df3c:	00000000 	.word	0x00000000

0800df40 <__ieee754_atan2>:
 800df40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df44:	ec57 6b11 	vmov	r6, r7, d1
 800df48:	4273      	negs	r3, r6
 800df4a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e0c8 <__ieee754_atan2+0x188>
 800df4e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800df52:	4333      	orrs	r3, r6
 800df54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df58:	4543      	cmp	r3, r8
 800df5a:	ec51 0b10 	vmov	r0, r1, d0
 800df5e:	4635      	mov	r5, r6
 800df60:	d809      	bhi.n	800df76 <__ieee754_atan2+0x36>
 800df62:	4244      	negs	r4, r0
 800df64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800df68:	4304      	orrs	r4, r0
 800df6a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df6e:	4544      	cmp	r4, r8
 800df70:	468e      	mov	lr, r1
 800df72:	4681      	mov	r9, r0
 800df74:	d907      	bls.n	800df86 <__ieee754_atan2+0x46>
 800df76:	4632      	mov	r2, r6
 800df78:	463b      	mov	r3, r7
 800df7a:	f7f2 f98f 	bl	800029c <__adddf3>
 800df7e:	ec41 0b10 	vmov	d0, r0, r1
 800df82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df86:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800df8a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800df8e:	4334      	orrs	r4, r6
 800df90:	d103      	bne.n	800df9a <__ieee754_atan2+0x5a>
 800df92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df96:	f000 b89b 	b.w	800e0d0 <atan>
 800df9a:	17bc      	asrs	r4, r7, #30
 800df9c:	f004 0402 	and.w	r4, r4, #2
 800dfa0:	ea53 0909 	orrs.w	r9, r3, r9
 800dfa4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dfa8:	d107      	bne.n	800dfba <__ieee754_atan2+0x7a>
 800dfaa:	2c02      	cmp	r4, #2
 800dfac:	d05f      	beq.n	800e06e <__ieee754_atan2+0x12e>
 800dfae:	2c03      	cmp	r4, #3
 800dfb0:	d1e5      	bne.n	800df7e <__ieee754_atan2+0x3e>
 800dfb2:	a141      	add	r1, pc, #260	@ (adr r1, 800e0b8 <__ieee754_atan2+0x178>)
 800dfb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfb8:	e7e1      	b.n	800df7e <__ieee754_atan2+0x3e>
 800dfba:	4315      	orrs	r5, r2
 800dfbc:	d106      	bne.n	800dfcc <__ieee754_atan2+0x8c>
 800dfbe:	f1be 0f00 	cmp.w	lr, #0
 800dfc2:	da5f      	bge.n	800e084 <__ieee754_atan2+0x144>
 800dfc4:	a13e      	add	r1, pc, #248	@ (adr r1, 800e0c0 <__ieee754_atan2+0x180>)
 800dfc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfca:	e7d8      	b.n	800df7e <__ieee754_atan2+0x3e>
 800dfcc:	4542      	cmp	r2, r8
 800dfce:	d10f      	bne.n	800dff0 <__ieee754_atan2+0xb0>
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfd6:	d107      	bne.n	800dfe8 <__ieee754_atan2+0xa8>
 800dfd8:	2c02      	cmp	r4, #2
 800dfda:	d84c      	bhi.n	800e076 <__ieee754_atan2+0x136>
 800dfdc:	4b34      	ldr	r3, [pc, #208]	@ (800e0b0 <__ieee754_atan2+0x170>)
 800dfde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfe6:	e7ca      	b.n	800df7e <__ieee754_atan2+0x3e>
 800dfe8:	2c02      	cmp	r4, #2
 800dfea:	d848      	bhi.n	800e07e <__ieee754_atan2+0x13e>
 800dfec:	4b31      	ldr	r3, [pc, #196]	@ (800e0b4 <__ieee754_atan2+0x174>)
 800dfee:	e7f6      	b.n	800dfde <__ieee754_atan2+0x9e>
 800dff0:	4543      	cmp	r3, r8
 800dff2:	d0e4      	beq.n	800dfbe <__ieee754_atan2+0x7e>
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dffa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dffe:	da1e      	bge.n	800e03e <__ieee754_atan2+0xfe>
 800e000:	2f00      	cmp	r7, #0
 800e002:	da01      	bge.n	800e008 <__ieee754_atan2+0xc8>
 800e004:	323c      	adds	r2, #60	@ 0x3c
 800e006:	db1e      	blt.n	800e046 <__ieee754_atan2+0x106>
 800e008:	4632      	mov	r2, r6
 800e00a:	463b      	mov	r3, r7
 800e00c:	f7f2 fc26 	bl	800085c <__aeabi_ddiv>
 800e010:	ec41 0b10 	vmov	d0, r0, r1
 800e014:	f000 f9f4 	bl	800e400 <fabs>
 800e018:	f000 f85a 	bl	800e0d0 <atan>
 800e01c:	ec51 0b10 	vmov	r0, r1, d0
 800e020:	2c01      	cmp	r4, #1
 800e022:	d013      	beq.n	800e04c <__ieee754_atan2+0x10c>
 800e024:	2c02      	cmp	r4, #2
 800e026:	d015      	beq.n	800e054 <__ieee754_atan2+0x114>
 800e028:	2c00      	cmp	r4, #0
 800e02a:	d0a8      	beq.n	800df7e <__ieee754_atan2+0x3e>
 800e02c:	a318      	add	r3, pc, #96	@ (adr r3, 800e090 <__ieee754_atan2+0x150>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 f931 	bl	8000298 <__aeabi_dsub>
 800e036:	a318      	add	r3, pc, #96	@ (adr r3, 800e098 <__ieee754_atan2+0x158>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	e014      	b.n	800e068 <__ieee754_atan2+0x128>
 800e03e:	a118      	add	r1, pc, #96	@ (adr r1, 800e0a0 <__ieee754_atan2+0x160>)
 800e040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e044:	e7ec      	b.n	800e020 <__ieee754_atan2+0xe0>
 800e046:	2000      	movs	r0, #0
 800e048:	2100      	movs	r1, #0
 800e04a:	e7e9      	b.n	800e020 <__ieee754_atan2+0xe0>
 800e04c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e050:	4619      	mov	r1, r3
 800e052:	e794      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e054:	a30e      	add	r3, pc, #56	@ (adr r3, 800e090 <__ieee754_atan2+0x150>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	f7f2 f91d 	bl	8000298 <__aeabi_dsub>
 800e05e:	4602      	mov	r2, r0
 800e060:	460b      	mov	r3, r1
 800e062:	a10d      	add	r1, pc, #52	@ (adr r1, 800e098 <__ieee754_atan2+0x158>)
 800e064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e068:	f7f2 f916 	bl	8000298 <__aeabi_dsub>
 800e06c:	e787      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e06e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e098 <__ieee754_atan2+0x158>)
 800e070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e074:	e783      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e076:	a10c      	add	r1, pc, #48	@ (adr r1, 800e0a8 <__ieee754_atan2+0x168>)
 800e078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e07c:	e77f      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e07e:	2000      	movs	r0, #0
 800e080:	2100      	movs	r1, #0
 800e082:	e77c      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e084:	a106      	add	r1, pc, #24	@ (adr r1, 800e0a0 <__ieee754_atan2+0x160>)
 800e086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e08a:	e778      	b.n	800df7e <__ieee754_atan2+0x3e>
 800e08c:	f3af 8000 	nop.w
 800e090:	33145c07 	.word	0x33145c07
 800e094:	3ca1a626 	.word	0x3ca1a626
 800e098:	54442d18 	.word	0x54442d18
 800e09c:	400921fb 	.word	0x400921fb
 800e0a0:	54442d18 	.word	0x54442d18
 800e0a4:	3ff921fb 	.word	0x3ff921fb
 800e0a8:	54442d18 	.word	0x54442d18
 800e0ac:	3fe921fb 	.word	0x3fe921fb
 800e0b0:	08010ff8 	.word	0x08010ff8
 800e0b4:	08010fe0 	.word	0x08010fe0
 800e0b8:	54442d18 	.word	0x54442d18
 800e0bc:	c00921fb 	.word	0xc00921fb
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	bff921fb 	.word	0xbff921fb
 800e0c8:	7ff00000 	.word	0x7ff00000
 800e0cc:	00000000 	.word	0x00000000

0800e0d0 <atan>:
 800e0d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	ec55 4b10 	vmov	r4, r5, d0
 800e0d8:	4bbf      	ldr	r3, [pc, #764]	@ (800e3d8 <atan+0x308>)
 800e0da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e0de:	429e      	cmp	r6, r3
 800e0e0:	46ab      	mov	fp, r5
 800e0e2:	d918      	bls.n	800e116 <atan+0x46>
 800e0e4:	4bbd      	ldr	r3, [pc, #756]	@ (800e3dc <atan+0x30c>)
 800e0e6:	429e      	cmp	r6, r3
 800e0e8:	d801      	bhi.n	800e0ee <atan+0x1e>
 800e0ea:	d109      	bne.n	800e100 <atan+0x30>
 800e0ec:	b144      	cbz	r4, 800e100 <atan+0x30>
 800e0ee:	4622      	mov	r2, r4
 800e0f0:	462b      	mov	r3, r5
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 f8d1 	bl	800029c <__adddf3>
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	460d      	mov	r5, r1
 800e0fe:	e006      	b.n	800e10e <atan+0x3e>
 800e100:	f1bb 0f00 	cmp.w	fp, #0
 800e104:	f340 812b 	ble.w	800e35e <atan+0x28e>
 800e108:	a597      	add	r5, pc, #604	@ (adr r5, 800e368 <atan+0x298>)
 800e10a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e10e:	ec45 4b10 	vmov	d0, r4, r5
 800e112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	4bb2      	ldr	r3, [pc, #712]	@ (800e3e0 <atan+0x310>)
 800e118:	429e      	cmp	r6, r3
 800e11a:	d813      	bhi.n	800e144 <atan+0x74>
 800e11c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e120:	429e      	cmp	r6, r3
 800e122:	d80c      	bhi.n	800e13e <atan+0x6e>
 800e124:	a392      	add	r3, pc, #584	@ (adr r3, 800e370 <atan+0x2a0>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	4620      	mov	r0, r4
 800e12c:	4629      	mov	r1, r5
 800e12e:	f7f2 f8b5 	bl	800029c <__adddf3>
 800e132:	4bac      	ldr	r3, [pc, #688]	@ (800e3e4 <atan+0x314>)
 800e134:	2200      	movs	r2, #0
 800e136:	f7f2 fcf7 	bl	8000b28 <__aeabi_dcmpgt>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d1e7      	bne.n	800e10e <atan+0x3e>
 800e13e:	f04f 3aff 	mov.w	sl, #4294967295
 800e142:	e029      	b.n	800e198 <atan+0xc8>
 800e144:	f000 f95c 	bl	800e400 <fabs>
 800e148:	4ba7      	ldr	r3, [pc, #668]	@ (800e3e8 <atan+0x318>)
 800e14a:	429e      	cmp	r6, r3
 800e14c:	ec55 4b10 	vmov	r4, r5, d0
 800e150:	f200 80bc 	bhi.w	800e2cc <atan+0x1fc>
 800e154:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e158:	429e      	cmp	r6, r3
 800e15a:	f200 809e 	bhi.w	800e29a <atan+0x1ca>
 800e15e:	4622      	mov	r2, r4
 800e160:	462b      	mov	r3, r5
 800e162:	4620      	mov	r0, r4
 800e164:	4629      	mov	r1, r5
 800e166:	f7f2 f899 	bl	800029c <__adddf3>
 800e16a:	4b9e      	ldr	r3, [pc, #632]	@ (800e3e4 <atan+0x314>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	f7f2 f893 	bl	8000298 <__aeabi_dsub>
 800e172:	2200      	movs	r2, #0
 800e174:	4606      	mov	r6, r0
 800e176:	460f      	mov	r7, r1
 800e178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e17c:	4620      	mov	r0, r4
 800e17e:	4629      	mov	r1, r5
 800e180:	f7f2 f88c 	bl	800029c <__adddf3>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 fb66 	bl	800085c <__aeabi_ddiv>
 800e190:	f04f 0a00 	mov.w	sl, #0
 800e194:	4604      	mov	r4, r0
 800e196:	460d      	mov	r5, r1
 800e198:	4622      	mov	r2, r4
 800e19a:	462b      	mov	r3, r5
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 fa32 	bl	8000608 <__aeabi_dmul>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4680      	mov	r8, r0
 800e1aa:	4689      	mov	r9, r1
 800e1ac:	f7f2 fa2c 	bl	8000608 <__aeabi_dmul>
 800e1b0:	a371      	add	r3, pc, #452	@ (adr r3, 800e378 <atan+0x2a8>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	460f      	mov	r7, r1
 800e1ba:	f7f2 fa25 	bl	8000608 <__aeabi_dmul>
 800e1be:	a370      	add	r3, pc, #448	@ (adr r3, 800e380 <atan+0x2b0>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	f7f2 f86a 	bl	800029c <__adddf3>
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	463b      	mov	r3, r7
 800e1cc:	f7f2 fa1c 	bl	8000608 <__aeabi_dmul>
 800e1d0:	a36d      	add	r3, pc, #436	@ (adr r3, 800e388 <atan+0x2b8>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f2 f861 	bl	800029c <__adddf3>
 800e1da:	4632      	mov	r2, r6
 800e1dc:	463b      	mov	r3, r7
 800e1de:	f7f2 fa13 	bl	8000608 <__aeabi_dmul>
 800e1e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e390 <atan+0x2c0>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	f7f2 f858 	bl	800029c <__adddf3>
 800e1ec:	4632      	mov	r2, r6
 800e1ee:	463b      	mov	r3, r7
 800e1f0:	f7f2 fa0a 	bl	8000608 <__aeabi_dmul>
 800e1f4:	a368      	add	r3, pc, #416	@ (adr r3, 800e398 <atan+0x2c8>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f84f 	bl	800029c <__adddf3>
 800e1fe:	4632      	mov	r2, r6
 800e200:	463b      	mov	r3, r7
 800e202:	f7f2 fa01 	bl	8000608 <__aeabi_dmul>
 800e206:	a366      	add	r3, pc, #408	@ (adr r3, 800e3a0 <atan+0x2d0>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	f7f2 f846 	bl	800029c <__adddf3>
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	f7f2 f9f8 	bl	8000608 <__aeabi_dmul>
 800e218:	a363      	add	r3, pc, #396	@ (adr r3, 800e3a8 <atan+0x2d8>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	4680      	mov	r8, r0
 800e220:	4689      	mov	r9, r1
 800e222:	4630      	mov	r0, r6
 800e224:	4639      	mov	r1, r7
 800e226:	f7f2 f9ef 	bl	8000608 <__aeabi_dmul>
 800e22a:	a361      	add	r3, pc, #388	@ (adr r3, 800e3b0 <atan+0x2e0>)
 800e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e230:	f7f2 f832 	bl	8000298 <__aeabi_dsub>
 800e234:	4632      	mov	r2, r6
 800e236:	463b      	mov	r3, r7
 800e238:	f7f2 f9e6 	bl	8000608 <__aeabi_dmul>
 800e23c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e3b8 <atan+0x2e8>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	f7f2 f829 	bl	8000298 <__aeabi_dsub>
 800e246:	4632      	mov	r2, r6
 800e248:	463b      	mov	r3, r7
 800e24a:	f7f2 f9dd 	bl	8000608 <__aeabi_dmul>
 800e24e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e3c0 <atan+0x2f0>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 f820 	bl	8000298 <__aeabi_dsub>
 800e258:	4632      	mov	r2, r6
 800e25a:	463b      	mov	r3, r7
 800e25c:	f7f2 f9d4 	bl	8000608 <__aeabi_dmul>
 800e260:	a359      	add	r3, pc, #356	@ (adr r3, 800e3c8 <atan+0x2f8>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f2 f817 	bl	8000298 <__aeabi_dsub>
 800e26a:	4632      	mov	r2, r6
 800e26c:	463b      	mov	r3, r7
 800e26e:	f7f2 f9cb 	bl	8000608 <__aeabi_dmul>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4640      	mov	r0, r8
 800e278:	4649      	mov	r1, r9
 800e27a:	f7f2 f80f 	bl	800029c <__adddf3>
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	f7f2 f9c1 	bl	8000608 <__aeabi_dmul>
 800e286:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	d148      	bne.n	800e322 <atan+0x252>
 800e290:	4620      	mov	r0, r4
 800e292:	4629      	mov	r1, r5
 800e294:	f7f2 f800 	bl	8000298 <__aeabi_dsub>
 800e298:	e72f      	b.n	800e0fa <atan+0x2a>
 800e29a:	4b52      	ldr	r3, [pc, #328]	@ (800e3e4 <atan+0x314>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	f7f1 fff9 	bl	8000298 <__aeabi_dsub>
 800e2a6:	4b4f      	ldr	r3, [pc, #316]	@ (800e3e4 <atan+0x314>)
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	460f      	mov	r7, r1
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	f7f1 fff3 	bl	800029c <__adddf3>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 facd 	bl	800085c <__aeabi_ddiv>
 800e2c2:	f04f 0a01 	mov.w	sl, #1
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	e765      	b.n	800e198 <atan+0xc8>
 800e2cc:	4b47      	ldr	r3, [pc, #284]	@ (800e3ec <atan+0x31c>)
 800e2ce:	429e      	cmp	r6, r3
 800e2d0:	d21c      	bcs.n	800e30c <atan+0x23c>
 800e2d2:	4b47      	ldr	r3, [pc, #284]	@ (800e3f0 <atan+0x320>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	f7f1 ffdd 	bl	8000298 <__aeabi_dsub>
 800e2de:	4b44      	ldr	r3, [pc, #272]	@ (800e3f0 <atan+0x320>)
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	460f      	mov	r7, r1
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f2 f98d 	bl	8000608 <__aeabi_dmul>
 800e2ee:	4b3d      	ldr	r3, [pc, #244]	@ (800e3e4 <atan+0x314>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f7f1 ffd3 	bl	800029c <__adddf3>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	f7f2 faad 	bl	800085c <__aeabi_ddiv>
 800e302:	f04f 0a02 	mov.w	sl, #2
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	e745      	b.n	800e198 <atan+0xc8>
 800e30c:	4622      	mov	r2, r4
 800e30e:	462b      	mov	r3, r5
 800e310:	4938      	ldr	r1, [pc, #224]	@ (800e3f4 <atan+0x324>)
 800e312:	2000      	movs	r0, #0
 800e314:	f7f2 faa2 	bl	800085c <__aeabi_ddiv>
 800e318:	f04f 0a03 	mov.w	sl, #3
 800e31c:	4604      	mov	r4, r0
 800e31e:	460d      	mov	r5, r1
 800e320:	e73a      	b.n	800e198 <atan+0xc8>
 800e322:	4b35      	ldr	r3, [pc, #212]	@ (800e3f8 <atan+0x328>)
 800e324:	4e35      	ldr	r6, [pc, #212]	@ (800e3fc <atan+0x32c>)
 800e326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32e:	f7f1 ffb3 	bl	8000298 <__aeabi_dsub>
 800e332:	4622      	mov	r2, r4
 800e334:	462b      	mov	r3, r5
 800e336:	f7f1 ffaf 	bl	8000298 <__aeabi_dsub>
 800e33a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e346:	f7f1 ffa7 	bl	8000298 <__aeabi_dsub>
 800e34a:	f1bb 0f00 	cmp.w	fp, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	460d      	mov	r5, r1
 800e352:	f6bf aedc 	bge.w	800e10e <atan+0x3e>
 800e356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e35a:	461d      	mov	r5, r3
 800e35c:	e6d7      	b.n	800e10e <atan+0x3e>
 800e35e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e3d0 <atan+0x300>)
 800e360:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e364:	e6d3      	b.n	800e10e <atan+0x3e>
 800e366:	bf00      	nop
 800e368:	54442d18 	.word	0x54442d18
 800e36c:	3ff921fb 	.word	0x3ff921fb
 800e370:	8800759c 	.word	0x8800759c
 800e374:	7e37e43c 	.word	0x7e37e43c
 800e378:	e322da11 	.word	0xe322da11
 800e37c:	3f90ad3a 	.word	0x3f90ad3a
 800e380:	24760deb 	.word	0x24760deb
 800e384:	3fa97b4b 	.word	0x3fa97b4b
 800e388:	a0d03d51 	.word	0xa0d03d51
 800e38c:	3fb10d66 	.word	0x3fb10d66
 800e390:	c54c206e 	.word	0xc54c206e
 800e394:	3fb745cd 	.word	0x3fb745cd
 800e398:	920083ff 	.word	0x920083ff
 800e39c:	3fc24924 	.word	0x3fc24924
 800e3a0:	5555550d 	.word	0x5555550d
 800e3a4:	3fd55555 	.word	0x3fd55555
 800e3a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e3ac:	bfa2b444 	.word	0xbfa2b444
 800e3b0:	52defd9a 	.word	0x52defd9a
 800e3b4:	3fadde2d 	.word	0x3fadde2d
 800e3b8:	af749a6d 	.word	0xaf749a6d
 800e3bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800e3c0:	fe231671 	.word	0xfe231671
 800e3c4:	3fbc71c6 	.word	0x3fbc71c6
 800e3c8:	9998ebc4 	.word	0x9998ebc4
 800e3cc:	3fc99999 	.word	0x3fc99999
 800e3d0:	54442d18 	.word	0x54442d18
 800e3d4:	bff921fb 	.word	0xbff921fb
 800e3d8:	440fffff 	.word	0x440fffff
 800e3dc:	7ff00000 	.word	0x7ff00000
 800e3e0:	3fdbffff 	.word	0x3fdbffff
 800e3e4:	3ff00000 	.word	0x3ff00000
 800e3e8:	3ff2ffff 	.word	0x3ff2ffff
 800e3ec:	40038000 	.word	0x40038000
 800e3f0:	3ff80000 	.word	0x3ff80000
 800e3f4:	bff00000 	.word	0xbff00000
 800e3f8:	08011010 	.word	0x08011010
 800e3fc:	08011030 	.word	0x08011030

0800e400 <fabs>:
 800e400:	ec51 0b10 	vmov	r0, r1, d0
 800e404:	4602      	mov	r2, r0
 800e406:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e40a:	ec43 2b10 	vmov	d0, r2, r3
 800e40e:	4770      	bx	lr

0800e410 <__cvt>:
 800e410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e414:	ec57 6b10 	vmov	r6, r7, d0
 800e418:	2f00      	cmp	r7, #0
 800e41a:	460c      	mov	r4, r1
 800e41c:	4619      	mov	r1, r3
 800e41e:	463b      	mov	r3, r7
 800e420:	bfbb      	ittet	lt
 800e422:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e426:	461f      	movlt	r7, r3
 800e428:	2300      	movge	r3, #0
 800e42a:	232d      	movlt	r3, #45	@ 0x2d
 800e42c:	700b      	strb	r3, [r1, #0]
 800e42e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e430:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e434:	4691      	mov	r9, r2
 800e436:	f023 0820 	bic.w	r8, r3, #32
 800e43a:	bfbc      	itt	lt
 800e43c:	4632      	movlt	r2, r6
 800e43e:	4616      	movlt	r6, r2
 800e440:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e444:	d005      	beq.n	800e452 <__cvt+0x42>
 800e446:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e44a:	d100      	bne.n	800e44e <__cvt+0x3e>
 800e44c:	3401      	adds	r4, #1
 800e44e:	2102      	movs	r1, #2
 800e450:	e000      	b.n	800e454 <__cvt+0x44>
 800e452:	2103      	movs	r1, #3
 800e454:	ab03      	add	r3, sp, #12
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	ab02      	add	r3, sp, #8
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	ec47 6b10 	vmov	d0, r6, r7
 800e460:	4653      	mov	r3, sl
 800e462:	4622      	mov	r2, r4
 800e464:	f000 ff40 	bl	800f2e8 <_dtoa_r>
 800e468:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e46c:	4605      	mov	r5, r0
 800e46e:	d119      	bne.n	800e4a4 <__cvt+0x94>
 800e470:	f019 0f01 	tst.w	r9, #1
 800e474:	d00e      	beq.n	800e494 <__cvt+0x84>
 800e476:	eb00 0904 	add.w	r9, r0, r4
 800e47a:	2200      	movs	r2, #0
 800e47c:	2300      	movs	r3, #0
 800e47e:	4630      	mov	r0, r6
 800e480:	4639      	mov	r1, r7
 800e482:	f7f2 fb29 	bl	8000ad8 <__aeabi_dcmpeq>
 800e486:	b108      	cbz	r0, 800e48c <__cvt+0x7c>
 800e488:	f8cd 900c 	str.w	r9, [sp, #12]
 800e48c:	2230      	movs	r2, #48	@ 0x30
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	454b      	cmp	r3, r9
 800e492:	d31e      	bcc.n	800e4d2 <__cvt+0xc2>
 800e494:	9b03      	ldr	r3, [sp, #12]
 800e496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e498:	1b5b      	subs	r3, r3, r5
 800e49a:	4628      	mov	r0, r5
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	b004      	add	sp, #16
 800e4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e4a8:	eb00 0904 	add.w	r9, r0, r4
 800e4ac:	d1e5      	bne.n	800e47a <__cvt+0x6a>
 800e4ae:	7803      	ldrb	r3, [r0, #0]
 800e4b0:	2b30      	cmp	r3, #48	@ 0x30
 800e4b2:	d10a      	bne.n	800e4ca <__cvt+0xba>
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f2 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4c0:	b918      	cbnz	r0, 800e4ca <__cvt+0xba>
 800e4c2:	f1c4 0401 	rsb	r4, r4, #1
 800e4c6:	f8ca 4000 	str.w	r4, [sl]
 800e4ca:	f8da 3000 	ldr.w	r3, [sl]
 800e4ce:	4499      	add	r9, r3
 800e4d0:	e7d3      	b.n	800e47a <__cvt+0x6a>
 800e4d2:	1c59      	adds	r1, r3, #1
 800e4d4:	9103      	str	r1, [sp, #12]
 800e4d6:	701a      	strb	r2, [r3, #0]
 800e4d8:	e7d9      	b.n	800e48e <__cvt+0x7e>

0800e4da <__exponent>:
 800e4da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4dc:	2900      	cmp	r1, #0
 800e4de:	bfba      	itte	lt
 800e4e0:	4249      	neglt	r1, r1
 800e4e2:	232d      	movlt	r3, #45	@ 0x2d
 800e4e4:	232b      	movge	r3, #43	@ 0x2b
 800e4e6:	2909      	cmp	r1, #9
 800e4e8:	7002      	strb	r2, [r0, #0]
 800e4ea:	7043      	strb	r3, [r0, #1]
 800e4ec:	dd29      	ble.n	800e542 <__exponent+0x68>
 800e4ee:	f10d 0307 	add.w	r3, sp, #7
 800e4f2:	461d      	mov	r5, r3
 800e4f4:	270a      	movs	r7, #10
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e4fc:	fb07 1416 	mls	r4, r7, r6, r1
 800e500:	3430      	adds	r4, #48	@ 0x30
 800e502:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e506:	460c      	mov	r4, r1
 800e508:	2c63      	cmp	r4, #99	@ 0x63
 800e50a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e50e:	4631      	mov	r1, r6
 800e510:	dcf1      	bgt.n	800e4f6 <__exponent+0x1c>
 800e512:	3130      	adds	r1, #48	@ 0x30
 800e514:	1e94      	subs	r4, r2, #2
 800e516:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e51a:	1c41      	adds	r1, r0, #1
 800e51c:	4623      	mov	r3, r4
 800e51e:	42ab      	cmp	r3, r5
 800e520:	d30a      	bcc.n	800e538 <__exponent+0x5e>
 800e522:	f10d 0309 	add.w	r3, sp, #9
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	42ac      	cmp	r4, r5
 800e52a:	bf88      	it	hi
 800e52c:	2300      	movhi	r3, #0
 800e52e:	3302      	adds	r3, #2
 800e530:	4403      	add	r3, r0
 800e532:	1a18      	subs	r0, r3, r0
 800e534:	b003      	add	sp, #12
 800e536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e538:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e53c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e540:	e7ed      	b.n	800e51e <__exponent+0x44>
 800e542:	2330      	movs	r3, #48	@ 0x30
 800e544:	3130      	adds	r1, #48	@ 0x30
 800e546:	7083      	strb	r3, [r0, #2]
 800e548:	70c1      	strb	r1, [r0, #3]
 800e54a:	1d03      	adds	r3, r0, #4
 800e54c:	e7f1      	b.n	800e532 <__exponent+0x58>
	...

0800e550 <_printf_float>:
 800e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	b08d      	sub	sp, #52	@ 0x34
 800e556:	460c      	mov	r4, r1
 800e558:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e55c:	4616      	mov	r6, r2
 800e55e:	461f      	mov	r7, r3
 800e560:	4605      	mov	r5, r0
 800e562:	f000 fdbf 	bl	800f0e4 <_localeconv_r>
 800e566:	6803      	ldr	r3, [r0, #0]
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f1 fe88 	bl	8000280 <strlen>
 800e570:	2300      	movs	r3, #0
 800e572:	930a      	str	r3, [sp, #40]	@ 0x28
 800e574:	f8d8 3000 	ldr.w	r3, [r8]
 800e578:	9005      	str	r0, [sp, #20]
 800e57a:	3307      	adds	r3, #7
 800e57c:	f023 0307 	bic.w	r3, r3, #7
 800e580:	f103 0208 	add.w	r2, r3, #8
 800e584:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e588:	f8d4 b000 	ldr.w	fp, [r4]
 800e58c:	f8c8 2000 	str.w	r2, [r8]
 800e590:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e594:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e598:	9307      	str	r3, [sp, #28]
 800e59a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e59e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e5a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5a6:	4b9c      	ldr	r3, [pc, #624]	@ (800e818 <_printf_float+0x2c8>)
 800e5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ac:	f7f2 fac6 	bl	8000b3c <__aeabi_dcmpun>
 800e5b0:	bb70      	cbnz	r0, 800e610 <_printf_float+0xc0>
 800e5b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5b6:	4b98      	ldr	r3, [pc, #608]	@ (800e818 <_printf_float+0x2c8>)
 800e5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5bc:	f7f2 faa0 	bl	8000b00 <__aeabi_dcmple>
 800e5c0:	bb30      	cbnz	r0, 800e610 <_printf_float+0xc0>
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4640      	mov	r0, r8
 800e5c8:	4649      	mov	r1, r9
 800e5ca:	f7f2 fa8f 	bl	8000aec <__aeabi_dcmplt>
 800e5ce:	b110      	cbz	r0, 800e5d6 <_printf_float+0x86>
 800e5d0:	232d      	movs	r3, #45	@ 0x2d
 800e5d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5d6:	4a91      	ldr	r2, [pc, #580]	@ (800e81c <_printf_float+0x2cc>)
 800e5d8:	4b91      	ldr	r3, [pc, #580]	@ (800e820 <_printf_float+0x2d0>)
 800e5da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e5de:	bf94      	ite	ls
 800e5e0:	4690      	movls	r8, r2
 800e5e2:	4698      	movhi	r8, r3
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	6123      	str	r3, [r4, #16]
 800e5e8:	f02b 0304 	bic.w	r3, fp, #4
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	f04f 0900 	mov.w	r9, #0
 800e5f2:	9700      	str	r7, [sp, #0]
 800e5f4:	4633      	mov	r3, r6
 800e5f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f000 f9d2 	bl	800e9a4 <_printf_common>
 800e600:	3001      	adds	r0, #1
 800e602:	f040 808d 	bne.w	800e720 <_printf_float+0x1d0>
 800e606:	f04f 30ff 	mov.w	r0, #4294967295
 800e60a:	b00d      	add	sp, #52	@ 0x34
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	4642      	mov	r2, r8
 800e612:	464b      	mov	r3, r9
 800e614:	4640      	mov	r0, r8
 800e616:	4649      	mov	r1, r9
 800e618:	f7f2 fa90 	bl	8000b3c <__aeabi_dcmpun>
 800e61c:	b140      	cbz	r0, 800e630 <_printf_float+0xe0>
 800e61e:	464b      	mov	r3, r9
 800e620:	2b00      	cmp	r3, #0
 800e622:	bfbc      	itt	lt
 800e624:	232d      	movlt	r3, #45	@ 0x2d
 800e626:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e62a:	4a7e      	ldr	r2, [pc, #504]	@ (800e824 <_printf_float+0x2d4>)
 800e62c:	4b7e      	ldr	r3, [pc, #504]	@ (800e828 <_printf_float+0x2d8>)
 800e62e:	e7d4      	b.n	800e5da <_printf_float+0x8a>
 800e630:	6863      	ldr	r3, [r4, #4]
 800e632:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e636:	9206      	str	r2, [sp, #24]
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	d13b      	bne.n	800e6b4 <_printf_float+0x164>
 800e63c:	2306      	movs	r3, #6
 800e63e:	6063      	str	r3, [r4, #4]
 800e640:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e644:	2300      	movs	r3, #0
 800e646:	6022      	str	r2, [r4, #0]
 800e648:	9303      	str	r3, [sp, #12]
 800e64a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e64c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e650:	ab09      	add	r3, sp, #36	@ 0x24
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	6861      	ldr	r1, [r4, #4]
 800e656:	ec49 8b10 	vmov	d0, r8, r9
 800e65a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e65e:	4628      	mov	r0, r5
 800e660:	f7ff fed6 	bl	800e410 <__cvt>
 800e664:	9b06      	ldr	r3, [sp, #24]
 800e666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e668:	2b47      	cmp	r3, #71	@ 0x47
 800e66a:	4680      	mov	r8, r0
 800e66c:	d129      	bne.n	800e6c2 <_printf_float+0x172>
 800e66e:	1cc8      	adds	r0, r1, #3
 800e670:	db02      	blt.n	800e678 <_printf_float+0x128>
 800e672:	6863      	ldr	r3, [r4, #4]
 800e674:	4299      	cmp	r1, r3
 800e676:	dd41      	ble.n	800e6fc <_printf_float+0x1ac>
 800e678:	f1aa 0a02 	sub.w	sl, sl, #2
 800e67c:	fa5f fa8a 	uxtb.w	sl, sl
 800e680:	3901      	subs	r1, #1
 800e682:	4652      	mov	r2, sl
 800e684:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e688:	9109      	str	r1, [sp, #36]	@ 0x24
 800e68a:	f7ff ff26 	bl	800e4da <__exponent>
 800e68e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e690:	1813      	adds	r3, r2, r0
 800e692:	2a01      	cmp	r2, #1
 800e694:	4681      	mov	r9, r0
 800e696:	6123      	str	r3, [r4, #16]
 800e698:	dc02      	bgt.n	800e6a0 <_printf_float+0x150>
 800e69a:	6822      	ldr	r2, [r4, #0]
 800e69c:	07d2      	lsls	r2, r2, #31
 800e69e:	d501      	bpl.n	800e6a4 <_printf_float+0x154>
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	6123      	str	r3, [r4, #16]
 800e6a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d0a2      	beq.n	800e5f2 <_printf_float+0xa2>
 800e6ac:	232d      	movs	r3, #45	@ 0x2d
 800e6ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6b2:	e79e      	b.n	800e5f2 <_printf_float+0xa2>
 800e6b4:	9a06      	ldr	r2, [sp, #24]
 800e6b6:	2a47      	cmp	r2, #71	@ 0x47
 800e6b8:	d1c2      	bne.n	800e640 <_printf_float+0xf0>
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1c0      	bne.n	800e640 <_printf_float+0xf0>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e7bd      	b.n	800e63e <_printf_float+0xee>
 800e6c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e6c6:	d9db      	bls.n	800e680 <_printf_float+0x130>
 800e6c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e6cc:	d118      	bne.n	800e700 <_printf_float+0x1b0>
 800e6ce:	2900      	cmp	r1, #0
 800e6d0:	6863      	ldr	r3, [r4, #4]
 800e6d2:	dd0b      	ble.n	800e6ec <_printf_float+0x19c>
 800e6d4:	6121      	str	r1, [r4, #16]
 800e6d6:	b913      	cbnz	r3, 800e6de <_printf_float+0x18e>
 800e6d8:	6822      	ldr	r2, [r4, #0]
 800e6da:	07d0      	lsls	r0, r2, #31
 800e6dc:	d502      	bpl.n	800e6e4 <_printf_float+0x194>
 800e6de:	3301      	adds	r3, #1
 800e6e0:	440b      	add	r3, r1
 800e6e2:	6123      	str	r3, [r4, #16]
 800e6e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e6e6:	f04f 0900 	mov.w	r9, #0
 800e6ea:	e7db      	b.n	800e6a4 <_printf_float+0x154>
 800e6ec:	b913      	cbnz	r3, 800e6f4 <_printf_float+0x1a4>
 800e6ee:	6822      	ldr	r2, [r4, #0]
 800e6f0:	07d2      	lsls	r2, r2, #31
 800e6f2:	d501      	bpl.n	800e6f8 <_printf_float+0x1a8>
 800e6f4:	3302      	adds	r3, #2
 800e6f6:	e7f4      	b.n	800e6e2 <_printf_float+0x192>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e7f2      	b.n	800e6e2 <_printf_float+0x192>
 800e6fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e702:	4299      	cmp	r1, r3
 800e704:	db05      	blt.n	800e712 <_printf_float+0x1c2>
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	6121      	str	r1, [r4, #16]
 800e70a:	07d8      	lsls	r0, r3, #31
 800e70c:	d5ea      	bpl.n	800e6e4 <_printf_float+0x194>
 800e70e:	1c4b      	adds	r3, r1, #1
 800e710:	e7e7      	b.n	800e6e2 <_printf_float+0x192>
 800e712:	2900      	cmp	r1, #0
 800e714:	bfd4      	ite	le
 800e716:	f1c1 0202 	rsble	r2, r1, #2
 800e71a:	2201      	movgt	r2, #1
 800e71c:	4413      	add	r3, r2
 800e71e:	e7e0      	b.n	800e6e2 <_printf_float+0x192>
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	055a      	lsls	r2, r3, #21
 800e724:	d407      	bmi.n	800e736 <_printf_float+0x1e6>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	4642      	mov	r2, r8
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	d12b      	bne.n	800e78c <_printf_float+0x23c>
 800e734:	e767      	b.n	800e606 <_printf_float+0xb6>
 800e736:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e73a:	f240 80dd 	bls.w	800e8f8 <_printf_float+0x3a8>
 800e73e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e742:	2200      	movs	r2, #0
 800e744:	2300      	movs	r3, #0
 800e746:	f7f2 f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d033      	beq.n	800e7b6 <_printf_float+0x266>
 800e74e:	4a37      	ldr	r2, [pc, #220]	@ (800e82c <_printf_float+0x2dc>)
 800e750:	2301      	movs	r3, #1
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	f43f af54 	beq.w	800e606 <_printf_float+0xb6>
 800e75e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e762:	4543      	cmp	r3, r8
 800e764:	db02      	blt.n	800e76c <_printf_float+0x21c>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	07d8      	lsls	r0, r3, #31
 800e76a:	d50f      	bpl.n	800e78c <_printf_float+0x23c>
 800e76c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e770:	4631      	mov	r1, r6
 800e772:	4628      	mov	r0, r5
 800e774:	47b8      	blx	r7
 800e776:	3001      	adds	r0, #1
 800e778:	f43f af45 	beq.w	800e606 <_printf_float+0xb6>
 800e77c:	f04f 0900 	mov.w	r9, #0
 800e780:	f108 38ff 	add.w	r8, r8, #4294967295
 800e784:	f104 0a1a 	add.w	sl, r4, #26
 800e788:	45c8      	cmp	r8, r9
 800e78a:	dc09      	bgt.n	800e7a0 <_printf_float+0x250>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	079b      	lsls	r3, r3, #30
 800e790:	f100 8103 	bmi.w	800e99a <_printf_float+0x44a>
 800e794:	68e0      	ldr	r0, [r4, #12]
 800e796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e798:	4298      	cmp	r0, r3
 800e79a:	bfb8      	it	lt
 800e79c:	4618      	movlt	r0, r3
 800e79e:	e734      	b.n	800e60a <_printf_float+0xba>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	4652      	mov	r2, sl
 800e7a4:	4631      	mov	r1, r6
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	47b8      	blx	r7
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	f43f af2b 	beq.w	800e606 <_printf_float+0xb6>
 800e7b0:	f109 0901 	add.w	r9, r9, #1
 800e7b4:	e7e8      	b.n	800e788 <_printf_float+0x238>
 800e7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dc39      	bgt.n	800e830 <_printf_float+0x2e0>
 800e7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e82c <_printf_float+0x2dc>)
 800e7be:	2301      	movs	r3, #1
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	f43f af1d 	beq.w	800e606 <_printf_float+0xb6>
 800e7cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7d0:	ea59 0303 	orrs.w	r3, r9, r3
 800e7d4:	d102      	bne.n	800e7dc <_printf_float+0x28c>
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	07d9      	lsls	r1, r3, #31
 800e7da:	d5d7      	bpl.n	800e78c <_printf_float+0x23c>
 800e7dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	47b8      	blx	r7
 800e7e6:	3001      	adds	r0, #1
 800e7e8:	f43f af0d 	beq.w	800e606 <_printf_float+0xb6>
 800e7ec:	f04f 0a00 	mov.w	sl, #0
 800e7f0:	f104 0b1a 	add.w	fp, r4, #26
 800e7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f6:	425b      	negs	r3, r3
 800e7f8:	4553      	cmp	r3, sl
 800e7fa:	dc01      	bgt.n	800e800 <_printf_float+0x2b0>
 800e7fc:	464b      	mov	r3, r9
 800e7fe:	e793      	b.n	800e728 <_printf_float+0x1d8>
 800e800:	2301      	movs	r3, #1
 800e802:	465a      	mov	r2, fp
 800e804:	4631      	mov	r1, r6
 800e806:	4628      	mov	r0, r5
 800e808:	47b8      	blx	r7
 800e80a:	3001      	adds	r0, #1
 800e80c:	f43f aefb 	beq.w	800e606 <_printf_float+0xb6>
 800e810:	f10a 0a01 	add.w	sl, sl, #1
 800e814:	e7ee      	b.n	800e7f4 <_printf_float+0x2a4>
 800e816:	bf00      	nop
 800e818:	7fefffff 	.word	0x7fefffff
 800e81c:	08011050 	.word	0x08011050
 800e820:	08011054 	.word	0x08011054
 800e824:	08011058 	.word	0x08011058
 800e828:	0801105c 	.word	0x0801105c
 800e82c:	08011060 	.word	0x08011060
 800e830:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e832:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e836:	4553      	cmp	r3, sl
 800e838:	bfa8      	it	ge
 800e83a:	4653      	movge	r3, sl
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	4699      	mov	r9, r3
 800e840:	dc36      	bgt.n	800e8b0 <_printf_float+0x360>
 800e842:	f04f 0b00 	mov.w	fp, #0
 800e846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e84a:	f104 021a 	add.w	r2, r4, #26
 800e84e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e850:	9306      	str	r3, [sp, #24]
 800e852:	eba3 0309 	sub.w	r3, r3, r9
 800e856:	455b      	cmp	r3, fp
 800e858:	dc31      	bgt.n	800e8be <_printf_float+0x36e>
 800e85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85c:	459a      	cmp	sl, r3
 800e85e:	dc3a      	bgt.n	800e8d6 <_printf_float+0x386>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	07da      	lsls	r2, r3, #31
 800e864:	d437      	bmi.n	800e8d6 <_printf_float+0x386>
 800e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e868:	ebaa 0903 	sub.w	r9, sl, r3
 800e86c:	9b06      	ldr	r3, [sp, #24]
 800e86e:	ebaa 0303 	sub.w	r3, sl, r3
 800e872:	4599      	cmp	r9, r3
 800e874:	bfa8      	it	ge
 800e876:	4699      	movge	r9, r3
 800e878:	f1b9 0f00 	cmp.w	r9, #0
 800e87c:	dc33      	bgt.n	800e8e6 <_printf_float+0x396>
 800e87e:	f04f 0800 	mov.w	r8, #0
 800e882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e886:	f104 0b1a 	add.w	fp, r4, #26
 800e88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e88c:	ebaa 0303 	sub.w	r3, sl, r3
 800e890:	eba3 0309 	sub.w	r3, r3, r9
 800e894:	4543      	cmp	r3, r8
 800e896:	f77f af79 	ble.w	800e78c <_printf_float+0x23c>
 800e89a:	2301      	movs	r3, #1
 800e89c:	465a      	mov	r2, fp
 800e89e:	4631      	mov	r1, r6
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	47b8      	blx	r7
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	f43f aeae 	beq.w	800e606 <_printf_float+0xb6>
 800e8aa:	f108 0801 	add.w	r8, r8, #1
 800e8ae:	e7ec      	b.n	800e88a <_printf_float+0x33a>
 800e8b0:	4642      	mov	r2, r8
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	47b8      	blx	r7
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	d1c2      	bne.n	800e842 <_printf_float+0x2f2>
 800e8bc:	e6a3      	b.n	800e606 <_printf_float+0xb6>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	9206      	str	r2, [sp, #24]
 800e8c6:	47b8      	blx	r7
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	f43f ae9c 	beq.w	800e606 <_printf_float+0xb6>
 800e8ce:	9a06      	ldr	r2, [sp, #24]
 800e8d0:	f10b 0b01 	add.w	fp, fp, #1
 800e8d4:	e7bb      	b.n	800e84e <_printf_float+0x2fe>
 800e8d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8da:	4631      	mov	r1, r6
 800e8dc:	4628      	mov	r0, r5
 800e8de:	47b8      	blx	r7
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d1c0      	bne.n	800e866 <_printf_float+0x316>
 800e8e4:	e68f      	b.n	800e606 <_printf_float+0xb6>
 800e8e6:	9a06      	ldr	r2, [sp, #24]
 800e8e8:	464b      	mov	r3, r9
 800e8ea:	4442      	add	r2, r8
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	47b8      	blx	r7
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	d1c3      	bne.n	800e87e <_printf_float+0x32e>
 800e8f6:	e686      	b.n	800e606 <_printf_float+0xb6>
 800e8f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e8fc:	f1ba 0f01 	cmp.w	sl, #1
 800e900:	dc01      	bgt.n	800e906 <_printf_float+0x3b6>
 800e902:	07db      	lsls	r3, r3, #31
 800e904:	d536      	bpl.n	800e974 <_printf_float+0x424>
 800e906:	2301      	movs	r3, #1
 800e908:	4642      	mov	r2, r8
 800e90a:	4631      	mov	r1, r6
 800e90c:	4628      	mov	r0, r5
 800e90e:	47b8      	blx	r7
 800e910:	3001      	adds	r0, #1
 800e912:	f43f ae78 	beq.w	800e606 <_printf_float+0xb6>
 800e916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e91a:	4631      	mov	r1, r6
 800e91c:	4628      	mov	r0, r5
 800e91e:	47b8      	blx	r7
 800e920:	3001      	adds	r0, #1
 800e922:	f43f ae70 	beq.w	800e606 <_printf_float+0xb6>
 800e926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e92a:	2200      	movs	r2, #0
 800e92c:	2300      	movs	r3, #0
 800e92e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e932:	f7f2 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e936:	b9c0      	cbnz	r0, 800e96a <_printf_float+0x41a>
 800e938:	4653      	mov	r3, sl
 800e93a:	f108 0201 	add.w	r2, r8, #1
 800e93e:	4631      	mov	r1, r6
 800e940:	4628      	mov	r0, r5
 800e942:	47b8      	blx	r7
 800e944:	3001      	adds	r0, #1
 800e946:	d10c      	bne.n	800e962 <_printf_float+0x412>
 800e948:	e65d      	b.n	800e606 <_printf_float+0xb6>
 800e94a:	2301      	movs	r3, #1
 800e94c:	465a      	mov	r2, fp
 800e94e:	4631      	mov	r1, r6
 800e950:	4628      	mov	r0, r5
 800e952:	47b8      	blx	r7
 800e954:	3001      	adds	r0, #1
 800e956:	f43f ae56 	beq.w	800e606 <_printf_float+0xb6>
 800e95a:	f108 0801 	add.w	r8, r8, #1
 800e95e:	45d0      	cmp	r8, sl
 800e960:	dbf3      	blt.n	800e94a <_printf_float+0x3fa>
 800e962:	464b      	mov	r3, r9
 800e964:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e968:	e6df      	b.n	800e72a <_printf_float+0x1da>
 800e96a:	f04f 0800 	mov.w	r8, #0
 800e96e:	f104 0b1a 	add.w	fp, r4, #26
 800e972:	e7f4      	b.n	800e95e <_printf_float+0x40e>
 800e974:	2301      	movs	r3, #1
 800e976:	4642      	mov	r2, r8
 800e978:	e7e1      	b.n	800e93e <_printf_float+0x3ee>
 800e97a:	2301      	movs	r3, #1
 800e97c:	464a      	mov	r2, r9
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	f43f ae3e 	beq.w	800e606 <_printf_float+0xb6>
 800e98a:	f108 0801 	add.w	r8, r8, #1
 800e98e:	68e3      	ldr	r3, [r4, #12]
 800e990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e992:	1a5b      	subs	r3, r3, r1
 800e994:	4543      	cmp	r3, r8
 800e996:	dcf0      	bgt.n	800e97a <_printf_float+0x42a>
 800e998:	e6fc      	b.n	800e794 <_printf_float+0x244>
 800e99a:	f04f 0800 	mov.w	r8, #0
 800e99e:	f104 0919 	add.w	r9, r4, #25
 800e9a2:	e7f4      	b.n	800e98e <_printf_float+0x43e>

0800e9a4 <_printf_common>:
 800e9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a8:	4616      	mov	r6, r2
 800e9aa:	4698      	mov	r8, r3
 800e9ac:	688a      	ldr	r2, [r1, #8]
 800e9ae:	690b      	ldr	r3, [r1, #16]
 800e9b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	bfb8      	it	lt
 800e9b8:	4613      	movlt	r3, r2
 800e9ba:	6033      	str	r3, [r6, #0]
 800e9bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9c0:	4607      	mov	r7, r0
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	b10a      	cbz	r2, 800e9ca <_printf_common+0x26>
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	6033      	str	r3, [r6, #0]
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	0699      	lsls	r1, r3, #26
 800e9ce:	bf42      	ittt	mi
 800e9d0:	6833      	ldrmi	r3, [r6, #0]
 800e9d2:	3302      	addmi	r3, #2
 800e9d4:	6033      	strmi	r3, [r6, #0]
 800e9d6:	6825      	ldr	r5, [r4, #0]
 800e9d8:	f015 0506 	ands.w	r5, r5, #6
 800e9dc:	d106      	bne.n	800e9ec <_printf_common+0x48>
 800e9de:	f104 0a19 	add.w	sl, r4, #25
 800e9e2:	68e3      	ldr	r3, [r4, #12]
 800e9e4:	6832      	ldr	r2, [r6, #0]
 800e9e6:	1a9b      	subs	r3, r3, r2
 800e9e8:	42ab      	cmp	r3, r5
 800e9ea:	dc26      	bgt.n	800ea3a <_printf_common+0x96>
 800e9ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e9f0:	6822      	ldr	r2, [r4, #0]
 800e9f2:	3b00      	subs	r3, #0
 800e9f4:	bf18      	it	ne
 800e9f6:	2301      	movne	r3, #1
 800e9f8:	0692      	lsls	r2, r2, #26
 800e9fa:	d42b      	bmi.n	800ea54 <_printf_common+0xb0>
 800e9fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea00:	4641      	mov	r1, r8
 800ea02:	4638      	mov	r0, r7
 800ea04:	47c8      	blx	r9
 800ea06:	3001      	adds	r0, #1
 800ea08:	d01e      	beq.n	800ea48 <_printf_common+0xa4>
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	6922      	ldr	r2, [r4, #16]
 800ea0e:	f003 0306 	and.w	r3, r3, #6
 800ea12:	2b04      	cmp	r3, #4
 800ea14:	bf02      	ittt	eq
 800ea16:	68e5      	ldreq	r5, [r4, #12]
 800ea18:	6833      	ldreq	r3, [r6, #0]
 800ea1a:	1aed      	subeq	r5, r5, r3
 800ea1c:	68a3      	ldr	r3, [r4, #8]
 800ea1e:	bf0c      	ite	eq
 800ea20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea24:	2500      	movne	r5, #0
 800ea26:	4293      	cmp	r3, r2
 800ea28:	bfc4      	itt	gt
 800ea2a:	1a9b      	subgt	r3, r3, r2
 800ea2c:	18ed      	addgt	r5, r5, r3
 800ea2e:	2600      	movs	r6, #0
 800ea30:	341a      	adds	r4, #26
 800ea32:	42b5      	cmp	r5, r6
 800ea34:	d11a      	bne.n	800ea6c <_printf_common+0xc8>
 800ea36:	2000      	movs	r0, #0
 800ea38:	e008      	b.n	800ea4c <_printf_common+0xa8>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4652      	mov	r2, sl
 800ea3e:	4641      	mov	r1, r8
 800ea40:	4638      	mov	r0, r7
 800ea42:	47c8      	blx	r9
 800ea44:	3001      	adds	r0, #1
 800ea46:	d103      	bne.n	800ea50 <_printf_common+0xac>
 800ea48:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea50:	3501      	adds	r5, #1
 800ea52:	e7c6      	b.n	800e9e2 <_printf_common+0x3e>
 800ea54:	18e1      	adds	r1, r4, r3
 800ea56:	1c5a      	adds	r2, r3, #1
 800ea58:	2030      	movs	r0, #48	@ 0x30
 800ea5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea5e:	4422      	add	r2, r4
 800ea60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea68:	3302      	adds	r3, #2
 800ea6a:	e7c7      	b.n	800e9fc <_printf_common+0x58>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	4622      	mov	r2, r4
 800ea70:	4641      	mov	r1, r8
 800ea72:	4638      	mov	r0, r7
 800ea74:	47c8      	blx	r9
 800ea76:	3001      	adds	r0, #1
 800ea78:	d0e6      	beq.n	800ea48 <_printf_common+0xa4>
 800ea7a:	3601      	adds	r6, #1
 800ea7c:	e7d9      	b.n	800ea32 <_printf_common+0x8e>
	...

0800ea80 <_printf_i>:
 800ea80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea84:	7e0f      	ldrb	r7, [r1, #24]
 800ea86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea88:	2f78      	cmp	r7, #120	@ 0x78
 800ea8a:	4691      	mov	r9, r2
 800ea8c:	4680      	mov	r8, r0
 800ea8e:	460c      	mov	r4, r1
 800ea90:	469a      	mov	sl, r3
 800ea92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea96:	d807      	bhi.n	800eaa8 <_printf_i+0x28>
 800ea98:	2f62      	cmp	r7, #98	@ 0x62
 800ea9a:	d80a      	bhi.n	800eab2 <_printf_i+0x32>
 800ea9c:	2f00      	cmp	r7, #0
 800ea9e:	f000 80d2 	beq.w	800ec46 <_printf_i+0x1c6>
 800eaa2:	2f58      	cmp	r7, #88	@ 0x58
 800eaa4:	f000 80b9 	beq.w	800ec1a <_printf_i+0x19a>
 800eaa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eaac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eab0:	e03a      	b.n	800eb28 <_printf_i+0xa8>
 800eab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eab6:	2b15      	cmp	r3, #21
 800eab8:	d8f6      	bhi.n	800eaa8 <_printf_i+0x28>
 800eaba:	a101      	add	r1, pc, #4	@ (adr r1, 800eac0 <_printf_i+0x40>)
 800eabc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eac0:	0800eb19 	.word	0x0800eb19
 800eac4:	0800eb2d 	.word	0x0800eb2d
 800eac8:	0800eaa9 	.word	0x0800eaa9
 800eacc:	0800eaa9 	.word	0x0800eaa9
 800ead0:	0800eaa9 	.word	0x0800eaa9
 800ead4:	0800eaa9 	.word	0x0800eaa9
 800ead8:	0800eb2d 	.word	0x0800eb2d
 800eadc:	0800eaa9 	.word	0x0800eaa9
 800eae0:	0800eaa9 	.word	0x0800eaa9
 800eae4:	0800eaa9 	.word	0x0800eaa9
 800eae8:	0800eaa9 	.word	0x0800eaa9
 800eaec:	0800ec2d 	.word	0x0800ec2d
 800eaf0:	0800eb57 	.word	0x0800eb57
 800eaf4:	0800ebe7 	.word	0x0800ebe7
 800eaf8:	0800eaa9 	.word	0x0800eaa9
 800eafc:	0800eaa9 	.word	0x0800eaa9
 800eb00:	0800ec4f 	.word	0x0800ec4f
 800eb04:	0800eaa9 	.word	0x0800eaa9
 800eb08:	0800eb57 	.word	0x0800eb57
 800eb0c:	0800eaa9 	.word	0x0800eaa9
 800eb10:	0800eaa9 	.word	0x0800eaa9
 800eb14:	0800ebef 	.word	0x0800ebef
 800eb18:	6833      	ldr	r3, [r6, #0]
 800eb1a:	1d1a      	adds	r2, r3, #4
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6032      	str	r2, [r6, #0]
 800eb20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e09d      	b.n	800ec68 <_printf_i+0x1e8>
 800eb2c:	6833      	ldr	r3, [r6, #0]
 800eb2e:	6820      	ldr	r0, [r4, #0]
 800eb30:	1d19      	adds	r1, r3, #4
 800eb32:	6031      	str	r1, [r6, #0]
 800eb34:	0606      	lsls	r6, r0, #24
 800eb36:	d501      	bpl.n	800eb3c <_printf_i+0xbc>
 800eb38:	681d      	ldr	r5, [r3, #0]
 800eb3a:	e003      	b.n	800eb44 <_printf_i+0xc4>
 800eb3c:	0645      	lsls	r5, r0, #25
 800eb3e:	d5fb      	bpl.n	800eb38 <_printf_i+0xb8>
 800eb40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb44:	2d00      	cmp	r5, #0
 800eb46:	da03      	bge.n	800eb50 <_printf_i+0xd0>
 800eb48:	232d      	movs	r3, #45	@ 0x2d
 800eb4a:	426d      	negs	r5, r5
 800eb4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb50:	4859      	ldr	r0, [pc, #356]	@ (800ecb8 <_printf_i+0x238>)
 800eb52:	230a      	movs	r3, #10
 800eb54:	e011      	b.n	800eb7a <_printf_i+0xfa>
 800eb56:	6821      	ldr	r1, [r4, #0]
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	0608      	lsls	r0, r1, #24
 800eb5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb60:	d402      	bmi.n	800eb68 <_printf_i+0xe8>
 800eb62:	0649      	lsls	r1, r1, #25
 800eb64:	bf48      	it	mi
 800eb66:	b2ad      	uxthmi	r5, r5
 800eb68:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb6a:	4853      	ldr	r0, [pc, #332]	@ (800ecb8 <_printf_i+0x238>)
 800eb6c:	6033      	str	r3, [r6, #0]
 800eb6e:	bf14      	ite	ne
 800eb70:	230a      	movne	r3, #10
 800eb72:	2308      	moveq	r3, #8
 800eb74:	2100      	movs	r1, #0
 800eb76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb7a:	6866      	ldr	r6, [r4, #4]
 800eb7c:	60a6      	str	r6, [r4, #8]
 800eb7e:	2e00      	cmp	r6, #0
 800eb80:	bfa2      	ittt	ge
 800eb82:	6821      	ldrge	r1, [r4, #0]
 800eb84:	f021 0104 	bicge.w	r1, r1, #4
 800eb88:	6021      	strge	r1, [r4, #0]
 800eb8a:	b90d      	cbnz	r5, 800eb90 <_printf_i+0x110>
 800eb8c:	2e00      	cmp	r6, #0
 800eb8e:	d04b      	beq.n	800ec28 <_printf_i+0x1a8>
 800eb90:	4616      	mov	r6, r2
 800eb92:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb96:	fb03 5711 	mls	r7, r3, r1, r5
 800eb9a:	5dc7      	ldrb	r7, [r0, r7]
 800eb9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eba0:	462f      	mov	r7, r5
 800eba2:	42bb      	cmp	r3, r7
 800eba4:	460d      	mov	r5, r1
 800eba6:	d9f4      	bls.n	800eb92 <_printf_i+0x112>
 800eba8:	2b08      	cmp	r3, #8
 800ebaa:	d10b      	bne.n	800ebc4 <_printf_i+0x144>
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	07df      	lsls	r7, r3, #31
 800ebb0:	d508      	bpl.n	800ebc4 <_printf_i+0x144>
 800ebb2:	6923      	ldr	r3, [r4, #16]
 800ebb4:	6861      	ldr	r1, [r4, #4]
 800ebb6:	4299      	cmp	r1, r3
 800ebb8:	bfde      	ittt	le
 800ebba:	2330      	movle	r3, #48	@ 0x30
 800ebbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebc4:	1b92      	subs	r2, r2, r6
 800ebc6:	6122      	str	r2, [r4, #16]
 800ebc8:	f8cd a000 	str.w	sl, [sp]
 800ebcc:	464b      	mov	r3, r9
 800ebce:	aa03      	add	r2, sp, #12
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	4640      	mov	r0, r8
 800ebd4:	f7ff fee6 	bl	800e9a4 <_printf_common>
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d14a      	bne.n	800ec72 <_printf_i+0x1f2>
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe0:	b004      	add	sp, #16
 800ebe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	f043 0320 	orr.w	r3, r3, #32
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	4833      	ldr	r0, [pc, #204]	@ (800ecbc <_printf_i+0x23c>)
 800ebf0:	2778      	movs	r7, #120	@ 0x78
 800ebf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	6831      	ldr	r1, [r6, #0]
 800ebfa:	061f      	lsls	r7, r3, #24
 800ebfc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec00:	d402      	bmi.n	800ec08 <_printf_i+0x188>
 800ec02:	065f      	lsls	r7, r3, #25
 800ec04:	bf48      	it	mi
 800ec06:	b2ad      	uxthmi	r5, r5
 800ec08:	6031      	str	r1, [r6, #0]
 800ec0a:	07d9      	lsls	r1, r3, #31
 800ec0c:	bf44      	itt	mi
 800ec0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ec12:	6023      	strmi	r3, [r4, #0]
 800ec14:	b11d      	cbz	r5, 800ec1e <_printf_i+0x19e>
 800ec16:	2310      	movs	r3, #16
 800ec18:	e7ac      	b.n	800eb74 <_printf_i+0xf4>
 800ec1a:	4827      	ldr	r0, [pc, #156]	@ (800ecb8 <_printf_i+0x238>)
 800ec1c:	e7e9      	b.n	800ebf2 <_printf_i+0x172>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	f023 0320 	bic.w	r3, r3, #32
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	e7f6      	b.n	800ec16 <_printf_i+0x196>
 800ec28:	4616      	mov	r6, r2
 800ec2a:	e7bd      	b.n	800eba8 <_printf_i+0x128>
 800ec2c:	6833      	ldr	r3, [r6, #0]
 800ec2e:	6825      	ldr	r5, [r4, #0]
 800ec30:	6961      	ldr	r1, [r4, #20]
 800ec32:	1d18      	adds	r0, r3, #4
 800ec34:	6030      	str	r0, [r6, #0]
 800ec36:	062e      	lsls	r6, r5, #24
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	d501      	bpl.n	800ec40 <_printf_i+0x1c0>
 800ec3c:	6019      	str	r1, [r3, #0]
 800ec3e:	e002      	b.n	800ec46 <_printf_i+0x1c6>
 800ec40:	0668      	lsls	r0, r5, #25
 800ec42:	d5fb      	bpl.n	800ec3c <_printf_i+0x1bc>
 800ec44:	8019      	strh	r1, [r3, #0]
 800ec46:	2300      	movs	r3, #0
 800ec48:	6123      	str	r3, [r4, #16]
 800ec4a:	4616      	mov	r6, r2
 800ec4c:	e7bc      	b.n	800ebc8 <_printf_i+0x148>
 800ec4e:	6833      	ldr	r3, [r6, #0]
 800ec50:	1d1a      	adds	r2, r3, #4
 800ec52:	6032      	str	r2, [r6, #0]
 800ec54:	681e      	ldr	r6, [r3, #0]
 800ec56:	6862      	ldr	r2, [r4, #4]
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f7f1 fac0 	bl	80001e0 <memchr>
 800ec60:	b108      	cbz	r0, 800ec66 <_printf_i+0x1e6>
 800ec62:	1b80      	subs	r0, r0, r6
 800ec64:	6060      	str	r0, [r4, #4]
 800ec66:	6863      	ldr	r3, [r4, #4]
 800ec68:	6123      	str	r3, [r4, #16]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec70:	e7aa      	b.n	800ebc8 <_printf_i+0x148>
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	4632      	mov	r2, r6
 800ec76:	4649      	mov	r1, r9
 800ec78:	4640      	mov	r0, r8
 800ec7a:	47d0      	blx	sl
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	d0ad      	beq.n	800ebdc <_printf_i+0x15c>
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	079b      	lsls	r3, r3, #30
 800ec84:	d413      	bmi.n	800ecae <_printf_i+0x22e>
 800ec86:	68e0      	ldr	r0, [r4, #12]
 800ec88:	9b03      	ldr	r3, [sp, #12]
 800ec8a:	4298      	cmp	r0, r3
 800ec8c:	bfb8      	it	lt
 800ec8e:	4618      	movlt	r0, r3
 800ec90:	e7a6      	b.n	800ebe0 <_printf_i+0x160>
 800ec92:	2301      	movs	r3, #1
 800ec94:	4632      	mov	r2, r6
 800ec96:	4649      	mov	r1, r9
 800ec98:	4640      	mov	r0, r8
 800ec9a:	47d0      	blx	sl
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d09d      	beq.n	800ebdc <_printf_i+0x15c>
 800eca0:	3501      	adds	r5, #1
 800eca2:	68e3      	ldr	r3, [r4, #12]
 800eca4:	9903      	ldr	r1, [sp, #12]
 800eca6:	1a5b      	subs	r3, r3, r1
 800eca8:	42ab      	cmp	r3, r5
 800ecaa:	dcf2      	bgt.n	800ec92 <_printf_i+0x212>
 800ecac:	e7eb      	b.n	800ec86 <_printf_i+0x206>
 800ecae:	2500      	movs	r5, #0
 800ecb0:	f104 0619 	add.w	r6, r4, #25
 800ecb4:	e7f5      	b.n	800eca2 <_printf_i+0x222>
 800ecb6:	bf00      	nop
 800ecb8:	08011062 	.word	0x08011062
 800ecbc:	08011073 	.word	0x08011073

0800ecc0 <std>:
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	b510      	push	{r4, lr}
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	e9c0 3300 	strd	r3, r3, [r0]
 800ecca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecce:	6083      	str	r3, [r0, #8]
 800ecd0:	8181      	strh	r1, [r0, #12]
 800ecd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecd4:	81c2      	strh	r2, [r0, #14]
 800ecd6:	6183      	str	r3, [r0, #24]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	2208      	movs	r2, #8
 800ecdc:	305c      	adds	r0, #92	@ 0x5c
 800ecde:	f000 f9f9 	bl	800f0d4 <memset>
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <std+0x58>)
 800ece4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ece6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed1c <std+0x5c>)
 800ece8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecea:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <std+0x60>)
 800ecec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecee:	4b0d      	ldr	r3, [pc, #52]	@ (800ed24 <std+0x64>)
 800ecf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed28 <std+0x68>)
 800ecf4:	6224      	str	r4, [r4, #32]
 800ecf6:	429c      	cmp	r4, r3
 800ecf8:	d006      	beq.n	800ed08 <std+0x48>
 800ecfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecfe:	4294      	cmp	r4, r2
 800ed00:	d002      	beq.n	800ed08 <std+0x48>
 800ed02:	33d0      	adds	r3, #208	@ 0xd0
 800ed04:	429c      	cmp	r4, r3
 800ed06:	d105      	bne.n	800ed14 <std+0x54>
 800ed08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed10:	f000 ba5c 	b.w	800f1cc <__retarget_lock_init_recursive>
 800ed14:	bd10      	pop	{r4, pc}
 800ed16:	bf00      	nop
 800ed18:	0800ef25 	.word	0x0800ef25
 800ed1c:	0800ef47 	.word	0x0800ef47
 800ed20:	0800ef7f 	.word	0x0800ef7f
 800ed24:	0800efa3 	.word	0x0800efa3
 800ed28:	200020cc 	.word	0x200020cc

0800ed2c <stdio_exit_handler>:
 800ed2c:	4a02      	ldr	r2, [pc, #8]	@ (800ed38 <stdio_exit_handler+0xc>)
 800ed2e:	4903      	ldr	r1, [pc, #12]	@ (800ed3c <stdio_exit_handler+0x10>)
 800ed30:	4803      	ldr	r0, [pc, #12]	@ (800ed40 <stdio_exit_handler+0x14>)
 800ed32:	f000 b869 	b.w	800ee08 <_fwalk_sglue>
 800ed36:	bf00      	nop
 800ed38:	20000110 	.word	0x20000110
 800ed3c:	08010b01 	.word	0x08010b01
 800ed40:	20000120 	.word	0x20000120

0800ed44 <cleanup_stdio>:
 800ed44:	6841      	ldr	r1, [r0, #4]
 800ed46:	4b0c      	ldr	r3, [pc, #48]	@ (800ed78 <cleanup_stdio+0x34>)
 800ed48:	4299      	cmp	r1, r3
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	d001      	beq.n	800ed54 <cleanup_stdio+0x10>
 800ed50:	f001 fed6 	bl	8010b00 <_fflush_r>
 800ed54:	68a1      	ldr	r1, [r4, #8]
 800ed56:	4b09      	ldr	r3, [pc, #36]	@ (800ed7c <cleanup_stdio+0x38>)
 800ed58:	4299      	cmp	r1, r3
 800ed5a:	d002      	beq.n	800ed62 <cleanup_stdio+0x1e>
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f001 fecf 	bl	8010b00 <_fflush_r>
 800ed62:	68e1      	ldr	r1, [r4, #12]
 800ed64:	4b06      	ldr	r3, [pc, #24]	@ (800ed80 <cleanup_stdio+0x3c>)
 800ed66:	4299      	cmp	r1, r3
 800ed68:	d004      	beq.n	800ed74 <cleanup_stdio+0x30>
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed70:	f001 bec6 	b.w	8010b00 <_fflush_r>
 800ed74:	bd10      	pop	{r4, pc}
 800ed76:	bf00      	nop
 800ed78:	200020cc 	.word	0x200020cc
 800ed7c:	20002134 	.word	0x20002134
 800ed80:	2000219c 	.word	0x2000219c

0800ed84 <global_stdio_init.part.0>:
 800ed84:	b510      	push	{r4, lr}
 800ed86:	4b0b      	ldr	r3, [pc, #44]	@ (800edb4 <global_stdio_init.part.0+0x30>)
 800ed88:	4c0b      	ldr	r4, [pc, #44]	@ (800edb8 <global_stdio_init.part.0+0x34>)
 800ed8a:	4a0c      	ldr	r2, [pc, #48]	@ (800edbc <global_stdio_init.part.0+0x38>)
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	4620      	mov	r0, r4
 800ed90:	2200      	movs	r2, #0
 800ed92:	2104      	movs	r1, #4
 800ed94:	f7ff ff94 	bl	800ecc0 <std>
 800ed98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	2109      	movs	r1, #9
 800eda0:	f7ff ff8e 	bl	800ecc0 <std>
 800eda4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eda8:	2202      	movs	r2, #2
 800edaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edae:	2112      	movs	r1, #18
 800edb0:	f7ff bf86 	b.w	800ecc0 <std>
 800edb4:	20002204 	.word	0x20002204
 800edb8:	200020cc 	.word	0x200020cc
 800edbc:	0800ed2d 	.word	0x0800ed2d

0800edc0 <__sfp_lock_acquire>:
 800edc0:	4801      	ldr	r0, [pc, #4]	@ (800edc8 <__sfp_lock_acquire+0x8>)
 800edc2:	f000 ba04 	b.w	800f1ce <__retarget_lock_acquire_recursive>
 800edc6:	bf00      	nop
 800edc8:	2000220d 	.word	0x2000220d

0800edcc <__sfp_lock_release>:
 800edcc:	4801      	ldr	r0, [pc, #4]	@ (800edd4 <__sfp_lock_release+0x8>)
 800edce:	f000 b9ff 	b.w	800f1d0 <__retarget_lock_release_recursive>
 800edd2:	bf00      	nop
 800edd4:	2000220d 	.word	0x2000220d

0800edd8 <__sinit>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	4604      	mov	r4, r0
 800eddc:	f7ff fff0 	bl	800edc0 <__sfp_lock_acquire>
 800ede0:	6a23      	ldr	r3, [r4, #32]
 800ede2:	b11b      	cbz	r3, 800edec <__sinit+0x14>
 800ede4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede8:	f7ff bff0 	b.w	800edcc <__sfp_lock_release>
 800edec:	4b04      	ldr	r3, [pc, #16]	@ (800ee00 <__sinit+0x28>)
 800edee:	6223      	str	r3, [r4, #32]
 800edf0:	4b04      	ldr	r3, [pc, #16]	@ (800ee04 <__sinit+0x2c>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1f5      	bne.n	800ede4 <__sinit+0xc>
 800edf8:	f7ff ffc4 	bl	800ed84 <global_stdio_init.part.0>
 800edfc:	e7f2      	b.n	800ede4 <__sinit+0xc>
 800edfe:	bf00      	nop
 800ee00:	0800ed45 	.word	0x0800ed45
 800ee04:	20002204 	.word	0x20002204

0800ee08 <_fwalk_sglue>:
 800ee08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee0c:	4607      	mov	r7, r0
 800ee0e:	4688      	mov	r8, r1
 800ee10:	4614      	mov	r4, r2
 800ee12:	2600      	movs	r6, #0
 800ee14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee18:	f1b9 0901 	subs.w	r9, r9, #1
 800ee1c:	d505      	bpl.n	800ee2a <_fwalk_sglue+0x22>
 800ee1e:	6824      	ldr	r4, [r4, #0]
 800ee20:	2c00      	cmp	r4, #0
 800ee22:	d1f7      	bne.n	800ee14 <_fwalk_sglue+0xc>
 800ee24:	4630      	mov	r0, r6
 800ee26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee2a:	89ab      	ldrh	r3, [r5, #12]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d907      	bls.n	800ee40 <_fwalk_sglue+0x38>
 800ee30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee34:	3301      	adds	r3, #1
 800ee36:	d003      	beq.n	800ee40 <_fwalk_sglue+0x38>
 800ee38:	4629      	mov	r1, r5
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	47c0      	blx	r8
 800ee3e:	4306      	orrs	r6, r0
 800ee40:	3568      	adds	r5, #104	@ 0x68
 800ee42:	e7e9      	b.n	800ee18 <_fwalk_sglue+0x10>

0800ee44 <iprintf>:
 800ee44:	b40f      	push	{r0, r1, r2, r3}
 800ee46:	b507      	push	{r0, r1, r2, lr}
 800ee48:	4906      	ldr	r1, [pc, #24]	@ (800ee64 <iprintf+0x20>)
 800ee4a:	ab04      	add	r3, sp, #16
 800ee4c:	6808      	ldr	r0, [r1, #0]
 800ee4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee52:	6881      	ldr	r1, [r0, #8]
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	f001 fcb7 	bl	80107c8 <_vfiprintf_r>
 800ee5a:	b003      	add	sp, #12
 800ee5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee60:	b004      	add	sp, #16
 800ee62:	4770      	bx	lr
 800ee64:	2000011c 	.word	0x2000011c

0800ee68 <_puts_r>:
 800ee68:	6a03      	ldr	r3, [r0, #32]
 800ee6a:	b570      	push	{r4, r5, r6, lr}
 800ee6c:	6884      	ldr	r4, [r0, #8]
 800ee6e:	4605      	mov	r5, r0
 800ee70:	460e      	mov	r6, r1
 800ee72:	b90b      	cbnz	r3, 800ee78 <_puts_r+0x10>
 800ee74:	f7ff ffb0 	bl	800edd8 <__sinit>
 800ee78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee7a:	07db      	lsls	r3, r3, #31
 800ee7c:	d405      	bmi.n	800ee8a <_puts_r+0x22>
 800ee7e:	89a3      	ldrh	r3, [r4, #12]
 800ee80:	0598      	lsls	r0, r3, #22
 800ee82:	d402      	bmi.n	800ee8a <_puts_r+0x22>
 800ee84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee86:	f000 f9a2 	bl	800f1ce <__retarget_lock_acquire_recursive>
 800ee8a:	89a3      	ldrh	r3, [r4, #12]
 800ee8c:	0719      	lsls	r1, r3, #28
 800ee8e:	d502      	bpl.n	800ee96 <_puts_r+0x2e>
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d135      	bne.n	800ef02 <_puts_r+0x9a>
 800ee96:	4621      	mov	r1, r4
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f000 f8c5 	bl	800f028 <__swsetup_r>
 800ee9e:	b380      	cbz	r0, 800ef02 <_puts_r+0x9a>
 800eea0:	f04f 35ff 	mov.w	r5, #4294967295
 800eea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eea6:	07da      	lsls	r2, r3, #31
 800eea8:	d405      	bmi.n	800eeb6 <_puts_r+0x4e>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	059b      	lsls	r3, r3, #22
 800eeae:	d402      	bmi.n	800eeb6 <_puts_r+0x4e>
 800eeb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeb2:	f000 f98d 	bl	800f1d0 <__retarget_lock_release_recursive>
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	bd70      	pop	{r4, r5, r6, pc}
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	da04      	bge.n	800eec8 <_puts_r+0x60>
 800eebe:	69a2      	ldr	r2, [r4, #24]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	dc17      	bgt.n	800eef4 <_puts_r+0x8c>
 800eec4:	290a      	cmp	r1, #10
 800eec6:	d015      	beq.n	800eef4 <_puts_r+0x8c>
 800eec8:	6823      	ldr	r3, [r4, #0]
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	6022      	str	r2, [r4, #0]
 800eece:	7019      	strb	r1, [r3, #0]
 800eed0:	68a3      	ldr	r3, [r4, #8]
 800eed2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eed6:	3b01      	subs	r3, #1
 800eed8:	60a3      	str	r3, [r4, #8]
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d1ed      	bne.n	800eeba <_puts_r+0x52>
 800eede:	2b00      	cmp	r3, #0
 800eee0:	da11      	bge.n	800ef06 <_puts_r+0x9e>
 800eee2:	4622      	mov	r2, r4
 800eee4:	210a      	movs	r1, #10
 800eee6:	4628      	mov	r0, r5
 800eee8:	f000 f85f 	bl	800efaa <__swbuf_r>
 800eeec:	3001      	adds	r0, #1
 800eeee:	d0d7      	beq.n	800eea0 <_puts_r+0x38>
 800eef0:	250a      	movs	r5, #10
 800eef2:	e7d7      	b.n	800eea4 <_puts_r+0x3c>
 800eef4:	4622      	mov	r2, r4
 800eef6:	4628      	mov	r0, r5
 800eef8:	f000 f857 	bl	800efaa <__swbuf_r>
 800eefc:	3001      	adds	r0, #1
 800eefe:	d1e7      	bne.n	800eed0 <_puts_r+0x68>
 800ef00:	e7ce      	b.n	800eea0 <_puts_r+0x38>
 800ef02:	3e01      	subs	r6, #1
 800ef04:	e7e4      	b.n	800eed0 <_puts_r+0x68>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	6022      	str	r2, [r4, #0]
 800ef0c:	220a      	movs	r2, #10
 800ef0e:	701a      	strb	r2, [r3, #0]
 800ef10:	e7ee      	b.n	800eef0 <_puts_r+0x88>
	...

0800ef14 <puts>:
 800ef14:	4b02      	ldr	r3, [pc, #8]	@ (800ef20 <puts+0xc>)
 800ef16:	4601      	mov	r1, r0
 800ef18:	6818      	ldr	r0, [r3, #0]
 800ef1a:	f7ff bfa5 	b.w	800ee68 <_puts_r>
 800ef1e:	bf00      	nop
 800ef20:	2000011c 	.word	0x2000011c

0800ef24 <__sread>:
 800ef24:	b510      	push	{r4, lr}
 800ef26:	460c      	mov	r4, r1
 800ef28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2c:	f000 f900 	bl	800f130 <_read_r>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	bfab      	itete	ge
 800ef34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef36:	89a3      	ldrhlt	r3, [r4, #12]
 800ef38:	181b      	addge	r3, r3, r0
 800ef3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef3e:	bfac      	ite	ge
 800ef40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef42:	81a3      	strhlt	r3, [r4, #12]
 800ef44:	bd10      	pop	{r4, pc}

0800ef46 <__swrite>:
 800ef46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	898b      	ldrh	r3, [r1, #12]
 800ef4e:	05db      	lsls	r3, r3, #23
 800ef50:	4605      	mov	r5, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	4616      	mov	r6, r2
 800ef56:	d505      	bpl.n	800ef64 <__swrite+0x1e>
 800ef58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f000 f8d4 	bl	800f10c <_lseek_r>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef6e:	81a3      	strh	r3, [r4, #12]
 800ef70:	4632      	mov	r2, r6
 800ef72:	463b      	mov	r3, r7
 800ef74:	4628      	mov	r0, r5
 800ef76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7a:	f000 b8eb 	b.w	800f154 <_write_r>

0800ef7e <__sseek>:
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	460c      	mov	r4, r1
 800ef82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef86:	f000 f8c1 	bl	800f10c <_lseek_r>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	bf15      	itete	ne
 800ef90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef9a:	81a3      	strheq	r3, [r4, #12]
 800ef9c:	bf18      	it	ne
 800ef9e:	81a3      	strhne	r3, [r4, #12]
 800efa0:	bd10      	pop	{r4, pc}

0800efa2 <__sclose>:
 800efa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa6:	f000 b8a1 	b.w	800f0ec <_close_r>

0800efaa <__swbuf_r>:
 800efaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efac:	460e      	mov	r6, r1
 800efae:	4614      	mov	r4, r2
 800efb0:	4605      	mov	r5, r0
 800efb2:	b118      	cbz	r0, 800efbc <__swbuf_r+0x12>
 800efb4:	6a03      	ldr	r3, [r0, #32]
 800efb6:	b90b      	cbnz	r3, 800efbc <__swbuf_r+0x12>
 800efb8:	f7ff ff0e 	bl	800edd8 <__sinit>
 800efbc:	69a3      	ldr	r3, [r4, #24]
 800efbe:	60a3      	str	r3, [r4, #8]
 800efc0:	89a3      	ldrh	r3, [r4, #12]
 800efc2:	071a      	lsls	r2, r3, #28
 800efc4:	d501      	bpl.n	800efca <__swbuf_r+0x20>
 800efc6:	6923      	ldr	r3, [r4, #16]
 800efc8:	b943      	cbnz	r3, 800efdc <__swbuf_r+0x32>
 800efca:	4621      	mov	r1, r4
 800efcc:	4628      	mov	r0, r5
 800efce:	f000 f82b 	bl	800f028 <__swsetup_r>
 800efd2:	b118      	cbz	r0, 800efdc <__swbuf_r+0x32>
 800efd4:	f04f 37ff 	mov.w	r7, #4294967295
 800efd8:	4638      	mov	r0, r7
 800efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	6922      	ldr	r2, [r4, #16]
 800efe0:	1a98      	subs	r0, r3, r2
 800efe2:	6963      	ldr	r3, [r4, #20]
 800efe4:	b2f6      	uxtb	r6, r6
 800efe6:	4283      	cmp	r3, r0
 800efe8:	4637      	mov	r7, r6
 800efea:	dc05      	bgt.n	800eff8 <__swbuf_r+0x4e>
 800efec:	4621      	mov	r1, r4
 800efee:	4628      	mov	r0, r5
 800eff0:	f001 fd86 	bl	8010b00 <_fflush_r>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d1ed      	bne.n	800efd4 <__swbuf_r+0x2a>
 800eff8:	68a3      	ldr	r3, [r4, #8]
 800effa:	3b01      	subs	r3, #1
 800effc:	60a3      	str	r3, [r4, #8]
 800effe:	6823      	ldr	r3, [r4, #0]
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	6022      	str	r2, [r4, #0]
 800f004:	701e      	strb	r6, [r3, #0]
 800f006:	6962      	ldr	r2, [r4, #20]
 800f008:	1c43      	adds	r3, r0, #1
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d004      	beq.n	800f018 <__swbuf_r+0x6e>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	07db      	lsls	r3, r3, #31
 800f012:	d5e1      	bpl.n	800efd8 <__swbuf_r+0x2e>
 800f014:	2e0a      	cmp	r6, #10
 800f016:	d1df      	bne.n	800efd8 <__swbuf_r+0x2e>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f001 fd70 	bl	8010b00 <_fflush_r>
 800f020:	2800      	cmp	r0, #0
 800f022:	d0d9      	beq.n	800efd8 <__swbuf_r+0x2e>
 800f024:	e7d6      	b.n	800efd4 <__swbuf_r+0x2a>
	...

0800f028 <__swsetup_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4b29      	ldr	r3, [pc, #164]	@ (800f0d0 <__swsetup_r+0xa8>)
 800f02c:	4605      	mov	r5, r0
 800f02e:	6818      	ldr	r0, [r3, #0]
 800f030:	460c      	mov	r4, r1
 800f032:	b118      	cbz	r0, 800f03c <__swsetup_r+0x14>
 800f034:	6a03      	ldr	r3, [r0, #32]
 800f036:	b90b      	cbnz	r3, 800f03c <__swsetup_r+0x14>
 800f038:	f7ff fece 	bl	800edd8 <__sinit>
 800f03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f040:	0719      	lsls	r1, r3, #28
 800f042:	d422      	bmi.n	800f08a <__swsetup_r+0x62>
 800f044:	06da      	lsls	r2, r3, #27
 800f046:	d407      	bmi.n	800f058 <__swsetup_r+0x30>
 800f048:	2209      	movs	r2, #9
 800f04a:	602a      	str	r2, [r5, #0]
 800f04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	f04f 30ff 	mov.w	r0, #4294967295
 800f056:	e033      	b.n	800f0c0 <__swsetup_r+0x98>
 800f058:	0758      	lsls	r0, r3, #29
 800f05a:	d512      	bpl.n	800f082 <__swsetup_r+0x5a>
 800f05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f05e:	b141      	cbz	r1, 800f072 <__swsetup_r+0x4a>
 800f060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f064:	4299      	cmp	r1, r3
 800f066:	d002      	beq.n	800f06e <__swsetup_r+0x46>
 800f068:	4628      	mov	r0, r5
 800f06a:	f000 ff01 	bl	800fe70 <_free_r>
 800f06e:	2300      	movs	r3, #0
 800f070:	6363      	str	r3, [r4, #52]	@ 0x34
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f078:	81a3      	strh	r3, [r4, #12]
 800f07a:	2300      	movs	r3, #0
 800f07c:	6063      	str	r3, [r4, #4]
 800f07e:	6923      	ldr	r3, [r4, #16]
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f043 0308 	orr.w	r3, r3, #8
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	6923      	ldr	r3, [r4, #16]
 800f08c:	b94b      	cbnz	r3, 800f0a2 <__swsetup_r+0x7a>
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f098:	d003      	beq.n	800f0a2 <__swsetup_r+0x7a>
 800f09a:	4621      	mov	r1, r4
 800f09c:	4628      	mov	r0, r5
 800f09e:	f001 fd7d 	bl	8010b9c <__smakebuf_r>
 800f0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a6:	f013 0201 	ands.w	r2, r3, #1
 800f0aa:	d00a      	beq.n	800f0c2 <__swsetup_r+0x9a>
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	60a2      	str	r2, [r4, #8]
 800f0b0:	6962      	ldr	r2, [r4, #20]
 800f0b2:	4252      	negs	r2, r2
 800f0b4:	61a2      	str	r2, [r4, #24]
 800f0b6:	6922      	ldr	r2, [r4, #16]
 800f0b8:	b942      	cbnz	r2, 800f0cc <__swsetup_r+0xa4>
 800f0ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0be:	d1c5      	bne.n	800f04c <__swsetup_r+0x24>
 800f0c0:	bd38      	pop	{r3, r4, r5, pc}
 800f0c2:	0799      	lsls	r1, r3, #30
 800f0c4:	bf58      	it	pl
 800f0c6:	6962      	ldrpl	r2, [r4, #20]
 800f0c8:	60a2      	str	r2, [r4, #8]
 800f0ca:	e7f4      	b.n	800f0b6 <__swsetup_r+0x8e>
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	e7f7      	b.n	800f0c0 <__swsetup_r+0x98>
 800f0d0:	2000011c 	.word	0x2000011c

0800f0d4 <memset>:
 800f0d4:	4402      	add	r2, r0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d100      	bne.n	800f0de <memset+0xa>
 800f0dc:	4770      	bx	lr
 800f0de:	f803 1b01 	strb.w	r1, [r3], #1
 800f0e2:	e7f9      	b.n	800f0d8 <memset+0x4>

0800f0e4 <_localeconv_r>:
 800f0e4:	4800      	ldr	r0, [pc, #0]	@ (800f0e8 <_localeconv_r+0x4>)
 800f0e6:	4770      	bx	lr
 800f0e8:	2000025c 	.word	0x2000025c

0800f0ec <_close_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	4d06      	ldr	r5, [pc, #24]	@ (800f108 <_close_r+0x1c>)
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	4608      	mov	r0, r1
 800f0f6:	602b      	str	r3, [r5, #0]
 800f0f8:	f7f3 f974 	bl	80023e4 <_close>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_close_r+0x1a>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_close_r+0x1a>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	20002208 	.word	0x20002208

0800f10c <_lseek_r>:
 800f10c:	b538      	push	{r3, r4, r5, lr}
 800f10e:	4d07      	ldr	r5, [pc, #28]	@ (800f12c <_lseek_r+0x20>)
 800f110:	4604      	mov	r4, r0
 800f112:	4608      	mov	r0, r1
 800f114:	4611      	mov	r1, r2
 800f116:	2200      	movs	r2, #0
 800f118:	602a      	str	r2, [r5, #0]
 800f11a:	461a      	mov	r2, r3
 800f11c:	f7f3 f989 	bl	8002432 <_lseek>
 800f120:	1c43      	adds	r3, r0, #1
 800f122:	d102      	bne.n	800f12a <_lseek_r+0x1e>
 800f124:	682b      	ldr	r3, [r5, #0]
 800f126:	b103      	cbz	r3, 800f12a <_lseek_r+0x1e>
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	bd38      	pop	{r3, r4, r5, pc}
 800f12c:	20002208 	.word	0x20002208

0800f130 <_read_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4d07      	ldr	r5, [pc, #28]	@ (800f150 <_read_r+0x20>)
 800f134:	4604      	mov	r4, r0
 800f136:	4608      	mov	r0, r1
 800f138:	4611      	mov	r1, r2
 800f13a:	2200      	movs	r2, #0
 800f13c:	602a      	str	r2, [r5, #0]
 800f13e:	461a      	mov	r2, r3
 800f140:	f7f3 f933 	bl	80023aa <_read>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_read_r+0x1e>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_read_r+0x1e>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	20002208 	.word	0x20002208

0800f154 <_write_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d07      	ldr	r5, [pc, #28]	@ (800f174 <_write_r+0x20>)
 800f158:	4604      	mov	r4, r0
 800f15a:	4608      	mov	r0, r1
 800f15c:	4611      	mov	r1, r2
 800f15e:	2200      	movs	r2, #0
 800f160:	602a      	str	r2, [r5, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	f7f2 fc02 	bl	800196c <_write>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_write_r+0x1e>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_write_r+0x1e>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	20002208 	.word	0x20002208

0800f178 <__errno>:
 800f178:	4b01      	ldr	r3, [pc, #4]	@ (800f180 <__errno+0x8>)
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	2000011c 	.word	0x2000011c

0800f184 <__libc_init_array>:
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	4d0d      	ldr	r5, [pc, #52]	@ (800f1bc <__libc_init_array+0x38>)
 800f188:	4c0d      	ldr	r4, [pc, #52]	@ (800f1c0 <__libc_init_array+0x3c>)
 800f18a:	1b64      	subs	r4, r4, r5
 800f18c:	10a4      	asrs	r4, r4, #2
 800f18e:	2600      	movs	r6, #0
 800f190:	42a6      	cmp	r6, r4
 800f192:	d109      	bne.n	800f1a8 <__libc_init_array+0x24>
 800f194:	4d0b      	ldr	r5, [pc, #44]	@ (800f1c4 <__libc_init_array+0x40>)
 800f196:	4c0c      	ldr	r4, [pc, #48]	@ (800f1c8 <__libc_init_array+0x44>)
 800f198:	f001 fe2c 	bl	8010df4 <_init>
 800f19c:	1b64      	subs	r4, r4, r5
 800f19e:	10a4      	asrs	r4, r4, #2
 800f1a0:	2600      	movs	r6, #0
 800f1a2:	42a6      	cmp	r6, r4
 800f1a4:	d105      	bne.n	800f1b2 <__libc_init_array+0x2e>
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
 800f1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ac:	4798      	blx	r3
 800f1ae:	3601      	adds	r6, #1
 800f1b0:	e7ee      	b.n	800f190 <__libc_init_array+0xc>
 800f1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b6:	4798      	blx	r3
 800f1b8:	3601      	adds	r6, #1
 800f1ba:	e7f2      	b.n	800f1a2 <__libc_init_array+0x1e>
 800f1bc:	080113c8 	.word	0x080113c8
 800f1c0:	080113c8 	.word	0x080113c8
 800f1c4:	080113c8 	.word	0x080113c8
 800f1c8:	080113cc 	.word	0x080113cc

0800f1cc <__retarget_lock_init_recursive>:
 800f1cc:	4770      	bx	lr

0800f1ce <__retarget_lock_acquire_recursive>:
 800f1ce:	4770      	bx	lr

0800f1d0 <__retarget_lock_release_recursive>:
 800f1d0:	4770      	bx	lr

0800f1d2 <quorem>:
 800f1d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d6:	6903      	ldr	r3, [r0, #16]
 800f1d8:	690c      	ldr	r4, [r1, #16]
 800f1da:	42a3      	cmp	r3, r4
 800f1dc:	4607      	mov	r7, r0
 800f1de:	db7e      	blt.n	800f2de <quorem+0x10c>
 800f1e0:	3c01      	subs	r4, #1
 800f1e2:	f101 0814 	add.w	r8, r1, #20
 800f1e6:	00a3      	lsls	r3, r4, #2
 800f1e8:	f100 0514 	add.w	r5, r0, #20
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1f2:	9301      	str	r3, [sp, #4]
 800f1f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	429a      	cmp	r2, r3
 800f200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f204:	fbb2 f6f3 	udiv	r6, r2, r3
 800f208:	d32e      	bcc.n	800f268 <quorem+0x96>
 800f20a:	f04f 0a00 	mov.w	sl, #0
 800f20e:	46c4      	mov	ip, r8
 800f210:	46ae      	mov	lr, r5
 800f212:	46d3      	mov	fp, sl
 800f214:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f218:	b298      	uxth	r0, r3
 800f21a:	fb06 a000 	mla	r0, r6, r0, sl
 800f21e:	0c02      	lsrs	r2, r0, #16
 800f220:	0c1b      	lsrs	r3, r3, #16
 800f222:	fb06 2303 	mla	r3, r6, r3, r2
 800f226:	f8de 2000 	ldr.w	r2, [lr]
 800f22a:	b280      	uxth	r0, r0
 800f22c:	b292      	uxth	r2, r2
 800f22e:	1a12      	subs	r2, r2, r0
 800f230:	445a      	add	r2, fp
 800f232:	f8de 0000 	ldr.w	r0, [lr]
 800f236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f240:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f244:	b292      	uxth	r2, r2
 800f246:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f24a:	45e1      	cmp	r9, ip
 800f24c:	f84e 2b04 	str.w	r2, [lr], #4
 800f250:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f254:	d2de      	bcs.n	800f214 <quorem+0x42>
 800f256:	9b00      	ldr	r3, [sp, #0]
 800f258:	58eb      	ldr	r3, [r5, r3]
 800f25a:	b92b      	cbnz	r3, 800f268 <quorem+0x96>
 800f25c:	9b01      	ldr	r3, [sp, #4]
 800f25e:	3b04      	subs	r3, #4
 800f260:	429d      	cmp	r5, r3
 800f262:	461a      	mov	r2, r3
 800f264:	d32f      	bcc.n	800f2c6 <quorem+0xf4>
 800f266:	613c      	str	r4, [r7, #16]
 800f268:	4638      	mov	r0, r7
 800f26a:	f001 f97b 	bl	8010564 <__mcmp>
 800f26e:	2800      	cmp	r0, #0
 800f270:	db25      	blt.n	800f2be <quorem+0xec>
 800f272:	4629      	mov	r1, r5
 800f274:	2000      	movs	r0, #0
 800f276:	f858 2b04 	ldr.w	r2, [r8], #4
 800f27a:	f8d1 c000 	ldr.w	ip, [r1]
 800f27e:	fa1f fe82 	uxth.w	lr, r2
 800f282:	fa1f f38c 	uxth.w	r3, ip
 800f286:	eba3 030e 	sub.w	r3, r3, lr
 800f28a:	4403      	add	r3, r0
 800f28c:	0c12      	lsrs	r2, r2, #16
 800f28e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f292:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f296:	b29b      	uxth	r3, r3
 800f298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f29c:	45c1      	cmp	r9, r8
 800f29e:	f841 3b04 	str.w	r3, [r1], #4
 800f2a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f2a6:	d2e6      	bcs.n	800f276 <quorem+0xa4>
 800f2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2b0:	b922      	cbnz	r2, 800f2bc <quorem+0xea>
 800f2b2:	3b04      	subs	r3, #4
 800f2b4:	429d      	cmp	r5, r3
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	d30b      	bcc.n	800f2d2 <quorem+0x100>
 800f2ba:	613c      	str	r4, [r7, #16]
 800f2bc:	3601      	adds	r6, #1
 800f2be:	4630      	mov	r0, r6
 800f2c0:	b003      	add	sp, #12
 800f2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c6:	6812      	ldr	r2, [r2, #0]
 800f2c8:	3b04      	subs	r3, #4
 800f2ca:	2a00      	cmp	r2, #0
 800f2cc:	d1cb      	bne.n	800f266 <quorem+0x94>
 800f2ce:	3c01      	subs	r4, #1
 800f2d0:	e7c6      	b.n	800f260 <quorem+0x8e>
 800f2d2:	6812      	ldr	r2, [r2, #0]
 800f2d4:	3b04      	subs	r3, #4
 800f2d6:	2a00      	cmp	r2, #0
 800f2d8:	d1ef      	bne.n	800f2ba <quorem+0xe8>
 800f2da:	3c01      	subs	r4, #1
 800f2dc:	e7ea      	b.n	800f2b4 <quorem+0xe2>
 800f2de:	2000      	movs	r0, #0
 800f2e0:	e7ee      	b.n	800f2c0 <quorem+0xee>
 800f2e2:	0000      	movs	r0, r0
 800f2e4:	0000      	movs	r0, r0
	...

0800f2e8 <_dtoa_r>:
 800f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ec:	69c7      	ldr	r7, [r0, #28]
 800f2ee:	b099      	sub	sp, #100	@ 0x64
 800f2f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f2f4:	ec55 4b10 	vmov	r4, r5, d0
 800f2f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f2fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2fc:	4683      	mov	fp, r0
 800f2fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800f300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f302:	b97f      	cbnz	r7, 800f324 <_dtoa_r+0x3c>
 800f304:	2010      	movs	r0, #16
 800f306:	f000 fdfd 	bl	800ff04 <malloc>
 800f30a:	4602      	mov	r2, r0
 800f30c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f310:	b920      	cbnz	r0, 800f31c <_dtoa_r+0x34>
 800f312:	4ba7      	ldr	r3, [pc, #668]	@ (800f5b0 <_dtoa_r+0x2c8>)
 800f314:	21ef      	movs	r1, #239	@ 0xef
 800f316:	48a7      	ldr	r0, [pc, #668]	@ (800f5b4 <_dtoa_r+0x2cc>)
 800f318:	f001 fcbc 	bl	8010c94 <__assert_func>
 800f31c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f320:	6007      	str	r7, [r0, #0]
 800f322:	60c7      	str	r7, [r0, #12]
 800f324:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f328:	6819      	ldr	r1, [r3, #0]
 800f32a:	b159      	cbz	r1, 800f344 <_dtoa_r+0x5c>
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	604a      	str	r2, [r1, #4]
 800f330:	2301      	movs	r3, #1
 800f332:	4093      	lsls	r3, r2
 800f334:	608b      	str	r3, [r1, #8]
 800f336:	4658      	mov	r0, fp
 800f338:	f000 feda 	bl	80100f0 <_Bfree>
 800f33c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f340:	2200      	movs	r2, #0
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	1e2b      	subs	r3, r5, #0
 800f346:	bfb9      	ittee	lt
 800f348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f34c:	9303      	strlt	r3, [sp, #12]
 800f34e:	2300      	movge	r3, #0
 800f350:	6033      	strge	r3, [r6, #0]
 800f352:	9f03      	ldr	r7, [sp, #12]
 800f354:	4b98      	ldr	r3, [pc, #608]	@ (800f5b8 <_dtoa_r+0x2d0>)
 800f356:	bfbc      	itt	lt
 800f358:	2201      	movlt	r2, #1
 800f35a:	6032      	strlt	r2, [r6, #0]
 800f35c:	43bb      	bics	r3, r7
 800f35e:	d112      	bne.n	800f386 <_dtoa_r+0x9e>
 800f360:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f362:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f366:	6013      	str	r3, [r2, #0]
 800f368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f36c:	4323      	orrs	r3, r4
 800f36e:	f000 854d 	beq.w	800fe0c <_dtoa_r+0xb24>
 800f372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f374:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f5cc <_dtoa_r+0x2e4>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f000 854f 	beq.w	800fe1c <_dtoa_r+0xb34>
 800f37e:	f10a 0303 	add.w	r3, sl, #3
 800f382:	f000 bd49 	b.w	800fe18 <_dtoa_r+0xb30>
 800f386:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f38a:	2200      	movs	r2, #0
 800f38c:	ec51 0b17 	vmov	r0, r1, d7
 800f390:	2300      	movs	r3, #0
 800f392:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f396:	f7f1 fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f39a:	4680      	mov	r8, r0
 800f39c:	b158      	cbz	r0, 800f3b6 <_dtoa_r+0xce>
 800f39e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	6013      	str	r3, [r2, #0]
 800f3a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f3a6:	b113      	cbz	r3, 800f3ae <_dtoa_r+0xc6>
 800f3a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f3aa:	4b84      	ldr	r3, [pc, #528]	@ (800f5bc <_dtoa_r+0x2d4>)
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f5d0 <_dtoa_r+0x2e8>
 800f3b2:	f000 bd33 	b.w	800fe1c <_dtoa_r+0xb34>
 800f3b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f3ba:	aa16      	add	r2, sp, #88	@ 0x58
 800f3bc:	a917      	add	r1, sp, #92	@ 0x5c
 800f3be:	4658      	mov	r0, fp
 800f3c0:	f001 f980 	bl	80106c4 <__d2b>
 800f3c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f3c8:	4681      	mov	r9, r0
 800f3ca:	2e00      	cmp	r6, #0
 800f3cc:	d077      	beq.n	800f4be <_dtoa_r+0x1d6>
 800f3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f3e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f3e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	4b74      	ldr	r3, [pc, #464]	@ (800f5c0 <_dtoa_r+0x2d8>)
 800f3ee:	f7f0 ff53 	bl	8000298 <__aeabi_dsub>
 800f3f2:	a369      	add	r3, pc, #420	@ (adr r3, 800f598 <_dtoa_r+0x2b0>)
 800f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f8:	f7f1 f906 	bl	8000608 <__aeabi_dmul>
 800f3fc:	a368      	add	r3, pc, #416	@ (adr r3, 800f5a0 <_dtoa_r+0x2b8>)
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f7f0 ff4b 	bl	800029c <__adddf3>
 800f406:	4604      	mov	r4, r0
 800f408:	4630      	mov	r0, r6
 800f40a:	460d      	mov	r5, r1
 800f40c:	f7f1 f892 	bl	8000534 <__aeabi_i2d>
 800f410:	a365      	add	r3, pc, #404	@ (adr r3, 800f5a8 <_dtoa_r+0x2c0>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f1 f8f7 	bl	8000608 <__aeabi_dmul>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	f7f0 ff3b 	bl	800029c <__adddf3>
 800f426:	4604      	mov	r4, r0
 800f428:	460d      	mov	r5, r1
 800f42a:	f7f1 fb9d 	bl	8000b68 <__aeabi_d2iz>
 800f42e:	2200      	movs	r2, #0
 800f430:	4607      	mov	r7, r0
 800f432:	2300      	movs	r3, #0
 800f434:	4620      	mov	r0, r4
 800f436:	4629      	mov	r1, r5
 800f438:	f7f1 fb58 	bl	8000aec <__aeabi_dcmplt>
 800f43c:	b140      	cbz	r0, 800f450 <_dtoa_r+0x168>
 800f43e:	4638      	mov	r0, r7
 800f440:	f7f1 f878 	bl	8000534 <__aeabi_i2d>
 800f444:	4622      	mov	r2, r4
 800f446:	462b      	mov	r3, r5
 800f448:	f7f1 fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800f44c:	b900      	cbnz	r0, 800f450 <_dtoa_r+0x168>
 800f44e:	3f01      	subs	r7, #1
 800f450:	2f16      	cmp	r7, #22
 800f452:	d851      	bhi.n	800f4f8 <_dtoa_r+0x210>
 800f454:	4b5b      	ldr	r3, [pc, #364]	@ (800f5c4 <_dtoa_r+0x2dc>)
 800f456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f462:	f7f1 fb43 	bl	8000aec <__aeabi_dcmplt>
 800f466:	2800      	cmp	r0, #0
 800f468:	d048      	beq.n	800f4fc <_dtoa_r+0x214>
 800f46a:	3f01      	subs	r7, #1
 800f46c:	2300      	movs	r3, #0
 800f46e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f470:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f472:	1b9b      	subs	r3, r3, r6
 800f474:	1e5a      	subs	r2, r3, #1
 800f476:	bf44      	itt	mi
 800f478:	f1c3 0801 	rsbmi	r8, r3, #1
 800f47c:	2300      	movmi	r3, #0
 800f47e:	9208      	str	r2, [sp, #32]
 800f480:	bf54      	ite	pl
 800f482:	f04f 0800 	movpl.w	r8, #0
 800f486:	9308      	strmi	r3, [sp, #32]
 800f488:	2f00      	cmp	r7, #0
 800f48a:	db39      	blt.n	800f500 <_dtoa_r+0x218>
 800f48c:	9b08      	ldr	r3, [sp, #32]
 800f48e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f490:	443b      	add	r3, r7
 800f492:	9308      	str	r3, [sp, #32]
 800f494:	2300      	movs	r3, #0
 800f496:	930a      	str	r3, [sp, #40]	@ 0x28
 800f498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	d864      	bhi.n	800f568 <_dtoa_r+0x280>
 800f49e:	2b05      	cmp	r3, #5
 800f4a0:	bfc4      	itt	gt
 800f4a2:	3b04      	subgt	r3, #4
 800f4a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a8:	f1a3 0302 	sub.w	r3, r3, #2
 800f4ac:	bfcc      	ite	gt
 800f4ae:	2400      	movgt	r4, #0
 800f4b0:	2401      	movle	r4, #1
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	d863      	bhi.n	800f57e <_dtoa_r+0x296>
 800f4b6:	e8df f003 	tbb	[pc, r3]
 800f4ba:	372a      	.short	0x372a
 800f4bc:	5535      	.short	0x5535
 800f4be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f4c2:	441e      	add	r6, r3
 800f4c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f4c8:	2b20      	cmp	r3, #32
 800f4ca:	bfc1      	itttt	gt
 800f4cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f4d0:	409f      	lslgt	r7, r3
 800f4d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f4d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f4da:	bfd6      	itet	le
 800f4dc:	f1c3 0320 	rsble	r3, r3, #32
 800f4e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f4e4:	fa04 f003 	lslle.w	r0, r4, r3
 800f4e8:	f7f1 f814 	bl	8000514 <__aeabi_ui2d>
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f4f2:	3e01      	subs	r6, #1
 800f4f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f4f6:	e777      	b.n	800f3e8 <_dtoa_r+0x100>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e7b8      	b.n	800f46e <_dtoa_r+0x186>
 800f4fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f4fe:	e7b7      	b.n	800f470 <_dtoa_r+0x188>
 800f500:	427b      	negs	r3, r7
 800f502:	930a      	str	r3, [sp, #40]	@ 0x28
 800f504:	2300      	movs	r3, #0
 800f506:	eba8 0807 	sub.w	r8, r8, r7
 800f50a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f50c:	e7c4      	b.n	800f498 <_dtoa_r+0x1b0>
 800f50e:	2300      	movs	r3, #0
 800f510:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f514:	2b00      	cmp	r3, #0
 800f516:	dc35      	bgt.n	800f584 <_dtoa_r+0x29c>
 800f518:	2301      	movs	r3, #1
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	9307      	str	r3, [sp, #28]
 800f51e:	461a      	mov	r2, r3
 800f520:	920e      	str	r2, [sp, #56]	@ 0x38
 800f522:	e00b      	b.n	800f53c <_dtoa_r+0x254>
 800f524:	2301      	movs	r3, #1
 800f526:	e7f3      	b.n	800f510 <_dtoa_r+0x228>
 800f528:	2300      	movs	r3, #0
 800f52a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f52e:	18fb      	adds	r3, r7, r3
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	3301      	adds	r3, #1
 800f534:	2b01      	cmp	r3, #1
 800f536:	9307      	str	r3, [sp, #28]
 800f538:	bfb8      	it	lt
 800f53a:	2301      	movlt	r3, #1
 800f53c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f540:	2100      	movs	r1, #0
 800f542:	2204      	movs	r2, #4
 800f544:	f102 0514 	add.w	r5, r2, #20
 800f548:	429d      	cmp	r5, r3
 800f54a:	d91f      	bls.n	800f58c <_dtoa_r+0x2a4>
 800f54c:	6041      	str	r1, [r0, #4]
 800f54e:	4658      	mov	r0, fp
 800f550:	f000 fd8e 	bl	8010070 <_Balloc>
 800f554:	4682      	mov	sl, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	d13c      	bne.n	800f5d4 <_dtoa_r+0x2ec>
 800f55a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5c8 <_dtoa_r+0x2e0>)
 800f55c:	4602      	mov	r2, r0
 800f55e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f562:	e6d8      	b.n	800f316 <_dtoa_r+0x2e>
 800f564:	2301      	movs	r3, #1
 800f566:	e7e0      	b.n	800f52a <_dtoa_r+0x242>
 800f568:	2401      	movs	r4, #1
 800f56a:	2300      	movs	r3, #0
 800f56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f56e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f570:	f04f 33ff 	mov.w	r3, #4294967295
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	9307      	str	r3, [sp, #28]
 800f578:	2200      	movs	r2, #0
 800f57a:	2312      	movs	r3, #18
 800f57c:	e7d0      	b.n	800f520 <_dtoa_r+0x238>
 800f57e:	2301      	movs	r3, #1
 800f580:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f582:	e7f5      	b.n	800f570 <_dtoa_r+0x288>
 800f584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	9307      	str	r3, [sp, #28]
 800f58a:	e7d7      	b.n	800f53c <_dtoa_r+0x254>
 800f58c:	3101      	adds	r1, #1
 800f58e:	0052      	lsls	r2, r2, #1
 800f590:	e7d8      	b.n	800f544 <_dtoa_r+0x25c>
 800f592:	bf00      	nop
 800f594:	f3af 8000 	nop.w
 800f598:	636f4361 	.word	0x636f4361
 800f59c:	3fd287a7 	.word	0x3fd287a7
 800f5a0:	8b60c8b3 	.word	0x8b60c8b3
 800f5a4:	3fc68a28 	.word	0x3fc68a28
 800f5a8:	509f79fb 	.word	0x509f79fb
 800f5ac:	3fd34413 	.word	0x3fd34413
 800f5b0:	08011091 	.word	0x08011091
 800f5b4:	080110a8 	.word	0x080110a8
 800f5b8:	7ff00000 	.word	0x7ff00000
 800f5bc:	08011061 	.word	0x08011061
 800f5c0:	3ff80000 	.word	0x3ff80000
 800f5c4:	080111a0 	.word	0x080111a0
 800f5c8:	08011100 	.word	0x08011100
 800f5cc:	0801108d 	.word	0x0801108d
 800f5d0:	08011060 	.word	0x08011060
 800f5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5d8:	6018      	str	r0, [r3, #0]
 800f5da:	9b07      	ldr	r3, [sp, #28]
 800f5dc:	2b0e      	cmp	r3, #14
 800f5de:	f200 80a4 	bhi.w	800f72a <_dtoa_r+0x442>
 800f5e2:	2c00      	cmp	r4, #0
 800f5e4:	f000 80a1 	beq.w	800f72a <_dtoa_r+0x442>
 800f5e8:	2f00      	cmp	r7, #0
 800f5ea:	dd33      	ble.n	800f654 <_dtoa_r+0x36c>
 800f5ec:	4bad      	ldr	r3, [pc, #692]	@ (800f8a4 <_dtoa_r+0x5bc>)
 800f5ee:	f007 020f 	and.w	r2, r7, #15
 800f5f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5f6:	ed93 7b00 	vldr	d7, [r3]
 800f5fa:	05f8      	lsls	r0, r7, #23
 800f5fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f600:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f604:	d516      	bpl.n	800f634 <_dtoa_r+0x34c>
 800f606:	4ba8      	ldr	r3, [pc, #672]	@ (800f8a8 <_dtoa_r+0x5c0>)
 800f608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f60c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f610:	f7f1 f924 	bl	800085c <__aeabi_ddiv>
 800f614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f618:	f004 040f 	and.w	r4, r4, #15
 800f61c:	2603      	movs	r6, #3
 800f61e:	4da2      	ldr	r5, [pc, #648]	@ (800f8a8 <_dtoa_r+0x5c0>)
 800f620:	b954      	cbnz	r4, 800f638 <_dtoa_r+0x350>
 800f622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f62a:	f7f1 f917 	bl	800085c <__aeabi_ddiv>
 800f62e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f632:	e028      	b.n	800f686 <_dtoa_r+0x39e>
 800f634:	2602      	movs	r6, #2
 800f636:	e7f2      	b.n	800f61e <_dtoa_r+0x336>
 800f638:	07e1      	lsls	r1, r4, #31
 800f63a:	d508      	bpl.n	800f64e <_dtoa_r+0x366>
 800f63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f640:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f644:	f7f0 ffe0 	bl	8000608 <__aeabi_dmul>
 800f648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f64c:	3601      	adds	r6, #1
 800f64e:	1064      	asrs	r4, r4, #1
 800f650:	3508      	adds	r5, #8
 800f652:	e7e5      	b.n	800f620 <_dtoa_r+0x338>
 800f654:	f000 80d2 	beq.w	800f7fc <_dtoa_r+0x514>
 800f658:	427c      	negs	r4, r7
 800f65a:	4b92      	ldr	r3, [pc, #584]	@ (800f8a4 <_dtoa_r+0x5bc>)
 800f65c:	4d92      	ldr	r5, [pc, #584]	@ (800f8a8 <_dtoa_r+0x5c0>)
 800f65e:	f004 020f 	and.w	r2, r4, #15
 800f662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f66e:	f7f0 ffcb 	bl	8000608 <__aeabi_dmul>
 800f672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f676:	1124      	asrs	r4, r4, #4
 800f678:	2300      	movs	r3, #0
 800f67a:	2602      	movs	r6, #2
 800f67c:	2c00      	cmp	r4, #0
 800f67e:	f040 80b2 	bne.w	800f7e6 <_dtoa_r+0x4fe>
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1d3      	bne.n	800f62e <_dtoa_r+0x346>
 800f686:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f688:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 80b7 	beq.w	800f800 <_dtoa_r+0x518>
 800f692:	4b86      	ldr	r3, [pc, #536]	@ (800f8ac <_dtoa_r+0x5c4>)
 800f694:	2200      	movs	r2, #0
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f1 fa27 	bl	8000aec <__aeabi_dcmplt>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	f000 80ae 	beq.w	800f800 <_dtoa_r+0x518>
 800f6a4:	9b07      	ldr	r3, [sp, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 80aa 	beq.w	800f800 <_dtoa_r+0x518>
 800f6ac:	9b00      	ldr	r3, [sp, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	dd37      	ble.n	800f722 <_dtoa_r+0x43a>
 800f6b2:	1e7b      	subs	r3, r7, #1
 800f6b4:	9304      	str	r3, [sp, #16]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	4b7d      	ldr	r3, [pc, #500]	@ (800f8b0 <_dtoa_r+0x5c8>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4629      	mov	r1, r5
 800f6be:	f7f0 ffa3 	bl	8000608 <__aeabi_dmul>
 800f6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6c6:	9c00      	ldr	r4, [sp, #0]
 800f6c8:	3601      	adds	r6, #1
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f7f0 ff32 	bl	8000534 <__aeabi_i2d>
 800f6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6d4:	f7f0 ff98 	bl	8000608 <__aeabi_dmul>
 800f6d8:	4b76      	ldr	r3, [pc, #472]	@ (800f8b4 <_dtoa_r+0x5cc>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f7f0 fdde 	bl	800029c <__adddf3>
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f6e6:	2c00      	cmp	r4, #0
 800f6e8:	f040 808d 	bne.w	800f806 <_dtoa_r+0x51e>
 800f6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f0:	4b71      	ldr	r3, [pc, #452]	@ (800f8b8 <_dtoa_r+0x5d0>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f7f0 fdd0 	bl	8000298 <__aeabi_dsub>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f700:	462a      	mov	r2, r5
 800f702:	4633      	mov	r3, r6
 800f704:	f7f1 fa10 	bl	8000b28 <__aeabi_dcmpgt>
 800f708:	2800      	cmp	r0, #0
 800f70a:	f040 828b 	bne.w	800fc24 <_dtoa_r+0x93c>
 800f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f712:	462a      	mov	r2, r5
 800f714:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f718:	f7f1 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f040 8128 	bne.w	800f972 <_dtoa_r+0x68a>
 800f722:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f726:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f72a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	f2c0 815a 	blt.w	800f9e6 <_dtoa_r+0x6fe>
 800f732:	2f0e      	cmp	r7, #14
 800f734:	f300 8157 	bgt.w	800f9e6 <_dtoa_r+0x6fe>
 800f738:	4b5a      	ldr	r3, [pc, #360]	@ (800f8a4 <_dtoa_r+0x5bc>)
 800f73a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f73e:	ed93 7b00 	vldr	d7, [r3]
 800f742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f744:	2b00      	cmp	r3, #0
 800f746:	ed8d 7b00 	vstr	d7, [sp]
 800f74a:	da03      	bge.n	800f754 <_dtoa_r+0x46c>
 800f74c:	9b07      	ldr	r3, [sp, #28]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f340 8101 	ble.w	800f956 <_dtoa_r+0x66e>
 800f754:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f758:	4656      	mov	r6, sl
 800f75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f75e:	4620      	mov	r0, r4
 800f760:	4629      	mov	r1, r5
 800f762:	f7f1 f87b 	bl	800085c <__aeabi_ddiv>
 800f766:	f7f1 f9ff 	bl	8000b68 <__aeabi_d2iz>
 800f76a:	4680      	mov	r8, r0
 800f76c:	f7f0 fee2 	bl	8000534 <__aeabi_i2d>
 800f770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f774:	f7f0 ff48 	bl	8000608 <__aeabi_dmul>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4620      	mov	r0, r4
 800f77e:	4629      	mov	r1, r5
 800f780:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f784:	f7f0 fd88 	bl	8000298 <__aeabi_dsub>
 800f788:	f806 4b01 	strb.w	r4, [r6], #1
 800f78c:	9d07      	ldr	r5, [sp, #28]
 800f78e:	eba6 040a 	sub.w	r4, r6, sl
 800f792:	42a5      	cmp	r5, r4
 800f794:	4602      	mov	r2, r0
 800f796:	460b      	mov	r3, r1
 800f798:	f040 8117 	bne.w	800f9ca <_dtoa_r+0x6e2>
 800f79c:	f7f0 fd7e 	bl	800029c <__adddf3>
 800f7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	f7f1 f9be 	bl	8000b28 <__aeabi_dcmpgt>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f040 80f9 	bne.w	800f9a4 <_dtoa_r+0x6bc>
 800f7b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	f7f1 f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7be:	b118      	cbz	r0, 800f7c8 <_dtoa_r+0x4e0>
 800f7c0:	f018 0f01 	tst.w	r8, #1
 800f7c4:	f040 80ee 	bne.w	800f9a4 <_dtoa_r+0x6bc>
 800f7c8:	4649      	mov	r1, r9
 800f7ca:	4658      	mov	r0, fp
 800f7cc:	f000 fc90 	bl	80100f0 <_Bfree>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	7033      	strb	r3, [r6, #0]
 800f7d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7d6:	3701      	adds	r7, #1
 800f7d8:	601f      	str	r7, [r3, #0]
 800f7da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 831d 	beq.w	800fe1c <_dtoa_r+0xb34>
 800f7e2:	601e      	str	r6, [r3, #0]
 800f7e4:	e31a      	b.n	800fe1c <_dtoa_r+0xb34>
 800f7e6:	07e2      	lsls	r2, r4, #31
 800f7e8:	d505      	bpl.n	800f7f6 <_dtoa_r+0x50e>
 800f7ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7ee:	f7f0 ff0b 	bl	8000608 <__aeabi_dmul>
 800f7f2:	3601      	adds	r6, #1
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	1064      	asrs	r4, r4, #1
 800f7f8:	3508      	adds	r5, #8
 800f7fa:	e73f      	b.n	800f67c <_dtoa_r+0x394>
 800f7fc:	2602      	movs	r6, #2
 800f7fe:	e742      	b.n	800f686 <_dtoa_r+0x39e>
 800f800:	9c07      	ldr	r4, [sp, #28]
 800f802:	9704      	str	r7, [sp, #16]
 800f804:	e761      	b.n	800f6ca <_dtoa_r+0x3e2>
 800f806:	4b27      	ldr	r3, [pc, #156]	@ (800f8a4 <_dtoa_r+0x5bc>)
 800f808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f80a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f80e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f812:	4454      	add	r4, sl
 800f814:	2900      	cmp	r1, #0
 800f816:	d053      	beq.n	800f8c0 <_dtoa_r+0x5d8>
 800f818:	4928      	ldr	r1, [pc, #160]	@ (800f8bc <_dtoa_r+0x5d4>)
 800f81a:	2000      	movs	r0, #0
 800f81c:	f7f1 f81e 	bl	800085c <__aeabi_ddiv>
 800f820:	4633      	mov	r3, r6
 800f822:	462a      	mov	r2, r5
 800f824:	f7f0 fd38 	bl	8000298 <__aeabi_dsub>
 800f828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f82c:	4656      	mov	r6, sl
 800f82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f832:	f7f1 f999 	bl	8000b68 <__aeabi_d2iz>
 800f836:	4605      	mov	r5, r0
 800f838:	f7f0 fe7c 	bl	8000534 <__aeabi_i2d>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f844:	f7f0 fd28 	bl	8000298 <__aeabi_dsub>
 800f848:	3530      	adds	r5, #48	@ 0x30
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f852:	f806 5b01 	strb.w	r5, [r6], #1
 800f856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f85a:	f7f1 f947 	bl	8000aec <__aeabi_dcmplt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	d171      	bne.n	800f946 <_dtoa_r+0x65e>
 800f862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f866:	4911      	ldr	r1, [pc, #68]	@ (800f8ac <_dtoa_r+0x5c4>)
 800f868:	2000      	movs	r0, #0
 800f86a:	f7f0 fd15 	bl	8000298 <__aeabi_dsub>
 800f86e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f872:	f7f1 f93b 	bl	8000aec <__aeabi_dcmplt>
 800f876:	2800      	cmp	r0, #0
 800f878:	f040 8095 	bne.w	800f9a6 <_dtoa_r+0x6be>
 800f87c:	42a6      	cmp	r6, r4
 800f87e:	f43f af50 	beq.w	800f722 <_dtoa_r+0x43a>
 800f882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f886:	4b0a      	ldr	r3, [pc, #40]	@ (800f8b0 <_dtoa_r+0x5c8>)
 800f888:	2200      	movs	r2, #0
 800f88a:	f7f0 febd 	bl	8000608 <__aeabi_dmul>
 800f88e:	4b08      	ldr	r3, [pc, #32]	@ (800f8b0 <_dtoa_r+0x5c8>)
 800f890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f894:	2200      	movs	r2, #0
 800f896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f89a:	f7f0 feb5 	bl	8000608 <__aeabi_dmul>
 800f89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8a2:	e7c4      	b.n	800f82e <_dtoa_r+0x546>
 800f8a4:	080111a0 	.word	0x080111a0
 800f8a8:	08011178 	.word	0x08011178
 800f8ac:	3ff00000 	.word	0x3ff00000
 800f8b0:	40240000 	.word	0x40240000
 800f8b4:	401c0000 	.word	0x401c0000
 800f8b8:	40140000 	.word	0x40140000
 800f8bc:	3fe00000 	.word	0x3fe00000
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	f7f0 fea0 	bl	8000608 <__aeabi_dmul>
 800f8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f8cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800f8ce:	4656      	mov	r6, sl
 800f8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8d4:	f7f1 f948 	bl	8000b68 <__aeabi_d2iz>
 800f8d8:	4605      	mov	r5, r0
 800f8da:	f7f0 fe2b 	bl	8000534 <__aeabi_i2d>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8e6:	f7f0 fcd7 	bl	8000298 <__aeabi_dsub>
 800f8ea:	3530      	adds	r5, #48	@ 0x30
 800f8ec:	f806 5b01 	strb.w	r5, [r6], #1
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	42a6      	cmp	r6, r4
 800f8f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8fa:	f04f 0200 	mov.w	r2, #0
 800f8fe:	d124      	bne.n	800f94a <_dtoa_r+0x662>
 800f900:	4bac      	ldr	r3, [pc, #688]	@ (800fbb4 <_dtoa_r+0x8cc>)
 800f902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f906:	f7f0 fcc9 	bl	800029c <__adddf3>
 800f90a:	4602      	mov	r2, r0
 800f90c:	460b      	mov	r3, r1
 800f90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f912:	f7f1 f909 	bl	8000b28 <__aeabi_dcmpgt>
 800f916:	2800      	cmp	r0, #0
 800f918:	d145      	bne.n	800f9a6 <_dtoa_r+0x6be>
 800f91a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f91e:	49a5      	ldr	r1, [pc, #660]	@ (800fbb4 <_dtoa_r+0x8cc>)
 800f920:	2000      	movs	r0, #0
 800f922:	f7f0 fcb9 	bl	8000298 <__aeabi_dsub>
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f92e:	f7f1 f8dd 	bl	8000aec <__aeabi_dcmplt>
 800f932:	2800      	cmp	r0, #0
 800f934:	f43f aef5 	beq.w	800f722 <_dtoa_r+0x43a>
 800f938:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f93a:	1e73      	subs	r3, r6, #1
 800f93c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f93e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f942:	2b30      	cmp	r3, #48	@ 0x30
 800f944:	d0f8      	beq.n	800f938 <_dtoa_r+0x650>
 800f946:	9f04      	ldr	r7, [sp, #16]
 800f948:	e73e      	b.n	800f7c8 <_dtoa_r+0x4e0>
 800f94a:	4b9b      	ldr	r3, [pc, #620]	@ (800fbb8 <_dtoa_r+0x8d0>)
 800f94c:	f7f0 fe5c 	bl	8000608 <__aeabi_dmul>
 800f950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f954:	e7bc      	b.n	800f8d0 <_dtoa_r+0x5e8>
 800f956:	d10c      	bne.n	800f972 <_dtoa_r+0x68a>
 800f958:	4b98      	ldr	r3, [pc, #608]	@ (800fbbc <_dtoa_r+0x8d4>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f960:	f7f0 fe52 	bl	8000608 <__aeabi_dmul>
 800f964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f968:	f7f1 f8d4 	bl	8000b14 <__aeabi_dcmpge>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	f000 8157 	beq.w	800fc20 <_dtoa_r+0x938>
 800f972:	2400      	movs	r4, #0
 800f974:	4625      	mov	r5, r4
 800f976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f978:	43db      	mvns	r3, r3
 800f97a:	9304      	str	r3, [sp, #16]
 800f97c:	4656      	mov	r6, sl
 800f97e:	2700      	movs	r7, #0
 800f980:	4621      	mov	r1, r4
 800f982:	4658      	mov	r0, fp
 800f984:	f000 fbb4 	bl	80100f0 <_Bfree>
 800f988:	2d00      	cmp	r5, #0
 800f98a:	d0dc      	beq.n	800f946 <_dtoa_r+0x65e>
 800f98c:	b12f      	cbz	r7, 800f99a <_dtoa_r+0x6b2>
 800f98e:	42af      	cmp	r7, r5
 800f990:	d003      	beq.n	800f99a <_dtoa_r+0x6b2>
 800f992:	4639      	mov	r1, r7
 800f994:	4658      	mov	r0, fp
 800f996:	f000 fbab 	bl	80100f0 <_Bfree>
 800f99a:	4629      	mov	r1, r5
 800f99c:	4658      	mov	r0, fp
 800f99e:	f000 fba7 	bl	80100f0 <_Bfree>
 800f9a2:	e7d0      	b.n	800f946 <_dtoa_r+0x65e>
 800f9a4:	9704      	str	r7, [sp, #16]
 800f9a6:	4633      	mov	r3, r6
 800f9a8:	461e      	mov	r6, r3
 800f9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9ae:	2a39      	cmp	r2, #57	@ 0x39
 800f9b0:	d107      	bne.n	800f9c2 <_dtoa_r+0x6da>
 800f9b2:	459a      	cmp	sl, r3
 800f9b4:	d1f8      	bne.n	800f9a8 <_dtoa_r+0x6c0>
 800f9b6:	9a04      	ldr	r2, [sp, #16]
 800f9b8:	3201      	adds	r2, #1
 800f9ba:	9204      	str	r2, [sp, #16]
 800f9bc:	2230      	movs	r2, #48	@ 0x30
 800f9be:	f88a 2000 	strb.w	r2, [sl]
 800f9c2:	781a      	ldrb	r2, [r3, #0]
 800f9c4:	3201      	adds	r2, #1
 800f9c6:	701a      	strb	r2, [r3, #0]
 800f9c8:	e7bd      	b.n	800f946 <_dtoa_r+0x65e>
 800f9ca:	4b7b      	ldr	r3, [pc, #492]	@ (800fbb8 <_dtoa_r+0x8d0>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f7f0 fe1b 	bl	8000608 <__aeabi_dmul>
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	460d      	mov	r5, r1
 800f9da:	f7f1 f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	f43f aebb 	beq.w	800f75a <_dtoa_r+0x472>
 800f9e4:	e6f0      	b.n	800f7c8 <_dtoa_r+0x4e0>
 800f9e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9e8:	2a00      	cmp	r2, #0
 800f9ea:	f000 80db 	beq.w	800fba4 <_dtoa_r+0x8bc>
 800f9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9f0:	2a01      	cmp	r2, #1
 800f9f2:	f300 80bf 	bgt.w	800fb74 <_dtoa_r+0x88c>
 800f9f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	f000 80b7 	beq.w	800fb6c <_dtoa_r+0x884>
 800f9fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fa02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fa04:	4646      	mov	r6, r8
 800fa06:	9a08      	ldr	r2, [sp, #32]
 800fa08:	2101      	movs	r1, #1
 800fa0a:	441a      	add	r2, r3
 800fa0c:	4658      	mov	r0, fp
 800fa0e:	4498      	add	r8, r3
 800fa10:	9208      	str	r2, [sp, #32]
 800fa12:	f000 fc21 	bl	8010258 <__i2b>
 800fa16:	4605      	mov	r5, r0
 800fa18:	b15e      	cbz	r6, 800fa32 <_dtoa_r+0x74a>
 800fa1a:	9b08      	ldr	r3, [sp, #32]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dd08      	ble.n	800fa32 <_dtoa_r+0x74a>
 800fa20:	42b3      	cmp	r3, r6
 800fa22:	9a08      	ldr	r2, [sp, #32]
 800fa24:	bfa8      	it	ge
 800fa26:	4633      	movge	r3, r6
 800fa28:	eba8 0803 	sub.w	r8, r8, r3
 800fa2c:	1af6      	subs	r6, r6, r3
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	9308      	str	r3, [sp, #32]
 800fa32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa34:	b1f3      	cbz	r3, 800fa74 <_dtoa_r+0x78c>
 800fa36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f000 80b7 	beq.w	800fbac <_dtoa_r+0x8c4>
 800fa3e:	b18c      	cbz	r4, 800fa64 <_dtoa_r+0x77c>
 800fa40:	4629      	mov	r1, r5
 800fa42:	4622      	mov	r2, r4
 800fa44:	4658      	mov	r0, fp
 800fa46:	f000 fcc7 	bl	80103d8 <__pow5mult>
 800fa4a:	464a      	mov	r2, r9
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	4605      	mov	r5, r0
 800fa50:	4658      	mov	r0, fp
 800fa52:	f000 fc17 	bl	8010284 <__multiply>
 800fa56:	4649      	mov	r1, r9
 800fa58:	9004      	str	r0, [sp, #16]
 800fa5a:	4658      	mov	r0, fp
 800fa5c:	f000 fb48 	bl	80100f0 <_Bfree>
 800fa60:	9b04      	ldr	r3, [sp, #16]
 800fa62:	4699      	mov	r9, r3
 800fa64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa66:	1b1a      	subs	r2, r3, r4
 800fa68:	d004      	beq.n	800fa74 <_dtoa_r+0x78c>
 800fa6a:	4649      	mov	r1, r9
 800fa6c:	4658      	mov	r0, fp
 800fa6e:	f000 fcb3 	bl	80103d8 <__pow5mult>
 800fa72:	4681      	mov	r9, r0
 800fa74:	2101      	movs	r1, #1
 800fa76:	4658      	mov	r0, fp
 800fa78:	f000 fbee 	bl	8010258 <__i2b>
 800fa7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa7e:	4604      	mov	r4, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 81cf 	beq.w	800fe24 <_dtoa_r+0xb3c>
 800fa86:	461a      	mov	r2, r3
 800fa88:	4601      	mov	r1, r0
 800fa8a:	4658      	mov	r0, fp
 800fa8c:	f000 fca4 	bl	80103d8 <__pow5mult>
 800fa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	4604      	mov	r4, r0
 800fa96:	f300 8095 	bgt.w	800fbc4 <_dtoa_r+0x8dc>
 800fa9a:	9b02      	ldr	r3, [sp, #8]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f040 8087 	bne.w	800fbb0 <_dtoa_r+0x8c8>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f040 8089 	bne.w	800fbc0 <_dtoa_r+0x8d8>
 800faae:	9b03      	ldr	r3, [sp, #12]
 800fab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fab4:	0d1b      	lsrs	r3, r3, #20
 800fab6:	051b      	lsls	r3, r3, #20
 800fab8:	b12b      	cbz	r3, 800fac6 <_dtoa_r+0x7de>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	3301      	adds	r3, #1
 800fabe:	9308      	str	r3, [sp, #32]
 800fac0:	f108 0801 	add.w	r8, r8, #1
 800fac4:	2301      	movs	r3, #1
 800fac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 81b0 	beq.w	800fe30 <_dtoa_r+0xb48>
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fad6:	6918      	ldr	r0, [r3, #16]
 800fad8:	f000 fb72 	bl	80101c0 <__hi0bits>
 800fadc:	f1c0 0020 	rsb	r0, r0, #32
 800fae0:	9b08      	ldr	r3, [sp, #32]
 800fae2:	4418      	add	r0, r3
 800fae4:	f010 001f 	ands.w	r0, r0, #31
 800fae8:	d077      	beq.n	800fbda <_dtoa_r+0x8f2>
 800faea:	f1c0 0320 	rsb	r3, r0, #32
 800faee:	2b04      	cmp	r3, #4
 800faf0:	dd6b      	ble.n	800fbca <_dtoa_r+0x8e2>
 800faf2:	9b08      	ldr	r3, [sp, #32]
 800faf4:	f1c0 001c 	rsb	r0, r0, #28
 800faf8:	4403      	add	r3, r0
 800fafa:	4480      	add	r8, r0
 800fafc:	4406      	add	r6, r0
 800fafe:	9308      	str	r3, [sp, #32]
 800fb00:	f1b8 0f00 	cmp.w	r8, #0
 800fb04:	dd05      	ble.n	800fb12 <_dtoa_r+0x82a>
 800fb06:	4649      	mov	r1, r9
 800fb08:	4642      	mov	r2, r8
 800fb0a:	4658      	mov	r0, fp
 800fb0c:	f000 fcbe 	bl	801048c <__lshift>
 800fb10:	4681      	mov	r9, r0
 800fb12:	9b08      	ldr	r3, [sp, #32]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dd05      	ble.n	800fb24 <_dtoa_r+0x83c>
 800fb18:	4621      	mov	r1, r4
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	f000 fcb5 	bl	801048c <__lshift>
 800fb22:	4604      	mov	r4, r0
 800fb24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d059      	beq.n	800fbde <_dtoa_r+0x8f6>
 800fb2a:	4621      	mov	r1, r4
 800fb2c:	4648      	mov	r0, r9
 800fb2e:	f000 fd19 	bl	8010564 <__mcmp>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	da53      	bge.n	800fbde <_dtoa_r+0x8f6>
 800fb36:	1e7b      	subs	r3, r7, #1
 800fb38:	9304      	str	r3, [sp, #16]
 800fb3a:	4649      	mov	r1, r9
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	220a      	movs	r2, #10
 800fb40:	4658      	mov	r0, fp
 800fb42:	f000 faf7 	bl	8010134 <__multadd>
 800fb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb48:	4681      	mov	r9, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f000 8172 	beq.w	800fe34 <_dtoa_r+0xb4c>
 800fb50:	2300      	movs	r3, #0
 800fb52:	4629      	mov	r1, r5
 800fb54:	220a      	movs	r2, #10
 800fb56:	4658      	mov	r0, fp
 800fb58:	f000 faec 	bl	8010134 <__multadd>
 800fb5c:	9b00      	ldr	r3, [sp, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	4605      	mov	r5, r0
 800fb62:	dc67      	bgt.n	800fc34 <_dtoa_r+0x94c>
 800fb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb66:	2b02      	cmp	r3, #2
 800fb68:	dc41      	bgt.n	800fbee <_dtoa_r+0x906>
 800fb6a:	e063      	b.n	800fc34 <_dtoa_r+0x94c>
 800fb6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fb72:	e746      	b.n	800fa02 <_dtoa_r+0x71a>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	1e5c      	subs	r4, r3, #1
 800fb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb7a:	42a3      	cmp	r3, r4
 800fb7c:	bfbf      	itttt	lt
 800fb7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fb80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fb82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fb84:	1ae3      	sublt	r3, r4, r3
 800fb86:	bfb4      	ite	lt
 800fb88:	18d2      	addlt	r2, r2, r3
 800fb8a:	1b1c      	subge	r4, r3, r4
 800fb8c:	9b07      	ldr	r3, [sp, #28]
 800fb8e:	bfbc      	itt	lt
 800fb90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fb92:	2400      	movlt	r4, #0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	bfb5      	itete	lt
 800fb98:	eba8 0603 	sublt.w	r6, r8, r3
 800fb9c:	9b07      	ldrge	r3, [sp, #28]
 800fb9e:	2300      	movlt	r3, #0
 800fba0:	4646      	movge	r6, r8
 800fba2:	e730      	b.n	800fa06 <_dtoa_r+0x71e>
 800fba4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fba6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fba8:	4646      	mov	r6, r8
 800fbaa:	e735      	b.n	800fa18 <_dtoa_r+0x730>
 800fbac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbae:	e75c      	b.n	800fa6a <_dtoa_r+0x782>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e788      	b.n	800fac6 <_dtoa_r+0x7de>
 800fbb4:	3fe00000 	.word	0x3fe00000
 800fbb8:	40240000 	.word	0x40240000
 800fbbc:	40140000 	.word	0x40140000
 800fbc0:	9b02      	ldr	r3, [sp, #8]
 800fbc2:	e780      	b.n	800fac6 <_dtoa_r+0x7de>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbc8:	e782      	b.n	800fad0 <_dtoa_r+0x7e8>
 800fbca:	d099      	beq.n	800fb00 <_dtoa_r+0x818>
 800fbcc:	9a08      	ldr	r2, [sp, #32]
 800fbce:	331c      	adds	r3, #28
 800fbd0:	441a      	add	r2, r3
 800fbd2:	4498      	add	r8, r3
 800fbd4:	441e      	add	r6, r3
 800fbd6:	9208      	str	r2, [sp, #32]
 800fbd8:	e792      	b.n	800fb00 <_dtoa_r+0x818>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	e7f6      	b.n	800fbcc <_dtoa_r+0x8e4>
 800fbde:	9b07      	ldr	r3, [sp, #28]
 800fbe0:	9704      	str	r7, [sp, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	dc20      	bgt.n	800fc28 <_dtoa_r+0x940>
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	dd1e      	ble.n	800fc2c <_dtoa_r+0x944>
 800fbee:	9b00      	ldr	r3, [sp, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f47f aec0 	bne.w	800f976 <_dtoa_r+0x68e>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	2205      	movs	r2, #5
 800fbfa:	4658      	mov	r0, fp
 800fbfc:	f000 fa9a 	bl	8010134 <__multadd>
 800fc00:	4601      	mov	r1, r0
 800fc02:	4604      	mov	r4, r0
 800fc04:	4648      	mov	r0, r9
 800fc06:	f000 fcad 	bl	8010564 <__mcmp>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	f77f aeb3 	ble.w	800f976 <_dtoa_r+0x68e>
 800fc10:	4656      	mov	r6, sl
 800fc12:	2331      	movs	r3, #49	@ 0x31
 800fc14:	f806 3b01 	strb.w	r3, [r6], #1
 800fc18:	9b04      	ldr	r3, [sp, #16]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	9304      	str	r3, [sp, #16]
 800fc1e:	e6ae      	b.n	800f97e <_dtoa_r+0x696>
 800fc20:	9c07      	ldr	r4, [sp, #28]
 800fc22:	9704      	str	r7, [sp, #16]
 800fc24:	4625      	mov	r5, r4
 800fc26:	e7f3      	b.n	800fc10 <_dtoa_r+0x928>
 800fc28:	9b07      	ldr	r3, [sp, #28]
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 8104 	beq.w	800fe3c <_dtoa_r+0xb54>
 800fc34:	2e00      	cmp	r6, #0
 800fc36:	dd05      	ble.n	800fc44 <_dtoa_r+0x95c>
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4632      	mov	r2, r6
 800fc3c:	4658      	mov	r0, fp
 800fc3e:	f000 fc25 	bl	801048c <__lshift>
 800fc42:	4605      	mov	r5, r0
 800fc44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d05a      	beq.n	800fd00 <_dtoa_r+0xa18>
 800fc4a:	6869      	ldr	r1, [r5, #4]
 800fc4c:	4658      	mov	r0, fp
 800fc4e:	f000 fa0f 	bl	8010070 <_Balloc>
 800fc52:	4606      	mov	r6, r0
 800fc54:	b928      	cbnz	r0, 800fc62 <_dtoa_r+0x97a>
 800fc56:	4b84      	ldr	r3, [pc, #528]	@ (800fe68 <_dtoa_r+0xb80>)
 800fc58:	4602      	mov	r2, r0
 800fc5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc5e:	f7ff bb5a 	b.w	800f316 <_dtoa_r+0x2e>
 800fc62:	692a      	ldr	r2, [r5, #16]
 800fc64:	3202      	adds	r2, #2
 800fc66:	0092      	lsls	r2, r2, #2
 800fc68:	f105 010c 	add.w	r1, r5, #12
 800fc6c:	300c      	adds	r0, #12
 800fc6e:	f001 f803 	bl	8010c78 <memcpy>
 800fc72:	2201      	movs	r2, #1
 800fc74:	4631      	mov	r1, r6
 800fc76:	4658      	mov	r0, fp
 800fc78:	f000 fc08 	bl	801048c <__lshift>
 800fc7c:	f10a 0301 	add.w	r3, sl, #1
 800fc80:	9307      	str	r3, [sp, #28]
 800fc82:	9b00      	ldr	r3, [sp, #0]
 800fc84:	4453      	add	r3, sl
 800fc86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc88:	9b02      	ldr	r3, [sp, #8]
 800fc8a:	f003 0301 	and.w	r3, r3, #1
 800fc8e:	462f      	mov	r7, r5
 800fc90:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc92:	4605      	mov	r5, r0
 800fc94:	9b07      	ldr	r3, [sp, #28]
 800fc96:	4621      	mov	r1, r4
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	4648      	mov	r0, r9
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	f7ff fa98 	bl	800f1d2 <quorem>
 800fca2:	4639      	mov	r1, r7
 800fca4:	9002      	str	r0, [sp, #8]
 800fca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fcaa:	4648      	mov	r0, r9
 800fcac:	f000 fc5a 	bl	8010564 <__mcmp>
 800fcb0:	462a      	mov	r2, r5
 800fcb2:	9008      	str	r0, [sp, #32]
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4658      	mov	r0, fp
 800fcb8:	f000 fc70 	bl	801059c <__mdiff>
 800fcbc:	68c2      	ldr	r2, [r0, #12]
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	bb02      	cbnz	r2, 800fd04 <_dtoa_r+0xa1c>
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	4648      	mov	r0, r9
 800fcc6:	f000 fc4d 	bl	8010564 <__mcmp>
 800fcca:	4602      	mov	r2, r0
 800fccc:	4631      	mov	r1, r6
 800fcce:	4658      	mov	r0, fp
 800fcd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fcd2:	f000 fa0d 	bl	80100f0 <_Bfree>
 800fcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcda:	9e07      	ldr	r6, [sp, #28]
 800fcdc:	ea43 0102 	orr.w	r1, r3, r2
 800fce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fce2:	4319      	orrs	r1, r3
 800fce4:	d110      	bne.n	800fd08 <_dtoa_r+0xa20>
 800fce6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fcea:	d029      	beq.n	800fd40 <_dtoa_r+0xa58>
 800fcec:	9b08      	ldr	r3, [sp, #32]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dd02      	ble.n	800fcf8 <_dtoa_r+0xa10>
 800fcf2:	9b02      	ldr	r3, [sp, #8]
 800fcf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fcf8:	9b00      	ldr	r3, [sp, #0]
 800fcfa:	f883 8000 	strb.w	r8, [r3]
 800fcfe:	e63f      	b.n	800f980 <_dtoa_r+0x698>
 800fd00:	4628      	mov	r0, r5
 800fd02:	e7bb      	b.n	800fc7c <_dtoa_r+0x994>
 800fd04:	2201      	movs	r2, #1
 800fd06:	e7e1      	b.n	800fccc <_dtoa_r+0x9e4>
 800fd08:	9b08      	ldr	r3, [sp, #32]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	db04      	blt.n	800fd18 <_dtoa_r+0xa30>
 800fd0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd10:	430b      	orrs	r3, r1
 800fd12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd14:	430b      	orrs	r3, r1
 800fd16:	d120      	bne.n	800fd5a <_dtoa_r+0xa72>
 800fd18:	2a00      	cmp	r2, #0
 800fd1a:	dded      	ble.n	800fcf8 <_dtoa_r+0xa10>
 800fd1c:	4649      	mov	r1, r9
 800fd1e:	2201      	movs	r2, #1
 800fd20:	4658      	mov	r0, fp
 800fd22:	f000 fbb3 	bl	801048c <__lshift>
 800fd26:	4621      	mov	r1, r4
 800fd28:	4681      	mov	r9, r0
 800fd2a:	f000 fc1b 	bl	8010564 <__mcmp>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	dc03      	bgt.n	800fd3a <_dtoa_r+0xa52>
 800fd32:	d1e1      	bne.n	800fcf8 <_dtoa_r+0xa10>
 800fd34:	f018 0f01 	tst.w	r8, #1
 800fd38:	d0de      	beq.n	800fcf8 <_dtoa_r+0xa10>
 800fd3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd3e:	d1d8      	bne.n	800fcf2 <_dtoa_r+0xa0a>
 800fd40:	9a00      	ldr	r2, [sp, #0]
 800fd42:	2339      	movs	r3, #57	@ 0x39
 800fd44:	7013      	strb	r3, [r2, #0]
 800fd46:	4633      	mov	r3, r6
 800fd48:	461e      	mov	r6, r3
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fd50:	2a39      	cmp	r2, #57	@ 0x39
 800fd52:	d052      	beq.n	800fdfa <_dtoa_r+0xb12>
 800fd54:	3201      	adds	r2, #1
 800fd56:	701a      	strb	r2, [r3, #0]
 800fd58:	e612      	b.n	800f980 <_dtoa_r+0x698>
 800fd5a:	2a00      	cmp	r2, #0
 800fd5c:	dd07      	ble.n	800fd6e <_dtoa_r+0xa86>
 800fd5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd62:	d0ed      	beq.n	800fd40 <_dtoa_r+0xa58>
 800fd64:	9a00      	ldr	r2, [sp, #0]
 800fd66:	f108 0301 	add.w	r3, r8, #1
 800fd6a:	7013      	strb	r3, [r2, #0]
 800fd6c:	e608      	b.n	800f980 <_dtoa_r+0x698>
 800fd6e:	9b07      	ldr	r3, [sp, #28]
 800fd70:	9a07      	ldr	r2, [sp, #28]
 800fd72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d028      	beq.n	800fdce <_dtoa_r+0xae6>
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	2300      	movs	r3, #0
 800fd80:	220a      	movs	r2, #10
 800fd82:	4658      	mov	r0, fp
 800fd84:	f000 f9d6 	bl	8010134 <__multadd>
 800fd88:	42af      	cmp	r7, r5
 800fd8a:	4681      	mov	r9, r0
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	f04f 020a 	mov.w	r2, #10
 800fd94:	4639      	mov	r1, r7
 800fd96:	4658      	mov	r0, fp
 800fd98:	d107      	bne.n	800fdaa <_dtoa_r+0xac2>
 800fd9a:	f000 f9cb 	bl	8010134 <__multadd>
 800fd9e:	4607      	mov	r7, r0
 800fda0:	4605      	mov	r5, r0
 800fda2:	9b07      	ldr	r3, [sp, #28]
 800fda4:	3301      	adds	r3, #1
 800fda6:	9307      	str	r3, [sp, #28]
 800fda8:	e774      	b.n	800fc94 <_dtoa_r+0x9ac>
 800fdaa:	f000 f9c3 	bl	8010134 <__multadd>
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	220a      	movs	r2, #10
 800fdb6:	4658      	mov	r0, fp
 800fdb8:	f000 f9bc 	bl	8010134 <__multadd>
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	e7f0      	b.n	800fda2 <_dtoa_r+0xaba>
 800fdc0:	9b00      	ldr	r3, [sp, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	bfcc      	ite	gt
 800fdc6:	461e      	movgt	r6, r3
 800fdc8:	2601      	movle	r6, #1
 800fdca:	4456      	add	r6, sl
 800fdcc:	2700      	movs	r7, #0
 800fdce:	4649      	mov	r1, r9
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	4658      	mov	r0, fp
 800fdd4:	f000 fb5a 	bl	801048c <__lshift>
 800fdd8:	4621      	mov	r1, r4
 800fdda:	4681      	mov	r9, r0
 800fddc:	f000 fbc2 	bl	8010564 <__mcmp>
 800fde0:	2800      	cmp	r0, #0
 800fde2:	dcb0      	bgt.n	800fd46 <_dtoa_r+0xa5e>
 800fde4:	d102      	bne.n	800fdec <_dtoa_r+0xb04>
 800fde6:	f018 0f01 	tst.w	r8, #1
 800fdea:	d1ac      	bne.n	800fd46 <_dtoa_r+0xa5e>
 800fdec:	4633      	mov	r3, r6
 800fdee:	461e      	mov	r6, r3
 800fdf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fdf4:	2a30      	cmp	r2, #48	@ 0x30
 800fdf6:	d0fa      	beq.n	800fdee <_dtoa_r+0xb06>
 800fdf8:	e5c2      	b.n	800f980 <_dtoa_r+0x698>
 800fdfa:	459a      	cmp	sl, r3
 800fdfc:	d1a4      	bne.n	800fd48 <_dtoa_r+0xa60>
 800fdfe:	9b04      	ldr	r3, [sp, #16]
 800fe00:	3301      	adds	r3, #1
 800fe02:	9304      	str	r3, [sp, #16]
 800fe04:	2331      	movs	r3, #49	@ 0x31
 800fe06:	f88a 3000 	strb.w	r3, [sl]
 800fe0a:	e5b9      	b.n	800f980 <_dtoa_r+0x698>
 800fe0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fe6c <_dtoa_r+0xb84>
 800fe12:	b11b      	cbz	r3, 800fe1c <_dtoa_r+0xb34>
 800fe14:	f10a 0308 	add.w	r3, sl, #8
 800fe18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fe1a:	6013      	str	r3, [r2, #0]
 800fe1c:	4650      	mov	r0, sl
 800fe1e:	b019      	add	sp, #100	@ 0x64
 800fe20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	f77f ae37 	ble.w	800fa9a <_dtoa_r+0x7b2>
 800fe2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe30:	2001      	movs	r0, #1
 800fe32:	e655      	b.n	800fae0 <_dtoa_r+0x7f8>
 800fe34:	9b00      	ldr	r3, [sp, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	f77f aed6 	ble.w	800fbe8 <_dtoa_r+0x900>
 800fe3c:	4656      	mov	r6, sl
 800fe3e:	4621      	mov	r1, r4
 800fe40:	4648      	mov	r0, r9
 800fe42:	f7ff f9c6 	bl	800f1d2 <quorem>
 800fe46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe4a:	f806 8b01 	strb.w	r8, [r6], #1
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	eba6 020a 	sub.w	r2, r6, sl
 800fe54:	4293      	cmp	r3, r2
 800fe56:	ddb3      	ble.n	800fdc0 <_dtoa_r+0xad8>
 800fe58:	4649      	mov	r1, r9
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	220a      	movs	r2, #10
 800fe5e:	4658      	mov	r0, fp
 800fe60:	f000 f968 	bl	8010134 <__multadd>
 800fe64:	4681      	mov	r9, r0
 800fe66:	e7ea      	b.n	800fe3e <_dtoa_r+0xb56>
 800fe68:	08011100 	.word	0x08011100
 800fe6c:	08011084 	.word	0x08011084

0800fe70 <_free_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	4605      	mov	r5, r0
 800fe74:	2900      	cmp	r1, #0
 800fe76:	d041      	beq.n	800fefc <_free_r+0x8c>
 800fe78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe7c:	1f0c      	subs	r4, r1, #4
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	bfb8      	it	lt
 800fe82:	18e4      	addlt	r4, r4, r3
 800fe84:	f000 f8e8 	bl	8010058 <__malloc_lock>
 800fe88:	4a1d      	ldr	r2, [pc, #116]	@ (800ff00 <_free_r+0x90>)
 800fe8a:	6813      	ldr	r3, [r2, #0]
 800fe8c:	b933      	cbnz	r3, 800fe9c <_free_r+0x2c>
 800fe8e:	6063      	str	r3, [r4, #4]
 800fe90:	6014      	str	r4, [r2, #0]
 800fe92:	4628      	mov	r0, r5
 800fe94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe98:	f000 b8e4 	b.w	8010064 <__malloc_unlock>
 800fe9c:	42a3      	cmp	r3, r4
 800fe9e:	d908      	bls.n	800feb2 <_free_r+0x42>
 800fea0:	6820      	ldr	r0, [r4, #0]
 800fea2:	1821      	adds	r1, r4, r0
 800fea4:	428b      	cmp	r3, r1
 800fea6:	bf01      	itttt	eq
 800fea8:	6819      	ldreq	r1, [r3, #0]
 800feaa:	685b      	ldreq	r3, [r3, #4]
 800feac:	1809      	addeq	r1, r1, r0
 800feae:	6021      	streq	r1, [r4, #0]
 800feb0:	e7ed      	b.n	800fe8e <_free_r+0x1e>
 800feb2:	461a      	mov	r2, r3
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	b10b      	cbz	r3, 800febc <_free_r+0x4c>
 800feb8:	42a3      	cmp	r3, r4
 800feba:	d9fa      	bls.n	800feb2 <_free_r+0x42>
 800febc:	6811      	ldr	r1, [r2, #0]
 800febe:	1850      	adds	r0, r2, r1
 800fec0:	42a0      	cmp	r0, r4
 800fec2:	d10b      	bne.n	800fedc <_free_r+0x6c>
 800fec4:	6820      	ldr	r0, [r4, #0]
 800fec6:	4401      	add	r1, r0
 800fec8:	1850      	adds	r0, r2, r1
 800feca:	4283      	cmp	r3, r0
 800fecc:	6011      	str	r1, [r2, #0]
 800fece:	d1e0      	bne.n	800fe92 <_free_r+0x22>
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	6053      	str	r3, [r2, #4]
 800fed6:	4408      	add	r0, r1
 800fed8:	6010      	str	r0, [r2, #0]
 800feda:	e7da      	b.n	800fe92 <_free_r+0x22>
 800fedc:	d902      	bls.n	800fee4 <_free_r+0x74>
 800fede:	230c      	movs	r3, #12
 800fee0:	602b      	str	r3, [r5, #0]
 800fee2:	e7d6      	b.n	800fe92 <_free_r+0x22>
 800fee4:	6820      	ldr	r0, [r4, #0]
 800fee6:	1821      	adds	r1, r4, r0
 800fee8:	428b      	cmp	r3, r1
 800feea:	bf04      	itt	eq
 800feec:	6819      	ldreq	r1, [r3, #0]
 800feee:	685b      	ldreq	r3, [r3, #4]
 800fef0:	6063      	str	r3, [r4, #4]
 800fef2:	bf04      	itt	eq
 800fef4:	1809      	addeq	r1, r1, r0
 800fef6:	6021      	streq	r1, [r4, #0]
 800fef8:	6054      	str	r4, [r2, #4]
 800fefa:	e7ca      	b.n	800fe92 <_free_r+0x22>
 800fefc:	bd38      	pop	{r3, r4, r5, pc}
 800fefe:	bf00      	nop
 800ff00:	20002214 	.word	0x20002214

0800ff04 <malloc>:
 800ff04:	4b02      	ldr	r3, [pc, #8]	@ (800ff10 <malloc+0xc>)
 800ff06:	4601      	mov	r1, r0
 800ff08:	6818      	ldr	r0, [r3, #0]
 800ff0a:	f000 b825 	b.w	800ff58 <_malloc_r>
 800ff0e:	bf00      	nop
 800ff10:	2000011c 	.word	0x2000011c

0800ff14 <sbrk_aligned>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	4e0f      	ldr	r6, [pc, #60]	@ (800ff54 <sbrk_aligned+0x40>)
 800ff18:	460c      	mov	r4, r1
 800ff1a:	6831      	ldr	r1, [r6, #0]
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	b911      	cbnz	r1, 800ff26 <sbrk_aligned+0x12>
 800ff20:	f000 fe9a 	bl	8010c58 <_sbrk_r>
 800ff24:	6030      	str	r0, [r6, #0]
 800ff26:	4621      	mov	r1, r4
 800ff28:	4628      	mov	r0, r5
 800ff2a:	f000 fe95 	bl	8010c58 <_sbrk_r>
 800ff2e:	1c43      	adds	r3, r0, #1
 800ff30:	d103      	bne.n	800ff3a <sbrk_aligned+0x26>
 800ff32:	f04f 34ff 	mov.w	r4, #4294967295
 800ff36:	4620      	mov	r0, r4
 800ff38:	bd70      	pop	{r4, r5, r6, pc}
 800ff3a:	1cc4      	adds	r4, r0, #3
 800ff3c:	f024 0403 	bic.w	r4, r4, #3
 800ff40:	42a0      	cmp	r0, r4
 800ff42:	d0f8      	beq.n	800ff36 <sbrk_aligned+0x22>
 800ff44:	1a21      	subs	r1, r4, r0
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 fe86 	bl	8010c58 <_sbrk_r>
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	d1f2      	bne.n	800ff36 <sbrk_aligned+0x22>
 800ff50:	e7ef      	b.n	800ff32 <sbrk_aligned+0x1e>
 800ff52:	bf00      	nop
 800ff54:	20002210 	.word	0x20002210

0800ff58 <_malloc_r>:
 800ff58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	1ccd      	adds	r5, r1, #3
 800ff5e:	f025 0503 	bic.w	r5, r5, #3
 800ff62:	3508      	adds	r5, #8
 800ff64:	2d0c      	cmp	r5, #12
 800ff66:	bf38      	it	cc
 800ff68:	250c      	movcc	r5, #12
 800ff6a:	2d00      	cmp	r5, #0
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	db01      	blt.n	800ff74 <_malloc_r+0x1c>
 800ff70:	42a9      	cmp	r1, r5
 800ff72:	d904      	bls.n	800ff7e <_malloc_r+0x26>
 800ff74:	230c      	movs	r3, #12
 800ff76:	6033      	str	r3, [r6, #0]
 800ff78:	2000      	movs	r0, #0
 800ff7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010054 <_malloc_r+0xfc>
 800ff82:	f000 f869 	bl	8010058 <__malloc_lock>
 800ff86:	f8d8 3000 	ldr.w	r3, [r8]
 800ff8a:	461c      	mov	r4, r3
 800ff8c:	bb44      	cbnz	r4, 800ffe0 <_malloc_r+0x88>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4630      	mov	r0, r6
 800ff92:	f7ff ffbf 	bl	800ff14 <sbrk_aligned>
 800ff96:	1c43      	adds	r3, r0, #1
 800ff98:	4604      	mov	r4, r0
 800ff9a:	d158      	bne.n	801004e <_malloc_r+0xf6>
 800ff9c:	f8d8 4000 	ldr.w	r4, [r8]
 800ffa0:	4627      	mov	r7, r4
 800ffa2:	2f00      	cmp	r7, #0
 800ffa4:	d143      	bne.n	801002e <_malloc_r+0xd6>
 800ffa6:	2c00      	cmp	r4, #0
 800ffa8:	d04b      	beq.n	8010042 <_malloc_r+0xea>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	4639      	mov	r1, r7
 800ffae:	4630      	mov	r0, r6
 800ffb0:	eb04 0903 	add.w	r9, r4, r3
 800ffb4:	f000 fe50 	bl	8010c58 <_sbrk_r>
 800ffb8:	4581      	cmp	r9, r0
 800ffba:	d142      	bne.n	8010042 <_malloc_r+0xea>
 800ffbc:	6821      	ldr	r1, [r4, #0]
 800ffbe:	1a6d      	subs	r5, r5, r1
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f7ff ffa6 	bl	800ff14 <sbrk_aligned>
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d03a      	beq.n	8010042 <_malloc_r+0xea>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	442b      	add	r3, r5
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	bb62      	cbnz	r2, 8010034 <_malloc_r+0xdc>
 800ffda:	f8c8 7000 	str.w	r7, [r8]
 800ffde:	e00f      	b.n	8010000 <_malloc_r+0xa8>
 800ffe0:	6822      	ldr	r2, [r4, #0]
 800ffe2:	1b52      	subs	r2, r2, r5
 800ffe4:	d420      	bmi.n	8010028 <_malloc_r+0xd0>
 800ffe6:	2a0b      	cmp	r2, #11
 800ffe8:	d917      	bls.n	801001a <_malloc_r+0xc2>
 800ffea:	1961      	adds	r1, r4, r5
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	6025      	str	r5, [r4, #0]
 800fff0:	bf18      	it	ne
 800fff2:	6059      	strne	r1, [r3, #4]
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	bf08      	it	eq
 800fff8:	f8c8 1000 	streq.w	r1, [r8]
 800fffc:	5162      	str	r2, [r4, r5]
 800fffe:	604b      	str	r3, [r1, #4]
 8010000:	4630      	mov	r0, r6
 8010002:	f000 f82f 	bl	8010064 <__malloc_unlock>
 8010006:	f104 000b 	add.w	r0, r4, #11
 801000a:	1d23      	adds	r3, r4, #4
 801000c:	f020 0007 	bic.w	r0, r0, #7
 8010010:	1ac2      	subs	r2, r0, r3
 8010012:	bf1c      	itt	ne
 8010014:	1a1b      	subne	r3, r3, r0
 8010016:	50a3      	strne	r3, [r4, r2]
 8010018:	e7af      	b.n	800ff7a <_malloc_r+0x22>
 801001a:	6862      	ldr	r2, [r4, #4]
 801001c:	42a3      	cmp	r3, r4
 801001e:	bf0c      	ite	eq
 8010020:	f8c8 2000 	streq.w	r2, [r8]
 8010024:	605a      	strne	r2, [r3, #4]
 8010026:	e7eb      	b.n	8010000 <_malloc_r+0xa8>
 8010028:	4623      	mov	r3, r4
 801002a:	6864      	ldr	r4, [r4, #4]
 801002c:	e7ae      	b.n	800ff8c <_malloc_r+0x34>
 801002e:	463c      	mov	r4, r7
 8010030:	687f      	ldr	r7, [r7, #4]
 8010032:	e7b6      	b.n	800ffa2 <_malloc_r+0x4a>
 8010034:	461a      	mov	r2, r3
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	42a3      	cmp	r3, r4
 801003a:	d1fb      	bne.n	8010034 <_malloc_r+0xdc>
 801003c:	2300      	movs	r3, #0
 801003e:	6053      	str	r3, [r2, #4]
 8010040:	e7de      	b.n	8010000 <_malloc_r+0xa8>
 8010042:	230c      	movs	r3, #12
 8010044:	6033      	str	r3, [r6, #0]
 8010046:	4630      	mov	r0, r6
 8010048:	f000 f80c 	bl	8010064 <__malloc_unlock>
 801004c:	e794      	b.n	800ff78 <_malloc_r+0x20>
 801004e:	6005      	str	r5, [r0, #0]
 8010050:	e7d6      	b.n	8010000 <_malloc_r+0xa8>
 8010052:	bf00      	nop
 8010054:	20002214 	.word	0x20002214

08010058 <__malloc_lock>:
 8010058:	4801      	ldr	r0, [pc, #4]	@ (8010060 <__malloc_lock+0x8>)
 801005a:	f7ff b8b8 	b.w	800f1ce <__retarget_lock_acquire_recursive>
 801005e:	bf00      	nop
 8010060:	2000220c 	.word	0x2000220c

08010064 <__malloc_unlock>:
 8010064:	4801      	ldr	r0, [pc, #4]	@ (801006c <__malloc_unlock+0x8>)
 8010066:	f7ff b8b3 	b.w	800f1d0 <__retarget_lock_release_recursive>
 801006a:	bf00      	nop
 801006c:	2000220c 	.word	0x2000220c

08010070 <_Balloc>:
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	69c6      	ldr	r6, [r0, #28]
 8010074:	4604      	mov	r4, r0
 8010076:	460d      	mov	r5, r1
 8010078:	b976      	cbnz	r6, 8010098 <_Balloc+0x28>
 801007a:	2010      	movs	r0, #16
 801007c:	f7ff ff42 	bl	800ff04 <malloc>
 8010080:	4602      	mov	r2, r0
 8010082:	61e0      	str	r0, [r4, #28]
 8010084:	b920      	cbnz	r0, 8010090 <_Balloc+0x20>
 8010086:	4b18      	ldr	r3, [pc, #96]	@ (80100e8 <_Balloc+0x78>)
 8010088:	4818      	ldr	r0, [pc, #96]	@ (80100ec <_Balloc+0x7c>)
 801008a:	216b      	movs	r1, #107	@ 0x6b
 801008c:	f000 fe02 	bl	8010c94 <__assert_func>
 8010090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010094:	6006      	str	r6, [r0, #0]
 8010096:	60c6      	str	r6, [r0, #12]
 8010098:	69e6      	ldr	r6, [r4, #28]
 801009a:	68f3      	ldr	r3, [r6, #12]
 801009c:	b183      	cbz	r3, 80100c0 <_Balloc+0x50>
 801009e:	69e3      	ldr	r3, [r4, #28]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100a6:	b9b8      	cbnz	r0, 80100d8 <_Balloc+0x68>
 80100a8:	2101      	movs	r1, #1
 80100aa:	fa01 f605 	lsl.w	r6, r1, r5
 80100ae:	1d72      	adds	r2, r6, #5
 80100b0:	0092      	lsls	r2, r2, #2
 80100b2:	4620      	mov	r0, r4
 80100b4:	f000 fe0c 	bl	8010cd0 <_calloc_r>
 80100b8:	b160      	cbz	r0, 80100d4 <_Balloc+0x64>
 80100ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100be:	e00e      	b.n	80100de <_Balloc+0x6e>
 80100c0:	2221      	movs	r2, #33	@ 0x21
 80100c2:	2104      	movs	r1, #4
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fe03 	bl	8010cd0 <_calloc_r>
 80100ca:	69e3      	ldr	r3, [r4, #28]
 80100cc:	60f0      	str	r0, [r6, #12]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1e4      	bne.n	801009e <_Balloc+0x2e>
 80100d4:	2000      	movs	r0, #0
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	6802      	ldr	r2, [r0, #0]
 80100da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100de:	2300      	movs	r3, #0
 80100e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100e4:	e7f7      	b.n	80100d6 <_Balloc+0x66>
 80100e6:	bf00      	nop
 80100e8:	08011091 	.word	0x08011091
 80100ec:	08011111 	.word	0x08011111

080100f0 <_Bfree>:
 80100f0:	b570      	push	{r4, r5, r6, lr}
 80100f2:	69c6      	ldr	r6, [r0, #28]
 80100f4:	4605      	mov	r5, r0
 80100f6:	460c      	mov	r4, r1
 80100f8:	b976      	cbnz	r6, 8010118 <_Bfree+0x28>
 80100fa:	2010      	movs	r0, #16
 80100fc:	f7ff ff02 	bl	800ff04 <malloc>
 8010100:	4602      	mov	r2, r0
 8010102:	61e8      	str	r0, [r5, #28]
 8010104:	b920      	cbnz	r0, 8010110 <_Bfree+0x20>
 8010106:	4b09      	ldr	r3, [pc, #36]	@ (801012c <_Bfree+0x3c>)
 8010108:	4809      	ldr	r0, [pc, #36]	@ (8010130 <_Bfree+0x40>)
 801010a:	218f      	movs	r1, #143	@ 0x8f
 801010c:	f000 fdc2 	bl	8010c94 <__assert_func>
 8010110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010114:	6006      	str	r6, [r0, #0]
 8010116:	60c6      	str	r6, [r0, #12]
 8010118:	b13c      	cbz	r4, 801012a <_Bfree+0x3a>
 801011a:	69eb      	ldr	r3, [r5, #28]
 801011c:	6862      	ldr	r2, [r4, #4]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010124:	6021      	str	r1, [r4, #0]
 8010126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	08011091 	.word	0x08011091
 8010130:	08011111 	.word	0x08011111

08010134 <__multadd>:
 8010134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010138:	690d      	ldr	r5, [r1, #16]
 801013a:	4607      	mov	r7, r0
 801013c:	460c      	mov	r4, r1
 801013e:	461e      	mov	r6, r3
 8010140:	f101 0c14 	add.w	ip, r1, #20
 8010144:	2000      	movs	r0, #0
 8010146:	f8dc 3000 	ldr.w	r3, [ip]
 801014a:	b299      	uxth	r1, r3
 801014c:	fb02 6101 	mla	r1, r2, r1, r6
 8010150:	0c1e      	lsrs	r6, r3, #16
 8010152:	0c0b      	lsrs	r3, r1, #16
 8010154:	fb02 3306 	mla	r3, r2, r6, r3
 8010158:	b289      	uxth	r1, r1
 801015a:	3001      	adds	r0, #1
 801015c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010160:	4285      	cmp	r5, r0
 8010162:	f84c 1b04 	str.w	r1, [ip], #4
 8010166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801016a:	dcec      	bgt.n	8010146 <__multadd+0x12>
 801016c:	b30e      	cbz	r6, 80101b2 <__multadd+0x7e>
 801016e:	68a3      	ldr	r3, [r4, #8]
 8010170:	42ab      	cmp	r3, r5
 8010172:	dc19      	bgt.n	80101a8 <__multadd+0x74>
 8010174:	6861      	ldr	r1, [r4, #4]
 8010176:	4638      	mov	r0, r7
 8010178:	3101      	adds	r1, #1
 801017a:	f7ff ff79 	bl	8010070 <_Balloc>
 801017e:	4680      	mov	r8, r0
 8010180:	b928      	cbnz	r0, 801018e <__multadd+0x5a>
 8010182:	4602      	mov	r2, r0
 8010184:	4b0c      	ldr	r3, [pc, #48]	@ (80101b8 <__multadd+0x84>)
 8010186:	480d      	ldr	r0, [pc, #52]	@ (80101bc <__multadd+0x88>)
 8010188:	21ba      	movs	r1, #186	@ 0xba
 801018a:	f000 fd83 	bl	8010c94 <__assert_func>
 801018e:	6922      	ldr	r2, [r4, #16]
 8010190:	3202      	adds	r2, #2
 8010192:	f104 010c 	add.w	r1, r4, #12
 8010196:	0092      	lsls	r2, r2, #2
 8010198:	300c      	adds	r0, #12
 801019a:	f000 fd6d 	bl	8010c78 <memcpy>
 801019e:	4621      	mov	r1, r4
 80101a0:	4638      	mov	r0, r7
 80101a2:	f7ff ffa5 	bl	80100f0 <_Bfree>
 80101a6:	4644      	mov	r4, r8
 80101a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101ac:	3501      	adds	r5, #1
 80101ae:	615e      	str	r6, [r3, #20]
 80101b0:	6125      	str	r5, [r4, #16]
 80101b2:	4620      	mov	r0, r4
 80101b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b8:	08011100 	.word	0x08011100
 80101bc:	08011111 	.word	0x08011111

080101c0 <__hi0bits>:
 80101c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80101c4:	4603      	mov	r3, r0
 80101c6:	bf36      	itet	cc
 80101c8:	0403      	lslcc	r3, r0, #16
 80101ca:	2000      	movcs	r0, #0
 80101cc:	2010      	movcc	r0, #16
 80101ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80101d2:	bf3c      	itt	cc
 80101d4:	021b      	lslcc	r3, r3, #8
 80101d6:	3008      	addcc	r0, #8
 80101d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101dc:	bf3c      	itt	cc
 80101de:	011b      	lslcc	r3, r3, #4
 80101e0:	3004      	addcc	r0, #4
 80101e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101e6:	bf3c      	itt	cc
 80101e8:	009b      	lslcc	r3, r3, #2
 80101ea:	3002      	addcc	r0, #2
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	db05      	blt.n	80101fc <__hi0bits+0x3c>
 80101f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80101f4:	f100 0001 	add.w	r0, r0, #1
 80101f8:	bf08      	it	eq
 80101fa:	2020      	moveq	r0, #32
 80101fc:	4770      	bx	lr

080101fe <__lo0bits>:
 80101fe:	6803      	ldr	r3, [r0, #0]
 8010200:	4602      	mov	r2, r0
 8010202:	f013 0007 	ands.w	r0, r3, #7
 8010206:	d00b      	beq.n	8010220 <__lo0bits+0x22>
 8010208:	07d9      	lsls	r1, r3, #31
 801020a:	d421      	bmi.n	8010250 <__lo0bits+0x52>
 801020c:	0798      	lsls	r0, r3, #30
 801020e:	bf49      	itett	mi
 8010210:	085b      	lsrmi	r3, r3, #1
 8010212:	089b      	lsrpl	r3, r3, #2
 8010214:	2001      	movmi	r0, #1
 8010216:	6013      	strmi	r3, [r2, #0]
 8010218:	bf5c      	itt	pl
 801021a:	6013      	strpl	r3, [r2, #0]
 801021c:	2002      	movpl	r0, #2
 801021e:	4770      	bx	lr
 8010220:	b299      	uxth	r1, r3
 8010222:	b909      	cbnz	r1, 8010228 <__lo0bits+0x2a>
 8010224:	0c1b      	lsrs	r3, r3, #16
 8010226:	2010      	movs	r0, #16
 8010228:	b2d9      	uxtb	r1, r3
 801022a:	b909      	cbnz	r1, 8010230 <__lo0bits+0x32>
 801022c:	3008      	adds	r0, #8
 801022e:	0a1b      	lsrs	r3, r3, #8
 8010230:	0719      	lsls	r1, r3, #28
 8010232:	bf04      	itt	eq
 8010234:	091b      	lsreq	r3, r3, #4
 8010236:	3004      	addeq	r0, #4
 8010238:	0799      	lsls	r1, r3, #30
 801023a:	bf04      	itt	eq
 801023c:	089b      	lsreq	r3, r3, #2
 801023e:	3002      	addeq	r0, #2
 8010240:	07d9      	lsls	r1, r3, #31
 8010242:	d403      	bmi.n	801024c <__lo0bits+0x4e>
 8010244:	085b      	lsrs	r3, r3, #1
 8010246:	f100 0001 	add.w	r0, r0, #1
 801024a:	d003      	beq.n	8010254 <__lo0bits+0x56>
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	4770      	bx	lr
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	2020      	movs	r0, #32
 8010256:	4770      	bx	lr

08010258 <__i2b>:
 8010258:	b510      	push	{r4, lr}
 801025a:	460c      	mov	r4, r1
 801025c:	2101      	movs	r1, #1
 801025e:	f7ff ff07 	bl	8010070 <_Balloc>
 8010262:	4602      	mov	r2, r0
 8010264:	b928      	cbnz	r0, 8010272 <__i2b+0x1a>
 8010266:	4b05      	ldr	r3, [pc, #20]	@ (801027c <__i2b+0x24>)
 8010268:	4805      	ldr	r0, [pc, #20]	@ (8010280 <__i2b+0x28>)
 801026a:	f240 1145 	movw	r1, #325	@ 0x145
 801026e:	f000 fd11 	bl	8010c94 <__assert_func>
 8010272:	2301      	movs	r3, #1
 8010274:	6144      	str	r4, [r0, #20]
 8010276:	6103      	str	r3, [r0, #16]
 8010278:	bd10      	pop	{r4, pc}
 801027a:	bf00      	nop
 801027c:	08011100 	.word	0x08011100
 8010280:	08011111 	.word	0x08011111

08010284 <__multiply>:
 8010284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	4614      	mov	r4, r2
 801028a:	690a      	ldr	r2, [r1, #16]
 801028c:	6923      	ldr	r3, [r4, #16]
 801028e:	429a      	cmp	r2, r3
 8010290:	bfa8      	it	ge
 8010292:	4623      	movge	r3, r4
 8010294:	460f      	mov	r7, r1
 8010296:	bfa4      	itt	ge
 8010298:	460c      	movge	r4, r1
 801029a:	461f      	movge	r7, r3
 801029c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80102a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	6861      	ldr	r1, [r4, #4]
 80102a8:	eb0a 0609 	add.w	r6, sl, r9
 80102ac:	42b3      	cmp	r3, r6
 80102ae:	b085      	sub	sp, #20
 80102b0:	bfb8      	it	lt
 80102b2:	3101      	addlt	r1, #1
 80102b4:	f7ff fedc 	bl	8010070 <_Balloc>
 80102b8:	b930      	cbnz	r0, 80102c8 <__multiply+0x44>
 80102ba:	4602      	mov	r2, r0
 80102bc:	4b44      	ldr	r3, [pc, #272]	@ (80103d0 <__multiply+0x14c>)
 80102be:	4845      	ldr	r0, [pc, #276]	@ (80103d4 <__multiply+0x150>)
 80102c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80102c4:	f000 fce6 	bl	8010c94 <__assert_func>
 80102c8:	f100 0514 	add.w	r5, r0, #20
 80102cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80102d0:	462b      	mov	r3, r5
 80102d2:	2200      	movs	r2, #0
 80102d4:	4543      	cmp	r3, r8
 80102d6:	d321      	bcc.n	801031c <__multiply+0x98>
 80102d8:	f107 0114 	add.w	r1, r7, #20
 80102dc:	f104 0214 	add.w	r2, r4, #20
 80102e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80102e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80102e8:	9302      	str	r3, [sp, #8]
 80102ea:	1b13      	subs	r3, r2, r4
 80102ec:	3b15      	subs	r3, #21
 80102ee:	f023 0303 	bic.w	r3, r3, #3
 80102f2:	3304      	adds	r3, #4
 80102f4:	f104 0715 	add.w	r7, r4, #21
 80102f8:	42ba      	cmp	r2, r7
 80102fa:	bf38      	it	cc
 80102fc:	2304      	movcc	r3, #4
 80102fe:	9301      	str	r3, [sp, #4]
 8010300:	9b02      	ldr	r3, [sp, #8]
 8010302:	9103      	str	r1, [sp, #12]
 8010304:	428b      	cmp	r3, r1
 8010306:	d80c      	bhi.n	8010322 <__multiply+0x9e>
 8010308:	2e00      	cmp	r6, #0
 801030a:	dd03      	ble.n	8010314 <__multiply+0x90>
 801030c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010310:	2b00      	cmp	r3, #0
 8010312:	d05b      	beq.n	80103cc <__multiply+0x148>
 8010314:	6106      	str	r6, [r0, #16]
 8010316:	b005      	add	sp, #20
 8010318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031c:	f843 2b04 	str.w	r2, [r3], #4
 8010320:	e7d8      	b.n	80102d4 <__multiply+0x50>
 8010322:	f8b1 a000 	ldrh.w	sl, [r1]
 8010326:	f1ba 0f00 	cmp.w	sl, #0
 801032a:	d024      	beq.n	8010376 <__multiply+0xf2>
 801032c:	f104 0e14 	add.w	lr, r4, #20
 8010330:	46a9      	mov	r9, r5
 8010332:	f04f 0c00 	mov.w	ip, #0
 8010336:	f85e 7b04 	ldr.w	r7, [lr], #4
 801033a:	f8d9 3000 	ldr.w	r3, [r9]
 801033e:	fa1f fb87 	uxth.w	fp, r7
 8010342:	b29b      	uxth	r3, r3
 8010344:	fb0a 330b 	mla	r3, sl, fp, r3
 8010348:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801034c:	f8d9 7000 	ldr.w	r7, [r9]
 8010350:	4463      	add	r3, ip
 8010352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010356:	fb0a c70b 	mla	r7, sl, fp, ip
 801035a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801035e:	b29b      	uxth	r3, r3
 8010360:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010364:	4572      	cmp	r2, lr
 8010366:	f849 3b04 	str.w	r3, [r9], #4
 801036a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801036e:	d8e2      	bhi.n	8010336 <__multiply+0xb2>
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	f845 c003 	str.w	ip, [r5, r3]
 8010376:	9b03      	ldr	r3, [sp, #12]
 8010378:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801037c:	3104      	adds	r1, #4
 801037e:	f1b9 0f00 	cmp.w	r9, #0
 8010382:	d021      	beq.n	80103c8 <__multiply+0x144>
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	f104 0c14 	add.w	ip, r4, #20
 801038a:	46ae      	mov	lr, r5
 801038c:	f04f 0a00 	mov.w	sl, #0
 8010390:	f8bc b000 	ldrh.w	fp, [ip]
 8010394:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010398:	fb09 770b 	mla	r7, r9, fp, r7
 801039c:	4457      	add	r7, sl
 801039e:	b29b      	uxth	r3, r3
 80103a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80103a4:	f84e 3b04 	str.w	r3, [lr], #4
 80103a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103b0:	f8be 3000 	ldrh.w	r3, [lr]
 80103b4:	fb09 330a 	mla	r3, r9, sl, r3
 80103b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80103bc:	4562      	cmp	r2, ip
 80103be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103c2:	d8e5      	bhi.n	8010390 <__multiply+0x10c>
 80103c4:	9f01      	ldr	r7, [sp, #4]
 80103c6:	51eb      	str	r3, [r5, r7]
 80103c8:	3504      	adds	r5, #4
 80103ca:	e799      	b.n	8010300 <__multiply+0x7c>
 80103cc:	3e01      	subs	r6, #1
 80103ce:	e79b      	b.n	8010308 <__multiply+0x84>
 80103d0:	08011100 	.word	0x08011100
 80103d4:	08011111 	.word	0x08011111

080103d8 <__pow5mult>:
 80103d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103dc:	4615      	mov	r5, r2
 80103de:	f012 0203 	ands.w	r2, r2, #3
 80103e2:	4607      	mov	r7, r0
 80103e4:	460e      	mov	r6, r1
 80103e6:	d007      	beq.n	80103f8 <__pow5mult+0x20>
 80103e8:	4c25      	ldr	r4, [pc, #148]	@ (8010480 <__pow5mult+0xa8>)
 80103ea:	3a01      	subs	r2, #1
 80103ec:	2300      	movs	r3, #0
 80103ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103f2:	f7ff fe9f 	bl	8010134 <__multadd>
 80103f6:	4606      	mov	r6, r0
 80103f8:	10ad      	asrs	r5, r5, #2
 80103fa:	d03d      	beq.n	8010478 <__pow5mult+0xa0>
 80103fc:	69fc      	ldr	r4, [r7, #28]
 80103fe:	b97c      	cbnz	r4, 8010420 <__pow5mult+0x48>
 8010400:	2010      	movs	r0, #16
 8010402:	f7ff fd7f 	bl	800ff04 <malloc>
 8010406:	4602      	mov	r2, r0
 8010408:	61f8      	str	r0, [r7, #28]
 801040a:	b928      	cbnz	r0, 8010418 <__pow5mult+0x40>
 801040c:	4b1d      	ldr	r3, [pc, #116]	@ (8010484 <__pow5mult+0xac>)
 801040e:	481e      	ldr	r0, [pc, #120]	@ (8010488 <__pow5mult+0xb0>)
 8010410:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010414:	f000 fc3e 	bl	8010c94 <__assert_func>
 8010418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801041c:	6004      	str	r4, [r0, #0]
 801041e:	60c4      	str	r4, [r0, #12]
 8010420:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010428:	b94c      	cbnz	r4, 801043e <__pow5mult+0x66>
 801042a:	f240 2171 	movw	r1, #625	@ 0x271
 801042e:	4638      	mov	r0, r7
 8010430:	f7ff ff12 	bl	8010258 <__i2b>
 8010434:	2300      	movs	r3, #0
 8010436:	f8c8 0008 	str.w	r0, [r8, #8]
 801043a:	4604      	mov	r4, r0
 801043c:	6003      	str	r3, [r0, #0]
 801043e:	f04f 0900 	mov.w	r9, #0
 8010442:	07eb      	lsls	r3, r5, #31
 8010444:	d50a      	bpl.n	801045c <__pow5mult+0x84>
 8010446:	4631      	mov	r1, r6
 8010448:	4622      	mov	r2, r4
 801044a:	4638      	mov	r0, r7
 801044c:	f7ff ff1a 	bl	8010284 <__multiply>
 8010450:	4631      	mov	r1, r6
 8010452:	4680      	mov	r8, r0
 8010454:	4638      	mov	r0, r7
 8010456:	f7ff fe4b 	bl	80100f0 <_Bfree>
 801045a:	4646      	mov	r6, r8
 801045c:	106d      	asrs	r5, r5, #1
 801045e:	d00b      	beq.n	8010478 <__pow5mult+0xa0>
 8010460:	6820      	ldr	r0, [r4, #0]
 8010462:	b938      	cbnz	r0, 8010474 <__pow5mult+0x9c>
 8010464:	4622      	mov	r2, r4
 8010466:	4621      	mov	r1, r4
 8010468:	4638      	mov	r0, r7
 801046a:	f7ff ff0b 	bl	8010284 <__multiply>
 801046e:	6020      	str	r0, [r4, #0]
 8010470:	f8c0 9000 	str.w	r9, [r0]
 8010474:	4604      	mov	r4, r0
 8010476:	e7e4      	b.n	8010442 <__pow5mult+0x6a>
 8010478:	4630      	mov	r0, r6
 801047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047e:	bf00      	nop
 8010480:	0801116c 	.word	0x0801116c
 8010484:	08011091 	.word	0x08011091
 8010488:	08011111 	.word	0x08011111

0801048c <__lshift>:
 801048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010490:	460c      	mov	r4, r1
 8010492:	6849      	ldr	r1, [r1, #4]
 8010494:	6923      	ldr	r3, [r4, #16]
 8010496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801049a:	68a3      	ldr	r3, [r4, #8]
 801049c:	4607      	mov	r7, r0
 801049e:	4691      	mov	r9, r2
 80104a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104a4:	f108 0601 	add.w	r6, r8, #1
 80104a8:	42b3      	cmp	r3, r6
 80104aa:	db0b      	blt.n	80104c4 <__lshift+0x38>
 80104ac:	4638      	mov	r0, r7
 80104ae:	f7ff fddf 	bl	8010070 <_Balloc>
 80104b2:	4605      	mov	r5, r0
 80104b4:	b948      	cbnz	r0, 80104ca <__lshift+0x3e>
 80104b6:	4602      	mov	r2, r0
 80104b8:	4b28      	ldr	r3, [pc, #160]	@ (801055c <__lshift+0xd0>)
 80104ba:	4829      	ldr	r0, [pc, #164]	@ (8010560 <__lshift+0xd4>)
 80104bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80104c0:	f000 fbe8 	bl	8010c94 <__assert_func>
 80104c4:	3101      	adds	r1, #1
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	e7ee      	b.n	80104a8 <__lshift+0x1c>
 80104ca:	2300      	movs	r3, #0
 80104cc:	f100 0114 	add.w	r1, r0, #20
 80104d0:	f100 0210 	add.w	r2, r0, #16
 80104d4:	4618      	mov	r0, r3
 80104d6:	4553      	cmp	r3, sl
 80104d8:	db33      	blt.n	8010542 <__lshift+0xb6>
 80104da:	6920      	ldr	r0, [r4, #16]
 80104dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104e0:	f104 0314 	add.w	r3, r4, #20
 80104e4:	f019 091f 	ands.w	r9, r9, #31
 80104e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104f0:	d02b      	beq.n	801054a <__lshift+0xbe>
 80104f2:	f1c9 0e20 	rsb	lr, r9, #32
 80104f6:	468a      	mov	sl, r1
 80104f8:	2200      	movs	r2, #0
 80104fa:	6818      	ldr	r0, [r3, #0]
 80104fc:	fa00 f009 	lsl.w	r0, r0, r9
 8010500:	4310      	orrs	r0, r2
 8010502:	f84a 0b04 	str.w	r0, [sl], #4
 8010506:	f853 2b04 	ldr.w	r2, [r3], #4
 801050a:	459c      	cmp	ip, r3
 801050c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010510:	d8f3      	bhi.n	80104fa <__lshift+0x6e>
 8010512:	ebac 0304 	sub.w	r3, ip, r4
 8010516:	3b15      	subs	r3, #21
 8010518:	f023 0303 	bic.w	r3, r3, #3
 801051c:	3304      	adds	r3, #4
 801051e:	f104 0015 	add.w	r0, r4, #21
 8010522:	4584      	cmp	ip, r0
 8010524:	bf38      	it	cc
 8010526:	2304      	movcc	r3, #4
 8010528:	50ca      	str	r2, [r1, r3]
 801052a:	b10a      	cbz	r2, 8010530 <__lshift+0xa4>
 801052c:	f108 0602 	add.w	r6, r8, #2
 8010530:	3e01      	subs	r6, #1
 8010532:	4638      	mov	r0, r7
 8010534:	612e      	str	r6, [r5, #16]
 8010536:	4621      	mov	r1, r4
 8010538:	f7ff fdda 	bl	80100f0 <_Bfree>
 801053c:	4628      	mov	r0, r5
 801053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010542:	f842 0f04 	str.w	r0, [r2, #4]!
 8010546:	3301      	adds	r3, #1
 8010548:	e7c5      	b.n	80104d6 <__lshift+0x4a>
 801054a:	3904      	subs	r1, #4
 801054c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010550:	f841 2f04 	str.w	r2, [r1, #4]!
 8010554:	459c      	cmp	ip, r3
 8010556:	d8f9      	bhi.n	801054c <__lshift+0xc0>
 8010558:	e7ea      	b.n	8010530 <__lshift+0xa4>
 801055a:	bf00      	nop
 801055c:	08011100 	.word	0x08011100
 8010560:	08011111 	.word	0x08011111

08010564 <__mcmp>:
 8010564:	690a      	ldr	r2, [r1, #16]
 8010566:	4603      	mov	r3, r0
 8010568:	6900      	ldr	r0, [r0, #16]
 801056a:	1a80      	subs	r0, r0, r2
 801056c:	b530      	push	{r4, r5, lr}
 801056e:	d10e      	bne.n	801058e <__mcmp+0x2a>
 8010570:	3314      	adds	r3, #20
 8010572:	3114      	adds	r1, #20
 8010574:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801057c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010584:	4295      	cmp	r5, r2
 8010586:	d003      	beq.n	8010590 <__mcmp+0x2c>
 8010588:	d205      	bcs.n	8010596 <__mcmp+0x32>
 801058a:	f04f 30ff 	mov.w	r0, #4294967295
 801058e:	bd30      	pop	{r4, r5, pc}
 8010590:	42a3      	cmp	r3, r4
 8010592:	d3f3      	bcc.n	801057c <__mcmp+0x18>
 8010594:	e7fb      	b.n	801058e <__mcmp+0x2a>
 8010596:	2001      	movs	r0, #1
 8010598:	e7f9      	b.n	801058e <__mcmp+0x2a>
	...

0801059c <__mdiff>:
 801059c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	4689      	mov	r9, r1
 80105a2:	4606      	mov	r6, r0
 80105a4:	4611      	mov	r1, r2
 80105a6:	4648      	mov	r0, r9
 80105a8:	4614      	mov	r4, r2
 80105aa:	f7ff ffdb 	bl	8010564 <__mcmp>
 80105ae:	1e05      	subs	r5, r0, #0
 80105b0:	d112      	bne.n	80105d8 <__mdiff+0x3c>
 80105b2:	4629      	mov	r1, r5
 80105b4:	4630      	mov	r0, r6
 80105b6:	f7ff fd5b 	bl	8010070 <_Balloc>
 80105ba:	4602      	mov	r2, r0
 80105bc:	b928      	cbnz	r0, 80105ca <__mdiff+0x2e>
 80105be:	4b3f      	ldr	r3, [pc, #252]	@ (80106bc <__mdiff+0x120>)
 80105c0:	f240 2137 	movw	r1, #567	@ 0x237
 80105c4:	483e      	ldr	r0, [pc, #248]	@ (80106c0 <__mdiff+0x124>)
 80105c6:	f000 fb65 	bl	8010c94 <__assert_func>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105d0:	4610      	mov	r0, r2
 80105d2:	b003      	add	sp, #12
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d8:	bfbc      	itt	lt
 80105da:	464b      	movlt	r3, r9
 80105dc:	46a1      	movlt	r9, r4
 80105de:	4630      	mov	r0, r6
 80105e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80105e4:	bfba      	itte	lt
 80105e6:	461c      	movlt	r4, r3
 80105e8:	2501      	movlt	r5, #1
 80105ea:	2500      	movge	r5, #0
 80105ec:	f7ff fd40 	bl	8010070 <_Balloc>
 80105f0:	4602      	mov	r2, r0
 80105f2:	b918      	cbnz	r0, 80105fc <__mdiff+0x60>
 80105f4:	4b31      	ldr	r3, [pc, #196]	@ (80106bc <__mdiff+0x120>)
 80105f6:	f240 2145 	movw	r1, #581	@ 0x245
 80105fa:	e7e3      	b.n	80105c4 <__mdiff+0x28>
 80105fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010600:	6926      	ldr	r6, [r4, #16]
 8010602:	60c5      	str	r5, [r0, #12]
 8010604:	f109 0310 	add.w	r3, r9, #16
 8010608:	f109 0514 	add.w	r5, r9, #20
 801060c:	f104 0e14 	add.w	lr, r4, #20
 8010610:	f100 0b14 	add.w	fp, r0, #20
 8010614:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010618:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	46d9      	mov	r9, fp
 8010620:	f04f 0c00 	mov.w	ip, #0
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	f85e 0b04 	ldr.w	r0, [lr], #4
 801062a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	fa1f f38a 	uxth.w	r3, sl
 8010634:	4619      	mov	r1, r3
 8010636:	b283      	uxth	r3, r0
 8010638:	1acb      	subs	r3, r1, r3
 801063a:	0c00      	lsrs	r0, r0, #16
 801063c:	4463      	add	r3, ip
 801063e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010642:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010646:	b29b      	uxth	r3, r3
 8010648:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801064c:	4576      	cmp	r6, lr
 801064e:	f849 3b04 	str.w	r3, [r9], #4
 8010652:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010656:	d8e5      	bhi.n	8010624 <__mdiff+0x88>
 8010658:	1b33      	subs	r3, r6, r4
 801065a:	3b15      	subs	r3, #21
 801065c:	f023 0303 	bic.w	r3, r3, #3
 8010660:	3415      	adds	r4, #21
 8010662:	3304      	adds	r3, #4
 8010664:	42a6      	cmp	r6, r4
 8010666:	bf38      	it	cc
 8010668:	2304      	movcc	r3, #4
 801066a:	441d      	add	r5, r3
 801066c:	445b      	add	r3, fp
 801066e:	461e      	mov	r6, r3
 8010670:	462c      	mov	r4, r5
 8010672:	4544      	cmp	r4, r8
 8010674:	d30e      	bcc.n	8010694 <__mdiff+0xf8>
 8010676:	f108 0103 	add.w	r1, r8, #3
 801067a:	1b49      	subs	r1, r1, r5
 801067c:	f021 0103 	bic.w	r1, r1, #3
 8010680:	3d03      	subs	r5, #3
 8010682:	45a8      	cmp	r8, r5
 8010684:	bf38      	it	cc
 8010686:	2100      	movcc	r1, #0
 8010688:	440b      	add	r3, r1
 801068a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801068e:	b191      	cbz	r1, 80106b6 <__mdiff+0x11a>
 8010690:	6117      	str	r7, [r2, #16]
 8010692:	e79d      	b.n	80105d0 <__mdiff+0x34>
 8010694:	f854 1b04 	ldr.w	r1, [r4], #4
 8010698:	46e6      	mov	lr, ip
 801069a:	0c08      	lsrs	r0, r1, #16
 801069c:	fa1c fc81 	uxtah	ip, ip, r1
 80106a0:	4471      	add	r1, lr
 80106a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80106a6:	b289      	uxth	r1, r1
 80106a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80106ac:	f846 1b04 	str.w	r1, [r6], #4
 80106b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80106b4:	e7dd      	b.n	8010672 <__mdiff+0xd6>
 80106b6:	3f01      	subs	r7, #1
 80106b8:	e7e7      	b.n	801068a <__mdiff+0xee>
 80106ba:	bf00      	nop
 80106bc:	08011100 	.word	0x08011100
 80106c0:	08011111 	.word	0x08011111

080106c4 <__d2b>:
 80106c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106c8:	460f      	mov	r7, r1
 80106ca:	2101      	movs	r1, #1
 80106cc:	ec59 8b10 	vmov	r8, r9, d0
 80106d0:	4616      	mov	r6, r2
 80106d2:	f7ff fccd 	bl	8010070 <_Balloc>
 80106d6:	4604      	mov	r4, r0
 80106d8:	b930      	cbnz	r0, 80106e8 <__d2b+0x24>
 80106da:	4602      	mov	r2, r0
 80106dc:	4b23      	ldr	r3, [pc, #140]	@ (801076c <__d2b+0xa8>)
 80106de:	4824      	ldr	r0, [pc, #144]	@ (8010770 <__d2b+0xac>)
 80106e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80106e4:	f000 fad6 	bl	8010c94 <__assert_func>
 80106e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80106ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106f0:	b10d      	cbz	r5, 80106f6 <__d2b+0x32>
 80106f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	f1b8 0300 	subs.w	r3, r8, #0
 80106fc:	d023      	beq.n	8010746 <__d2b+0x82>
 80106fe:	4668      	mov	r0, sp
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	f7ff fd7c 	bl	80101fe <__lo0bits>
 8010706:	e9dd 1200 	ldrd	r1, r2, [sp]
 801070a:	b1d0      	cbz	r0, 8010742 <__d2b+0x7e>
 801070c:	f1c0 0320 	rsb	r3, r0, #32
 8010710:	fa02 f303 	lsl.w	r3, r2, r3
 8010714:	430b      	orrs	r3, r1
 8010716:	40c2      	lsrs	r2, r0
 8010718:	6163      	str	r3, [r4, #20]
 801071a:	9201      	str	r2, [sp, #4]
 801071c:	9b01      	ldr	r3, [sp, #4]
 801071e:	61a3      	str	r3, [r4, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	bf0c      	ite	eq
 8010724:	2201      	moveq	r2, #1
 8010726:	2202      	movne	r2, #2
 8010728:	6122      	str	r2, [r4, #16]
 801072a:	b1a5      	cbz	r5, 8010756 <__d2b+0x92>
 801072c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010730:	4405      	add	r5, r0
 8010732:	603d      	str	r5, [r7, #0]
 8010734:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010738:	6030      	str	r0, [r6, #0]
 801073a:	4620      	mov	r0, r4
 801073c:	b003      	add	sp, #12
 801073e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010742:	6161      	str	r1, [r4, #20]
 8010744:	e7ea      	b.n	801071c <__d2b+0x58>
 8010746:	a801      	add	r0, sp, #4
 8010748:	f7ff fd59 	bl	80101fe <__lo0bits>
 801074c:	9b01      	ldr	r3, [sp, #4]
 801074e:	6163      	str	r3, [r4, #20]
 8010750:	3020      	adds	r0, #32
 8010752:	2201      	movs	r2, #1
 8010754:	e7e8      	b.n	8010728 <__d2b+0x64>
 8010756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801075a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801075e:	6038      	str	r0, [r7, #0]
 8010760:	6918      	ldr	r0, [r3, #16]
 8010762:	f7ff fd2d 	bl	80101c0 <__hi0bits>
 8010766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801076a:	e7e5      	b.n	8010738 <__d2b+0x74>
 801076c:	08011100 	.word	0x08011100
 8010770:	08011111 	.word	0x08011111

08010774 <__sfputc_r>:
 8010774:	6893      	ldr	r3, [r2, #8]
 8010776:	3b01      	subs	r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	b410      	push	{r4}
 801077c:	6093      	str	r3, [r2, #8]
 801077e:	da08      	bge.n	8010792 <__sfputc_r+0x1e>
 8010780:	6994      	ldr	r4, [r2, #24]
 8010782:	42a3      	cmp	r3, r4
 8010784:	db01      	blt.n	801078a <__sfputc_r+0x16>
 8010786:	290a      	cmp	r1, #10
 8010788:	d103      	bne.n	8010792 <__sfputc_r+0x1e>
 801078a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801078e:	f7fe bc0c 	b.w	800efaa <__swbuf_r>
 8010792:	6813      	ldr	r3, [r2, #0]
 8010794:	1c58      	adds	r0, r3, #1
 8010796:	6010      	str	r0, [r2, #0]
 8010798:	7019      	strb	r1, [r3, #0]
 801079a:	4608      	mov	r0, r1
 801079c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107a0:	4770      	bx	lr

080107a2 <__sfputs_r>:
 80107a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a4:	4606      	mov	r6, r0
 80107a6:	460f      	mov	r7, r1
 80107a8:	4614      	mov	r4, r2
 80107aa:	18d5      	adds	r5, r2, r3
 80107ac:	42ac      	cmp	r4, r5
 80107ae:	d101      	bne.n	80107b4 <__sfputs_r+0x12>
 80107b0:	2000      	movs	r0, #0
 80107b2:	e007      	b.n	80107c4 <__sfputs_r+0x22>
 80107b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b8:	463a      	mov	r2, r7
 80107ba:	4630      	mov	r0, r6
 80107bc:	f7ff ffda 	bl	8010774 <__sfputc_r>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d1f3      	bne.n	80107ac <__sfputs_r+0xa>
 80107c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107c8 <_vfiprintf_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	460d      	mov	r5, r1
 80107ce:	b09d      	sub	sp, #116	@ 0x74
 80107d0:	4614      	mov	r4, r2
 80107d2:	4698      	mov	r8, r3
 80107d4:	4606      	mov	r6, r0
 80107d6:	b118      	cbz	r0, 80107e0 <_vfiprintf_r+0x18>
 80107d8:	6a03      	ldr	r3, [r0, #32]
 80107da:	b90b      	cbnz	r3, 80107e0 <_vfiprintf_r+0x18>
 80107dc:	f7fe fafc 	bl	800edd8 <__sinit>
 80107e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107e2:	07d9      	lsls	r1, r3, #31
 80107e4:	d405      	bmi.n	80107f2 <_vfiprintf_r+0x2a>
 80107e6:	89ab      	ldrh	r3, [r5, #12]
 80107e8:	059a      	lsls	r2, r3, #22
 80107ea:	d402      	bmi.n	80107f2 <_vfiprintf_r+0x2a>
 80107ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107ee:	f7fe fcee 	bl	800f1ce <__retarget_lock_acquire_recursive>
 80107f2:	89ab      	ldrh	r3, [r5, #12]
 80107f4:	071b      	lsls	r3, r3, #28
 80107f6:	d501      	bpl.n	80107fc <_vfiprintf_r+0x34>
 80107f8:	692b      	ldr	r3, [r5, #16]
 80107fa:	b99b      	cbnz	r3, 8010824 <_vfiprintf_r+0x5c>
 80107fc:	4629      	mov	r1, r5
 80107fe:	4630      	mov	r0, r6
 8010800:	f7fe fc12 	bl	800f028 <__swsetup_r>
 8010804:	b170      	cbz	r0, 8010824 <_vfiprintf_r+0x5c>
 8010806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010808:	07dc      	lsls	r4, r3, #31
 801080a:	d504      	bpl.n	8010816 <_vfiprintf_r+0x4e>
 801080c:	f04f 30ff 	mov.w	r0, #4294967295
 8010810:	b01d      	add	sp, #116	@ 0x74
 8010812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010816:	89ab      	ldrh	r3, [r5, #12]
 8010818:	0598      	lsls	r0, r3, #22
 801081a:	d4f7      	bmi.n	801080c <_vfiprintf_r+0x44>
 801081c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801081e:	f7fe fcd7 	bl	800f1d0 <__retarget_lock_release_recursive>
 8010822:	e7f3      	b.n	801080c <_vfiprintf_r+0x44>
 8010824:	2300      	movs	r3, #0
 8010826:	9309      	str	r3, [sp, #36]	@ 0x24
 8010828:	2320      	movs	r3, #32
 801082a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801082e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010832:	2330      	movs	r3, #48	@ 0x30
 8010834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109e4 <_vfiprintf_r+0x21c>
 8010838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801083c:	f04f 0901 	mov.w	r9, #1
 8010840:	4623      	mov	r3, r4
 8010842:	469a      	mov	sl, r3
 8010844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010848:	b10a      	cbz	r2, 801084e <_vfiprintf_r+0x86>
 801084a:	2a25      	cmp	r2, #37	@ 0x25
 801084c:	d1f9      	bne.n	8010842 <_vfiprintf_r+0x7a>
 801084e:	ebba 0b04 	subs.w	fp, sl, r4
 8010852:	d00b      	beq.n	801086c <_vfiprintf_r+0xa4>
 8010854:	465b      	mov	r3, fp
 8010856:	4622      	mov	r2, r4
 8010858:	4629      	mov	r1, r5
 801085a:	4630      	mov	r0, r6
 801085c:	f7ff ffa1 	bl	80107a2 <__sfputs_r>
 8010860:	3001      	adds	r0, #1
 8010862:	f000 80a7 	beq.w	80109b4 <_vfiprintf_r+0x1ec>
 8010866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010868:	445a      	add	r2, fp
 801086a:	9209      	str	r2, [sp, #36]	@ 0x24
 801086c:	f89a 3000 	ldrb.w	r3, [sl]
 8010870:	2b00      	cmp	r3, #0
 8010872:	f000 809f 	beq.w	80109b4 <_vfiprintf_r+0x1ec>
 8010876:	2300      	movs	r3, #0
 8010878:	f04f 32ff 	mov.w	r2, #4294967295
 801087c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010880:	f10a 0a01 	add.w	sl, sl, #1
 8010884:	9304      	str	r3, [sp, #16]
 8010886:	9307      	str	r3, [sp, #28]
 8010888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801088c:	931a      	str	r3, [sp, #104]	@ 0x68
 801088e:	4654      	mov	r4, sl
 8010890:	2205      	movs	r2, #5
 8010892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010896:	4853      	ldr	r0, [pc, #332]	@ (80109e4 <_vfiprintf_r+0x21c>)
 8010898:	f7ef fca2 	bl	80001e0 <memchr>
 801089c:	9a04      	ldr	r2, [sp, #16]
 801089e:	b9d8      	cbnz	r0, 80108d8 <_vfiprintf_r+0x110>
 80108a0:	06d1      	lsls	r1, r2, #27
 80108a2:	bf44      	itt	mi
 80108a4:	2320      	movmi	r3, #32
 80108a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108aa:	0713      	lsls	r3, r2, #28
 80108ac:	bf44      	itt	mi
 80108ae:	232b      	movmi	r3, #43	@ 0x2b
 80108b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108b4:	f89a 3000 	ldrb.w	r3, [sl]
 80108b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80108ba:	d015      	beq.n	80108e8 <_vfiprintf_r+0x120>
 80108bc:	9a07      	ldr	r2, [sp, #28]
 80108be:	4654      	mov	r4, sl
 80108c0:	2000      	movs	r0, #0
 80108c2:	f04f 0c0a 	mov.w	ip, #10
 80108c6:	4621      	mov	r1, r4
 80108c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108cc:	3b30      	subs	r3, #48	@ 0x30
 80108ce:	2b09      	cmp	r3, #9
 80108d0:	d94b      	bls.n	801096a <_vfiprintf_r+0x1a2>
 80108d2:	b1b0      	cbz	r0, 8010902 <_vfiprintf_r+0x13a>
 80108d4:	9207      	str	r2, [sp, #28]
 80108d6:	e014      	b.n	8010902 <_vfiprintf_r+0x13a>
 80108d8:	eba0 0308 	sub.w	r3, r0, r8
 80108dc:	fa09 f303 	lsl.w	r3, r9, r3
 80108e0:	4313      	orrs	r3, r2
 80108e2:	9304      	str	r3, [sp, #16]
 80108e4:	46a2      	mov	sl, r4
 80108e6:	e7d2      	b.n	801088e <_vfiprintf_r+0xc6>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	1d19      	adds	r1, r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	9103      	str	r1, [sp, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	bfbb      	ittet	lt
 80108f4:	425b      	neglt	r3, r3
 80108f6:	f042 0202 	orrlt.w	r2, r2, #2
 80108fa:	9307      	strge	r3, [sp, #28]
 80108fc:	9307      	strlt	r3, [sp, #28]
 80108fe:	bfb8      	it	lt
 8010900:	9204      	strlt	r2, [sp, #16]
 8010902:	7823      	ldrb	r3, [r4, #0]
 8010904:	2b2e      	cmp	r3, #46	@ 0x2e
 8010906:	d10a      	bne.n	801091e <_vfiprintf_r+0x156>
 8010908:	7863      	ldrb	r3, [r4, #1]
 801090a:	2b2a      	cmp	r3, #42	@ 0x2a
 801090c:	d132      	bne.n	8010974 <_vfiprintf_r+0x1ac>
 801090e:	9b03      	ldr	r3, [sp, #12]
 8010910:	1d1a      	adds	r2, r3, #4
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	9203      	str	r2, [sp, #12]
 8010916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801091a:	3402      	adds	r4, #2
 801091c:	9305      	str	r3, [sp, #20]
 801091e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109f4 <_vfiprintf_r+0x22c>
 8010922:	7821      	ldrb	r1, [r4, #0]
 8010924:	2203      	movs	r2, #3
 8010926:	4650      	mov	r0, sl
 8010928:	f7ef fc5a 	bl	80001e0 <memchr>
 801092c:	b138      	cbz	r0, 801093e <_vfiprintf_r+0x176>
 801092e:	9b04      	ldr	r3, [sp, #16]
 8010930:	eba0 000a 	sub.w	r0, r0, sl
 8010934:	2240      	movs	r2, #64	@ 0x40
 8010936:	4082      	lsls	r2, r0
 8010938:	4313      	orrs	r3, r2
 801093a:	3401      	adds	r4, #1
 801093c:	9304      	str	r3, [sp, #16]
 801093e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010942:	4829      	ldr	r0, [pc, #164]	@ (80109e8 <_vfiprintf_r+0x220>)
 8010944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010948:	2206      	movs	r2, #6
 801094a:	f7ef fc49 	bl	80001e0 <memchr>
 801094e:	2800      	cmp	r0, #0
 8010950:	d03f      	beq.n	80109d2 <_vfiprintf_r+0x20a>
 8010952:	4b26      	ldr	r3, [pc, #152]	@ (80109ec <_vfiprintf_r+0x224>)
 8010954:	bb1b      	cbnz	r3, 801099e <_vfiprintf_r+0x1d6>
 8010956:	9b03      	ldr	r3, [sp, #12]
 8010958:	3307      	adds	r3, #7
 801095a:	f023 0307 	bic.w	r3, r3, #7
 801095e:	3308      	adds	r3, #8
 8010960:	9303      	str	r3, [sp, #12]
 8010962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010964:	443b      	add	r3, r7
 8010966:	9309      	str	r3, [sp, #36]	@ 0x24
 8010968:	e76a      	b.n	8010840 <_vfiprintf_r+0x78>
 801096a:	fb0c 3202 	mla	r2, ip, r2, r3
 801096e:	460c      	mov	r4, r1
 8010970:	2001      	movs	r0, #1
 8010972:	e7a8      	b.n	80108c6 <_vfiprintf_r+0xfe>
 8010974:	2300      	movs	r3, #0
 8010976:	3401      	adds	r4, #1
 8010978:	9305      	str	r3, [sp, #20]
 801097a:	4619      	mov	r1, r3
 801097c:	f04f 0c0a 	mov.w	ip, #10
 8010980:	4620      	mov	r0, r4
 8010982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010986:	3a30      	subs	r2, #48	@ 0x30
 8010988:	2a09      	cmp	r2, #9
 801098a:	d903      	bls.n	8010994 <_vfiprintf_r+0x1cc>
 801098c:	2b00      	cmp	r3, #0
 801098e:	d0c6      	beq.n	801091e <_vfiprintf_r+0x156>
 8010990:	9105      	str	r1, [sp, #20]
 8010992:	e7c4      	b.n	801091e <_vfiprintf_r+0x156>
 8010994:	fb0c 2101 	mla	r1, ip, r1, r2
 8010998:	4604      	mov	r4, r0
 801099a:	2301      	movs	r3, #1
 801099c:	e7f0      	b.n	8010980 <_vfiprintf_r+0x1b8>
 801099e:	ab03      	add	r3, sp, #12
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	462a      	mov	r2, r5
 80109a4:	4b12      	ldr	r3, [pc, #72]	@ (80109f0 <_vfiprintf_r+0x228>)
 80109a6:	a904      	add	r1, sp, #16
 80109a8:	4630      	mov	r0, r6
 80109aa:	f7fd fdd1 	bl	800e550 <_printf_float>
 80109ae:	4607      	mov	r7, r0
 80109b0:	1c78      	adds	r0, r7, #1
 80109b2:	d1d6      	bne.n	8010962 <_vfiprintf_r+0x19a>
 80109b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109b6:	07d9      	lsls	r1, r3, #31
 80109b8:	d405      	bmi.n	80109c6 <_vfiprintf_r+0x1fe>
 80109ba:	89ab      	ldrh	r3, [r5, #12]
 80109bc:	059a      	lsls	r2, r3, #22
 80109be:	d402      	bmi.n	80109c6 <_vfiprintf_r+0x1fe>
 80109c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109c2:	f7fe fc05 	bl	800f1d0 <__retarget_lock_release_recursive>
 80109c6:	89ab      	ldrh	r3, [r5, #12]
 80109c8:	065b      	lsls	r3, r3, #25
 80109ca:	f53f af1f 	bmi.w	801080c <_vfiprintf_r+0x44>
 80109ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109d0:	e71e      	b.n	8010810 <_vfiprintf_r+0x48>
 80109d2:	ab03      	add	r3, sp, #12
 80109d4:	9300      	str	r3, [sp, #0]
 80109d6:	462a      	mov	r2, r5
 80109d8:	4b05      	ldr	r3, [pc, #20]	@ (80109f0 <_vfiprintf_r+0x228>)
 80109da:	a904      	add	r1, sp, #16
 80109dc:	4630      	mov	r0, r6
 80109de:	f7fe f84f 	bl	800ea80 <_printf_i>
 80109e2:	e7e4      	b.n	80109ae <_vfiprintf_r+0x1e6>
 80109e4:	08011268 	.word	0x08011268
 80109e8:	08011272 	.word	0x08011272
 80109ec:	0800e551 	.word	0x0800e551
 80109f0:	080107a3 	.word	0x080107a3
 80109f4:	0801126e 	.word	0x0801126e

080109f8 <__sflush_r>:
 80109f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a00:	0716      	lsls	r6, r2, #28
 8010a02:	4605      	mov	r5, r0
 8010a04:	460c      	mov	r4, r1
 8010a06:	d454      	bmi.n	8010ab2 <__sflush_r+0xba>
 8010a08:	684b      	ldr	r3, [r1, #4]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dc02      	bgt.n	8010a14 <__sflush_r+0x1c>
 8010a0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	dd48      	ble.n	8010aa6 <__sflush_r+0xae>
 8010a14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a16:	2e00      	cmp	r6, #0
 8010a18:	d045      	beq.n	8010aa6 <__sflush_r+0xae>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010a20:	682f      	ldr	r7, [r5, #0]
 8010a22:	6a21      	ldr	r1, [r4, #32]
 8010a24:	602b      	str	r3, [r5, #0]
 8010a26:	d030      	beq.n	8010a8a <__sflush_r+0x92>
 8010a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010a2a:	89a3      	ldrh	r3, [r4, #12]
 8010a2c:	0759      	lsls	r1, r3, #29
 8010a2e:	d505      	bpl.n	8010a3c <__sflush_r+0x44>
 8010a30:	6863      	ldr	r3, [r4, #4]
 8010a32:	1ad2      	subs	r2, r2, r3
 8010a34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010a36:	b10b      	cbz	r3, 8010a3c <__sflush_r+0x44>
 8010a38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a3a:	1ad2      	subs	r2, r2, r3
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a40:	6a21      	ldr	r1, [r4, #32]
 8010a42:	4628      	mov	r0, r5
 8010a44:	47b0      	blx	r6
 8010a46:	1c43      	adds	r3, r0, #1
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	d106      	bne.n	8010a5a <__sflush_r+0x62>
 8010a4c:	6829      	ldr	r1, [r5, #0]
 8010a4e:	291d      	cmp	r1, #29
 8010a50:	d82b      	bhi.n	8010aaa <__sflush_r+0xb2>
 8010a52:	4a2a      	ldr	r2, [pc, #168]	@ (8010afc <__sflush_r+0x104>)
 8010a54:	410a      	asrs	r2, r1
 8010a56:	07d6      	lsls	r6, r2, #31
 8010a58:	d427      	bmi.n	8010aaa <__sflush_r+0xb2>
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	6062      	str	r2, [r4, #4]
 8010a5e:	04d9      	lsls	r1, r3, #19
 8010a60:	6922      	ldr	r2, [r4, #16]
 8010a62:	6022      	str	r2, [r4, #0]
 8010a64:	d504      	bpl.n	8010a70 <__sflush_r+0x78>
 8010a66:	1c42      	adds	r2, r0, #1
 8010a68:	d101      	bne.n	8010a6e <__sflush_r+0x76>
 8010a6a:	682b      	ldr	r3, [r5, #0]
 8010a6c:	b903      	cbnz	r3, 8010a70 <__sflush_r+0x78>
 8010a6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a72:	602f      	str	r7, [r5, #0]
 8010a74:	b1b9      	cbz	r1, 8010aa6 <__sflush_r+0xae>
 8010a76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	d002      	beq.n	8010a84 <__sflush_r+0x8c>
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f7ff f9f6 	bl	800fe70 <_free_r>
 8010a84:	2300      	movs	r3, #0
 8010a86:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a88:	e00d      	b.n	8010aa6 <__sflush_r+0xae>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	47b0      	blx	r6
 8010a90:	4602      	mov	r2, r0
 8010a92:	1c50      	adds	r0, r2, #1
 8010a94:	d1c9      	bne.n	8010a2a <__sflush_r+0x32>
 8010a96:	682b      	ldr	r3, [r5, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d0c6      	beq.n	8010a2a <__sflush_r+0x32>
 8010a9c:	2b1d      	cmp	r3, #29
 8010a9e:	d001      	beq.n	8010aa4 <__sflush_r+0xac>
 8010aa0:	2b16      	cmp	r3, #22
 8010aa2:	d11e      	bne.n	8010ae2 <__sflush_r+0xea>
 8010aa4:	602f      	str	r7, [r5, #0]
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	e022      	b.n	8010af0 <__sflush_r+0xf8>
 8010aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aae:	b21b      	sxth	r3, r3
 8010ab0:	e01b      	b.n	8010aea <__sflush_r+0xf2>
 8010ab2:	690f      	ldr	r7, [r1, #16]
 8010ab4:	2f00      	cmp	r7, #0
 8010ab6:	d0f6      	beq.n	8010aa6 <__sflush_r+0xae>
 8010ab8:	0793      	lsls	r3, r2, #30
 8010aba:	680e      	ldr	r6, [r1, #0]
 8010abc:	bf08      	it	eq
 8010abe:	694b      	ldreq	r3, [r1, #20]
 8010ac0:	600f      	str	r7, [r1, #0]
 8010ac2:	bf18      	it	ne
 8010ac4:	2300      	movne	r3, #0
 8010ac6:	eba6 0807 	sub.w	r8, r6, r7
 8010aca:	608b      	str	r3, [r1, #8]
 8010acc:	f1b8 0f00 	cmp.w	r8, #0
 8010ad0:	dde9      	ble.n	8010aa6 <__sflush_r+0xae>
 8010ad2:	6a21      	ldr	r1, [r4, #32]
 8010ad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010ad6:	4643      	mov	r3, r8
 8010ad8:	463a      	mov	r2, r7
 8010ada:	4628      	mov	r0, r5
 8010adc:	47b0      	blx	r6
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	dc08      	bgt.n	8010af4 <__sflush_r+0xfc>
 8010ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aea:	81a3      	strh	r3, [r4, #12]
 8010aec:	f04f 30ff 	mov.w	r0, #4294967295
 8010af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af4:	4407      	add	r7, r0
 8010af6:	eba8 0800 	sub.w	r8, r8, r0
 8010afa:	e7e7      	b.n	8010acc <__sflush_r+0xd4>
 8010afc:	dfbffffe 	.word	0xdfbffffe

08010b00 <_fflush_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	690b      	ldr	r3, [r1, #16]
 8010b04:	4605      	mov	r5, r0
 8010b06:	460c      	mov	r4, r1
 8010b08:	b913      	cbnz	r3, 8010b10 <_fflush_r+0x10>
 8010b0a:	2500      	movs	r5, #0
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	bd38      	pop	{r3, r4, r5, pc}
 8010b10:	b118      	cbz	r0, 8010b1a <_fflush_r+0x1a>
 8010b12:	6a03      	ldr	r3, [r0, #32]
 8010b14:	b90b      	cbnz	r3, 8010b1a <_fflush_r+0x1a>
 8010b16:	f7fe f95f 	bl	800edd8 <__sinit>
 8010b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d0f3      	beq.n	8010b0a <_fflush_r+0xa>
 8010b22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010b24:	07d0      	lsls	r0, r2, #31
 8010b26:	d404      	bmi.n	8010b32 <_fflush_r+0x32>
 8010b28:	0599      	lsls	r1, r3, #22
 8010b2a:	d402      	bmi.n	8010b32 <_fflush_r+0x32>
 8010b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b2e:	f7fe fb4e 	bl	800f1ce <__retarget_lock_acquire_recursive>
 8010b32:	4628      	mov	r0, r5
 8010b34:	4621      	mov	r1, r4
 8010b36:	f7ff ff5f 	bl	80109f8 <__sflush_r>
 8010b3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b3c:	07da      	lsls	r2, r3, #31
 8010b3e:	4605      	mov	r5, r0
 8010b40:	d4e4      	bmi.n	8010b0c <_fflush_r+0xc>
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	059b      	lsls	r3, r3, #22
 8010b46:	d4e1      	bmi.n	8010b0c <_fflush_r+0xc>
 8010b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b4a:	f7fe fb41 	bl	800f1d0 <__retarget_lock_release_recursive>
 8010b4e:	e7dd      	b.n	8010b0c <_fflush_r+0xc>

08010b50 <__swhatbuf_r>:
 8010b50:	b570      	push	{r4, r5, r6, lr}
 8010b52:	460c      	mov	r4, r1
 8010b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b58:	2900      	cmp	r1, #0
 8010b5a:	b096      	sub	sp, #88	@ 0x58
 8010b5c:	4615      	mov	r5, r2
 8010b5e:	461e      	mov	r6, r3
 8010b60:	da0d      	bge.n	8010b7e <__swhatbuf_r+0x2e>
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b68:	f04f 0100 	mov.w	r1, #0
 8010b6c:	bf14      	ite	ne
 8010b6e:	2340      	movne	r3, #64	@ 0x40
 8010b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b74:	2000      	movs	r0, #0
 8010b76:	6031      	str	r1, [r6, #0]
 8010b78:	602b      	str	r3, [r5, #0]
 8010b7a:	b016      	add	sp, #88	@ 0x58
 8010b7c:	bd70      	pop	{r4, r5, r6, pc}
 8010b7e:	466a      	mov	r2, sp
 8010b80:	f000 f848 	bl	8010c14 <_fstat_r>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	dbec      	blt.n	8010b62 <__swhatbuf_r+0x12>
 8010b88:	9901      	ldr	r1, [sp, #4]
 8010b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b92:	4259      	negs	r1, r3
 8010b94:	4159      	adcs	r1, r3
 8010b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b9a:	e7eb      	b.n	8010b74 <__swhatbuf_r+0x24>

08010b9c <__smakebuf_r>:
 8010b9c:	898b      	ldrh	r3, [r1, #12]
 8010b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ba0:	079d      	lsls	r5, r3, #30
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	460c      	mov	r4, r1
 8010ba6:	d507      	bpl.n	8010bb8 <__smakebuf_r+0x1c>
 8010ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	6163      	str	r3, [r4, #20]
 8010bb4:	b003      	add	sp, #12
 8010bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb8:	ab01      	add	r3, sp, #4
 8010bba:	466a      	mov	r2, sp
 8010bbc:	f7ff ffc8 	bl	8010b50 <__swhatbuf_r>
 8010bc0:	9f00      	ldr	r7, [sp, #0]
 8010bc2:	4605      	mov	r5, r0
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f7ff f9c6 	bl	800ff58 <_malloc_r>
 8010bcc:	b948      	cbnz	r0, 8010be2 <__smakebuf_r+0x46>
 8010bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bd2:	059a      	lsls	r2, r3, #22
 8010bd4:	d4ee      	bmi.n	8010bb4 <__smakebuf_r+0x18>
 8010bd6:	f023 0303 	bic.w	r3, r3, #3
 8010bda:	f043 0302 	orr.w	r3, r3, #2
 8010bde:	81a3      	strh	r3, [r4, #12]
 8010be0:	e7e2      	b.n	8010ba8 <__smakebuf_r+0xc>
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	6020      	str	r0, [r4, #0]
 8010be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bea:	81a3      	strh	r3, [r4, #12]
 8010bec:	9b01      	ldr	r3, [sp, #4]
 8010bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010bf2:	b15b      	cbz	r3, 8010c0c <__smakebuf_r+0x70>
 8010bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f000 f81d 	bl	8010c38 <_isatty_r>
 8010bfe:	b128      	cbz	r0, 8010c0c <__smakebuf_r+0x70>
 8010c00:	89a3      	ldrh	r3, [r4, #12]
 8010c02:	f023 0303 	bic.w	r3, r3, #3
 8010c06:	f043 0301 	orr.w	r3, r3, #1
 8010c0a:	81a3      	strh	r3, [r4, #12]
 8010c0c:	89a3      	ldrh	r3, [r4, #12]
 8010c0e:	431d      	orrs	r5, r3
 8010c10:	81a5      	strh	r5, [r4, #12]
 8010c12:	e7cf      	b.n	8010bb4 <__smakebuf_r+0x18>

08010c14 <_fstat_r>:
 8010c14:	b538      	push	{r3, r4, r5, lr}
 8010c16:	4d07      	ldr	r5, [pc, #28]	@ (8010c34 <_fstat_r+0x20>)
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	4608      	mov	r0, r1
 8010c1e:	4611      	mov	r1, r2
 8010c20:	602b      	str	r3, [r5, #0]
 8010c22:	f7f1 fbeb 	bl	80023fc <_fstat>
 8010c26:	1c43      	adds	r3, r0, #1
 8010c28:	d102      	bne.n	8010c30 <_fstat_r+0x1c>
 8010c2a:	682b      	ldr	r3, [r5, #0]
 8010c2c:	b103      	cbz	r3, 8010c30 <_fstat_r+0x1c>
 8010c2e:	6023      	str	r3, [r4, #0]
 8010c30:	bd38      	pop	{r3, r4, r5, pc}
 8010c32:	bf00      	nop
 8010c34:	20002208 	.word	0x20002208

08010c38 <_isatty_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d06      	ldr	r5, [pc, #24]	@ (8010c54 <_isatty_r+0x1c>)
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	602b      	str	r3, [r5, #0]
 8010c44:	f7f1 fbea 	bl	800241c <_isatty>
 8010c48:	1c43      	adds	r3, r0, #1
 8010c4a:	d102      	bne.n	8010c52 <_isatty_r+0x1a>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	b103      	cbz	r3, 8010c52 <_isatty_r+0x1a>
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	bd38      	pop	{r3, r4, r5, pc}
 8010c54:	20002208 	.word	0x20002208

08010c58 <_sbrk_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4d06      	ldr	r5, [pc, #24]	@ (8010c74 <_sbrk_r+0x1c>)
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	602b      	str	r3, [r5, #0]
 8010c64:	f7f1 fbf2 	bl	800244c <_sbrk>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_sbrk_r+0x1a>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_sbrk_r+0x1a>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	20002208 	.word	0x20002208

08010c78 <memcpy>:
 8010c78:	440a      	add	r2, r1
 8010c7a:	4291      	cmp	r1, r2
 8010c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c80:	d100      	bne.n	8010c84 <memcpy+0xc>
 8010c82:	4770      	bx	lr
 8010c84:	b510      	push	{r4, lr}
 8010c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c8e:	4291      	cmp	r1, r2
 8010c90:	d1f9      	bne.n	8010c86 <memcpy+0xe>
 8010c92:	bd10      	pop	{r4, pc}

08010c94 <__assert_func>:
 8010c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c96:	4614      	mov	r4, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b09      	ldr	r3, [pc, #36]	@ (8010cc0 <__assert_func+0x2c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	68d8      	ldr	r0, [r3, #12]
 8010ca2:	b954      	cbnz	r4, 8010cba <__assert_func+0x26>
 8010ca4:	4b07      	ldr	r3, [pc, #28]	@ (8010cc4 <__assert_func+0x30>)
 8010ca6:	461c      	mov	r4, r3
 8010ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010cac:	9100      	str	r1, [sp, #0]
 8010cae:	462b      	mov	r3, r5
 8010cb0:	4905      	ldr	r1, [pc, #20]	@ (8010cc8 <__assert_func+0x34>)
 8010cb2:	f000 f841 	bl	8010d38 <fiprintf>
 8010cb6:	f000 f851 	bl	8010d5c <abort>
 8010cba:	4b04      	ldr	r3, [pc, #16]	@ (8010ccc <__assert_func+0x38>)
 8010cbc:	e7f4      	b.n	8010ca8 <__assert_func+0x14>
 8010cbe:	bf00      	nop
 8010cc0:	2000011c 	.word	0x2000011c
 8010cc4:	080112be 	.word	0x080112be
 8010cc8:	08011290 	.word	0x08011290
 8010ccc:	08011283 	.word	0x08011283

08010cd0 <_calloc_r>:
 8010cd0:	b570      	push	{r4, r5, r6, lr}
 8010cd2:	fba1 5402 	umull	r5, r4, r1, r2
 8010cd6:	b93c      	cbnz	r4, 8010ce8 <_calloc_r+0x18>
 8010cd8:	4629      	mov	r1, r5
 8010cda:	f7ff f93d 	bl	800ff58 <_malloc_r>
 8010cde:	4606      	mov	r6, r0
 8010ce0:	b928      	cbnz	r0, 8010cee <_calloc_r+0x1e>
 8010ce2:	2600      	movs	r6, #0
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	bd70      	pop	{r4, r5, r6, pc}
 8010ce8:	220c      	movs	r2, #12
 8010cea:	6002      	str	r2, [r0, #0]
 8010cec:	e7f9      	b.n	8010ce2 <_calloc_r+0x12>
 8010cee:	462a      	mov	r2, r5
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	f7fe f9ef 	bl	800f0d4 <memset>
 8010cf6:	e7f5      	b.n	8010ce4 <_calloc_r+0x14>

08010cf8 <__ascii_mbtowc>:
 8010cf8:	b082      	sub	sp, #8
 8010cfa:	b901      	cbnz	r1, 8010cfe <__ascii_mbtowc+0x6>
 8010cfc:	a901      	add	r1, sp, #4
 8010cfe:	b142      	cbz	r2, 8010d12 <__ascii_mbtowc+0x1a>
 8010d00:	b14b      	cbz	r3, 8010d16 <__ascii_mbtowc+0x1e>
 8010d02:	7813      	ldrb	r3, [r2, #0]
 8010d04:	600b      	str	r3, [r1, #0]
 8010d06:	7812      	ldrb	r2, [r2, #0]
 8010d08:	1e10      	subs	r0, r2, #0
 8010d0a:	bf18      	it	ne
 8010d0c:	2001      	movne	r0, #1
 8010d0e:	b002      	add	sp, #8
 8010d10:	4770      	bx	lr
 8010d12:	4610      	mov	r0, r2
 8010d14:	e7fb      	b.n	8010d0e <__ascii_mbtowc+0x16>
 8010d16:	f06f 0001 	mvn.w	r0, #1
 8010d1a:	e7f8      	b.n	8010d0e <__ascii_mbtowc+0x16>

08010d1c <__ascii_wctomb>:
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	4608      	mov	r0, r1
 8010d20:	b141      	cbz	r1, 8010d34 <__ascii_wctomb+0x18>
 8010d22:	2aff      	cmp	r2, #255	@ 0xff
 8010d24:	d904      	bls.n	8010d30 <__ascii_wctomb+0x14>
 8010d26:	228a      	movs	r2, #138	@ 0x8a
 8010d28:	601a      	str	r2, [r3, #0]
 8010d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d2e:	4770      	bx	lr
 8010d30:	700a      	strb	r2, [r1, #0]
 8010d32:	2001      	movs	r0, #1
 8010d34:	4770      	bx	lr
	...

08010d38 <fiprintf>:
 8010d38:	b40e      	push	{r1, r2, r3}
 8010d3a:	b503      	push	{r0, r1, lr}
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	ab03      	add	r3, sp, #12
 8010d40:	4805      	ldr	r0, [pc, #20]	@ (8010d58 <fiprintf+0x20>)
 8010d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d46:	6800      	ldr	r0, [r0, #0]
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	f7ff fd3d 	bl	80107c8 <_vfiprintf_r>
 8010d4e:	b002      	add	sp, #8
 8010d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d54:	b003      	add	sp, #12
 8010d56:	4770      	bx	lr
 8010d58:	2000011c 	.word	0x2000011c

08010d5c <abort>:
 8010d5c:	b508      	push	{r3, lr}
 8010d5e:	2006      	movs	r0, #6
 8010d60:	f000 f82c 	bl	8010dbc <raise>
 8010d64:	2001      	movs	r0, #1
 8010d66:	f7f1 fb15 	bl	8002394 <_exit>

08010d6a <_raise_r>:
 8010d6a:	291f      	cmp	r1, #31
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4605      	mov	r5, r0
 8010d70:	460c      	mov	r4, r1
 8010d72:	d904      	bls.n	8010d7e <_raise_r+0x14>
 8010d74:	2316      	movs	r3, #22
 8010d76:	6003      	str	r3, [r0, #0]
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7c:	bd38      	pop	{r3, r4, r5, pc}
 8010d7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d80:	b112      	cbz	r2, 8010d88 <_raise_r+0x1e>
 8010d82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d86:	b94b      	cbnz	r3, 8010d9c <_raise_r+0x32>
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f000 f831 	bl	8010df0 <_getpid_r>
 8010d8e:	4622      	mov	r2, r4
 8010d90:	4601      	mov	r1, r0
 8010d92:	4628      	mov	r0, r5
 8010d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d98:	f000 b818 	b.w	8010dcc <_kill_r>
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d00a      	beq.n	8010db6 <_raise_r+0x4c>
 8010da0:	1c59      	adds	r1, r3, #1
 8010da2:	d103      	bne.n	8010dac <_raise_r+0x42>
 8010da4:	2316      	movs	r3, #22
 8010da6:	6003      	str	r3, [r0, #0]
 8010da8:	2001      	movs	r0, #1
 8010daa:	e7e7      	b.n	8010d7c <_raise_r+0x12>
 8010dac:	2100      	movs	r1, #0
 8010dae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010db2:	4620      	mov	r0, r4
 8010db4:	4798      	blx	r3
 8010db6:	2000      	movs	r0, #0
 8010db8:	e7e0      	b.n	8010d7c <_raise_r+0x12>
	...

08010dbc <raise>:
 8010dbc:	4b02      	ldr	r3, [pc, #8]	@ (8010dc8 <raise+0xc>)
 8010dbe:	4601      	mov	r1, r0
 8010dc0:	6818      	ldr	r0, [r3, #0]
 8010dc2:	f7ff bfd2 	b.w	8010d6a <_raise_r>
 8010dc6:	bf00      	nop
 8010dc8:	2000011c 	.word	0x2000011c

08010dcc <_kill_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d07      	ldr	r5, [pc, #28]	@ (8010dec <_kill_r+0x20>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	602b      	str	r3, [r5, #0]
 8010dda:	f7f1 facb 	bl	8002374 <_kill>
 8010dde:	1c43      	adds	r3, r0, #1
 8010de0:	d102      	bne.n	8010de8 <_kill_r+0x1c>
 8010de2:	682b      	ldr	r3, [r5, #0]
 8010de4:	b103      	cbz	r3, 8010de8 <_kill_r+0x1c>
 8010de6:	6023      	str	r3, [r4, #0]
 8010de8:	bd38      	pop	{r3, r4, r5, pc}
 8010dea:	bf00      	nop
 8010dec:	20002208 	.word	0x20002208

08010df0 <_getpid_r>:
 8010df0:	f7f1 bab8 	b.w	8002364 <_getpid>

08010df4 <_init>:
 8010df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df6:	bf00      	nop
 8010df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfa:	bc08      	pop	{r3}
 8010dfc:	469e      	mov	lr, r3
 8010dfe:	4770      	bx	lr

08010e00 <_fini>:
 8010e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e02:	bf00      	nop
 8010e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e06:	bc08      	pop	{r3}
 8010e08:	469e      	mov	lr, r3
 8010e0a:	4770      	bx	lr
