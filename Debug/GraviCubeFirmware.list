
GraviCubeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08010cd8  08010cd8  00011cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112c0  080112c0  000132d8  2**0
                  CONTENTS
  4 .ARM          00000008  080112c0  080112c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112c8  080112c8  000132d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112c8  080112c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080112cc  080112cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080112d0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f30  200002d8  080115a8  000132d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002208  080115a8  00014208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b6  00000000  00000000  00013308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427d  00000000  00000000  00030abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123f  00000000  00000000  000364c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e108  00000000  00000000  00037707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2c7  00000000  00000000  0005580f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a50d  00000000  00000000  00074ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010efe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007548  00000000  00000000  0010f028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00116570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010cbc 	.word	0x08010cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08010cbc 	.word	0x08010cbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_Z9hc05_initv>:
extern UART_HandleTypeDef huart2;
extern bool receivedStart_Flag;
uint8_t receivedBTData;

void hc05_init()
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
	//Bluetooth-Test-message
	char test_string[] = "Hello, welcome to GraviCube\r\n";
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <_Z9hc05_initv+0x40>)
 8000eb0:	463c      	mov	r4, r7
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ebc:	c407      	stmia	r4!, {r0, r1, r2}
 8000ebe:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)test_string, strlen(test_string), 100);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f9dc 	bl	8000280 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4639      	mov	r1, r7
 8000ece:	2364      	movs	r3, #100	@ 0x64
 8000ed0:	4806      	ldr	r0, [pc, #24]	@ (8000eec <_Z9hc05_initv+0x44>)
 8000ed2:	f007 feb7 	bl	8008c44 <HAL_UART_Transmit>

	//Enable Bluetooth Interrupt
	HAL_UART_Receive_IT(&huart2, &receivedBTData, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4905      	ldr	r1, [pc, #20]	@ (8000ef0 <_Z9hc05_initv+0x48>)
 8000eda:	4804      	ldr	r0, [pc, #16]	@ (8000eec <_Z9hc05_initv+0x44>)
 8000edc:	f007 ff3d 	bl	8008d5a <HAL_UART_Receive_IT>
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee8:	08010cd8 	.word	0x08010cd8
 8000eec:	2000043c 	.word	0x2000043c
 8000ef0:	200002f4 	.word	0x200002f4

08000ef4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <HAL_UART_RxCpltCallback+0x40>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d112      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x38>
	{
		if(receivedBTData == 'S' && !receivedStart_Flag)
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_UART_RxCpltCallback+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b53      	cmp	r3, #83	@ 0x53
 8000f0c:	d109      	bne.n	8000f22 <HAL_UART_RxCpltCallback+0x2e>
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_UART_RxCpltCallback+0x48>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f083 0301 	eor.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <HAL_UART_RxCpltCallback+0x2e>
		{
			receivedStart_Flag = true;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_UART_RxCpltCallback+0x48>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, &receivedBTData, 1); //Re-enable the Interrupt
 8000f22:	2201      	movs	r2, #1
 8000f24:	4904      	ldr	r1, [pc, #16]	@ (8000f38 <HAL_UART_RxCpltCallback+0x44>)
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <HAL_UART_RxCpltCallback+0x4c>)
 8000f28:	f007 ff17 	bl	8008d5a <HAL_UART_Receive_IT>
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40004400 	.word	0x40004400
 8000f38:	200002f4 	.word	0x200002f4
 8000f3c:	20000484 	.word	0x20000484
 8000f40:	2000043c 	.word	0x2000043c

08000f44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d009      	beq.n	8000f70 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f5c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <ITM_SendChar+0x2c>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <ITM_SendChar+0x2e>
 8000f70:	2300      	movs	r3, #0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d010      	beq.n	8000f98 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f76:	e000      	b.n	8000f7a <ITM_SendChar+0x36>
    {
      __NOP();
 8000f78:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f7a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f4      	bne.n	8000f78 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f8e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f001 f96b 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f963 	bl	800127c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 fb3f 	bl	8001638 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000fba:	f000 fb1d 	bl	80015f8 <_ZL11MX_DMA_Initv>
  MX_USB_DEVICE_Init();
 8000fbe:	f00c f921 	bl	800d204 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000fc2:	f000 f9cd 	bl	8001360 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8000fc6:	f000 f9ff 	bl	80013c8 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8000fca:	f000 fae7 	bl	800159c <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8000fce:	f000 fa89 	bl	80014e4 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  //MPU-6050 Init
  mpu6050_init(false);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 fbea 	bl	80017ac <_Z12mpu6050_initb>

  //HC-05 Bluetooth Init
  hc05_init();
 8000fd8:	f7ff ff66 	bl	8000ea8 <_Z9hc05_initv>

  //Motor-Test
  TIM3->CCR1 = 50;
 8000fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8001248 <main+0x2a0>)
 8000fde:	2232      	movs	r2, #50	@ 0x32
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4899      	ldr	r0, [pc, #612]	@ (800124c <main+0x2a4>)
 8000fe6:	f006 ff27 	bl	8007e38 <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //Start/Stop auf LOW
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	4898      	ldr	r0, [pc, #608]	@ (8001250 <main+0x2a8>)
 8000ff0:	f002 f800 	bl	8002ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //Brake auf HIGH damit gelöst
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ffa:	4895      	ldr	r0, [pc, #596]	@ (8001250 <main+0x2a8>)
 8000ffc:	f001 fffa 	bl	8002ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //Richtung des Motors
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001006:	4892      	ldr	r0, [pc, #584]	@ (8001250 <main+0x2a8>)
 8001008:	f001 fff4 	bl	8002ff4 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //RGB-LED
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	4890      	ldr	r0, [pc, #576]	@ (8001254 <main+0x2ac>)
 8001012:	f001 ffef 	bl	8002ff4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Function-LED
	static uint32_t timeSaveBlink = HAL_GetTick();
 8001016:	4b90      	ldr	r3, [pc, #576]	@ (8001258 <main+0x2b0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f3bf 8f5b 	dmb	ish
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d012      	beq.n	8001056 <main+0xae>
 8001030:	4889      	ldr	r0, [pc, #548]	@ (8001258 <main+0x2b0>)
 8001032:	f00c fdd1 	bl	800dbd8 <__cxa_guard_acquire>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <main+0xae>
 8001046:	f001 f985 	bl	8002354 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a83      	ldr	r2, [pc, #524]	@ (800125c <main+0x2b4>)
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4881      	ldr	r0, [pc, #516]	@ (8001258 <main+0x2b0>)
 8001052:	f00c fdcd 	bl	800dbf0 <__cxa_guard_release>
	if (HAL_GetTick() - timeSaveBlink >= 1000) // 1000 ms delay
 8001056:	f001 f97d 	bl	8002354 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <main+0x2b4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	4293      	cmp	r3, r2
 8001068:	bf8c      	ite	hi
 800106a:	2301      	movhi	r3, #1
 800106c:	2300      	movls	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <main+0xe2>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001074:	2104      	movs	r1, #4
 8001076:	4876      	ldr	r0, [pc, #472]	@ (8001250 <main+0x2a8>)
 8001078:	f001 ffd5 	bl	8003026 <HAL_GPIO_TogglePin>

		mpu6050_readData();
 800107c:	f000 fc7a 	bl	8001974 <_Z16mpu6050_readDatav>

		timeSaveBlink = HAL_GetTick();
 8001080:	f001 f968 	bl	8002354 <HAL_GetTick>
 8001084:	4603      	mov	r3, r0
 8001086:	4a75      	ldr	r2, [pc, #468]	@ (800125c <main+0x2b4>)
 8001088:	6013      	str	r3, [r2, #0]
	}

	static uint8_t PWMspeed = 1;
	static uint32_t timeSaveMotorTest = HAL_GetTick();
 800108a:	4b75      	ldr	r3, [pc, #468]	@ (8001260 <main+0x2b8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f3bf 8f5b 	dmb	ish
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d012      	beq.n	80010ca <main+0x122>
 80010a4:	486e      	ldr	r0, [pc, #440]	@ (8001260 <main+0x2b8>)
 80010a6:	f00c fd97 	bl	800dbd8 <__cxa_guard_acquire>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <main+0x122>
 80010ba:	f001 f94b 	bl	8002354 <HAL_GetTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a68      	ldr	r2, [pc, #416]	@ (8001264 <main+0x2bc>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4866      	ldr	r0, [pc, #408]	@ (8001260 <main+0x2b8>)
 80010c6:	f00c fd93 	bl	800dbf0 <__cxa_guard_release>
	if(HAL_GetTick() - timeSaveMotorTest >= 10000)
 80010ca:	f001 f943 	bl	8002354 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b64      	ldr	r3, [pc, #400]	@ (8001264 <main+0x2bc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010da:	4293      	cmp	r3, r2
 80010dc:	bf8c      	ite	hi
 80010de:	2301      	movhi	r3, #1
 80010e0:	2300      	movls	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d064      	beq.n	80011b2 <main+0x20a>
	{
		uint8_t newARR;
		switch(PWMspeed)
 80010e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001268 <main+0x2c0>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d044      	beq.n	800117a <main+0x1d2>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dc5e      	bgt.n	80011b2 <main+0x20a>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <main+0x156>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d01f      	beq.n	800113c <main+0x194>
 80010fc:	e059      	b.n	80011b2 <main+0x20a>
		{
			case 0:
				newARR = 100-1;
 80010fe:	2363      	movs	r3, #99	@ 0x63
 8001100:	71fb      	strb	r3, [r7, #7]
				if(TIM3->CNT > newARR)
 8001102:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <main+0x2a0>)
 8001104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	429a      	cmp	r2, r3
 800110a:	bf8c      	ite	hi
 800110c:	2301      	movhi	r3, #1
 800110e:	2300      	movls	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <main+0x176>
				{
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001116:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <main+0x2a4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
				}

				TIM3->ARR = newARR;
 800111e:	4a4a      	ldr	r2, [pc, #296]	@ (8001248 <main+0x2a0>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	62d3      	str	r3, [r2, #44]	@ 0x2c
				TIM3->CCR1 = (newARR/2);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b47      	ldr	r3, [pc, #284]	@ (8001248 <main+0x2a0>)
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34

				PWMspeed++;
 800112e:	4b4e      	ldr	r3, [pc, #312]	@ (8001268 <main+0x2c0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b4c      	ldr	r3, [pc, #304]	@ (8001268 <main+0x2c0>)
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e03a      	b.n	80011b2 <main+0x20a>

			case 1:
				newARR = 90-1;
 800113c:	2359      	movs	r3, #89	@ 0x59
 800113e:	71fb      	strb	r3, [r7, #7]
				if(TIM3->CNT > newARR)
 8001140:	4b41      	ldr	r3, [pc, #260]	@ (8001248 <main+0x2a0>)
 8001142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	429a      	cmp	r2, r3
 8001148:	bf8c      	ite	hi
 800114a:	2301      	movhi	r3, #1
 800114c:	2300      	movls	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <main+0x1b4>
				{
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <main+0x2a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
				}

				TIM3->ARR = newARR;
 800115c:	4a3a      	ldr	r2, [pc, #232]	@ (8001248 <main+0x2a0>)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	62d3      	str	r3, [r2, #44]	@ 0x2c
				TIM3->CCR1 = (newARR/2);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b37      	ldr	r3, [pc, #220]	@ (8001248 <main+0x2a0>)
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34

				PWMspeed++;
 800116c:	4b3e      	ldr	r3, [pc, #248]	@ (8001268 <main+0x2c0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <main+0x2c0>)
 8001176:	701a      	strb	r2, [r3, #0]
			break;
 8001178:	e01b      	b.n	80011b2 <main+0x20a>

			case 2:
				newARR = 200-1;
 800117a:	23c7      	movs	r3, #199	@ 0xc7
 800117c:	71fb      	strb	r3, [r7, #7]
				if(TIM3->CNT > newARR)
 800117e:	4b32      	ldr	r3, [pc, #200]	@ (8001248 <main+0x2a0>)
 8001180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	429a      	cmp	r2, r3
 8001186:	bf8c      	ite	hi
 8001188:	2301      	movhi	r3, #1
 800118a:	2300      	movls	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <main+0x1f2>
				{
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <main+0x2a4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
				}

				TIM3->ARR = newARR;
 800119a:	4a2b      	ldr	r2, [pc, #172]	@ (8001248 <main+0x2a0>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	62d3      	str	r3, [r2, #44]	@ 0x2c
				TIM3->CCR1 = (newARR/2);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	085b      	lsrs	r3, r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <main+0x2a0>)
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34

				PWMspeed = 0;
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <main+0x2c0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
			break;
 80011b0:	bf00      	nop
		}
	}

	if (receivedStart_Flag)
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <main+0x2c4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f43f af2d 	beq.w	8001016 <main+0x6e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2104      	movs	r1, #4
 80011c0:	4824      	ldr	r0, [pc, #144]	@ (8001254 <main+0x2ac>)
 80011c2:	f001 ff17 	bl	8002ff4 <HAL_GPIO_WritePin>

		static uint32_t timeSaveBuzzer = HAL_GetTick();
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <main+0x2c8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f3bf 8f5b 	dmb	ish
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d012      	beq.n	8001206 <main+0x25e>
 80011e0:	4823      	ldr	r0, [pc, #140]	@ (8001270 <main+0x2c8>)
 80011e2:	f00c fcf9 	bl	800dbd8 <__cxa_guard_acquire>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <main+0x25e>
 80011f6:	f001 f8ad 	bl	8002354 <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <main+0x2cc>)
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	481b      	ldr	r0, [pc, #108]	@ (8001270 <main+0x2c8>)
 8001202:	f00c fcf5 	bl	800dbf0 <__cxa_guard_release>
		if (HAL_GetTick() - timeSaveBuzzer >= 500) // 500 ms delay
 8001206:	f001 f8a5 	bl	8002354 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <main+0x2cc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001216:	4293      	cmp	r3, r2
 8001218:	bf8c      	ite	hi
 800121a:	2301      	movhi	r3, #1
 800121c:	2300      	movls	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f43f aef8 	beq.w	8001016 <main+0x6e>
		{
			printf("Start \n");
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <main+0x2d0>)
 8001228:	f00d fdd8 	bl	800eddc <puts>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); //turn off buzzer again
 800122c:	2201      	movs	r2, #1
 800122e:	2104      	movs	r1, #4
 8001230:	4808      	ldr	r0, [pc, #32]	@ (8001254 <main+0x2ac>)
 8001232:	f001 fedf 	bl	8002ff4 <HAL_GPIO_WritePin>
			timeSaveBuzzer = HAL_GetTick();
 8001236:	f001 f88d 	bl	8002354 <HAL_GetTick>
 800123a:	4603      	mov	r3, r0
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <main+0x2cc>)
 800123e:	6013      	str	r3, [r2, #0]
			receivedStart_Flag = false; //Reset the Start Flag
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <main+0x2c4>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001246:	e6e6      	b.n	8001016 <main+0x6e>
 8001248:	40000400 	.word	0x40000400
 800124c:	2000034c 	.word	0x2000034c
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	2000048c 	.word	0x2000048c
 800125c:	20000488 	.word	0x20000488
 8001260:	20000494 	.word	0x20000494
 8001264:	20000490 	.word	0x20000490
 8001268:	20000000 	.word	0x20000000
 800126c:	20000484 	.word	0x20000484
 8001270:	2000049c 	.word	0x2000049c
 8001274:	20000498 	.word	0x20000498
 8001278:	08010cf8 	.word	0x08010cf8

0800127c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	@ 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00d fe86 	bl	800ef9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <_Z18SystemClock_Configv+0xdc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001358 <_Z18SystemClock_Configv+0xdc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <_Z18SystemClock_Configv+0xdc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b26      	ldr	r3, [pc, #152]	@ (800135c <_Z18SystemClock_Configv+0xe0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a25      	ldr	r2, [pc, #148]	@ (800135c <_Z18SystemClock_Configv+0xe0>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <_Z18SystemClock_Configv+0xe0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012f0:	23c0      	movs	r3, #192	@ 0xc0
 80012f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f005 fff7 	bl	80072f4 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf14      	ite	ne
 800130c:	2301      	movne	r3, #1
 800130e:	2300      	moveq	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001316:	f000 fa43 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f006 fa55 	bl	80077e4 <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800134a:	f000 fa29 	bl	80017a0 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3750      	adds	r7, #80	@ 0x50
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <_ZL12MX_I2C1_Initv+0x60>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 800136c:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <_ZL12MX_I2C1_Initv+0x64>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 800137e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <_ZL12MX_I2C1_Initv+0x5c>)
 800139e:	f001 fe5d 	bl	800305c <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80013b2:	f000 f9f5 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200002f8 	.word	0x200002f8
 80013c0:	40005400 	.word	0x40005400
 80013c4:	000186a0 	.word	0x000186a0

080013c8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	@ 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 80013fa:	4a39      	ldr	r2, [pc, #228]	@ (80014e0 <_ZL12MX_TIM3_Initv+0x118>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80013fe:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001400:	2207      	movs	r2, #7
 8001402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800140a:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 800140c:	2263      	movs	r2, #99	@ 0x63
 800140e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141c:	482f      	ldr	r0, [pc, #188]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 800141e:	f006 fbff 	bl	8007c20 <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001432:	f000 f9b5 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001440:	4619      	mov	r1, r3
 8001442:	4826      	ldr	r0, [pc, #152]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001444:	f006 ff5a 	bl	80082fc <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001458:	f000 f9a2 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 800145e:	f006 fc91 	bl	8007d84 <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001472:	f000 f995 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 8001486:	f007 fb0b 	bl	8008aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800149a:	f000 f981 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	@ 0x60
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 80014b6:	f006 fe5f 	bl	8008178 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80014ca:	f000 f969 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <_ZL12MX_TIM3_Initv+0x114>)
 80014d0:	f000 fcfe 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	@ 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000034c 	.word	0x2000034c
 80014e0:	40000400 	.word	0x40000400

080014e4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001502:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <_ZL12MX_TIM4_Initv+0xb4>)
 8001504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001508:	2207      	movs	r2, #7
 800150a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001514:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001518:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001526:	481b      	ldr	r0, [pc, #108]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001528:	f006 fb7a 	bl	8007c20 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 800153c:	f000 f930 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	4811      	ldr	r0, [pc, #68]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 800154e:	f006 fed5 	bl	80082fc <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf14      	ite	ne
 8001558:	2301      	movne	r3, #1
 800155a:	2300      	moveq	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001562:	f000 f91d 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <_ZL12MX_TIM4_Initv+0xb0>)
 8001574:	f007 fa94 	bl	8008aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001588:	f000 f90a 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000394 	.word	0x20000394
 8001598:	40000800 	.word	0x40000800

0800159c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <_ZL19MX_USART2_UART_Initv+0x58>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015d4:	f007 fae6 	bl	8008ba4 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80015e8:	f000 f8da 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000043c 	.word	0x2000043c
 80015f4:	40004400 	.word	0x40004400

080015f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <_ZL11MX_DMA_Initv+0x3c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <_ZL11MX_DMA_Initv+0x3c>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <_ZL11MX_DMA_Initv+0x3c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	200f      	movs	r0, #15
 8001620:	f000 ffa3 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001624:	200f      	movs	r0, #15
 8001626:	f000 ffbc 	bl	80025a2 <HAL_NVIC_EnableIRQ>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a39      	ldr	r2, [pc, #228]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <_ZL12MX_GPIO_Initv+0x120>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2107      	movs	r1, #7
 80016c2:	4826      	ldr	r0, [pc, #152]	@ (800175c <_ZL12MX_GPIO_Initv+0x124>)
 80016c4:	f001 fc96 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2110      	movs	r1, #16
 80016cc:	4824      	ldr	r0, [pc, #144]	@ (8001760 <_ZL12MX_GPIO_Initv+0x128>)
 80016ce:	f001 fc91 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7149 	mov.w	r1, #804	@ 0x324
 80016d8:	4822      	ldr	r0, [pc, #136]	@ (8001764 <_ZL12MX_GPIO_Initv+0x12c>)
 80016da:	f001 fc8b 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80016de:	2307      	movs	r3, #7
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4819      	ldr	r0, [pc, #100]	@ (800175c <_ZL12MX_GPIO_Initv+0x124>)
 80016f6:	f001 faf9 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016fa:	2310      	movs	r3, #16
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <_ZL12MX_GPIO_Initv+0x128>)
 8001712:	f001 faeb 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001716:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <_ZL12MX_GPIO_Initv+0x12c>)
 8001730:	f001 fadc 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4804      	ldr	r0, [pc, #16]	@ (800175c <_ZL12MX_GPIO_Initv+0x124>)
 800174c:	f001 face 	bl	8002cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400

08001768 <_write>:
/* USER CODE BEGIN 4 */
// used for support of printf out of SWD when using C++
extern "C"
{
	int _write(int file, char *ptr, int len)
	{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
		(void)file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e009      	b.n	800178e <_write+0x26>
		{
			ITM_SendChar(*ptr++);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fbde 	bl	8000f44 <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbf1      	blt.n	800177a <_write+0x12>
		}
		return len;
 8001796:	687b      	ldr	r3, [r7, #4]
	}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <Error_Handler+0x8>

080017ac <_Z12mpu6050_initb>:
extern I2C_HandleTypeDef hi2c1;
extern TIM_HandleTypeDef htim4;
uint8_t dataMPU[14];

void mpu6050_init(bool interruptEnable)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	//Check connection
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, 1, 100); //Makro muss in Klammern sein
 80017b6:	2364      	movs	r3, #100	@ 0x64
 80017b8:	2201      	movs	r2, #1
 80017ba:	21d0      	movs	r1, #208	@ 0xd0
 80017bc:	4861      	ldr	r0, [pc, #388]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 80017be:	f002 f98d 	bl	8003adc <HAL_I2C_IsDeviceReady>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <_Z12mpu6050_initb+0x28>
	{
		printf("The device is ready \n");
 80017cc:	485e      	ldr	r0, [pc, #376]	@ (8001948 <_Z12mpu6050_initb+0x19c>)
 80017ce:	f00d fb05 	bl	800eddc <puts>
 80017d2:	e002      	b.n	80017da <_Z12mpu6050_initb+0x2e>
	}
	else
	{
		printf("The device is not ready \n");
 80017d4:	485d      	ldr	r0, [pc, #372]	@ (800194c <_Z12mpu6050_initb+0x1a0>)
 80017d6:	f00d fb01 	bl	800eddc <puts>
	}

	//PWR_MGMT_1
	//Exit sleep mode
	uint8_t config = 0; //To disable Temperature Sensor Set 3rd Bit to HIGH
 80017da:	2300      	movs	r3, #0
 80017dc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_PWR_MGMT_1, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80017de:	2364      	movs	r3, #100	@ 0x64
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f107 030e 	add.w	r3, r7, #14
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	226b      	movs	r2, #107	@ 0x6b
 80017f0:	21d0      	movs	r1, #208	@ 0xd0
 80017f2:	4854      	ldr	r0, [pc, #336]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 80017f4:	f001 fd8c 	bl	8003310 <HAL_I2C_Mem_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <_Z12mpu6050_initb+0x5e>
	{
		printf("Exited sleep mode \n");
 8001802:	4853      	ldr	r0, [pc, #332]	@ (8001950 <_Z12mpu6050_initb+0x1a4>)
 8001804:	f00d faea 	bl	800eddc <puts>
 8001808:	e002      	b.n	8001810 <_Z12mpu6050_initb+0x64>
	}
	else
	{
		printf("Couldn't exit sleep mode \n");
 800180a:	4852      	ldr	r0, [pc, #328]	@ (8001954 <_Z12mpu6050_initb+0x1a8>)
 800180c:	f00d fae6 	bl	800eddc <puts>
	}

	//DLPF
	//Set Value of Digital Low Pass
	// Reads the current value of the CONFIG (26) register
	config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_CONFIG, 1, &config, 1, 100);
 8001810:	2364      	movs	r3, #100	@ 0x64
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	f107 030e 	add.w	r3, r7, #14
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	221a      	movs	r2, #26
 8001822:	21d1      	movs	r1, #209	@ 0xd1
 8001824:	4847      	ldr	r0, [pc, #284]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 8001826:	f001 fe6d 	bl	8003504 <HAL_I2C_Mem_Read>
 800182a:	4603      	mov	r3, r0
 800182c:	73bb      	strb	r3, [r7, #14]

	//Sets the last 3-Bits of the Register according to the DLPF_VALUE, which are responsible for the Digital Low Pass
	config &= ((~(0b111)) | (DLPF_VALUE & 0b111));
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	f023 0307 	bic.w	r3, r3, #7
 8001834:	b2db      	uxtb	r3, r3
 8001836:	73bb      	strb	r3, [r7, #14]

	//Writes the updated value back to the CONFIG register
	ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_CONFIG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001838:	2364      	movs	r3, #100	@ 0x64
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2301      	movs	r3, #1
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f107 030e 	add.w	r3, r7, #14
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2301      	movs	r3, #1
 8001848:	221a      	movs	r2, #26
 800184a:	21d0      	movs	r1, #208	@ 0xd0
 800184c:	483d      	ldr	r0, [pc, #244]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 800184e:	f001 fd5f 	bl	8003310 <HAL_I2C_Mem_Write>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <_Z12mpu6050_initb+0xba>
	{
		printf("Set digital Low Pass to value %d \n", DLPF_VALUE);
 800185c:	2100      	movs	r1, #0
 800185e:	483e      	ldr	r0, [pc, #248]	@ (8001958 <_Z12mpu6050_initb+0x1ac>)
 8001860:	f00d fa54 	bl	800ed0c <iprintf>
 8001864:	e002      	b.n	800186c <_Z12mpu6050_initb+0xc0>
	}
	else
	{
		printf("Couldn't set the digital Low Pass value \n");
 8001866:	483d      	ldr	r0, [pc, #244]	@ (800195c <_Z12mpu6050_initb+0x1b0>)
 8001868:	f00d fab8 	bl	800eddc <puts>
	}

	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 800186c:	483c      	ldr	r0, [pc, #240]	@ (8001960 <_Z12mpu6050_initb+0x1b4>)
 800186e:	f006 fa27 	bl	8007cc0 <HAL_TIM_Base_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_Z12mpu6050_initb+0xda>
	{
		// Starting Error
	    Error_Handler();
 8001882:	f7ff ff8d 	bl	80017a0 <Error_Handler>
	 }

	//Interrupt-Enable
	if(interruptEnable)
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d056      	beq.n	800193a <_Z12mpu6050_initb+0x18e>
	{
		//INT_PIN_CFG
		// Reads the current value of the INT_PIN_CFG register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_PIN_CFG, 1, &config, 1, 100);
 800188c:	2364      	movs	r3, #100	@ 0x64
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2301      	movs	r3, #1
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f107 030e 	add.w	r3, r7, #14
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	2237      	movs	r2, #55	@ 0x37
 800189e:	21d1      	movs	r1, #209	@ 0xd1
 80018a0:	4828      	ldr	r0, [pc, #160]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 80018a2:	f001 fe2f 	bl	8003504 <HAL_I2C_Mem_Read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73bb      	strb	r3, [r7, #14]

		// Set the INT_OPEN bit (bit 6) to open-drain-mode and the INT_LEVEL bit (bit 7) to active LOW
		config |= (0b11 << 6); // Set bit 7 and 6 to 1
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_PIN_CFG register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_PIN_CFG, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 80018b4:	2364      	movs	r3, #100	@ 0x64
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2301      	movs	r3, #1
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	f107 030e 	add.w	r3, r7, #14
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2237      	movs	r2, #55	@ 0x37
 80018c6:	21d0      	movs	r1, #208	@ 0xd0
 80018c8:	481e      	ldr	r0, [pc, #120]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 80018ca:	f001 fd21 	bl	8003310 <HAL_I2C_Mem_Write>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d103      	bne.n	80018e0 <_Z12mpu6050_initb+0x134>
		{
			printf("Set Int-Pin to open-drain and active LOW \n");
 80018d8:	4822      	ldr	r0, [pc, #136]	@ (8001964 <_Z12mpu6050_initb+0x1b8>)
 80018da:	f00d fa7f 	bl	800eddc <puts>
 80018de:	e002      	b.n	80018e6 <_Z12mpu6050_initb+0x13a>
		}
		else
		{
			printf("Couldn't set Int-Pin mode \n");
 80018e0:	4821      	ldr	r0, [pc, #132]	@ (8001968 <_Z12mpu6050_initb+0x1bc>)
 80018e2:	f00d fa7b 	bl	800eddc <puts>
		}

		//INT_ENABLE
		// Reads the current value of the INT_ENABLE register
		config = HAL_I2C_Mem_Read(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, REG_INT_ENABLE, 1, &config, 1, 100);
 80018e6:	2364      	movs	r3, #100	@ 0x64
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f107 030e 	add.w	r3, r7, #14
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	2238      	movs	r2, #56	@ 0x38
 80018f8:	21d1      	movs	r1, #209	@ 0xd1
 80018fa:	4812      	ldr	r0, [pc, #72]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 80018fc:	f001 fe02 	bl	8003504 <HAL_I2C_Mem_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	73bb      	strb	r3, [r7, #14]

		// Set the DATA_RDY_EN bit (bit 0) disable
		config |= (0); // Set bit 0 to 0
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	73bb      	strb	r3, [r7, #14]

		// Writes the updated value back to the INT_ENABLE register
		ret = HAL_I2C_Mem_Write(&hi2c1, ((DEVICE_ADRESS) <<1) + 0, REG_INT_ENABLE, 1, &config, 1, 100); //+ 0 because of Read/Write bit
 8001908:	2364      	movs	r3, #100	@ 0x64
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	f107 030e 	add.w	r3, r7, #14
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	2238      	movs	r2, #56	@ 0x38
 800191a:	21d0      	movs	r1, #208	@ 0xd0
 800191c:	4809      	ldr	r0, [pc, #36]	@ (8001944 <_Z12mpu6050_initb+0x198>)
 800191e:	f001 fcf7 	bl	8003310 <HAL_I2C_Mem_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
		if(ret == HAL_OK)
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <_Z12mpu6050_initb+0x188>
		{
			printf("Activated Data Ready Interrupt \n");
 800192c:	480f      	ldr	r0, [pc, #60]	@ (800196c <_Z12mpu6050_initb+0x1c0>)
 800192e:	f00d fa55 	bl	800eddc <puts>
		{
			printf("Couldn't activate Interrupt \n");
		}
	}

}
 8001932:	e002      	b.n	800193a <_Z12mpu6050_initb+0x18e>
			printf("Couldn't activate Interrupt \n");
 8001934:	480e      	ldr	r0, [pc, #56]	@ (8001970 <_Z12mpu6050_initb+0x1c4>)
 8001936:	f00d fa51 	bl	800eddc <puts>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002f8 	.word	0x200002f8
 8001948:	08010d00 	.word	0x08010d00
 800194c:	08010d18 	.word	0x08010d18
 8001950:	08010d34 	.word	0x08010d34
 8001954:	08010d48 	.word	0x08010d48
 8001958:	08010d64 	.word	0x08010d64
 800195c:	08010d88 	.word	0x08010d88
 8001960:	20000394 	.word	0x20000394
 8001964:	08010db4 	.word	0x08010db4
 8001968:	08010de0 	.word	0x08010de0
 800196c:	08010dfc 	.word	0x08010dfc
 8001970:	08010e1c 	.word	0x08010e1c

08001974 <_Z16mpu6050_readDatav>:

void mpu6050_readData()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af02      	add	r7, sp, #8
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <_Z16mpu6050_readDatav+0x38>)
 800197c:	f002 fc2c 	bl	80041d8 <HAL_I2C_GetState>
 8001980:	4603      	mov	r3, r0
 8001982:	2b20      	cmp	r3, #32
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <_Z16mpu6050_readDatav+0x30>
	{
		HAL_I2C_Mem_Read_IT(&hi2c1, ((DEVICE_ADRESS) <<1) + 1, 59, 1, dataMPU, 14);
 8001990:	230e      	movs	r3, #14
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <_Z16mpu6050_readDatav+0x3c>)
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	223b      	movs	r2, #59	@ 0x3b
 800199c:	21d1      	movs	r1, #209	@ 0xd1
 800199e:	4803      	ldr	r0, [pc, #12]	@ (80019ac <_Z16mpu6050_readDatav+0x38>)
 80019a0:	f001 ffe2 	bl	8003968 <HAL_I2C_Mem_Read_IT>
	}
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002f8 	.word	0x200002f8
 80019b0:	200004a0 	.word	0x200004a0
 80019b4:	00000000 	.word	0x00000000

080019b8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019bc:	b094      	sub	sp, #80	@ 0x50
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	// This is called when the I2C memory read operation completes
	if (hi2c->Instance == I2C1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4ab6      	ldr	r2, [pc, #728]	@ (8001ca0 <HAL_I2C_MemRxCpltCallback+0x2e8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 8183 	bne.w	8001cd4 <HAL_I2C_MemRxCpltCallback+0x31c>
		double accX, accY, accZ, gyroX, gyroY, gyroZ, elapsedTime, accRoll, accPitch;
		static double gyroAngleX = 0.0, gyroAngleY = 0.0, gyroYaw = 0.0;
		static uint32_t currentTime, previousTime;

		//Accelerometer Data (Registers 59 to 64)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2110      	movs	r1, #16
 80019d2:	48b4      	ldr	r0, [pc, #720]	@ (8001ca4 <HAL_I2C_MemRxCpltCallback+0x2ec>)
 80019d4:	f001 fb0e 	bl	8002ff4 <HAL_GPIO_WritePin>
		accX = ((int16_t)((dataMPU[ACCEL_XOUT_H] << 8) | dataMPU[ACCEL_XOUT_L]))/16384.0;
 80019d8:	4bb3      	ldr	r3, [pc, #716]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21a      	sxth	r2, r3
 80019e0:	4bb1      	ldr	r3, [pc, #708]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fda2 	bl	8000534 <__aeabi_i2d>
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4bad      	ldr	r3, [pc, #692]	@ (8001cac <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80019f6:	f7fe ff31 	bl	800085c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		//printf("Accel-X [g]: %f \n", accX);

		accY = ((int16_t)((dataMPU[ACCEL_YOUT_H] << 8) | dataMPU[ACCEL_YOUT_L]))/16384.0;
 8001a02:	4ba9      	ldr	r3, [pc, #676]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001a0c:	78db      	ldrb	r3, [r3, #3]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd8d 	bl	8000534 <__aeabi_i2d>
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4ba3      	ldr	r3, [pc, #652]	@ (8001cac <HAL_I2C_MemRxCpltCallback+0x2f4>)
 8001a20:	f7fe ff1c 	bl	800085c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		//printf("Accel-Y [g]: %f \n", accY);

		accZ = ((int16_t)((dataMPU[ACCEL_ZOUT_H] << 8) | dataMPU[ACCEL_ZOUT_L]))/16384.0;
 8001a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd78 	bl	8000534 <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b98      	ldr	r3, [pc, #608]	@ (8001cac <HAL_I2C_MemRxCpltCallback+0x2f4>)
 8001a4a:	f7fe ff07 	bl	800085c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		//printf("Accel-Z [g]: %f \n", accZ);

		//Roll and Pitch Angles from Accelerometer
		accPitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001a56:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8001a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a5a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a66:	f7fe fdcf 	bl	8000608 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a7a:	f7fe fdc5 	bl	8000608 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4640      	mov	r0, r8
 8001a84:	4649      	mov	r1, r9
 8001a86:	f7fe fc09 	bl	800029c <__adddf3>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ec43 2b17 	vmov	d7, r2, r3
 8001a92:	eeb0 0a47 	vmov.f32	s0, s14
 8001a96:	eef0 0a67 	vmov.f32	s1, s15
 8001a9a:	f00c f8ae 	bl	800dbfa <sqrt>
 8001a9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa2:	eef0 7a60 	vmov.f32	s15, s1
 8001aa6:	eeb0 1a47 	vmov.f32	s2, s14
 8001aaa:	eef0 1a67 	vmov.f32	s3, s15
 8001aae:	ec45 4b10 	vmov	d0, r4, r5
 8001ab2:	f00c f8a0 	bl	800dbf6 <atan2>
 8001ab6:	ec51 0b10 	vmov	r0, r1, d0
 8001aba:	a375      	add	r3, pc, #468	@ (adr r3, 8001c90 <HAL_I2C_MemRxCpltCallback+0x2d8>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fda2 	bl	8000608 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		//printf("Pitch: %f \n", accPitch);
		/*works only if sensor is level (small pitch)
		accRoll = atan2(accY, accZ) * 57.3;
		printf("Roll1: %f \n", accRoll);
		*/
		accRoll = atan2(accY, sqrt(accX * accX + accZ * accZ)) * 57.2958; //* 57.2958 conversion from rad to deg (180°/PI)
 8001acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ad0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ad4:	f7fe fd98 	bl	8000608 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ae4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001ae8:	f7fe fd8e 	bl	8000608 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fbd2 	bl	800029c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	ec43 2b17 	vmov	d7, r2, r3
 8001b00:	eeb0 0a47 	vmov.f32	s0, s14
 8001b04:	eef0 0a67 	vmov.f32	s1, s15
 8001b08:	f00c f877 	bl	800dbfa <sqrt>
 8001b0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b10:	eef0 7a60 	vmov.f32	s15, s1
 8001b14:	eeb0 1a47 	vmov.f32	s2, s14
 8001b18:	eef0 1a67 	vmov.f32	s3, s15
 8001b1c:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001b20:	f00c f869 	bl	800dbf6 <atan2>
 8001b24:	ec51 0b10 	vmov	r0, r1, d0
 8001b28:	a359      	add	r3, pc, #356	@ (adr r3, 8001c90 <HAL_I2C_MemRxCpltCallback+0x2d8>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd6b 	bl	8000608 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		//printf("Roll: %f \n", accRoll);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4859      	ldr	r0, [pc, #356]	@ (8001ca4 <HAL_I2C_MemRxCpltCallback+0x2ec>)
 8001b40:	f001 fa58 	bl	8002ff4 <HAL_GPIO_WritePin>
		//Temperature Data (Registers 65 and 66)

		//Gyroscope Data (Registers 67 to 72)
		currentTime = HAL_GetTick();
 8001b44:	f000 fc06 	bl	8002354 <HAL_GetTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a59      	ldr	r2, [pc, #356]	@ (8001cb0 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 8001b4c:	6013      	str	r3, [r2, #0]
		elapsedTime = (currentTime - previousTime) / 1000.0; // divided by 1000 for conversion between milliseconds and seconds
 8001b4e:	4b58      	ldr	r3, [pc, #352]	@ (8001cb0 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcdb 	bl	8000514 <__aeabi_ui2d>
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b55      	ldr	r3, [pc, #340]	@ (8001cb8 <HAL_I2C_MemRxCpltCallback+0x300>)
 8001b64:	f7fe fe7a 	bl	800085c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 2308 	strd	r2, r3, [r7, #32]

		gyroX = ((int16_t)((dataMPU[GYRO_XOUT_H] << 8) | dataMPU[GYRO_XOUT_L]))/131.0;
 8001b70:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001b72:	7a1b      	ldrb	r3, [r3, #8]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001b7a:	7a5b      	ldrb	r3, [r3, #9]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcd6 	bl	8000534 <__aeabi_i2d>
 8001b88:	a343      	add	r3, pc, #268	@ (adr r3, 8001c98 <HAL_I2C_MemRxCpltCallback+0x2e0>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fe65 	bl	800085c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9c7 2306 	strd	r2, r3, [r7, #24]
		printf("Gyro-X [°/s]: %f \n", gyroX);
 8001b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9e:	4847      	ldr	r0, [pc, #284]	@ (8001cbc <HAL_I2C_MemRxCpltCallback+0x304>)
 8001ba0:	f00d f8b4 	bl	800ed0c <iprintf>

		gyroY = ((int16_t)((dataMPU[GYRO_YOUT_H] << 8) | dataMPU[GYRO_YOUT_L]))/131.0;
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001ba6:	7a9b      	ldrb	r3, [r3, #10]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001bae:	7adb      	ldrb	r3, [r3, #11]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcbc 	bl	8000534 <__aeabi_i2d>
 8001bbc:	a336      	add	r3, pc, #216	@ (adr r3, 8001c98 <HAL_I2C_MemRxCpltCallback+0x2e0>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fe4b 	bl	800085c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		printf("Gyro-Y [°/s]: %f \n", gyroY);
 8001bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bd2:	483b      	ldr	r0, [pc, #236]	@ (8001cc0 <HAL_I2C_MemRxCpltCallback+0x308>)
 8001bd4:	f00d f89a 	bl	800ed0c <iprintf>

		gyroZ = ((int16_t)((dataMPU[GYRO_ZOUT_H] << 8) | dataMPU[GYRO_ZOUT_L]))/131.0;
 8001bd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_I2C_MemRxCpltCallback+0x2f0>)
 8001be2:	7b5b      	ldrb	r3, [r3, #13]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fca2 	bl	8000534 <__aeabi_i2d>
 8001bf0:	a329      	add	r3, pc, #164	@ (adr r3, 8001c98 <HAL_I2C_MemRxCpltCallback+0x2e0>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fe31 	bl	800085c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		printf("Gyro-Z [°/s]: %f \n", gyroZ);
 8001c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c06:	482f      	ldr	r0, [pc, #188]	@ (8001cc4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8001c08:	f00d f880 	bl	800ed0c <iprintf>

		//Angles and yaw from Gyroscope
		gyroAngleX += gyroX * elapsedTime;
 8001c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c14:	f7fe fcf8 	bl	8000608 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fb39 	bl	800029c <__adddf3>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4926      	ldr	r1, [pc, #152]	@ (8001cc8 <HAL_I2C_MemRxCpltCallback+0x310>)
 8001c30:	e9c1 2300 	strd	r2, r3, [r1]
		gyroAngleY += gyroY * elapsedTime;
 8001c34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3c:	f7fe fce4 	bl	8000608 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_I2C_MemRxCpltCallback+0x314>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	491d      	ldr	r1, [pc, #116]	@ (8001ccc <HAL_I2C_MemRxCpltCallback+0x314>)
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]
		gyroYaw += gyroZ * elapsedTime;
 8001c5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c64:	f7fe fcd0 	bl	8000608 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_I2C_MemRxCpltCallback+0x318>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fb11 	bl	800029c <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4914      	ldr	r1, [pc, #80]	@ (8001cd0 <HAL_I2C_MemRxCpltCallback+0x318>)
 8001c80:	e9c1 2300 	strd	r2, r3, [r1]

		previousTime = currentTime;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e022      	b.n	8001cd4 <HAL_I2C_MemRxCpltCallback+0x31c>
 8001c8e:	bf00      	nop
 8001c90:	c63f1412 	.word	0xc63f1412
 8001c94:	404ca5dc 	.word	0x404ca5dc
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	40606000 	.word	0x40606000
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	200004a0 	.word	0x200004a0
 8001cac:	40d00000 	.word	0x40d00000
 8001cb0:	200004c8 	.word	0x200004c8
 8001cb4:	200004cc 	.word	0x200004cc
 8001cb8:	408f4000 	.word	0x408f4000
 8001cbc:	08010e3c 	.word	0x08010e3c
 8001cc0:	08010e50 	.word	0x08010e50
 8001cc4:	08010e64 	.word	0x08010e64
 8001cc8:	200004b0 	.word	0x200004b0
 8001ccc:	200004b8 	.word	0x200004b8
 8001cd0:	200004c0 	.word	0x200004c0
	}
}
 8001cd4:	bf00      	nop
 8001cd6:	3750      	adds	r7, #80	@ 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cde:	bf00      	nop

08001ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	@ (8001dd4 <HAL_I2C_MspInit+0xa4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d13b      	bne.n	8001dca <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d6e:	23c0      	movs	r3, #192	@ 0xc0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d72:	2312      	movs	r3, #18
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4814      	ldr	r0, [pc, #80]	@ (8001ddc <HAL_I2C_MspInit+0xac>)
 8001d8a:	f000 ffaf 	bl	8002cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_I2C_MspInit+0xa8>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201f      	movs	r0, #31
 8001db0:	f000 fbdb 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001db4:	201f      	movs	r0, #31
 8001db6:	f000 fbf4 	bl	80025a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	f000 fbd3 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dc4:	2020      	movs	r0, #32
 8001dc6:	f000 fbec 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	@ 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a33      	ldr	r2, [pc, #204]	@ (8001ebc <HAL_TIM_Base_MspInit+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d144      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a31      	ldr	r2, [pc, #196]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xe8>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e16:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001e1a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e1e:	2240      	movs	r2, #64	@ 0x40
 8001e20:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e30:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e36:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001e40:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001e52:	481c      	ldr	r0, [pc, #112]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e54:	f000 fbc0 	bl	80025d8 <HAL_DMA_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001e5e:	f7ff fc9f 	bl	80017a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e68:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e74:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e7a:	e01a      	b.n	8001eb2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <HAL_TIM_Base_MspInit+0xec>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201e      	movs	r0, #30
 8001ea8:	f000 fb5f 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eac:	201e      	movs	r0, #30
 8001eae:	f000 fb78 	bl	80025a2 <HAL_NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	200003dc 	.word	0x200003dc
 8001ec8:	40026070 	.word	0x40026070
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <HAL_TIM_MspPostInit+0x68>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d11d      	bne.n	8001f2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_TIM_MspPostInit+0x6c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_TIM_MspPostInit+0x6c>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_TIM_MspPostInit+0x6c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <HAL_TIM_MspPostInit+0x70>)
 8001f2a:	f000 fedf 	bl	8002cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020400 	.word	0x40020400

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <HAL_UART_MspInit+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d133      	bne.n	8001fce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_UART_MspInit+0x98>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4809      	ldr	r0, [pc, #36]	@ (8001fe0 <HAL_UART_MspInit+0x9c>)
 8001fba:	f000 fe97 	bl	8002cec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2026      	movs	r0, #38	@ 0x26
 8001fc4:	f000 fad1 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc8:	2026      	movs	r0, #38	@ 0x26
 8001fca:	f000 faea 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	@ 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004400 	.word	0x40004400
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 f977 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <DMA1_Stream4_IRQHandler+0x10>)
 800204a:	f000 fc05 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003dc 	.word	0x200003dc

08002058 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM4_IRQHandler+0x10>)
 800205e:	f005 ff9b 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000394 	.word	0x20000394

0800206c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <I2C1_EV_IRQHandler+0x10>)
 8002072:	f001 fe61 	bl	8003d38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002f8 	.word	0x200002f8

08002080 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <I2C1_ER_IRQHandler+0x10>)
 8002086:	f001 ffaa 	bl	8003fde <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200002f8 	.word	0x200002f8

08002094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <USART2_IRQHandler+0x10>)
 800209a:	f006 fe83 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000043c 	.word	0x2000043c

080020a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <OTG_FS_IRQHandler+0x10>)
 80020ae:	f004 f812 	bl	80060d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200019b8 	.word	0x200019b8

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d6:	f00c ffb3 	bl	800f040 <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
  return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fe:	bf00      	nop
 8002100:	e7fd      	b.n	80020fe <_exit+0x12>

08002102 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e00a      	b.n	800212a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002114:	f3af 8000 	nop.w
 8002118:	4601      	mov	r1, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	60ba      	str	r2, [r7, #8]
 8002120:	b2ca      	uxtb	r2, r1
 8002122:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	dbf0      	blt.n	8002114 <_read+0x12>
  }

  return len;
 8002132:	687b      	ldr	r3, [r7, #4]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_close>:
  }
  return len;
}

int _close(int file)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002164:	605a      	str	r2, [r3, #4]
  return 0;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_isatty>:

int _isatty(int file)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f00c ff34 	bl	800f040 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20020000 	.word	0x20020000
 8002204:	00000400 	.word	0x00000400
 8002208:	200004d0 	.word	0x200004d0
 800220c:	20002208 	.word	0x20002208

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800226c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002238:	f7ff ffea 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f00c fef3 	bl	800f04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7fe fe9f 	bl	8000fa8 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800226c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002278:	080112d0 	.word	0x080112d0
  ldr r2, =_sbss
 800227c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002280:	20002208 	.word	0x20002208

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f94f 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fd10 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f967 	bl	80025be <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 f92f 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000004 	.word	0x20000004
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c
 8002350:	200004d4 	.word	0x200004d4

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200004d4 	.word	0x200004d4

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <__NVIC_SetPriorityGrouping>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	@ (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff29 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff3e 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff8e 	bl	80024a8 <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff31 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff feb6 	bl	8002354 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e099      	b.n	8002728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002614:	e00f      	b.n	8002636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002616:	f7ff fe9d 	bl	8002354 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b05      	cmp	r3, #5
 8002622:	d908      	bls.n	8002636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e078      	b.n	8002728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e8      	bne.n	8002616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_DMA_Init+0x158>)
 8002650:	4013      	ands	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	2b04      	cmp	r3, #4
 800268e:	d107      	bne.n	80026a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	4313      	orrs	r3, r2
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0307 	bic.w	r3, r3, #7
 80026b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d117      	bne.n	80026fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fa89 	bl	8002bf4 <DMA_CheckFifoParam>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2240      	movs	r2, #64	@ 0x40
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026f6:	2301      	movs	r3, #1
 80026f8:	e016      	b.n	8002728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa40 	bl	8002b88 <DMA_CalcBaseAndBitshift>
 8002708:	4603      	mov	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	223f      	movs	r2, #63	@ 0x3f
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	f010803f 	.word	0xf010803f

08002734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002742:	f7ff fe07 	bl	8002354 <HAL_GetTick>
 8002746:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2280      	movs	r2, #128	@ 0x80
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e052      	b.n	800280c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0216 	bic.w	r2, r2, #22
 8002774:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002784:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_DMA_Abort+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0208 	bic.w	r2, r2, #8
 80027a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b6:	e013      	b.n	80027e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b8:	f7ff fdcc 	bl	8002354 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d90c      	bls.n	80027e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2203      	movs	r2, #3
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e015      	b.n	800280c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e4      	bne.n	80027b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	223f      	movs	r2, #63	@ 0x3f
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d004      	beq.n	8002832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e00c      	b.n	800284c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002864:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa0 <HAL_DMA_IRQHandler+0x248>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a8e      	ldr	r2, [pc, #568]	@ (8002aa4 <HAL_DMA_IRQHandler+0x24c>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2208      	movs	r2, #8
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	2201      	movs	r2, #1
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	2204      	movs	r2, #4
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	2210      	movs	r2, #16
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d043      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03c      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	2210      	movs	r2, #16
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e01f      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e016      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	2220      	movs	r2, #32
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 808f 	beq.w	8002af8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8087 	beq.w	8002af8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d136      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0216 	bic.w	r2, r2, #22
 8002a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x1da>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	223f      	movs	r2, #63	@ 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d07e      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
        }
        return;
 8002a6e:	e079      	b.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d031      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e02c      	b.n	8002af8 <HAL_DMA_IRQHandler+0x2a0>
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e01e      	b.n	8002af8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0210 	bic.w	r2, r2, #16
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d307      	bcc.n	8002b40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f2      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x2cc>
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
 8002b62:	e000      	b.n	8002b66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b64:	bf00      	nop
    }
  }
}
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3b10      	subs	r3, #16
 8002b98:	4a14      	ldr	r2, [pc, #80]	@ (8002bec <DMA_CalcBaseAndBitshift+0x64>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ba2:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d909      	bls.n	8002bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	1d1a      	adds	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc8:	e007      	b.n	8002bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	aaaaaaab 	.word	0xaaaaaaab
 8002bf0:	08010ed8 	.word	0x08010ed8

08002bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11f      	bne.n	8002c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d856      	bhi.n	8002cc2 <DMA_CheckFifoParam+0xce>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <DMA_CheckFifoParam+0x28>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c3f 	.word	0x08002c3f
 8002c24:	08002c2d 	.word	0x08002c2d
 8002c28:	08002cc3 	.word	0x08002cc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d046      	beq.n	8002cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3c:	e043      	b.n	8002cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c46:	d140      	bne.n	8002cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4c:	e03d      	b.n	8002cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c56:	d121      	bne.n	8002c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d837      	bhi.n	8002cce <DMA_CheckFifoParam+0xda>
 8002c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <DMA_CheckFifoParam+0x70>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c7b 	.word	0x08002c7b
 8002c6c:	08002c75 	.word	0x08002c75
 8002c70:	08002c8d 	.word	0x08002c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      break;
 8002c78:	e030      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d025      	beq.n	8002cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8a:	e022      	b.n	8002cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c94:	d11f      	bne.n	8002cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c9a:	e01c      	b.n	8002cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d903      	bls.n	8002caa <DMA_CheckFifoParam+0xb6>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d003      	beq.n	8002cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca8:	e018      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      break;
 8002cae:	e015      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e00b      	b.n	8002cda <DMA_CheckFifoParam+0xe6>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e00a      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e008      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e006      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e004      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
    }
  } 
  
  return status; 
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e159      	b.n	8002fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8148 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d005      	beq.n	8002d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d130      	bne.n	8002da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d74:	2201      	movs	r2, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 0201 	and.w	r2, r3, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d017      	beq.n	8002ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d123      	bne.n	8002e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a2 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b57      	ldr	r3, [pc, #348]	@ (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e82:	4b54      	ldr	r3, [pc, #336]	@ (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8e:	4a52      	ldr	r2, [pc, #328]	@ (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a49      	ldr	r2, [pc, #292]	@ (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x202>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a48      	ldr	r2, [pc, #288]	@ (8002fe0 <HAL_GPIO_Init+0x2f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x1fe>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a47      	ldr	r2, [pc, #284]	@ (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x1fa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x1f6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a45      	ldr	r2, [pc, #276]	@ (8002fec <HAL_GPIO_Init+0x300>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x1f2>
 8002eda:	2304      	movs	r3, #4
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	@ (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a24      	ldr	r2, [pc, #144]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff0 <HAL_GPIO_Init+0x304>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f aea2 	bls.w	8002d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003010:	e003      	b.n	800301a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	041a      	lsls	r2, r3, #16
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	43d9      	mvns	r1, r3
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	400b      	ands	r3, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	619a      	str	r2, [r3, #24]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e12b      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fe54 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	@ 0x24
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c0:	f004 fd86 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 80030c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a81      	ldr	r2, [pc, #516]	@ (80032d0 <HAL_I2C_Init+0x274>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d807      	bhi.n	80030e0 <HAL_I2C_Init+0x84>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4a80      	ldr	r2, [pc, #512]	@ (80032d4 <HAL_I2C_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bf94      	ite	ls
 80030d8:	2301      	movls	r3, #1
 80030da:	2300      	movhi	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e006      	b.n	80030ee <HAL_I2C_Init+0x92>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a7d      	ldr	r2, [pc, #500]	@ (80032d8 <HAL_I2C_Init+0x27c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0e7      	b.n	80032c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a78      	ldr	r2, [pc, #480]	@ (80032dc <HAL_I2C_Init+0x280>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a6a      	ldr	r2, [pc, #424]	@ (80032d0 <HAL_I2C_Init+0x274>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d802      	bhi.n	8003130 <HAL_I2C_Init+0xd4>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3301      	adds	r3, #1
 800312e:	e009      	b.n	8003144 <HAL_I2C_Init+0xe8>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	4a69      	ldr	r2, [pc, #420]	@ (80032e0 <HAL_I2C_Init+0x284>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	3301      	adds	r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	495c      	ldr	r1, [pc, #368]	@ (80032d0 <HAL_I2C_Init+0x274>)
 8003160:	428b      	cmp	r3, r1
 8003162:	d819      	bhi.n	8003198 <HAL_I2C_Init+0x13c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e59      	subs	r1, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003178:	400b      	ands	r3, r1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_I2C_Init+0x138>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e59      	subs	r1, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fbb1 f3f3 	udiv	r3, r1, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	e051      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003194:	2304      	movs	r3, #4
 8003196:	e04f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_I2C_Init+0x168>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e012      	b.n	80031ea <HAL_I2C_Init+0x18e>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Init+0x196>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e022      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <HAL_I2C_Init+0x1bc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e58      	subs	r0, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	440b      	add	r3, r1
 8003208:	fbb0 f3f3 	udiv	r3, r0, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003216:	e00f      	b.n	8003238 <HAL_I2C_Init+0x1dc>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	0099      	lsls	r1, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6809      	ldr	r1, [r1, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6911      	ldr	r1, [r2, #16]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	4311      	orrs	r1, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	000186a0 	.word	0x000186a0
 80032d4:	001e847f 	.word	0x001e847f
 80032d8:	003d08ff 	.word	0x003d08ff
 80032dc:	431bde83 	.word	0x431bde83
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d103      	bne.n	8003302 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	817b      	strh	r3, [r7, #10]
 8003322:	460b      	mov	r3, r1
 8003324:	813b      	strh	r3, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332a:	f7ff f813 	bl	8002354 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	f040 80d9 	bne.w	80034f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2319      	movs	r3, #25
 8003344:	2201      	movs	r2, #1
 8003346:	496d      	ldr	r1, [pc, #436]	@ (80034fc <HAL_I2C_Mem_Write+0x1ec>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f002 fafd 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
 8003356:	e0cc      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Mem_Write+0x56>
 8003362:	2302      	movs	r3, #2
 8003364:	e0c5      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d007      	beq.n	800338c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2221      	movs	r2, #33	@ 0x21
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2240      	movs	r2, #64	@ 0x40
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003500 <HAL_I2C_Mem_Write+0x1f0>)
 80033cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ce:	88f8      	ldrh	r0, [r7, #6]
 80033d0:	893a      	ldrh	r2, [r7, #8]
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4603      	mov	r3, r0
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f002 f88c 	bl	80054fc <I2C_RequestMemoryWrite>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d052      	beq.n	8003490 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e081      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f002 fbc2 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d107      	bne.n	8003416 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06b      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d11b      	bne.n	8003490 <HAL_I2C_Mem_Write+0x180>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1aa      	bne.n	80033ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f002 fbb5 	bl	8005c0c <I2C_WaitOnBTFFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e016      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	00100002 	.word	0x00100002
 8003500:	ffff0000 	.word	0xffff0000

08003504 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	@ 0x30
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800351e:	f7fe ff19 	bl	8002354 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b20      	cmp	r3, #32
 800352e:	f040 8214 	bne.w	800395a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2319      	movs	r3, #25
 8003538:	2201      	movs	r2, #1
 800353a:	497b      	ldr	r1, [pc, #492]	@ (8003728 <HAL_I2C_Mem_Read+0x224>)
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f002 fa03 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
 800354a:	e207      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2C_Mem_Read+0x56>
 8003556:	2302      	movs	r3, #2
 8003558:	e200      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d007      	beq.n	8003580 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2222      	movs	r2, #34	@ 0x22
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2240      	movs	r2, #64	@ 0x40
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a5b      	ldr	r2, [pc, #364]	@ (800372c <HAL_I2C_Mem_Read+0x228>)
 80035c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035c2:	88f8      	ldrh	r0, [r7, #6]
 80035c4:	893a      	ldrh	r2, [r7, #8]
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4603      	mov	r3, r0
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f002 f828 	bl	8005628 <I2C_RequestMemoryRead>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1bc      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e190      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	2b01      	cmp	r3, #1
 8003618:	d11b      	bne.n	8003652 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e170      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	2b02      	cmp	r3, #2
 8003658:	d11b      	bne.n	8003692 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	e150      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036a8:	e144      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	f200 80f1 	bhi.w	8003896 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d123      	bne.n	8003704 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f002 fb1d 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e145      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003702:	e117      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	2b02      	cmp	r3, #2
 800370a:	d14e      	bne.n	80037aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003712:	2200      	movs	r2, #0
 8003714:	4906      	ldr	r1, [pc, #24]	@ (8003730 <HAL_I2C_Mem_Read+0x22c>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f002 f916 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e11a      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
 8003726:	bf00      	nop
 8003728:	00100002 	.word	0x00100002
 800372c:	ffff0000 	.word	0xffff0000
 8003730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a8:	e0c4      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	2200      	movs	r2, #0
 80037b2:	496c      	ldr	r1, [pc, #432]	@ (8003964 <HAL_I2C_Mem_Read+0x460>)
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f002 f8c7 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cb      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	2200      	movs	r2, #0
 800380e:	4955      	ldr	r1, [pc, #340]	@ (8003964 <HAL_I2C_Mem_Read+0x460>)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f002 f899 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e09d      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003894:	e04e      	b.n	8003934 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003898:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f002 fa30 	bl	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e058      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d124      	bne.n	8003934 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003900:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f aeb6 	bne.w	80036aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3728      	adds	r7, #40	@ 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	00010004 	.word	0x00010004

08003968 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4603      	mov	r3, r0
 8003978:	817b      	strh	r3, [r7, #10]
 800397a:	460b      	mov	r3, r1
 800397c:	813b      	strh	r3, [r7, #8]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	f040 8096 	bne.w	8003ac0 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003994:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad0 <HAL_I2C_Mem_Read_IT+0x168>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad4 <HAL_I2C_Mem_Read_IT+0x16c>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	0a1a      	lsrs	r2, r3, #8
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009a      	lsls	r2, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d112      	bne.n	80039e0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
 80039de:	e070      	b.n	8003ac2 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d0df      	beq.n	80039ae <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_I2C_Mem_Read_IT+0x94>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e062      	b.n	8003ac2 <HAL_I2C_Mem_Read_IT+0x15a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d007      	beq.n	8003a22 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	@ 0x22
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2240      	movs	r2, #64	@ 0x40
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_I2C_Mem_Read_IT+0x170>)
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a64:	897a      	ldrh	r2, [r7, #10]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003a6a:	893a      	ldrh	r2, [r7, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003aba:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	14f8b589 	.word	0x14f8b589
 8003ad8:	ffff0000 	.word	0xffff0000

08003adc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003aec:	f7fe fc32 	bl	8002354 <HAL_GetTick>
 8003af0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	f040 8111 	bne.w	8003d26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4988      	ldr	r1, [pc, #544]	@ (8003d30 <HAL_I2C_IsDeviceReady+0x254>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 ff1a 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e104      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2C_IsDeviceReady+0x50>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0fd      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d007      	beq.n	8003b52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2224      	movs	r2, #36	@ 0x24
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a70      	ldr	r2, [pc, #448]	@ (8003d34 <HAL_I2C_IsDeviceReady+0x258>)
 8003b74:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f001 fed8 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bac:	d103      	bne.n	8003bb6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0b6      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bba:	897b      	ldrh	r3, [r7, #10]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fbc3 	bl	8002354 <HAL_GetTick>
 8003bce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bfe:	e025      	b.n	8003c4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c00:	f7fe fba8 	bl	8002354 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d302      	bcc.n	8003c16 <HAL_I2C_IsDeviceReady+0x13a>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	22a0      	movs	r2, #160	@ 0xa0
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c56:	d005      	beq.n	8003c64 <HAL_I2C_IsDeviceReady+0x188>
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <HAL_I2C_IsDeviceReady+0x188>
 8003c5e:	7dbb      	ldrb	r3, [r7, #22]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0cd      	beq.n	8003c00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d129      	bne.n	8003cce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2319      	movs	r3, #25
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4921      	ldr	r1, [pc, #132]	@ (8003d30 <HAL_I2C_IsDeviceReady+0x254>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f001 fe4c 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e036      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e02c      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2319      	movs	r3, #25
 8003cee:	2201      	movs	r2, #1
 8003cf0:	490f      	ldr	r1, [pc, #60]	@ (8003d30 <HAL_I2C_IsDeviceReady+0x254>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f001 fe28 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e012      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f4ff af32 	bcc.w	8003b76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	00100002 	.word	0x00100002
 8003d34:	ffff0000 	.word	0xffff0000

08003d38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d003      	beq.n	8003d70 <HAL_I2C_EV_IRQHandler+0x38>
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	f040 80b1 	bne.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d90:	d003      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x62>
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d98:	d101      	bne.n	8003d9e <HAL_I2C_EV_IRQHandler+0x66>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x68>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f000 8114 	beq.w	8003fce <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x90>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f002 f82c 	bl	8005e18 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fd7e 	bl	80048c2 <I2C_Master_SB>
 8003dc6:	e083      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0xac>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fdf6 	bl	80049ce <I2C_Master_ADD10>
 8003de2:	e075      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_I2C_EV_IRQHandler+0xc8>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fe12 	bl	8004a22 <I2C_Master_ADDR>
 8003dfe:	e067      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d036      	beq.n	8003e78 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e18:	f000 80db 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9da 	bl	80041f4 <I2C_MasterTransmit_TXE>
 8003e40:	e046      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80c2 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80bc 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e5a:	7bbb      	ldrb	r3, [r7, #14]
 8003e5c:	2b21      	cmp	r3, #33	@ 0x21
 8003e5e:	d103      	bne.n	8003e68 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa63 	bl	800432c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e66:	e0b4      	b.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b40      	cmp	r3, #64	@ 0x40
 8003e6c:	f040 80b1 	bne.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fad1 	bl	8004418 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	e0ac      	b.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e86:	f000 80a4 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_I2C_EV_IRQHandler+0x178>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_I2C_EV_IRQHandler+0x178>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fb4d 	bl	8004548 <I2C_MasterReceive_RXNE>
 8003eae:	e00f      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 808b 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8085 	beq.w	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fc05 	bl	80046d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ece:	e080      	b.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003ed0:	e07f      	b.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e007      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d011      	beq.n	8003f22 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00c      	beq.n	8003f22 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 ffd0 	bl	8004ec0 <I2C_Slave_ADDR>
 8003f20:	e05a      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x206>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f001 f80a 	bl	8004f50 <I2C_Slave_STOPF>
 8003f3c:	e04c      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	2b21      	cmp	r3, #33	@ 0x21
 8003f42:	d002      	beq.n	8003f4a <HAL_I2C_EV_IRQHandler+0x212>
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	2b29      	cmp	r3, #41	@ 0x29
 8003f48:	d120      	bne.n	8003f8c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_I2C_EV_IRQHandler+0x238>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_I2C_EV_IRQHandler+0x238>
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 feeb 	bl	8004d44 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f6e:	e032      	b.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02d      	beq.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x29e>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d028      	beq.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 ff1a 	bl	8004dbe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f8a:	e024      	b.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 ff28 	bl	8004e00 <I2C_SlaveReceive_RXNE>
 8003fb0:	e012      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 ff58 	bl	8004e7c <I2C_SlaveReceive_BTF>
 8003fcc:	e004      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fd6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08a      	sub	sp, #40	@ 0x28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004000:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_I2C_ER_IRQHandler+0x4a>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004026:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0x70>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800404c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03e      	beq.n	80040d6 <HAL_I2C_ER_IRQHandler+0xf8>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d039      	beq.n	80040d6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004062:	7efb      	ldrb	r3, [r7, #27]
 8004064:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800407c:	7ebb      	ldrb	r3, [r7, #26]
 800407e:	2b20      	cmp	r3, #32
 8004080:	d112      	bne.n	80040a8 <HAL_I2C_ER_IRQHandler+0xca>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10f      	bne.n	80040a8 <HAL_I2C_ER_IRQHandler+0xca>
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b21      	cmp	r3, #33	@ 0x21
 800408c:	d008      	beq.n	80040a0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b29      	cmp	r3, #41	@ 0x29
 8004092:	d005      	beq.n	80040a0 <HAL_I2C_ER_IRQHandler+0xc2>
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b28      	cmp	r3, #40	@ 0x28
 8004098:	d106      	bne.n	80040a8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b21      	cmp	r3, #33	@ 0x21
 800409e:	d103      	bne.n	80040a8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 f885 	bl	80051b0 <I2C_Slave_AF>
 80040a6:	e016      	b.n	80040d6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040ba:	7efb      	ldrb	r3, [r7, #27]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d002      	beq.n	80040c6 <HAL_I2C_ER_IRQHandler+0xe8>
 80040c0:	7efb      	ldrb	r3, [r7, #27]
 80040c2:	2b40      	cmp	r3, #64	@ 0x40
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <HAL_I2C_ER_IRQHandler+0x11e>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80040fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f8c2 	bl	8005298 <I2C_ITError>
  }
}
 8004114:	bf00      	nop
 8004116:	3728      	adds	r7, #40	@ 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
 8004178:	4613      	mov	r3, r2
 800417a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e6:	b2db      	uxtb	r3, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004202:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800420a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d150      	bne.n	80042bc <I2C_MasterTransmit_TXE+0xc8>
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b21      	cmp	r3, #33	@ 0x21
 800421e:	d14d      	bne.n	80042bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d01d      	beq.n	8004262 <I2C_MasterTransmit_TXE+0x6e>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b20      	cmp	r3, #32
 800422a:	d01a      	beq.n	8004262 <I2C_MasterTransmit_TXE+0x6e>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004232:	d016      	beq.n	8004262 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004242:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2211      	movs	r2, #17
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff5e 	bl	800411c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004260:	e060      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004270:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004280:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	d107      	bne.n	80042ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff79 	bl	800419c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042aa:	e03b      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff31 	bl	800411c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042ba:	e033      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b21      	cmp	r3, #33	@ 0x21
 80042c0:	d005      	beq.n	80042ce <I2C_MasterTransmit_TXE+0xda>
 80042c2:	7bbb      	ldrb	r3, [r7, #14]
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d12d      	bne.n	8004324 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b22      	cmp	r3, #34	@ 0x22
 80042cc:	d12a      	bne.n	8004324 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042e8:	e01c      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d103      	bne.n	80042fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f88e 	bl	8004418 <I2C_MemoryTransmit_TXE_BTF>
}
 80042fc:	e012      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004322:	e7ff      	b.n	8004324 <I2C_MasterTransmit_TXE+0x130>
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b21      	cmp	r3, #33	@ 0x21
 8004344:	d164      	bne.n	8004410 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004374:	e04c      	b.n	8004410 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b08      	cmp	r3, #8
 800437a:	d01d      	beq.n	80043b8 <I2C_MasterTransmit_BTF+0x8c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d01a      	beq.n	80043b8 <I2C_MasterTransmit_BTF+0x8c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004388:	d016      	beq.n	80043b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004398:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2211      	movs	r2, #17
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff feb3 	bl	800411c <HAL_I2C_MasterTxCpltCallback>
}
 80043b6:	e02b      	b.n	8004410 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d107      	bne.n	8004402 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fece 	bl	800419c <HAL_I2C_MemTxCpltCallback>
}
 8004400:	e006      	b.n	8004410 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe86 	bl	800411c <HAL_I2C_MasterTxCpltCallback>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004426:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11d      	bne.n	800446c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10b      	bne.n	8004450 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	1c9a      	adds	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800444e:	e077      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004454:	b29b      	uxth	r3, r3
 8004456:	121b      	asrs	r3, r3, #8
 8004458:	b2da      	uxtb	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800446a:	e069      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10b      	bne.n	800448c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	b2da      	uxtb	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800448a:	e059      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	2b02      	cmp	r3, #2
 8004492:	d152      	bne.n	800453a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b22      	cmp	r3, #34	@ 0x22
 8004498:	d10d      	bne.n	80044b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044b4:	e044      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b21      	cmp	r3, #33	@ 0x21
 80044c4:	d112      	bne.n	80044ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044ea:	e029      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d124      	bne.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b21      	cmp	r3, #33	@ 0x21
 80044fa:	d121      	bne.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800450a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800451a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fe32 	bl	800419c <HAL_I2C_MemTxCpltCallback>
}
 8004538:	e002      	b.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe fed2 	bl	80032e4 <I2C_Flush_DR>
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	@ 0x22
 800455a:	f040 80b9 	bne.w	80046d0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d921      	bls.n	80045b6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b03      	cmp	r3, #3
 80045a0:	f040 8096 	bne.w	80046d0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80045b4:	e08c      	b.n	80046d0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d07f      	beq.n	80046be <I2C_MasterReceive_RXNE+0x176>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d002      	beq.n	80045ca <I2C_MasterReceive_RXNE+0x82>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d179      	bne.n	80046be <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 fb66 	bl	8005c9c <I2C_WaitOnSTOPRequestThroughIT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14c      	bne.n	8004670 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d10a      	bne.n	8004646 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd f9ba 	bl	80019b8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004644:	e044      	b.n	80046d0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d002      	beq.n	800465a <I2C_MasterReceive_RXNE+0x112>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d103      	bne.n	8004662 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004660:	e002      	b.n	8004668 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2212      	movs	r2, #18
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fd61 	bl	8004130 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800466e:	e02f      	b.n	80046d0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fd7a 	bl	80041b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046bc:	e008      	b.n	80046d0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046cc:	605a      	str	r2, [r3, #4]
}
 80046ce:	e7ff      	b.n	80046d0 <I2C_MasterReceive_RXNE+0x188>
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d11b      	bne.n	8004728 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004726:	e0c8      	b.n	80048ba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b03      	cmp	r3, #3
 8004730:	d129      	bne.n	8004786 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004740:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d00a      	beq.n	800475e <I2C_MasterReceive_BTF+0x86>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d007      	beq.n	800475e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800475c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004784:	e099      	b.n	80048ba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	f040 8081 	bne.w	8004894 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <I2C_MasterReceive_BTF+0xc6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b10      	cmp	r3, #16
 800479c:	d108      	bne.n	80047b0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e019      	b.n	80047e4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d002      	beq.n	80047bc <I2C_MasterReceive_BTF+0xe4>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d108      	bne.n	80047ce <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e00a      	b.n	80047e4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d007      	beq.n	80047e4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800483e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d10a      	bne.n	800486a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd f8a8 	bl	80019b8 <HAL_I2C_MemRxCpltCallback>
}
 8004868:	e027      	b.n	80048ba <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d002      	beq.n	800487e <I2C_MasterReceive_BTF+0x1a6>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b20      	cmp	r3, #32
 800487c:	d103      	bne.n	8004886 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
 8004884:	e002      	b.n	800488c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2212      	movs	r2, #18
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fc4f 	bl	8004130 <HAL_I2C_MasterRxCpltCallback>
}
 8004892:	e012      	b.n	80048ba <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b40      	cmp	r3, #64	@ 0x40
 80048d4:	d117      	bne.n	8004906 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048f0:	e067      	b.n	80049c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]
}
 8004904:	e05d      	b.n	80049c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800490e:	d133      	bne.n	8004978 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b21      	cmp	r3, #33	@ 0x21
 800491a:	d109      	bne.n	8004930 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e008      	b.n	8004942 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <I2C_Master_SB+0x92>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d032      	beq.n	80049c2 <I2C_Master_SB+0x100>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d02d      	beq.n	80049c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004974:	605a      	str	r2, [r3, #4]
}
 8004976:	e024      	b.n	80049c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10e      	bne.n	800499e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	b29b      	uxth	r3, r3
 8004986:	11db      	asrs	r3, r3, #7
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 0306 	and.w	r3, r3, #6
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f063 030f 	orn	r3, r3, #15
 8004994:	b2da      	uxtb	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]
}
 800499c:	e011      	b.n	80049c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10d      	bne.n	80049c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	11db      	asrs	r3, r3, #7
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 0306 	and.w	r3, r3, #6
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f063 030e 	orn	r3, r3, #14
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <I2C_Master_ADD10+0x26>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <I2C_Master_ADD10+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a14:	605a      	str	r2, [r3, #4]
  }
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b091      	sub	sp, #68	@ 0x44
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	@ 0x22
 8004a4a:	f040 8169 	bne.w	8004d20 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <I2C_Master_ADDR+0x54>
 8004a56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	d10b      	bne.n	8004a76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	e160      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <I2C_Master_ADDR+0x98>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a86:	d118      	bne.n	8004aba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ab8:	e13e      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d113      	bne.n	8004aec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e115      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	f040 808a 	bne.w	8004c0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004afe:	d137      	bne.n	8004b70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b1e:	d113      	bne.n	8004b48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	e0e7      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e0d3      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d02e      	beq.n	8004bd4 <I2C_Master_ADDR+0x1b2>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d02b      	beq.n	8004bd4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7e:	2b12      	cmp	r3, #18
 8004b80:	d102      	bne.n	8004b88 <I2C_Master_ADDR+0x166>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d125      	bne.n	8004bd4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d00e      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d00b      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d008      	beq.n	8004bac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	e0a1      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e085      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d14d      	bne.n	8004cb2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d016      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d013      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d010      	beq.n	8004c4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e007      	b.n	8004c5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c68:	d117      	bne.n	8004c9a <I2C_Master_ADDR+0x278>
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c70:	d00b      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d008      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d005      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d002      	beq.n	8004c8a <I2C_Master_ADDR+0x268>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d107      	bne.n	8004c9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	e032      	b.n	8004d18 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cd0:	d117      	bne.n	8004d02 <I2C_Master_ADDR+0x2e0>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cd8:	d00b      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d008      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d005      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d002      	beq.n	8004cf2 <I2C_Master_ADDR+0x2d0>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d107      	bne.n	8004d02 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d1e:	e00b      	b.n	8004d38 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	e7ff      	b.n	8004d38 <I2C_Master_ADDR+0x316>
 8004d38:	bf00      	nop
 8004d3a:	3744      	adds	r7, #68	@ 0x44
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02b      	beq.n	8004db6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d114      	bne.n	8004db6 <I2C_SlaveTransmit_TXE+0x72>
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b29      	cmp	r3, #41	@ 0x29
 8004d90:	d111      	bne.n	8004db6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2221      	movs	r2, #33	@ 0x21
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2228      	movs	r2, #40	@ 0x28
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff f9c7 	bl	8004144 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d011      	beq.n	8004df4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02c      	beq.n	8004e74 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d114      	bne.n	8004e74 <I2C_SlaveReceive_RXNE+0x74>
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e4e:	d111      	bne.n	8004e74 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2222      	movs	r2, #34	@ 0x22
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2228      	movs	r2, #40	@ 0x28
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff f972 	bl	8004158 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004eda:	2b28      	cmp	r3, #40	@ 0x28
 8004edc:	d125      	bne.n	8004f2a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	81bb      	strh	r3, [r7, #12]
 8004f0c:	e002      	b.n	8004f14 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f1c:	89ba      	ldrh	r2, [r7, #12]
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff f922 	bl	800416c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f28:	e00e      	b.n	8004f48 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f70:	2300      	movs	r3, #0
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fac:	d172      	bne.n	8005094 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b22      	cmp	r3, #34	@ 0x22
 8004fb2:	d002      	beq.n	8004fba <I2C_Slave_STOPF+0x6a>
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb8:	d135      	bne.n	8005026 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f043 0204 	orr.w	r2, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fdba 	bl	8002b6c <HAL_DMA_GetState>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d049      	beq.n	8005092 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	4a69      	ldr	r2, [pc, #420]	@ (80051a8 <I2C_Slave_STOPF+0x258>)
 8005004:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd fc02 	bl	8002814 <HAL_DMA_Abort_IT>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03d      	beq.n	8005092 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005024:	e035      	b.n	8005092 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005058:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fd84 	bl	8002b6c <HAL_DMA_GetState>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d014      	beq.n	8005094 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506e:	4a4e      	ldr	r2, [pc, #312]	@ (80051a8 <I2C_Slave_STOPF+0x258>)
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fbcc 	bl	8002814 <HAL_DMA_Abort_IT>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	e000      	b.n	8005094 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005092:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d03e      	beq.n	800511c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d112      	bne.n	80050d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b40      	cmp	r3, #64	@ 0x40
 80050de:	d112      	bne.n	8005106 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8b7 	bl	8005298 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800512a:	e039      	b.n	80051a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005130:	d109      	bne.n	8005146 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2228      	movs	r2, #40	@ 0x28
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff f809 	bl	8004158 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b28      	cmp	r3, #40	@ 0x28
 8005150:	d111      	bne.n	8005176 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <I2C_Slave_STOPF+0x25c>)
 8005156:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff f80a 	bl	8004188 <HAL_I2C_ListenCpltCallback>
}
 8005174:	e014      	b.n	80051a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	2b22      	cmp	r3, #34	@ 0x22
 800517c:	d002      	beq.n	8005184 <I2C_Slave_STOPF+0x234>
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b22      	cmp	r3, #34	@ 0x22
 8005182:	d10d      	bne.n	80051a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fe ffdc 	bl	8004158 <HAL_I2C_SlaveRxCpltCallback>
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	080057f9 	.word	0x080057f9
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d002      	beq.n	80051d2 <I2C_Slave_AF+0x22>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d129      	bne.n	8005226 <I2C_Slave_AF+0x76>
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b28      	cmp	r3, #40	@ 0x28
 80051d6:	d126      	bne.n	8005226 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2e      	ldr	r2, [pc, #184]	@ (8005294 <I2C_Slave_AF+0xe4>)
 80051dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005206:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fe ffb2 	bl	8004188 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005224:	e031      	b.n	800528a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	2b21      	cmp	r3, #33	@ 0x21
 800522a:	d129      	bne.n	8005280 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a19      	ldr	r2, [pc, #100]	@ (8005294 <I2C_Slave_AF+0xe4>)
 8005230:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2221      	movs	r2, #33	@ 0x21
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005256:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005260:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005270:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fe f836 	bl	80032e4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fe ff63 	bl	8004144 <HAL_I2C_SlaveTxCpltCallback>
}
 800527e:	e004      	b.n	800528a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005288:	615a      	str	r2, [r3, #20]
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	ffff0000 	.word	0xffff0000

08005298 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d002      	beq.n	80052bc <I2C_ITError+0x24>
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d10a      	bne.n	80052d2 <I2C_ITError+0x3a>
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b22      	cmp	r3, #34	@ 0x22
 80052c0:	d107      	bne.n	80052d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052d8:	2b28      	cmp	r3, #40	@ 0x28
 80052da:	d107      	bne.n	80052ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2228      	movs	r2, #40	@ 0x28
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052ea:	e015      	b.n	8005318 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052fa:	d00a      	beq.n	8005312 <I2C_ITError+0x7a>
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b60      	cmp	r3, #96	@ 0x60
 8005300:	d007      	beq.n	8005312 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005326:	d162      	bne.n	80053ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005336:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d020      	beq.n	8005388 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	4a6a      	ldr	r2, [pc, #424]	@ (80054f4 <I2C_ITError+0x25c>)
 800534c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd fa5e 	bl	8002814 <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8089 	beq.w	8005472 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005382:	4610      	mov	r0, r2
 8005384:	4798      	blx	r3
 8005386:	e074      	b.n	8005472 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	4a59      	ldr	r2, [pc, #356]	@ (80054f4 <I2C_ITError+0x25c>)
 800538e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	4618      	mov	r0, r3
 8005396:	f7fd fa3d 	bl	8002814 <HAL_DMA_Abort_IT>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d068      	beq.n	8005472 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053aa:	2b40      	cmp	r3, #64	@ 0x40
 80053ac:	d10b      	bne.n	80053c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
 80053ec:	e041      	b.n	8005472 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b60      	cmp	r3, #96	@ 0x60
 80053f8:	d125      	bne.n	8005446 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005412:	2b40      	cmp	r3, #64	@ 0x40
 8005414:	d10b      	bne.n	800542e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0201 	bic.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fe fec0 	bl	80041c4 <HAL_I2C_AbortCpltCallback>
 8005444:	e015      	b.n	8005472 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d10b      	bne.n	800546c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fe fe9f 	bl	80041b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d113      	bne.n	80054ec <I2C_ITError+0x254>
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b28      	cmp	r3, #40	@ 0x28
 80054c8:	d110      	bne.n	80054ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0a      	ldr	r2, [pc, #40]	@ (80054f8 <I2C_ITError+0x260>)
 80054ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fe fe4e 	bl	8004188 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	080057f9 	.word	0x080057f9
 80054f8:	ffff0000 	.word	0xffff0000

080054fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2200      	movs	r2, #0
 800552e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fa08 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554c:	d103      	bne.n	8005556 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e05f      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	492d      	ldr	r1, [pc, #180]	@ (8005624 <I2C_RequestMemoryWrite+0x128>)
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fa63 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e04c      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 faee 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d107      	bne.n	80055be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02b      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c8:	893b      	ldrh	r3, [r7, #8]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	e021      	b.n	8005618 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055d4:	893b      	ldrh	r3, [r7, #8]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e4:	6a39      	ldr	r1, [r7, #32]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fac8 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d107      	bne.n	800560a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e005      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800560e:	893b      	ldrh	r3, [r7, #8]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	00010002 	.word	0x00010002

08005628 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005650:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2200      	movs	r2, #0
 800566a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f96a 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005688:	d103      	bne.n	8005692 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005690:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0aa      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	4952      	ldr	r1, [pc, #328]	@ (80057f4 <I2C_RequestMemoryRead+0x1cc>)
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f9c5 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e097      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	6a39      	ldr	r1, [r7, #32]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa50 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d107      	bne.n	80056fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e076      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005704:	893b      	ldrh	r3, [r7, #8]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]
 800570e:	e021      	b.n	8005754 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005710:	893b      	ldrh	r3, [r7, #8]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	b29b      	uxth	r3, r3
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fa2a 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	2b04      	cmp	r3, #4
 8005734:	d107      	bne.n	8005746 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e050      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800574a:	893b      	ldrh	r3, [r7, #8]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005756:	6a39      	ldr	r1, [r7, #32]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fa0f 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	2b04      	cmp	r3, #4
 800576a:	d107      	bne.n	800577c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e035      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800578e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2200      	movs	r2, #0
 8005798:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f8d3 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b6:	d103      	bne.n	80057c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e013      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057c4:	897b      	ldrh	r3, [r7, #10]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	4906      	ldr	r1, [pc, #24]	@ (80057f4 <I2C_RequestMemoryRead+0x1cc>)
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f92e 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	00010002 	.word	0x00010002

080057f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005810:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005812:	4b4b      	ldr	r3, [pc, #300]	@ (8005940 <I2C_DMAAbort+0x148>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	4a4a      	ldr	r2, [pc, #296]	@ (8005944 <I2C_DMAAbort+0x14c>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	0a1a      	lsrs	r2, r3, #8
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00da      	lsls	r2, r3, #3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800583e:	e00a      	b.n	8005856 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3b01      	subs	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005854:	d0ea      	beq.n	800582c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	2200      	movs	r2, #0
 8005864:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	2200      	movs	r2, #0
 8005874:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005884:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2200      	movs	r2, #0
 800588a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005898:	2200      	movs	r2, #0
 800589a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2200      	movs	r2, #0
 80058aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b60      	cmp	r3, #96	@ 0x60
 80058c6:	d10e      	bne.n	80058e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f7fe fc70 	bl	80041c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058e4:	e027      	b.n	8005936 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058e6:	7cfb      	ldrb	r3, [r7, #19]
 80058e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058ec:	2b28      	cmp	r3, #40	@ 0x28
 80058ee:	d117      	bne.n	8005920 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800590e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2228      	movs	r2, #40	@ 0x28
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800591e:	e007      	b.n	8005930 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005930:	6978      	ldr	r0, [r7, #20]
 8005932:	f7fe fc3d 	bl	80041b0 <HAL_I2C_ErrorCallback>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000004 	.word	0x20000004
 8005944:	14f8b589 	.word	0x14f8b589

08005948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005958:	e048      	b.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d044      	beq.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fc fcf7 	bl	8002354 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d139      	bne.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10d      	bne.n	800599e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	43da      	mvns	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4013      	ands	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	e00c      	b.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	43da      	mvns	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4013      	ands	r3, r2
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d116      	bne.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e023      	b.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10d      	bne.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0xca>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	43da      	mvns	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	e00c      	b.n	8005a2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	43da      	mvns	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d093      	beq.n	800595a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a4a:	e071      	b.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5a:	d123      	bne.n	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	f043 0204 	orr.w	r2, r3, #4
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e067      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d041      	beq.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fc fc52 	bl	8002354 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d136      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10c      	bne.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e00b      	b.n	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e021      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d10c      	bne.n	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	43da      	mvns	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4013      	ands	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e00b      	b.n	8005b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af6d 	bne.w	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b88:	e034      	b.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f915 	bl	8005dba <I2C_IsAcknowledgeFailed>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e034      	b.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d028      	beq.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fc fbd7 	bl	8002354 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11d      	bne.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d016      	beq.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	d1c3      	bne.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c18:	e034      	b.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8cd 	bl	8005dba <I2C_IsAcknowledgeFailed>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e034      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d028      	beq.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fc fb8f 	bl	8002354 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11d      	bne.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d016      	beq.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e007      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d1c3      	bne.n	8005c1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ca8:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	08db      	lsrs	r3, r3, #3
 8005cae:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	0a1a      	lsrs	r2, r3, #8
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e008      	b.n	8005cec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce8:	d0e9      	beq.n	8005cbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	14f8b589 	.word	0x14f8b589

08005d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d0c:	e049      	b.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d119      	bne.n	8005d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0210 	mvn.w	r2, #16
 8005d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e030      	b.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fc fb00 	bl	8002354 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11d      	bne.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d016      	beq.n	8005da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e007      	b.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	d1ae      	bne.n	8005d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd0:	d11b      	bne.n	8005e0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e28:	d103      	bne.n	8005e32 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e30:	e007      	b.n	8005e42 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e3a:	d102      	bne.n	8005e42 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af02      	add	r7, sp, #8
 8005e54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e101      	b.n	8006064 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f007 fba2 	bl	800d5c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2203      	movs	r2, #3
 8005e84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e8e:	d102      	bne.n	8005e96 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f003 ffef 	bl	8009e7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7c1a      	ldrb	r2, [r3, #16]
 8005ea8:	f88d 2000 	strb.w	r2, [sp]
 8005eac:	3304      	adds	r3, #4
 8005eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb0:	f003 fece 	bl	8009c50 <USB_CoreInit>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0ce      	b.n	8006064 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f003 ffe7 	bl	8009ea0 <USB_SetCurrentMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0bf      	b.n	8006064 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
 8005ee8:	e04a      	b.n	8005f80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005eea:	7bfa      	ldrb	r2, [r7, #15]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3315      	adds	r3, #21
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005efe:	7bfa      	ldrb	r2, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	7bfa      	ldrb	r2, [r7, #15]
 8005f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	b298      	uxth	r0, r3
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	332e      	adds	r3, #46	@ 0x2e
 8005f26:	4602      	mov	r2, r0
 8005f28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3318      	adds	r3, #24
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	331c      	adds	r3, #28
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f52:	7bfa      	ldrb	r2, [r7, #15]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	3320      	adds	r3, #32
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	3324      	adds	r3, #36	@ 0x24
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	791b      	ldrb	r3, [r3, #4]
 8005f84:	7bfa      	ldrb	r2, [r7, #15]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d3af      	bcc.n	8005eea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
 8005f8e:	e044      	b.n	800601a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fbc:	7bfa      	ldrb	r2, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3301      	adds	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	791b      	ldrb	r3, [r3, #4]
 800601e:	7bfa      	ldrb	r2, [r7, #15]
 8006020:	429a      	cmp	r2, r3
 8006022:	d3b5      	bcc.n	8005f90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7c1a      	ldrb	r2, [r3, #16]
 800602c:	f88d 2000 	strb.w	r2, [sp]
 8006030:	3304      	adds	r3, #4
 8006032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006034:	f003 ff80 	bl	8009f38 <USB_DevInit>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e00c      	b.n	8006064 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f004 ffca 	bl	800aff6 <USB_DevDisconnect>

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_PCD_Start+0x1c>
 8006084:	2302      	movs	r3, #2
 8006086:	e022      	b.n	80060ce <HAL_PCD_Start+0x62>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f003 fed1 	bl	8009e5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 ff78 	bl	800afb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060d6:	b590      	push	{r4, r7, lr}
 80060d8:	b08d      	sub	sp, #52	@ 0x34
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f005 f836 	bl	800b15e <USB_GetMode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 848c 	bne.w	8006a12 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f004 ff9a 	bl	800b038 <USB_ReadInterrupts>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8482 	beq.w	8006a10 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f004 ff87 	bl	800b038 <USB_ReadInterrupts>
 800612a:	4603      	mov	r3, r0
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d107      	bne.n	8006144 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f002 0202 	and.w	r2, r2, #2
 8006142:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f004 ff75 	bl	800b038 <USB_ReadInterrupts>
 800614e:	4603      	mov	r3, r0
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d161      	bne.n	800621c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0210 	bic.w	r2, r2, #16
 8006166:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	3304      	adds	r3, #4
 8006186:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	0c5b      	lsrs	r3, r3, #17
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	2b02      	cmp	r3, #2
 8006192:	d124      	bne.n	80061de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d035      	beq.n	800620c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a38      	ldr	r0, [r7, #32]
 80061b4:	f004 fdac 	bl	800ad10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061c4:	441a      	add	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d6:	441a      	add	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	615a      	str	r2, [r3, #20]
 80061dc:	e016      	b.n	800620c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	0c5b      	lsrs	r3, r3, #17
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	d110      	bne.n	800620c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061f0:	2208      	movs	r2, #8
 80061f2:	4619      	mov	r1, r3
 80061f4:	6a38      	ldr	r0, [r7, #32]
 80061f6:	f004 fd8b 	bl	800ad10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006206:	441a      	add	r2, r3
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0210 	orr.w	r2, r2, #16
 800621a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f004 ff09 	bl	800b038 <USB_ReadInterrupts>
 8006226:	4603      	mov	r3, r0
 8006228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006230:	f040 80a7 	bne.w	8006382 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f004 ff0e 	bl	800b05e <USB_ReadDevAllOutEpInterrupt>
 8006242:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006244:	e099      	b.n	800637a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 808e 	beq.w	800636e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f004 ff32 	bl	800b0c6 <USB_ReadDevOutEPInterrupt>
 8006262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627a:	461a      	mov	r2, r3
 800627c:	2301      	movs	r3, #1
 800627e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fea4 	bl	8006fd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00c      	beq.n	80062ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	2308      	movs	r3, #8
 80062a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80062a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 ff7a 	bl	80071a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	2310      	movs	r3, #16
 80062c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d030      	beq.n	8006334 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d109      	bne.n	80062f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4413      	add	r3, r2
 8006304:	3304      	adds	r3, #4
 8006306:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	78db      	ldrb	r3, [r3, #3]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d108      	bne.n	8006322 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	b2db      	uxtb	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f007 fa4d 	bl	800d7bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632e:	461a      	mov	r2, r3
 8006330:	2302      	movs	r3, #2
 8006332:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	461a      	mov	r2, r3
 800634c:	2320      	movs	r3, #32
 800634e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006366:	461a      	mov	r2, r3
 8006368:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800636c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	3301      	adds	r3, #1
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	f47f af62 	bne.w	8006246 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f004 fe56 	bl	800b038 <USB_ReadInterrupts>
 800638c:	4603      	mov	r3, r0
 800638e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006396:	f040 80db 	bne.w	8006550 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 fe77 	bl	800b092 <USB_ReadDevAllInEpInterrupt>
 80063a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80063aa:	e0cd      	b.n	8006548 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80c2 	beq.w	800653c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f004 fe9d 	bl	800b102 <USB_ReadDevInEPInterrupt>
 80063c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d057      	beq.n	8006484 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	2201      	movs	r2, #1
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063f4:	4013      	ands	r3, r2
 80063f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	461a      	mov	r2, r3
 8006406:	2301      	movs	r3, #1
 8006408:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	799b      	ldrb	r3, [r3, #6]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d132      	bne.n	8006478 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	3320      	adds	r3, #32
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4403      	add	r3, r0
 8006432:	331c      	adds	r3, #28
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4419      	add	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4403      	add	r3, r0
 8006446:	3320      	adds	r3, #32
 8006448:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d113      	bne.n	8006478 <HAL_PCD_IRQHandler+0x3a2>
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	3324      	adds	r3, #36	@ 0x24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006470:	461a      	mov	r2, r3
 8006472:	2101      	movs	r1, #1
 8006474:	f004 fea4 	bl	800b1c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	b2db      	uxtb	r3, r3
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f007 f921 	bl	800d6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649a:	461a      	mov	r2, r3
 800649c:	2308      	movs	r3, #8
 800649e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b6:	461a      	mov	r2, r3
 80064b8:	2310      	movs	r3, #16
 80064ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2340      	movs	r3, #64	@ 0x40
 80064d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d023      	beq.n	800652a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80064e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e4:	6a38      	ldr	r0, [r7, #32]
 80064e6:	f003 fe8b 	bl	800a200 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	3310      	adds	r3, #16
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	3304      	adds	r3, #4
 80064fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d108      	bne.n	8006518 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2200      	movs	r2, #0
 800650a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f007 f964 	bl	800d7e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006524:	461a      	mov	r2, r3
 8006526:	2302      	movs	r3, #2
 8006528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fcbd 	bl	8006eb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	3301      	adds	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	f47f af2e 	bne.w	80063ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f004 fd6f 	bl	800b038 <USB_ReadInterrupts>
 800655a:	4603      	mov	r3, r0
 800655c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006564:	d122      	bne.n	80065ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006580:	2b01      	cmp	r3, #1
 8006582:	d108      	bne.n	8006596 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800658c:	2100      	movs	r1, #0
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fea4 	bl	80072dc <HAL_PCDEx_LPM_Callback>
 8006594:	e002      	b.n	800659c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f007 f902 	bl	800d7a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80065aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f004 fd41 	bl	800b038 <USB_ReadInterrupts>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c0:	d112      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d102      	bne.n	80065d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f007 f8be 	bl	800d754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80065e6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f004 fd23 	bl	800b038 <USB_ReadInterrupts>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fc:	f040 80b7 	bne.w	800676e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2110      	movs	r1, #16
 800661a:	4618      	mov	r0, r3
 800661c:	f003 fdf0 	bl	800a200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006624:	e046      	b.n	80066b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006632:	461a      	mov	r2, r3
 8006634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006638:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006654:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800666c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006688:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800668c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b0:	3301      	adds	r3, #1
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	791b      	ldrb	r3, [r3, #4]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	4293      	cmp	r3, r2
 80066be:	d3b2      	bcc.n	8006626 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80066d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7bdb      	ldrb	r3, [r3, #15]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d016      	beq.n	800670a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ec:	f043 030b 	orr.w	r3, r3, #11
 80066f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006702:	f043 030b 	orr.w	r3, r3, #11
 8006706:	6453      	str	r3, [r2, #68]	@ 0x44
 8006708:	e015      	b.n	8006736 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006718:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800671c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006720:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006730:	f043 030b 	orr.w	r3, r3, #11
 8006734:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006744:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006748:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006758:	461a      	mov	r2, r3
 800675a:	f004 fd31 	bl	800b1c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695a      	ldr	r2, [r3, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800676c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f004 fc60 	bl	800b038 <USB_ReadInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006782:	d123      	bne.n	80067cc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f004 fcf6 	bl	800b17a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f003 fdad 	bl	800a2f2 <USB_GetDevSpeed>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681c      	ldr	r4, [r3, #0]
 80067a4:	f001 fa08 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 80067a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067ae:	461a      	mov	r2, r3
 80067b0:	4620      	mov	r0, r4
 80067b2:	f003 fab1 	bl	8009d18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f006 ffad 	bl	800d716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80067ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f004 fc31 	bl	800b038 <USB_ReadInterrupts>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d10a      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f006 ff8a 	bl	800d6fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f002 0208 	and.w	r2, r2, #8
 80067f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f004 fc1c 	bl	800b038 <USB_ReadInterrupts>
 8006800:	4603      	mov	r3, r0
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b80      	cmp	r3, #128	@ 0x80
 8006808:	d123      	bne.n	8006852 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006816:	2301      	movs	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
 800681a:	e014      	b.n	8006846 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d105      	bne.n	8006840 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb0a 	bl	8006e54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	3301      	adds	r3, #1
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	461a      	mov	r2, r3
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	4293      	cmp	r3, r2
 8006850:	d3e4      	bcc.n	800681c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f004 fbee 	bl	800b038 <USB_ReadInterrupts>
 800685c:	4603      	mov	r3, r0
 800685e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006866:	d13c      	bne.n	80068e2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006868:	2301      	movs	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	@ 0x24
 800686c:	e02b      	b.n	80068c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3318      	adds	r3, #24
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d115      	bne.n	80068c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006894:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006896:	2b00      	cmp	r3, #0
 8006898:	da12      	bge.n	80068c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3317      	adds	r3, #23
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 faca 	bl	8006e54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d3cd      	bcc.n	800686e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80068e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f004 fba6 	bl	800b038 <USB_ReadInterrupts>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068f6:	d156      	bne.n	80069a6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068f8:	2301      	movs	r3, #1
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fc:	e045      	b.n	800698a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d12e      	bne.n	8006984 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006926:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006928:	2b00      	cmp	r3, #0
 800692a:	da2b      	bge.n	8006984 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006938:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800693c:	429a      	cmp	r2, r3
 800693e:	d121      	bne.n	8006984 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800697c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006980:	6053      	str	r3, [r2, #4]
            break;
 8006982:	e008      	b.n	8006996 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	3301      	adds	r3, #1
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	791b      	ldrb	r3, [r3, #4]
 800698e:	461a      	mov	r2, r3
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	4293      	cmp	r3, r2
 8006994:	d3b3      	bcc.n	80068fe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695a      	ldr	r2, [r3, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80069a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f004 fb44 	bl	800b038 <USB_ReadInterrupts>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d10a      	bne.n	80069d2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f006 ff21 	bl	800d804 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695a      	ldr	r2, [r3, #20]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80069d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f004 fb2e 	bl	800b038 <USB_ReadInterrupts>
 80069dc:	4603      	mov	r3, r0
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d115      	bne.n	8006a12 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f006 ff11 	bl	800d820 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	e000      	b.n	8006a12 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006a10:	bf00      	nop
    }
  }
}
 8006a12:	3734      	adds	r7, #52	@ 0x34
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}

08006a18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_PCD_SetAddress+0x1a>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e012      	b.n	8006a58 <HAL_PCD_SetAddress+0x40>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 fa8d 	bl	800af68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	70fb      	strb	r3, [r7, #3]
 8006a72:	460b      	mov	r3, r1
 8006a74:	803b      	strh	r3, [r7, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da0f      	bge.n	8006aa6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	3310      	adds	r3, #16
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	705a      	strb	r2, [r3, #1]
 8006aa4:	e00f      	b.n	8006ac6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	4613      	mov	r3, r2
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	3304      	adds	r3, #4
 8006abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006ad2:	883b      	ldrh	r3, [r7, #0]
 8006ad4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	78ba      	ldrb	r2, [r7, #2]
 8006ae0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006af4:	78bb      	ldrb	r3, [r7, #2]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d102      	bne.n	8006b00 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_PCD_EP_Open+0xae>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e00e      	b.n	8006b2c <HAL_PCD_EP_Open+0xcc>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f003 fc0d 	bl	800a33c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da0f      	bge.n	8006b68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 020f 	and.w	r2, r3, #15
 8006b4e:	4613      	mov	r3, r2
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	3310      	adds	r3, #16
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	705a      	strb	r2, [r3, #1]
 8006b66:	e00f      	b.n	8006b88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	f003 020f 	and.w	r2, r3, #15
 8006b6e:	4613      	mov	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_PCD_EP_Close+0x6e>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e00e      	b.n	8006bc0 <HAL_PCD_EP_Close+0x8c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f003 fc4b 	bl	800a44c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	f003 020f 	and.w	r2, r3, #15
 8006bde:	4613      	mov	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2200      	movs	r2, #0
 8006c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	799b      	ldrb	r3, [r3, #6]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d102      	bne.n	8006c24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	799b      	ldrb	r3, [r3, #6]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	f003 fce8 	bl	800a604 <USB_EPStartXfer>

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006c60:	681b      	ldr	r3, [r3, #0]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2201      	movs	r2, #1
 8006cac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	799b      	ldrb	r3, [r3, #6]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d102      	bne.n	8006cc8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	799b      	ldrb	r3, [r3, #6]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	f003 fc96 	bl	800a604 <USB_EPStartXfer>

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7912      	ldrb	r2, [r2, #4]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e04f      	b.n	8006da0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da0f      	bge.n	8006d28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	4613      	mov	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	3310      	adds	r3, #16
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	705a      	strb	r2, [r3, #1]
 8006d26:	e00d      	b.n	8006d44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_PCD_EP_SetStall+0x82>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e01d      	b.n	8006da0 <HAL_PCD_EP_SetStall+0xbe>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68f9      	ldr	r1, [r7, #12]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f004 f824 	bl	800adc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7999      	ldrb	r1, [r3, #6]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d90:	461a      	mov	r2, r3
 8006d92:	f004 fa15 	bl	800b1c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	7912      	ldrb	r2, [r2, #4]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e042      	b.n	8006e4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da0f      	bge.n	8006dee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	3310      	adds	r3, #16
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4413      	add	r3, r2
 8006de2:	3304      	adds	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	705a      	strb	r2, [r3, #1]
 8006dec:	e00f      	b.n	8006e0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	3304      	adds	r3, #4
 8006e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_PCD_EP_ClrStall+0x86>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e00e      	b.n	8006e4c <HAL_PCD_EP_ClrStall+0xa4>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f004 f82d 	bl	800ae9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da0c      	bge.n	8006e82 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	4613      	mov	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	3310      	adds	r3, #16
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	e00c      	b.n	8006e9c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	4613      	mov	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	3304      	adds	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68f9      	ldr	r1, [r7, #12]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 fe4c 	bl	800ab40 <USB_EPStopXfer>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b08a      	sub	sp, #40	@ 0x28
 8006eba:	af02      	add	r7, sp, #8
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	3304      	adds	r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	695a      	ldr	r2, [r3, #20]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d901      	bls.n	8006eee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e06b      	b.n	8006fc6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d902      	bls.n	8006f0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3303      	adds	r3, #3
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f12:	e02a      	b.n	8006f6a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d902      	bls.n	8006f30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3303      	adds	r3, #3
 8006f34:	089b      	lsrs	r3, r3, #2
 8006f36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68d9      	ldr	r1, [r3, #12]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6978      	ldr	r0, [r7, #20]
 8006f4e:	f003 fea1 	bl	800ac94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	695a      	ldr	r2, [r3, #20]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d809      	bhi.n	8006f94 <PCD_WriteEmptyTxFifo+0xde>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d203      	bcs.n	8006f94 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1bf      	bne.n	8006f14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d811      	bhi.n	8006fc4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	6939      	ldr	r1, [r7, #16]
 8006fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	333c      	adds	r3, #60	@ 0x3c
 8006fe8:	3304      	adds	r3, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	799b      	ldrb	r3, [r3, #6]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d17b      	bne.n	80070fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4a61      	ldr	r2, [pc, #388]	@ (8007198 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	f240 80b9 	bls.w	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80b3 	beq.w	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007032:	461a      	mov	r2, r3
 8007034:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007038:	6093      	str	r3, [r2, #8]
 800703a:	e0a7      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007052:	461a      	mov	r2, r3
 8007054:	2320      	movs	r3, #32
 8007056:	6093      	str	r3, [r2, #8]
 8007058:	e098      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 8093 	bne.w	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4a4b      	ldr	r2, [pc, #300]	@ (8007198 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d90f      	bls.n	800708e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007084:	461a      	mov	r2, r3
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	6093      	str	r3, [r2, #8]
 800708c:	e07e      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	4413      	add	r3, r2
 80070a0:	3304      	adds	r3, #4
 80070a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1a      	ldr	r2, [r3, #32]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	0159      	lsls	r1, r3, #5
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d114      	bne.n	80070f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070d8:	461a      	mov	r2, r3
 80070da:	2101      	movs	r1, #1
 80070dc:	f004 f870 	bl	800b1c0 <USB_EP0_OutStart>
 80070e0:	e006      	b.n	80070f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	441a      	add	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f006 faca 	bl	800d690 <HAL_PCD_DataOutStageCallback>
 80070fc:	e046      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	4a26      	ldr	r2, [pc, #152]	@ (800719c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d124      	bne.n	8007150 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711c:	461a      	mov	r2, r3
 800711e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007122:	6093      	str	r3, [r2, #8]
 8007124:	e032      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	461a      	mov	r2, r3
 800713e:	2320      	movs	r3, #32
 8007140:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f006 faa1 	bl	800d690 <HAL_PCD_DataOutStageCallback>
 800714e:	e01d      	b.n	800718c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d114      	bne.n	8007180 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d108      	bne.n	8007180 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007178:	461a      	mov	r2, r3
 800717a:	2100      	movs	r1, #0
 800717c:	f004 f820 	bl	800b1c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f006 fa82 	bl	800d690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	4f54300a 	.word	0x4f54300a
 800719c:	4f54310a 	.word	0x4f54310a

080071a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	333c      	adds	r3, #60	@ 0x3c
 80071b8:	3304      	adds	r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <PCD_EP_OutSetupPacket_int+0x88>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d90e      	bls.n	80071f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ec:	461a      	mov	r2, r3
 80071ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f006 fa39 	bl	800d66c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007228 <PCD_EP_OutSetupPacket_int+0x88>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d90c      	bls.n	800721c <PCD_EP_OutSetupPacket_int+0x7c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	799b      	ldrb	r3, [r3, #6]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d108      	bne.n	800721c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007214:	461a      	mov	r2, r3
 8007216:	2101      	movs	r1, #1
 8007218:	f003 ffd2 	bl	800b1c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	4f54300a 	.word	0x4f54300a

0800722c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
 8007238:	4613      	mov	r3, r2
 800723a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d107      	bne.n	800725a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800724a:	883b      	ldrh	r3, [r7, #0]
 800724c:	0419      	lsls	r1, r3, #16
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	430a      	orrs	r2, r1
 8007256:	629a      	str	r2, [r3, #40]	@ 0x28
 8007258:	e028      	b.n	80072ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
 800726c:	e00d      	b.n	800728a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	3340      	adds	r3, #64	@ 0x40
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4413      	add	r3, r2
 8007282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	3301      	adds	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	3b01      	subs	r3, #1
 8007290:	429a      	cmp	r2, r3
 8007292:	d3ec      	bcc.n	800726e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007294:	883b      	ldrh	r3, [r7, #0]
 8007296:	0418      	lsls	r0, r3, #16
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6819      	ldr	r1, [r3, #0]
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	3b01      	subs	r3, #1
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	4302      	orrs	r2, r0
 80072a4:	3340      	adds	r3, #64	@ 0x40
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	887a      	ldrh	r2, [r7, #2]
 80072cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e267      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d075      	beq.n	80073fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007312:	4b88      	ldr	r3, [pc, #544]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 030c 	and.w	r3, r3, #12
 800731a:	2b04      	cmp	r3, #4
 800731c:	d00c      	beq.n	8007338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800731e:	4b85      	ldr	r3, [pc, #532]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007326:	2b08      	cmp	r3, #8
 8007328:	d112      	bne.n	8007350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800732a:	4b82      	ldr	r3, [pc, #520]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007336:	d10b      	bne.n	8007350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007338:	4b7e      	ldr	r3, [pc, #504]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d05b      	beq.n	80073fc <HAL_RCC_OscConfig+0x108>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d157      	bne.n	80073fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e242      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007358:	d106      	bne.n	8007368 <HAL_RCC_OscConfig+0x74>
 800735a:	4b76      	ldr	r3, [pc, #472]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a75      	ldr	r2, [pc, #468]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e01d      	b.n	80073a4 <HAL_RCC_OscConfig+0xb0>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007370:	d10c      	bne.n	800738c <HAL_RCC_OscConfig+0x98>
 8007372:	4b70      	ldr	r3, [pc, #448]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6f      	ldr	r2, [pc, #444]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4b6d      	ldr	r3, [pc, #436]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a6c      	ldr	r2, [pc, #432]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	e00b      	b.n	80073a4 <HAL_RCC_OscConfig+0xb0>
 800738c:	4b69      	ldr	r3, [pc, #420]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a68      	ldr	r2, [pc, #416]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	4b66      	ldr	r3, [pc, #408]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a65      	ldr	r2, [pc, #404]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800739e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d013      	beq.n	80073d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ac:	f7fa ffd2 	bl	8002354 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073b4:	f7fa ffce 	bl	8002354 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	@ 0x64
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e207      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073c6:	4b5b      	ldr	r3, [pc, #364]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0xc0>
 80073d2:	e014      	b.n	80073fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d4:	f7fa ffbe 	bl	8002354 <HAL_GetTick>
 80073d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073da:	e008      	b.n	80073ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073dc:	f7fa ffba 	bl	8002354 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b64      	cmp	r3, #100	@ 0x64
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e1f3      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ee:	4b51      	ldr	r3, [pc, #324]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1f0      	bne.n	80073dc <HAL_RCC_OscConfig+0xe8>
 80073fa:	e000      	b.n	80073fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d063      	beq.n	80074d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800740a:	4b4a      	ldr	r3, [pc, #296]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 030c 	and.w	r3, r3, #12
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007416:	4b47      	ldr	r3, [pc, #284]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800741e:	2b08      	cmp	r3, #8
 8007420:	d11c      	bne.n	800745c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007422:	4b44      	ldr	r3, [pc, #272]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d116      	bne.n	800745c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742e:	4b41      	ldr	r3, [pc, #260]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_RCC_OscConfig+0x152>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d001      	beq.n	8007446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e1c7      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007446:	4b3b      	ldr	r3, [pc, #236]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4937      	ldr	r1, [pc, #220]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745a:	e03a      	b.n	80074d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007464:	4b34      	ldr	r3, [pc, #208]	@ (8007538 <HAL_RCC_OscConfig+0x244>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746a:	f7fa ff73 	bl	8002354 <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007470:	e008      	b.n	8007484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007472:	f7fa ff6f 	bl	8002354 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e1a8      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007484:	4b2b      	ldr	r3, [pc, #172]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007490:	4b28      	ldr	r3, [pc, #160]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	4925      	ldr	r1, [pc, #148]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	600b      	str	r3, [r1, #0]
 80074a4:	e015      	b.n	80074d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074a6:	4b24      	ldr	r3, [pc, #144]	@ (8007538 <HAL_RCC_OscConfig+0x244>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fa ff52 	bl	8002354 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074b4:	f7fa ff4e 	bl	8002354 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e187      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d036      	beq.n	800754c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d016      	beq.n	8007514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074e6:	4b15      	ldr	r3, [pc, #84]	@ (800753c <HAL_RCC_OscConfig+0x248>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ec:	f7fa ff32 	bl	8002354 <HAL_GetTick>
 80074f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074f4:	f7fa ff2e 	bl	8002354 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e167      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007506:	4b0b      	ldr	r3, [pc, #44]	@ (8007534 <HAL_RCC_OscConfig+0x240>)
 8007508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <HAL_RCC_OscConfig+0x200>
 8007512:	e01b      	b.n	800754c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007514:	4b09      	ldr	r3, [pc, #36]	@ (800753c <HAL_RCC_OscConfig+0x248>)
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800751a:	f7fa ff1b 	bl	8002354 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007520:	e00e      	b.n	8007540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007522:	f7fa ff17 	bl	8002354 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d907      	bls.n	8007540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e150      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
 8007534:	40023800 	.word	0x40023800
 8007538:	42470000 	.word	0x42470000
 800753c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007540:	4b88      	ldr	r3, [pc, #544]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1ea      	bne.n	8007522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8097 	beq.w	8007688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800755e:	4b81      	ldr	r3, [pc, #516]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800756a:	2300      	movs	r3, #0
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	4b7d      	ldr	r3, [pc, #500]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	4a7c      	ldr	r2, [pc, #496]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007578:	6413      	str	r3, [r2, #64]	@ 0x40
 800757a:	4b7a      	ldr	r3, [pc, #488]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007582:	60bb      	str	r3, [r7, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007586:	2301      	movs	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800758a:	4b77      	ldr	r3, [pc, #476]	@ (8007768 <HAL_RCC_OscConfig+0x474>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d118      	bne.n	80075c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007596:	4b74      	ldr	r3, [pc, #464]	@ (8007768 <HAL_RCC_OscConfig+0x474>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a73      	ldr	r2, [pc, #460]	@ (8007768 <HAL_RCC_OscConfig+0x474>)
 800759c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075a2:	f7fa fed7 	bl	8002354 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075aa:	f7fa fed3 	bl	8002354 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e10c      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007768 <HAL_RCC_OscConfig+0x474>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d106      	bne.n	80075de <HAL_RCC_OscConfig+0x2ea>
 80075d0:	4b64      	ldr	r3, [pc, #400]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	4a63      	ldr	r2, [pc, #396]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	6713      	str	r3, [r2, #112]	@ 0x70
 80075dc:	e01c      	b.n	8007618 <HAL_RCC_OscConfig+0x324>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d10c      	bne.n	8007600 <HAL_RCC_OscConfig+0x30c>
 80075e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075ec:	f043 0304 	orr.w	r3, r3, #4
 80075f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80075f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f6:	4a5b      	ldr	r2, [pc, #364]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80075fe:	e00b      	b.n	8007618 <HAL_RCC_OscConfig+0x324>
 8007600:	4b58      	ldr	r3, [pc, #352]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007604:	4a57      	ldr	r2, [pc, #348]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	6713      	str	r3, [r2, #112]	@ 0x70
 800760c:	4b55      	ldr	r3, [pc, #340]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800760e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007610:	4a54      	ldr	r2, [pc, #336]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007612:	f023 0304 	bic.w	r3, r3, #4
 8007616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007620:	f7fa fe98 	bl	8002354 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007626:	e00a      	b.n	800763e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007628:	f7fa fe94 	bl	8002354 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0cb      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763e:	4b49      	ldr	r3, [pc, #292]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0ee      	beq.n	8007628 <HAL_RCC_OscConfig+0x334>
 800764a:	e014      	b.n	8007676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764c:	f7fa fe82 	bl	8002354 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007652:	e00a      	b.n	800766a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007654:	f7fa fe7e 	bl	8002354 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e0b5      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800766a:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ee      	bne.n	8007654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d105      	bne.n	8007688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800767c:	4b39      	ldr	r3, [pc, #228]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800767e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007680:	4a38      	ldr	r2, [pc, #224]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80a1 	beq.w	80077d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007692:	4b34      	ldr	r3, [pc, #208]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b08      	cmp	r3, #8
 800769c:	d05c      	beq.n	8007758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d141      	bne.n	800772a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a6:	4b31      	ldr	r3, [pc, #196]	@ (800776c <HAL_RCC_OscConfig+0x478>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ac:	f7fa fe52 	bl	8002354 <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b4:	f7fa fe4e 	bl	8002354 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e087      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c6:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	019b      	lsls	r3, r3, #6
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	3b01      	subs	r3, #1
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	491b      	ldr	r1, [pc, #108]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076fc:	4b1b      	ldr	r3, [pc, #108]	@ (800776c <HAL_RCC_OscConfig+0x478>)
 80076fe:	2201      	movs	r2, #1
 8007700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007702:	f7fa fe27 	bl	8002354 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770a:	f7fa fe23 	bl	8002354 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e05c      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800771c:	4b11      	ldr	r3, [pc, #68]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0f0      	beq.n	800770a <HAL_RCC_OscConfig+0x416>
 8007728:	e054      	b.n	80077d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800772a:	4b10      	ldr	r3, [pc, #64]	@ (800776c <HAL_RCC_OscConfig+0x478>)
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007730:	f7fa fe10 	bl	8002354 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007738:	f7fa fe0c 	bl	8002354 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e045      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800774a:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <HAL_RCC_OscConfig+0x470>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x444>
 8007756:	e03d      	b.n	80077d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d107      	bne.n	8007770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e038      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
 8007764:	40023800 	.word	0x40023800
 8007768:	40007000 	.word	0x40007000
 800776c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007770:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <HAL_RCC_OscConfig+0x4ec>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d028      	beq.n	80077d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007788:	429a      	cmp	r2, r3
 800778a:	d121      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007796:	429a      	cmp	r2, r3
 8007798:	d11a      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d111      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	3b01      	subs	r3, #1
 80077ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077bc:	429a      	cmp	r2, r3
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d001      	beq.n	80077d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800

080077e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0cc      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f8:	4b68      	ldr	r3, [pc, #416]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d90c      	bls.n	8007820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007806:	4b65      	ldr	r3, [pc, #404]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780e:	4b63      	ldr	r3, [pc, #396]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d001      	beq.n	8007820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e0b8      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007838:	4b59      	ldr	r3, [pc, #356]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4a58      	ldr	r2, [pc, #352]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007850:	4b53      	ldr	r3, [pc, #332]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	4a52      	ldr	r2, [pc, #328]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800785a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800785c:	4b50      	ldr	r3, [pc, #320]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	494d      	ldr	r1, [pc, #308]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 800786a:	4313      	orrs	r3, r2
 800786c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d044      	beq.n	8007904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d107      	bne.n	8007892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007882:	4b47      	ldr	r3, [pc, #284]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d119      	bne.n	80078c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e07f      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d003      	beq.n	80078a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d107      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a2:	4b3f      	ldr	r3, [pc, #252]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e06f      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b2:	4b3b      	ldr	r3, [pc, #236]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e067      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078c2:	4b37      	ldr	r3, [pc, #220]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f023 0203 	bic.w	r2, r3, #3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4934      	ldr	r1, [pc, #208]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078d4:	f7fa fd3e 	bl	8002354 <HAL_GetTick>
 80078d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078da:	e00a      	b.n	80078f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078dc:	f7fa fd3a 	bl	8002354 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e04f      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078f2:	4b2b      	ldr	r3, [pc, #172]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 020c 	and.w	r2, r3, #12
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	429a      	cmp	r2, r3
 8007902:	d1eb      	bne.n	80078dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007904:	4b25      	ldr	r3, [pc, #148]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d20c      	bcs.n	800792c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007912:	4b22      	ldr	r3, [pc, #136]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791a:	4b20      	ldr	r3, [pc, #128]	@ (800799c <HAL_RCC_ClockConfig+0x1b8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d001      	beq.n	800792c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e032      	b.n	8007992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007938:	4b19      	ldr	r3, [pc, #100]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	4916      	ldr	r1, [pc, #88]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	4313      	orrs	r3, r2
 8007948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007956:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	490e      	ldr	r1, [pc, #56]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007966:	4313      	orrs	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800796a:	f000 f821 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 800796e:	4602      	mov	r2, r0
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	490a      	ldr	r1, [pc, #40]	@ (80079a4 <HAL_RCC_ClockConfig+0x1c0>)
 800797c:	5ccb      	ldrb	r3, [r1, r3]
 800797e:	fa22 f303 	lsr.w	r3, r2, r3
 8007982:	4a09      	ldr	r2, [pc, #36]	@ (80079a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007986:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <HAL_RCC_ClockConfig+0x1c8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fa fc9e 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023c00 	.word	0x40023c00
 80079a0:	40023800 	.word	0x40023800
 80079a4:	08010ec0 	.word	0x08010ec0
 80079a8:	20000004 	.word	0x20000004
 80079ac:	20000008 	.word	0x20000008

080079b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b4:	b094      	sub	sp, #80	@ 0x50
 80079b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c8:	4b79      	ldr	r3, [pc, #484]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 030c 	and.w	r3, r3, #12
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d00d      	beq.n	80079f0 <HAL_RCC_GetSysClockFreq+0x40>
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	f200 80e1 	bhi.w	8007b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_RCC_GetSysClockFreq+0x34>
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d003      	beq.n	80079ea <HAL_RCC_GetSysClockFreq+0x3a>
 80079e2:	e0db      	b.n	8007b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e4:	4b73      	ldr	r3, [pc, #460]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80079e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079e8:	e0db      	b.n	8007ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ea:	4b72      	ldr	r3, [pc, #456]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80079ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079ee:	e0d8      	b.n	8007ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079f0:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079fa:	4b6d      	ldr	r3, [pc, #436]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d063      	beq.n	8007ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a06:	4b6a      	ldr	r3, [pc, #424]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	099b      	lsrs	r3, r3, #6
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a22:	4622      	mov	r2, r4
 8007a24:	462b      	mov	r3, r5
 8007a26:	f04f 0000 	mov.w	r0, #0
 8007a2a:	f04f 0100 	mov.w	r1, #0
 8007a2e:	0159      	lsls	r1, r3, #5
 8007a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a34:	0150      	lsls	r0, r2, #5
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	1a51      	subs	r1, r2, r1
 8007a3e:	6139      	str	r1, [r7, #16]
 8007a40:	4629      	mov	r1, r5
 8007a42:	eb63 0301 	sbc.w	r3, r3, r1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a54:	4659      	mov	r1, fp
 8007a56:	018b      	lsls	r3, r1, #6
 8007a58:	4651      	mov	r1, sl
 8007a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a5e:	4651      	mov	r1, sl
 8007a60:	018a      	lsls	r2, r1, #6
 8007a62:	4651      	mov	r1, sl
 8007a64:	ebb2 0801 	subs.w	r8, r2, r1
 8007a68:	4659      	mov	r1, fp
 8007a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	f04f 0300 	mov.w	r3, #0
 8007a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a82:	4690      	mov	r8, r2
 8007a84:	4699      	mov	r9, r3
 8007a86:	4623      	mov	r3, r4
 8007a88:	eb18 0303 	adds.w	r3, r8, r3
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	462b      	mov	r3, r5
 8007a90:	eb49 0303 	adc.w	r3, r9, r3
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	028b      	lsls	r3, r1, #10
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aac:	4621      	mov	r1, r4
 8007aae:	028a      	lsls	r2, r1, #10
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ac0:	f7f9 f87a 	bl	8000bb8 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4613      	mov	r3, r2
 8007aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007acc:	e058      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ace:	4b38      	ldr	r3, [pc, #224]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	099b      	lsrs	r3, r3, #6
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	4611      	mov	r1, r2
 8007ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ade:	623b      	str	r3, [r7, #32]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	f04f 0000 	mov.w	r0, #0
 8007af0:	f04f 0100 	mov.w	r1, #0
 8007af4:	0159      	lsls	r1, r3, #5
 8007af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007afa:	0150      	lsls	r0, r2, #5
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4641      	mov	r1, r8
 8007b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b06:	4649      	mov	r1, r9
 8007b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b20:	ebb2 040a 	subs.w	r4, r2, sl
 8007b24:	eb63 050b 	sbc.w	r5, r3, fp
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	00eb      	lsls	r3, r5, #3
 8007b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b36:	00e2      	lsls	r2, r4, #3
 8007b38:	4614      	mov	r4, r2
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	4643      	mov	r3, r8
 8007b3e:	18e3      	adds	r3, r4, r3
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	464b      	mov	r3, r9
 8007b44:	eb45 0303 	adc.w	r3, r5, r3
 8007b48:	607b      	str	r3, [r7, #4]
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b56:	4629      	mov	r1, r5
 8007b58:	028b      	lsls	r3, r1, #10
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b60:	4621      	mov	r1, r4
 8007b62:	028a      	lsls	r2, r1, #10
 8007b64:	4610      	mov	r0, r2
 8007b66:	4619      	mov	r1, r3
 8007b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	61fa      	str	r2, [r7, #28]
 8007b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b74:	f7f9 f820 	bl	8000bb8 <__aeabi_uldivmod>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007b80:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3750      	adds	r7, #80	@ 0x50
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bae:	bf00      	nop
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	00f42400 	.word	0x00f42400

08007bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bbc:	4b03      	ldr	r3, [pc, #12]	@ (8007bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000004 	.word	0x20000004

08007bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bd4:	f7ff fff0 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b05      	ldr	r3, [pc, #20]	@ (8007bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	0a9b      	lsrs	r3, r3, #10
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	4903      	ldr	r1, [pc, #12]	@ (8007bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007be6:	5ccb      	ldrb	r3, [r1, r3]
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	08010ed0 	.word	0x08010ed0

08007bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bfc:	f7ff ffdc 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	0b5b      	lsrs	r3, r3, #13
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	4903      	ldr	r1, [pc, #12]	@ (8007c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c0e:	5ccb      	ldrb	r3, [r1, r3]
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	08010ed0 	.word	0x08010ed0

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e041      	b.n	8007cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa f8ca 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fc46 	bl	80084f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e044      	b.n	8007d62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d018      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d02:	d013      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1a      	ldr	r2, [pc, #104]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xb4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00e      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a19      	ldr	r2, [pc, #100]	@ (8007d78 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a17      	ldr	r2, [pc, #92]	@ (8007d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x6c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a16      	ldr	r2, [pc, #88]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d111      	bne.n	8007d50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b06      	cmp	r3, #6
 8007d3c:	d010      	beq.n	8007d60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0201 	orr.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4e:	e007      	b.n	8007d60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40014000 	.word	0x40014000

08007d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e041      	b.n	8007e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f839 	bl	8007e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f000 fb94 	bl	80084f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d109      	bne.n	8007e5c <HAL_TIM_PWM_Start+0x24>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	bf14      	ite	ne
 8007e54:	2301      	movne	r3, #1
 8007e56:	2300      	moveq	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	e022      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x6a>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d109      	bne.n	8007e76 <HAL_TIM_PWM_Start+0x3e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	bf14      	ite	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	2300      	moveq	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	e015      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x6a>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d109      	bne.n	8007e90 <HAL_TIM_PWM_Start+0x58>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	e008      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x6a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e068      	b.n	8007f7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_PWM_Start+0x82>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007eb8:	e013      	b.n	8007ee2 <HAL_TIM_PWM_Start+0xaa>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_PWM_Start+0x92>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ec8:	e00b      	b.n	8007ee2 <HAL_TIM_PWM_Start+0xaa>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Start+0xa2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ed8:	e003      	b.n	8007ee2 <HAL_TIM_PWM_Start+0xaa>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fdb2 	bl	8008a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_TIM_PWM_Start+0x14c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d107      	bne.n	8007f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8007f84 <HAL_TIM_PWM_Start+0x14c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d018      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x10e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1c:	d013      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x10e>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a19      	ldr	r2, [pc, #100]	@ (8007f88 <HAL_TIM_PWM_Start+0x150>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x10e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a17      	ldr	r2, [pc, #92]	@ (8007f8c <HAL_TIM_PWM_Start+0x154>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x10e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a16      	ldr	r2, [pc, #88]	@ (8007f90 <HAL_TIM_PWM_Start+0x158>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIM_PWM_Start+0x10e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a14      	ldr	r2, [pc, #80]	@ (8007f94 <HAL_TIM_PWM_Start+0x15c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d111      	bne.n	8007f6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b06      	cmp	r3, #6
 8007f56:	d010      	beq.n	8007f7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0201 	orr.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f68:	e007      	b.n	8007f7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40000c00 	.word	0x40000c00
 8007f94:	40014000 	.word	0x40014000

08007f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0202 	mvn.w	r2, #2
 8007fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa65 	bl	80084b2 <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa57 	bl	800849e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa68 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d020      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0204 	mvn.w	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa3f 	bl	80084b2 <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa31 	bl	800849e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa42 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d020      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0208 	mvn.w	r2, #8
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa19 	bl	80084b2 <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa0b 	bl	800849e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa1c 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0210 	mvn.w	r2, #16
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2208      	movs	r2, #8
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9f3 	bl	80084b2 <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9e5 	bl	800849e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9f6 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9c3 	bl	800848a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd34 	bl	8008b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9c7 	bl	80084da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0220 	mvn.w	r2, #32
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fd06 	bl	8008b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008192:	2302      	movs	r3, #2
 8008194:	e0ae      	b.n	80082f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b0c      	cmp	r3, #12
 80081a2:	f200 809f 	bhi.w	80082e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081a6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081e1 	.word	0x080081e1
 80081b0:	080082e5 	.word	0x080082e5
 80081b4:	080082e5 	.word	0x080082e5
 80081b8:	080082e5 	.word	0x080082e5
 80081bc:	08008221 	.word	0x08008221
 80081c0:	080082e5 	.word	0x080082e5
 80081c4:	080082e5 	.word	0x080082e5
 80081c8:	080082e5 	.word	0x080082e5
 80081cc:	08008263 	.word	0x08008263
 80081d0:	080082e5 	.word	0x080082e5
 80081d4:	080082e5 	.word	0x080082e5
 80081d8:	080082e5 	.word	0x080082e5
 80081dc:	080082a3 	.word	0x080082a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fa0e 	bl	8008608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0208 	orr.w	r2, r2, #8
 80081fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0204 	bic.w	r2, r2, #4
 800820a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6999      	ldr	r1, [r3, #24]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	619a      	str	r2, [r3, #24]
      break;
 800821e:	e064      	b.n	80082ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fa54 	bl	80086d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800823a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800824a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6999      	ldr	r1, [r3, #24]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	021a      	lsls	r2, r3, #8
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	619a      	str	r2, [r3, #24]
      break;
 8008260:	e043      	b.n	80082ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fa9f 	bl	80087ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0208 	orr.w	r2, r2, #8
 800827c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0204 	bic.w	r2, r2, #4
 800828c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69d9      	ldr	r1, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	61da      	str	r2, [r3, #28]
      break;
 80082a0:	e023      	b.n	80082ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fae9 	bl	8008880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69da      	ldr	r2, [r3, #28]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69d9      	ldr	r1, [r3, #28]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	021a      	lsls	r2, r3, #8
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	61da      	str	r2, [r3, #28]
      break;
 80082e2:	e002      	b.n	80082ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	75fb      	strb	r3, [r7, #23]
      break;
 80082e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_TIM_ConfigClockSource+0x1c>
 8008314:	2302      	movs	r3, #2
 8008316:	e0b4      	b.n	8008482 <HAL_TIM_ConfigClockSource+0x186>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800833e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008350:	d03e      	beq.n	80083d0 <HAL_TIM_ConfigClockSource+0xd4>
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008356:	f200 8087 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835e:	f000 8086 	beq.w	800846e <HAL_TIM_ConfigClockSource+0x172>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008366:	d87f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008368:	2b70      	cmp	r3, #112	@ 0x70
 800836a:	d01a      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xa6>
 800836c:	2b70      	cmp	r3, #112	@ 0x70
 800836e:	d87b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008370:	2b60      	cmp	r3, #96	@ 0x60
 8008372:	d050      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0x11a>
 8008374:	2b60      	cmp	r3, #96	@ 0x60
 8008376:	d877      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008378:	2b50      	cmp	r3, #80	@ 0x50
 800837a:	d03c      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xfa>
 800837c:	2b50      	cmp	r3, #80	@ 0x50
 800837e:	d873      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d058      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x13a>
 8008384:	2b40      	cmp	r3, #64	@ 0x40
 8008386:	d86f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b30      	cmp	r3, #48	@ 0x30
 800838a:	d064      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15a>
 800838c:	2b30      	cmp	r3, #48	@ 0x30
 800838e:	d86b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b20      	cmp	r3, #32
 8008392:	d060      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15a>
 8008394:	2b20      	cmp	r3, #32
 8008396:	d867      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05c      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15a>
 800839c:	2b10      	cmp	r3, #16
 800839e:	d05a      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15a>
 80083a0:	e062      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083b2:	f000 fb2f 	bl	8008a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	609a      	str	r2, [r3, #8]
      break;
 80083ce:	e04f      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083e0:	f000 fb18 	bl	8008a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083f2:	609a      	str	r2, [r3, #8]
      break;
 80083f4:	e03c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008402:	461a      	mov	r2, r3
 8008404:	f000 fa8c 	bl	8008920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2150      	movs	r1, #80	@ 0x50
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fae5 	bl	80089de <TIM_ITRx_SetConfig>
      break;
 8008414:	e02c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008422:	461a      	mov	r2, r3
 8008424:	f000 faab 	bl	800897e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2160      	movs	r1, #96	@ 0x60
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fad5 	bl	80089de <TIM_ITRx_SetConfig>
      break;
 8008434:	e01c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008442:	461a      	mov	r2, r3
 8008444:	f000 fa6c 	bl	8008920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2140      	movs	r1, #64	@ 0x40
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fac5 	bl	80089de <TIM_ITRx_SetConfig>
      break;
 8008454:	e00c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f000 fabc 	bl	80089de <TIM_ITRx_SetConfig>
      break;
 8008466:	e003      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e000      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800846e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3a      	ldr	r2, [pc, #232]	@ (80085ec <TIM_Base_SetConfig+0xfc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00f      	beq.n	8008528 <TIM_Base_SetConfig+0x38>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850e:	d00b      	beq.n	8008528 <TIM_Base_SetConfig+0x38>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a37      	ldr	r2, [pc, #220]	@ (80085f0 <TIM_Base_SetConfig+0x100>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <TIM_Base_SetConfig+0x38>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a36      	ldr	r2, [pc, #216]	@ (80085f4 <TIM_Base_SetConfig+0x104>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_Base_SetConfig+0x38>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a35      	ldr	r2, [pc, #212]	@ (80085f8 <TIM_Base_SetConfig+0x108>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d108      	bne.n	800853a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a2b      	ldr	r2, [pc, #172]	@ (80085ec <TIM_Base_SetConfig+0xfc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d01b      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008548:	d017      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a28      	ldr	r2, [pc, #160]	@ (80085f0 <TIM_Base_SetConfig+0x100>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a27      	ldr	r2, [pc, #156]	@ (80085f4 <TIM_Base_SetConfig+0x104>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00f      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a26      	ldr	r2, [pc, #152]	@ (80085f8 <TIM_Base_SetConfig+0x108>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00b      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a25      	ldr	r2, [pc, #148]	@ (80085fc <TIM_Base_SetConfig+0x10c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d007      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a24      	ldr	r2, [pc, #144]	@ (8008600 <TIM_Base_SetConfig+0x110>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d003      	beq.n	800857a <TIM_Base_SetConfig+0x8a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a23      	ldr	r2, [pc, #140]	@ (8008604 <TIM_Base_SetConfig+0x114>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d108      	bne.n	800858c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a0e      	ldr	r2, [pc, #56]	@ (80085ec <TIM_Base_SetConfig+0xfc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d103      	bne.n	80085c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d105      	bne.n	80085de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f023 0201 	bic.w	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]
  }
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	40010000 	.word	0x40010000
 80085f0:	40000400 	.word	0x40000400
 80085f4:	40000800 	.word	0x40000800
 80085f8:	40000c00 	.word	0x40000c00
 80085fc:	40014000 	.word	0x40014000
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800

08008608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f023 0201 	bic.w	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 0302 	bic.w	r3, r3, #2
 8008650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1c      	ldr	r2, [pc, #112]	@ (80086d0 <TIM_OC1_SetConfig+0xc8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10c      	bne.n	800867e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0308 	bic.w	r3, r3, #8
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 0304 	bic.w	r3, r3, #4
 800867c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a13      	ldr	r2, [pc, #76]	@ (80086d0 <TIM_OC1_SetConfig+0xc8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d111      	bne.n	80086aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800868c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	621a      	str	r2, [r3, #32]
}
 80086c4:	bf00      	nop
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	40010000 	.word	0x40010000

080086d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	f023 0210 	bic.w	r2, r3, #16
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800870a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0320 	bic.w	r3, r3, #32
 800871e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <TIM_OC2_SetConfig+0xd4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d10d      	bne.n	8008750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800874e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a15      	ldr	r2, [pc, #84]	@ (80087a8 <TIM_OC2_SetConfig+0xd4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d113      	bne.n	8008780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800875e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000

080087ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1d      	ldr	r2, [pc, #116]	@ (800887c <TIM_OC3_SetConfig+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d10d      	bne.n	8008826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a14      	ldr	r2, [pc, #80]	@ (800887c <TIM_OC3_SetConfig+0xd0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d113      	bne.n	8008856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800883c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	621a      	str	r2, [r3, #32]
}
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40010000 	.word	0x40010000

08008880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a10      	ldr	r2, [pc, #64]	@ (800891c <TIM_OC4_SetConfig+0x9c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d109      	bne.n	80088f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	019b      	lsls	r3, r3, #6
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000

08008920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800894a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 030a 	bic.w	r3, r3, #10
 800895c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f023 0210 	bic.w	r2, r3, #16
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	031b      	lsls	r3, r3, #12
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f043 0307 	orr.w	r3, r3, #7
 8008a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	021a      	lsls	r2, r3, #8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	609a      	str	r2, [r3, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	2201      	movs	r2, #1
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a1a      	ldr	r2, [r3, #32]
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	43db      	mvns	r3, r3
 8008a76:	401a      	ands	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6a1a      	ldr	r2, [r3, #32]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e050      	b.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b04:	d013      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a16      	ldr	r2, [pc, #88]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a15      	ldr	r2, [pc, #84]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a13      	ldr	r2, [pc, #76]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10c      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40010000 	.word	0x40010000
 8008b6c:	40000400 	.word	0x40000400
 8008b70:	40000800 	.word	0x40000800
 8008b74:	40000c00 	.word	0x40000c00
 8008b78:	40014000 	.word	0x40014000

08008b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e042      	b.n	8008c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7f9 f9ba 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2224      	movs	r2, #36	@ 0x24
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fdbd 	bl	8009768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	@ 0x28
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	4613      	mov	r3, r2
 8008c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d175      	bne.n	8008d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <HAL_UART_Transmit+0x2c>
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e06e      	b.n	8008d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2221      	movs	r2, #33	@ 0x21
 8008c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c82:	f7f9 fb67 	bl	8002354 <HAL_GetTick>
 8008c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	88fa      	ldrh	r2, [r7, #6]
 8008c8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9c:	d108      	bne.n	8008cb0 <HAL_UART_Transmit+0x6c>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	e003      	b.n	8008cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cb8:	e02e      	b.n	8008d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2180      	movs	r1, #128	@ 0x80
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fb1f 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e03a      	b.n	8008d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e007      	b.n	8008d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3301      	adds	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1cb      	bne.n	8008cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2140      	movs	r1, #64	@ 0x40
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 faeb 	bl	8009308 <UART_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e006      	b.n	8008d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e000      	b.n	8008d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	4613      	mov	r3, r2
 8008d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d112      	bne.n	8008d9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_UART_Receive_IT+0x26>
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e00b      	b.n	8008d9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fb12 	bl	80093ba <UART_Start_Receive_IT>
 8008d96:	4603      	mov	r3, r0
 8008d98:	e000      	b.n	8008d9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
  }
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0ba      	sub	sp, #232	@ 0xe8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10f      	bne.n	8008e0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <HAL_UART_IRQHandler+0x66>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fbf2 	bl	80095ec <UART_Receive_IT>
      return;
 8008e08:	e25b      	b.n	80092c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80de 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x22c>
 8008e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d106      	bne.n	8008e2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80d1 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00b      	beq.n	8008e52 <HAL_UART_IRQHandler+0xae>
 8008e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <HAL_UART_IRQHandler+0xd2>
 8008e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6e:	f043 0202 	orr.w	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_UART_IRQHandler+0xf6>
 8008e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e92:	f043 0204 	orr.w	r2, r3, #4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <HAL_UART_IRQHandler+0x126>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec2:	f043 0208 	orr.w	r2, r3, #8
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 81f2 	beq.w	80092b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x14e>
 8008ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fb7d 	bl	80095ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b40      	cmp	r3, #64	@ 0x40
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d103      	bne.n	8008f1e <HAL_UART_IRQHandler+0x17a>
 8008f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d04f      	beq.n	8008fbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa85 	bl	800942e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f2e:	2b40      	cmp	r3, #64	@ 0x40
 8008f30:	d141      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3314      	adds	r3, #20
 8008f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3314      	adds	r3, #20
 8008f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1d9      	bne.n	8008f32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d013      	beq.n	8008fae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8009184 <HAL_UART_IRQHandler+0x3e0>)
 8008f8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fc3e 	bl	8002814 <HAL_DMA_Abort_IT>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d016      	beq.n	8008fcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	e00e      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f994 	bl	80092dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e00a      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f990 	bl	80092dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e006      	b.n	8008fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f98c 	bl	80092dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008fca:	e175      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	bf00      	nop
    return;
 8008fce:	e173      	b.n	80092b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 814f 	bne.w	8009278 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8148 	beq.w	8009278 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8141 	beq.w	8009278 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009016:	2b40      	cmp	r3, #64	@ 0x40
 8009018:	f040 80b6 	bne.w	8009188 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8145 	beq.w	80092bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800903a:	429a      	cmp	r2, r3
 800903c:	f080 813e 	bcs.w	80092bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009046:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009052:	f000 8088 	beq.w	8009166 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	330c      	adds	r3, #12
 800905c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800906c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800908e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800909a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1d9      	bne.n	8009056 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3314      	adds	r3, #20
 80090a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e1      	bne.n	80090a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3314      	adds	r3, #20
 80090e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009104:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009108:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e3      	bne.n	80090de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	330c      	adds	r3, #12
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009136:	f023 0310 	bic.w	r3, r3, #16
 800913a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	330c      	adds	r3, #12
 8009144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009148:	65ba      	str	r2, [r7, #88]	@ 0x58
 800914a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800914e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e3      	bne.n	8009124 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009160:	4618      	mov	r0, r3
 8009162:	f7f9 fae7 	bl	8002734 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2202      	movs	r2, #2
 800916a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009174:	b29b      	uxth	r3, r3
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	b29b      	uxth	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f8b7 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009182:	e09b      	b.n	80092bc <HAL_UART_IRQHandler+0x518>
 8009184:	080094f5 	.word	0x080094f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009190:	b29b      	uxth	r3, r3
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 808e 	beq.w	80092c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8089 	beq.w	80092c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	330c      	adds	r3, #12
 80091b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	330c      	adds	r3, #12
 80091ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80091d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80091d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e3      	bne.n	80091ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	623b      	str	r3, [r7, #32]
   return(result);
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800920a:	633a      	str	r2, [r7, #48]	@ 0x30
 800920c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e3      	bne.n	80091e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	330c      	adds	r3, #12
 8009232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	60fb      	str	r3, [r7, #12]
   return(result);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0310 	bic.w	r3, r3, #16
 8009242:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330c      	adds	r3, #12
 800924c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009250:	61fa      	str	r2, [r7, #28]
 8009252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	69b9      	ldr	r1, [r7, #24]
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	617b      	str	r3, [r7, #20]
   return(result);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e3      	bne.n	800922c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800926a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f83d 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009276:	e023      	b.n	80092c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <HAL_UART_IRQHandler+0x4f4>
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f943 	bl	800951c <UART_Transmit_IT>
    return;
 8009296:	e014      	b.n	80092c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00e      	beq.n	80092c2 <HAL_UART_IRQHandler+0x51e>
 80092a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d008      	beq.n	80092c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f983 	bl	80095bc <UART_EndTransmit_IT>
    return;
 80092b6:	e004      	b.n	80092c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80092c0:	bf00      	nop
  }
}
 80092c2:	37e8      	adds	r7, #232	@ 0xe8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	4613      	mov	r3, r2
 8009316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009318:	e03b      	b.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d037      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009322:	f7f9 f817 	bl	8002354 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	6a3a      	ldr	r2, [r7, #32]
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <UART_WaitOnFlagUntilTimeout+0x30>
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e03a      	b.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d023      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b80      	cmp	r3, #128	@ 0x80
 800934e:	d020      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b40      	cmp	r3, #64	@ 0x40
 8009354:	d01d      	beq.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	2b08      	cmp	r3, #8
 8009362:	d116      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f857 	bl	800942e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2208      	movs	r2, #8
 8009384:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e00f      	b.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4013      	ands	r3, r2
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	429a      	cmp	r2, r3
 80093a0:	bf0c      	ite	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	2300      	movne	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	461a      	mov	r2, r3
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d0b4      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	88fa      	ldrh	r2, [r7, #6]
 80093d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	88fa      	ldrh	r2, [r7, #6]
 80093d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2222      	movs	r2, #34	@ 0x22
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	695a      	ldr	r2, [r3, #20]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0201 	orr.w	r2, r2, #1
 800940e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0220 	orr.w	r2, r2, #32
 800941e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800942e:	b480      	push	{r7}
 8009430:	b095      	sub	sp, #84	@ 0x54
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800944c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	330c      	adds	r3, #12
 8009454:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009456:	643a      	str	r2, [r7, #64]	@ 0x40
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800945c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e5      	bne.n	8009436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	61fb      	str	r3, [r7, #28]
   return(result);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3314      	adds	r3, #20
 8009488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800948a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e5      	bne.n	800946a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d119      	bne.n	80094da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	330c      	adds	r3, #12
 80094ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f023 0310 	bic.w	r3, r3, #16
 80094bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094c6:	61ba      	str	r2, [r7, #24]
 80094c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6979      	ldr	r1, [r7, #20]
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	613b      	str	r3, [r7, #16]
   return(result);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2220      	movs	r2, #32
 80094de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094e8:	bf00      	nop
 80094ea:	3754      	adds	r7, #84	@ 0x54
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fee4 	bl	80092dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b21      	cmp	r3, #33	@ 0x21
 800952e:	d13e      	bne.n	80095ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009538:	d114      	bne.n	8009564 <UART_Transmit_IT+0x48>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d110      	bne.n	8009564 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009556:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	1c9a      	adds	r2, r3, #2
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	621a      	str	r2, [r3, #32]
 8009562:	e008      	b.n	8009576 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	1c59      	adds	r1, r3, #1
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6211      	str	r1, [r2, #32]
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29b      	uxth	r3, r3
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	4619      	mov	r1, r3
 8009584:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10f      	bne.n	80095aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009598:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e000      	b.n	80095b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095ae:	2302      	movs	r3, #2
  }
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fe73 	bl	80092c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	@ 0x30
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b22      	cmp	r3, #34	@ 0x22
 80095fe:	f040 80ae 	bne.w	800975e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960a:	d117      	bne.n	800963c <UART_Receive_IT+0x50>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d113      	bne.n	800963c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	b29a      	uxth	r2, r3
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	1c9a      	adds	r2, r3, #2
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	629a      	str	r2, [r3, #40]	@ 0x28
 800963a:	e026      	b.n	800968a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964e:	d007      	beq.n	8009660 <UART_Receive_IT+0x74>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <UART_Receive_IT+0x82>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	b2da      	uxtb	r2, r3
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e008      	b.n	8009680 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800967a:	b2da      	uxtb	r2, r3
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29b      	uxth	r3, r3
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	4619      	mov	r1, r3
 8009698:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800969a:	2b00      	cmp	r3, #0
 800969c:	d15d      	bne.n	800975a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0220 	bic.w	r2, r2, #32
 80096ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695a      	ldr	r2, [r3, #20]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d135      	bne.n	8009750 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	330c      	adds	r3, #12
 80096f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	613b      	str	r3, [r7, #16]
   return(result);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f023 0310 	bic.w	r3, r3, #16
 8009700:	627b      	str	r3, [r7, #36]	@ 0x24
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	330c      	adds	r3, #12
 8009708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800970a:	623a      	str	r2, [r7, #32]
 800970c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	69f9      	ldr	r1, [r7, #28]
 8009710:	6a3a      	ldr	r2, [r7, #32]
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	61bb      	str	r3, [r7, #24]
   return(result);
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e5      	bne.n	80096ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b10      	cmp	r3, #16
 800972a:	d10a      	bne.n	8009742 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fdd1 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
 800974e:	e002      	b.n	8009756 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7f7 fbcf 	bl	8000ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	e002      	b.n	8009760 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	e000      	b.n	8009760 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800975e:	2302      	movs	r3, #2
  }
}
 8009760:	4618      	mov	r0, r3
 8009762:	3730      	adds	r7, #48	@ 0x30
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800976c:	b0c0      	sub	sp, #256	@ 0x100
 800976e:	af00      	add	r7, sp, #0
 8009770:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009784:	68d9      	ldr	r1, [r3, #12]
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	ea40 0301 	orr.w	r3, r0, r1
 8009790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	431a      	orrs	r2, r3
 80097a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097c0:	f021 010c 	bic.w	r1, r1, #12
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097ce:	430b      	orrs	r3, r1
 80097d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	6999      	ldr	r1, [r3, #24]
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	ea40 0301 	orr.w	r3, r0, r1
 80097ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009a34 <UART_SetConfig+0x2cc>)
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d005      	beq.n	8009808 <UART_SetConfig+0xa0>
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b8d      	ldr	r3, [pc, #564]	@ (8009a38 <UART_SetConfig+0x2d0>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d104      	bne.n	8009812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009808:	f7fe f9f6 	bl	8007bf8 <HAL_RCC_GetPCLK2Freq>
 800980c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009810:	e003      	b.n	800981a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009812:	f7fe f9dd 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 8009816:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009824:	f040 810c 	bne.w	8009a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800982c:	2200      	movs	r2, #0
 800982e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009832:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	1891      	adds	r1, r2, r2
 8009840:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009842:	415b      	adcs	r3, r3
 8009844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800984a:	4621      	mov	r1, r4
 800984c:	eb12 0801 	adds.w	r8, r2, r1
 8009850:	4629      	mov	r1, r5
 8009852:	eb43 0901 	adc.w	r9, r3, r1
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800986a:	4690      	mov	r8, r2
 800986c:	4699      	mov	r9, r3
 800986e:	4623      	mov	r3, r4
 8009870:	eb18 0303 	adds.w	r3, r8, r3
 8009874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009878:	462b      	mov	r3, r5
 800987a:	eb49 0303 	adc.w	r3, r9, r3
 800987e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800988e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009896:	460b      	mov	r3, r1
 8009898:	18db      	adds	r3, r3, r3
 800989a:	653b      	str	r3, [r7, #80]	@ 0x50
 800989c:	4613      	mov	r3, r2
 800989e:	eb42 0303 	adc.w	r3, r2, r3
 80098a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80098a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80098ac:	f7f7 f984 	bl	8000bb8 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4b61      	ldr	r3, [pc, #388]	@ (8009a3c <UART_SetConfig+0x2d4>)
 80098b6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	011c      	lsls	r4, r3, #4
 80098be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	1891      	adds	r1, r2, r2
 80098d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098d8:	415b      	adcs	r3, r3
 80098da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098e0:	4641      	mov	r1, r8
 80098e2:	eb12 0a01 	adds.w	sl, r2, r1
 80098e6:	4649      	mov	r1, r9
 80098e8:	eb43 0b01 	adc.w	fp, r3, r1
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009900:	4692      	mov	sl, r2
 8009902:	469b      	mov	fp, r3
 8009904:	4643      	mov	r3, r8
 8009906:	eb1a 0303 	adds.w	r3, sl, r3
 800990a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800990e:	464b      	mov	r3, r9
 8009910:	eb4b 0303 	adc.w	r3, fp, r3
 8009914:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009924:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800992c:	460b      	mov	r3, r1
 800992e:	18db      	adds	r3, r3, r3
 8009930:	643b      	str	r3, [r7, #64]	@ 0x40
 8009932:	4613      	mov	r3, r2
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	647b      	str	r3, [r7, #68]	@ 0x44
 800993a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800993e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009942:	f7f7 f939 	bl	8000bb8 <__aeabi_uldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4611      	mov	r1, r2
 800994c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a3c <UART_SetConfig+0x2d4>)
 800994e:	fba3 2301 	umull	r2, r3, r3, r1
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	2264      	movs	r2, #100	@ 0x64
 8009956:	fb02 f303 	mul.w	r3, r2, r3
 800995a:	1acb      	subs	r3, r1, r3
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009962:	4b36      	ldr	r3, [pc, #216]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009964:	fba3 2302 	umull	r2, r3, r3, r2
 8009968:	095b      	lsrs	r3, r3, #5
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009970:	441c      	add	r4, r3
 8009972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009976:	2200      	movs	r2, #0
 8009978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800997c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	1891      	adds	r1, r2, r2
 800998a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800998c:	415b      	adcs	r3, r3
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009994:	4641      	mov	r1, r8
 8009996:	1851      	adds	r1, r2, r1
 8009998:	6339      	str	r1, [r7, #48]	@ 0x30
 800999a:	4649      	mov	r1, r9
 800999c:	414b      	adcs	r3, r1
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80099ac:	4659      	mov	r1, fp
 80099ae:	00cb      	lsls	r3, r1, #3
 80099b0:	4651      	mov	r1, sl
 80099b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099b6:	4651      	mov	r1, sl
 80099b8:	00ca      	lsls	r2, r1, #3
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	4642      	mov	r2, r8
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099c8:	464b      	mov	r3, r9
 80099ca:	460a      	mov	r2, r1
 80099cc:	eb42 0303 	adc.w	r3, r2, r3
 80099d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099e8:	460b      	mov	r3, r1
 80099ea:	18db      	adds	r3, r3, r3
 80099ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099ee:	4613      	mov	r3, r2
 80099f0:	eb42 0303 	adc.w	r3, r2, r3
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099fe:	f7f7 f8db 	bl	8000bb8 <__aeabi_uldivmod>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a08:	fba3 1302 	umull	r1, r3, r3, r2
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	2164      	movs	r1, #100	@ 0x64
 8009a10:	fb01 f303 	mul.w	r3, r1, r3
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	3332      	adds	r3, #50	@ 0x32
 8009a1a:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <UART_SetConfig+0x2d4>)
 8009a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f003 0207 	and.w	r2, r3, #7
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4422      	add	r2, r4
 8009a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a30:	e106      	b.n	8009c40 <UART_SetConfig+0x4d8>
 8009a32:	bf00      	nop
 8009a34:	40011000 	.word	0x40011000
 8009a38:	40011400 	.word	0x40011400
 8009a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a52:	4642      	mov	r2, r8
 8009a54:	464b      	mov	r3, r9
 8009a56:	1891      	adds	r1, r2, r2
 8009a58:	6239      	str	r1, [r7, #32]
 8009a5a:	415b      	adcs	r3, r3
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a62:	4641      	mov	r1, r8
 8009a64:	1854      	adds	r4, r2, r1
 8009a66:	4649      	mov	r1, r9
 8009a68:	eb43 0501 	adc.w	r5, r3, r1
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	00eb      	lsls	r3, r5, #3
 8009a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a7a:	00e2      	lsls	r2, r4, #3
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	461d      	mov	r5, r3
 8009a80:	4643      	mov	r3, r8
 8009a82:	18e3      	adds	r3, r4, r3
 8009a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a88:	464b      	mov	r3, r9
 8009a8a:	eb45 0303 	adc.w	r3, r5, r3
 8009a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009aae:	4629      	mov	r1, r5
 8009ab0:	008b      	lsls	r3, r1, #2
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ab8:	4621      	mov	r1, r4
 8009aba:	008a      	lsls	r2, r1, #2
 8009abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ac0:	f7f7 f87a 	bl	8000bb8 <__aeabi_uldivmod>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4b60      	ldr	r3, [pc, #384]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009aca:	fba3 2302 	umull	r2, r3, r3, r2
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	011c      	lsls	r4, r3, #4
 8009ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009adc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	1891      	adds	r1, r2, r2
 8009aea:	61b9      	str	r1, [r7, #24]
 8009aec:	415b      	adcs	r3, r3
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009af4:	4641      	mov	r1, r8
 8009af6:	1851      	adds	r1, r2, r1
 8009af8:	6139      	str	r1, [r7, #16]
 8009afa:	4649      	mov	r1, r9
 8009afc:	414b      	adcs	r3, r1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	f04f 0300 	mov.w	r3, #0
 8009b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	00cb      	lsls	r3, r1, #3
 8009b10:	4651      	mov	r1, sl
 8009b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b16:	4651      	mov	r1, sl
 8009b18:	00ca      	lsls	r2, r1, #3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4642      	mov	r2, r8
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b28:	464b      	mov	r3, r9
 8009b2a:	460a      	mov	r2, r1
 8009b2c:	eb42 0303 	adc.w	r3, r2, r3
 8009b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	008b      	lsls	r3, r1, #2
 8009b50:	4641      	mov	r1, r8
 8009b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b56:	4641      	mov	r1, r8
 8009b58:	008a      	lsls	r2, r1, #2
 8009b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b5e:	f7f7 f82b 	bl	8000bb8 <__aeabi_uldivmod>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	4b38      	ldr	r3, [pc, #224]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	2264      	movs	r2, #100	@ 0x64
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	1acb      	subs	r3, r1, r3
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	3332      	adds	r3, #50	@ 0x32
 8009b7c:	4a33      	ldr	r2, [pc, #204]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b88:	441c      	add	r4, r3
 8009b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b8e:	2200      	movs	r2, #0
 8009b90:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b92:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	1891      	adds	r1, r2, r2
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	415b      	adcs	r3, r3
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ba8:	4641      	mov	r1, r8
 8009baa:	1851      	adds	r1, r2, r1
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	4649      	mov	r1, r9
 8009bb0:	414b      	adcs	r3, r1
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	00cb      	lsls	r3, r1, #3
 8009bc4:	4651      	mov	r1, sl
 8009bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bca:	4651      	mov	r1, sl
 8009bcc:	00ca      	lsls	r2, r1, #3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	189b      	adds	r3, r3, r2
 8009bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bda:	464b      	mov	r3, r9
 8009bdc:	460a      	mov	r2, r1
 8009bde:	eb42 0303 	adc.w	r3, r2, r3
 8009be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bee:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	008b      	lsls	r3, r1, #2
 8009c00:	4641      	mov	r1, r8
 8009c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c06:	4641      	mov	r1, r8
 8009c08:	008a      	lsls	r2, r1, #2
 8009c0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c0e:	f7f6 ffd3 	bl	8000bb8 <__aeabi_uldivmod>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4b0d      	ldr	r3, [pc, #52]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c18:	fba3 1302 	umull	r1, r3, r3, r2
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2164      	movs	r1, #100	@ 0x64
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	3332      	adds	r3, #50	@ 0x32
 8009c2a:	4a08      	ldr	r2, [pc, #32]	@ (8009c4c <UART_SetConfig+0x4e4>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	f003 020f 	and.w	r2, r3, #15
 8009c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4422      	add	r2, r4
 8009c3e:	609a      	str	r2, [r3, #8]
}
 8009c40:	bf00      	nop
 8009c42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c46:	46bd      	mov	sp, r7
 8009c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c4c:	51eb851f 	.word	0x51eb851f

08009c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c50:	b084      	sub	sp, #16
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	f107 001c 	add.w	r0, r7, #28
 8009c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d123      	bne.n	8009cb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d105      	bne.n	8009ca6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 fae8 	bl	800b27c <USB_CoreReset>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
 8009cb0:	e01b      	b.n	8009cea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fadc 	bl	800b27c <USB_CoreReset>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009cc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cdc:	e005      	b.n	8009cea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009cea:	7fbb      	ldrb	r3, [r7, #30]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d10b      	bne.n	8009d08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f043 0206 	orr.w	r2, r3, #6
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f043 0220 	orr.w	r2, r3, #32
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d14:	b004      	add	sp, #16
 8009d16:	4770      	bx	lr

08009d18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d165      	bne.n	8009df8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a41      	ldr	r2, [pc, #260]	@ (8009e34 <USB_SetTurnaroundTime+0x11c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d906      	bls.n	8009d42 <USB_SetTurnaroundTime+0x2a>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4a40      	ldr	r2, [pc, #256]	@ (8009e38 <USB_SetTurnaroundTime+0x120>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d202      	bcs.n	8009d42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d3c:	230f      	movs	r3, #15
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e062      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a3c      	ldr	r2, [pc, #240]	@ (8009e38 <USB_SetTurnaroundTime+0x120>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d306      	bcc.n	8009d58 <USB_SetTurnaroundTime+0x40>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8009e3c <USB_SetTurnaroundTime+0x124>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d202      	bcs.n	8009d58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d52:	230e      	movs	r3, #14
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e057      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4a38      	ldr	r2, [pc, #224]	@ (8009e3c <USB_SetTurnaroundTime+0x124>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d306      	bcc.n	8009d6e <USB_SetTurnaroundTime+0x56>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4a37      	ldr	r2, [pc, #220]	@ (8009e40 <USB_SetTurnaroundTime+0x128>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d202      	bcs.n	8009d6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d68:	230d      	movs	r3, #13
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e04c      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4a33      	ldr	r2, [pc, #204]	@ (8009e40 <USB_SetTurnaroundTime+0x128>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d306      	bcc.n	8009d84 <USB_SetTurnaroundTime+0x6c>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4a32      	ldr	r2, [pc, #200]	@ (8009e44 <USB_SetTurnaroundTime+0x12c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d802      	bhi.n	8009d84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d7e:	230c      	movs	r3, #12
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e041      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	4a2f      	ldr	r2, [pc, #188]	@ (8009e44 <USB_SetTurnaroundTime+0x12c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d906      	bls.n	8009d9a <USB_SetTurnaroundTime+0x82>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8009e48 <USB_SetTurnaroundTime+0x130>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d802      	bhi.n	8009d9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d94:	230b      	movs	r3, #11
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e036      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009e48 <USB_SetTurnaroundTime+0x130>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d906      	bls.n	8009db0 <USB_SetTurnaroundTime+0x98>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4a29      	ldr	r2, [pc, #164]	@ (8009e4c <USB_SetTurnaroundTime+0x134>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d802      	bhi.n	8009db0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009daa:	230a      	movs	r3, #10
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e02b      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4a26      	ldr	r2, [pc, #152]	@ (8009e4c <USB_SetTurnaroundTime+0x134>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d906      	bls.n	8009dc6 <USB_SetTurnaroundTime+0xae>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4a25      	ldr	r2, [pc, #148]	@ (8009e50 <USB_SetTurnaroundTime+0x138>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d202      	bcs.n	8009dc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009dc0:	2309      	movs	r3, #9
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	e020      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4a21      	ldr	r2, [pc, #132]	@ (8009e50 <USB_SetTurnaroundTime+0x138>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d306      	bcc.n	8009ddc <USB_SetTurnaroundTime+0xc4>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4a20      	ldr	r2, [pc, #128]	@ (8009e54 <USB_SetTurnaroundTime+0x13c>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d802      	bhi.n	8009ddc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009dd6:	2308      	movs	r3, #8
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	e015      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4a1d      	ldr	r2, [pc, #116]	@ (8009e54 <USB_SetTurnaroundTime+0x13c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d906      	bls.n	8009df2 <USB_SetTurnaroundTime+0xda>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e58 <USB_SetTurnaroundTime+0x140>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d202      	bcs.n	8009df2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009dec:	2307      	movs	r3, #7
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	e00a      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009df2:	2306      	movs	r3, #6
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	e007      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009dfe:	2309      	movs	r3, #9
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	e001      	b.n	8009e08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e04:	2309      	movs	r3, #9
 8009e06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	029b      	lsls	r3, r3, #10
 8009e1c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009e20:	431a      	orrs	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	00d8acbf 	.word	0x00d8acbf
 8009e38:	00e4e1c0 	.word	0x00e4e1c0
 8009e3c:	00f42400 	.word	0x00f42400
 8009e40:	01067380 	.word	0x01067380
 8009e44:	011a499f 	.word	0x011a499f
 8009e48:	01312cff 	.word	0x01312cff
 8009e4c:	014ca43f 	.word	0x014ca43f
 8009e50:	016e3600 	.word	0x016e3600
 8009e54:	01a6ab1f 	.word	0x01a6ab1f
 8009e58:	01e84800 	.word	0x01e84800

08009e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f043 0201 	orr.w	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f023 0201 	bic.w	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d115      	bne.n	8009eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ece:	200a      	movs	r0, #10
 8009ed0:	f7f8 fa4c 	bl	800236c <HAL_Delay>
      ms += 10U;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	330a      	adds	r3, #10
 8009ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 f93f 	bl	800b15e <USB_GetMode>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d01e      	beq.n	8009f24 <USB_SetCurrentMode+0x84>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2bc7      	cmp	r3, #199	@ 0xc7
 8009eea:	d9f0      	bls.n	8009ece <USB_SetCurrentMode+0x2e>
 8009eec:	e01a      	b.n	8009f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d115      	bne.n	8009f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f00:	200a      	movs	r0, #10
 8009f02:	f7f8 fa33 	bl	800236c <HAL_Delay>
      ms += 10U;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	330a      	adds	r3, #10
 8009f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f926 	bl	800b15e <USB_GetMode>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <USB_SetCurrentMode+0x84>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f1c:	d9f0      	bls.n	8009f00 <USB_SetCurrentMode+0x60>
 8009f1e:	e001      	b.n	8009f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e005      	b.n	8009f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2bc8      	cmp	r3, #200	@ 0xc8
 8009f28:	d101      	bne.n	8009f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f38:	b084      	sub	sp, #16
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f52:	2300      	movs	r3, #0
 8009f54:	613b      	str	r3, [r7, #16]
 8009f56:	e009      	b.n	8009f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	3340      	adds	r3, #64	@ 0x40
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	2200      	movs	r2, #0
 8009f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	613b      	str	r3, [r7, #16]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b0e      	cmp	r3, #14
 8009f70:	d9f2      	bls.n	8009f58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d11c      	bne.n	8009fb4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f88:	f043 0302 	orr.w	r3, r3, #2
 8009f8c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009faa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fb2:	e00b      	b.n	8009fcc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10d      	bne.n	8009ffc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f968 	bl	800a2c0 <USB_SetDevSpeed>
 8009ff0:	e008      	b.n	800a004 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f963 	bl	800a2c0 <USB_SetDevSpeed>
 8009ffa:	e003      	b.n	800a004 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ffc:	2103      	movs	r1, #3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f95e 	bl	800a2c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a004:	2110      	movs	r1, #16
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f8fa 	bl	800a200 <USB_FlushTxFifo>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f924 	bl	800a264 <USB_FlushRxFifo>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a02c:	461a      	mov	r2, r3
 800a02e:	2300      	movs	r3, #0
 800a030:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a038:	461a      	mov	r2, r3
 800a03a:	2300      	movs	r3, #0
 800a03c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a044:	461a      	mov	r2, r3
 800a046:	2300      	movs	r3, #0
 800a048:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a04a:	2300      	movs	r3, #0
 800a04c:	613b      	str	r3, [r7, #16]
 800a04e:	e043      	b.n	800a0d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a066:	d118      	bne.n	800a09a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10a      	bne.n	800a084 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07a:	461a      	mov	r2, r3
 800a07c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	e013      	b.n	800a0ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	461a      	mov	r2, r3
 800a092:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	e008      	b.n	800a0ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a0d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a0dc:	461a      	mov	r2, r3
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d3b5      	bcc.n	800a050 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	613b      	str	r3, [r7, #16]
 800a0e8:	e043      	b.n	800a172 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a100:	d118      	bne.n	800a134 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a114:	461a      	mov	r2, r3
 800a116:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	e013      	b.n	800a146 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12a:	461a      	mov	r2, r3
 800a12c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	e008      	b.n	800a146 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a140:	461a      	mov	r2, r3
 800a142:	2300      	movs	r3, #0
 800a144:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a152:	461a      	mov	r2, r3
 800a154:	2300      	movs	r3, #0
 800a156:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a164:	461a      	mov	r2, r3
 800a166:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a16a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	3301      	adds	r3, #1
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a176:	461a      	mov	r2, r3
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d3b5      	bcc.n	800a0ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a18c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a190:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a19e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f043 0210 	orr.w	r2, r3, #16
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <USB_DevInit+0x2c4>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a1c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f043 0208 	orr.w	r2, r3, #8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a1d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d107      	bne.n	800a1ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1e4:	f043 0304 	orr.w	r3, r3, #4
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1f8:	b004      	add	sp, #16
 800a1fa:	4770      	bx	lr
 800a1fc:	803c3800 	.word	0x803c3800

0800a200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a21a:	d901      	bls.n	800a220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e01b      	b.n	800a258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	daf2      	bge.n	800a20e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	019b      	lsls	r3, r3, #6
 800a230:	f043 0220 	orr.w	r2, r3, #32
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a244:	d901      	bls.n	800a24a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e006      	b.n	800a258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b20      	cmp	r3, #32
 800a254:	d0f0      	beq.n	800a238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a27c:	d901      	bls.n	800a282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e018      	b.n	800a2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	daf2      	bge.n	800a270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2210      	movs	r2, #16
 800a292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2a0:	d901      	bls.n	800a2a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e006      	b.n	800a2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0310 	and.w	r3, r3, #16
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d0f0      	beq.n	800a294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b087      	sub	sp, #28
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f003 0306 	and.w	r3, r3, #6
 800a30a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d102      	bne.n	800a318 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a312:	2300      	movs	r3, #0
 800a314:	75fb      	strb	r3, [r7, #23]
 800a316:	e00a      	b.n	800a32e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d002      	beq.n	800a324 <USB_GetDevSpeed+0x32>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b06      	cmp	r3, #6
 800a322:	d102      	bne.n	800a32a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a324:	2302      	movs	r3, #2
 800a326:	75fb      	strb	r3, [r7, #23]
 800a328:	e001      	b.n	800a32e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a32a:	230f      	movs	r3, #15
 800a32c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a330:	4618      	mov	r0, r3
 800a332:	371c      	adds	r7, #28
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d13a      	bne.n	800a3ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35e:	69da      	ldr	r2, [r3, #28]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	f003 030f 	and.w	r3, r3, #15
 800a368:	2101      	movs	r1, #1
 800a36a:	fa01 f303 	lsl.w	r3, r1, r3
 800a36e:	b29b      	uxth	r3, r3
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a376:	4313      	orrs	r3, r2
 800a378:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d155      	bne.n	800a43c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	791b      	ldrb	r3, [r3, #4]
 800a3aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	059b      	lsls	r3, r3, #22
 800a3b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	e036      	b.n	800a43c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	2101      	movs	r1, #1
 800a3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e4:	041b      	lsls	r3, r3, #16
 800a3e6:	68f9      	ldr	r1, [r7, #12]
 800a3e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d11a      	bne.n	800a43c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	791b      	ldrb	r3, [r3, #4]
 800a420:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a422:	430b      	orrs	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	0151      	lsls	r1, r2, #5
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	440a      	add	r2, r1
 800a42e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a43a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
	...

0800a44c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d161      	bne.n	800a52c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a47a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a47e:	d11f      	bne.n	800a4c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	0151      	lsls	r1, r2, #5
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	440a      	add	r2, r1
 800a496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a49a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a49e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	0151      	lsls	r1, r2, #5
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	440a      	add	r2, r1
 800a4b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ea:	69da      	ldr	r2, [r3, #28]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 030f 	and.w	r3, r3, #15
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	43db      	mvns	r3, r3
 800a4fe:	68f9      	ldr	r1, [r7, #12]
 800a500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a504:	4013      	ands	r3, r2
 800a506:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	0159      	lsls	r1, r3, #5
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	440b      	add	r3, r1
 800a51e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a522:	4619      	mov	r1, r3
 800a524:	4b35      	ldr	r3, [pc, #212]	@ (800a5fc <USB_DeactivateEndpoint+0x1b0>)
 800a526:	4013      	ands	r3, r2
 800a528:	600b      	str	r3, [r1, #0]
 800a52a:	e060      	b.n	800a5ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a53e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a542:	d11f      	bne.n	800a584 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a562:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	0151      	lsls	r1, r2, #5
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	440a      	add	r2, r1
 800a57a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a57e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a582:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a58a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2101      	movs	r1, #1
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	041b      	lsls	r3, r3, #16
 800a59c:	43db      	mvns	r3, r3
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ae:	69da      	ldr	r2, [r3, #28]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	f003 030f 	and.w	r3, r3, #15
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a5be:	041b      	lsls	r3, r3, #16
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	68f9      	ldr	r1, [r7, #12]
 800a5c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	0159      	lsls	r1, r3, #5
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	440b      	add	r3, r1
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4b05      	ldr	r3, [pc, #20]	@ (800a600 <USB_DeactivateEndpoint+0x1b4>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	ec337800 	.word	0xec337800
 800a600:	eff37800 	.word	0xeff37800

0800a604 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08a      	sub	sp, #40	@ 0x28
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b01      	cmp	r3, #1
 800a622:	f040 817f 	bne.w	800a924 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d132      	bne.n	800a694 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	0151      	lsls	r1, r2, #5
 800a640:	69fa      	ldr	r2, [r7, #28]
 800a642:	440a      	add	r2, r1
 800a644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a648:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a64c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	69fa      	ldr	r2, [r7, #28]
 800a666:	440a      	add	r2, r1
 800a668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a66c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a68c:	0cdb      	lsrs	r3, r3, #19
 800a68e:	04db      	lsls	r3, r3, #19
 800a690:	6113      	str	r3, [r2, #16]
 800a692:	e097      	b.n	800a7c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ae:	0cdb      	lsrs	r3, r3, #19
 800a6b0:	04db      	lsls	r3, r3, #19
 800a6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	0151      	lsls	r1, r2, #5
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a6d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a6d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d11a      	bne.n	800a714 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d903      	bls.n	800a6f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	69fa      	ldr	r2, [r7, #28]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a70c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a710:	6113      	str	r3, [r2, #16]
 800a712:	e044      	b.n	800a79e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	691a      	ldr	r2, [r3, #16]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	4413      	add	r3, r2
 800a71e:	1e5a      	subs	r2, r3, #1
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	8afb      	ldrh	r3, [r7, #22]
 800a73a:	04d9      	lsls	r1, r3, #19
 800a73c:	4ba4      	ldr	r3, [pc, #656]	@ (800a9d0 <USB_EPStartXfer+0x3cc>)
 800a73e:	400b      	ands	r3, r1
 800a740:	69b9      	ldr	r1, [r7, #24]
 800a742:	0148      	lsls	r0, r1, #5
 800a744:	69f9      	ldr	r1, [r7, #28]
 800a746:	4401      	add	r1, r0
 800a748:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a74c:	4313      	orrs	r3, r2
 800a74e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d122      	bne.n	800a79e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	69fa      	ldr	r2, [r7, #28]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a772:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a776:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a784:	691a      	ldr	r2, [r3, #16]
 800a786:	8afb      	ldrh	r3, [r7, #22]
 800a788:	075b      	lsls	r3, r3, #29
 800a78a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a78e:	69b9      	ldr	r1, [r7, #24]
 800a790:	0148      	lsls	r0, r1, #5
 800a792:	69f9      	ldr	r1, [r7, #28]
 800a794:	4401      	add	r1, r0
 800a796:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a79a:	4313      	orrs	r3, r2
 800a79c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b4:	69b9      	ldr	r1, [r7, #24]
 800a7b6:	0148      	lsls	r0, r1, #5
 800a7b8:	69f9      	ldr	r1, [r7, #28]
 800a7ba:	4401      	add	r1, r0
 800a7bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d14b      	bne.n	800a862 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d009      	beq.n	800a7e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7de:	461a      	mov	r2, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d128      	bne.n	800a840 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d110      	bne.n	800a820 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a818:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	e00f      	b.n	800a840 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a83a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a83e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	0151      	lsls	r1, r2, #5
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	440a      	add	r2, r1
 800a856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a85a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	e166      	b.n	800ab30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	0151      	lsls	r1, r2, #5
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	440a      	add	r2, r1
 800a878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a87c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a880:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d015      	beq.n	800a8b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 814e 	beq.w	800ab30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a89a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 030f 	and.w	r3, r3, #15
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8aa:	69f9      	ldr	r1, [r7, #28]
 800a8ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	634b      	str	r3, [r1, #52]	@ 0x34
 800a8b4:	e13c      	b.n	800ab30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d110      	bne.n	800a8e8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	69ba      	ldr	r2, [r7, #24]
 800a8d6:	0151      	lsls	r1, r2, #5
 800a8d8:	69fa      	ldr	r2, [r7, #28]
 800a8da:	440a      	add	r2, r1
 800a8dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	e00f      	b.n	800a908 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	0151      	lsls	r1, r2, #5
 800a8fa:	69fa      	ldr	r2, [r7, #28]
 800a8fc:	440a      	add	r2, r1
 800a8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a906:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	68d9      	ldr	r1, [r3, #12]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	b298      	uxth	r0, r3
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	4603      	mov	r3, r0
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f9b9 	bl	800ac94 <USB_WritePacket>
 800a922:	e105      	b.n	800ab30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	69ba      	ldr	r2, [r7, #24]
 800a934:	0151      	lsls	r1, r2, #5
 800a936:	69fa      	ldr	r2, [r7, #28]
 800a938:	440a      	add	r2, r1
 800a93a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93e:	0cdb      	lsrs	r3, r3, #19
 800a940:	04db      	lsls	r3, r3, #19
 800a942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	69fa      	ldr	r2, [r7, #28]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a95e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a962:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a966:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d132      	bne.n	800a9d4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	689a      	ldr	r2, [r3, #8]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a99c:	69b9      	ldr	r1, [r7, #24]
 800a99e:	0148      	lsls	r0, r1, #5
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	4401      	add	r1, r0
 800a9a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9ca:	6113      	str	r3, [r2, #16]
 800a9cc:	e062      	b.n	800aa94 <USB_EPStartXfer+0x490>
 800a9ce:	bf00      	nop
 800a9d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d123      	bne.n	800aa24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f2:	69b9      	ldr	r1, [r7, #24]
 800a9f4:	0148      	lsls	r0, r1, #5
 800a9f6:	69f9      	ldr	r1, [r7, #28]
 800a9f8:	4401      	add	r1, r0
 800a9fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	69fa      	ldr	r2, [r7, #28]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa20:	6113      	str	r3, [r2, #16]
 800aa22:	e037      	b.n	800aa94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	1e5a      	subs	r2, r3, #1
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	8afa      	ldrh	r2, [r7, #22]
 800aa40:	fb03 f202 	mul.w	r2, r3, r2
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa54:	691a      	ldr	r2, [r3, #16]
 800aa56:	8afb      	ldrh	r3, [r7, #22]
 800aa58:	04d9      	lsls	r1, r3, #19
 800aa5a:	4b38      	ldr	r3, [pc, #224]	@ (800ab3c <USB_EPStartXfer+0x538>)
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	69b9      	ldr	r1, [r7, #24]
 800aa60:	0148      	lsls	r0, r1, #5
 800aa62:	69f9      	ldr	r1, [r7, #28]
 800aa64:	4401      	add	r1, r0
 800aa66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa84:	69b9      	ldr	r1, [r7, #24]
 800aa86:	0148      	lsls	r0, r1, #5
 800aa88:	69f9      	ldr	r1, [r7, #28]
 800aa8a:	4401      	add	r1, r0
 800aa8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aa90:	4313      	orrs	r3, r2
 800aa92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d10d      	bne.n	800aab6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68d9      	ldr	r1, [r3, #12]
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab2:	460a      	mov	r2, r1
 800aab4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	791b      	ldrb	r3, [r3, #4]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d128      	bne.n	800ab10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d110      	bne.n	800aaf0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aae8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	e00f      	b.n	800ab10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	1ff80000 	.word	0x1ff80000

0800ab40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d14a      	bne.n	800abf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab76:	f040 8086 	bne.w	800ac86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	7812      	ldrb	r2, [r2, #0]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	7812      	ldrb	r2, [r2, #0]
 800abb2:	0151      	lsls	r1, r2, #5
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	440a      	add	r2, r1
 800abb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800abce:	4293      	cmp	r3, r2
 800abd0:	d902      	bls.n	800abd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
          break;
 800abd6:	e056      	b.n	800ac86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abf0:	d0e7      	beq.n	800abc2 <USB_EPStopXfer+0x82>
 800abf2:	e048      	b.n	800ac86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac0c:	d13b      	bne.n	800ac86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	7812      	ldrb	r2, [r2, #0]
 800ac22:	0151      	lsls	r1, r2, #5
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	440a      	add	r2, r1
 800ac28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	7812      	ldrb	r2, [r2, #0]
 800ac46:	0151      	lsls	r1, r2, #5
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	440a      	add	r2, r1
 800ac4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d902      	bls.n	800ac6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	75fb      	strb	r3, [r7, #23]
          break;
 800ac6a:	e00c      	b.n	800ac86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac84:	d0e7      	beq.n	800ac56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b089      	sub	sp, #36	@ 0x24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	461a      	mov	r2, r3
 800aca2:	460b      	mov	r3, r1
 800aca4:	71fb      	strb	r3, [r7, #7]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d123      	bne.n	800ad02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acba:	88bb      	ldrh	r3, [r7, #4]
 800acbc:	3303      	adds	r3, #3
 800acbe:	089b      	lsrs	r3, r3, #2
 800acc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800acc2:	2300      	movs	r3, #0
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e018      	b.n	800acfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	031a      	lsls	r2, r3, #12
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acd4:	461a      	mov	r2, r3
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6013      	str	r3, [r2, #0]
      pSrc++;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	3301      	adds	r3, #1
 800ace0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	3301      	adds	r3, #1
 800ace6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	3301      	adds	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	3301      	adds	r3, #1
 800acf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	3301      	adds	r3, #1
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d3e2      	bcc.n	800acc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3724      	adds	r7, #36	@ 0x24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b08b      	sub	sp, #44	@ 0x2c
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	089b      	lsrs	r3, r3, #2
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad36:	2300      	movs	r3, #0
 800ad38:	623b      	str	r3, [r7, #32]
 800ad3a:	e014      	b.n	800ad66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	3301      	adds	r3, #1
 800ad52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	3301      	adds	r3, #1
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	3301      	adds	r3, #1
 800ad64:	623b      	str	r3, [r7, #32]
 800ad66:	6a3a      	ldr	r2, [r7, #32]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d3e6      	bcc.n	800ad3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad6e:	8bfb      	ldrh	r3, [r7, #30]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01e      	beq.n	800adb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f107 0310 	add.w	r3, r7, #16
 800ad84:	6812      	ldr	r2, [r2, #0]
 800ad86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	fa22 f303 	lsr.w	r3, r2, r3
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	701a      	strb	r2, [r3, #0]
      i++;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	3301      	adds	r3, #1
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ada6:	8bfb      	ldrh	r3, [r7, #30]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adac:	8bfb      	ldrh	r3, [r7, #30]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1ea      	bne.n	800ad88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	372c      	adds	r7, #44	@ 0x2c
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	785b      	ldrb	r3, [r3, #1]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d12c      	bne.n	800ae36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	db12      	blt.n	800ae14 <USB_EPSetStall+0x54>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00f      	beq.n	800ae14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	0151      	lsls	r1, r2, #5
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	440a      	add	r2, r1
 800ae0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ae12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	e02b      	b.n	800ae8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db12      	blt.n	800ae6e <USB_EPSetStall+0xae>
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00f      	beq.n	800ae6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	0151      	lsls	r1, r2, #5
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	440a      	add	r2, r1
 800ae64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ae6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	785b      	ldrb	r3, [r3, #1]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d128      	bne.n	800af0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	0151      	lsls	r1, r2, #5
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	440a      	add	r2, r1
 800aece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aed6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	791b      	ldrb	r3, [r3, #4]
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d003      	beq.n	800aee8 <USB_EPClearStall+0x4c>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	791b      	ldrb	r3, [r3, #4]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d138      	bne.n	800af5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	e027      	b.n	800af5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	0151      	lsls	r1, r2, #5
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	440a      	add	r2, r1
 800af20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	791b      	ldrb	r3, [r3, #4]
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d003      	beq.n	800af3a <USB_EPClearStall+0x9e>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	791b      	ldrb	r3, [r3, #4]
 800af36:	2b02      	cmp	r3, #2
 800af38:	d10f      	bne.n	800af5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800af8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afa2:	4313      	orrs	r3, r2
 800afa4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afe2:	f023 0302 	bic.w	r3, r3, #2
 800afe6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b024:	f043 0302 	orr.w	r3, r3, #2
 800b028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4013      	ands	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b050:	68fb      	ldr	r3, [r7, #12]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b05e:	b480      	push	{r7}
 800b060:	b085      	sub	sp, #20
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	4013      	ands	r3, r2
 800b080:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	0c1b      	lsrs	r3, r3, #16
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b092:	b480      	push	{r7}
 800b094:	b085      	sub	sp, #20
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	b29b      	uxth	r3, r3
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b102:	b480      	push	{r7}
 800b104:	b087      	sub	sp, #28
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b124:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b126:	78fb      	ldrb	r3, [r7, #3]
 800b128:	f003 030f 	and.w	r3, r3, #15
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	fa22 f303 	lsr.w	r3, r2, r3
 800b132:	01db      	lsls	r3, r3, #7
 800b134:	b2db      	uxtb	r3, r3
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	4313      	orrs	r3, r2
 800b13a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	4013      	ands	r3, r2
 800b14e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b150:	68bb      	ldr	r3, [r7, #8]
}
 800b152:	4618      	mov	r0, r3
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f003 0301 	and.w	r3, r3, #1
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b194:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b198:	f023 0307 	bic.w	r3, r3, #7
 800b19c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	333c      	adds	r3, #60	@ 0x3c
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4a26      	ldr	r2, [pc, #152]	@ (800b278 <USB_EP0_OutStart+0xb8>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d90a      	bls.n	800b1fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1f4:	d101      	bne.n	800b1fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e037      	b.n	800b26a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b200:	461a      	mov	r2, r3
 800b202:	2300      	movs	r3, #0
 800b204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b228:	f043 0318 	orr.w	r3, r3, #24
 800b22c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b23c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b242:	7afb      	ldrb	r3, [r7, #11]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d10f      	bne.n	800b268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b262:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	4f54300a 	.word	0x4f54300a

0800b27c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3301      	adds	r3, #1
 800b28c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b294:	d901      	bls.n	800b29a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e01b      	b.n	800b2d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	daf2      	bge.n	800b288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	f043 0201 	orr.w	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2be:	d901      	bls.n	800b2c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e006      	b.n	800b2d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d0f0      	beq.n	800b2b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b2f0:	f002 fc2e 	bl	800db50 <USBD_static_malloc>
 800b2f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d109      	bne.n	800b310 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	32b0      	adds	r2, #176	@ 0xb0
 800b306:	2100      	movs	r1, #0
 800b308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b30c:	2302      	movs	r3, #2
 800b30e:	e0d4      	b.n	800b4ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b310:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b314:	2100      	movs	r1, #0
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f003 fe40 	bl	800ef9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	32b0      	adds	r2, #176	@ 0xb0
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	32b0      	adds	r2, #176	@ 0xb0
 800b336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7c1b      	ldrb	r3, [r3, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d138      	bne.n	800b3ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b348:	4b5e      	ldr	r3, [pc, #376]	@ (800b4c4 <USBD_CDC_Init+0x1e4>)
 800b34a:	7819      	ldrb	r1, [r3, #0]
 800b34c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b350:	2202      	movs	r2, #2
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f002 fad9 	bl	800d90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b358:	4b5a      	ldr	r3, [pc, #360]	@ (800b4c4 <USBD_CDC_Init+0x1e4>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	f003 020f 	and.w	r2, r3, #15
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	3324      	adds	r3, #36	@ 0x24
 800b36e:	2201      	movs	r2, #1
 800b370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b372:	4b55      	ldr	r3, [pc, #340]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b374:	7819      	ldrb	r1, [r3, #0]
 800b376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b37a:	2202      	movs	r2, #2
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f002 fac4 	bl	800d90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b382:	4b51      	ldr	r3, [pc, #324]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	f003 020f 	and.w	r2, r3, #15
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b39a:	2201      	movs	r2, #1
 800b39c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b39e:	4b4b      	ldr	r3, [pc, #300]	@ (800b4cc <USBD_CDC_Init+0x1ec>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	f003 020f 	and.w	r2, r3, #15
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3326      	adds	r3, #38	@ 0x26
 800b3b4:	2210      	movs	r2, #16
 800b3b6:	801a      	strh	r2, [r3, #0]
 800b3b8:	e035      	b.n	800b426 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b3ba:	4b42      	ldr	r3, [pc, #264]	@ (800b4c4 <USBD_CDC_Init+0x1e4>)
 800b3bc:	7819      	ldrb	r1, [r3, #0]
 800b3be:	2340      	movs	r3, #64	@ 0x40
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f002 faa1 	bl	800d90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b4c4 <USBD_CDC_Init+0x1e4>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 020f 	and.w	r2, r3, #15
 800b3d0:	6879      	ldr	r1, [r7, #4]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	440b      	add	r3, r1
 800b3dc:	3324      	adds	r3, #36	@ 0x24
 800b3de:	2201      	movs	r2, #1
 800b3e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3e2:	4b39      	ldr	r3, [pc, #228]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b3e4:	7819      	ldrb	r1, [r3, #0]
 800b3e6:	2340      	movs	r3, #64	@ 0x40
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f002 fa8d 	bl	800d90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3f0:	4b35      	ldr	r3, [pc, #212]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 020f 	and.w	r2, r3, #15
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b408:	2201      	movs	r2, #1
 800b40a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b40c:	4b2f      	ldr	r3, [pc, #188]	@ (800b4cc <USBD_CDC_Init+0x1ec>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 020f 	and.w	r2, r3, #15
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	3326      	adds	r3, #38	@ 0x26
 800b422:	2210      	movs	r2, #16
 800b424:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b426:	4b29      	ldr	r3, [pc, #164]	@ (800b4cc <USBD_CDC_Init+0x1ec>)
 800b428:	7819      	ldrb	r1, [r3, #0]
 800b42a:	2308      	movs	r3, #8
 800b42c:	2203      	movs	r2, #3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f002 fa6b 	bl	800d90a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b434:	4b25      	ldr	r3, [pc, #148]	@ (800b4cc <USBD_CDC_Init+0x1ec>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 020f 	and.w	r2, r3, #15
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	3324      	adds	r3, #36	@ 0x24
 800b44a:	2201      	movs	r2, #1
 800b44c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	33b0      	adds	r3, #176	@ 0xb0
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b484:	2302      	movs	r3, #2
 800b486:	e018      	b.n	800b4ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7c1b      	ldrb	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b490:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b492:	7819      	ldrb	r1, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b49a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f002 fb22 	bl	800dae8 <USBD_LL_PrepareReceive>
 800b4a4:	e008      	b.n	800b4b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4a6:	4b08      	ldr	r3, [pc, #32]	@ (800b4c8 <USBD_CDC_Init+0x1e8>)
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4b0:	2340      	movs	r3, #64	@ 0x40
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f002 fb18 	bl	800dae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20000097 	.word	0x20000097
 800b4c8:	20000098 	.word	0x20000098
 800b4cc:	20000099 	.word	0x20000099

0800b4d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b4dc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c8 <USBD_CDC_DeInit+0xf8>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f002 fa37 	bl	800d956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b4e8:	4b37      	ldr	r3, [pc, #220]	@ (800b5c8 <USBD_CDC_DeInit+0xf8>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	f003 020f 	and.w	r2, r3, #15
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	3324      	adds	r3, #36	@ 0x24
 800b4fe:	2200      	movs	r2, #0
 800b500:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b502:	4b32      	ldr	r3, [pc, #200]	@ (800b5cc <USBD_CDC_DeInit+0xfc>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f002 fa24 	bl	800d956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b50e:	4b2f      	ldr	r3, [pc, #188]	@ (800b5cc <USBD_CDC_DeInit+0xfc>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 020f 	and.w	r2, r3, #15
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b526:	2200      	movs	r2, #0
 800b528:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b52a:	4b29      	ldr	r3, [pc, #164]	@ (800b5d0 <USBD_CDC_DeInit+0x100>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f002 fa10 	bl	800d956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b536:	4b26      	ldr	r3, [pc, #152]	@ (800b5d0 <USBD_CDC_DeInit+0x100>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	f003 020f 	and.w	r2, r3, #15
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	3324      	adds	r3, #36	@ 0x24
 800b54c:	2200      	movs	r2, #0
 800b54e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b550:	4b1f      	ldr	r3, [pc, #124]	@ (800b5d0 <USBD_CDC_DeInit+0x100>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 020f 	and.w	r2, r3, #15
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	3326      	adds	r3, #38	@ 0x26
 800b566:	2200      	movs	r2, #0
 800b568:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	32b0      	adds	r2, #176	@ 0xb0
 800b574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01f      	beq.n	800b5bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	33b0      	adds	r3, #176	@ 0xb0
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	32b0      	adds	r2, #176	@ 0xb0
 800b59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 fae4 	bl	800db6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	32b0      	adds	r2, #176	@ 0xb0
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000097 	.word	0x20000097
 800b5cc:	20000098 	.word	0x20000098
 800b5d0:	20000099 	.word	0x20000099

0800b5d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	32b0      	adds	r2, #176	@ 0xb0
 800b5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e0bf      	b.n	800b784 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d050      	beq.n	800b6b2 <USBD_CDC_Setup+0xde>
 800b610:	2b20      	cmp	r3, #32
 800b612:	f040 80af 	bne.w	800b774 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	88db      	ldrh	r3, [r3, #6]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d03a      	beq.n	800b694 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	b25b      	sxtb	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	da1b      	bge.n	800b660 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	33b0      	adds	r3, #176	@ 0xb0
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b63e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	88d2      	ldrh	r2, [r2, #6]
 800b644:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	88db      	ldrh	r3, [r3, #6]
 800b64a:	2b07      	cmp	r3, #7
 800b64c:	bf28      	it	cs
 800b64e:	2307      	movcs	r3, #7
 800b650:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	89fa      	ldrh	r2, [r7, #14]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fd53 	bl	800d104 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b65e:	e090      	b.n	800b782 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	785a      	ldrb	r2, [r3, #1]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	88db      	ldrh	r3, [r3, #6]
 800b66e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b670:	d803      	bhi.n	800b67a <USBD_CDC_Setup+0xa6>
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	88db      	ldrh	r3, [r3, #6]
 800b676:	b2da      	uxtb	r2, r3
 800b678:	e000      	b.n	800b67c <USBD_CDC_Setup+0xa8>
 800b67a:	2240      	movs	r2, #64	@ 0x40
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b682:	6939      	ldr	r1, [r7, #16]
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b68a:	461a      	mov	r2, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f001 fd65 	bl	800d15c <USBD_CtlPrepareRx>
      break;
 800b692:	e076      	b.n	800b782 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	33b0      	adds	r3, #176	@ 0xb0
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	7850      	ldrb	r0, [r2, #1]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	4798      	blx	r3
      break;
 800b6b0:	e067      	b.n	800b782 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b0b      	cmp	r3, #11
 800b6b8:	d851      	bhi.n	800b75e <USBD_CDC_Setup+0x18a>
 800b6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <USBD_CDC_Setup+0xec>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6f1 	.word	0x0800b6f1
 800b6c4:	0800b76d 	.word	0x0800b76d
 800b6c8:	0800b75f 	.word	0x0800b75f
 800b6cc:	0800b75f 	.word	0x0800b75f
 800b6d0:	0800b75f 	.word	0x0800b75f
 800b6d4:	0800b75f 	.word	0x0800b75f
 800b6d8:	0800b75f 	.word	0x0800b75f
 800b6dc:	0800b75f 	.word	0x0800b75f
 800b6e0:	0800b75f 	.word	0x0800b75f
 800b6e4:	0800b75f 	.word	0x0800b75f
 800b6e8:	0800b71b 	.word	0x0800b71b
 800b6ec:	0800b745 	.word	0x0800b745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	d107      	bne.n	800b70c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6fc:	f107 030a 	add.w	r3, r7, #10
 800b700:	2202      	movs	r2, #2
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 fcfd 	bl	800d104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b70a:	e032      	b.n	800b772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 fc7b 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	75fb      	strb	r3, [r7, #23]
          break;
 800b718:	e02b      	b.n	800b772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b03      	cmp	r3, #3
 800b724:	d107      	bne.n	800b736 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b726:	f107 030d 	add.w	r3, r7, #13
 800b72a:	2201      	movs	r2, #1
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fce8 	bl	800d104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b734:	e01d      	b.n	800b772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 fc66 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b73e:	2303      	movs	r3, #3
 800b740:	75fb      	strb	r3, [r7, #23]
          break;
 800b742:	e016      	b.n	800b772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d00f      	beq.n	800b770 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fc59 	bl	800d00a <USBD_CtlError>
            ret = USBD_FAIL;
 800b758:	2303      	movs	r3, #3
 800b75a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b75c:	e008      	b.n	800b770 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 fc52 	bl	800d00a <USBD_CtlError>
          ret = USBD_FAIL;
 800b766:	2303      	movs	r3, #3
 800b768:	75fb      	strb	r3, [r7, #23]
          break;
 800b76a:	e002      	b.n	800b772 <USBD_CDC_Setup+0x19e>
          break;
 800b76c:	bf00      	nop
 800b76e:	e008      	b.n	800b782 <USBD_CDC_Setup+0x1ae>
          break;
 800b770:	bf00      	nop
      }
      break;
 800b772:	e006      	b.n	800b782 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 fc47 	bl	800d00a <USBD_CtlError>
      ret = USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	75fb      	strb	r3, [r7, #23]
      break;
 800b780:	bf00      	nop
  }

  return (uint8_t)ret;
 800b782:	7dfb      	ldrb	r3, [r7, #23]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b79e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	32b0      	adds	r2, #176	@ 0xb0
 800b7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e065      	b.n	800b882 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	32b0      	adds	r2, #176	@ 0xb0
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	f003 020f 	and.w	r2, r3, #15
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	3318      	adds	r3, #24
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d02f      	beq.n	800b840 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	f003 020f 	and.w	r2, r3, #15
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	440b      	add	r3, r1
 800b7f2:	3318      	adds	r3, #24
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	78fb      	ldrb	r3, [r7, #3]
 800b7f8:	f003 010f 	and.w	r1, r3, #15
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	460b      	mov	r3, r1
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	440b      	add	r3, r1
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4403      	add	r3, r0
 800b808:	331c      	adds	r3, #28
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b810:	fb01 f303 	mul.w	r3, r1, r3
 800b814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b816:	2b00      	cmp	r3, #0
 800b818:	d112      	bne.n	800b840 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	f003 020f 	and.w	r2, r3, #15
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	440b      	add	r3, r1
 800b82c:	3318      	adds	r3, #24
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b832:	78f9      	ldrb	r1, [r7, #3]
 800b834:	2300      	movs	r3, #0
 800b836:	2200      	movs	r2, #0
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f002 f934 	bl	800daa6 <USBD_LL_Transmit>
 800b83e:	e01f      	b.n	800b880 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	33b0      	adds	r3, #176	@ 0xb0
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d010      	beq.n	800b880 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	33b0      	adds	r3, #176	@ 0xb0
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b87c:	78fa      	ldrb	r2, [r7, #3]
 800b87e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	460b      	mov	r3, r1
 800b894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32b0      	adds	r2, #176	@ 0xb0
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	32b0      	adds	r2, #176	@ 0xb0
 800b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e01a      	b.n	800b8f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f002 f932 	bl	800db2a <USBD_LL_GetRxDataSize>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	33b0      	adds	r3, #176	@ 0xb0
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	32b0      	adds	r2, #176	@ 0xb0
 800b90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b918:	2303      	movs	r3, #3
 800b91a:	e024      	b.n	800b966 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	33b0      	adds	r3, #176	@ 0xb0
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d019      	beq.n	800b964 <USBD_CDC_EP0_RxReady+0x6a>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b936:	2bff      	cmp	r3, #255	@ 0xff
 800b938:	d014      	beq.n	800b964 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	33b0      	adds	r3, #176	@ 0xb0
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b952:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b95a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	22ff      	movs	r2, #255	@ 0xff
 800b960:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b978:	2182      	movs	r1, #130	@ 0x82
 800b97a:	4818      	ldr	r0, [pc, #96]	@ (800b9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b97c:	f000 fd0f 	bl	800c39e <USBD_GetEpDesc>
 800b980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b982:	2101      	movs	r1, #1
 800b984:	4815      	ldr	r0, [pc, #84]	@ (800b9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b986:	f000 fd0a 	bl	800c39e <USBD_GetEpDesc>
 800b98a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b98c:	2181      	movs	r1, #129	@ 0x81
 800b98e:	4813      	ldr	r0, [pc, #76]	@ (800b9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b990:	f000 fd05 	bl	800c39e <USBD_GetEpDesc>
 800b994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2210      	movs	r2, #16
 800b9a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9b0:	711a      	strb	r2, [r3, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9c4:	711a      	strb	r2, [r3, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2243      	movs	r2, #67	@ 0x43
 800b9ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9d0:	4b02      	ldr	r3, [pc, #8]	@ (800b9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000054 	.word	0x20000054

0800b9e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9e8:	2182      	movs	r1, #130	@ 0x82
 800b9ea:	4818      	ldr	r0, [pc, #96]	@ (800ba4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9ec:	f000 fcd7 	bl	800c39e <USBD_GetEpDesc>
 800b9f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4815      	ldr	r0, [pc, #84]	@ (800ba4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9f6:	f000 fcd2 	bl	800c39e <USBD_GetEpDesc>
 800b9fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9fc:	2181      	movs	r1, #129	@ 0x81
 800b9fe:	4813      	ldr	r0, [pc, #76]	@ (800ba4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba00:	f000 fccd 	bl	800c39e <USBD_GetEpDesc>
 800ba04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2210      	movs	r2, #16
 800ba10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d006      	beq.n	800ba26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	711a      	strb	r2, [r3, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f042 0202 	orr.w	r2, r2, #2
 800ba24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d006      	beq.n	800ba3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	711a      	strb	r2, [r3, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f042 0202 	orr.w	r2, r2, #2
 800ba38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2243      	movs	r2, #67	@ 0x43
 800ba3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba40:	4b02      	ldr	r3, [pc, #8]	@ (800ba4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000054 	.word	0x20000054

0800ba50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba58:	2182      	movs	r1, #130	@ 0x82
 800ba5a:	4818      	ldr	r0, [pc, #96]	@ (800babc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba5c:	f000 fc9f 	bl	800c39e <USBD_GetEpDesc>
 800ba60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba62:	2101      	movs	r1, #1
 800ba64:	4815      	ldr	r0, [pc, #84]	@ (800babc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba66:	f000 fc9a 	bl	800c39e <USBD_GetEpDesc>
 800ba6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba6c:	2181      	movs	r1, #129	@ 0x81
 800ba6e:	4813      	ldr	r0, [pc, #76]	@ (800babc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba70:	f000 fc95 	bl	800c39e <USBD_GetEpDesc>
 800ba74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	2210      	movs	r2, #16
 800ba80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d006      	beq.n	800ba96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba90:	711a      	strb	r2, [r3, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d006      	beq.n	800baaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baa4:	711a      	strb	r2, [r3, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2243      	movs	r2, #67	@ 0x43
 800baae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bab0:	4b02      	ldr	r3, [pc, #8]	@ (800babc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20000054 	.word	0x20000054

0800bac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	220a      	movs	r2, #10
 800bacc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bace:	4b03      	ldr	r3, [pc, #12]	@ (800badc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20000010 	.word	0x20000010

0800bae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e009      	b.n	800bb08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	33b0      	adds	r3, #176	@ 0xb0
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b087      	sub	sp, #28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	32b0      	adds	r2, #176	@ 0xb0
 800bb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e008      	b.n	800bb4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	371c      	adds	r7, #28
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	32b0      	adds	r2, #176	@ 0xb0
 800bb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e004      	b.n	800bb86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
	...

0800bb94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32b0      	adds	r2, #176	@ 0xb0
 800bba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	32b0      	adds	r2, #176	@ 0xb0
 800bbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e018      	b.n	800bbf4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7c1b      	ldrb	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbca:	4b0c      	ldr	r3, [pc, #48]	@ (800bbfc <USBD_CDC_ReceivePacket+0x68>)
 800bbcc:	7819      	ldrb	r1, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 ff85 	bl	800dae8 <USBD_LL_PrepareReceive>
 800bbde:	e008      	b.n	800bbf2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbe0:	4b06      	ldr	r3, [pc, #24]	@ (800bbfc <USBD_CDC_ReceivePacket+0x68>)
 800bbe2:	7819      	ldrb	r1, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbea:	2340      	movs	r3, #64	@ 0x40
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f001 ff7b 	bl	800dae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20000098 	.word	0x20000098

0800bc00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e01f      	b.n	800bc58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	79fa      	ldrb	r2, [r7, #7]
 800bc4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f001 fdf5 	bl	800d83c <USBD_LL_Init>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e025      	b.n	800bcc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	32ae      	adds	r2, #174	@ 0xae
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00f      	beq.n	800bcb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	32ae      	adds	r2, #174	@ 0xae
 800bc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	f107 020e 	add.w	r2, r7, #14
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	4602      	mov	r2, r0
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fdfd 	bl	800d8d4 <USBD_LL_Start>
 800bcda:	4603      	mov	r3, r0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d009      	beq.n	800bd28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	78fa      	ldrb	r2, [r7, #3]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	78fa      	ldrb	r2, [r7, #3]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f001 f90c 	bl	800cf96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd9a:	f003 031f 	and.w	r3, r3, #31
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d01a      	beq.n	800bdd8 <USBD_LL_SetupStage+0x72>
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d822      	bhi.n	800bdec <USBD_LL_SetupStage+0x86>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <USBD_LL_SetupStage+0x4a>
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d00a      	beq.n	800bdc4 <USBD_LL_SetupStage+0x5e>
 800bdae:	e01d      	b.n	800bdec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fb63 	bl	800c484 <USBD_StdDevReq>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc2:	e020      	b.n	800be06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fbcb 	bl	800c568 <USBD_StdItfReq>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd6:	e016      	b.n	800be06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fc2d 	bl	800c640 <USBD_StdEPReq>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
      break;
 800bdea:	e00c      	b.n	800be06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdf2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 fdca 	bl	800d994 <USBD_LL_StallEP>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
      break;
 800be04:	bf00      	nop
  }

  return ret;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	460b      	mov	r3, r1
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800be22:	7afb      	ldrb	r3, [r7, #11]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d16e      	bne.n	800bf06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800be2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be36:	2b03      	cmp	r3, #3
 800be38:	f040 8098 	bne.w	800bf6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	429a      	cmp	r2, r3
 800be46:	d913      	bls.n	800be70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	1ad2      	subs	r2, r2, r3
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	4293      	cmp	r3, r2
 800be60:	bf28      	it	cs
 800be62:	4613      	movcs	r3, r2
 800be64:	461a      	mov	r2, r3
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f001 f994 	bl	800d196 <USBD_CtlContinueRx>
 800be6e:	e07d      	b.n	800bf6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be76:	f003 031f 	and.w	r3, r3, #31
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d014      	beq.n	800bea8 <USBD_LL_DataOutStage+0x98>
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d81d      	bhi.n	800bebe <USBD_LL_DataOutStage+0xae>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <USBD_LL_DataOutStage+0x7c>
 800be86:	2b01      	cmp	r3, #1
 800be88:	d003      	beq.n	800be92 <USBD_LL_DataOutStage+0x82>
 800be8a:	e018      	b.n	800bebe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75bb      	strb	r3, [r7, #22]
            break;
 800be90:	e018      	b.n	800bec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	4619      	mov	r1, r3
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 fa64 	bl	800c36a <USBD_CoreFindIF>
 800bea2:	4603      	mov	r3, r0
 800bea4:	75bb      	strb	r3, [r7, #22]
            break;
 800bea6:	e00d      	b.n	800bec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	4619      	mov	r1, r3
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 fa66 	bl	800c384 <USBD_CoreFindEP>
 800beb8:	4603      	mov	r3, r0
 800beba:	75bb      	strb	r3, [r7, #22]
            break;
 800bebc:	e002      	b.n	800bec4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75bb      	strb	r3, [r7, #22]
            break;
 800bec2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bec4:	7dbb      	ldrb	r3, [r7, #22]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d119      	bne.n	800befe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d113      	bne.n	800befe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bed6:	7dba      	ldrb	r2, [r7, #22]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	32ae      	adds	r2, #174	@ 0xae
 800bedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00b      	beq.n	800befe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bee6:	7dba      	ldrb	r2, [r7, #22]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800beee:	7dba      	ldrb	r2, [r7, #22]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	32ae      	adds	r2, #174	@ 0xae
 800bef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f001 f95a 	bl	800d1b8 <USBD_CtlSendStatus>
 800bf04:	e032      	b.n	800bf6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bf06:	7afb      	ldrb	r3, [r7, #11]
 800bf08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f000 fa37 	bl	800c384 <USBD_CoreFindEP>
 800bf16:	4603      	mov	r3, r0
 800bf18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf1a:	7dbb      	ldrb	r3, [r7, #22]
 800bf1c:	2bff      	cmp	r3, #255	@ 0xff
 800bf1e:	d025      	beq.n	800bf6c <USBD_LL_DataOutStage+0x15c>
 800bf20:	7dbb      	ldrb	r3, [r7, #22]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d122      	bne.n	800bf6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d117      	bne.n	800bf62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bf32:	7dba      	ldrb	r2, [r7, #22]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	32ae      	adds	r2, #174	@ 0xae
 800bf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00f      	beq.n	800bf62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bf42:	7dba      	ldrb	r2, [r7, #22]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bf4a:	7dba      	ldrb	r2, [r7, #22]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	32ae      	adds	r2, #174	@ 0xae
 800bf50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	7afa      	ldrb	r2, [r7, #11]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	4798      	blx	r3
 800bf5e:	4603      	mov	r3, r0
 800bf60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
 800bf6a:	e000      	b.n	800bf6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bf84:	7afb      	ldrb	r3, [r7, #11]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d16f      	bne.n	800c06a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d15a      	bne.n	800c050 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	689a      	ldr	r2, [r3, #8]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d914      	bls.n	800bfd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	6879      	ldr	r1, [r7, #4]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f001 f8bc 	bl	800d13a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f001 fd8d 	bl	800dae8 <USBD_LL_PrepareReceive>
 800bfce:	e03f      	b.n	800c050 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d11c      	bne.n	800c016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d316      	bcc.n	800c016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d20f      	bcs.n	800c016 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bff6:	2200      	movs	r2, #0
 800bff8:	2100      	movs	r1, #0
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f001 f89d 	bl	800d13a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c008:	2300      	movs	r3, #0
 800c00a:	2200      	movs	r2, #0
 800c00c:	2100      	movs	r1, #0
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f001 fd6a 	bl	800dae8 <USBD_LL_PrepareReceive>
 800c014:	e01c      	b.n	800c050 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d10f      	bne.n	800c042 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c042:	2180      	movs	r1, #128	@ 0x80
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f001 fca5 	bl	800d994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f001 f8c7 	bl	800d1de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d03a      	beq.n	800c0d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fe42 	bl	800bce4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c068:	e032      	b.n	800c0d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c06a:	7afb      	ldrb	r3, [r7, #11]
 800c06c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c070:	b2db      	uxtb	r3, r3
 800c072:	4619      	mov	r1, r3
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f985 	bl	800c384 <USBD_CoreFindEP>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	2bff      	cmp	r3, #255	@ 0xff
 800c082:	d025      	beq.n	800c0d0 <USBD_LL_DataInStage+0x15a>
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d122      	bne.n	800c0d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b03      	cmp	r3, #3
 800c094:	d11c      	bne.n	800c0d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c096:	7dfa      	ldrb	r2, [r7, #23]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	32ae      	adds	r2, #174	@ 0xae
 800c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d014      	beq.n	800c0d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c0a6:	7dfa      	ldrb	r2, [r7, #23]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c0ae:	7dfa      	ldrb	r2, [r7, #23]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	32ae      	adds	r2, #174	@ 0xae
 800c0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	7afa      	ldrb	r2, [r7, #11]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c0c6:	7dbb      	ldrb	r3, [r7, #22]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c0cc:	7dbb      	ldrb	r3, [r7, #22]
 800c0ce:	e000      	b.n	800c0d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d014      	beq.n	800c140 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00e      	beq.n	800c140 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6852      	ldr	r2, [r2, #4]
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	4611      	mov	r1, r2
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	4798      	blx	r3
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c140:	2340      	movs	r3, #64	@ 0x40
 800c142:	2200      	movs	r2, #0
 800c144:	2100      	movs	r1, #0
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 fbdf 	bl	800d90a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2240      	movs	r2, #64	@ 0x40
 800c158:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c15c:	2340      	movs	r3, #64	@ 0x40
 800c15e:	2200      	movs	r2, #0
 800c160:	2180      	movs	r1, #128	@ 0x80
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f001 fbd1 	bl	800d90a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2240      	movs	r2, #64	@ 0x40
 800c172:	621a      	str	r2, [r3, #32]

  return ret;
 800c174:	7bfb      	ldrb	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c17e:	b480      	push	{r7}
 800c180:	b083      	sub	sp, #12
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	460b      	mov	r3, r1
 800c188:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	78fa      	ldrb	r2, [r7, #3]
 800c18e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d006      	beq.n	800c1c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	d106      	bne.n	800c1f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b03      	cmp	r3, #3
 800c218:	d110      	bne.n	800c23c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	460b      	mov	r3, r1
 800c250:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32ae      	adds	r2, #174	@ 0xae
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c264:	2303      	movs	r3, #3
 800c266:	e01c      	b.n	800c2a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b03      	cmp	r3, #3
 800c272:	d115      	bne.n	800c2a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	32ae      	adds	r2, #174	@ 0xae
 800c27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c282:	6a1b      	ldr	r3, [r3, #32]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	32ae      	adds	r2, #174	@ 0xae
 800c292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	78fa      	ldrb	r2, [r7, #3]
 800c29a:	4611      	mov	r1, r2
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	32ae      	adds	r2, #174	@ 0xae
 800c2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e01c      	b.n	800c306 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d115      	bne.n	800c304 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	32ae      	adds	r2, #174	@ 0xae
 800c2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	32ae      	adds	r2, #174	@ 0xae
 800c2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	4611      	mov	r1, r2
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00e      	beq.n	800c360 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6852      	ldr	r2, [r2, #4]
 800c34e:	b2d2      	uxtb	r2, r2
 800c350:	4611      	mov	r1, r2
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	4798      	blx	r3
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c35c:	2303      	movs	r3, #3
 800c35e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b083      	sub	sp, #12
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c376:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c390:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b086      	sub	sp, #24
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	885b      	ldrh	r3, [r3, #2]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d91f      	bls.n	800c404 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c3ca:	e013      	b.n	800c3f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c3cc:	f107 030a 	add.w	r3, r7, #10
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6978      	ldr	r0, [r7, #20]
 800c3d4:	f000 f81b 	bl	800c40e <USBD_GetNextDesc>
 800c3d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	d108      	bne.n	800c3f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	789b      	ldrb	r3, [r3, #2]
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d008      	beq.n	800c402 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	885b      	ldrh	r3, [r3, #2]
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	897b      	ldrh	r3, [r7, #10]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d8e5      	bhi.n	800c3cc <USBD_GetEpDesc+0x2e>
 800c400:	e000      	b.n	800c404 <USBD_GetEpDesc+0x66>
          break;
 800c402:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c404:	693b      	ldr	r3, [r7, #16]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c40e:	b480      	push	{r7}
 800c410:	b085      	sub	sp, #20
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	7812      	ldrb	r2, [r2, #0]
 800c424:	4413      	add	r3, r2
 800c426:	b29a      	uxth	r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	461a      	mov	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4413      	add	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c438:	68fb      	ldr	r3, [r7, #12]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c446:	b480      	push	{r7}
 800c448:	b087      	sub	sp, #28
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	3301      	adds	r3, #1
 800c45c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c464:	8a3b      	ldrh	r3, [r7, #16]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	b21a      	sxth	r2, r3
 800c46a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c46e:	4313      	orrs	r3, r2
 800c470:	b21b      	sxth	r3, r3
 800c472:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c474:	89fb      	ldrh	r3, [r7, #14]
}
 800c476:	4618      	mov	r0, r3
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
	...

0800c484 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c49a:	2b40      	cmp	r3, #64	@ 0x40
 800c49c:	d005      	beq.n	800c4aa <USBD_StdDevReq+0x26>
 800c49e:	2b40      	cmp	r3, #64	@ 0x40
 800c4a0:	d857      	bhi.n	800c552 <USBD_StdDevReq+0xce>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00f      	beq.n	800c4c6 <USBD_StdDevReq+0x42>
 800c4a6:	2b20      	cmp	r3, #32
 800c4a8:	d153      	bne.n	800c552 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	32ae      	adds	r2, #174	@ 0xae
 800c4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	4798      	blx	r3
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c4:	e04a      	b.n	800c55c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	2b09      	cmp	r3, #9
 800c4cc:	d83b      	bhi.n	800c546 <USBD_StdDevReq+0xc2>
 800c4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d4 <USBD_StdDevReq+0x50>)
 800c4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d4:	0800c529 	.word	0x0800c529
 800c4d8:	0800c53d 	.word	0x0800c53d
 800c4dc:	0800c547 	.word	0x0800c547
 800c4e0:	0800c533 	.word	0x0800c533
 800c4e4:	0800c547 	.word	0x0800c547
 800c4e8:	0800c507 	.word	0x0800c507
 800c4ec:	0800c4fd 	.word	0x0800c4fd
 800c4f0:	0800c547 	.word	0x0800c547
 800c4f4:	0800c51f 	.word	0x0800c51f
 800c4f8:	0800c511 	.word	0x0800c511
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fa3c 	bl	800c97c <USBD_GetDescriptor>
          break;
 800c504:	e024      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fba1 	bl	800cc50 <USBD_SetAddress>
          break;
 800c50e:	e01f      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fbe0 	bl	800ccd8 <USBD_SetConfig>
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]
          break;
 800c51c:	e018      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fc83 	bl	800ce2c <USBD_GetConfig>
          break;
 800c526:	e013      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fcb4 	bl	800ce98 <USBD_GetStatus>
          break;
 800c530:	e00e      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fce3 	bl	800cf00 <USBD_SetFeature>
          break;
 800c53a:	e009      	b.n	800c550 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fd07 	bl	800cf52 <USBD_ClrFeature>
          break;
 800c544:	e004      	b.n	800c550 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fd5e 	bl	800d00a <USBD_CtlError>
          break;
 800c54e:	bf00      	nop
      }
      break;
 800c550:	e004      	b.n	800c55c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fd58 	bl	800d00a <USBD_CtlError>
      break;
 800c55a:	bf00      	nop
  }

  return ret;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop

0800c568 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c57e:	2b40      	cmp	r3, #64	@ 0x40
 800c580:	d005      	beq.n	800c58e <USBD_StdItfReq+0x26>
 800c582:	2b40      	cmp	r3, #64	@ 0x40
 800c584:	d852      	bhi.n	800c62c <USBD_StdItfReq+0xc4>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <USBD_StdItfReq+0x26>
 800c58a:	2b20      	cmp	r3, #32
 800c58c:	d14e      	bne.n	800c62c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c594:	b2db      	uxtb	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d840      	bhi.n	800c61e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	889b      	ldrh	r3, [r3, #4]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d836      	bhi.n	800c614 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	889b      	ldrh	r3, [r3, #4]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fedb 	bl	800c36a <USBD_CoreFindIF>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2bff      	cmp	r3, #255	@ 0xff
 800c5bc:	d01d      	beq.n	800c5fa <USBD_StdItfReq+0x92>
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d11a      	bne.n	800c5fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c5c4:	7bba      	ldrb	r2, [r7, #14]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	32ae      	adds	r2, #174	@ 0xae
 800c5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00f      	beq.n	800c5f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c5d4:	7bba      	ldrb	r2, [r7, #14]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5dc:	7bba      	ldrb	r2, [r7, #14]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	32ae      	adds	r2, #174	@ 0xae
 800c5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	4798      	blx	r3
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c5f2:	e004      	b.n	800c5fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c5f8:	e001      	b.n	800c5fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	88db      	ldrh	r3, [r3, #6]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d110      	bne.n	800c628 <USBD_StdItfReq+0xc0>
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10d      	bne.n	800c628 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fdd3 	bl	800d1b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c612:	e009      	b.n	800c628 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fcf7 	bl	800d00a <USBD_CtlError>
          break;
 800c61c:	e004      	b.n	800c628 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fcf2 	bl	800d00a <USBD_CtlError>
          break;
 800c626:	e000      	b.n	800c62a <USBD_StdItfReq+0xc2>
          break;
 800c628:	bf00      	nop
      }
      break;
 800c62a:	e004      	b.n	800c636 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fceb 	bl	800d00a <USBD_CtlError>
      break;
 800c634:	bf00      	nop
  }

  return ret;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	889b      	ldrh	r3, [r3, #4]
 800c652:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c65c:	2b40      	cmp	r3, #64	@ 0x40
 800c65e:	d007      	beq.n	800c670 <USBD_StdEPReq+0x30>
 800c660:	2b40      	cmp	r3, #64	@ 0x40
 800c662:	f200 817f 	bhi.w	800c964 <USBD_StdEPReq+0x324>
 800c666:	2b00      	cmp	r3, #0
 800c668:	d02a      	beq.n	800c6c0 <USBD_StdEPReq+0x80>
 800c66a:	2b20      	cmp	r3, #32
 800c66c:	f040 817a 	bne.w	800c964 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fe85 	bl	800c384 <USBD_CoreFindEP>
 800c67a:	4603      	mov	r3, r0
 800c67c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c67e:	7b7b      	ldrb	r3, [r7, #13]
 800c680:	2bff      	cmp	r3, #255	@ 0xff
 800c682:	f000 8174 	beq.w	800c96e <USBD_StdEPReq+0x32e>
 800c686:	7b7b      	ldrb	r3, [r7, #13]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f040 8170 	bne.w	800c96e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c68e:	7b7a      	ldrb	r2, [r7, #13]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c696:	7b7a      	ldrb	r2, [r7, #13]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	32ae      	adds	r2, #174	@ 0xae
 800c69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 8163 	beq.w	800c96e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c6a8:	7b7a      	ldrb	r2, [r7, #13]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	32ae      	adds	r2, #174	@ 0xae
 800c6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c6be:	e156      	b.n	800c96e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d008      	beq.n	800c6da <USBD_StdEPReq+0x9a>
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	f300 8145 	bgt.w	800c958 <USBD_StdEPReq+0x318>
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 809b 	beq.w	800c80a <USBD_StdEPReq+0x1ca>
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d03c      	beq.n	800c752 <USBD_StdEPReq+0x112>
 800c6d8:	e13e      	b.n	800c958 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d002      	beq.n	800c6ec <USBD_StdEPReq+0xac>
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d016      	beq.n	800c718 <USBD_StdEPReq+0xd8>
 800c6ea:	e02c      	b.n	800c746 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00d      	beq.n	800c70e <USBD_StdEPReq+0xce>
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	2b80      	cmp	r3, #128	@ 0x80
 800c6f6:	d00a      	beq.n	800c70e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f001 f949 	bl	800d994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c702:	2180      	movs	r1, #128	@ 0x80
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 f945 	bl	800d994 <USBD_LL_StallEP>
 800c70a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c70c:	e020      	b.n	800c750 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fc7a 	bl	800d00a <USBD_CtlError>
              break;
 800c716:	e01b      	b.n	800c750 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	885b      	ldrh	r3, [r3, #2]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10e      	bne.n	800c73e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00b      	beq.n	800c73e <USBD_StdEPReq+0xfe>
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	2b80      	cmp	r3, #128	@ 0x80
 800c72a:	d008      	beq.n	800c73e <USBD_StdEPReq+0xfe>
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	88db      	ldrh	r3, [r3, #6]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d104      	bne.n	800c73e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 f92b 	bl	800d994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fd3a 	bl	800d1b8 <USBD_CtlSendStatus>

              break;
 800c744:	e004      	b.n	800c750 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fc5e 	bl	800d00a <USBD_CtlError>
              break;
 800c74e:	bf00      	nop
          }
          break;
 800c750:	e107      	b.n	800c962 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d002      	beq.n	800c764 <USBD_StdEPReq+0x124>
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d016      	beq.n	800c790 <USBD_StdEPReq+0x150>
 800c762:	e04b      	b.n	800c7fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00d      	beq.n	800c786 <USBD_StdEPReq+0x146>
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	2b80      	cmp	r3, #128	@ 0x80
 800c76e:	d00a      	beq.n	800c786 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f001 f90d 	bl	800d994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c77a:	2180      	movs	r1, #128	@ 0x80
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 f909 	bl	800d994 <USBD_LL_StallEP>
 800c782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c784:	e040      	b.n	800c808 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fc3e 	bl	800d00a <USBD_CtlError>
              break;
 800c78e:	e03b      	b.n	800c808 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	885b      	ldrh	r3, [r3, #2]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d136      	bne.n	800c806 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d004      	beq.n	800c7ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f001 f913 	bl	800d9d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fd03 	bl	800d1b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fde4 	bl	800c384 <USBD_CoreFindEP>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7c0:	7b7b      	ldrb	r3, [r7, #13]
 800c7c2:	2bff      	cmp	r3, #255	@ 0xff
 800c7c4:	d01f      	beq.n	800c806 <USBD_StdEPReq+0x1c6>
 800c7c6:	7b7b      	ldrb	r3, [r7, #13]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d11c      	bne.n	800c806 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c7cc:	7b7a      	ldrb	r2, [r7, #13]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c7d4:	7b7a      	ldrb	r2, [r7, #13]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	32ae      	adds	r2, #174	@ 0xae
 800c7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d010      	beq.n	800c806 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c7e4:	7b7a      	ldrb	r2, [r7, #13]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	32ae      	adds	r2, #174	@ 0xae
 800c7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	4798      	blx	r3
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c7fa:	e004      	b.n	800c806 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fc03 	bl	800d00a <USBD_CtlError>
              break;
 800c804:	e000      	b.n	800c808 <USBD_StdEPReq+0x1c8>
              break;
 800c806:	bf00      	nop
          }
          break;
 800c808:	e0ab      	b.n	800c962 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b02      	cmp	r3, #2
 800c814:	d002      	beq.n	800c81c <USBD_StdEPReq+0x1dc>
 800c816:	2b03      	cmp	r3, #3
 800c818:	d032      	beq.n	800c880 <USBD_StdEPReq+0x240>
 800c81a:	e097      	b.n	800c94c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c81c:	7bbb      	ldrb	r3, [r7, #14]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <USBD_StdEPReq+0x1f2>
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	2b80      	cmp	r3, #128	@ 0x80
 800c826:	d004      	beq.n	800c832 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fbed 	bl	800d00a <USBD_CtlError>
                break;
 800c830:	e091      	b.n	800c956 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c836:	2b00      	cmp	r3, #0
 800c838:	da0b      	bge.n	800c852 <USBD_StdEPReq+0x212>
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c840:	4613      	mov	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	3310      	adds	r3, #16
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	3304      	adds	r3, #4
 800c850:	e00b      	b.n	800c86a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c852:	7bbb      	ldrb	r3, [r7, #14]
 800c854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c858:	4613      	mov	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	4413      	add	r3, r2
 800c868:	3304      	adds	r3, #4
 800c86a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2202      	movs	r2, #2
 800c876:	4619      	mov	r1, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fc43 	bl	800d104 <USBD_CtlSendData>
              break;
 800c87e:	e06a      	b.n	800c956 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da11      	bge.n	800c8ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	f003 020f 	and.w	r2, r3, #15
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	4613      	mov	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	3324      	adds	r3, #36	@ 0x24
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d117      	bne.n	800c8d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fbb0 	bl	800d00a <USBD_CtlError>
                  break;
 800c8aa:	e054      	b.n	800c956 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8ac:	7bbb      	ldrb	r3, [r7, #14]
 800c8ae:	f003 020f 	and.w	r2, r3, #15
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	440b      	add	r3, r1
 800c8be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d104      	bne.n	800c8d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fb9d 	bl	800d00a <USBD_CtlError>
                  break;
 800c8d0:	e041      	b.n	800c956 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	da0b      	bge.n	800c8f2 <USBD_StdEPReq+0x2b2>
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
 800c8dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	3310      	adds	r3, #16
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	e00b      	b.n	800c90a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8f2:	7bbb      	ldrb	r3, [r7, #14]
 800c8f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	4413      	add	r3, r2
 800c908:	3304      	adds	r3, #4
 800c90a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d002      	beq.n	800c918 <USBD_StdEPReq+0x2d8>
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b80      	cmp	r3, #128	@ 0x80
 800c916:	d103      	bne.n	800c920 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	e00e      	b.n	800c93e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f001 f873 	bl	800da10 <USBD_LL_IsStallEP>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2201      	movs	r2, #1
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	e002      	b.n	800c93e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2202      	movs	r2, #2
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fbdd 	bl	800d104 <USBD_CtlSendData>
              break;
 800c94a:	e004      	b.n	800c956 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fb5b 	bl	800d00a <USBD_CtlError>
              break;
 800c954:	bf00      	nop
          }
          break;
 800c956:	e004      	b.n	800c962 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fb55 	bl	800d00a <USBD_CtlError>
          break;
 800c960:	bf00      	nop
      }
      break;
 800c962:	e005      	b.n	800c970 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fb4f 	bl	800d00a <USBD_CtlError>
      break;
 800c96c:	e000      	b.n	800c970 <USBD_StdEPReq+0x330>
      break;
 800c96e:	bf00      	nop
  }

  return ret;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	0a1b      	lsrs	r3, r3, #8
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3b01      	subs	r3, #1
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	f200 8128 	bhi.w	800cbf2 <USBD_GetDescriptor+0x276>
 800c9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9a8 <USBD_GetDescriptor+0x2c>)
 800c9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a8:	0800c9c5 	.word	0x0800c9c5
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800ca1d 	.word	0x0800ca1d
 800c9b4:	0800cbf3 	.word	0x0800cbf3
 800c9b8:	0800cbf3 	.word	0x0800cbf3
 800c9bc:	0800cb93 	.word	0x0800cb93
 800c9c0:	0800cbbf 	.word	0x0800cbbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
      break;
 800c9da:	e112      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7c1b      	ldrb	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10d      	bne.n	800ca00 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ec:	f107 0208 	add.w	r2, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9fe:	e100      	b.n	800cc02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca08:	f107 0208 	add.w	r2, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
      break;
 800ca1a:	e0f2      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	885b      	ldrh	r3, [r3, #2]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	f200 80ac 	bhi.w	800cb80 <USBD_GetDescriptor+0x204>
 800ca28:	a201      	add	r2, pc, #4	@ (adr r2, 800ca30 <USBD_GetDescriptor+0xb4>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800ca49 	.word	0x0800ca49
 800ca34:	0800ca7d 	.word	0x0800ca7d
 800ca38:	0800cab1 	.word	0x0800cab1
 800ca3c:	0800cae5 	.word	0x0800cae5
 800ca40:	0800cb19 	.word	0x0800cb19
 800ca44:	0800cb4d 	.word	0x0800cb4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00b      	beq.n	800ca6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	7c12      	ldrb	r2, [r2, #16]
 800ca60:	f107 0108 	add.w	r1, r7, #8
 800ca64:	4610      	mov	r0, r2
 800ca66:	4798      	blx	r3
 800ca68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca6a:	e091      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 facb 	bl	800d00a <USBD_CtlError>
            err++;
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	3301      	adds	r3, #1
 800ca78:	72fb      	strb	r3, [r7, #11]
          break;
 800ca7a:	e089      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	7c12      	ldrb	r2, [r2, #16]
 800ca94:	f107 0108 	add.w	r1, r7, #8
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4798      	blx	r3
 800ca9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca9e:	e077      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fab1 	bl	800d00a <USBD_CtlError>
            err++;
 800caa8:	7afb      	ldrb	r3, [r7, #11]
 800caaa:	3301      	adds	r3, #1
 800caac:	72fb      	strb	r3, [r7, #11]
          break;
 800caae:	e06f      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	7c12      	ldrb	r2, [r2, #16]
 800cac8:	f107 0108 	add.w	r1, r7, #8
 800cacc:	4610      	mov	r0, r2
 800cace:	4798      	blx	r3
 800cad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cad2:	e05d      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa97 	bl	800d00a <USBD_CtlError>
            err++;
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	3301      	adds	r3, #1
 800cae0:	72fb      	strb	r3, [r7, #11]
          break;
 800cae2:	e055      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	7c12      	ldrb	r2, [r2, #16]
 800cafc:	f107 0108 	add.w	r1, r7, #8
 800cb00:	4610      	mov	r0, r2
 800cb02:	4798      	blx	r3
 800cb04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb06:	e043      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa7d 	bl	800d00a <USBD_CtlError>
            err++;
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	3301      	adds	r3, #1
 800cb14:	72fb      	strb	r3, [r7, #11]
          break;
 800cb16:	e03b      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	7c12      	ldrb	r2, [r2, #16]
 800cb30:	f107 0108 	add.w	r1, r7, #8
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
 800cb38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb3a:	e029      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa63 	bl	800d00a <USBD_CtlError>
            err++;
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	3301      	adds	r3, #1
 800cb48:	72fb      	strb	r3, [r7, #11]
          break;
 800cb4a:	e021      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	7c12      	ldrb	r2, [r2, #16]
 800cb64:	f107 0108 	add.w	r1, r7, #8
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
 800cb6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb6e:	e00f      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fa49 	bl	800d00a <USBD_CtlError>
            err++;
 800cb78:	7afb      	ldrb	r3, [r7, #11]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb7e:	e007      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa41 	bl	800d00a <USBD_CtlError>
          err++;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb8e:	bf00      	nop
      }
      break;
 800cb90:	e037      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	7c1b      	ldrb	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d109      	bne.n	800cbae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba2:	f107 0208 	add.w	r2, r7, #8
 800cba6:	4610      	mov	r0, r2
 800cba8:	4798      	blx	r3
 800cbaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbac:	e029      	b.n	800cc02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa2a 	bl	800d00a <USBD_CtlError>
        err++;
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	72fb      	strb	r3, [r7, #11]
      break;
 800cbbc:	e021      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7c1b      	ldrb	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10d      	bne.n	800cbe2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbce:	f107 0208 	add.w	r2, r7, #8
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4798      	blx	r3
 800cbd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	2207      	movs	r2, #7
 800cbde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbe0:	e00f      	b.n	800cc02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fa10 	bl	800d00a <USBD_CtlError>
        err++;
 800cbea:	7afb      	ldrb	r3, [r7, #11]
 800cbec:	3301      	adds	r3, #1
 800cbee:	72fb      	strb	r3, [r7, #11]
      break;
 800cbf0:	e007      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fa08 	bl	800d00a <USBD_CtlError>
      err++;
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	72fb      	strb	r3, [r7, #11]
      break;
 800cc00:	bf00      	nop
  }

  if (err != 0U)
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11e      	bne.n	800cc46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	88db      	ldrh	r3, [r3, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d016      	beq.n	800cc3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cc10:	893b      	ldrh	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00e      	beq.n	800cc34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	88da      	ldrh	r2, [r3, #6]
 800cc1a:	893b      	ldrh	r3, [r7, #8]
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	bf28      	it	cs
 800cc20:	4613      	movcs	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc26:	893b      	ldrh	r3, [r7, #8]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fa69 	bl	800d104 <USBD_CtlSendData>
 800cc32:	e009      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f9e7 	bl	800d00a <USBD_CtlError>
 800cc3c:	e004      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 faba 	bl	800d1b8 <USBD_CtlSendStatus>
 800cc44:	e000      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    return;
 800cc46:	bf00      	nop
  }
}
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop

0800cc50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	889b      	ldrh	r3, [r3, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d131      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	88db      	ldrh	r3, [r3, #6]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d12d      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc70:	d829      	bhi.n	800ccc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d104      	bne.n	800cc94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f9bc 	bl	800d00a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc92:	e01d      	b.n	800ccd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7bfa      	ldrb	r2, [r7, #15]
 800cc98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fee1 	bl	800da68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fa86 	bl	800d1b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccba:	e009      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc4:	e004      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f99e 	bl	800d00a <USBD_CtlError>
  }
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b4e      	ldr	r3, [pc, #312]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ccee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccf0:	4b4d      	ldr	r3, [pc, #308]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d905      	bls.n	800cd04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f985 	bl	800d00a <USBD_CtlError>
    return USBD_FAIL;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e08c      	b.n	800ce1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d002      	beq.n	800cd16 <USBD_SetConfig+0x3e>
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d029      	beq.n	800cd68 <USBD_SetConfig+0x90>
 800cd14:	e075      	b.n	800ce02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd16:	4b44      	ldr	r3, [pc, #272]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d020      	beq.n	800cd60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cd1e:	4b42      	ldr	r3, [pc, #264]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd28:	4b3f      	ldr	r3, [pc, #252]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7fe ffe3 	bl	800bcfa <USBD_SetClassConfig>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f962 	bl	800d00a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd4e:	e065      	b.n	800ce1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 fa31 	bl	800d1b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2203      	movs	r2, #3
 800cd5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd5e:	e05d      	b.n	800ce1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fa29 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800cd66:	e059      	b.n	800ce1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd68:	4b2f      	ldr	r3, [pc, #188]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d112      	bne.n	800cd96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd78:	4b2b      	ldr	r3, [pc, #172]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd82:	4b29      	ldr	r3, [pc, #164]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7fe ffd2 	bl	800bd32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fa12 	bl	800d1b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd94:	e042      	b.n	800ce1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd96:	4b24      	ldr	r3, [pc, #144]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d02a      	beq.n	800cdfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe ffc0 	bl	800bd32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ce28 <USBD_SetConfig+0x150>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7fe ff99 	bl	800bcfa <USBD_SetClassConfig>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00f      	beq.n	800cdf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f918 	bl	800d00a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7fe ffa5 	bl	800bd32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2202      	movs	r2, #2
 800cdec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cdf0:	e014      	b.n	800ce1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f9e0 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800cdf8:	e010      	b.n	800ce1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f9dc 	bl	800d1b8 <USBD_CtlSendStatus>
      break;
 800ce00:	e00c      	b.n	800ce1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f900 	bl	800d00a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce0a:	4b07      	ldr	r3, [pc, #28]	@ (800ce28 <USBD_SetConfig+0x150>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7fe ff8e 	bl	800bd32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	73fb      	strb	r3, [r7, #15]
      break;
 800ce1a:	bf00      	nop
  }

  return ret;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200004d8 	.word	0x200004d8

0800ce2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	88db      	ldrh	r3, [r3, #6]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d004      	beq.n	800ce48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f8e2 	bl	800d00a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce46:	e023      	b.n	800ce90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	dc02      	bgt.n	800ce5a <USBD_GetConfig+0x2e>
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dc03      	bgt.n	800ce60 <USBD_GetConfig+0x34>
 800ce58:	e015      	b.n	800ce86 <USBD_GetConfig+0x5a>
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d00b      	beq.n	800ce76 <USBD_GetConfig+0x4a>
 800ce5e:	e012      	b.n	800ce86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f948 	bl	800d104 <USBD_CtlSendData>
        break;
 800ce74:	e00c      	b.n	800ce90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f940 	bl	800d104 <USBD_CtlSendData>
        break;
 800ce84:	e004      	b.n	800ce90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f8be 	bl	800d00a <USBD_CtlError>
        break;
 800ce8e:	bf00      	nop
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d81e      	bhi.n	800ceee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	88db      	ldrh	r3, [r3, #6]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d004      	beq.n	800cec2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f8a5 	bl	800d00a <USBD_CtlError>
        break;
 800cec0:	e01a      	b.n	800cef8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d005      	beq.n	800cede <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	f043 0202 	orr.w	r2, r3, #2
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	330c      	adds	r3, #12
 800cee2:	2202      	movs	r2, #2
 800cee4:	4619      	mov	r1, r3
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f90c 	bl	800d104 <USBD_CtlSendData>
      break;
 800ceec:	e004      	b.n	800cef8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f88a 	bl	800d00a <USBD_CtlError>
      break;
 800cef6:	bf00      	nop
  }
}
 800cef8:	bf00      	nop
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	885b      	ldrh	r3, [r3, #2]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d107      	bne.n	800cf22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f94c 	bl	800d1b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cf20:	e013      	b.n	800cf4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	885b      	ldrh	r3, [r3, #2]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d10b      	bne.n	800cf42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	889b      	ldrh	r3, [r3, #4]
 800cf2e:	0a1b      	lsrs	r3, r3, #8
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f93c 	bl	800d1b8 <USBD_CtlSendStatus>
}
 800cf40:	e003      	b.n	800cf4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f860 	bl	800d00a <USBD_CtlError>
}
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	3b01      	subs	r3, #1
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d80b      	bhi.n	800cf82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	885b      	ldrh	r3, [r3, #2]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d10c      	bne.n	800cf8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f91c 	bl	800d1b8 <USBD_CtlSendStatus>
      }
      break;
 800cf80:	e004      	b.n	800cf8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f840 	bl	800d00a <USBD_CtlError>
      break;
 800cf8a:	e000      	b.n	800cf8e <USBD_ClrFeature+0x3c>
      break;
 800cf8c:	bf00      	nop
  }
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff fa40 	bl	800c446 <SWAPBYTE>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7ff fa33 	bl	800c446 <SWAPBYTE>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3301      	adds	r3, #1
 800cfec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3301      	adds	r3, #1
 800cff2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff fa26 	bl	800c446 <SWAPBYTE>
 800cffa:	4603      	mov	r3, r0
 800cffc:	461a      	mov	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	80da      	strh	r2, [r3, #6]
}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b082      	sub	sp, #8
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d014:	2180      	movs	r1, #128	@ 0x80
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fcbc 	bl	800d994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d01c:	2100      	movs	r1, #0
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fcb8 	bl	800d994 <USBD_LL_StallEP>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d042      	beq.n	800d0c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d046:	6938      	ldr	r0, [r7, #16]
 800d048:	f000 f842 	bl	800d0d0 <USBD_GetLen>
 800d04c:	4603      	mov	r3, r0
 800d04e:	3301      	adds	r3, #1
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d056:	d808      	bhi.n	800d06a <USBD_GetString+0x3e>
 800d058:	6938      	ldr	r0, [r7, #16]
 800d05a:	f000 f839 	bl	800d0d0 <USBD_GetLen>
 800d05e:	4603      	mov	r3, r0
 800d060:	3301      	adds	r3, #1
 800d062:	b29b      	uxth	r3, r3
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	e001      	b.n	800d06e <USBD_GetString+0x42>
 800d06a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	4413      	add	r3, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	3301      	adds	r3, #1
 800d082:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	4413      	add	r3, r2
 800d08a:	2203      	movs	r2, #3
 800d08c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	3301      	adds	r3, #1
 800d092:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d094:	e013      	b.n	800d0be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	4413      	add	r3, r2
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	7812      	ldrb	r2, [r2, #0]
 800d0a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	613b      	str	r3, [r7, #16]
    idx++;
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e7      	bne.n	800d096 <USBD_GetString+0x6a>
 800d0c6:	e000      	b.n	800d0ca <USBD_GetString+0x9e>
    return;
 800d0c8:	bf00      	nop
  }
}
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0e0:	e005      	b.n	800d0ee <USBD_GetLen+0x1e>
  {
    len++;
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f5      	bne.n	800d0e2 <USBD_GetLen+0x12>
  }

  return len;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2202      	movs	r2, #2
 800d114:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	2100      	movs	r1, #0
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 fcbb 	bl	800daa6 <USBD_LL_Transmit>

  return USBD_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	2100      	movs	r1, #0
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fcaa 	bl	800daa6 <USBD_LL_Transmit>

  return USBD_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2203      	movs	r2, #3
 800d16c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	2100      	movs	r1, #0
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f000 fcae 	bl	800dae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	60b9      	str	r1, [r7, #8]
 800d1a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 fc9d 	bl	800dae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2204      	movs	r2, #4
 800d1c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fc69 	bl	800daa6 <USBD_LL_Transmit>

  return USBD_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fc77 	bl	800dae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d208:	2200      	movs	r2, #0
 800d20a:	4912      	ldr	r1, [pc, #72]	@ (800d254 <MX_USB_DEVICE_Init+0x50>)
 800d20c:	4812      	ldr	r0, [pc, #72]	@ (800d258 <MX_USB_DEVICE_Init+0x54>)
 800d20e:	f7fe fcf7 	bl	800bc00 <USBD_Init>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d218:	f7f4 fac2 	bl	80017a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d21c:	490f      	ldr	r1, [pc, #60]	@ (800d25c <MX_USB_DEVICE_Init+0x58>)
 800d21e:	480e      	ldr	r0, [pc, #56]	@ (800d258 <MX_USB_DEVICE_Init+0x54>)
 800d220:	f7fe fd1e 	bl	800bc60 <USBD_RegisterClass>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d22a:	f7f4 fab9 	bl	80017a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d22e:	490c      	ldr	r1, [pc, #48]	@ (800d260 <MX_USB_DEVICE_Init+0x5c>)
 800d230:	4809      	ldr	r0, [pc, #36]	@ (800d258 <MX_USB_DEVICE_Init+0x54>)
 800d232:	f7fe fc55 	bl	800bae0 <USBD_CDC_RegisterInterface>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d23c:	f7f4 fab0 	bl	80017a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d240:	4805      	ldr	r0, [pc, #20]	@ (800d258 <MX_USB_DEVICE_Init+0x54>)
 800d242:	f7fe fd43 	bl	800bccc <USBD_Start>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d24c:	f7f4 faa8 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d250:	bf00      	nop
 800d252:	bd80      	pop	{r7, pc}
 800d254:	200000b0 	.word	0x200000b0
 800d258:	200004dc 	.word	0x200004dc
 800d25c:	2000001c 	.word	0x2000001c
 800d260:	2000009c 	.word	0x2000009c

0800d264 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d268:	2200      	movs	r2, #0
 800d26a:	4905      	ldr	r1, [pc, #20]	@ (800d280 <CDC_Init_FS+0x1c>)
 800d26c:	4805      	ldr	r0, [pc, #20]	@ (800d284 <CDC_Init_FS+0x20>)
 800d26e:	f7fe fc51 	bl	800bb14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d272:	4905      	ldr	r1, [pc, #20]	@ (800d288 <CDC_Init_FS+0x24>)
 800d274:	4803      	ldr	r0, [pc, #12]	@ (800d284 <CDC_Init_FS+0x20>)
 800d276:	f7fe fc6f 	bl	800bb58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d27a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20000fb8 	.word	0x20000fb8
 800d284:	200004dc 	.word	0x200004dc
 800d288:	200007b8 	.word	0x200007b8

0800d28c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d28c:	b480      	push	{r7}
 800d28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d290:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d292:	4618      	mov	r0, r3
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	6039      	str	r1, [r7, #0]
 800d2a6:	71fb      	strb	r3, [r7, #7]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	2b23      	cmp	r3, #35	@ 0x23
 800d2b0:	d84a      	bhi.n	800d348 <CDC_Control_FS+0xac>
 800d2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b8 <CDC_Control_FS+0x1c>)
 800d2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b8:	0800d349 	.word	0x0800d349
 800d2bc:	0800d349 	.word	0x0800d349
 800d2c0:	0800d349 	.word	0x0800d349
 800d2c4:	0800d349 	.word	0x0800d349
 800d2c8:	0800d349 	.word	0x0800d349
 800d2cc:	0800d349 	.word	0x0800d349
 800d2d0:	0800d349 	.word	0x0800d349
 800d2d4:	0800d349 	.word	0x0800d349
 800d2d8:	0800d349 	.word	0x0800d349
 800d2dc:	0800d349 	.word	0x0800d349
 800d2e0:	0800d349 	.word	0x0800d349
 800d2e4:	0800d349 	.word	0x0800d349
 800d2e8:	0800d349 	.word	0x0800d349
 800d2ec:	0800d349 	.word	0x0800d349
 800d2f0:	0800d349 	.word	0x0800d349
 800d2f4:	0800d349 	.word	0x0800d349
 800d2f8:	0800d349 	.word	0x0800d349
 800d2fc:	0800d349 	.word	0x0800d349
 800d300:	0800d349 	.word	0x0800d349
 800d304:	0800d349 	.word	0x0800d349
 800d308:	0800d349 	.word	0x0800d349
 800d30c:	0800d349 	.word	0x0800d349
 800d310:	0800d349 	.word	0x0800d349
 800d314:	0800d349 	.word	0x0800d349
 800d318:	0800d349 	.word	0x0800d349
 800d31c:	0800d349 	.word	0x0800d349
 800d320:	0800d349 	.word	0x0800d349
 800d324:	0800d349 	.word	0x0800d349
 800d328:	0800d349 	.word	0x0800d349
 800d32c:	0800d349 	.word	0x0800d349
 800d330:	0800d349 	.word	0x0800d349
 800d334:	0800d349 	.word	0x0800d349
 800d338:	0800d349 	.word	0x0800d349
 800d33c:	0800d349 	.word	0x0800d349
 800d340:	0800d349 	.word	0x0800d349
 800d344:	0800d349 	.word	0x0800d349
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d348:	bf00      	nop
  }

  return (USBD_OK);
 800d34a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d362:	6879      	ldr	r1, [r7, #4]
 800d364:	4805      	ldr	r0, [pc, #20]	@ (800d37c <CDC_Receive_FS+0x24>)
 800d366:	f7fe fbf7 	bl	800bb58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d36a:	4804      	ldr	r0, [pc, #16]	@ (800d37c <CDC_Receive_FS+0x24>)
 800d36c:	f7fe fc12 	bl	800bb94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	200004dc 	.word	0x200004dc

0800d380 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d380:	b480      	push	{r7}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	4613      	mov	r3, r2
 800d38c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d396:	4618      	mov	r0, r3
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	6039      	str	r1, [r7, #0]
 800d3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	2212      	movs	r2, #18
 800d3b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d3b6:	4b03      	ldr	r3, [pc, #12]	@ (800d3c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	200000cc 	.word	0x200000cc

0800d3c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	6039      	str	r1, [r7, #0]
 800d3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2204      	movs	r2, #4
 800d3d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	@ (800d3e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	200000e0 	.word	0x200000e0

0800d3ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	6039      	str	r1, [r7, #0]
 800d3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3f8:	79fb      	ldrb	r3, [r7, #7]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d105      	bne.n	800d40a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	4907      	ldr	r1, [pc, #28]	@ (800d420 <USBD_FS_ProductStrDescriptor+0x34>)
 800d402:	4808      	ldr	r0, [pc, #32]	@ (800d424 <USBD_FS_ProductStrDescriptor+0x38>)
 800d404:	f7ff fe12 	bl	800d02c <USBD_GetString>
 800d408:	e004      	b.n	800d414 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	4904      	ldr	r1, [pc, #16]	@ (800d420 <USBD_FS_ProductStrDescriptor+0x34>)
 800d40e:	4805      	ldr	r0, [pc, #20]	@ (800d424 <USBD_FS_ProductStrDescriptor+0x38>)
 800d410:	f7ff fe0c 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d414:	4b02      	ldr	r3, [pc, #8]	@ (800d420 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	200017b8 	.word	0x200017b8
 800d424:	08010e78 	.word	0x08010e78

0800d428 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	4603      	mov	r3, r0
 800d430:	6039      	str	r1, [r7, #0]
 800d432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	4904      	ldr	r1, [pc, #16]	@ (800d448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d438:	4804      	ldr	r0, [pc, #16]	@ (800d44c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d43a:	f7ff fdf7 	bl	800d02c <USBD_GetString>
  return USBD_StrDesc;
 800d43e:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	200017b8 	.word	0x200017b8
 800d44c:	08010e90 	.word	0x08010e90

0800d450 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	6039      	str	r1, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	221a      	movs	r2, #26
 800d460:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d462:	f000 f843 	bl	800d4ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d466:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	200000e4 	.word	0x200000e4

0800d474 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	6039      	str	r1, [r7, #0]
 800d47e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	4907      	ldr	r1, [pc, #28]	@ (800d4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d48a:	4808      	ldr	r0, [pc, #32]	@ (800d4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800d48c:	f7ff fdce 	bl	800d02c <USBD_GetString>
 800d490:	e004      	b.n	800d49c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	4904      	ldr	r1, [pc, #16]	@ (800d4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d496:	4805      	ldr	r0, [pc, #20]	@ (800d4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800d498:	f7ff fdc8 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d49c:	4b02      	ldr	r3, [pc, #8]	@ (800d4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200017b8 	.word	0x200017b8
 800d4ac:	08010ea4 	.word	0x08010ea4

0800d4b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	6039      	str	r1, [r7, #0]
 800d4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d105      	bne.n	800d4ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	4907      	ldr	r1, [pc, #28]	@ (800d4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4c6:	4808      	ldr	r0, [pc, #32]	@ (800d4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4c8:	f7ff fdb0 	bl	800d02c <USBD_GetString>
 800d4cc:	e004      	b.n	800d4d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	4904      	ldr	r1, [pc, #16]	@ (800d4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4d2:	4805      	ldr	r0, [pc, #20]	@ (800d4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4d4:	f7ff fdaa 	bl	800d02c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4d8:	4b02      	ldr	r3, [pc, #8]	@ (800d4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200017b8 	.word	0x200017b8
 800d4e8:	08010eb0 	.word	0x08010eb0

0800d4ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800d530 <Get_SerialNum+0x44>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d534 <Get_SerialNum+0x48>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d538 <Get_SerialNum+0x4c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d512:	2208      	movs	r2, #8
 800d514:	4909      	ldr	r1, [pc, #36]	@ (800d53c <Get_SerialNum+0x50>)
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 f814 	bl	800d544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d51c:	2204      	movs	r2, #4
 800d51e:	4908      	ldr	r1, [pc, #32]	@ (800d540 <Get_SerialNum+0x54>)
 800d520:	68b8      	ldr	r0, [r7, #8]
 800d522:	f000 f80f 	bl	800d544 <IntToUnicode>
  }
}
 800d526:	bf00      	nop
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	1fff7a10 	.word	0x1fff7a10
 800d534:	1fff7a14 	.word	0x1fff7a14
 800d538:	1fff7a18 	.word	0x1fff7a18
 800d53c:	200000e6 	.word	0x200000e6
 800d540:	200000f6 	.word	0x200000f6

0800d544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4613      	mov	r3, r2
 800d550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d556:	2300      	movs	r3, #0
 800d558:	75fb      	strb	r3, [r7, #23]
 800d55a:	e027      	b.n	800d5ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	0f1b      	lsrs	r3, r3, #28
 800d560:	2b09      	cmp	r3, #9
 800d562:	d80b      	bhi.n	800d57c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	0f1b      	lsrs	r3, r3, #28
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	005b      	lsls	r3, r3, #1
 800d56e:	4619      	mov	r1, r3
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	440b      	add	r3, r1
 800d574:	3230      	adds	r2, #48	@ 0x30
 800d576:	b2d2      	uxtb	r2, r2
 800d578:	701a      	strb	r2, [r3, #0]
 800d57a:	e00a      	b.n	800d592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	0f1b      	lsrs	r3, r3, #28
 800d580:	b2da      	uxtb	r2, r3
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	005b      	lsls	r3, r3, #1
 800d586:	4619      	mov	r1, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	440b      	add	r3, r1
 800d58c:	3237      	adds	r2, #55	@ 0x37
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	3301      	adds	r3, #1
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	75fb      	strb	r3, [r7, #23]
 800d5ac:	7dfa      	ldrb	r2, [r7, #23]
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d3d3      	bcc.n	800d55c <IntToUnicode+0x18>
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08a      	sub	sp, #40	@ 0x28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	605a      	str	r2, [r3, #4]
 800d5d6:	609a      	str	r2, [r3, #8]
 800d5d8:	60da      	str	r2, [r3, #12]
 800d5da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5e4:	d13a      	bne.n	800d65c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	613b      	str	r3, [r7, #16]
 800d5ea:	4b1e      	ldr	r3, [pc, #120]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d5f0:	f043 0301 	orr.w	r3, r3, #1
 800d5f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d602:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d608:	2302      	movs	r3, #2
 800d60a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d60c:	2300      	movs	r3, #0
 800d60e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d610:	2303      	movs	r3, #3
 800d612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d614:	230a      	movs	r3, #10
 800d616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d618:	f107 0314 	add.w	r3, r7, #20
 800d61c:	4619      	mov	r1, r3
 800d61e:	4812      	ldr	r0, [pc, #72]	@ (800d668 <HAL_PCD_MspInit+0xa4>)
 800d620:	f7f5 fb64 	bl	8002cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d624:	4b0f      	ldr	r3, [pc, #60]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d628:	4a0e      	ldr	r2, [pc, #56]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	4b0b      	ldr	r3, [pc, #44]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d638:	4a0a      	ldr	r2, [pc, #40]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d63a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d63e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d640:	4b08      	ldr	r3, [pc, #32]	@ (800d664 <HAL_PCD_MspInit+0xa0>)
 800d642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d64c:	2200      	movs	r2, #0
 800d64e:	2100      	movs	r1, #0
 800d650:	2043      	movs	r0, #67	@ 0x43
 800d652:	f7f4 ff8a 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d656:	2043      	movs	r0, #67	@ 0x43
 800d658:	f7f4 ffa3 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d65c:	bf00      	nop
 800d65e:	3728      	adds	r7, #40	@ 0x28
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	40023800 	.word	0x40023800
 800d668:	40020000 	.word	0x40020000

0800d66c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fe fb6f 	bl	800bd66 <USBD_LL_SetupStage>
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d6a2:	78fa      	ldrb	r2, [r7, #3]
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	440b      	add	r3, r1
 800d6b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	78fb      	ldrb	r3, [r7, #3]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f7fe fba9 	bl	800be10 <USBD_LL_DataOutStage>
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d6d8:	78fa      	ldrb	r2, [r7, #3]
 800d6da:	6879      	ldr	r1, [r7, #4]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	4413      	add	r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	440b      	add	r3, r1
 800d6e6:	3320      	adds	r3, #32
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	78fb      	ldrb	r3, [r7, #3]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7fe fc42 	bl	800bf76 <USBD_LL_DataInStage>
}
 800d6f2:	bf00      	nop
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b082      	sub	sp, #8
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fe fd7c 	bl	800c206 <USBD_LL_SOF>
}
 800d70e:	bf00      	nop
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d71e:	2301      	movs	r3, #1
 800d720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	79db      	ldrb	r3, [r3, #7]
 800d726:	2b02      	cmp	r3, #2
 800d728:	d001      	beq.n	800d72e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d72a:	f7f4 f839 	bl	80017a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d734:	7bfa      	ldrb	r2, [r7, #15]
 800d736:	4611      	mov	r1, r2
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fd20 	bl	800c17e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d744:	4618      	mov	r0, r3
 800d746:	f7fe fcc8 	bl	800c0da <USBD_LL_Reset>
}
 800d74a:	bf00      	nop
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe fd1b 	bl	800c19e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6812      	ldr	r2, [r2, #0]
 800d776:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d77a:	f043 0301 	orr.w	r3, r3, #1
 800d77e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7adb      	ldrb	r3, [r3, #11]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d005      	beq.n	800d794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d788:	4b04      	ldr	r3, [pc, #16]	@ (800d79c <HAL_PCD_SuspendCallback+0x48>)
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	4a03      	ldr	r2, [pc, #12]	@ (800d79c <HAL_PCD_SuspendCallback+0x48>)
 800d78e:	f043 0306 	orr.w	r3, r3, #6
 800d792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	e000ed00 	.word	0xe000ed00

0800d7a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe fd11 	bl	800c1d6 <USBD_LL_Resume>
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fd69 	bl	800c2aa <USBD_LL_IsoOUTIncomplete>
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7f2:	78fa      	ldrb	r2, [r7, #3]
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fd25 	bl	800c246 <USBD_LL_IsoINIncomplete>
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe fd7b 	bl	800c30e <USBD_LL_DevConnected>
}
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fd78 	bl	800c324 <USBD_LL_DevDisconnected>
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d13c      	bne.n	800d8c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d84c:	4a20      	ldr	r2, [pc, #128]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a1e      	ldr	r2, [pc, #120]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d858:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d85c:	4b1c      	ldr	r3, [pc, #112]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d85e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d862:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d864:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d866:	2204      	movs	r2, #4
 800d868:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d86a:	4b19      	ldr	r3, [pc, #100]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d86c:	2202      	movs	r2, #2
 800d86e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d870:	4b17      	ldr	r3, [pc, #92]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d872:	2200      	movs	r2, #0
 800d874:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d876:	4b16      	ldr	r3, [pc, #88]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d878:	2202      	movs	r2, #2
 800d87a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d87c:	4b14      	ldr	r3, [pc, #80]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d87e:	2200      	movs	r2, #0
 800d880:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d882:	4b13      	ldr	r3, [pc, #76]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d884:	2200      	movs	r2, #0
 800d886:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d888:	4b11      	ldr	r3, [pc, #68]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d88e:	4b10      	ldr	r3, [pc, #64]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d890:	2200      	movs	r2, #0
 800d892:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d894:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d896:	2200      	movs	r2, #0
 800d898:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d89a:	480d      	ldr	r0, [pc, #52]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d89c:	f7f8 fad7 	bl	8005e4e <HAL_PCD_Init>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d8a6:	f7f3 ff7b 	bl	80017a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d8aa:	2180      	movs	r1, #128	@ 0x80
 800d8ac:	4808      	ldr	r0, [pc, #32]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d8ae:	f7f9 fd04 	bl	80072ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d8b2:	2240      	movs	r2, #64	@ 0x40
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	4806      	ldr	r0, [pc, #24]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d8b8:	f7f9 fcb8 	bl	800722c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d8bc:	2280      	movs	r2, #128	@ 0x80
 800d8be:	2101      	movs	r1, #1
 800d8c0:	4803      	ldr	r0, [pc, #12]	@ (800d8d0 <USBD_LL_Init+0x94>)
 800d8c2:	f7f9 fcb3 	bl	800722c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	200019b8 	.word	0x200019b8

0800d8d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f8 fbbe 	bl	800606c <HAL_PCD_Start>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 f942 	bl	800db80 <USBD_Get_USB_Status>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d900:	7bbb      	ldrb	r3, [r7, #14]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	4608      	mov	r0, r1
 800d914:	4611      	mov	r1, r2
 800d916:	461a      	mov	r2, r3
 800d918:	4603      	mov	r3, r0
 800d91a:	70fb      	strb	r3, [r7, #3]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70bb      	strb	r3, [r7, #2]
 800d920:	4613      	mov	r3, r2
 800d922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d932:	78bb      	ldrb	r3, [r7, #2]
 800d934:	883a      	ldrh	r2, [r7, #0]
 800d936:	78f9      	ldrb	r1, [r7, #3]
 800d938:	f7f9 f892 	bl	8006a60 <HAL_PCD_EP_Open>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	4618      	mov	r0, r3
 800d944:	f000 f91c 	bl	800db80 <USBD_Get_USB_Status>
 800d948:	4603      	mov	r3, r0
 800d94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7f9 f8dd 	bl	8006b34 <HAL_PCD_EP_Close>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	4618      	mov	r0, r3
 800d982:	f000 f8fd 	bl	800db80 <USBD_Get_USB_Status>
 800d986:	4603      	mov	r3, r0
 800d988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9ae:	78fa      	ldrb	r2, [r7, #3]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7f9 f995 	bl	8006ce2 <HAL_PCD_EP_SetStall>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 f8de 	bl	800db80 <USBD_Get_USB_Status>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9ec:	78fa      	ldrb	r2, [r7, #3]
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7f9 f9d9 	bl	8006da8 <HAL_PCD_EP_ClrStall>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 f8bf 	bl	800db80 <USBD_Get_USB_Status>
 800da02:	4603      	mov	r3, r0
 800da04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da06:	7bbb      	ldrb	r3, [r7, #14]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	da0b      	bge.n	800da44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da2c:	78fb      	ldrb	r3, [r7, #3]
 800da2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da32:	68f9      	ldr	r1, [r7, #12]
 800da34:	4613      	mov	r3, r2
 800da36:	00db      	lsls	r3, r3, #3
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	440b      	add	r3, r1
 800da3e:	3316      	adds	r3, #22
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	e00b      	b.n	800da5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da4a:	68f9      	ldr	r1, [r7, #12]
 800da4c:	4613      	mov	r3, r2
 800da4e:	00db      	lsls	r3, r3, #3
 800da50:	4413      	add	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	440b      	add	r3, r1
 800da56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800da5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da82:	78fa      	ldrb	r2, [r7, #3]
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f7f8 ffc6 	bl	8006a18 <HAL_PCD_SetAddress>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da90:	7bfb      	ldrb	r3, [r7, #15]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f874 	bl	800db80 <USBD_Get_USB_Status>
 800da98:	4603      	mov	r3, r0
 800da9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b086      	sub	sp, #24
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
 800dab2:	460b      	mov	r3, r1
 800dab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dac4:	7af9      	ldrb	r1, [r7, #11]
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	f7f9 f8d0 	bl	8006c6e <HAL_PCD_EP_Transmit>
 800dace:	4603      	mov	r3, r0
 800dad0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 f853 	bl	800db80 <USBD_Get_USB_Status>
 800dada:	4603      	mov	r3, r0
 800dadc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dade:	7dbb      	ldrb	r3, [r7, #22]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	607a      	str	r2, [r7, #4]
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	460b      	mov	r3, r1
 800daf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db06:	7af9      	ldrb	r1, [r7, #11]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	f7f9 f85c 	bl	8006bc8 <HAL_PCD_EP_Receive>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f832 	bl	800db80 <USBD_Get_USB_Status>
 800db1c:	4603      	mov	r3, r0
 800db1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db20:	7dbb      	ldrb	r3, [r7, #22]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db3c:	78fa      	ldrb	r2, [r7, #3]
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f7f9 f87c 	bl	8006c3e <HAL_PCD_EP_GetRxCount>
 800db46:	4603      	mov	r3, r0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db58:	4b03      	ldr	r3, [pc, #12]	@ (800db68 <USBD_static_malloc+0x18>)
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	20001e9c 	.word	0x20001e9c

0800db6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]

}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	2b03      	cmp	r3, #3
 800db92:	d817      	bhi.n	800dbc4 <USBD_Get_USB_Status+0x44>
 800db94:	a201      	add	r2, pc, #4	@ (adr r2, 800db9c <USBD_Get_USB_Status+0x1c>)
 800db96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9a:	bf00      	nop
 800db9c:	0800dbad 	.word	0x0800dbad
 800dba0:	0800dbb3 	.word	0x0800dbb3
 800dba4:	0800dbb9 	.word	0x0800dbb9
 800dba8:	0800dbbf 	.word	0x0800dbbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb0:	e00b      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb6:	e008      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	73fb      	strb	r3, [r7, #15]
    break;
 800dbbc:	e005      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc2:	e002      	b.n	800dbca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc8:	bf00      	nop
  }
  return usb_status;
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <__cxa_guard_acquire>:
 800dbd8:	6802      	ldr	r2, [r0, #0]
 800dbda:	07d2      	lsls	r2, r2, #31
 800dbdc:	4603      	mov	r3, r0
 800dbde:	d405      	bmi.n	800dbec <__cxa_guard_acquire+0x14>
 800dbe0:	7842      	ldrb	r2, [r0, #1]
 800dbe2:	b102      	cbz	r2, 800dbe6 <__cxa_guard_acquire+0xe>
 800dbe4:	deff      	udf	#255	@ 0xff
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	7058      	strb	r0, [r3, #1]
 800dbea:	4770      	bx	lr
 800dbec:	2000      	movs	r0, #0
 800dbee:	4770      	bx	lr

0800dbf0 <__cxa_guard_release>:
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	6003      	str	r3, [r0, #0]
 800dbf4:	4770      	bx	lr

0800dbf6 <atan2>:
 800dbf6:	f000 b907 	b.w	800de08 <__ieee754_atan2>

0800dbfa <sqrt>:
 800dbfa:	b538      	push	{r3, r4, r5, lr}
 800dbfc:	ed2d 8b02 	vpush	{d8}
 800dc00:	ec55 4b10 	vmov	r4, r5, d0
 800dc04:	f000 f826 	bl	800dc54 <__ieee754_sqrt>
 800dc08:	4622      	mov	r2, r4
 800dc0a:	462b      	mov	r3, r5
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	eeb0 8a40 	vmov.f32	s16, s0
 800dc14:	eef0 8a60 	vmov.f32	s17, s1
 800dc18:	f7f2 ff90 	bl	8000b3c <__aeabi_dcmpun>
 800dc1c:	b990      	cbnz	r0, 800dc44 <sqrt+0x4a>
 800dc1e:	2200      	movs	r2, #0
 800dc20:	2300      	movs	r3, #0
 800dc22:	4620      	mov	r0, r4
 800dc24:	4629      	mov	r1, r5
 800dc26:	f7f2 ff61 	bl	8000aec <__aeabi_dcmplt>
 800dc2a:	b158      	cbz	r0, 800dc44 <sqrt+0x4a>
 800dc2c:	f001 fa08 	bl	800f040 <__errno>
 800dc30:	2321      	movs	r3, #33	@ 0x21
 800dc32:	6003      	str	r3, [r0, #0]
 800dc34:	2200      	movs	r2, #0
 800dc36:	2300      	movs	r3, #0
 800dc38:	4610      	mov	r0, r2
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f7f2 fe0e 	bl	800085c <__aeabi_ddiv>
 800dc40:	ec41 0b18 	vmov	d8, r0, r1
 800dc44:	eeb0 0a48 	vmov.f32	s0, s16
 800dc48:	eef0 0a68 	vmov.f32	s1, s17
 800dc4c:	ecbd 8b02 	vpop	{d8}
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dc54 <__ieee754_sqrt>:
 800dc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc58:	4a68      	ldr	r2, [pc, #416]	@ (800ddfc <__ieee754_sqrt+0x1a8>)
 800dc5a:	ec55 4b10 	vmov	r4, r5, d0
 800dc5e:	43aa      	bics	r2, r5
 800dc60:	462b      	mov	r3, r5
 800dc62:	4621      	mov	r1, r4
 800dc64:	d110      	bne.n	800dc88 <__ieee754_sqrt+0x34>
 800dc66:	4622      	mov	r2, r4
 800dc68:	4620      	mov	r0, r4
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	f7f2 fccc 	bl	8000608 <__aeabi_dmul>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4620      	mov	r0, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	f7f2 fb10 	bl	800029c <__adddf3>
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	ec45 4b10 	vmov	d0, r4, r5
 800dc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc88:	2d00      	cmp	r5, #0
 800dc8a:	dc0e      	bgt.n	800dcaa <__ieee754_sqrt+0x56>
 800dc8c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dc90:	4322      	orrs	r2, r4
 800dc92:	d0f5      	beq.n	800dc80 <__ieee754_sqrt+0x2c>
 800dc94:	b19d      	cbz	r5, 800dcbe <__ieee754_sqrt+0x6a>
 800dc96:	4622      	mov	r2, r4
 800dc98:	4620      	mov	r0, r4
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	f7f2 fafc 	bl	8000298 <__aeabi_dsub>
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	f7f2 fdda 	bl	800085c <__aeabi_ddiv>
 800dca8:	e7e8      	b.n	800dc7c <__ieee754_sqrt+0x28>
 800dcaa:	152a      	asrs	r2, r5, #20
 800dcac:	d115      	bne.n	800dcda <__ieee754_sqrt+0x86>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e009      	b.n	800dcc6 <__ieee754_sqrt+0x72>
 800dcb2:	0acb      	lsrs	r3, r1, #11
 800dcb4:	3a15      	subs	r2, #21
 800dcb6:	0549      	lsls	r1, r1, #21
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0fa      	beq.n	800dcb2 <__ieee754_sqrt+0x5e>
 800dcbc:	e7f7      	b.n	800dcae <__ieee754_sqrt+0x5a>
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	e7fa      	b.n	800dcb8 <__ieee754_sqrt+0x64>
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	02dc      	lsls	r4, r3, #11
 800dcc8:	d5fb      	bpl.n	800dcc2 <__ieee754_sqrt+0x6e>
 800dcca:	1e44      	subs	r4, r0, #1
 800dccc:	1b12      	subs	r2, r2, r4
 800dcce:	f1c0 0420 	rsb	r4, r0, #32
 800dcd2:	fa21 f404 	lsr.w	r4, r1, r4
 800dcd6:	4323      	orrs	r3, r4
 800dcd8:	4081      	lsls	r1, r0
 800dcda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcde:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dce6:	07d2      	lsls	r2, r2, #31
 800dce8:	bf5c      	itt	pl
 800dcea:	005b      	lslpl	r3, r3, #1
 800dcec:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dcf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dcf4:	bf58      	it	pl
 800dcf6:	0049      	lslpl	r1, r1, #1
 800dcf8:	2600      	movs	r6, #0
 800dcfa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dcfe:	106d      	asrs	r5, r5, #1
 800dd00:	0049      	lsls	r1, r1, #1
 800dd02:	2016      	movs	r0, #22
 800dd04:	4632      	mov	r2, r6
 800dd06:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dd0a:	1917      	adds	r7, r2, r4
 800dd0c:	429f      	cmp	r7, r3
 800dd0e:	bfde      	ittt	le
 800dd10:	193a      	addle	r2, r7, r4
 800dd12:	1bdb      	suble	r3, r3, r7
 800dd14:	1936      	addle	r6, r6, r4
 800dd16:	0fcf      	lsrs	r7, r1, #31
 800dd18:	3801      	subs	r0, #1
 800dd1a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800dd1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd22:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dd26:	d1f0      	bne.n	800dd0a <__ieee754_sqrt+0xb6>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	2720      	movs	r7, #32
 800dd2c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800dd30:	429a      	cmp	r2, r3
 800dd32:	eb00 0e0c 	add.w	lr, r0, ip
 800dd36:	db02      	blt.n	800dd3e <__ieee754_sqrt+0xea>
 800dd38:	d113      	bne.n	800dd62 <__ieee754_sqrt+0x10e>
 800dd3a:	458e      	cmp	lr, r1
 800dd3c:	d811      	bhi.n	800dd62 <__ieee754_sqrt+0x10e>
 800dd3e:	f1be 0f00 	cmp.w	lr, #0
 800dd42:	eb0e 000c 	add.w	r0, lr, ip
 800dd46:	da42      	bge.n	800ddce <__ieee754_sqrt+0x17a>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	db40      	blt.n	800ddce <__ieee754_sqrt+0x17a>
 800dd4c:	f102 0801 	add.w	r8, r2, #1
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	458e      	cmp	lr, r1
 800dd54:	bf88      	it	hi
 800dd56:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dd5a:	eba1 010e 	sub.w	r1, r1, lr
 800dd5e:	4464      	add	r4, ip
 800dd60:	4642      	mov	r2, r8
 800dd62:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dd66:	3f01      	subs	r7, #1
 800dd68:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dd6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd70:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dd74:	d1dc      	bne.n	800dd30 <__ieee754_sqrt+0xdc>
 800dd76:	4319      	orrs	r1, r3
 800dd78:	d01b      	beq.n	800ddb2 <__ieee754_sqrt+0x15e>
 800dd7a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800de00 <__ieee754_sqrt+0x1ac>
 800dd7e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800de04 <__ieee754_sqrt+0x1b0>
 800dd82:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd86:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd8a:	f7f2 fa85 	bl	8000298 <__aeabi_dsub>
 800dd8e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4640      	mov	r0, r8
 800dd98:	4649      	mov	r1, r9
 800dd9a:	f7f2 feb1 	bl	8000b00 <__aeabi_dcmple>
 800dd9e:	b140      	cbz	r0, 800ddb2 <__ieee754_sqrt+0x15e>
 800dda0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dda4:	e9da 0100 	ldrd	r0, r1, [sl]
 800dda8:	e9db 2300 	ldrd	r2, r3, [fp]
 800ddac:	d111      	bne.n	800ddd2 <__ieee754_sqrt+0x17e>
 800ddae:	3601      	adds	r6, #1
 800ddb0:	463c      	mov	r4, r7
 800ddb2:	1072      	asrs	r2, r6, #1
 800ddb4:	0863      	lsrs	r3, r4, #1
 800ddb6:	07f1      	lsls	r1, r6, #31
 800ddb8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ddbc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ddc0:	bf48      	it	mi
 800ddc2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ddc6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ddca:	4618      	mov	r0, r3
 800ddcc:	e756      	b.n	800dc7c <__ieee754_sqrt+0x28>
 800ddce:	4690      	mov	r8, r2
 800ddd0:	e7be      	b.n	800dd50 <__ieee754_sqrt+0xfc>
 800ddd2:	f7f2 fa63 	bl	800029c <__adddf3>
 800ddd6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4640      	mov	r0, r8
 800dde0:	4649      	mov	r1, r9
 800dde2:	f7f2 fe83 	bl	8000aec <__aeabi_dcmplt>
 800dde6:	b120      	cbz	r0, 800ddf2 <__ieee754_sqrt+0x19e>
 800dde8:	1ca0      	adds	r0, r4, #2
 800ddea:	bf08      	it	eq
 800ddec:	3601      	addeq	r6, #1
 800ddee:	3402      	adds	r4, #2
 800ddf0:	e7df      	b.n	800ddb2 <__ieee754_sqrt+0x15e>
 800ddf2:	1c63      	adds	r3, r4, #1
 800ddf4:	f023 0401 	bic.w	r4, r3, #1
 800ddf8:	e7db      	b.n	800ddb2 <__ieee754_sqrt+0x15e>
 800ddfa:	bf00      	nop
 800ddfc:	7ff00000 	.word	0x7ff00000
 800de00:	20000108 	.word	0x20000108
 800de04:	20000100 	.word	0x20000100

0800de08 <__ieee754_atan2>:
 800de08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de0c:	ec57 6b11 	vmov	r6, r7, d1
 800de10:	4273      	negs	r3, r6
 800de12:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800df90 <__ieee754_atan2+0x188>
 800de16:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800de1a:	4333      	orrs	r3, r6
 800de1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800de20:	4543      	cmp	r3, r8
 800de22:	ec51 0b10 	vmov	r0, r1, d0
 800de26:	4635      	mov	r5, r6
 800de28:	d809      	bhi.n	800de3e <__ieee754_atan2+0x36>
 800de2a:	4244      	negs	r4, r0
 800de2c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de30:	4304      	orrs	r4, r0
 800de32:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800de36:	4544      	cmp	r4, r8
 800de38:	468e      	mov	lr, r1
 800de3a:	4681      	mov	r9, r0
 800de3c:	d907      	bls.n	800de4e <__ieee754_atan2+0x46>
 800de3e:	4632      	mov	r2, r6
 800de40:	463b      	mov	r3, r7
 800de42:	f7f2 fa2b 	bl	800029c <__adddf3>
 800de46:	ec41 0b10 	vmov	d0, r0, r1
 800de4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800de52:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800de56:	4334      	orrs	r4, r6
 800de58:	d103      	bne.n	800de62 <__ieee754_atan2+0x5a>
 800de5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de5e:	f000 b89b 	b.w	800df98 <atan>
 800de62:	17bc      	asrs	r4, r7, #30
 800de64:	f004 0402 	and.w	r4, r4, #2
 800de68:	ea53 0909 	orrs.w	r9, r3, r9
 800de6c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800de70:	d107      	bne.n	800de82 <__ieee754_atan2+0x7a>
 800de72:	2c02      	cmp	r4, #2
 800de74:	d05f      	beq.n	800df36 <__ieee754_atan2+0x12e>
 800de76:	2c03      	cmp	r4, #3
 800de78:	d1e5      	bne.n	800de46 <__ieee754_atan2+0x3e>
 800de7a:	a141      	add	r1, pc, #260	@ (adr r1, 800df80 <__ieee754_atan2+0x178>)
 800de7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de80:	e7e1      	b.n	800de46 <__ieee754_atan2+0x3e>
 800de82:	4315      	orrs	r5, r2
 800de84:	d106      	bne.n	800de94 <__ieee754_atan2+0x8c>
 800de86:	f1be 0f00 	cmp.w	lr, #0
 800de8a:	da5f      	bge.n	800df4c <__ieee754_atan2+0x144>
 800de8c:	a13e      	add	r1, pc, #248	@ (adr r1, 800df88 <__ieee754_atan2+0x180>)
 800de8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de92:	e7d8      	b.n	800de46 <__ieee754_atan2+0x3e>
 800de94:	4542      	cmp	r2, r8
 800de96:	d10f      	bne.n	800deb8 <__ieee754_atan2+0xb0>
 800de98:	4293      	cmp	r3, r2
 800de9a:	f104 34ff 	add.w	r4, r4, #4294967295
 800de9e:	d107      	bne.n	800deb0 <__ieee754_atan2+0xa8>
 800dea0:	2c02      	cmp	r4, #2
 800dea2:	d84c      	bhi.n	800df3e <__ieee754_atan2+0x136>
 800dea4:	4b34      	ldr	r3, [pc, #208]	@ (800df78 <__ieee754_atan2+0x170>)
 800dea6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800deaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deae:	e7ca      	b.n	800de46 <__ieee754_atan2+0x3e>
 800deb0:	2c02      	cmp	r4, #2
 800deb2:	d848      	bhi.n	800df46 <__ieee754_atan2+0x13e>
 800deb4:	4b31      	ldr	r3, [pc, #196]	@ (800df7c <__ieee754_atan2+0x174>)
 800deb6:	e7f6      	b.n	800dea6 <__ieee754_atan2+0x9e>
 800deb8:	4543      	cmp	r3, r8
 800deba:	d0e4      	beq.n	800de86 <__ieee754_atan2+0x7e>
 800debc:	1a9b      	subs	r3, r3, r2
 800debe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dec6:	da1e      	bge.n	800df06 <__ieee754_atan2+0xfe>
 800dec8:	2f00      	cmp	r7, #0
 800deca:	da01      	bge.n	800ded0 <__ieee754_atan2+0xc8>
 800decc:	323c      	adds	r2, #60	@ 0x3c
 800dece:	db1e      	blt.n	800df0e <__ieee754_atan2+0x106>
 800ded0:	4632      	mov	r2, r6
 800ded2:	463b      	mov	r3, r7
 800ded4:	f7f2 fcc2 	bl	800085c <__aeabi_ddiv>
 800ded8:	ec41 0b10 	vmov	d0, r0, r1
 800dedc:	f000 f9f4 	bl	800e2c8 <fabs>
 800dee0:	f000 f85a 	bl	800df98 <atan>
 800dee4:	ec51 0b10 	vmov	r0, r1, d0
 800dee8:	2c01      	cmp	r4, #1
 800deea:	d013      	beq.n	800df14 <__ieee754_atan2+0x10c>
 800deec:	2c02      	cmp	r4, #2
 800deee:	d015      	beq.n	800df1c <__ieee754_atan2+0x114>
 800def0:	2c00      	cmp	r4, #0
 800def2:	d0a8      	beq.n	800de46 <__ieee754_atan2+0x3e>
 800def4:	a318      	add	r3, pc, #96	@ (adr r3, 800df58 <__ieee754_atan2+0x150>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	f7f2 f9cd 	bl	8000298 <__aeabi_dsub>
 800defe:	a318      	add	r3, pc, #96	@ (adr r3, 800df60 <__ieee754_atan2+0x158>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	e014      	b.n	800df30 <__ieee754_atan2+0x128>
 800df06:	a118      	add	r1, pc, #96	@ (adr r1, 800df68 <__ieee754_atan2+0x160>)
 800df08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df0c:	e7ec      	b.n	800dee8 <__ieee754_atan2+0xe0>
 800df0e:	2000      	movs	r0, #0
 800df10:	2100      	movs	r1, #0
 800df12:	e7e9      	b.n	800dee8 <__ieee754_atan2+0xe0>
 800df14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df18:	4619      	mov	r1, r3
 800df1a:	e794      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df1c:	a30e      	add	r3, pc, #56	@ (adr r3, 800df58 <__ieee754_atan2+0x150>)
 800df1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df22:	f7f2 f9b9 	bl	8000298 <__aeabi_dsub>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	a10d      	add	r1, pc, #52	@ (adr r1, 800df60 <__ieee754_atan2+0x158>)
 800df2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df30:	f7f2 f9b2 	bl	8000298 <__aeabi_dsub>
 800df34:	e787      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df36:	a10a      	add	r1, pc, #40	@ (adr r1, 800df60 <__ieee754_atan2+0x158>)
 800df38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df3c:	e783      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df3e:	a10c      	add	r1, pc, #48	@ (adr r1, 800df70 <__ieee754_atan2+0x168>)
 800df40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df44:	e77f      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df46:	2000      	movs	r0, #0
 800df48:	2100      	movs	r1, #0
 800df4a:	e77c      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df4c:	a106      	add	r1, pc, #24	@ (adr r1, 800df68 <__ieee754_atan2+0x160>)
 800df4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df52:	e778      	b.n	800de46 <__ieee754_atan2+0x3e>
 800df54:	f3af 8000 	nop.w
 800df58:	33145c07 	.word	0x33145c07
 800df5c:	3ca1a626 	.word	0x3ca1a626
 800df60:	54442d18 	.word	0x54442d18
 800df64:	400921fb 	.word	0x400921fb
 800df68:	54442d18 	.word	0x54442d18
 800df6c:	3ff921fb 	.word	0x3ff921fb
 800df70:	54442d18 	.word	0x54442d18
 800df74:	3fe921fb 	.word	0x3fe921fb
 800df78:	08010ef8 	.word	0x08010ef8
 800df7c:	08010ee0 	.word	0x08010ee0
 800df80:	54442d18 	.word	0x54442d18
 800df84:	c00921fb 	.word	0xc00921fb
 800df88:	54442d18 	.word	0x54442d18
 800df8c:	bff921fb 	.word	0xbff921fb
 800df90:	7ff00000 	.word	0x7ff00000
 800df94:	00000000 	.word	0x00000000

0800df98 <atan>:
 800df98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	ec55 4b10 	vmov	r4, r5, d0
 800dfa0:	4bbf      	ldr	r3, [pc, #764]	@ (800e2a0 <atan+0x308>)
 800dfa2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dfa6:	429e      	cmp	r6, r3
 800dfa8:	46ab      	mov	fp, r5
 800dfaa:	d918      	bls.n	800dfde <atan+0x46>
 800dfac:	4bbd      	ldr	r3, [pc, #756]	@ (800e2a4 <atan+0x30c>)
 800dfae:	429e      	cmp	r6, r3
 800dfb0:	d801      	bhi.n	800dfb6 <atan+0x1e>
 800dfb2:	d109      	bne.n	800dfc8 <atan+0x30>
 800dfb4:	b144      	cbz	r4, 800dfc8 <atan+0x30>
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	462b      	mov	r3, r5
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7f2 f96d 	bl	800029c <__adddf3>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	460d      	mov	r5, r1
 800dfc6:	e006      	b.n	800dfd6 <atan+0x3e>
 800dfc8:	f1bb 0f00 	cmp.w	fp, #0
 800dfcc:	f340 812b 	ble.w	800e226 <atan+0x28e>
 800dfd0:	a597      	add	r5, pc, #604	@ (adr r5, 800e230 <atan+0x298>)
 800dfd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfd6:	ec45 4b10 	vmov	d0, r4, r5
 800dfda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	4bb2      	ldr	r3, [pc, #712]	@ (800e2a8 <atan+0x310>)
 800dfe0:	429e      	cmp	r6, r3
 800dfe2:	d813      	bhi.n	800e00c <atan+0x74>
 800dfe4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dfe8:	429e      	cmp	r6, r3
 800dfea:	d80c      	bhi.n	800e006 <atan+0x6e>
 800dfec:	a392      	add	r3, pc, #584	@ (adr r3, 800e238 <atan+0x2a0>)
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	4620      	mov	r0, r4
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7f2 f951 	bl	800029c <__adddf3>
 800dffa:	4bac      	ldr	r3, [pc, #688]	@ (800e2ac <atan+0x314>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	f7f2 fd93 	bl	8000b28 <__aeabi_dcmpgt>
 800e002:	2800      	cmp	r0, #0
 800e004:	d1e7      	bne.n	800dfd6 <atan+0x3e>
 800e006:	f04f 3aff 	mov.w	sl, #4294967295
 800e00a:	e029      	b.n	800e060 <atan+0xc8>
 800e00c:	f000 f95c 	bl	800e2c8 <fabs>
 800e010:	4ba7      	ldr	r3, [pc, #668]	@ (800e2b0 <atan+0x318>)
 800e012:	429e      	cmp	r6, r3
 800e014:	ec55 4b10 	vmov	r4, r5, d0
 800e018:	f200 80bc 	bhi.w	800e194 <atan+0x1fc>
 800e01c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e020:	429e      	cmp	r6, r3
 800e022:	f200 809e 	bhi.w	800e162 <atan+0x1ca>
 800e026:	4622      	mov	r2, r4
 800e028:	462b      	mov	r3, r5
 800e02a:	4620      	mov	r0, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	f7f2 f935 	bl	800029c <__adddf3>
 800e032:	4b9e      	ldr	r3, [pc, #632]	@ (800e2ac <atan+0x314>)
 800e034:	2200      	movs	r2, #0
 800e036:	f7f2 f92f 	bl	8000298 <__aeabi_dsub>
 800e03a:	2200      	movs	r2, #0
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 f928 	bl	800029c <__adddf3>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	4630      	mov	r0, r6
 800e052:	4639      	mov	r1, r7
 800e054:	f7f2 fc02 	bl	800085c <__aeabi_ddiv>
 800e058:	f04f 0a00 	mov.w	sl, #0
 800e05c:	4604      	mov	r4, r0
 800e05e:	460d      	mov	r5, r1
 800e060:	4622      	mov	r2, r4
 800e062:	462b      	mov	r3, r5
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 face 	bl	8000608 <__aeabi_dmul>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4680      	mov	r8, r0
 800e072:	4689      	mov	r9, r1
 800e074:	f7f2 fac8 	bl	8000608 <__aeabi_dmul>
 800e078:	a371      	add	r3, pc, #452	@ (adr r3, 800e240 <atan+0x2a8>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	4606      	mov	r6, r0
 800e080:	460f      	mov	r7, r1
 800e082:	f7f2 fac1 	bl	8000608 <__aeabi_dmul>
 800e086:	a370      	add	r3, pc, #448	@ (adr r3, 800e248 <atan+0x2b0>)
 800e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08c:	f7f2 f906 	bl	800029c <__adddf3>
 800e090:	4632      	mov	r2, r6
 800e092:	463b      	mov	r3, r7
 800e094:	f7f2 fab8 	bl	8000608 <__aeabi_dmul>
 800e098:	a36d      	add	r3, pc, #436	@ (adr r3, 800e250 <atan+0x2b8>)
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	f7f2 f8fd 	bl	800029c <__adddf3>
 800e0a2:	4632      	mov	r2, r6
 800e0a4:	463b      	mov	r3, r7
 800e0a6:	f7f2 faaf 	bl	8000608 <__aeabi_dmul>
 800e0aa:	a36b      	add	r3, pc, #428	@ (adr r3, 800e258 <atan+0x2c0>)
 800e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b0:	f7f2 f8f4 	bl	800029c <__adddf3>
 800e0b4:	4632      	mov	r2, r6
 800e0b6:	463b      	mov	r3, r7
 800e0b8:	f7f2 faa6 	bl	8000608 <__aeabi_dmul>
 800e0bc:	a368      	add	r3, pc, #416	@ (adr r3, 800e260 <atan+0x2c8>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7f2 f8eb 	bl	800029c <__adddf3>
 800e0c6:	4632      	mov	r2, r6
 800e0c8:	463b      	mov	r3, r7
 800e0ca:	f7f2 fa9d 	bl	8000608 <__aeabi_dmul>
 800e0ce:	a366      	add	r3, pc, #408	@ (adr r3, 800e268 <atan+0x2d0>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	f7f2 f8e2 	bl	800029c <__adddf3>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	f7f2 fa94 	bl	8000608 <__aeabi_dmul>
 800e0e0:	a363      	add	r3, pc, #396	@ (adr r3, 800e270 <atan+0x2d8>)
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	4680      	mov	r8, r0
 800e0e8:	4689      	mov	r9, r1
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	4639      	mov	r1, r7
 800e0ee:	f7f2 fa8b 	bl	8000608 <__aeabi_dmul>
 800e0f2:	a361      	add	r3, pc, #388	@ (adr r3, 800e278 <atan+0x2e0>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 f8ce 	bl	8000298 <__aeabi_dsub>
 800e0fc:	4632      	mov	r2, r6
 800e0fe:	463b      	mov	r3, r7
 800e100:	f7f2 fa82 	bl	8000608 <__aeabi_dmul>
 800e104:	a35e      	add	r3, pc, #376	@ (adr r3, 800e280 <atan+0x2e8>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	f7f2 f8c5 	bl	8000298 <__aeabi_dsub>
 800e10e:	4632      	mov	r2, r6
 800e110:	463b      	mov	r3, r7
 800e112:	f7f2 fa79 	bl	8000608 <__aeabi_dmul>
 800e116:	a35c      	add	r3, pc, #368	@ (adr r3, 800e288 <atan+0x2f0>)
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f7f2 f8bc 	bl	8000298 <__aeabi_dsub>
 800e120:	4632      	mov	r2, r6
 800e122:	463b      	mov	r3, r7
 800e124:	f7f2 fa70 	bl	8000608 <__aeabi_dmul>
 800e128:	a359      	add	r3, pc, #356	@ (adr r3, 800e290 <atan+0x2f8>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f7f2 f8b3 	bl	8000298 <__aeabi_dsub>
 800e132:	4632      	mov	r2, r6
 800e134:	463b      	mov	r3, r7
 800e136:	f7f2 fa67 	bl	8000608 <__aeabi_dmul>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4640      	mov	r0, r8
 800e140:	4649      	mov	r1, r9
 800e142:	f7f2 f8ab 	bl	800029c <__adddf3>
 800e146:	4622      	mov	r2, r4
 800e148:	462b      	mov	r3, r5
 800e14a:	f7f2 fa5d 	bl	8000608 <__aeabi_dmul>
 800e14e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	d148      	bne.n	800e1ea <atan+0x252>
 800e158:	4620      	mov	r0, r4
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 f89c 	bl	8000298 <__aeabi_dsub>
 800e160:	e72f      	b.n	800dfc2 <atan+0x2a>
 800e162:	4b52      	ldr	r3, [pc, #328]	@ (800e2ac <atan+0x314>)
 800e164:	2200      	movs	r2, #0
 800e166:	4620      	mov	r0, r4
 800e168:	4629      	mov	r1, r5
 800e16a:	f7f2 f895 	bl	8000298 <__aeabi_dsub>
 800e16e:	4b4f      	ldr	r3, [pc, #316]	@ (800e2ac <atan+0x314>)
 800e170:	4606      	mov	r6, r0
 800e172:	460f      	mov	r7, r1
 800e174:	2200      	movs	r2, #0
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 f88f 	bl	800029c <__adddf3>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4630      	mov	r0, r6
 800e184:	4639      	mov	r1, r7
 800e186:	f7f2 fb69 	bl	800085c <__aeabi_ddiv>
 800e18a:	f04f 0a01 	mov.w	sl, #1
 800e18e:	4604      	mov	r4, r0
 800e190:	460d      	mov	r5, r1
 800e192:	e765      	b.n	800e060 <atan+0xc8>
 800e194:	4b47      	ldr	r3, [pc, #284]	@ (800e2b4 <atan+0x31c>)
 800e196:	429e      	cmp	r6, r3
 800e198:	d21c      	bcs.n	800e1d4 <atan+0x23c>
 800e19a:	4b47      	ldr	r3, [pc, #284]	@ (800e2b8 <atan+0x320>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	4620      	mov	r0, r4
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	f7f2 f879 	bl	8000298 <__aeabi_dsub>
 800e1a6:	4b44      	ldr	r3, [pc, #272]	@ (800e2b8 <atan+0x320>)
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	460f      	mov	r7, r1
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	f7f2 fa29 	bl	8000608 <__aeabi_dmul>
 800e1b6:	4b3d      	ldr	r3, [pc, #244]	@ (800e2ac <atan+0x314>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f7f2 f86f 	bl	800029c <__adddf3>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 fb49 	bl	800085c <__aeabi_ddiv>
 800e1ca:	f04f 0a02 	mov.w	sl, #2
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	e745      	b.n	800e060 <atan+0xc8>
 800e1d4:	4622      	mov	r2, r4
 800e1d6:	462b      	mov	r3, r5
 800e1d8:	4938      	ldr	r1, [pc, #224]	@ (800e2bc <atan+0x324>)
 800e1da:	2000      	movs	r0, #0
 800e1dc:	f7f2 fb3e 	bl	800085c <__aeabi_ddiv>
 800e1e0:	f04f 0a03 	mov.w	sl, #3
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	460d      	mov	r5, r1
 800e1e8:	e73a      	b.n	800e060 <atan+0xc8>
 800e1ea:	4b35      	ldr	r3, [pc, #212]	@ (800e2c0 <atan+0x328>)
 800e1ec:	4e35      	ldr	r6, [pc, #212]	@ (800e2c4 <atan+0x32c>)
 800e1ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f84f 	bl	8000298 <__aeabi_dsub>
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	462b      	mov	r3, r5
 800e1fe:	f7f2 f84b 	bl	8000298 <__aeabi_dsub>
 800e202:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e20e:	f7f2 f843 	bl	8000298 <__aeabi_dsub>
 800e212:	f1bb 0f00 	cmp.w	fp, #0
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	f6bf aedc 	bge.w	800dfd6 <atan+0x3e>
 800e21e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e222:	461d      	mov	r5, r3
 800e224:	e6d7      	b.n	800dfd6 <atan+0x3e>
 800e226:	a51c      	add	r5, pc, #112	@ (adr r5, 800e298 <atan+0x300>)
 800e228:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e22c:	e6d3      	b.n	800dfd6 <atan+0x3e>
 800e22e:	bf00      	nop
 800e230:	54442d18 	.word	0x54442d18
 800e234:	3ff921fb 	.word	0x3ff921fb
 800e238:	8800759c 	.word	0x8800759c
 800e23c:	7e37e43c 	.word	0x7e37e43c
 800e240:	e322da11 	.word	0xe322da11
 800e244:	3f90ad3a 	.word	0x3f90ad3a
 800e248:	24760deb 	.word	0x24760deb
 800e24c:	3fa97b4b 	.word	0x3fa97b4b
 800e250:	a0d03d51 	.word	0xa0d03d51
 800e254:	3fb10d66 	.word	0x3fb10d66
 800e258:	c54c206e 	.word	0xc54c206e
 800e25c:	3fb745cd 	.word	0x3fb745cd
 800e260:	920083ff 	.word	0x920083ff
 800e264:	3fc24924 	.word	0x3fc24924
 800e268:	5555550d 	.word	0x5555550d
 800e26c:	3fd55555 	.word	0x3fd55555
 800e270:	2c6a6c2f 	.word	0x2c6a6c2f
 800e274:	bfa2b444 	.word	0xbfa2b444
 800e278:	52defd9a 	.word	0x52defd9a
 800e27c:	3fadde2d 	.word	0x3fadde2d
 800e280:	af749a6d 	.word	0xaf749a6d
 800e284:	3fb3b0f2 	.word	0x3fb3b0f2
 800e288:	fe231671 	.word	0xfe231671
 800e28c:	3fbc71c6 	.word	0x3fbc71c6
 800e290:	9998ebc4 	.word	0x9998ebc4
 800e294:	3fc99999 	.word	0x3fc99999
 800e298:	54442d18 	.word	0x54442d18
 800e29c:	bff921fb 	.word	0xbff921fb
 800e2a0:	440fffff 	.word	0x440fffff
 800e2a4:	7ff00000 	.word	0x7ff00000
 800e2a8:	3fdbffff 	.word	0x3fdbffff
 800e2ac:	3ff00000 	.word	0x3ff00000
 800e2b0:	3ff2ffff 	.word	0x3ff2ffff
 800e2b4:	40038000 	.word	0x40038000
 800e2b8:	3ff80000 	.word	0x3ff80000
 800e2bc:	bff00000 	.word	0xbff00000
 800e2c0:	08010f10 	.word	0x08010f10
 800e2c4:	08010f30 	.word	0x08010f30

0800e2c8 <fabs>:
 800e2c8:	ec51 0b10 	vmov	r0, r1, d0
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e2d2:	ec43 2b10 	vmov	d0, r2, r3
 800e2d6:	4770      	bx	lr

0800e2d8 <__cvt>:
 800e2d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2dc:	ec57 6b10 	vmov	r6, r7, d0
 800e2e0:	2f00      	cmp	r7, #0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	463b      	mov	r3, r7
 800e2e8:	bfbb      	ittet	lt
 800e2ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e2ee:	461f      	movlt	r7, r3
 800e2f0:	2300      	movge	r3, #0
 800e2f2:	232d      	movlt	r3, #45	@ 0x2d
 800e2f4:	700b      	strb	r3, [r1, #0]
 800e2f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e2fc:	4691      	mov	r9, r2
 800e2fe:	f023 0820 	bic.w	r8, r3, #32
 800e302:	bfbc      	itt	lt
 800e304:	4632      	movlt	r2, r6
 800e306:	4616      	movlt	r6, r2
 800e308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e30c:	d005      	beq.n	800e31a <__cvt+0x42>
 800e30e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e312:	d100      	bne.n	800e316 <__cvt+0x3e>
 800e314:	3401      	adds	r4, #1
 800e316:	2102      	movs	r1, #2
 800e318:	e000      	b.n	800e31c <__cvt+0x44>
 800e31a:	2103      	movs	r1, #3
 800e31c:	ab03      	add	r3, sp, #12
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	ab02      	add	r3, sp, #8
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	ec47 6b10 	vmov	d0, r6, r7
 800e328:	4653      	mov	r3, sl
 800e32a:	4622      	mov	r2, r4
 800e32c:	f000 ff40 	bl	800f1b0 <_dtoa_r>
 800e330:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e334:	4605      	mov	r5, r0
 800e336:	d119      	bne.n	800e36c <__cvt+0x94>
 800e338:	f019 0f01 	tst.w	r9, #1
 800e33c:	d00e      	beq.n	800e35c <__cvt+0x84>
 800e33e:	eb00 0904 	add.w	r9, r0, r4
 800e342:	2200      	movs	r2, #0
 800e344:	2300      	movs	r3, #0
 800e346:	4630      	mov	r0, r6
 800e348:	4639      	mov	r1, r7
 800e34a:	f7f2 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800e34e:	b108      	cbz	r0, 800e354 <__cvt+0x7c>
 800e350:	f8cd 900c 	str.w	r9, [sp, #12]
 800e354:	2230      	movs	r2, #48	@ 0x30
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	454b      	cmp	r3, r9
 800e35a:	d31e      	bcc.n	800e39a <__cvt+0xc2>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e360:	1b5b      	subs	r3, r3, r5
 800e362:	4628      	mov	r0, r5
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	b004      	add	sp, #16
 800e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e370:	eb00 0904 	add.w	r9, r0, r4
 800e374:	d1e5      	bne.n	800e342 <__cvt+0x6a>
 800e376:	7803      	ldrb	r3, [r0, #0]
 800e378:	2b30      	cmp	r3, #48	@ 0x30
 800e37a:	d10a      	bne.n	800e392 <__cvt+0xba>
 800e37c:	2200      	movs	r2, #0
 800e37e:	2300      	movs	r3, #0
 800e380:	4630      	mov	r0, r6
 800e382:	4639      	mov	r1, r7
 800e384:	f7f2 fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e388:	b918      	cbnz	r0, 800e392 <__cvt+0xba>
 800e38a:	f1c4 0401 	rsb	r4, r4, #1
 800e38e:	f8ca 4000 	str.w	r4, [sl]
 800e392:	f8da 3000 	ldr.w	r3, [sl]
 800e396:	4499      	add	r9, r3
 800e398:	e7d3      	b.n	800e342 <__cvt+0x6a>
 800e39a:	1c59      	adds	r1, r3, #1
 800e39c:	9103      	str	r1, [sp, #12]
 800e39e:	701a      	strb	r2, [r3, #0]
 800e3a0:	e7d9      	b.n	800e356 <__cvt+0x7e>

0800e3a2 <__exponent>:
 800e3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3a4:	2900      	cmp	r1, #0
 800e3a6:	bfba      	itte	lt
 800e3a8:	4249      	neglt	r1, r1
 800e3aa:	232d      	movlt	r3, #45	@ 0x2d
 800e3ac:	232b      	movge	r3, #43	@ 0x2b
 800e3ae:	2909      	cmp	r1, #9
 800e3b0:	7002      	strb	r2, [r0, #0]
 800e3b2:	7043      	strb	r3, [r0, #1]
 800e3b4:	dd29      	ble.n	800e40a <__exponent+0x68>
 800e3b6:	f10d 0307 	add.w	r3, sp, #7
 800e3ba:	461d      	mov	r5, r3
 800e3bc:	270a      	movs	r7, #10
 800e3be:	461a      	mov	r2, r3
 800e3c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e3c4:	fb07 1416 	mls	r4, r7, r6, r1
 800e3c8:	3430      	adds	r4, #48	@ 0x30
 800e3ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	2c63      	cmp	r4, #99	@ 0x63
 800e3d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	dcf1      	bgt.n	800e3be <__exponent+0x1c>
 800e3da:	3130      	adds	r1, #48	@ 0x30
 800e3dc:	1e94      	subs	r4, r2, #2
 800e3de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e3e2:	1c41      	adds	r1, r0, #1
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	42ab      	cmp	r3, r5
 800e3e8:	d30a      	bcc.n	800e400 <__exponent+0x5e>
 800e3ea:	f10d 0309 	add.w	r3, sp, #9
 800e3ee:	1a9b      	subs	r3, r3, r2
 800e3f0:	42ac      	cmp	r4, r5
 800e3f2:	bf88      	it	hi
 800e3f4:	2300      	movhi	r3, #0
 800e3f6:	3302      	adds	r3, #2
 800e3f8:	4403      	add	r3, r0
 800e3fa:	1a18      	subs	r0, r3, r0
 800e3fc:	b003      	add	sp, #12
 800e3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e400:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e404:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e408:	e7ed      	b.n	800e3e6 <__exponent+0x44>
 800e40a:	2330      	movs	r3, #48	@ 0x30
 800e40c:	3130      	adds	r1, #48	@ 0x30
 800e40e:	7083      	strb	r3, [r0, #2]
 800e410:	70c1      	strb	r1, [r0, #3]
 800e412:	1d03      	adds	r3, r0, #4
 800e414:	e7f1      	b.n	800e3fa <__exponent+0x58>
	...

0800e418 <_printf_float>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	b08d      	sub	sp, #52	@ 0x34
 800e41e:	460c      	mov	r4, r1
 800e420:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e424:	4616      	mov	r6, r2
 800e426:	461f      	mov	r7, r3
 800e428:	4605      	mov	r5, r0
 800e42a:	f000 fdbf 	bl	800efac <_localeconv_r>
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	9304      	str	r3, [sp, #16]
 800e432:	4618      	mov	r0, r3
 800e434:	f7f1 ff24 	bl	8000280 <strlen>
 800e438:	2300      	movs	r3, #0
 800e43a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e43c:	f8d8 3000 	ldr.w	r3, [r8]
 800e440:	9005      	str	r0, [sp, #20]
 800e442:	3307      	adds	r3, #7
 800e444:	f023 0307 	bic.w	r3, r3, #7
 800e448:	f103 0208 	add.w	r2, r3, #8
 800e44c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e450:	f8d4 b000 	ldr.w	fp, [r4]
 800e454:	f8c8 2000 	str.w	r2, [r8]
 800e458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e45c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e460:	9307      	str	r3, [sp, #28]
 800e462:	f8cd 8018 	str.w	r8, [sp, #24]
 800e466:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e46a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e46e:	4b9c      	ldr	r3, [pc, #624]	@ (800e6e0 <_printf_float+0x2c8>)
 800e470:	f04f 32ff 	mov.w	r2, #4294967295
 800e474:	f7f2 fb62 	bl	8000b3c <__aeabi_dcmpun>
 800e478:	bb70      	cbnz	r0, 800e4d8 <_printf_float+0xc0>
 800e47a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e47e:	4b98      	ldr	r3, [pc, #608]	@ (800e6e0 <_printf_float+0x2c8>)
 800e480:	f04f 32ff 	mov.w	r2, #4294967295
 800e484:	f7f2 fb3c 	bl	8000b00 <__aeabi_dcmple>
 800e488:	bb30      	cbnz	r0, 800e4d8 <_printf_float+0xc0>
 800e48a:	2200      	movs	r2, #0
 800e48c:	2300      	movs	r3, #0
 800e48e:	4640      	mov	r0, r8
 800e490:	4649      	mov	r1, r9
 800e492:	f7f2 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800e496:	b110      	cbz	r0, 800e49e <_printf_float+0x86>
 800e498:	232d      	movs	r3, #45	@ 0x2d
 800e49a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e49e:	4a91      	ldr	r2, [pc, #580]	@ (800e6e4 <_printf_float+0x2cc>)
 800e4a0:	4b91      	ldr	r3, [pc, #580]	@ (800e6e8 <_printf_float+0x2d0>)
 800e4a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e4a6:	bf94      	ite	ls
 800e4a8:	4690      	movls	r8, r2
 800e4aa:	4698      	movhi	r8, r3
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	6123      	str	r3, [r4, #16]
 800e4b0:	f02b 0304 	bic.w	r3, fp, #4
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	f04f 0900 	mov.w	r9, #0
 800e4ba:	9700      	str	r7, [sp, #0]
 800e4bc:	4633      	mov	r3, r6
 800e4be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f000 f9d2 	bl	800e86c <_printf_common>
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	f040 808d 	bne.w	800e5e8 <_printf_float+0x1d0>
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d2:	b00d      	add	sp, #52	@ 0x34
 800e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d8:	4642      	mov	r2, r8
 800e4da:	464b      	mov	r3, r9
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f2 fb2c 	bl	8000b3c <__aeabi_dcmpun>
 800e4e4:	b140      	cbz	r0, 800e4f8 <_printf_float+0xe0>
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	bfbc      	itt	lt
 800e4ec:	232d      	movlt	r3, #45	@ 0x2d
 800e4ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e4f2:	4a7e      	ldr	r2, [pc, #504]	@ (800e6ec <_printf_float+0x2d4>)
 800e4f4:	4b7e      	ldr	r3, [pc, #504]	@ (800e6f0 <_printf_float+0x2d8>)
 800e4f6:	e7d4      	b.n	800e4a2 <_printf_float+0x8a>
 800e4f8:	6863      	ldr	r3, [r4, #4]
 800e4fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e4fe:	9206      	str	r2, [sp, #24]
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	d13b      	bne.n	800e57c <_printf_float+0x164>
 800e504:	2306      	movs	r3, #6
 800e506:	6063      	str	r3, [r4, #4]
 800e508:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e50c:	2300      	movs	r3, #0
 800e50e:	6022      	str	r2, [r4, #0]
 800e510:	9303      	str	r3, [sp, #12]
 800e512:	ab0a      	add	r3, sp, #40	@ 0x28
 800e514:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e518:	ab09      	add	r3, sp, #36	@ 0x24
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	6861      	ldr	r1, [r4, #4]
 800e51e:	ec49 8b10 	vmov	d0, r8, r9
 800e522:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e526:	4628      	mov	r0, r5
 800e528:	f7ff fed6 	bl	800e2d8 <__cvt>
 800e52c:	9b06      	ldr	r3, [sp, #24]
 800e52e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e530:	2b47      	cmp	r3, #71	@ 0x47
 800e532:	4680      	mov	r8, r0
 800e534:	d129      	bne.n	800e58a <_printf_float+0x172>
 800e536:	1cc8      	adds	r0, r1, #3
 800e538:	db02      	blt.n	800e540 <_printf_float+0x128>
 800e53a:	6863      	ldr	r3, [r4, #4]
 800e53c:	4299      	cmp	r1, r3
 800e53e:	dd41      	ble.n	800e5c4 <_printf_float+0x1ac>
 800e540:	f1aa 0a02 	sub.w	sl, sl, #2
 800e544:	fa5f fa8a 	uxtb.w	sl, sl
 800e548:	3901      	subs	r1, #1
 800e54a:	4652      	mov	r2, sl
 800e54c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e550:	9109      	str	r1, [sp, #36]	@ 0x24
 800e552:	f7ff ff26 	bl	800e3a2 <__exponent>
 800e556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e558:	1813      	adds	r3, r2, r0
 800e55a:	2a01      	cmp	r2, #1
 800e55c:	4681      	mov	r9, r0
 800e55e:	6123      	str	r3, [r4, #16]
 800e560:	dc02      	bgt.n	800e568 <_printf_float+0x150>
 800e562:	6822      	ldr	r2, [r4, #0]
 800e564:	07d2      	lsls	r2, r2, #31
 800e566:	d501      	bpl.n	800e56c <_printf_float+0x154>
 800e568:	3301      	adds	r3, #1
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e570:	2b00      	cmp	r3, #0
 800e572:	d0a2      	beq.n	800e4ba <_printf_float+0xa2>
 800e574:	232d      	movs	r3, #45	@ 0x2d
 800e576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e57a:	e79e      	b.n	800e4ba <_printf_float+0xa2>
 800e57c:	9a06      	ldr	r2, [sp, #24]
 800e57e:	2a47      	cmp	r2, #71	@ 0x47
 800e580:	d1c2      	bne.n	800e508 <_printf_float+0xf0>
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1c0      	bne.n	800e508 <_printf_float+0xf0>
 800e586:	2301      	movs	r3, #1
 800e588:	e7bd      	b.n	800e506 <_printf_float+0xee>
 800e58a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e58e:	d9db      	bls.n	800e548 <_printf_float+0x130>
 800e590:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e594:	d118      	bne.n	800e5c8 <_printf_float+0x1b0>
 800e596:	2900      	cmp	r1, #0
 800e598:	6863      	ldr	r3, [r4, #4]
 800e59a:	dd0b      	ble.n	800e5b4 <_printf_float+0x19c>
 800e59c:	6121      	str	r1, [r4, #16]
 800e59e:	b913      	cbnz	r3, 800e5a6 <_printf_float+0x18e>
 800e5a0:	6822      	ldr	r2, [r4, #0]
 800e5a2:	07d0      	lsls	r0, r2, #31
 800e5a4:	d502      	bpl.n	800e5ac <_printf_float+0x194>
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	440b      	add	r3, r1
 800e5aa:	6123      	str	r3, [r4, #16]
 800e5ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e5ae:	f04f 0900 	mov.w	r9, #0
 800e5b2:	e7db      	b.n	800e56c <_printf_float+0x154>
 800e5b4:	b913      	cbnz	r3, 800e5bc <_printf_float+0x1a4>
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	07d2      	lsls	r2, r2, #31
 800e5ba:	d501      	bpl.n	800e5c0 <_printf_float+0x1a8>
 800e5bc:	3302      	adds	r3, #2
 800e5be:	e7f4      	b.n	800e5aa <_printf_float+0x192>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e7f2      	b.n	800e5aa <_printf_float+0x192>
 800e5c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e5c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5ca:	4299      	cmp	r1, r3
 800e5cc:	db05      	blt.n	800e5da <_printf_float+0x1c2>
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	6121      	str	r1, [r4, #16]
 800e5d2:	07d8      	lsls	r0, r3, #31
 800e5d4:	d5ea      	bpl.n	800e5ac <_printf_float+0x194>
 800e5d6:	1c4b      	adds	r3, r1, #1
 800e5d8:	e7e7      	b.n	800e5aa <_printf_float+0x192>
 800e5da:	2900      	cmp	r1, #0
 800e5dc:	bfd4      	ite	le
 800e5de:	f1c1 0202 	rsble	r2, r1, #2
 800e5e2:	2201      	movgt	r2, #1
 800e5e4:	4413      	add	r3, r2
 800e5e6:	e7e0      	b.n	800e5aa <_printf_float+0x192>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	055a      	lsls	r2, r3, #21
 800e5ec:	d407      	bmi.n	800e5fe <_printf_float+0x1e6>
 800e5ee:	6923      	ldr	r3, [r4, #16]
 800e5f0:	4642      	mov	r2, r8
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b8      	blx	r7
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d12b      	bne.n	800e654 <_printf_float+0x23c>
 800e5fc:	e767      	b.n	800e4ce <_printf_float+0xb6>
 800e5fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e602:	f240 80dd 	bls.w	800e7c0 <_printf_float+0x3a8>
 800e606:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e60a:	2200      	movs	r2, #0
 800e60c:	2300      	movs	r3, #0
 800e60e:	f7f2 fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 800e612:	2800      	cmp	r0, #0
 800e614:	d033      	beq.n	800e67e <_printf_float+0x266>
 800e616:	4a37      	ldr	r2, [pc, #220]	@ (800e6f4 <_printf_float+0x2dc>)
 800e618:	2301      	movs	r3, #1
 800e61a:	4631      	mov	r1, r6
 800e61c:	4628      	mov	r0, r5
 800e61e:	47b8      	blx	r7
 800e620:	3001      	adds	r0, #1
 800e622:	f43f af54 	beq.w	800e4ce <_printf_float+0xb6>
 800e626:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e62a:	4543      	cmp	r3, r8
 800e62c:	db02      	blt.n	800e634 <_printf_float+0x21c>
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	07d8      	lsls	r0, r3, #31
 800e632:	d50f      	bpl.n	800e654 <_printf_float+0x23c>
 800e634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	47b8      	blx	r7
 800e63e:	3001      	adds	r0, #1
 800e640:	f43f af45 	beq.w	800e4ce <_printf_float+0xb6>
 800e644:	f04f 0900 	mov.w	r9, #0
 800e648:	f108 38ff 	add.w	r8, r8, #4294967295
 800e64c:	f104 0a1a 	add.w	sl, r4, #26
 800e650:	45c8      	cmp	r8, r9
 800e652:	dc09      	bgt.n	800e668 <_printf_float+0x250>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	079b      	lsls	r3, r3, #30
 800e658:	f100 8103 	bmi.w	800e862 <_printf_float+0x44a>
 800e65c:	68e0      	ldr	r0, [r4, #12]
 800e65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e660:	4298      	cmp	r0, r3
 800e662:	bfb8      	it	lt
 800e664:	4618      	movlt	r0, r3
 800e666:	e734      	b.n	800e4d2 <_printf_float+0xba>
 800e668:	2301      	movs	r3, #1
 800e66a:	4652      	mov	r2, sl
 800e66c:	4631      	mov	r1, r6
 800e66e:	4628      	mov	r0, r5
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f af2b 	beq.w	800e4ce <_printf_float+0xb6>
 800e678:	f109 0901 	add.w	r9, r9, #1
 800e67c:	e7e8      	b.n	800e650 <_printf_float+0x238>
 800e67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc39      	bgt.n	800e6f8 <_printf_float+0x2e0>
 800e684:	4a1b      	ldr	r2, [pc, #108]	@ (800e6f4 <_printf_float+0x2dc>)
 800e686:	2301      	movs	r3, #1
 800e688:	4631      	mov	r1, r6
 800e68a:	4628      	mov	r0, r5
 800e68c:	47b8      	blx	r7
 800e68e:	3001      	adds	r0, #1
 800e690:	f43f af1d 	beq.w	800e4ce <_printf_float+0xb6>
 800e694:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e698:	ea59 0303 	orrs.w	r3, r9, r3
 800e69c:	d102      	bne.n	800e6a4 <_printf_float+0x28c>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	07d9      	lsls	r1, r3, #31
 800e6a2:	d5d7      	bpl.n	800e654 <_printf_float+0x23c>
 800e6a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af0d 	beq.w	800e4ce <_printf_float+0xb6>
 800e6b4:	f04f 0a00 	mov.w	sl, #0
 800e6b8:	f104 0b1a 	add.w	fp, r4, #26
 800e6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6be:	425b      	negs	r3, r3
 800e6c0:	4553      	cmp	r3, sl
 800e6c2:	dc01      	bgt.n	800e6c8 <_printf_float+0x2b0>
 800e6c4:	464b      	mov	r3, r9
 800e6c6:	e793      	b.n	800e5f0 <_printf_float+0x1d8>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	465a      	mov	r2, fp
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	f43f aefb 	beq.w	800e4ce <_printf_float+0xb6>
 800e6d8:	f10a 0a01 	add.w	sl, sl, #1
 800e6dc:	e7ee      	b.n	800e6bc <_printf_float+0x2a4>
 800e6de:	bf00      	nop
 800e6e0:	7fefffff 	.word	0x7fefffff
 800e6e4:	08010f50 	.word	0x08010f50
 800e6e8:	08010f54 	.word	0x08010f54
 800e6ec:	08010f58 	.word	0x08010f58
 800e6f0:	08010f5c 	.word	0x08010f5c
 800e6f4:	08010f60 	.word	0x08010f60
 800e6f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e6fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6fe:	4553      	cmp	r3, sl
 800e700:	bfa8      	it	ge
 800e702:	4653      	movge	r3, sl
 800e704:	2b00      	cmp	r3, #0
 800e706:	4699      	mov	r9, r3
 800e708:	dc36      	bgt.n	800e778 <_printf_float+0x360>
 800e70a:	f04f 0b00 	mov.w	fp, #0
 800e70e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e712:	f104 021a 	add.w	r2, r4, #26
 800e716:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e718:	9306      	str	r3, [sp, #24]
 800e71a:	eba3 0309 	sub.w	r3, r3, r9
 800e71e:	455b      	cmp	r3, fp
 800e720:	dc31      	bgt.n	800e786 <_printf_float+0x36e>
 800e722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e724:	459a      	cmp	sl, r3
 800e726:	dc3a      	bgt.n	800e79e <_printf_float+0x386>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	07da      	lsls	r2, r3, #31
 800e72c:	d437      	bmi.n	800e79e <_printf_float+0x386>
 800e72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e730:	ebaa 0903 	sub.w	r9, sl, r3
 800e734:	9b06      	ldr	r3, [sp, #24]
 800e736:	ebaa 0303 	sub.w	r3, sl, r3
 800e73a:	4599      	cmp	r9, r3
 800e73c:	bfa8      	it	ge
 800e73e:	4699      	movge	r9, r3
 800e740:	f1b9 0f00 	cmp.w	r9, #0
 800e744:	dc33      	bgt.n	800e7ae <_printf_float+0x396>
 800e746:	f04f 0800 	mov.w	r8, #0
 800e74a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e74e:	f104 0b1a 	add.w	fp, r4, #26
 800e752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e754:	ebaa 0303 	sub.w	r3, sl, r3
 800e758:	eba3 0309 	sub.w	r3, r3, r9
 800e75c:	4543      	cmp	r3, r8
 800e75e:	f77f af79 	ble.w	800e654 <_printf_float+0x23c>
 800e762:	2301      	movs	r3, #1
 800e764:	465a      	mov	r2, fp
 800e766:	4631      	mov	r1, r6
 800e768:	4628      	mov	r0, r5
 800e76a:	47b8      	blx	r7
 800e76c:	3001      	adds	r0, #1
 800e76e:	f43f aeae 	beq.w	800e4ce <_printf_float+0xb6>
 800e772:	f108 0801 	add.w	r8, r8, #1
 800e776:	e7ec      	b.n	800e752 <_printf_float+0x33a>
 800e778:	4642      	mov	r2, r8
 800e77a:	4631      	mov	r1, r6
 800e77c:	4628      	mov	r0, r5
 800e77e:	47b8      	blx	r7
 800e780:	3001      	adds	r0, #1
 800e782:	d1c2      	bne.n	800e70a <_printf_float+0x2f2>
 800e784:	e6a3      	b.n	800e4ce <_printf_float+0xb6>
 800e786:	2301      	movs	r3, #1
 800e788:	4631      	mov	r1, r6
 800e78a:	4628      	mov	r0, r5
 800e78c:	9206      	str	r2, [sp, #24]
 800e78e:	47b8      	blx	r7
 800e790:	3001      	adds	r0, #1
 800e792:	f43f ae9c 	beq.w	800e4ce <_printf_float+0xb6>
 800e796:	9a06      	ldr	r2, [sp, #24]
 800e798:	f10b 0b01 	add.w	fp, fp, #1
 800e79c:	e7bb      	b.n	800e716 <_printf_float+0x2fe>
 800e79e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7a2:	4631      	mov	r1, r6
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	47b8      	blx	r7
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	d1c0      	bne.n	800e72e <_printf_float+0x316>
 800e7ac:	e68f      	b.n	800e4ce <_printf_float+0xb6>
 800e7ae:	9a06      	ldr	r2, [sp, #24]
 800e7b0:	464b      	mov	r3, r9
 800e7b2:	4442      	add	r2, r8
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d1c3      	bne.n	800e746 <_printf_float+0x32e>
 800e7be:	e686      	b.n	800e4ce <_printf_float+0xb6>
 800e7c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e7c4:	f1ba 0f01 	cmp.w	sl, #1
 800e7c8:	dc01      	bgt.n	800e7ce <_printf_float+0x3b6>
 800e7ca:	07db      	lsls	r3, r3, #31
 800e7cc:	d536      	bpl.n	800e83c <_printf_float+0x424>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	47b8      	blx	r7
 800e7d8:	3001      	adds	r0, #1
 800e7da:	f43f ae78 	beq.w	800e4ce <_printf_float+0xb6>
 800e7de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	47b8      	blx	r7
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	f43f ae70 	beq.w	800e4ce <_printf_float+0xb6>
 800e7ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7fa:	f7f2 f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7fe:	b9c0      	cbnz	r0, 800e832 <_printf_float+0x41a>
 800e800:	4653      	mov	r3, sl
 800e802:	f108 0201 	add.w	r2, r8, #1
 800e806:	4631      	mov	r1, r6
 800e808:	4628      	mov	r0, r5
 800e80a:	47b8      	blx	r7
 800e80c:	3001      	adds	r0, #1
 800e80e:	d10c      	bne.n	800e82a <_printf_float+0x412>
 800e810:	e65d      	b.n	800e4ce <_printf_float+0xb6>
 800e812:	2301      	movs	r3, #1
 800e814:	465a      	mov	r2, fp
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	f43f ae56 	beq.w	800e4ce <_printf_float+0xb6>
 800e822:	f108 0801 	add.w	r8, r8, #1
 800e826:	45d0      	cmp	r8, sl
 800e828:	dbf3      	blt.n	800e812 <_printf_float+0x3fa>
 800e82a:	464b      	mov	r3, r9
 800e82c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e830:	e6df      	b.n	800e5f2 <_printf_float+0x1da>
 800e832:	f04f 0800 	mov.w	r8, #0
 800e836:	f104 0b1a 	add.w	fp, r4, #26
 800e83a:	e7f4      	b.n	800e826 <_printf_float+0x40e>
 800e83c:	2301      	movs	r3, #1
 800e83e:	4642      	mov	r2, r8
 800e840:	e7e1      	b.n	800e806 <_printf_float+0x3ee>
 800e842:	2301      	movs	r3, #1
 800e844:	464a      	mov	r2, r9
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	47b8      	blx	r7
 800e84c:	3001      	adds	r0, #1
 800e84e:	f43f ae3e 	beq.w	800e4ce <_printf_float+0xb6>
 800e852:	f108 0801 	add.w	r8, r8, #1
 800e856:	68e3      	ldr	r3, [r4, #12]
 800e858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e85a:	1a5b      	subs	r3, r3, r1
 800e85c:	4543      	cmp	r3, r8
 800e85e:	dcf0      	bgt.n	800e842 <_printf_float+0x42a>
 800e860:	e6fc      	b.n	800e65c <_printf_float+0x244>
 800e862:	f04f 0800 	mov.w	r8, #0
 800e866:	f104 0919 	add.w	r9, r4, #25
 800e86a:	e7f4      	b.n	800e856 <_printf_float+0x43e>

0800e86c <_printf_common>:
 800e86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e870:	4616      	mov	r6, r2
 800e872:	4698      	mov	r8, r3
 800e874:	688a      	ldr	r2, [r1, #8]
 800e876:	690b      	ldr	r3, [r1, #16]
 800e878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	bfb8      	it	lt
 800e880:	4613      	movlt	r3, r2
 800e882:	6033      	str	r3, [r6, #0]
 800e884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e888:	4607      	mov	r7, r0
 800e88a:	460c      	mov	r4, r1
 800e88c:	b10a      	cbz	r2, 800e892 <_printf_common+0x26>
 800e88e:	3301      	adds	r3, #1
 800e890:	6033      	str	r3, [r6, #0]
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	0699      	lsls	r1, r3, #26
 800e896:	bf42      	ittt	mi
 800e898:	6833      	ldrmi	r3, [r6, #0]
 800e89a:	3302      	addmi	r3, #2
 800e89c:	6033      	strmi	r3, [r6, #0]
 800e89e:	6825      	ldr	r5, [r4, #0]
 800e8a0:	f015 0506 	ands.w	r5, r5, #6
 800e8a4:	d106      	bne.n	800e8b4 <_printf_common+0x48>
 800e8a6:	f104 0a19 	add.w	sl, r4, #25
 800e8aa:	68e3      	ldr	r3, [r4, #12]
 800e8ac:	6832      	ldr	r2, [r6, #0]
 800e8ae:	1a9b      	subs	r3, r3, r2
 800e8b0:	42ab      	cmp	r3, r5
 800e8b2:	dc26      	bgt.n	800e902 <_printf_common+0x96>
 800e8b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	3b00      	subs	r3, #0
 800e8bc:	bf18      	it	ne
 800e8be:	2301      	movne	r3, #1
 800e8c0:	0692      	lsls	r2, r2, #26
 800e8c2:	d42b      	bmi.n	800e91c <_printf_common+0xb0>
 800e8c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e8c8:	4641      	mov	r1, r8
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	47c8      	blx	r9
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	d01e      	beq.n	800e910 <_printf_common+0xa4>
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	6922      	ldr	r2, [r4, #16]
 800e8d6:	f003 0306 	and.w	r3, r3, #6
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	bf02      	ittt	eq
 800e8de:	68e5      	ldreq	r5, [r4, #12]
 800e8e0:	6833      	ldreq	r3, [r6, #0]
 800e8e2:	1aed      	subeq	r5, r5, r3
 800e8e4:	68a3      	ldr	r3, [r4, #8]
 800e8e6:	bf0c      	ite	eq
 800e8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8ec:	2500      	movne	r5, #0
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	bfc4      	itt	gt
 800e8f2:	1a9b      	subgt	r3, r3, r2
 800e8f4:	18ed      	addgt	r5, r5, r3
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	341a      	adds	r4, #26
 800e8fa:	42b5      	cmp	r5, r6
 800e8fc:	d11a      	bne.n	800e934 <_printf_common+0xc8>
 800e8fe:	2000      	movs	r0, #0
 800e900:	e008      	b.n	800e914 <_printf_common+0xa8>
 800e902:	2301      	movs	r3, #1
 800e904:	4652      	mov	r2, sl
 800e906:	4641      	mov	r1, r8
 800e908:	4638      	mov	r0, r7
 800e90a:	47c8      	blx	r9
 800e90c:	3001      	adds	r0, #1
 800e90e:	d103      	bne.n	800e918 <_printf_common+0xac>
 800e910:	f04f 30ff 	mov.w	r0, #4294967295
 800e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e918:	3501      	adds	r5, #1
 800e91a:	e7c6      	b.n	800e8aa <_printf_common+0x3e>
 800e91c:	18e1      	adds	r1, r4, r3
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	2030      	movs	r0, #48	@ 0x30
 800e922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e926:	4422      	add	r2, r4
 800e928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e92c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e930:	3302      	adds	r3, #2
 800e932:	e7c7      	b.n	800e8c4 <_printf_common+0x58>
 800e934:	2301      	movs	r3, #1
 800e936:	4622      	mov	r2, r4
 800e938:	4641      	mov	r1, r8
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c8      	blx	r9
 800e93e:	3001      	adds	r0, #1
 800e940:	d0e6      	beq.n	800e910 <_printf_common+0xa4>
 800e942:	3601      	adds	r6, #1
 800e944:	e7d9      	b.n	800e8fa <_printf_common+0x8e>
	...

0800e948 <_printf_i>:
 800e948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e94c:	7e0f      	ldrb	r7, [r1, #24]
 800e94e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e950:	2f78      	cmp	r7, #120	@ 0x78
 800e952:	4691      	mov	r9, r2
 800e954:	4680      	mov	r8, r0
 800e956:	460c      	mov	r4, r1
 800e958:	469a      	mov	sl, r3
 800e95a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e95e:	d807      	bhi.n	800e970 <_printf_i+0x28>
 800e960:	2f62      	cmp	r7, #98	@ 0x62
 800e962:	d80a      	bhi.n	800e97a <_printf_i+0x32>
 800e964:	2f00      	cmp	r7, #0
 800e966:	f000 80d2 	beq.w	800eb0e <_printf_i+0x1c6>
 800e96a:	2f58      	cmp	r7, #88	@ 0x58
 800e96c:	f000 80b9 	beq.w	800eae2 <_printf_i+0x19a>
 800e970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e978:	e03a      	b.n	800e9f0 <_printf_i+0xa8>
 800e97a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e97e:	2b15      	cmp	r3, #21
 800e980:	d8f6      	bhi.n	800e970 <_printf_i+0x28>
 800e982:	a101      	add	r1, pc, #4	@ (adr r1, 800e988 <_printf_i+0x40>)
 800e984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e988:	0800e9e1 	.word	0x0800e9e1
 800e98c:	0800e9f5 	.word	0x0800e9f5
 800e990:	0800e971 	.word	0x0800e971
 800e994:	0800e971 	.word	0x0800e971
 800e998:	0800e971 	.word	0x0800e971
 800e99c:	0800e971 	.word	0x0800e971
 800e9a0:	0800e9f5 	.word	0x0800e9f5
 800e9a4:	0800e971 	.word	0x0800e971
 800e9a8:	0800e971 	.word	0x0800e971
 800e9ac:	0800e971 	.word	0x0800e971
 800e9b0:	0800e971 	.word	0x0800e971
 800e9b4:	0800eaf5 	.word	0x0800eaf5
 800e9b8:	0800ea1f 	.word	0x0800ea1f
 800e9bc:	0800eaaf 	.word	0x0800eaaf
 800e9c0:	0800e971 	.word	0x0800e971
 800e9c4:	0800e971 	.word	0x0800e971
 800e9c8:	0800eb17 	.word	0x0800eb17
 800e9cc:	0800e971 	.word	0x0800e971
 800e9d0:	0800ea1f 	.word	0x0800ea1f
 800e9d4:	0800e971 	.word	0x0800e971
 800e9d8:	0800e971 	.word	0x0800e971
 800e9dc:	0800eab7 	.word	0x0800eab7
 800e9e0:	6833      	ldr	r3, [r6, #0]
 800e9e2:	1d1a      	adds	r2, r3, #4
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6032      	str	r2, [r6, #0]
 800e9e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e09d      	b.n	800eb30 <_printf_i+0x1e8>
 800e9f4:	6833      	ldr	r3, [r6, #0]
 800e9f6:	6820      	ldr	r0, [r4, #0]
 800e9f8:	1d19      	adds	r1, r3, #4
 800e9fa:	6031      	str	r1, [r6, #0]
 800e9fc:	0606      	lsls	r6, r0, #24
 800e9fe:	d501      	bpl.n	800ea04 <_printf_i+0xbc>
 800ea00:	681d      	ldr	r5, [r3, #0]
 800ea02:	e003      	b.n	800ea0c <_printf_i+0xc4>
 800ea04:	0645      	lsls	r5, r0, #25
 800ea06:	d5fb      	bpl.n	800ea00 <_printf_i+0xb8>
 800ea08:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	da03      	bge.n	800ea18 <_printf_i+0xd0>
 800ea10:	232d      	movs	r3, #45	@ 0x2d
 800ea12:	426d      	negs	r5, r5
 800ea14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea18:	4859      	ldr	r0, [pc, #356]	@ (800eb80 <_printf_i+0x238>)
 800ea1a:	230a      	movs	r3, #10
 800ea1c:	e011      	b.n	800ea42 <_printf_i+0xfa>
 800ea1e:	6821      	ldr	r1, [r4, #0]
 800ea20:	6833      	ldr	r3, [r6, #0]
 800ea22:	0608      	lsls	r0, r1, #24
 800ea24:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea28:	d402      	bmi.n	800ea30 <_printf_i+0xe8>
 800ea2a:	0649      	lsls	r1, r1, #25
 800ea2c:	bf48      	it	mi
 800ea2e:	b2ad      	uxthmi	r5, r5
 800ea30:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea32:	4853      	ldr	r0, [pc, #332]	@ (800eb80 <_printf_i+0x238>)
 800ea34:	6033      	str	r3, [r6, #0]
 800ea36:	bf14      	ite	ne
 800ea38:	230a      	movne	r3, #10
 800ea3a:	2308      	moveq	r3, #8
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea42:	6866      	ldr	r6, [r4, #4]
 800ea44:	60a6      	str	r6, [r4, #8]
 800ea46:	2e00      	cmp	r6, #0
 800ea48:	bfa2      	ittt	ge
 800ea4a:	6821      	ldrge	r1, [r4, #0]
 800ea4c:	f021 0104 	bicge.w	r1, r1, #4
 800ea50:	6021      	strge	r1, [r4, #0]
 800ea52:	b90d      	cbnz	r5, 800ea58 <_printf_i+0x110>
 800ea54:	2e00      	cmp	r6, #0
 800ea56:	d04b      	beq.n	800eaf0 <_printf_i+0x1a8>
 800ea58:	4616      	mov	r6, r2
 800ea5a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea5e:	fb03 5711 	mls	r7, r3, r1, r5
 800ea62:	5dc7      	ldrb	r7, [r0, r7]
 800ea64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea68:	462f      	mov	r7, r5
 800ea6a:	42bb      	cmp	r3, r7
 800ea6c:	460d      	mov	r5, r1
 800ea6e:	d9f4      	bls.n	800ea5a <_printf_i+0x112>
 800ea70:	2b08      	cmp	r3, #8
 800ea72:	d10b      	bne.n	800ea8c <_printf_i+0x144>
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	07df      	lsls	r7, r3, #31
 800ea78:	d508      	bpl.n	800ea8c <_printf_i+0x144>
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	4299      	cmp	r1, r3
 800ea80:	bfde      	ittt	le
 800ea82:	2330      	movle	r3, #48	@ 0x30
 800ea84:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea88:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea8c:	1b92      	subs	r2, r2, r6
 800ea8e:	6122      	str	r2, [r4, #16]
 800ea90:	f8cd a000 	str.w	sl, [sp]
 800ea94:	464b      	mov	r3, r9
 800ea96:	aa03      	add	r2, sp, #12
 800ea98:	4621      	mov	r1, r4
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	f7ff fee6 	bl	800e86c <_printf_common>
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d14a      	bne.n	800eb3a <_printf_i+0x1f2>
 800eaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa8:	b004      	add	sp, #16
 800eaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	f043 0320 	orr.w	r3, r3, #32
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	4833      	ldr	r0, [pc, #204]	@ (800eb84 <_printf_i+0x23c>)
 800eab8:	2778      	movs	r7, #120	@ 0x78
 800eaba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	6831      	ldr	r1, [r6, #0]
 800eac2:	061f      	lsls	r7, r3, #24
 800eac4:	f851 5b04 	ldr.w	r5, [r1], #4
 800eac8:	d402      	bmi.n	800ead0 <_printf_i+0x188>
 800eaca:	065f      	lsls	r7, r3, #25
 800eacc:	bf48      	it	mi
 800eace:	b2ad      	uxthmi	r5, r5
 800ead0:	6031      	str	r1, [r6, #0]
 800ead2:	07d9      	lsls	r1, r3, #31
 800ead4:	bf44      	itt	mi
 800ead6:	f043 0320 	orrmi.w	r3, r3, #32
 800eada:	6023      	strmi	r3, [r4, #0]
 800eadc:	b11d      	cbz	r5, 800eae6 <_printf_i+0x19e>
 800eade:	2310      	movs	r3, #16
 800eae0:	e7ac      	b.n	800ea3c <_printf_i+0xf4>
 800eae2:	4827      	ldr	r0, [pc, #156]	@ (800eb80 <_printf_i+0x238>)
 800eae4:	e7e9      	b.n	800eaba <_printf_i+0x172>
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	f023 0320 	bic.w	r3, r3, #32
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	e7f6      	b.n	800eade <_printf_i+0x196>
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	e7bd      	b.n	800ea70 <_printf_i+0x128>
 800eaf4:	6833      	ldr	r3, [r6, #0]
 800eaf6:	6825      	ldr	r5, [r4, #0]
 800eaf8:	6961      	ldr	r1, [r4, #20]
 800eafa:	1d18      	adds	r0, r3, #4
 800eafc:	6030      	str	r0, [r6, #0]
 800eafe:	062e      	lsls	r6, r5, #24
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	d501      	bpl.n	800eb08 <_printf_i+0x1c0>
 800eb04:	6019      	str	r1, [r3, #0]
 800eb06:	e002      	b.n	800eb0e <_printf_i+0x1c6>
 800eb08:	0668      	lsls	r0, r5, #25
 800eb0a:	d5fb      	bpl.n	800eb04 <_printf_i+0x1bc>
 800eb0c:	8019      	strh	r1, [r3, #0]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	6123      	str	r3, [r4, #16]
 800eb12:	4616      	mov	r6, r2
 800eb14:	e7bc      	b.n	800ea90 <_printf_i+0x148>
 800eb16:	6833      	ldr	r3, [r6, #0]
 800eb18:	1d1a      	adds	r2, r3, #4
 800eb1a:	6032      	str	r2, [r6, #0]
 800eb1c:	681e      	ldr	r6, [r3, #0]
 800eb1e:	6862      	ldr	r2, [r4, #4]
 800eb20:	2100      	movs	r1, #0
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7f1 fb5c 	bl	80001e0 <memchr>
 800eb28:	b108      	cbz	r0, 800eb2e <_printf_i+0x1e6>
 800eb2a:	1b80      	subs	r0, r0, r6
 800eb2c:	6060      	str	r0, [r4, #4]
 800eb2e:	6863      	ldr	r3, [r4, #4]
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	2300      	movs	r3, #0
 800eb34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb38:	e7aa      	b.n	800ea90 <_printf_i+0x148>
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	4649      	mov	r1, r9
 800eb40:	4640      	mov	r0, r8
 800eb42:	47d0      	blx	sl
 800eb44:	3001      	adds	r0, #1
 800eb46:	d0ad      	beq.n	800eaa4 <_printf_i+0x15c>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	079b      	lsls	r3, r3, #30
 800eb4c:	d413      	bmi.n	800eb76 <_printf_i+0x22e>
 800eb4e:	68e0      	ldr	r0, [r4, #12]
 800eb50:	9b03      	ldr	r3, [sp, #12]
 800eb52:	4298      	cmp	r0, r3
 800eb54:	bfb8      	it	lt
 800eb56:	4618      	movlt	r0, r3
 800eb58:	e7a6      	b.n	800eaa8 <_printf_i+0x160>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4649      	mov	r1, r9
 800eb60:	4640      	mov	r0, r8
 800eb62:	47d0      	blx	sl
 800eb64:	3001      	adds	r0, #1
 800eb66:	d09d      	beq.n	800eaa4 <_printf_i+0x15c>
 800eb68:	3501      	adds	r5, #1
 800eb6a:	68e3      	ldr	r3, [r4, #12]
 800eb6c:	9903      	ldr	r1, [sp, #12]
 800eb6e:	1a5b      	subs	r3, r3, r1
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	dcf2      	bgt.n	800eb5a <_printf_i+0x212>
 800eb74:	e7eb      	b.n	800eb4e <_printf_i+0x206>
 800eb76:	2500      	movs	r5, #0
 800eb78:	f104 0619 	add.w	r6, r4, #25
 800eb7c:	e7f5      	b.n	800eb6a <_printf_i+0x222>
 800eb7e:	bf00      	nop
 800eb80:	08010f62 	.word	0x08010f62
 800eb84:	08010f73 	.word	0x08010f73

0800eb88 <std>:
 800eb88:	2300      	movs	r3, #0
 800eb8a:	b510      	push	{r4, lr}
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	e9c0 3300 	strd	r3, r3, [r0]
 800eb92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb96:	6083      	str	r3, [r0, #8]
 800eb98:	8181      	strh	r1, [r0, #12]
 800eb9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb9c:	81c2      	strh	r2, [r0, #14]
 800eb9e:	6183      	str	r3, [r0, #24]
 800eba0:	4619      	mov	r1, r3
 800eba2:	2208      	movs	r2, #8
 800eba4:	305c      	adds	r0, #92	@ 0x5c
 800eba6:	f000 f9f9 	bl	800ef9c <memset>
 800ebaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe0 <std+0x58>)
 800ebac:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebae:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe4 <std+0x5c>)
 800ebb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe8 <std+0x60>)
 800ebb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebec <std+0x64>)
 800ebb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebba:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <std+0x68>)
 800ebbc:	6224      	str	r4, [r4, #32]
 800ebbe:	429c      	cmp	r4, r3
 800ebc0:	d006      	beq.n	800ebd0 <std+0x48>
 800ebc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebc6:	4294      	cmp	r4, r2
 800ebc8:	d002      	beq.n	800ebd0 <std+0x48>
 800ebca:	33d0      	adds	r3, #208	@ 0xd0
 800ebcc:	429c      	cmp	r4, r3
 800ebce:	d105      	bne.n	800ebdc <std+0x54>
 800ebd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebd8:	f000 ba5c 	b.w	800f094 <__retarget_lock_init_recursive>
 800ebdc:	bd10      	pop	{r4, pc}
 800ebde:	bf00      	nop
 800ebe0:	0800eded 	.word	0x0800eded
 800ebe4:	0800ee0f 	.word	0x0800ee0f
 800ebe8:	0800ee47 	.word	0x0800ee47
 800ebec:	0800ee6b 	.word	0x0800ee6b
 800ebf0:	200020bc 	.word	0x200020bc

0800ebf4 <stdio_exit_handler>:
 800ebf4:	4a02      	ldr	r2, [pc, #8]	@ (800ec00 <stdio_exit_handler+0xc>)
 800ebf6:	4903      	ldr	r1, [pc, #12]	@ (800ec04 <stdio_exit_handler+0x10>)
 800ebf8:	4803      	ldr	r0, [pc, #12]	@ (800ec08 <stdio_exit_handler+0x14>)
 800ebfa:	f000 b869 	b.w	800ecd0 <_fwalk_sglue>
 800ebfe:	bf00      	nop
 800ec00:	20000110 	.word	0x20000110
 800ec04:	080109c9 	.word	0x080109c9
 800ec08:	20000120 	.word	0x20000120

0800ec0c <cleanup_stdio>:
 800ec0c:	6841      	ldr	r1, [r0, #4]
 800ec0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec40 <cleanup_stdio+0x34>)
 800ec10:	4299      	cmp	r1, r3
 800ec12:	b510      	push	{r4, lr}
 800ec14:	4604      	mov	r4, r0
 800ec16:	d001      	beq.n	800ec1c <cleanup_stdio+0x10>
 800ec18:	f001 fed6 	bl	80109c8 <_fflush_r>
 800ec1c:	68a1      	ldr	r1, [r4, #8]
 800ec1e:	4b09      	ldr	r3, [pc, #36]	@ (800ec44 <cleanup_stdio+0x38>)
 800ec20:	4299      	cmp	r1, r3
 800ec22:	d002      	beq.n	800ec2a <cleanup_stdio+0x1e>
 800ec24:	4620      	mov	r0, r4
 800ec26:	f001 fecf 	bl	80109c8 <_fflush_r>
 800ec2a:	68e1      	ldr	r1, [r4, #12]
 800ec2c:	4b06      	ldr	r3, [pc, #24]	@ (800ec48 <cleanup_stdio+0x3c>)
 800ec2e:	4299      	cmp	r1, r3
 800ec30:	d004      	beq.n	800ec3c <cleanup_stdio+0x30>
 800ec32:	4620      	mov	r0, r4
 800ec34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec38:	f001 bec6 	b.w	80109c8 <_fflush_r>
 800ec3c:	bd10      	pop	{r4, pc}
 800ec3e:	bf00      	nop
 800ec40:	200020bc 	.word	0x200020bc
 800ec44:	20002124 	.word	0x20002124
 800ec48:	2000218c 	.word	0x2000218c

0800ec4c <global_stdio_init.part.0>:
 800ec4c:	b510      	push	{r4, lr}
 800ec4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec7c <global_stdio_init.part.0+0x30>)
 800ec50:	4c0b      	ldr	r4, [pc, #44]	@ (800ec80 <global_stdio_init.part.0+0x34>)
 800ec52:	4a0c      	ldr	r2, [pc, #48]	@ (800ec84 <global_stdio_init.part.0+0x38>)
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	4620      	mov	r0, r4
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2104      	movs	r1, #4
 800ec5c:	f7ff ff94 	bl	800eb88 <std>
 800ec60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec64:	2201      	movs	r2, #1
 800ec66:	2109      	movs	r1, #9
 800ec68:	f7ff ff8e 	bl	800eb88 <std>
 800ec6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec70:	2202      	movs	r2, #2
 800ec72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec76:	2112      	movs	r1, #18
 800ec78:	f7ff bf86 	b.w	800eb88 <std>
 800ec7c:	200021f4 	.word	0x200021f4
 800ec80:	200020bc 	.word	0x200020bc
 800ec84:	0800ebf5 	.word	0x0800ebf5

0800ec88 <__sfp_lock_acquire>:
 800ec88:	4801      	ldr	r0, [pc, #4]	@ (800ec90 <__sfp_lock_acquire+0x8>)
 800ec8a:	f000 ba04 	b.w	800f096 <__retarget_lock_acquire_recursive>
 800ec8e:	bf00      	nop
 800ec90:	200021fd 	.word	0x200021fd

0800ec94 <__sfp_lock_release>:
 800ec94:	4801      	ldr	r0, [pc, #4]	@ (800ec9c <__sfp_lock_release+0x8>)
 800ec96:	f000 b9ff 	b.w	800f098 <__retarget_lock_release_recursive>
 800ec9a:	bf00      	nop
 800ec9c:	200021fd 	.word	0x200021fd

0800eca0 <__sinit>:
 800eca0:	b510      	push	{r4, lr}
 800eca2:	4604      	mov	r4, r0
 800eca4:	f7ff fff0 	bl	800ec88 <__sfp_lock_acquire>
 800eca8:	6a23      	ldr	r3, [r4, #32]
 800ecaa:	b11b      	cbz	r3, 800ecb4 <__sinit+0x14>
 800ecac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb0:	f7ff bff0 	b.w	800ec94 <__sfp_lock_release>
 800ecb4:	4b04      	ldr	r3, [pc, #16]	@ (800ecc8 <__sinit+0x28>)
 800ecb6:	6223      	str	r3, [r4, #32]
 800ecb8:	4b04      	ldr	r3, [pc, #16]	@ (800eccc <__sinit+0x2c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1f5      	bne.n	800ecac <__sinit+0xc>
 800ecc0:	f7ff ffc4 	bl	800ec4c <global_stdio_init.part.0>
 800ecc4:	e7f2      	b.n	800ecac <__sinit+0xc>
 800ecc6:	bf00      	nop
 800ecc8:	0800ec0d 	.word	0x0800ec0d
 800eccc:	200021f4 	.word	0x200021f4

0800ecd0 <_fwalk_sglue>:
 800ecd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd4:	4607      	mov	r7, r0
 800ecd6:	4688      	mov	r8, r1
 800ecd8:	4614      	mov	r4, r2
 800ecda:	2600      	movs	r6, #0
 800ecdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ece0:	f1b9 0901 	subs.w	r9, r9, #1
 800ece4:	d505      	bpl.n	800ecf2 <_fwalk_sglue+0x22>
 800ece6:	6824      	ldr	r4, [r4, #0]
 800ece8:	2c00      	cmp	r4, #0
 800ecea:	d1f7      	bne.n	800ecdc <_fwalk_sglue+0xc>
 800ecec:	4630      	mov	r0, r6
 800ecee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf2:	89ab      	ldrh	r3, [r5, #12]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d907      	bls.n	800ed08 <_fwalk_sglue+0x38>
 800ecf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	d003      	beq.n	800ed08 <_fwalk_sglue+0x38>
 800ed00:	4629      	mov	r1, r5
 800ed02:	4638      	mov	r0, r7
 800ed04:	47c0      	blx	r8
 800ed06:	4306      	orrs	r6, r0
 800ed08:	3568      	adds	r5, #104	@ 0x68
 800ed0a:	e7e9      	b.n	800ece0 <_fwalk_sglue+0x10>

0800ed0c <iprintf>:
 800ed0c:	b40f      	push	{r0, r1, r2, r3}
 800ed0e:	b507      	push	{r0, r1, r2, lr}
 800ed10:	4906      	ldr	r1, [pc, #24]	@ (800ed2c <iprintf+0x20>)
 800ed12:	ab04      	add	r3, sp, #16
 800ed14:	6808      	ldr	r0, [r1, #0]
 800ed16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1a:	6881      	ldr	r1, [r0, #8]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	f001 fcb7 	bl	8010690 <_vfiprintf_r>
 800ed22:	b003      	add	sp, #12
 800ed24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed28:	b004      	add	sp, #16
 800ed2a:	4770      	bx	lr
 800ed2c:	2000011c 	.word	0x2000011c

0800ed30 <_puts_r>:
 800ed30:	6a03      	ldr	r3, [r0, #32]
 800ed32:	b570      	push	{r4, r5, r6, lr}
 800ed34:	6884      	ldr	r4, [r0, #8]
 800ed36:	4605      	mov	r5, r0
 800ed38:	460e      	mov	r6, r1
 800ed3a:	b90b      	cbnz	r3, 800ed40 <_puts_r+0x10>
 800ed3c:	f7ff ffb0 	bl	800eca0 <__sinit>
 800ed40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed42:	07db      	lsls	r3, r3, #31
 800ed44:	d405      	bmi.n	800ed52 <_puts_r+0x22>
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	0598      	lsls	r0, r3, #22
 800ed4a:	d402      	bmi.n	800ed52 <_puts_r+0x22>
 800ed4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed4e:	f000 f9a2 	bl	800f096 <__retarget_lock_acquire_recursive>
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	0719      	lsls	r1, r3, #28
 800ed56:	d502      	bpl.n	800ed5e <_puts_r+0x2e>
 800ed58:	6923      	ldr	r3, [r4, #16]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d135      	bne.n	800edca <_puts_r+0x9a>
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4628      	mov	r0, r5
 800ed62:	f000 f8c5 	bl	800eef0 <__swsetup_r>
 800ed66:	b380      	cbz	r0, 800edca <_puts_r+0x9a>
 800ed68:	f04f 35ff 	mov.w	r5, #4294967295
 800ed6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed6e:	07da      	lsls	r2, r3, #31
 800ed70:	d405      	bmi.n	800ed7e <_puts_r+0x4e>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	059b      	lsls	r3, r3, #22
 800ed76:	d402      	bmi.n	800ed7e <_puts_r+0x4e>
 800ed78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed7a:	f000 f98d 	bl	800f098 <__retarget_lock_release_recursive>
 800ed7e:	4628      	mov	r0, r5
 800ed80:	bd70      	pop	{r4, r5, r6, pc}
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	da04      	bge.n	800ed90 <_puts_r+0x60>
 800ed86:	69a2      	ldr	r2, [r4, #24]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	dc17      	bgt.n	800edbc <_puts_r+0x8c>
 800ed8c:	290a      	cmp	r1, #10
 800ed8e:	d015      	beq.n	800edbc <_puts_r+0x8c>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	6022      	str	r2, [r4, #0]
 800ed96:	7019      	strb	r1, [r3, #0]
 800ed98:	68a3      	ldr	r3, [r4, #8]
 800ed9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	60a3      	str	r3, [r4, #8]
 800eda2:	2900      	cmp	r1, #0
 800eda4:	d1ed      	bne.n	800ed82 <_puts_r+0x52>
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	da11      	bge.n	800edce <_puts_r+0x9e>
 800edaa:	4622      	mov	r2, r4
 800edac:	210a      	movs	r1, #10
 800edae:	4628      	mov	r0, r5
 800edb0:	f000 f85f 	bl	800ee72 <__swbuf_r>
 800edb4:	3001      	adds	r0, #1
 800edb6:	d0d7      	beq.n	800ed68 <_puts_r+0x38>
 800edb8:	250a      	movs	r5, #10
 800edba:	e7d7      	b.n	800ed6c <_puts_r+0x3c>
 800edbc:	4622      	mov	r2, r4
 800edbe:	4628      	mov	r0, r5
 800edc0:	f000 f857 	bl	800ee72 <__swbuf_r>
 800edc4:	3001      	adds	r0, #1
 800edc6:	d1e7      	bne.n	800ed98 <_puts_r+0x68>
 800edc8:	e7ce      	b.n	800ed68 <_puts_r+0x38>
 800edca:	3e01      	subs	r6, #1
 800edcc:	e7e4      	b.n	800ed98 <_puts_r+0x68>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	1c5a      	adds	r2, r3, #1
 800edd2:	6022      	str	r2, [r4, #0]
 800edd4:	220a      	movs	r2, #10
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	e7ee      	b.n	800edb8 <_puts_r+0x88>
	...

0800eddc <puts>:
 800eddc:	4b02      	ldr	r3, [pc, #8]	@ (800ede8 <puts+0xc>)
 800edde:	4601      	mov	r1, r0
 800ede0:	6818      	ldr	r0, [r3, #0]
 800ede2:	f7ff bfa5 	b.w	800ed30 <_puts_r>
 800ede6:	bf00      	nop
 800ede8:	2000011c 	.word	0x2000011c

0800edec <__sread>:
 800edec:	b510      	push	{r4, lr}
 800edee:	460c      	mov	r4, r1
 800edf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf4:	f000 f900 	bl	800eff8 <_read_r>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	bfab      	itete	ge
 800edfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800edfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ee00:	181b      	addge	r3, r3, r0
 800ee02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee06:	bfac      	ite	ge
 800ee08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee0a:	81a3      	strhlt	r3, [r4, #12]
 800ee0c:	bd10      	pop	{r4, pc}

0800ee0e <__swrite>:
 800ee0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee12:	461f      	mov	r7, r3
 800ee14:	898b      	ldrh	r3, [r1, #12]
 800ee16:	05db      	lsls	r3, r3, #23
 800ee18:	4605      	mov	r5, r0
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	4616      	mov	r6, r2
 800ee1e:	d505      	bpl.n	800ee2c <__swrite+0x1e>
 800ee20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee24:	2302      	movs	r3, #2
 800ee26:	2200      	movs	r2, #0
 800ee28:	f000 f8d4 	bl	800efd4 <_lseek_r>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee36:	81a3      	strh	r3, [r4, #12]
 800ee38:	4632      	mov	r2, r6
 800ee3a:	463b      	mov	r3, r7
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee42:	f000 b8eb 	b.w	800f01c <_write_r>

0800ee46 <__sseek>:
 800ee46:	b510      	push	{r4, lr}
 800ee48:	460c      	mov	r4, r1
 800ee4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee4e:	f000 f8c1 	bl	800efd4 <_lseek_r>
 800ee52:	1c43      	adds	r3, r0, #1
 800ee54:	89a3      	ldrh	r3, [r4, #12]
 800ee56:	bf15      	itete	ne
 800ee58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee62:	81a3      	strheq	r3, [r4, #12]
 800ee64:	bf18      	it	ne
 800ee66:	81a3      	strhne	r3, [r4, #12]
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <__sclose>:
 800ee6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6e:	f000 b8a1 	b.w	800efb4 <_close_r>

0800ee72 <__swbuf_r>:
 800ee72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee74:	460e      	mov	r6, r1
 800ee76:	4614      	mov	r4, r2
 800ee78:	4605      	mov	r5, r0
 800ee7a:	b118      	cbz	r0, 800ee84 <__swbuf_r+0x12>
 800ee7c:	6a03      	ldr	r3, [r0, #32]
 800ee7e:	b90b      	cbnz	r3, 800ee84 <__swbuf_r+0x12>
 800ee80:	f7ff ff0e 	bl	800eca0 <__sinit>
 800ee84:	69a3      	ldr	r3, [r4, #24]
 800ee86:	60a3      	str	r3, [r4, #8]
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	071a      	lsls	r2, r3, #28
 800ee8c:	d501      	bpl.n	800ee92 <__swbuf_r+0x20>
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	b943      	cbnz	r3, 800eea4 <__swbuf_r+0x32>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f82b 	bl	800eef0 <__swsetup_r>
 800ee9a:	b118      	cbz	r0, 800eea4 <__swbuf_r+0x32>
 800ee9c:	f04f 37ff 	mov.w	r7, #4294967295
 800eea0:	4638      	mov	r0, r7
 800eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	6922      	ldr	r2, [r4, #16]
 800eea8:	1a98      	subs	r0, r3, r2
 800eeaa:	6963      	ldr	r3, [r4, #20]
 800eeac:	b2f6      	uxtb	r6, r6
 800eeae:	4283      	cmp	r3, r0
 800eeb0:	4637      	mov	r7, r6
 800eeb2:	dc05      	bgt.n	800eec0 <__swbuf_r+0x4e>
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f001 fd86 	bl	80109c8 <_fflush_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d1ed      	bne.n	800ee9c <__swbuf_r+0x2a>
 800eec0:	68a3      	ldr	r3, [r4, #8]
 800eec2:	3b01      	subs	r3, #1
 800eec4:	60a3      	str	r3, [r4, #8]
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	1c5a      	adds	r2, r3, #1
 800eeca:	6022      	str	r2, [r4, #0]
 800eecc:	701e      	strb	r6, [r3, #0]
 800eece:	6962      	ldr	r2, [r4, #20]
 800eed0:	1c43      	adds	r3, r0, #1
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d004      	beq.n	800eee0 <__swbuf_r+0x6e>
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	07db      	lsls	r3, r3, #31
 800eeda:	d5e1      	bpl.n	800eea0 <__swbuf_r+0x2e>
 800eedc:	2e0a      	cmp	r6, #10
 800eede:	d1df      	bne.n	800eea0 <__swbuf_r+0x2e>
 800eee0:	4621      	mov	r1, r4
 800eee2:	4628      	mov	r0, r5
 800eee4:	f001 fd70 	bl	80109c8 <_fflush_r>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d0d9      	beq.n	800eea0 <__swbuf_r+0x2e>
 800eeec:	e7d6      	b.n	800ee9c <__swbuf_r+0x2a>
	...

0800eef0 <__swsetup_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4b29      	ldr	r3, [pc, #164]	@ (800ef98 <__swsetup_r+0xa8>)
 800eef4:	4605      	mov	r5, r0
 800eef6:	6818      	ldr	r0, [r3, #0]
 800eef8:	460c      	mov	r4, r1
 800eefa:	b118      	cbz	r0, 800ef04 <__swsetup_r+0x14>
 800eefc:	6a03      	ldr	r3, [r0, #32]
 800eefe:	b90b      	cbnz	r3, 800ef04 <__swsetup_r+0x14>
 800ef00:	f7ff fece 	bl	800eca0 <__sinit>
 800ef04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef08:	0719      	lsls	r1, r3, #28
 800ef0a:	d422      	bmi.n	800ef52 <__swsetup_r+0x62>
 800ef0c:	06da      	lsls	r2, r3, #27
 800ef0e:	d407      	bmi.n	800ef20 <__swsetup_r+0x30>
 800ef10:	2209      	movs	r2, #9
 800ef12:	602a      	str	r2, [r5, #0]
 800ef14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1e:	e033      	b.n	800ef88 <__swsetup_r+0x98>
 800ef20:	0758      	lsls	r0, r3, #29
 800ef22:	d512      	bpl.n	800ef4a <__swsetup_r+0x5a>
 800ef24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef26:	b141      	cbz	r1, 800ef3a <__swsetup_r+0x4a>
 800ef28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef2c:	4299      	cmp	r1, r3
 800ef2e:	d002      	beq.n	800ef36 <__swsetup_r+0x46>
 800ef30:	4628      	mov	r0, r5
 800ef32:	f000 ff01 	bl	800fd38 <_free_r>
 800ef36:	2300      	movs	r3, #0
 800ef38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	2300      	movs	r3, #0
 800ef44:	6063      	str	r3, [r4, #4]
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f043 0308 	orr.w	r3, r3, #8
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	b94b      	cbnz	r3, 800ef6a <__swsetup_r+0x7a>
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef60:	d003      	beq.n	800ef6a <__swsetup_r+0x7a>
 800ef62:	4621      	mov	r1, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	f001 fd7d 	bl	8010a64 <__smakebuf_r>
 800ef6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6e:	f013 0201 	ands.w	r2, r3, #1
 800ef72:	d00a      	beq.n	800ef8a <__swsetup_r+0x9a>
 800ef74:	2200      	movs	r2, #0
 800ef76:	60a2      	str	r2, [r4, #8]
 800ef78:	6962      	ldr	r2, [r4, #20]
 800ef7a:	4252      	negs	r2, r2
 800ef7c:	61a2      	str	r2, [r4, #24]
 800ef7e:	6922      	ldr	r2, [r4, #16]
 800ef80:	b942      	cbnz	r2, 800ef94 <__swsetup_r+0xa4>
 800ef82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef86:	d1c5      	bne.n	800ef14 <__swsetup_r+0x24>
 800ef88:	bd38      	pop	{r3, r4, r5, pc}
 800ef8a:	0799      	lsls	r1, r3, #30
 800ef8c:	bf58      	it	pl
 800ef8e:	6962      	ldrpl	r2, [r4, #20]
 800ef90:	60a2      	str	r2, [r4, #8]
 800ef92:	e7f4      	b.n	800ef7e <__swsetup_r+0x8e>
 800ef94:	2000      	movs	r0, #0
 800ef96:	e7f7      	b.n	800ef88 <__swsetup_r+0x98>
 800ef98:	2000011c 	.word	0x2000011c

0800ef9c <memset>:
 800ef9c:	4402      	add	r2, r0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d100      	bne.n	800efa6 <memset+0xa>
 800efa4:	4770      	bx	lr
 800efa6:	f803 1b01 	strb.w	r1, [r3], #1
 800efaa:	e7f9      	b.n	800efa0 <memset+0x4>

0800efac <_localeconv_r>:
 800efac:	4800      	ldr	r0, [pc, #0]	@ (800efb0 <_localeconv_r+0x4>)
 800efae:	4770      	bx	lr
 800efb0:	2000025c 	.word	0x2000025c

0800efb4 <_close_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d06      	ldr	r5, [pc, #24]	@ (800efd0 <_close_r+0x1c>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	f7f3 f8bc 	bl	800213c <_close>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d102      	bne.n	800efce <_close_r+0x1a>
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	b103      	cbz	r3, 800efce <_close_r+0x1a>
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	200021f8 	.word	0x200021f8

0800efd4 <_lseek_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d07      	ldr	r5, [pc, #28]	@ (800eff4 <_lseek_r+0x20>)
 800efd8:	4604      	mov	r4, r0
 800efda:	4608      	mov	r0, r1
 800efdc:	4611      	mov	r1, r2
 800efde:	2200      	movs	r2, #0
 800efe0:	602a      	str	r2, [r5, #0]
 800efe2:	461a      	mov	r2, r3
 800efe4:	f7f3 f8d1 	bl	800218a <_lseek>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_lseek_r+0x1e>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_lseek_r+0x1e>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	200021f8 	.word	0x200021f8

0800eff8 <_read_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4d07      	ldr	r5, [pc, #28]	@ (800f018 <_read_r+0x20>)
 800effc:	4604      	mov	r4, r0
 800effe:	4608      	mov	r0, r1
 800f000:	4611      	mov	r1, r2
 800f002:	2200      	movs	r2, #0
 800f004:	602a      	str	r2, [r5, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	f7f3 f87b 	bl	8002102 <_read>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	d102      	bne.n	800f016 <_read_r+0x1e>
 800f010:	682b      	ldr	r3, [r5, #0]
 800f012:	b103      	cbz	r3, 800f016 <_read_r+0x1e>
 800f014:	6023      	str	r3, [r4, #0]
 800f016:	bd38      	pop	{r3, r4, r5, pc}
 800f018:	200021f8 	.word	0x200021f8

0800f01c <_write_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	4d07      	ldr	r5, [pc, #28]	@ (800f03c <_write_r+0x20>)
 800f020:	4604      	mov	r4, r0
 800f022:	4608      	mov	r0, r1
 800f024:	4611      	mov	r1, r2
 800f026:	2200      	movs	r2, #0
 800f028:	602a      	str	r2, [r5, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	f7f2 fb9c 	bl	8001768 <_write>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_write_r+0x1e>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_write_r+0x1e>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	200021f8 	.word	0x200021f8

0800f040 <__errno>:
 800f040:	4b01      	ldr	r3, [pc, #4]	@ (800f048 <__errno+0x8>)
 800f042:	6818      	ldr	r0, [r3, #0]
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	2000011c 	.word	0x2000011c

0800f04c <__libc_init_array>:
 800f04c:	b570      	push	{r4, r5, r6, lr}
 800f04e:	4d0d      	ldr	r5, [pc, #52]	@ (800f084 <__libc_init_array+0x38>)
 800f050:	4c0d      	ldr	r4, [pc, #52]	@ (800f088 <__libc_init_array+0x3c>)
 800f052:	1b64      	subs	r4, r4, r5
 800f054:	10a4      	asrs	r4, r4, #2
 800f056:	2600      	movs	r6, #0
 800f058:	42a6      	cmp	r6, r4
 800f05a:	d109      	bne.n	800f070 <__libc_init_array+0x24>
 800f05c:	4d0b      	ldr	r5, [pc, #44]	@ (800f08c <__libc_init_array+0x40>)
 800f05e:	4c0c      	ldr	r4, [pc, #48]	@ (800f090 <__libc_init_array+0x44>)
 800f060:	f001 fe2c 	bl	8010cbc <_init>
 800f064:	1b64      	subs	r4, r4, r5
 800f066:	10a4      	asrs	r4, r4, #2
 800f068:	2600      	movs	r6, #0
 800f06a:	42a6      	cmp	r6, r4
 800f06c:	d105      	bne.n	800f07a <__libc_init_array+0x2e>
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	f855 3b04 	ldr.w	r3, [r5], #4
 800f074:	4798      	blx	r3
 800f076:	3601      	adds	r6, #1
 800f078:	e7ee      	b.n	800f058 <__libc_init_array+0xc>
 800f07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f07e:	4798      	blx	r3
 800f080:	3601      	adds	r6, #1
 800f082:	e7f2      	b.n	800f06a <__libc_init_array+0x1e>
 800f084:	080112c8 	.word	0x080112c8
 800f088:	080112c8 	.word	0x080112c8
 800f08c:	080112c8 	.word	0x080112c8
 800f090:	080112cc 	.word	0x080112cc

0800f094 <__retarget_lock_init_recursive>:
 800f094:	4770      	bx	lr

0800f096 <__retarget_lock_acquire_recursive>:
 800f096:	4770      	bx	lr

0800f098 <__retarget_lock_release_recursive>:
 800f098:	4770      	bx	lr

0800f09a <quorem>:
 800f09a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09e:	6903      	ldr	r3, [r0, #16]
 800f0a0:	690c      	ldr	r4, [r1, #16]
 800f0a2:	42a3      	cmp	r3, r4
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	db7e      	blt.n	800f1a6 <quorem+0x10c>
 800f0a8:	3c01      	subs	r4, #1
 800f0aa:	f101 0814 	add.w	r8, r1, #20
 800f0ae:	00a3      	lsls	r3, r4, #2
 800f0b0:	f100 0514 	add.w	r5, r0, #20
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0d0:	d32e      	bcc.n	800f130 <quorem+0x96>
 800f0d2:	f04f 0a00 	mov.w	sl, #0
 800f0d6:	46c4      	mov	ip, r8
 800f0d8:	46ae      	mov	lr, r5
 800f0da:	46d3      	mov	fp, sl
 800f0dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f0e0:	b298      	uxth	r0, r3
 800f0e2:	fb06 a000 	mla	r0, r6, r0, sl
 800f0e6:	0c02      	lsrs	r2, r0, #16
 800f0e8:	0c1b      	lsrs	r3, r3, #16
 800f0ea:	fb06 2303 	mla	r3, r6, r3, r2
 800f0ee:	f8de 2000 	ldr.w	r2, [lr]
 800f0f2:	b280      	uxth	r0, r0
 800f0f4:	b292      	uxth	r2, r2
 800f0f6:	1a12      	subs	r2, r2, r0
 800f0f8:	445a      	add	r2, fp
 800f0fa:	f8de 0000 	ldr.w	r0, [lr]
 800f0fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f102:	b29b      	uxth	r3, r3
 800f104:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f108:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f10c:	b292      	uxth	r2, r2
 800f10e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f112:	45e1      	cmp	r9, ip
 800f114:	f84e 2b04 	str.w	r2, [lr], #4
 800f118:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f11c:	d2de      	bcs.n	800f0dc <quorem+0x42>
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	58eb      	ldr	r3, [r5, r3]
 800f122:	b92b      	cbnz	r3, 800f130 <quorem+0x96>
 800f124:	9b01      	ldr	r3, [sp, #4]
 800f126:	3b04      	subs	r3, #4
 800f128:	429d      	cmp	r5, r3
 800f12a:	461a      	mov	r2, r3
 800f12c:	d32f      	bcc.n	800f18e <quorem+0xf4>
 800f12e:	613c      	str	r4, [r7, #16]
 800f130:	4638      	mov	r0, r7
 800f132:	f001 f97b 	bl	801042c <__mcmp>
 800f136:	2800      	cmp	r0, #0
 800f138:	db25      	blt.n	800f186 <quorem+0xec>
 800f13a:	4629      	mov	r1, r5
 800f13c:	2000      	movs	r0, #0
 800f13e:	f858 2b04 	ldr.w	r2, [r8], #4
 800f142:	f8d1 c000 	ldr.w	ip, [r1]
 800f146:	fa1f fe82 	uxth.w	lr, r2
 800f14a:	fa1f f38c 	uxth.w	r3, ip
 800f14e:	eba3 030e 	sub.w	r3, r3, lr
 800f152:	4403      	add	r3, r0
 800f154:	0c12      	lsrs	r2, r2, #16
 800f156:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f15a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f15e:	b29b      	uxth	r3, r3
 800f160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f164:	45c1      	cmp	r9, r8
 800f166:	f841 3b04 	str.w	r3, [r1], #4
 800f16a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f16e:	d2e6      	bcs.n	800f13e <quorem+0xa4>
 800f170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f178:	b922      	cbnz	r2, 800f184 <quorem+0xea>
 800f17a:	3b04      	subs	r3, #4
 800f17c:	429d      	cmp	r5, r3
 800f17e:	461a      	mov	r2, r3
 800f180:	d30b      	bcc.n	800f19a <quorem+0x100>
 800f182:	613c      	str	r4, [r7, #16]
 800f184:	3601      	adds	r6, #1
 800f186:	4630      	mov	r0, r6
 800f188:	b003      	add	sp, #12
 800f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18e:	6812      	ldr	r2, [r2, #0]
 800f190:	3b04      	subs	r3, #4
 800f192:	2a00      	cmp	r2, #0
 800f194:	d1cb      	bne.n	800f12e <quorem+0x94>
 800f196:	3c01      	subs	r4, #1
 800f198:	e7c6      	b.n	800f128 <quorem+0x8e>
 800f19a:	6812      	ldr	r2, [r2, #0]
 800f19c:	3b04      	subs	r3, #4
 800f19e:	2a00      	cmp	r2, #0
 800f1a0:	d1ef      	bne.n	800f182 <quorem+0xe8>
 800f1a2:	3c01      	subs	r4, #1
 800f1a4:	e7ea      	b.n	800f17c <quorem+0xe2>
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	e7ee      	b.n	800f188 <quorem+0xee>
 800f1aa:	0000      	movs	r0, r0
 800f1ac:	0000      	movs	r0, r0
	...

0800f1b0 <_dtoa_r>:
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	69c7      	ldr	r7, [r0, #28]
 800f1b6:	b099      	sub	sp, #100	@ 0x64
 800f1b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f1bc:	ec55 4b10 	vmov	r4, r5, d0
 800f1c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f1c4:	4683      	mov	fp, r0
 800f1c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1ca:	b97f      	cbnz	r7, 800f1ec <_dtoa_r+0x3c>
 800f1cc:	2010      	movs	r0, #16
 800f1ce:	f000 fdfd 	bl	800fdcc <malloc>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f1d8:	b920      	cbnz	r0, 800f1e4 <_dtoa_r+0x34>
 800f1da:	4ba7      	ldr	r3, [pc, #668]	@ (800f478 <_dtoa_r+0x2c8>)
 800f1dc:	21ef      	movs	r1, #239	@ 0xef
 800f1de:	48a7      	ldr	r0, [pc, #668]	@ (800f47c <_dtoa_r+0x2cc>)
 800f1e0:	f001 fcbc 	bl	8010b5c <__assert_func>
 800f1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f1e8:	6007      	str	r7, [r0, #0]
 800f1ea:	60c7      	str	r7, [r0, #12]
 800f1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f1f0:	6819      	ldr	r1, [r3, #0]
 800f1f2:	b159      	cbz	r1, 800f20c <_dtoa_r+0x5c>
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	604a      	str	r2, [r1, #4]
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	4093      	lsls	r3, r2
 800f1fc:	608b      	str	r3, [r1, #8]
 800f1fe:	4658      	mov	r0, fp
 800f200:	f000 feda 	bl	800ffb8 <_Bfree>
 800f204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f208:	2200      	movs	r2, #0
 800f20a:	601a      	str	r2, [r3, #0]
 800f20c:	1e2b      	subs	r3, r5, #0
 800f20e:	bfb9      	ittee	lt
 800f210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f214:	9303      	strlt	r3, [sp, #12]
 800f216:	2300      	movge	r3, #0
 800f218:	6033      	strge	r3, [r6, #0]
 800f21a:	9f03      	ldr	r7, [sp, #12]
 800f21c:	4b98      	ldr	r3, [pc, #608]	@ (800f480 <_dtoa_r+0x2d0>)
 800f21e:	bfbc      	itt	lt
 800f220:	2201      	movlt	r2, #1
 800f222:	6032      	strlt	r2, [r6, #0]
 800f224:	43bb      	bics	r3, r7
 800f226:	d112      	bne.n	800f24e <_dtoa_r+0x9e>
 800f228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f22e:	6013      	str	r3, [r2, #0]
 800f230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f234:	4323      	orrs	r3, r4
 800f236:	f000 854d 	beq.w	800fcd4 <_dtoa_r+0xb24>
 800f23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f23c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f494 <_dtoa_r+0x2e4>
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 854f 	beq.w	800fce4 <_dtoa_r+0xb34>
 800f246:	f10a 0303 	add.w	r3, sl, #3
 800f24a:	f000 bd49 	b.w	800fce0 <_dtoa_r+0xb30>
 800f24e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f252:	2200      	movs	r2, #0
 800f254:	ec51 0b17 	vmov	r0, r1, d7
 800f258:	2300      	movs	r3, #0
 800f25a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f25e:	f7f1 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f262:	4680      	mov	r8, r0
 800f264:	b158      	cbz	r0, 800f27e <_dtoa_r+0xce>
 800f266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f268:	2301      	movs	r3, #1
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f26e:	b113      	cbz	r3, 800f276 <_dtoa_r+0xc6>
 800f270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f272:	4b84      	ldr	r3, [pc, #528]	@ (800f484 <_dtoa_r+0x2d4>)
 800f274:	6013      	str	r3, [r2, #0]
 800f276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f498 <_dtoa_r+0x2e8>
 800f27a:	f000 bd33 	b.w	800fce4 <_dtoa_r+0xb34>
 800f27e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f282:	aa16      	add	r2, sp, #88	@ 0x58
 800f284:	a917      	add	r1, sp, #92	@ 0x5c
 800f286:	4658      	mov	r0, fp
 800f288:	f001 f980 	bl	801058c <__d2b>
 800f28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f290:	4681      	mov	r9, r0
 800f292:	2e00      	cmp	r6, #0
 800f294:	d077      	beq.n	800f386 <_dtoa_r+0x1d6>
 800f296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	4b74      	ldr	r3, [pc, #464]	@ (800f488 <_dtoa_r+0x2d8>)
 800f2b6:	f7f0 ffef 	bl	8000298 <__aeabi_dsub>
 800f2ba:	a369      	add	r3, pc, #420	@ (adr r3, 800f460 <_dtoa_r+0x2b0>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f1 f9a2 	bl	8000608 <__aeabi_dmul>
 800f2c4:	a368      	add	r3, pc, #416	@ (adr r3, 800f468 <_dtoa_r+0x2b8>)
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	f7f0 ffe7 	bl	800029c <__adddf3>
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	460d      	mov	r5, r1
 800f2d4:	f7f1 f92e 	bl	8000534 <__aeabi_i2d>
 800f2d8:	a365      	add	r3, pc, #404	@ (adr r3, 800f470 <_dtoa_r+0x2c0>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	f7f1 f993 	bl	8000608 <__aeabi_dmul>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f0 ffd7 	bl	800029c <__adddf3>
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	460d      	mov	r5, r1
 800f2f2:	f7f1 fc39 	bl	8000b68 <__aeabi_d2iz>
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	4629      	mov	r1, r5
 800f300:	f7f1 fbf4 	bl	8000aec <__aeabi_dcmplt>
 800f304:	b140      	cbz	r0, 800f318 <_dtoa_r+0x168>
 800f306:	4638      	mov	r0, r7
 800f308:	f7f1 f914 	bl	8000534 <__aeabi_i2d>
 800f30c:	4622      	mov	r2, r4
 800f30e:	462b      	mov	r3, r5
 800f310:	f7f1 fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f314:	b900      	cbnz	r0, 800f318 <_dtoa_r+0x168>
 800f316:	3f01      	subs	r7, #1
 800f318:	2f16      	cmp	r7, #22
 800f31a:	d851      	bhi.n	800f3c0 <_dtoa_r+0x210>
 800f31c:	4b5b      	ldr	r3, [pc, #364]	@ (800f48c <_dtoa_r+0x2dc>)
 800f31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f32a:	f7f1 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d048      	beq.n	800f3c4 <_dtoa_r+0x214>
 800f332:	3f01      	subs	r7, #1
 800f334:	2300      	movs	r3, #0
 800f336:	9312      	str	r3, [sp, #72]	@ 0x48
 800f338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f33a:	1b9b      	subs	r3, r3, r6
 800f33c:	1e5a      	subs	r2, r3, #1
 800f33e:	bf44      	itt	mi
 800f340:	f1c3 0801 	rsbmi	r8, r3, #1
 800f344:	2300      	movmi	r3, #0
 800f346:	9208      	str	r2, [sp, #32]
 800f348:	bf54      	ite	pl
 800f34a:	f04f 0800 	movpl.w	r8, #0
 800f34e:	9308      	strmi	r3, [sp, #32]
 800f350:	2f00      	cmp	r7, #0
 800f352:	db39      	blt.n	800f3c8 <_dtoa_r+0x218>
 800f354:	9b08      	ldr	r3, [sp, #32]
 800f356:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f358:	443b      	add	r3, r7
 800f35a:	9308      	str	r3, [sp, #32]
 800f35c:	2300      	movs	r3, #0
 800f35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f362:	2b09      	cmp	r3, #9
 800f364:	d864      	bhi.n	800f430 <_dtoa_r+0x280>
 800f366:	2b05      	cmp	r3, #5
 800f368:	bfc4      	itt	gt
 800f36a:	3b04      	subgt	r3, #4
 800f36c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f370:	f1a3 0302 	sub.w	r3, r3, #2
 800f374:	bfcc      	ite	gt
 800f376:	2400      	movgt	r4, #0
 800f378:	2401      	movle	r4, #1
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d863      	bhi.n	800f446 <_dtoa_r+0x296>
 800f37e:	e8df f003 	tbb	[pc, r3]
 800f382:	372a      	.short	0x372a
 800f384:	5535      	.short	0x5535
 800f386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f38a:	441e      	add	r6, r3
 800f38c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f390:	2b20      	cmp	r3, #32
 800f392:	bfc1      	itttt	gt
 800f394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f398:	409f      	lslgt	r7, r3
 800f39a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f39e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f3a2:	bfd6      	itet	le
 800f3a4:	f1c3 0320 	rsble	r3, r3, #32
 800f3a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f3ac:	fa04 f003 	lslle.w	r0, r4, r3
 800f3b0:	f7f1 f8b0 	bl	8000514 <__aeabi_ui2d>
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f3ba:	3e01      	subs	r6, #1
 800f3bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800f3be:	e777      	b.n	800f2b0 <_dtoa_r+0x100>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e7b8      	b.n	800f336 <_dtoa_r+0x186>
 800f3c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f3c6:	e7b7      	b.n	800f338 <_dtoa_r+0x188>
 800f3c8:	427b      	negs	r3, r7
 800f3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	eba8 0807 	sub.w	r8, r8, r7
 800f3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3d4:	e7c4      	b.n	800f360 <_dtoa_r+0x1b0>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dc35      	bgt.n	800f44c <_dtoa_r+0x29c>
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	9307      	str	r3, [sp, #28]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3ea:	e00b      	b.n	800f404 <_dtoa_r+0x254>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	e7f3      	b.n	800f3d8 <_dtoa_r+0x228>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3f6:	18fb      	adds	r3, r7, r3
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	9307      	str	r3, [sp, #28]
 800f400:	bfb8      	it	lt
 800f402:	2301      	movlt	r3, #1
 800f404:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f408:	2100      	movs	r1, #0
 800f40a:	2204      	movs	r2, #4
 800f40c:	f102 0514 	add.w	r5, r2, #20
 800f410:	429d      	cmp	r5, r3
 800f412:	d91f      	bls.n	800f454 <_dtoa_r+0x2a4>
 800f414:	6041      	str	r1, [r0, #4]
 800f416:	4658      	mov	r0, fp
 800f418:	f000 fd8e 	bl	800ff38 <_Balloc>
 800f41c:	4682      	mov	sl, r0
 800f41e:	2800      	cmp	r0, #0
 800f420:	d13c      	bne.n	800f49c <_dtoa_r+0x2ec>
 800f422:	4b1b      	ldr	r3, [pc, #108]	@ (800f490 <_dtoa_r+0x2e0>)
 800f424:	4602      	mov	r2, r0
 800f426:	f240 11af 	movw	r1, #431	@ 0x1af
 800f42a:	e6d8      	b.n	800f1de <_dtoa_r+0x2e>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e7e0      	b.n	800f3f2 <_dtoa_r+0x242>
 800f430:	2401      	movs	r4, #1
 800f432:	2300      	movs	r3, #0
 800f434:	9309      	str	r3, [sp, #36]	@ 0x24
 800f436:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f438:	f04f 33ff 	mov.w	r3, #4294967295
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	9307      	str	r3, [sp, #28]
 800f440:	2200      	movs	r2, #0
 800f442:	2312      	movs	r3, #18
 800f444:	e7d0      	b.n	800f3e8 <_dtoa_r+0x238>
 800f446:	2301      	movs	r3, #1
 800f448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f44a:	e7f5      	b.n	800f438 <_dtoa_r+0x288>
 800f44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	9307      	str	r3, [sp, #28]
 800f452:	e7d7      	b.n	800f404 <_dtoa_r+0x254>
 800f454:	3101      	adds	r1, #1
 800f456:	0052      	lsls	r2, r2, #1
 800f458:	e7d8      	b.n	800f40c <_dtoa_r+0x25c>
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w
 800f460:	636f4361 	.word	0x636f4361
 800f464:	3fd287a7 	.word	0x3fd287a7
 800f468:	8b60c8b3 	.word	0x8b60c8b3
 800f46c:	3fc68a28 	.word	0x3fc68a28
 800f470:	509f79fb 	.word	0x509f79fb
 800f474:	3fd34413 	.word	0x3fd34413
 800f478:	08010f91 	.word	0x08010f91
 800f47c:	08010fa8 	.word	0x08010fa8
 800f480:	7ff00000 	.word	0x7ff00000
 800f484:	08010f61 	.word	0x08010f61
 800f488:	3ff80000 	.word	0x3ff80000
 800f48c:	080110a0 	.word	0x080110a0
 800f490:	08011000 	.word	0x08011000
 800f494:	08010f8d 	.word	0x08010f8d
 800f498:	08010f60 	.word	0x08010f60
 800f49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4a0:	6018      	str	r0, [r3, #0]
 800f4a2:	9b07      	ldr	r3, [sp, #28]
 800f4a4:	2b0e      	cmp	r3, #14
 800f4a6:	f200 80a4 	bhi.w	800f5f2 <_dtoa_r+0x442>
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	f000 80a1 	beq.w	800f5f2 <_dtoa_r+0x442>
 800f4b0:	2f00      	cmp	r7, #0
 800f4b2:	dd33      	ble.n	800f51c <_dtoa_r+0x36c>
 800f4b4:	4bad      	ldr	r3, [pc, #692]	@ (800f76c <_dtoa_r+0x5bc>)
 800f4b6:	f007 020f 	and.w	r2, r7, #15
 800f4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4be:	ed93 7b00 	vldr	d7, [r3]
 800f4c2:	05f8      	lsls	r0, r7, #23
 800f4c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f4cc:	d516      	bpl.n	800f4fc <_dtoa_r+0x34c>
 800f4ce:	4ba8      	ldr	r3, [pc, #672]	@ (800f770 <_dtoa_r+0x5c0>)
 800f4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4d8:	f7f1 f9c0 	bl	800085c <__aeabi_ddiv>
 800f4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4e0:	f004 040f 	and.w	r4, r4, #15
 800f4e4:	2603      	movs	r6, #3
 800f4e6:	4da2      	ldr	r5, [pc, #648]	@ (800f770 <_dtoa_r+0x5c0>)
 800f4e8:	b954      	cbnz	r4, 800f500 <_dtoa_r+0x350>
 800f4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4f2:	f7f1 f9b3 	bl	800085c <__aeabi_ddiv>
 800f4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4fa:	e028      	b.n	800f54e <_dtoa_r+0x39e>
 800f4fc:	2602      	movs	r6, #2
 800f4fe:	e7f2      	b.n	800f4e6 <_dtoa_r+0x336>
 800f500:	07e1      	lsls	r1, r4, #31
 800f502:	d508      	bpl.n	800f516 <_dtoa_r+0x366>
 800f504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f50c:	f7f1 f87c 	bl	8000608 <__aeabi_dmul>
 800f510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f514:	3601      	adds	r6, #1
 800f516:	1064      	asrs	r4, r4, #1
 800f518:	3508      	adds	r5, #8
 800f51a:	e7e5      	b.n	800f4e8 <_dtoa_r+0x338>
 800f51c:	f000 80d2 	beq.w	800f6c4 <_dtoa_r+0x514>
 800f520:	427c      	negs	r4, r7
 800f522:	4b92      	ldr	r3, [pc, #584]	@ (800f76c <_dtoa_r+0x5bc>)
 800f524:	4d92      	ldr	r5, [pc, #584]	@ (800f770 <_dtoa_r+0x5c0>)
 800f526:	f004 020f 	and.w	r2, r4, #15
 800f52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f536:	f7f1 f867 	bl	8000608 <__aeabi_dmul>
 800f53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f53e:	1124      	asrs	r4, r4, #4
 800f540:	2300      	movs	r3, #0
 800f542:	2602      	movs	r6, #2
 800f544:	2c00      	cmp	r4, #0
 800f546:	f040 80b2 	bne.w	800f6ae <_dtoa_r+0x4fe>
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1d3      	bne.n	800f4f6 <_dtoa_r+0x346>
 800f54e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 80b7 	beq.w	800f6c8 <_dtoa_r+0x518>
 800f55a:	4b86      	ldr	r3, [pc, #536]	@ (800f774 <_dtoa_r+0x5c4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	4620      	mov	r0, r4
 800f560:	4629      	mov	r1, r5
 800f562:	f7f1 fac3 	bl	8000aec <__aeabi_dcmplt>
 800f566:	2800      	cmp	r0, #0
 800f568:	f000 80ae 	beq.w	800f6c8 <_dtoa_r+0x518>
 800f56c:	9b07      	ldr	r3, [sp, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f000 80aa 	beq.w	800f6c8 <_dtoa_r+0x518>
 800f574:	9b00      	ldr	r3, [sp, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	dd37      	ble.n	800f5ea <_dtoa_r+0x43a>
 800f57a:	1e7b      	subs	r3, r7, #1
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	4620      	mov	r0, r4
 800f580:	4b7d      	ldr	r3, [pc, #500]	@ (800f778 <_dtoa_r+0x5c8>)
 800f582:	2200      	movs	r2, #0
 800f584:	4629      	mov	r1, r5
 800f586:	f7f1 f83f 	bl	8000608 <__aeabi_dmul>
 800f58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f58e:	9c00      	ldr	r4, [sp, #0]
 800f590:	3601      	adds	r6, #1
 800f592:	4630      	mov	r0, r6
 800f594:	f7f0 ffce 	bl	8000534 <__aeabi_i2d>
 800f598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f59c:	f7f1 f834 	bl	8000608 <__aeabi_dmul>
 800f5a0:	4b76      	ldr	r3, [pc, #472]	@ (800f77c <_dtoa_r+0x5cc>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f7f0 fe7a 	bl	800029c <__adddf3>
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f5ae:	2c00      	cmp	r4, #0
 800f5b0:	f040 808d 	bne.w	800f6ce <_dtoa_r+0x51e>
 800f5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b8:	4b71      	ldr	r3, [pc, #452]	@ (800f780 <_dtoa_r+0x5d0>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f7f0 fe6c 	bl	8000298 <__aeabi_dsub>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5c8:	462a      	mov	r2, r5
 800f5ca:	4633      	mov	r3, r6
 800f5cc:	f7f1 faac 	bl	8000b28 <__aeabi_dcmpgt>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f040 828b 	bne.w	800faec <_dtoa_r+0x93c>
 800f5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5da:	462a      	mov	r2, r5
 800f5dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f5e0:	f7f1 fa84 	bl	8000aec <__aeabi_dcmplt>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	f040 8128 	bne.w	800f83a <_dtoa_r+0x68a>
 800f5ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f5ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f2c0 815a 	blt.w	800f8ae <_dtoa_r+0x6fe>
 800f5fa:	2f0e      	cmp	r7, #14
 800f5fc:	f300 8157 	bgt.w	800f8ae <_dtoa_r+0x6fe>
 800f600:	4b5a      	ldr	r3, [pc, #360]	@ (800f76c <_dtoa_r+0x5bc>)
 800f602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f606:	ed93 7b00 	vldr	d7, [r3]
 800f60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	ed8d 7b00 	vstr	d7, [sp]
 800f612:	da03      	bge.n	800f61c <_dtoa_r+0x46c>
 800f614:	9b07      	ldr	r3, [sp, #28]
 800f616:	2b00      	cmp	r3, #0
 800f618:	f340 8101 	ble.w	800f81e <_dtoa_r+0x66e>
 800f61c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f620:	4656      	mov	r6, sl
 800f622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f626:	4620      	mov	r0, r4
 800f628:	4629      	mov	r1, r5
 800f62a:	f7f1 f917 	bl	800085c <__aeabi_ddiv>
 800f62e:	f7f1 fa9b 	bl	8000b68 <__aeabi_d2iz>
 800f632:	4680      	mov	r8, r0
 800f634:	f7f0 ff7e 	bl	8000534 <__aeabi_i2d>
 800f638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f63c:	f7f0 ffe4 	bl	8000608 <__aeabi_dmul>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4620      	mov	r0, r4
 800f646:	4629      	mov	r1, r5
 800f648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f64c:	f7f0 fe24 	bl	8000298 <__aeabi_dsub>
 800f650:	f806 4b01 	strb.w	r4, [r6], #1
 800f654:	9d07      	ldr	r5, [sp, #28]
 800f656:	eba6 040a 	sub.w	r4, r6, sl
 800f65a:	42a5      	cmp	r5, r4
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	f040 8117 	bne.w	800f892 <_dtoa_r+0x6e2>
 800f664:	f7f0 fe1a 	bl	800029c <__adddf3>
 800f668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f66c:	4604      	mov	r4, r0
 800f66e:	460d      	mov	r5, r1
 800f670:	f7f1 fa5a 	bl	8000b28 <__aeabi_dcmpgt>
 800f674:	2800      	cmp	r0, #0
 800f676:	f040 80f9 	bne.w	800f86c <_dtoa_r+0x6bc>
 800f67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f67e:	4620      	mov	r0, r4
 800f680:	4629      	mov	r1, r5
 800f682:	f7f1 fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 800f686:	b118      	cbz	r0, 800f690 <_dtoa_r+0x4e0>
 800f688:	f018 0f01 	tst.w	r8, #1
 800f68c:	f040 80ee 	bne.w	800f86c <_dtoa_r+0x6bc>
 800f690:	4649      	mov	r1, r9
 800f692:	4658      	mov	r0, fp
 800f694:	f000 fc90 	bl	800ffb8 <_Bfree>
 800f698:	2300      	movs	r3, #0
 800f69a:	7033      	strb	r3, [r6, #0]
 800f69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f69e:	3701      	adds	r7, #1
 800f6a0:	601f      	str	r7, [r3, #0]
 800f6a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 831d 	beq.w	800fce4 <_dtoa_r+0xb34>
 800f6aa:	601e      	str	r6, [r3, #0]
 800f6ac:	e31a      	b.n	800fce4 <_dtoa_r+0xb34>
 800f6ae:	07e2      	lsls	r2, r4, #31
 800f6b0:	d505      	bpl.n	800f6be <_dtoa_r+0x50e>
 800f6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6b6:	f7f0 ffa7 	bl	8000608 <__aeabi_dmul>
 800f6ba:	3601      	adds	r6, #1
 800f6bc:	2301      	movs	r3, #1
 800f6be:	1064      	asrs	r4, r4, #1
 800f6c0:	3508      	adds	r5, #8
 800f6c2:	e73f      	b.n	800f544 <_dtoa_r+0x394>
 800f6c4:	2602      	movs	r6, #2
 800f6c6:	e742      	b.n	800f54e <_dtoa_r+0x39e>
 800f6c8:	9c07      	ldr	r4, [sp, #28]
 800f6ca:	9704      	str	r7, [sp, #16]
 800f6cc:	e761      	b.n	800f592 <_dtoa_r+0x3e2>
 800f6ce:	4b27      	ldr	r3, [pc, #156]	@ (800f76c <_dtoa_r+0x5bc>)
 800f6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6da:	4454      	add	r4, sl
 800f6dc:	2900      	cmp	r1, #0
 800f6de:	d053      	beq.n	800f788 <_dtoa_r+0x5d8>
 800f6e0:	4928      	ldr	r1, [pc, #160]	@ (800f784 <_dtoa_r+0x5d4>)
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f7f1 f8ba 	bl	800085c <__aeabi_ddiv>
 800f6e8:	4633      	mov	r3, r6
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	f7f0 fdd4 	bl	8000298 <__aeabi_dsub>
 800f6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6f4:	4656      	mov	r6, sl
 800f6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6fa:	f7f1 fa35 	bl	8000b68 <__aeabi_d2iz>
 800f6fe:	4605      	mov	r5, r0
 800f700:	f7f0 ff18 	bl	8000534 <__aeabi_i2d>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f70c:	f7f0 fdc4 	bl	8000298 <__aeabi_dsub>
 800f710:	3530      	adds	r5, #48	@ 0x30
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f71a:	f806 5b01 	strb.w	r5, [r6], #1
 800f71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f722:	f7f1 f9e3 	bl	8000aec <__aeabi_dcmplt>
 800f726:	2800      	cmp	r0, #0
 800f728:	d171      	bne.n	800f80e <_dtoa_r+0x65e>
 800f72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f72e:	4911      	ldr	r1, [pc, #68]	@ (800f774 <_dtoa_r+0x5c4>)
 800f730:	2000      	movs	r0, #0
 800f732:	f7f0 fdb1 	bl	8000298 <__aeabi_dsub>
 800f736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f73a:	f7f1 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800f73e:	2800      	cmp	r0, #0
 800f740:	f040 8095 	bne.w	800f86e <_dtoa_r+0x6be>
 800f744:	42a6      	cmp	r6, r4
 800f746:	f43f af50 	beq.w	800f5ea <_dtoa_r+0x43a>
 800f74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f74e:	4b0a      	ldr	r3, [pc, #40]	@ (800f778 <_dtoa_r+0x5c8>)
 800f750:	2200      	movs	r2, #0
 800f752:	f7f0 ff59 	bl	8000608 <__aeabi_dmul>
 800f756:	4b08      	ldr	r3, [pc, #32]	@ (800f778 <_dtoa_r+0x5c8>)
 800f758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f75c:	2200      	movs	r2, #0
 800f75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f762:	f7f0 ff51 	bl	8000608 <__aeabi_dmul>
 800f766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f76a:	e7c4      	b.n	800f6f6 <_dtoa_r+0x546>
 800f76c:	080110a0 	.word	0x080110a0
 800f770:	08011078 	.word	0x08011078
 800f774:	3ff00000 	.word	0x3ff00000
 800f778:	40240000 	.word	0x40240000
 800f77c:	401c0000 	.word	0x401c0000
 800f780:	40140000 	.word	0x40140000
 800f784:	3fe00000 	.word	0x3fe00000
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	f7f0 ff3c 	bl	8000608 <__aeabi_dmul>
 800f790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f794:	9415      	str	r4, [sp, #84]	@ 0x54
 800f796:	4656      	mov	r6, sl
 800f798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f79c:	f7f1 f9e4 	bl	8000b68 <__aeabi_d2iz>
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	f7f0 fec7 	bl	8000534 <__aeabi_i2d>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7ae:	f7f0 fd73 	bl	8000298 <__aeabi_dsub>
 800f7b2:	3530      	adds	r5, #48	@ 0x30
 800f7b4:	f806 5b01 	strb.w	r5, [r6], #1
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	42a6      	cmp	r6, r4
 800f7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f7c2:	f04f 0200 	mov.w	r2, #0
 800f7c6:	d124      	bne.n	800f812 <_dtoa_r+0x662>
 800f7c8:	4bac      	ldr	r3, [pc, #688]	@ (800fa7c <_dtoa_r+0x8cc>)
 800f7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f7ce:	f7f0 fd65 	bl	800029c <__adddf3>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7da:	f7f1 f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d145      	bne.n	800f86e <_dtoa_r+0x6be>
 800f7e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f7e6:	49a5      	ldr	r1, [pc, #660]	@ (800fa7c <_dtoa_r+0x8cc>)
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f7f0 fd55 	bl	8000298 <__aeabi_dsub>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f6:	f7f1 f979 	bl	8000aec <__aeabi_dcmplt>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f43f aef5 	beq.w	800f5ea <_dtoa_r+0x43a>
 800f800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f802:	1e73      	subs	r3, r6, #1
 800f804:	9315      	str	r3, [sp, #84]	@ 0x54
 800f806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f80a:	2b30      	cmp	r3, #48	@ 0x30
 800f80c:	d0f8      	beq.n	800f800 <_dtoa_r+0x650>
 800f80e:	9f04      	ldr	r7, [sp, #16]
 800f810:	e73e      	b.n	800f690 <_dtoa_r+0x4e0>
 800f812:	4b9b      	ldr	r3, [pc, #620]	@ (800fa80 <_dtoa_r+0x8d0>)
 800f814:	f7f0 fef8 	bl	8000608 <__aeabi_dmul>
 800f818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f81c:	e7bc      	b.n	800f798 <_dtoa_r+0x5e8>
 800f81e:	d10c      	bne.n	800f83a <_dtoa_r+0x68a>
 800f820:	4b98      	ldr	r3, [pc, #608]	@ (800fa84 <_dtoa_r+0x8d4>)
 800f822:	2200      	movs	r2, #0
 800f824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f828:	f7f0 feee 	bl	8000608 <__aeabi_dmul>
 800f82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f830:	f7f1 f970 	bl	8000b14 <__aeabi_dcmpge>
 800f834:	2800      	cmp	r0, #0
 800f836:	f000 8157 	beq.w	800fae8 <_dtoa_r+0x938>
 800f83a:	2400      	movs	r4, #0
 800f83c:	4625      	mov	r5, r4
 800f83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f840:	43db      	mvns	r3, r3
 800f842:	9304      	str	r3, [sp, #16]
 800f844:	4656      	mov	r6, sl
 800f846:	2700      	movs	r7, #0
 800f848:	4621      	mov	r1, r4
 800f84a:	4658      	mov	r0, fp
 800f84c:	f000 fbb4 	bl	800ffb8 <_Bfree>
 800f850:	2d00      	cmp	r5, #0
 800f852:	d0dc      	beq.n	800f80e <_dtoa_r+0x65e>
 800f854:	b12f      	cbz	r7, 800f862 <_dtoa_r+0x6b2>
 800f856:	42af      	cmp	r7, r5
 800f858:	d003      	beq.n	800f862 <_dtoa_r+0x6b2>
 800f85a:	4639      	mov	r1, r7
 800f85c:	4658      	mov	r0, fp
 800f85e:	f000 fbab 	bl	800ffb8 <_Bfree>
 800f862:	4629      	mov	r1, r5
 800f864:	4658      	mov	r0, fp
 800f866:	f000 fba7 	bl	800ffb8 <_Bfree>
 800f86a:	e7d0      	b.n	800f80e <_dtoa_r+0x65e>
 800f86c:	9704      	str	r7, [sp, #16]
 800f86e:	4633      	mov	r3, r6
 800f870:	461e      	mov	r6, r3
 800f872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f876:	2a39      	cmp	r2, #57	@ 0x39
 800f878:	d107      	bne.n	800f88a <_dtoa_r+0x6da>
 800f87a:	459a      	cmp	sl, r3
 800f87c:	d1f8      	bne.n	800f870 <_dtoa_r+0x6c0>
 800f87e:	9a04      	ldr	r2, [sp, #16]
 800f880:	3201      	adds	r2, #1
 800f882:	9204      	str	r2, [sp, #16]
 800f884:	2230      	movs	r2, #48	@ 0x30
 800f886:	f88a 2000 	strb.w	r2, [sl]
 800f88a:	781a      	ldrb	r2, [r3, #0]
 800f88c:	3201      	adds	r2, #1
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	e7bd      	b.n	800f80e <_dtoa_r+0x65e>
 800f892:	4b7b      	ldr	r3, [pc, #492]	@ (800fa80 <_dtoa_r+0x8d0>)
 800f894:	2200      	movs	r2, #0
 800f896:	f7f0 feb7 	bl	8000608 <__aeabi_dmul>
 800f89a:	2200      	movs	r2, #0
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	460d      	mov	r5, r1
 800f8a2:	f7f1 f919 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	f43f aebb 	beq.w	800f622 <_dtoa_r+0x472>
 800f8ac:	e6f0      	b.n	800f690 <_dtoa_r+0x4e0>
 800f8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f8b0:	2a00      	cmp	r2, #0
 800f8b2:	f000 80db 	beq.w	800fa6c <_dtoa_r+0x8bc>
 800f8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8b8:	2a01      	cmp	r2, #1
 800f8ba:	f300 80bf 	bgt.w	800fa3c <_dtoa_r+0x88c>
 800f8be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	f000 80b7 	beq.w	800fa34 <_dtoa_r+0x884>
 800f8c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f8ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8cc:	4646      	mov	r6, r8
 800f8ce:	9a08      	ldr	r2, [sp, #32]
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	441a      	add	r2, r3
 800f8d4:	4658      	mov	r0, fp
 800f8d6:	4498      	add	r8, r3
 800f8d8:	9208      	str	r2, [sp, #32]
 800f8da:	f000 fc21 	bl	8010120 <__i2b>
 800f8de:	4605      	mov	r5, r0
 800f8e0:	b15e      	cbz	r6, 800f8fa <_dtoa_r+0x74a>
 800f8e2:	9b08      	ldr	r3, [sp, #32]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dd08      	ble.n	800f8fa <_dtoa_r+0x74a>
 800f8e8:	42b3      	cmp	r3, r6
 800f8ea:	9a08      	ldr	r2, [sp, #32]
 800f8ec:	bfa8      	it	ge
 800f8ee:	4633      	movge	r3, r6
 800f8f0:	eba8 0803 	sub.w	r8, r8, r3
 800f8f4:	1af6      	subs	r6, r6, r3
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	9308      	str	r3, [sp, #32]
 800f8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8fc:	b1f3      	cbz	r3, 800f93c <_dtoa_r+0x78c>
 800f8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 80b7 	beq.w	800fa74 <_dtoa_r+0x8c4>
 800f906:	b18c      	cbz	r4, 800f92c <_dtoa_r+0x77c>
 800f908:	4629      	mov	r1, r5
 800f90a:	4622      	mov	r2, r4
 800f90c:	4658      	mov	r0, fp
 800f90e:	f000 fcc7 	bl	80102a0 <__pow5mult>
 800f912:	464a      	mov	r2, r9
 800f914:	4601      	mov	r1, r0
 800f916:	4605      	mov	r5, r0
 800f918:	4658      	mov	r0, fp
 800f91a:	f000 fc17 	bl	801014c <__multiply>
 800f91e:	4649      	mov	r1, r9
 800f920:	9004      	str	r0, [sp, #16]
 800f922:	4658      	mov	r0, fp
 800f924:	f000 fb48 	bl	800ffb8 <_Bfree>
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	4699      	mov	r9, r3
 800f92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f92e:	1b1a      	subs	r2, r3, r4
 800f930:	d004      	beq.n	800f93c <_dtoa_r+0x78c>
 800f932:	4649      	mov	r1, r9
 800f934:	4658      	mov	r0, fp
 800f936:	f000 fcb3 	bl	80102a0 <__pow5mult>
 800f93a:	4681      	mov	r9, r0
 800f93c:	2101      	movs	r1, #1
 800f93e:	4658      	mov	r0, fp
 800f940:	f000 fbee 	bl	8010120 <__i2b>
 800f944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f946:	4604      	mov	r4, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 81cf 	beq.w	800fcec <_dtoa_r+0xb3c>
 800f94e:	461a      	mov	r2, r3
 800f950:	4601      	mov	r1, r0
 800f952:	4658      	mov	r0, fp
 800f954:	f000 fca4 	bl	80102a0 <__pow5mult>
 800f958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	4604      	mov	r4, r0
 800f95e:	f300 8095 	bgt.w	800fa8c <_dtoa_r+0x8dc>
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	f040 8087 	bne.w	800fa78 <_dtoa_r+0x8c8>
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f970:	2b00      	cmp	r3, #0
 800f972:	f040 8089 	bne.w	800fa88 <_dtoa_r+0x8d8>
 800f976:	9b03      	ldr	r3, [sp, #12]
 800f978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f97c:	0d1b      	lsrs	r3, r3, #20
 800f97e:	051b      	lsls	r3, r3, #20
 800f980:	b12b      	cbz	r3, 800f98e <_dtoa_r+0x7de>
 800f982:	9b08      	ldr	r3, [sp, #32]
 800f984:	3301      	adds	r3, #1
 800f986:	9308      	str	r3, [sp, #32]
 800f988:	f108 0801 	add.w	r8, r8, #1
 800f98c:	2301      	movs	r3, #1
 800f98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 81b0 	beq.w	800fcf8 <_dtoa_r+0xb48>
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f99e:	6918      	ldr	r0, [r3, #16]
 800f9a0:	f000 fb72 	bl	8010088 <__hi0bits>
 800f9a4:	f1c0 0020 	rsb	r0, r0, #32
 800f9a8:	9b08      	ldr	r3, [sp, #32]
 800f9aa:	4418      	add	r0, r3
 800f9ac:	f010 001f 	ands.w	r0, r0, #31
 800f9b0:	d077      	beq.n	800faa2 <_dtoa_r+0x8f2>
 800f9b2:	f1c0 0320 	rsb	r3, r0, #32
 800f9b6:	2b04      	cmp	r3, #4
 800f9b8:	dd6b      	ble.n	800fa92 <_dtoa_r+0x8e2>
 800f9ba:	9b08      	ldr	r3, [sp, #32]
 800f9bc:	f1c0 001c 	rsb	r0, r0, #28
 800f9c0:	4403      	add	r3, r0
 800f9c2:	4480      	add	r8, r0
 800f9c4:	4406      	add	r6, r0
 800f9c6:	9308      	str	r3, [sp, #32]
 800f9c8:	f1b8 0f00 	cmp.w	r8, #0
 800f9cc:	dd05      	ble.n	800f9da <_dtoa_r+0x82a>
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	4642      	mov	r2, r8
 800f9d2:	4658      	mov	r0, fp
 800f9d4:	f000 fcbe 	bl	8010354 <__lshift>
 800f9d8:	4681      	mov	r9, r0
 800f9da:	9b08      	ldr	r3, [sp, #32]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dd05      	ble.n	800f9ec <_dtoa_r+0x83c>
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4658      	mov	r0, fp
 800f9e6:	f000 fcb5 	bl	8010354 <__lshift>
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d059      	beq.n	800faa6 <_dtoa_r+0x8f6>
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4648      	mov	r0, r9
 800f9f6:	f000 fd19 	bl	801042c <__mcmp>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	da53      	bge.n	800faa6 <_dtoa_r+0x8f6>
 800f9fe:	1e7b      	subs	r3, r7, #1
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	4649      	mov	r1, r9
 800fa04:	2300      	movs	r3, #0
 800fa06:	220a      	movs	r2, #10
 800fa08:	4658      	mov	r0, fp
 800fa0a:	f000 faf7 	bl	800fffc <__multadd>
 800fa0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa10:	4681      	mov	r9, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 8172 	beq.w	800fcfc <_dtoa_r+0xb4c>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	4658      	mov	r0, fp
 800fa20:	f000 faec 	bl	800fffc <__multadd>
 800fa24:	9b00      	ldr	r3, [sp, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	4605      	mov	r5, r0
 800fa2a:	dc67      	bgt.n	800fafc <_dtoa_r+0x94c>
 800fa2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	dc41      	bgt.n	800fab6 <_dtoa_r+0x906>
 800fa32:	e063      	b.n	800fafc <_dtoa_r+0x94c>
 800fa34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fa36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fa3a:	e746      	b.n	800f8ca <_dtoa_r+0x71a>
 800fa3c:	9b07      	ldr	r3, [sp, #28]
 800fa3e:	1e5c      	subs	r4, r3, #1
 800fa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	bfbf      	itttt	lt
 800fa46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fa48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fa4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fa4c:	1ae3      	sublt	r3, r4, r3
 800fa4e:	bfb4      	ite	lt
 800fa50:	18d2      	addlt	r2, r2, r3
 800fa52:	1b1c      	subge	r4, r3, r4
 800fa54:	9b07      	ldr	r3, [sp, #28]
 800fa56:	bfbc      	itt	lt
 800fa58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fa5a:	2400      	movlt	r4, #0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	bfb5      	itete	lt
 800fa60:	eba8 0603 	sublt.w	r6, r8, r3
 800fa64:	9b07      	ldrge	r3, [sp, #28]
 800fa66:	2300      	movlt	r3, #0
 800fa68:	4646      	movge	r6, r8
 800fa6a:	e730      	b.n	800f8ce <_dtoa_r+0x71e>
 800fa6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fa6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fa70:	4646      	mov	r6, r8
 800fa72:	e735      	b.n	800f8e0 <_dtoa_r+0x730>
 800fa74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa76:	e75c      	b.n	800f932 <_dtoa_r+0x782>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	e788      	b.n	800f98e <_dtoa_r+0x7de>
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	40240000 	.word	0x40240000
 800fa84:	40140000 	.word	0x40140000
 800fa88:	9b02      	ldr	r3, [sp, #8]
 800fa8a:	e780      	b.n	800f98e <_dtoa_r+0x7de>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa90:	e782      	b.n	800f998 <_dtoa_r+0x7e8>
 800fa92:	d099      	beq.n	800f9c8 <_dtoa_r+0x818>
 800fa94:	9a08      	ldr	r2, [sp, #32]
 800fa96:	331c      	adds	r3, #28
 800fa98:	441a      	add	r2, r3
 800fa9a:	4498      	add	r8, r3
 800fa9c:	441e      	add	r6, r3
 800fa9e:	9208      	str	r2, [sp, #32]
 800faa0:	e792      	b.n	800f9c8 <_dtoa_r+0x818>
 800faa2:	4603      	mov	r3, r0
 800faa4:	e7f6      	b.n	800fa94 <_dtoa_r+0x8e4>
 800faa6:	9b07      	ldr	r3, [sp, #28]
 800faa8:	9704      	str	r7, [sp, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dc20      	bgt.n	800faf0 <_dtoa_r+0x940>
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	dd1e      	ble.n	800faf4 <_dtoa_r+0x944>
 800fab6:	9b00      	ldr	r3, [sp, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f47f aec0 	bne.w	800f83e <_dtoa_r+0x68e>
 800fabe:	4621      	mov	r1, r4
 800fac0:	2205      	movs	r2, #5
 800fac2:	4658      	mov	r0, fp
 800fac4:	f000 fa9a 	bl	800fffc <__multadd>
 800fac8:	4601      	mov	r1, r0
 800faca:	4604      	mov	r4, r0
 800facc:	4648      	mov	r0, r9
 800face:	f000 fcad 	bl	801042c <__mcmp>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	f77f aeb3 	ble.w	800f83e <_dtoa_r+0x68e>
 800fad8:	4656      	mov	r6, sl
 800fada:	2331      	movs	r3, #49	@ 0x31
 800fadc:	f806 3b01 	strb.w	r3, [r6], #1
 800fae0:	9b04      	ldr	r3, [sp, #16]
 800fae2:	3301      	adds	r3, #1
 800fae4:	9304      	str	r3, [sp, #16]
 800fae6:	e6ae      	b.n	800f846 <_dtoa_r+0x696>
 800fae8:	9c07      	ldr	r4, [sp, #28]
 800faea:	9704      	str	r7, [sp, #16]
 800faec:	4625      	mov	r5, r4
 800faee:	e7f3      	b.n	800fad8 <_dtoa_r+0x928>
 800faf0:	9b07      	ldr	r3, [sp, #28]
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f000 8104 	beq.w	800fd04 <_dtoa_r+0xb54>
 800fafc:	2e00      	cmp	r6, #0
 800fafe:	dd05      	ble.n	800fb0c <_dtoa_r+0x95c>
 800fb00:	4629      	mov	r1, r5
 800fb02:	4632      	mov	r2, r6
 800fb04:	4658      	mov	r0, fp
 800fb06:	f000 fc25 	bl	8010354 <__lshift>
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d05a      	beq.n	800fbc8 <_dtoa_r+0xa18>
 800fb12:	6869      	ldr	r1, [r5, #4]
 800fb14:	4658      	mov	r0, fp
 800fb16:	f000 fa0f 	bl	800ff38 <_Balloc>
 800fb1a:	4606      	mov	r6, r0
 800fb1c:	b928      	cbnz	r0, 800fb2a <_dtoa_r+0x97a>
 800fb1e:	4b84      	ldr	r3, [pc, #528]	@ (800fd30 <_dtoa_r+0xb80>)
 800fb20:	4602      	mov	r2, r0
 800fb22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb26:	f7ff bb5a 	b.w	800f1de <_dtoa_r+0x2e>
 800fb2a:	692a      	ldr	r2, [r5, #16]
 800fb2c:	3202      	adds	r2, #2
 800fb2e:	0092      	lsls	r2, r2, #2
 800fb30:	f105 010c 	add.w	r1, r5, #12
 800fb34:	300c      	adds	r0, #12
 800fb36:	f001 f803 	bl	8010b40 <memcpy>
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4658      	mov	r0, fp
 800fb40:	f000 fc08 	bl	8010354 <__lshift>
 800fb44:	f10a 0301 	add.w	r3, sl, #1
 800fb48:	9307      	str	r3, [sp, #28]
 800fb4a:	9b00      	ldr	r3, [sp, #0]
 800fb4c:	4453      	add	r3, sl
 800fb4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb50:	9b02      	ldr	r3, [sp, #8]
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	462f      	mov	r7, r5
 800fb58:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	9b07      	ldr	r3, [sp, #28]
 800fb5e:	4621      	mov	r1, r4
 800fb60:	3b01      	subs	r3, #1
 800fb62:	4648      	mov	r0, r9
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	f7ff fa98 	bl	800f09a <quorem>
 800fb6a:	4639      	mov	r1, r7
 800fb6c:	9002      	str	r0, [sp, #8]
 800fb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb72:	4648      	mov	r0, r9
 800fb74:	f000 fc5a 	bl	801042c <__mcmp>
 800fb78:	462a      	mov	r2, r5
 800fb7a:	9008      	str	r0, [sp, #32]
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	4658      	mov	r0, fp
 800fb80:	f000 fc70 	bl	8010464 <__mdiff>
 800fb84:	68c2      	ldr	r2, [r0, #12]
 800fb86:	4606      	mov	r6, r0
 800fb88:	bb02      	cbnz	r2, 800fbcc <_dtoa_r+0xa1c>
 800fb8a:	4601      	mov	r1, r0
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f000 fc4d 	bl	801042c <__mcmp>
 800fb92:	4602      	mov	r2, r0
 800fb94:	4631      	mov	r1, r6
 800fb96:	4658      	mov	r0, fp
 800fb98:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb9a:	f000 fa0d 	bl	800ffb8 <_Bfree>
 800fb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fba2:	9e07      	ldr	r6, [sp, #28]
 800fba4:	ea43 0102 	orr.w	r1, r3, r2
 800fba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbaa:	4319      	orrs	r1, r3
 800fbac:	d110      	bne.n	800fbd0 <_dtoa_r+0xa20>
 800fbae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fbb2:	d029      	beq.n	800fc08 <_dtoa_r+0xa58>
 800fbb4:	9b08      	ldr	r3, [sp, #32]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dd02      	ble.n	800fbc0 <_dtoa_r+0xa10>
 800fbba:	9b02      	ldr	r3, [sp, #8]
 800fbbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fbc0:	9b00      	ldr	r3, [sp, #0]
 800fbc2:	f883 8000 	strb.w	r8, [r3]
 800fbc6:	e63f      	b.n	800f848 <_dtoa_r+0x698>
 800fbc8:	4628      	mov	r0, r5
 800fbca:	e7bb      	b.n	800fb44 <_dtoa_r+0x994>
 800fbcc:	2201      	movs	r2, #1
 800fbce:	e7e1      	b.n	800fb94 <_dtoa_r+0x9e4>
 800fbd0:	9b08      	ldr	r3, [sp, #32]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	db04      	blt.n	800fbe0 <_dtoa_r+0xa30>
 800fbd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fbdc:	430b      	orrs	r3, r1
 800fbde:	d120      	bne.n	800fc22 <_dtoa_r+0xa72>
 800fbe0:	2a00      	cmp	r2, #0
 800fbe2:	dded      	ble.n	800fbc0 <_dtoa_r+0xa10>
 800fbe4:	4649      	mov	r1, r9
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	4658      	mov	r0, fp
 800fbea:	f000 fbb3 	bl	8010354 <__lshift>
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4681      	mov	r9, r0
 800fbf2:	f000 fc1b 	bl	801042c <__mcmp>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	dc03      	bgt.n	800fc02 <_dtoa_r+0xa52>
 800fbfa:	d1e1      	bne.n	800fbc0 <_dtoa_r+0xa10>
 800fbfc:	f018 0f01 	tst.w	r8, #1
 800fc00:	d0de      	beq.n	800fbc0 <_dtoa_r+0xa10>
 800fc02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc06:	d1d8      	bne.n	800fbba <_dtoa_r+0xa0a>
 800fc08:	9a00      	ldr	r2, [sp, #0]
 800fc0a:	2339      	movs	r3, #57	@ 0x39
 800fc0c:	7013      	strb	r3, [r2, #0]
 800fc0e:	4633      	mov	r3, r6
 800fc10:	461e      	mov	r6, r3
 800fc12:	3b01      	subs	r3, #1
 800fc14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc18:	2a39      	cmp	r2, #57	@ 0x39
 800fc1a:	d052      	beq.n	800fcc2 <_dtoa_r+0xb12>
 800fc1c:	3201      	adds	r2, #1
 800fc1e:	701a      	strb	r2, [r3, #0]
 800fc20:	e612      	b.n	800f848 <_dtoa_r+0x698>
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	dd07      	ble.n	800fc36 <_dtoa_r+0xa86>
 800fc26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc2a:	d0ed      	beq.n	800fc08 <_dtoa_r+0xa58>
 800fc2c:	9a00      	ldr	r2, [sp, #0]
 800fc2e:	f108 0301 	add.w	r3, r8, #1
 800fc32:	7013      	strb	r3, [r2, #0]
 800fc34:	e608      	b.n	800f848 <_dtoa_r+0x698>
 800fc36:	9b07      	ldr	r3, [sp, #28]
 800fc38:	9a07      	ldr	r2, [sp, #28]
 800fc3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d028      	beq.n	800fc96 <_dtoa_r+0xae6>
 800fc44:	4649      	mov	r1, r9
 800fc46:	2300      	movs	r3, #0
 800fc48:	220a      	movs	r2, #10
 800fc4a:	4658      	mov	r0, fp
 800fc4c:	f000 f9d6 	bl	800fffc <__multadd>
 800fc50:	42af      	cmp	r7, r5
 800fc52:	4681      	mov	r9, r0
 800fc54:	f04f 0300 	mov.w	r3, #0
 800fc58:	f04f 020a 	mov.w	r2, #10
 800fc5c:	4639      	mov	r1, r7
 800fc5e:	4658      	mov	r0, fp
 800fc60:	d107      	bne.n	800fc72 <_dtoa_r+0xac2>
 800fc62:	f000 f9cb 	bl	800fffc <__multadd>
 800fc66:	4607      	mov	r7, r0
 800fc68:	4605      	mov	r5, r0
 800fc6a:	9b07      	ldr	r3, [sp, #28]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	9307      	str	r3, [sp, #28]
 800fc70:	e774      	b.n	800fb5c <_dtoa_r+0x9ac>
 800fc72:	f000 f9c3 	bl	800fffc <__multadd>
 800fc76:	4629      	mov	r1, r5
 800fc78:	4607      	mov	r7, r0
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	220a      	movs	r2, #10
 800fc7e:	4658      	mov	r0, fp
 800fc80:	f000 f9bc 	bl	800fffc <__multadd>
 800fc84:	4605      	mov	r5, r0
 800fc86:	e7f0      	b.n	800fc6a <_dtoa_r+0xaba>
 800fc88:	9b00      	ldr	r3, [sp, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bfcc      	ite	gt
 800fc8e:	461e      	movgt	r6, r3
 800fc90:	2601      	movle	r6, #1
 800fc92:	4456      	add	r6, sl
 800fc94:	2700      	movs	r7, #0
 800fc96:	4649      	mov	r1, r9
 800fc98:	2201      	movs	r2, #1
 800fc9a:	4658      	mov	r0, fp
 800fc9c:	f000 fb5a 	bl	8010354 <__lshift>
 800fca0:	4621      	mov	r1, r4
 800fca2:	4681      	mov	r9, r0
 800fca4:	f000 fbc2 	bl	801042c <__mcmp>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	dcb0      	bgt.n	800fc0e <_dtoa_r+0xa5e>
 800fcac:	d102      	bne.n	800fcb4 <_dtoa_r+0xb04>
 800fcae:	f018 0f01 	tst.w	r8, #1
 800fcb2:	d1ac      	bne.n	800fc0e <_dtoa_r+0xa5e>
 800fcb4:	4633      	mov	r3, r6
 800fcb6:	461e      	mov	r6, r3
 800fcb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcbc:	2a30      	cmp	r2, #48	@ 0x30
 800fcbe:	d0fa      	beq.n	800fcb6 <_dtoa_r+0xb06>
 800fcc0:	e5c2      	b.n	800f848 <_dtoa_r+0x698>
 800fcc2:	459a      	cmp	sl, r3
 800fcc4:	d1a4      	bne.n	800fc10 <_dtoa_r+0xa60>
 800fcc6:	9b04      	ldr	r3, [sp, #16]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	9304      	str	r3, [sp, #16]
 800fccc:	2331      	movs	r3, #49	@ 0x31
 800fcce:	f88a 3000 	strb.w	r3, [sl]
 800fcd2:	e5b9      	b.n	800f848 <_dtoa_r+0x698>
 800fcd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fd34 <_dtoa_r+0xb84>
 800fcda:	b11b      	cbz	r3, 800fce4 <_dtoa_r+0xb34>
 800fcdc:	f10a 0308 	add.w	r3, sl, #8
 800fce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	4650      	mov	r0, sl
 800fce6:	b019      	add	sp, #100	@ 0x64
 800fce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	f77f ae37 	ble.w	800f962 <_dtoa_r+0x7b2>
 800fcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcf8:	2001      	movs	r0, #1
 800fcfa:	e655      	b.n	800f9a8 <_dtoa_r+0x7f8>
 800fcfc:	9b00      	ldr	r3, [sp, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f77f aed6 	ble.w	800fab0 <_dtoa_r+0x900>
 800fd04:	4656      	mov	r6, sl
 800fd06:	4621      	mov	r1, r4
 800fd08:	4648      	mov	r0, r9
 800fd0a:	f7ff f9c6 	bl	800f09a <quorem>
 800fd0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fd12:	f806 8b01 	strb.w	r8, [r6], #1
 800fd16:	9b00      	ldr	r3, [sp, #0]
 800fd18:	eba6 020a 	sub.w	r2, r6, sl
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	ddb3      	ble.n	800fc88 <_dtoa_r+0xad8>
 800fd20:	4649      	mov	r1, r9
 800fd22:	2300      	movs	r3, #0
 800fd24:	220a      	movs	r2, #10
 800fd26:	4658      	mov	r0, fp
 800fd28:	f000 f968 	bl	800fffc <__multadd>
 800fd2c:	4681      	mov	r9, r0
 800fd2e:	e7ea      	b.n	800fd06 <_dtoa_r+0xb56>
 800fd30:	08011000 	.word	0x08011000
 800fd34:	08010f84 	.word	0x08010f84

0800fd38 <_free_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	2900      	cmp	r1, #0
 800fd3e:	d041      	beq.n	800fdc4 <_free_r+0x8c>
 800fd40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd44:	1f0c      	subs	r4, r1, #4
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	bfb8      	it	lt
 800fd4a:	18e4      	addlt	r4, r4, r3
 800fd4c:	f000 f8e8 	bl	800ff20 <__malloc_lock>
 800fd50:	4a1d      	ldr	r2, [pc, #116]	@ (800fdc8 <_free_r+0x90>)
 800fd52:	6813      	ldr	r3, [r2, #0]
 800fd54:	b933      	cbnz	r3, 800fd64 <_free_r+0x2c>
 800fd56:	6063      	str	r3, [r4, #4]
 800fd58:	6014      	str	r4, [r2, #0]
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd60:	f000 b8e4 	b.w	800ff2c <__malloc_unlock>
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	d908      	bls.n	800fd7a <_free_r+0x42>
 800fd68:	6820      	ldr	r0, [r4, #0]
 800fd6a:	1821      	adds	r1, r4, r0
 800fd6c:	428b      	cmp	r3, r1
 800fd6e:	bf01      	itttt	eq
 800fd70:	6819      	ldreq	r1, [r3, #0]
 800fd72:	685b      	ldreq	r3, [r3, #4]
 800fd74:	1809      	addeq	r1, r1, r0
 800fd76:	6021      	streq	r1, [r4, #0]
 800fd78:	e7ed      	b.n	800fd56 <_free_r+0x1e>
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	b10b      	cbz	r3, 800fd84 <_free_r+0x4c>
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	d9fa      	bls.n	800fd7a <_free_r+0x42>
 800fd84:	6811      	ldr	r1, [r2, #0]
 800fd86:	1850      	adds	r0, r2, r1
 800fd88:	42a0      	cmp	r0, r4
 800fd8a:	d10b      	bne.n	800fda4 <_free_r+0x6c>
 800fd8c:	6820      	ldr	r0, [r4, #0]
 800fd8e:	4401      	add	r1, r0
 800fd90:	1850      	adds	r0, r2, r1
 800fd92:	4283      	cmp	r3, r0
 800fd94:	6011      	str	r1, [r2, #0]
 800fd96:	d1e0      	bne.n	800fd5a <_free_r+0x22>
 800fd98:	6818      	ldr	r0, [r3, #0]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	6053      	str	r3, [r2, #4]
 800fd9e:	4408      	add	r0, r1
 800fda0:	6010      	str	r0, [r2, #0]
 800fda2:	e7da      	b.n	800fd5a <_free_r+0x22>
 800fda4:	d902      	bls.n	800fdac <_free_r+0x74>
 800fda6:	230c      	movs	r3, #12
 800fda8:	602b      	str	r3, [r5, #0]
 800fdaa:	e7d6      	b.n	800fd5a <_free_r+0x22>
 800fdac:	6820      	ldr	r0, [r4, #0]
 800fdae:	1821      	adds	r1, r4, r0
 800fdb0:	428b      	cmp	r3, r1
 800fdb2:	bf04      	itt	eq
 800fdb4:	6819      	ldreq	r1, [r3, #0]
 800fdb6:	685b      	ldreq	r3, [r3, #4]
 800fdb8:	6063      	str	r3, [r4, #4]
 800fdba:	bf04      	itt	eq
 800fdbc:	1809      	addeq	r1, r1, r0
 800fdbe:	6021      	streq	r1, [r4, #0]
 800fdc0:	6054      	str	r4, [r2, #4]
 800fdc2:	e7ca      	b.n	800fd5a <_free_r+0x22>
 800fdc4:	bd38      	pop	{r3, r4, r5, pc}
 800fdc6:	bf00      	nop
 800fdc8:	20002204 	.word	0x20002204

0800fdcc <malloc>:
 800fdcc:	4b02      	ldr	r3, [pc, #8]	@ (800fdd8 <malloc+0xc>)
 800fdce:	4601      	mov	r1, r0
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	f000 b825 	b.w	800fe20 <_malloc_r>
 800fdd6:	bf00      	nop
 800fdd8:	2000011c 	.word	0x2000011c

0800fddc <sbrk_aligned>:
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	4e0f      	ldr	r6, [pc, #60]	@ (800fe1c <sbrk_aligned+0x40>)
 800fde0:	460c      	mov	r4, r1
 800fde2:	6831      	ldr	r1, [r6, #0]
 800fde4:	4605      	mov	r5, r0
 800fde6:	b911      	cbnz	r1, 800fdee <sbrk_aligned+0x12>
 800fde8:	f000 fe9a 	bl	8010b20 <_sbrk_r>
 800fdec:	6030      	str	r0, [r6, #0]
 800fdee:	4621      	mov	r1, r4
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f000 fe95 	bl	8010b20 <_sbrk_r>
 800fdf6:	1c43      	adds	r3, r0, #1
 800fdf8:	d103      	bne.n	800fe02 <sbrk_aligned+0x26>
 800fdfa:	f04f 34ff 	mov.w	r4, #4294967295
 800fdfe:	4620      	mov	r0, r4
 800fe00:	bd70      	pop	{r4, r5, r6, pc}
 800fe02:	1cc4      	adds	r4, r0, #3
 800fe04:	f024 0403 	bic.w	r4, r4, #3
 800fe08:	42a0      	cmp	r0, r4
 800fe0a:	d0f8      	beq.n	800fdfe <sbrk_aligned+0x22>
 800fe0c:	1a21      	subs	r1, r4, r0
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f000 fe86 	bl	8010b20 <_sbrk_r>
 800fe14:	3001      	adds	r0, #1
 800fe16:	d1f2      	bne.n	800fdfe <sbrk_aligned+0x22>
 800fe18:	e7ef      	b.n	800fdfa <sbrk_aligned+0x1e>
 800fe1a:	bf00      	nop
 800fe1c:	20002200 	.word	0x20002200

0800fe20 <_malloc_r>:
 800fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	1ccd      	adds	r5, r1, #3
 800fe26:	f025 0503 	bic.w	r5, r5, #3
 800fe2a:	3508      	adds	r5, #8
 800fe2c:	2d0c      	cmp	r5, #12
 800fe2e:	bf38      	it	cc
 800fe30:	250c      	movcc	r5, #12
 800fe32:	2d00      	cmp	r5, #0
 800fe34:	4606      	mov	r6, r0
 800fe36:	db01      	blt.n	800fe3c <_malloc_r+0x1c>
 800fe38:	42a9      	cmp	r1, r5
 800fe3a:	d904      	bls.n	800fe46 <_malloc_r+0x26>
 800fe3c:	230c      	movs	r3, #12
 800fe3e:	6033      	str	r3, [r6, #0]
 800fe40:	2000      	movs	r0, #0
 800fe42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff1c <_malloc_r+0xfc>
 800fe4a:	f000 f869 	bl	800ff20 <__malloc_lock>
 800fe4e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe52:	461c      	mov	r4, r3
 800fe54:	bb44      	cbnz	r4, 800fea8 <_malloc_r+0x88>
 800fe56:	4629      	mov	r1, r5
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f7ff ffbf 	bl	800fddc <sbrk_aligned>
 800fe5e:	1c43      	adds	r3, r0, #1
 800fe60:	4604      	mov	r4, r0
 800fe62:	d158      	bne.n	800ff16 <_malloc_r+0xf6>
 800fe64:	f8d8 4000 	ldr.w	r4, [r8]
 800fe68:	4627      	mov	r7, r4
 800fe6a:	2f00      	cmp	r7, #0
 800fe6c:	d143      	bne.n	800fef6 <_malloc_r+0xd6>
 800fe6e:	2c00      	cmp	r4, #0
 800fe70:	d04b      	beq.n	800ff0a <_malloc_r+0xea>
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	4639      	mov	r1, r7
 800fe76:	4630      	mov	r0, r6
 800fe78:	eb04 0903 	add.w	r9, r4, r3
 800fe7c:	f000 fe50 	bl	8010b20 <_sbrk_r>
 800fe80:	4581      	cmp	r9, r0
 800fe82:	d142      	bne.n	800ff0a <_malloc_r+0xea>
 800fe84:	6821      	ldr	r1, [r4, #0]
 800fe86:	1a6d      	subs	r5, r5, r1
 800fe88:	4629      	mov	r1, r5
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f7ff ffa6 	bl	800fddc <sbrk_aligned>
 800fe90:	3001      	adds	r0, #1
 800fe92:	d03a      	beq.n	800ff0a <_malloc_r+0xea>
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	442b      	add	r3, r5
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe9e:	685a      	ldr	r2, [r3, #4]
 800fea0:	bb62      	cbnz	r2, 800fefc <_malloc_r+0xdc>
 800fea2:	f8c8 7000 	str.w	r7, [r8]
 800fea6:	e00f      	b.n	800fec8 <_malloc_r+0xa8>
 800fea8:	6822      	ldr	r2, [r4, #0]
 800feaa:	1b52      	subs	r2, r2, r5
 800feac:	d420      	bmi.n	800fef0 <_malloc_r+0xd0>
 800feae:	2a0b      	cmp	r2, #11
 800feb0:	d917      	bls.n	800fee2 <_malloc_r+0xc2>
 800feb2:	1961      	adds	r1, r4, r5
 800feb4:	42a3      	cmp	r3, r4
 800feb6:	6025      	str	r5, [r4, #0]
 800feb8:	bf18      	it	ne
 800feba:	6059      	strne	r1, [r3, #4]
 800febc:	6863      	ldr	r3, [r4, #4]
 800febe:	bf08      	it	eq
 800fec0:	f8c8 1000 	streq.w	r1, [r8]
 800fec4:	5162      	str	r2, [r4, r5]
 800fec6:	604b      	str	r3, [r1, #4]
 800fec8:	4630      	mov	r0, r6
 800feca:	f000 f82f 	bl	800ff2c <__malloc_unlock>
 800fece:	f104 000b 	add.w	r0, r4, #11
 800fed2:	1d23      	adds	r3, r4, #4
 800fed4:	f020 0007 	bic.w	r0, r0, #7
 800fed8:	1ac2      	subs	r2, r0, r3
 800feda:	bf1c      	itt	ne
 800fedc:	1a1b      	subne	r3, r3, r0
 800fede:	50a3      	strne	r3, [r4, r2]
 800fee0:	e7af      	b.n	800fe42 <_malloc_r+0x22>
 800fee2:	6862      	ldr	r2, [r4, #4]
 800fee4:	42a3      	cmp	r3, r4
 800fee6:	bf0c      	ite	eq
 800fee8:	f8c8 2000 	streq.w	r2, [r8]
 800feec:	605a      	strne	r2, [r3, #4]
 800feee:	e7eb      	b.n	800fec8 <_malloc_r+0xa8>
 800fef0:	4623      	mov	r3, r4
 800fef2:	6864      	ldr	r4, [r4, #4]
 800fef4:	e7ae      	b.n	800fe54 <_malloc_r+0x34>
 800fef6:	463c      	mov	r4, r7
 800fef8:	687f      	ldr	r7, [r7, #4]
 800fefa:	e7b6      	b.n	800fe6a <_malloc_r+0x4a>
 800fefc:	461a      	mov	r2, r3
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d1fb      	bne.n	800fefc <_malloc_r+0xdc>
 800ff04:	2300      	movs	r3, #0
 800ff06:	6053      	str	r3, [r2, #4]
 800ff08:	e7de      	b.n	800fec8 <_malloc_r+0xa8>
 800ff0a:	230c      	movs	r3, #12
 800ff0c:	6033      	str	r3, [r6, #0]
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f000 f80c 	bl	800ff2c <__malloc_unlock>
 800ff14:	e794      	b.n	800fe40 <_malloc_r+0x20>
 800ff16:	6005      	str	r5, [r0, #0]
 800ff18:	e7d6      	b.n	800fec8 <_malloc_r+0xa8>
 800ff1a:	bf00      	nop
 800ff1c:	20002204 	.word	0x20002204

0800ff20 <__malloc_lock>:
 800ff20:	4801      	ldr	r0, [pc, #4]	@ (800ff28 <__malloc_lock+0x8>)
 800ff22:	f7ff b8b8 	b.w	800f096 <__retarget_lock_acquire_recursive>
 800ff26:	bf00      	nop
 800ff28:	200021fc 	.word	0x200021fc

0800ff2c <__malloc_unlock>:
 800ff2c:	4801      	ldr	r0, [pc, #4]	@ (800ff34 <__malloc_unlock+0x8>)
 800ff2e:	f7ff b8b3 	b.w	800f098 <__retarget_lock_release_recursive>
 800ff32:	bf00      	nop
 800ff34:	200021fc 	.word	0x200021fc

0800ff38 <_Balloc>:
 800ff38:	b570      	push	{r4, r5, r6, lr}
 800ff3a:	69c6      	ldr	r6, [r0, #28]
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	460d      	mov	r5, r1
 800ff40:	b976      	cbnz	r6, 800ff60 <_Balloc+0x28>
 800ff42:	2010      	movs	r0, #16
 800ff44:	f7ff ff42 	bl	800fdcc <malloc>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	61e0      	str	r0, [r4, #28]
 800ff4c:	b920      	cbnz	r0, 800ff58 <_Balloc+0x20>
 800ff4e:	4b18      	ldr	r3, [pc, #96]	@ (800ffb0 <_Balloc+0x78>)
 800ff50:	4818      	ldr	r0, [pc, #96]	@ (800ffb4 <_Balloc+0x7c>)
 800ff52:	216b      	movs	r1, #107	@ 0x6b
 800ff54:	f000 fe02 	bl	8010b5c <__assert_func>
 800ff58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff5c:	6006      	str	r6, [r0, #0]
 800ff5e:	60c6      	str	r6, [r0, #12]
 800ff60:	69e6      	ldr	r6, [r4, #28]
 800ff62:	68f3      	ldr	r3, [r6, #12]
 800ff64:	b183      	cbz	r3, 800ff88 <_Balloc+0x50>
 800ff66:	69e3      	ldr	r3, [r4, #28]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff6e:	b9b8      	cbnz	r0, 800ffa0 <_Balloc+0x68>
 800ff70:	2101      	movs	r1, #1
 800ff72:	fa01 f605 	lsl.w	r6, r1, r5
 800ff76:	1d72      	adds	r2, r6, #5
 800ff78:	0092      	lsls	r2, r2, #2
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f000 fe0c 	bl	8010b98 <_calloc_r>
 800ff80:	b160      	cbz	r0, 800ff9c <_Balloc+0x64>
 800ff82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff86:	e00e      	b.n	800ffa6 <_Balloc+0x6e>
 800ff88:	2221      	movs	r2, #33	@ 0x21
 800ff8a:	2104      	movs	r1, #4
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 fe03 	bl	8010b98 <_calloc_r>
 800ff92:	69e3      	ldr	r3, [r4, #28]
 800ff94:	60f0      	str	r0, [r6, #12]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1e4      	bne.n	800ff66 <_Balloc+0x2e>
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	6802      	ldr	r2, [r0, #0]
 800ffa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffac:	e7f7      	b.n	800ff9e <_Balloc+0x66>
 800ffae:	bf00      	nop
 800ffb0:	08010f91 	.word	0x08010f91
 800ffb4:	08011011 	.word	0x08011011

0800ffb8 <_Bfree>:
 800ffb8:	b570      	push	{r4, r5, r6, lr}
 800ffba:	69c6      	ldr	r6, [r0, #28]
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	b976      	cbnz	r6, 800ffe0 <_Bfree+0x28>
 800ffc2:	2010      	movs	r0, #16
 800ffc4:	f7ff ff02 	bl	800fdcc <malloc>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	61e8      	str	r0, [r5, #28]
 800ffcc:	b920      	cbnz	r0, 800ffd8 <_Bfree+0x20>
 800ffce:	4b09      	ldr	r3, [pc, #36]	@ (800fff4 <_Bfree+0x3c>)
 800ffd0:	4809      	ldr	r0, [pc, #36]	@ (800fff8 <_Bfree+0x40>)
 800ffd2:	218f      	movs	r1, #143	@ 0x8f
 800ffd4:	f000 fdc2 	bl	8010b5c <__assert_func>
 800ffd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffdc:	6006      	str	r6, [r0, #0]
 800ffde:	60c6      	str	r6, [r0, #12]
 800ffe0:	b13c      	cbz	r4, 800fff2 <_Bfree+0x3a>
 800ffe2:	69eb      	ldr	r3, [r5, #28]
 800ffe4:	6862      	ldr	r2, [r4, #4]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffec:	6021      	str	r1, [r4, #0]
 800ffee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fff2:	bd70      	pop	{r4, r5, r6, pc}
 800fff4:	08010f91 	.word	0x08010f91
 800fff8:	08011011 	.word	0x08011011

0800fffc <__multadd>:
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	690d      	ldr	r5, [r1, #16]
 8010002:	4607      	mov	r7, r0
 8010004:	460c      	mov	r4, r1
 8010006:	461e      	mov	r6, r3
 8010008:	f101 0c14 	add.w	ip, r1, #20
 801000c:	2000      	movs	r0, #0
 801000e:	f8dc 3000 	ldr.w	r3, [ip]
 8010012:	b299      	uxth	r1, r3
 8010014:	fb02 6101 	mla	r1, r2, r1, r6
 8010018:	0c1e      	lsrs	r6, r3, #16
 801001a:	0c0b      	lsrs	r3, r1, #16
 801001c:	fb02 3306 	mla	r3, r2, r6, r3
 8010020:	b289      	uxth	r1, r1
 8010022:	3001      	adds	r0, #1
 8010024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010028:	4285      	cmp	r5, r0
 801002a:	f84c 1b04 	str.w	r1, [ip], #4
 801002e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010032:	dcec      	bgt.n	801000e <__multadd+0x12>
 8010034:	b30e      	cbz	r6, 801007a <__multadd+0x7e>
 8010036:	68a3      	ldr	r3, [r4, #8]
 8010038:	42ab      	cmp	r3, r5
 801003a:	dc19      	bgt.n	8010070 <__multadd+0x74>
 801003c:	6861      	ldr	r1, [r4, #4]
 801003e:	4638      	mov	r0, r7
 8010040:	3101      	adds	r1, #1
 8010042:	f7ff ff79 	bl	800ff38 <_Balloc>
 8010046:	4680      	mov	r8, r0
 8010048:	b928      	cbnz	r0, 8010056 <__multadd+0x5a>
 801004a:	4602      	mov	r2, r0
 801004c:	4b0c      	ldr	r3, [pc, #48]	@ (8010080 <__multadd+0x84>)
 801004e:	480d      	ldr	r0, [pc, #52]	@ (8010084 <__multadd+0x88>)
 8010050:	21ba      	movs	r1, #186	@ 0xba
 8010052:	f000 fd83 	bl	8010b5c <__assert_func>
 8010056:	6922      	ldr	r2, [r4, #16]
 8010058:	3202      	adds	r2, #2
 801005a:	f104 010c 	add.w	r1, r4, #12
 801005e:	0092      	lsls	r2, r2, #2
 8010060:	300c      	adds	r0, #12
 8010062:	f000 fd6d 	bl	8010b40 <memcpy>
 8010066:	4621      	mov	r1, r4
 8010068:	4638      	mov	r0, r7
 801006a:	f7ff ffa5 	bl	800ffb8 <_Bfree>
 801006e:	4644      	mov	r4, r8
 8010070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010074:	3501      	adds	r5, #1
 8010076:	615e      	str	r6, [r3, #20]
 8010078:	6125      	str	r5, [r4, #16]
 801007a:	4620      	mov	r0, r4
 801007c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010080:	08011000 	.word	0x08011000
 8010084:	08011011 	.word	0x08011011

08010088 <__hi0bits>:
 8010088:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801008c:	4603      	mov	r3, r0
 801008e:	bf36      	itet	cc
 8010090:	0403      	lslcc	r3, r0, #16
 8010092:	2000      	movcs	r0, #0
 8010094:	2010      	movcc	r0, #16
 8010096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801009a:	bf3c      	itt	cc
 801009c:	021b      	lslcc	r3, r3, #8
 801009e:	3008      	addcc	r0, #8
 80100a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100a4:	bf3c      	itt	cc
 80100a6:	011b      	lslcc	r3, r3, #4
 80100a8:	3004      	addcc	r0, #4
 80100aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100ae:	bf3c      	itt	cc
 80100b0:	009b      	lslcc	r3, r3, #2
 80100b2:	3002      	addcc	r0, #2
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	db05      	blt.n	80100c4 <__hi0bits+0x3c>
 80100b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80100bc:	f100 0001 	add.w	r0, r0, #1
 80100c0:	bf08      	it	eq
 80100c2:	2020      	moveq	r0, #32
 80100c4:	4770      	bx	lr

080100c6 <__lo0bits>:
 80100c6:	6803      	ldr	r3, [r0, #0]
 80100c8:	4602      	mov	r2, r0
 80100ca:	f013 0007 	ands.w	r0, r3, #7
 80100ce:	d00b      	beq.n	80100e8 <__lo0bits+0x22>
 80100d0:	07d9      	lsls	r1, r3, #31
 80100d2:	d421      	bmi.n	8010118 <__lo0bits+0x52>
 80100d4:	0798      	lsls	r0, r3, #30
 80100d6:	bf49      	itett	mi
 80100d8:	085b      	lsrmi	r3, r3, #1
 80100da:	089b      	lsrpl	r3, r3, #2
 80100dc:	2001      	movmi	r0, #1
 80100de:	6013      	strmi	r3, [r2, #0]
 80100e0:	bf5c      	itt	pl
 80100e2:	6013      	strpl	r3, [r2, #0]
 80100e4:	2002      	movpl	r0, #2
 80100e6:	4770      	bx	lr
 80100e8:	b299      	uxth	r1, r3
 80100ea:	b909      	cbnz	r1, 80100f0 <__lo0bits+0x2a>
 80100ec:	0c1b      	lsrs	r3, r3, #16
 80100ee:	2010      	movs	r0, #16
 80100f0:	b2d9      	uxtb	r1, r3
 80100f2:	b909      	cbnz	r1, 80100f8 <__lo0bits+0x32>
 80100f4:	3008      	adds	r0, #8
 80100f6:	0a1b      	lsrs	r3, r3, #8
 80100f8:	0719      	lsls	r1, r3, #28
 80100fa:	bf04      	itt	eq
 80100fc:	091b      	lsreq	r3, r3, #4
 80100fe:	3004      	addeq	r0, #4
 8010100:	0799      	lsls	r1, r3, #30
 8010102:	bf04      	itt	eq
 8010104:	089b      	lsreq	r3, r3, #2
 8010106:	3002      	addeq	r0, #2
 8010108:	07d9      	lsls	r1, r3, #31
 801010a:	d403      	bmi.n	8010114 <__lo0bits+0x4e>
 801010c:	085b      	lsrs	r3, r3, #1
 801010e:	f100 0001 	add.w	r0, r0, #1
 8010112:	d003      	beq.n	801011c <__lo0bits+0x56>
 8010114:	6013      	str	r3, [r2, #0]
 8010116:	4770      	bx	lr
 8010118:	2000      	movs	r0, #0
 801011a:	4770      	bx	lr
 801011c:	2020      	movs	r0, #32
 801011e:	4770      	bx	lr

08010120 <__i2b>:
 8010120:	b510      	push	{r4, lr}
 8010122:	460c      	mov	r4, r1
 8010124:	2101      	movs	r1, #1
 8010126:	f7ff ff07 	bl	800ff38 <_Balloc>
 801012a:	4602      	mov	r2, r0
 801012c:	b928      	cbnz	r0, 801013a <__i2b+0x1a>
 801012e:	4b05      	ldr	r3, [pc, #20]	@ (8010144 <__i2b+0x24>)
 8010130:	4805      	ldr	r0, [pc, #20]	@ (8010148 <__i2b+0x28>)
 8010132:	f240 1145 	movw	r1, #325	@ 0x145
 8010136:	f000 fd11 	bl	8010b5c <__assert_func>
 801013a:	2301      	movs	r3, #1
 801013c:	6144      	str	r4, [r0, #20]
 801013e:	6103      	str	r3, [r0, #16]
 8010140:	bd10      	pop	{r4, pc}
 8010142:	bf00      	nop
 8010144:	08011000 	.word	0x08011000
 8010148:	08011011 	.word	0x08011011

0801014c <__multiply>:
 801014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010150:	4614      	mov	r4, r2
 8010152:	690a      	ldr	r2, [r1, #16]
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	429a      	cmp	r2, r3
 8010158:	bfa8      	it	ge
 801015a:	4623      	movge	r3, r4
 801015c:	460f      	mov	r7, r1
 801015e:	bfa4      	itt	ge
 8010160:	460c      	movge	r4, r1
 8010162:	461f      	movge	r7, r3
 8010164:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010168:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801016c:	68a3      	ldr	r3, [r4, #8]
 801016e:	6861      	ldr	r1, [r4, #4]
 8010170:	eb0a 0609 	add.w	r6, sl, r9
 8010174:	42b3      	cmp	r3, r6
 8010176:	b085      	sub	sp, #20
 8010178:	bfb8      	it	lt
 801017a:	3101      	addlt	r1, #1
 801017c:	f7ff fedc 	bl	800ff38 <_Balloc>
 8010180:	b930      	cbnz	r0, 8010190 <__multiply+0x44>
 8010182:	4602      	mov	r2, r0
 8010184:	4b44      	ldr	r3, [pc, #272]	@ (8010298 <__multiply+0x14c>)
 8010186:	4845      	ldr	r0, [pc, #276]	@ (801029c <__multiply+0x150>)
 8010188:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801018c:	f000 fce6 	bl	8010b5c <__assert_func>
 8010190:	f100 0514 	add.w	r5, r0, #20
 8010194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010198:	462b      	mov	r3, r5
 801019a:	2200      	movs	r2, #0
 801019c:	4543      	cmp	r3, r8
 801019e:	d321      	bcc.n	80101e4 <__multiply+0x98>
 80101a0:	f107 0114 	add.w	r1, r7, #20
 80101a4:	f104 0214 	add.w	r2, r4, #20
 80101a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80101ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80101b0:	9302      	str	r3, [sp, #8]
 80101b2:	1b13      	subs	r3, r2, r4
 80101b4:	3b15      	subs	r3, #21
 80101b6:	f023 0303 	bic.w	r3, r3, #3
 80101ba:	3304      	adds	r3, #4
 80101bc:	f104 0715 	add.w	r7, r4, #21
 80101c0:	42ba      	cmp	r2, r7
 80101c2:	bf38      	it	cc
 80101c4:	2304      	movcc	r3, #4
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	9b02      	ldr	r3, [sp, #8]
 80101ca:	9103      	str	r1, [sp, #12]
 80101cc:	428b      	cmp	r3, r1
 80101ce:	d80c      	bhi.n	80101ea <__multiply+0x9e>
 80101d0:	2e00      	cmp	r6, #0
 80101d2:	dd03      	ble.n	80101dc <__multiply+0x90>
 80101d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d05b      	beq.n	8010294 <__multiply+0x148>
 80101dc:	6106      	str	r6, [r0, #16]
 80101de:	b005      	add	sp, #20
 80101e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e4:	f843 2b04 	str.w	r2, [r3], #4
 80101e8:	e7d8      	b.n	801019c <__multiply+0x50>
 80101ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80101ee:	f1ba 0f00 	cmp.w	sl, #0
 80101f2:	d024      	beq.n	801023e <__multiply+0xf2>
 80101f4:	f104 0e14 	add.w	lr, r4, #20
 80101f8:	46a9      	mov	r9, r5
 80101fa:	f04f 0c00 	mov.w	ip, #0
 80101fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010202:	f8d9 3000 	ldr.w	r3, [r9]
 8010206:	fa1f fb87 	uxth.w	fp, r7
 801020a:	b29b      	uxth	r3, r3
 801020c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010210:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010214:	f8d9 7000 	ldr.w	r7, [r9]
 8010218:	4463      	add	r3, ip
 801021a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801021e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010222:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010226:	b29b      	uxth	r3, r3
 8010228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801022c:	4572      	cmp	r2, lr
 801022e:	f849 3b04 	str.w	r3, [r9], #4
 8010232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010236:	d8e2      	bhi.n	80101fe <__multiply+0xb2>
 8010238:	9b01      	ldr	r3, [sp, #4]
 801023a:	f845 c003 	str.w	ip, [r5, r3]
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010244:	3104      	adds	r1, #4
 8010246:	f1b9 0f00 	cmp.w	r9, #0
 801024a:	d021      	beq.n	8010290 <__multiply+0x144>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	f104 0c14 	add.w	ip, r4, #20
 8010252:	46ae      	mov	lr, r5
 8010254:	f04f 0a00 	mov.w	sl, #0
 8010258:	f8bc b000 	ldrh.w	fp, [ip]
 801025c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010260:	fb09 770b 	mla	r7, r9, fp, r7
 8010264:	4457      	add	r7, sl
 8010266:	b29b      	uxth	r3, r3
 8010268:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801026c:	f84e 3b04 	str.w	r3, [lr], #4
 8010270:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010278:	f8be 3000 	ldrh.w	r3, [lr]
 801027c:	fb09 330a 	mla	r3, r9, sl, r3
 8010280:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010284:	4562      	cmp	r2, ip
 8010286:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801028a:	d8e5      	bhi.n	8010258 <__multiply+0x10c>
 801028c:	9f01      	ldr	r7, [sp, #4]
 801028e:	51eb      	str	r3, [r5, r7]
 8010290:	3504      	adds	r5, #4
 8010292:	e799      	b.n	80101c8 <__multiply+0x7c>
 8010294:	3e01      	subs	r6, #1
 8010296:	e79b      	b.n	80101d0 <__multiply+0x84>
 8010298:	08011000 	.word	0x08011000
 801029c:	08011011 	.word	0x08011011

080102a0 <__pow5mult>:
 80102a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102a4:	4615      	mov	r5, r2
 80102a6:	f012 0203 	ands.w	r2, r2, #3
 80102aa:	4607      	mov	r7, r0
 80102ac:	460e      	mov	r6, r1
 80102ae:	d007      	beq.n	80102c0 <__pow5mult+0x20>
 80102b0:	4c25      	ldr	r4, [pc, #148]	@ (8010348 <__pow5mult+0xa8>)
 80102b2:	3a01      	subs	r2, #1
 80102b4:	2300      	movs	r3, #0
 80102b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80102ba:	f7ff fe9f 	bl	800fffc <__multadd>
 80102be:	4606      	mov	r6, r0
 80102c0:	10ad      	asrs	r5, r5, #2
 80102c2:	d03d      	beq.n	8010340 <__pow5mult+0xa0>
 80102c4:	69fc      	ldr	r4, [r7, #28]
 80102c6:	b97c      	cbnz	r4, 80102e8 <__pow5mult+0x48>
 80102c8:	2010      	movs	r0, #16
 80102ca:	f7ff fd7f 	bl	800fdcc <malloc>
 80102ce:	4602      	mov	r2, r0
 80102d0:	61f8      	str	r0, [r7, #28]
 80102d2:	b928      	cbnz	r0, 80102e0 <__pow5mult+0x40>
 80102d4:	4b1d      	ldr	r3, [pc, #116]	@ (801034c <__pow5mult+0xac>)
 80102d6:	481e      	ldr	r0, [pc, #120]	@ (8010350 <__pow5mult+0xb0>)
 80102d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80102dc:	f000 fc3e 	bl	8010b5c <__assert_func>
 80102e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102e4:	6004      	str	r4, [r0, #0]
 80102e6:	60c4      	str	r4, [r0, #12]
 80102e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80102ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102f0:	b94c      	cbnz	r4, 8010306 <__pow5mult+0x66>
 80102f2:	f240 2171 	movw	r1, #625	@ 0x271
 80102f6:	4638      	mov	r0, r7
 80102f8:	f7ff ff12 	bl	8010120 <__i2b>
 80102fc:	2300      	movs	r3, #0
 80102fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010302:	4604      	mov	r4, r0
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	f04f 0900 	mov.w	r9, #0
 801030a:	07eb      	lsls	r3, r5, #31
 801030c:	d50a      	bpl.n	8010324 <__pow5mult+0x84>
 801030e:	4631      	mov	r1, r6
 8010310:	4622      	mov	r2, r4
 8010312:	4638      	mov	r0, r7
 8010314:	f7ff ff1a 	bl	801014c <__multiply>
 8010318:	4631      	mov	r1, r6
 801031a:	4680      	mov	r8, r0
 801031c:	4638      	mov	r0, r7
 801031e:	f7ff fe4b 	bl	800ffb8 <_Bfree>
 8010322:	4646      	mov	r6, r8
 8010324:	106d      	asrs	r5, r5, #1
 8010326:	d00b      	beq.n	8010340 <__pow5mult+0xa0>
 8010328:	6820      	ldr	r0, [r4, #0]
 801032a:	b938      	cbnz	r0, 801033c <__pow5mult+0x9c>
 801032c:	4622      	mov	r2, r4
 801032e:	4621      	mov	r1, r4
 8010330:	4638      	mov	r0, r7
 8010332:	f7ff ff0b 	bl	801014c <__multiply>
 8010336:	6020      	str	r0, [r4, #0]
 8010338:	f8c0 9000 	str.w	r9, [r0]
 801033c:	4604      	mov	r4, r0
 801033e:	e7e4      	b.n	801030a <__pow5mult+0x6a>
 8010340:	4630      	mov	r0, r6
 8010342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010346:	bf00      	nop
 8010348:	0801106c 	.word	0x0801106c
 801034c:	08010f91 	.word	0x08010f91
 8010350:	08011011 	.word	0x08011011

08010354 <__lshift>:
 8010354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010358:	460c      	mov	r4, r1
 801035a:	6849      	ldr	r1, [r1, #4]
 801035c:	6923      	ldr	r3, [r4, #16]
 801035e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010362:	68a3      	ldr	r3, [r4, #8]
 8010364:	4607      	mov	r7, r0
 8010366:	4691      	mov	r9, r2
 8010368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801036c:	f108 0601 	add.w	r6, r8, #1
 8010370:	42b3      	cmp	r3, r6
 8010372:	db0b      	blt.n	801038c <__lshift+0x38>
 8010374:	4638      	mov	r0, r7
 8010376:	f7ff fddf 	bl	800ff38 <_Balloc>
 801037a:	4605      	mov	r5, r0
 801037c:	b948      	cbnz	r0, 8010392 <__lshift+0x3e>
 801037e:	4602      	mov	r2, r0
 8010380:	4b28      	ldr	r3, [pc, #160]	@ (8010424 <__lshift+0xd0>)
 8010382:	4829      	ldr	r0, [pc, #164]	@ (8010428 <__lshift+0xd4>)
 8010384:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010388:	f000 fbe8 	bl	8010b5c <__assert_func>
 801038c:	3101      	adds	r1, #1
 801038e:	005b      	lsls	r3, r3, #1
 8010390:	e7ee      	b.n	8010370 <__lshift+0x1c>
 8010392:	2300      	movs	r3, #0
 8010394:	f100 0114 	add.w	r1, r0, #20
 8010398:	f100 0210 	add.w	r2, r0, #16
 801039c:	4618      	mov	r0, r3
 801039e:	4553      	cmp	r3, sl
 80103a0:	db33      	blt.n	801040a <__lshift+0xb6>
 80103a2:	6920      	ldr	r0, [r4, #16]
 80103a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80103a8:	f104 0314 	add.w	r3, r4, #20
 80103ac:	f019 091f 	ands.w	r9, r9, #31
 80103b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80103b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80103b8:	d02b      	beq.n	8010412 <__lshift+0xbe>
 80103ba:	f1c9 0e20 	rsb	lr, r9, #32
 80103be:	468a      	mov	sl, r1
 80103c0:	2200      	movs	r2, #0
 80103c2:	6818      	ldr	r0, [r3, #0]
 80103c4:	fa00 f009 	lsl.w	r0, r0, r9
 80103c8:	4310      	orrs	r0, r2
 80103ca:	f84a 0b04 	str.w	r0, [sl], #4
 80103ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80103d2:	459c      	cmp	ip, r3
 80103d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80103d8:	d8f3      	bhi.n	80103c2 <__lshift+0x6e>
 80103da:	ebac 0304 	sub.w	r3, ip, r4
 80103de:	3b15      	subs	r3, #21
 80103e0:	f023 0303 	bic.w	r3, r3, #3
 80103e4:	3304      	adds	r3, #4
 80103e6:	f104 0015 	add.w	r0, r4, #21
 80103ea:	4584      	cmp	ip, r0
 80103ec:	bf38      	it	cc
 80103ee:	2304      	movcc	r3, #4
 80103f0:	50ca      	str	r2, [r1, r3]
 80103f2:	b10a      	cbz	r2, 80103f8 <__lshift+0xa4>
 80103f4:	f108 0602 	add.w	r6, r8, #2
 80103f8:	3e01      	subs	r6, #1
 80103fa:	4638      	mov	r0, r7
 80103fc:	612e      	str	r6, [r5, #16]
 80103fe:	4621      	mov	r1, r4
 8010400:	f7ff fdda 	bl	800ffb8 <_Bfree>
 8010404:	4628      	mov	r0, r5
 8010406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801040a:	f842 0f04 	str.w	r0, [r2, #4]!
 801040e:	3301      	adds	r3, #1
 8010410:	e7c5      	b.n	801039e <__lshift+0x4a>
 8010412:	3904      	subs	r1, #4
 8010414:	f853 2b04 	ldr.w	r2, [r3], #4
 8010418:	f841 2f04 	str.w	r2, [r1, #4]!
 801041c:	459c      	cmp	ip, r3
 801041e:	d8f9      	bhi.n	8010414 <__lshift+0xc0>
 8010420:	e7ea      	b.n	80103f8 <__lshift+0xa4>
 8010422:	bf00      	nop
 8010424:	08011000 	.word	0x08011000
 8010428:	08011011 	.word	0x08011011

0801042c <__mcmp>:
 801042c:	690a      	ldr	r2, [r1, #16]
 801042e:	4603      	mov	r3, r0
 8010430:	6900      	ldr	r0, [r0, #16]
 8010432:	1a80      	subs	r0, r0, r2
 8010434:	b530      	push	{r4, r5, lr}
 8010436:	d10e      	bne.n	8010456 <__mcmp+0x2a>
 8010438:	3314      	adds	r3, #20
 801043a:	3114      	adds	r1, #20
 801043c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010440:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801044c:	4295      	cmp	r5, r2
 801044e:	d003      	beq.n	8010458 <__mcmp+0x2c>
 8010450:	d205      	bcs.n	801045e <__mcmp+0x32>
 8010452:	f04f 30ff 	mov.w	r0, #4294967295
 8010456:	bd30      	pop	{r4, r5, pc}
 8010458:	42a3      	cmp	r3, r4
 801045a:	d3f3      	bcc.n	8010444 <__mcmp+0x18>
 801045c:	e7fb      	b.n	8010456 <__mcmp+0x2a>
 801045e:	2001      	movs	r0, #1
 8010460:	e7f9      	b.n	8010456 <__mcmp+0x2a>
	...

08010464 <__mdiff>:
 8010464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010468:	4689      	mov	r9, r1
 801046a:	4606      	mov	r6, r0
 801046c:	4611      	mov	r1, r2
 801046e:	4648      	mov	r0, r9
 8010470:	4614      	mov	r4, r2
 8010472:	f7ff ffdb 	bl	801042c <__mcmp>
 8010476:	1e05      	subs	r5, r0, #0
 8010478:	d112      	bne.n	80104a0 <__mdiff+0x3c>
 801047a:	4629      	mov	r1, r5
 801047c:	4630      	mov	r0, r6
 801047e:	f7ff fd5b 	bl	800ff38 <_Balloc>
 8010482:	4602      	mov	r2, r0
 8010484:	b928      	cbnz	r0, 8010492 <__mdiff+0x2e>
 8010486:	4b3f      	ldr	r3, [pc, #252]	@ (8010584 <__mdiff+0x120>)
 8010488:	f240 2137 	movw	r1, #567	@ 0x237
 801048c:	483e      	ldr	r0, [pc, #248]	@ (8010588 <__mdiff+0x124>)
 801048e:	f000 fb65 	bl	8010b5c <__assert_func>
 8010492:	2301      	movs	r3, #1
 8010494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010498:	4610      	mov	r0, r2
 801049a:	b003      	add	sp, #12
 801049c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a0:	bfbc      	itt	lt
 80104a2:	464b      	movlt	r3, r9
 80104a4:	46a1      	movlt	r9, r4
 80104a6:	4630      	mov	r0, r6
 80104a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80104ac:	bfba      	itte	lt
 80104ae:	461c      	movlt	r4, r3
 80104b0:	2501      	movlt	r5, #1
 80104b2:	2500      	movge	r5, #0
 80104b4:	f7ff fd40 	bl	800ff38 <_Balloc>
 80104b8:	4602      	mov	r2, r0
 80104ba:	b918      	cbnz	r0, 80104c4 <__mdiff+0x60>
 80104bc:	4b31      	ldr	r3, [pc, #196]	@ (8010584 <__mdiff+0x120>)
 80104be:	f240 2145 	movw	r1, #581	@ 0x245
 80104c2:	e7e3      	b.n	801048c <__mdiff+0x28>
 80104c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80104c8:	6926      	ldr	r6, [r4, #16]
 80104ca:	60c5      	str	r5, [r0, #12]
 80104cc:	f109 0310 	add.w	r3, r9, #16
 80104d0:	f109 0514 	add.w	r5, r9, #20
 80104d4:	f104 0e14 	add.w	lr, r4, #20
 80104d8:	f100 0b14 	add.w	fp, r0, #20
 80104dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80104e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80104e4:	9301      	str	r3, [sp, #4]
 80104e6:	46d9      	mov	r9, fp
 80104e8:	f04f 0c00 	mov.w	ip, #0
 80104ec:	9b01      	ldr	r3, [sp, #4]
 80104ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80104f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	fa1f f38a 	uxth.w	r3, sl
 80104fc:	4619      	mov	r1, r3
 80104fe:	b283      	uxth	r3, r0
 8010500:	1acb      	subs	r3, r1, r3
 8010502:	0c00      	lsrs	r0, r0, #16
 8010504:	4463      	add	r3, ip
 8010506:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801050a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801050e:	b29b      	uxth	r3, r3
 8010510:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010514:	4576      	cmp	r6, lr
 8010516:	f849 3b04 	str.w	r3, [r9], #4
 801051a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801051e:	d8e5      	bhi.n	80104ec <__mdiff+0x88>
 8010520:	1b33      	subs	r3, r6, r4
 8010522:	3b15      	subs	r3, #21
 8010524:	f023 0303 	bic.w	r3, r3, #3
 8010528:	3415      	adds	r4, #21
 801052a:	3304      	adds	r3, #4
 801052c:	42a6      	cmp	r6, r4
 801052e:	bf38      	it	cc
 8010530:	2304      	movcc	r3, #4
 8010532:	441d      	add	r5, r3
 8010534:	445b      	add	r3, fp
 8010536:	461e      	mov	r6, r3
 8010538:	462c      	mov	r4, r5
 801053a:	4544      	cmp	r4, r8
 801053c:	d30e      	bcc.n	801055c <__mdiff+0xf8>
 801053e:	f108 0103 	add.w	r1, r8, #3
 8010542:	1b49      	subs	r1, r1, r5
 8010544:	f021 0103 	bic.w	r1, r1, #3
 8010548:	3d03      	subs	r5, #3
 801054a:	45a8      	cmp	r8, r5
 801054c:	bf38      	it	cc
 801054e:	2100      	movcc	r1, #0
 8010550:	440b      	add	r3, r1
 8010552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010556:	b191      	cbz	r1, 801057e <__mdiff+0x11a>
 8010558:	6117      	str	r7, [r2, #16]
 801055a:	e79d      	b.n	8010498 <__mdiff+0x34>
 801055c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010560:	46e6      	mov	lr, ip
 8010562:	0c08      	lsrs	r0, r1, #16
 8010564:	fa1c fc81 	uxtah	ip, ip, r1
 8010568:	4471      	add	r1, lr
 801056a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801056e:	b289      	uxth	r1, r1
 8010570:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010574:	f846 1b04 	str.w	r1, [r6], #4
 8010578:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801057c:	e7dd      	b.n	801053a <__mdiff+0xd6>
 801057e:	3f01      	subs	r7, #1
 8010580:	e7e7      	b.n	8010552 <__mdiff+0xee>
 8010582:	bf00      	nop
 8010584:	08011000 	.word	0x08011000
 8010588:	08011011 	.word	0x08011011

0801058c <__d2b>:
 801058c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010590:	460f      	mov	r7, r1
 8010592:	2101      	movs	r1, #1
 8010594:	ec59 8b10 	vmov	r8, r9, d0
 8010598:	4616      	mov	r6, r2
 801059a:	f7ff fccd 	bl	800ff38 <_Balloc>
 801059e:	4604      	mov	r4, r0
 80105a0:	b930      	cbnz	r0, 80105b0 <__d2b+0x24>
 80105a2:	4602      	mov	r2, r0
 80105a4:	4b23      	ldr	r3, [pc, #140]	@ (8010634 <__d2b+0xa8>)
 80105a6:	4824      	ldr	r0, [pc, #144]	@ (8010638 <__d2b+0xac>)
 80105a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80105ac:	f000 fad6 	bl	8010b5c <__assert_func>
 80105b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80105b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105b8:	b10d      	cbz	r5, 80105be <__d2b+0x32>
 80105ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105be:	9301      	str	r3, [sp, #4]
 80105c0:	f1b8 0300 	subs.w	r3, r8, #0
 80105c4:	d023      	beq.n	801060e <__d2b+0x82>
 80105c6:	4668      	mov	r0, sp
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	f7ff fd7c 	bl	80100c6 <__lo0bits>
 80105ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105d2:	b1d0      	cbz	r0, 801060a <__d2b+0x7e>
 80105d4:	f1c0 0320 	rsb	r3, r0, #32
 80105d8:	fa02 f303 	lsl.w	r3, r2, r3
 80105dc:	430b      	orrs	r3, r1
 80105de:	40c2      	lsrs	r2, r0
 80105e0:	6163      	str	r3, [r4, #20]
 80105e2:	9201      	str	r2, [sp, #4]
 80105e4:	9b01      	ldr	r3, [sp, #4]
 80105e6:	61a3      	str	r3, [r4, #24]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bf0c      	ite	eq
 80105ec:	2201      	moveq	r2, #1
 80105ee:	2202      	movne	r2, #2
 80105f0:	6122      	str	r2, [r4, #16]
 80105f2:	b1a5      	cbz	r5, 801061e <__d2b+0x92>
 80105f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80105f8:	4405      	add	r5, r0
 80105fa:	603d      	str	r5, [r7, #0]
 80105fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010600:	6030      	str	r0, [r6, #0]
 8010602:	4620      	mov	r0, r4
 8010604:	b003      	add	sp, #12
 8010606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801060a:	6161      	str	r1, [r4, #20]
 801060c:	e7ea      	b.n	80105e4 <__d2b+0x58>
 801060e:	a801      	add	r0, sp, #4
 8010610:	f7ff fd59 	bl	80100c6 <__lo0bits>
 8010614:	9b01      	ldr	r3, [sp, #4]
 8010616:	6163      	str	r3, [r4, #20]
 8010618:	3020      	adds	r0, #32
 801061a:	2201      	movs	r2, #1
 801061c:	e7e8      	b.n	80105f0 <__d2b+0x64>
 801061e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010622:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010626:	6038      	str	r0, [r7, #0]
 8010628:	6918      	ldr	r0, [r3, #16]
 801062a:	f7ff fd2d 	bl	8010088 <__hi0bits>
 801062e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010632:	e7e5      	b.n	8010600 <__d2b+0x74>
 8010634:	08011000 	.word	0x08011000
 8010638:	08011011 	.word	0x08011011

0801063c <__sfputc_r>:
 801063c:	6893      	ldr	r3, [r2, #8]
 801063e:	3b01      	subs	r3, #1
 8010640:	2b00      	cmp	r3, #0
 8010642:	b410      	push	{r4}
 8010644:	6093      	str	r3, [r2, #8]
 8010646:	da08      	bge.n	801065a <__sfputc_r+0x1e>
 8010648:	6994      	ldr	r4, [r2, #24]
 801064a:	42a3      	cmp	r3, r4
 801064c:	db01      	blt.n	8010652 <__sfputc_r+0x16>
 801064e:	290a      	cmp	r1, #10
 8010650:	d103      	bne.n	801065a <__sfputc_r+0x1e>
 8010652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010656:	f7fe bc0c 	b.w	800ee72 <__swbuf_r>
 801065a:	6813      	ldr	r3, [r2, #0]
 801065c:	1c58      	adds	r0, r3, #1
 801065e:	6010      	str	r0, [r2, #0]
 8010660:	7019      	strb	r1, [r3, #0]
 8010662:	4608      	mov	r0, r1
 8010664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010668:	4770      	bx	lr

0801066a <__sfputs_r>:
 801066a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066c:	4606      	mov	r6, r0
 801066e:	460f      	mov	r7, r1
 8010670:	4614      	mov	r4, r2
 8010672:	18d5      	adds	r5, r2, r3
 8010674:	42ac      	cmp	r4, r5
 8010676:	d101      	bne.n	801067c <__sfputs_r+0x12>
 8010678:	2000      	movs	r0, #0
 801067a:	e007      	b.n	801068c <__sfputs_r+0x22>
 801067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010680:	463a      	mov	r2, r7
 8010682:	4630      	mov	r0, r6
 8010684:	f7ff ffda 	bl	801063c <__sfputc_r>
 8010688:	1c43      	adds	r3, r0, #1
 801068a:	d1f3      	bne.n	8010674 <__sfputs_r+0xa>
 801068c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010690 <_vfiprintf_r>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	460d      	mov	r5, r1
 8010696:	b09d      	sub	sp, #116	@ 0x74
 8010698:	4614      	mov	r4, r2
 801069a:	4698      	mov	r8, r3
 801069c:	4606      	mov	r6, r0
 801069e:	b118      	cbz	r0, 80106a8 <_vfiprintf_r+0x18>
 80106a0:	6a03      	ldr	r3, [r0, #32]
 80106a2:	b90b      	cbnz	r3, 80106a8 <_vfiprintf_r+0x18>
 80106a4:	f7fe fafc 	bl	800eca0 <__sinit>
 80106a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106aa:	07d9      	lsls	r1, r3, #31
 80106ac:	d405      	bmi.n	80106ba <_vfiprintf_r+0x2a>
 80106ae:	89ab      	ldrh	r3, [r5, #12]
 80106b0:	059a      	lsls	r2, r3, #22
 80106b2:	d402      	bmi.n	80106ba <_vfiprintf_r+0x2a>
 80106b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106b6:	f7fe fcee 	bl	800f096 <__retarget_lock_acquire_recursive>
 80106ba:	89ab      	ldrh	r3, [r5, #12]
 80106bc:	071b      	lsls	r3, r3, #28
 80106be:	d501      	bpl.n	80106c4 <_vfiprintf_r+0x34>
 80106c0:	692b      	ldr	r3, [r5, #16]
 80106c2:	b99b      	cbnz	r3, 80106ec <_vfiprintf_r+0x5c>
 80106c4:	4629      	mov	r1, r5
 80106c6:	4630      	mov	r0, r6
 80106c8:	f7fe fc12 	bl	800eef0 <__swsetup_r>
 80106cc:	b170      	cbz	r0, 80106ec <_vfiprintf_r+0x5c>
 80106ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106d0:	07dc      	lsls	r4, r3, #31
 80106d2:	d504      	bpl.n	80106de <_vfiprintf_r+0x4e>
 80106d4:	f04f 30ff 	mov.w	r0, #4294967295
 80106d8:	b01d      	add	sp, #116	@ 0x74
 80106da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106de:	89ab      	ldrh	r3, [r5, #12]
 80106e0:	0598      	lsls	r0, r3, #22
 80106e2:	d4f7      	bmi.n	80106d4 <_vfiprintf_r+0x44>
 80106e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106e6:	f7fe fcd7 	bl	800f098 <__retarget_lock_release_recursive>
 80106ea:	e7f3      	b.n	80106d4 <_vfiprintf_r+0x44>
 80106ec:	2300      	movs	r3, #0
 80106ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f0:	2320      	movs	r3, #32
 80106f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80106fa:	2330      	movs	r3, #48	@ 0x30
 80106fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80108ac <_vfiprintf_r+0x21c>
 8010700:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010704:	f04f 0901 	mov.w	r9, #1
 8010708:	4623      	mov	r3, r4
 801070a:	469a      	mov	sl, r3
 801070c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010710:	b10a      	cbz	r2, 8010716 <_vfiprintf_r+0x86>
 8010712:	2a25      	cmp	r2, #37	@ 0x25
 8010714:	d1f9      	bne.n	801070a <_vfiprintf_r+0x7a>
 8010716:	ebba 0b04 	subs.w	fp, sl, r4
 801071a:	d00b      	beq.n	8010734 <_vfiprintf_r+0xa4>
 801071c:	465b      	mov	r3, fp
 801071e:	4622      	mov	r2, r4
 8010720:	4629      	mov	r1, r5
 8010722:	4630      	mov	r0, r6
 8010724:	f7ff ffa1 	bl	801066a <__sfputs_r>
 8010728:	3001      	adds	r0, #1
 801072a:	f000 80a7 	beq.w	801087c <_vfiprintf_r+0x1ec>
 801072e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010730:	445a      	add	r2, fp
 8010732:	9209      	str	r2, [sp, #36]	@ 0x24
 8010734:	f89a 3000 	ldrb.w	r3, [sl]
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 809f 	beq.w	801087c <_vfiprintf_r+0x1ec>
 801073e:	2300      	movs	r3, #0
 8010740:	f04f 32ff 	mov.w	r2, #4294967295
 8010744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010748:	f10a 0a01 	add.w	sl, sl, #1
 801074c:	9304      	str	r3, [sp, #16]
 801074e:	9307      	str	r3, [sp, #28]
 8010750:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010754:	931a      	str	r3, [sp, #104]	@ 0x68
 8010756:	4654      	mov	r4, sl
 8010758:	2205      	movs	r2, #5
 801075a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801075e:	4853      	ldr	r0, [pc, #332]	@ (80108ac <_vfiprintf_r+0x21c>)
 8010760:	f7ef fd3e 	bl	80001e0 <memchr>
 8010764:	9a04      	ldr	r2, [sp, #16]
 8010766:	b9d8      	cbnz	r0, 80107a0 <_vfiprintf_r+0x110>
 8010768:	06d1      	lsls	r1, r2, #27
 801076a:	bf44      	itt	mi
 801076c:	2320      	movmi	r3, #32
 801076e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010772:	0713      	lsls	r3, r2, #28
 8010774:	bf44      	itt	mi
 8010776:	232b      	movmi	r3, #43	@ 0x2b
 8010778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801077c:	f89a 3000 	ldrb.w	r3, [sl]
 8010780:	2b2a      	cmp	r3, #42	@ 0x2a
 8010782:	d015      	beq.n	80107b0 <_vfiprintf_r+0x120>
 8010784:	9a07      	ldr	r2, [sp, #28]
 8010786:	4654      	mov	r4, sl
 8010788:	2000      	movs	r0, #0
 801078a:	f04f 0c0a 	mov.w	ip, #10
 801078e:	4621      	mov	r1, r4
 8010790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010794:	3b30      	subs	r3, #48	@ 0x30
 8010796:	2b09      	cmp	r3, #9
 8010798:	d94b      	bls.n	8010832 <_vfiprintf_r+0x1a2>
 801079a:	b1b0      	cbz	r0, 80107ca <_vfiprintf_r+0x13a>
 801079c:	9207      	str	r2, [sp, #28]
 801079e:	e014      	b.n	80107ca <_vfiprintf_r+0x13a>
 80107a0:	eba0 0308 	sub.w	r3, r0, r8
 80107a4:	fa09 f303 	lsl.w	r3, r9, r3
 80107a8:	4313      	orrs	r3, r2
 80107aa:	9304      	str	r3, [sp, #16]
 80107ac:	46a2      	mov	sl, r4
 80107ae:	e7d2      	b.n	8010756 <_vfiprintf_r+0xc6>
 80107b0:	9b03      	ldr	r3, [sp, #12]
 80107b2:	1d19      	adds	r1, r3, #4
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	9103      	str	r1, [sp, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	bfbb      	ittet	lt
 80107bc:	425b      	neglt	r3, r3
 80107be:	f042 0202 	orrlt.w	r2, r2, #2
 80107c2:	9307      	strge	r3, [sp, #28]
 80107c4:	9307      	strlt	r3, [sp, #28]
 80107c6:	bfb8      	it	lt
 80107c8:	9204      	strlt	r2, [sp, #16]
 80107ca:	7823      	ldrb	r3, [r4, #0]
 80107cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80107ce:	d10a      	bne.n	80107e6 <_vfiprintf_r+0x156>
 80107d0:	7863      	ldrb	r3, [r4, #1]
 80107d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80107d4:	d132      	bne.n	801083c <_vfiprintf_r+0x1ac>
 80107d6:	9b03      	ldr	r3, [sp, #12]
 80107d8:	1d1a      	adds	r2, r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	9203      	str	r2, [sp, #12]
 80107de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107e2:	3402      	adds	r4, #2
 80107e4:	9305      	str	r3, [sp, #20]
 80107e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108bc <_vfiprintf_r+0x22c>
 80107ea:	7821      	ldrb	r1, [r4, #0]
 80107ec:	2203      	movs	r2, #3
 80107ee:	4650      	mov	r0, sl
 80107f0:	f7ef fcf6 	bl	80001e0 <memchr>
 80107f4:	b138      	cbz	r0, 8010806 <_vfiprintf_r+0x176>
 80107f6:	9b04      	ldr	r3, [sp, #16]
 80107f8:	eba0 000a 	sub.w	r0, r0, sl
 80107fc:	2240      	movs	r2, #64	@ 0x40
 80107fe:	4082      	lsls	r2, r0
 8010800:	4313      	orrs	r3, r2
 8010802:	3401      	adds	r4, #1
 8010804:	9304      	str	r3, [sp, #16]
 8010806:	f814 1b01 	ldrb.w	r1, [r4], #1
 801080a:	4829      	ldr	r0, [pc, #164]	@ (80108b0 <_vfiprintf_r+0x220>)
 801080c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010810:	2206      	movs	r2, #6
 8010812:	f7ef fce5 	bl	80001e0 <memchr>
 8010816:	2800      	cmp	r0, #0
 8010818:	d03f      	beq.n	801089a <_vfiprintf_r+0x20a>
 801081a:	4b26      	ldr	r3, [pc, #152]	@ (80108b4 <_vfiprintf_r+0x224>)
 801081c:	bb1b      	cbnz	r3, 8010866 <_vfiprintf_r+0x1d6>
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	3307      	adds	r3, #7
 8010822:	f023 0307 	bic.w	r3, r3, #7
 8010826:	3308      	adds	r3, #8
 8010828:	9303      	str	r3, [sp, #12]
 801082a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801082c:	443b      	add	r3, r7
 801082e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010830:	e76a      	b.n	8010708 <_vfiprintf_r+0x78>
 8010832:	fb0c 3202 	mla	r2, ip, r2, r3
 8010836:	460c      	mov	r4, r1
 8010838:	2001      	movs	r0, #1
 801083a:	e7a8      	b.n	801078e <_vfiprintf_r+0xfe>
 801083c:	2300      	movs	r3, #0
 801083e:	3401      	adds	r4, #1
 8010840:	9305      	str	r3, [sp, #20]
 8010842:	4619      	mov	r1, r3
 8010844:	f04f 0c0a 	mov.w	ip, #10
 8010848:	4620      	mov	r0, r4
 801084a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801084e:	3a30      	subs	r2, #48	@ 0x30
 8010850:	2a09      	cmp	r2, #9
 8010852:	d903      	bls.n	801085c <_vfiprintf_r+0x1cc>
 8010854:	2b00      	cmp	r3, #0
 8010856:	d0c6      	beq.n	80107e6 <_vfiprintf_r+0x156>
 8010858:	9105      	str	r1, [sp, #20]
 801085a:	e7c4      	b.n	80107e6 <_vfiprintf_r+0x156>
 801085c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010860:	4604      	mov	r4, r0
 8010862:	2301      	movs	r3, #1
 8010864:	e7f0      	b.n	8010848 <_vfiprintf_r+0x1b8>
 8010866:	ab03      	add	r3, sp, #12
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	462a      	mov	r2, r5
 801086c:	4b12      	ldr	r3, [pc, #72]	@ (80108b8 <_vfiprintf_r+0x228>)
 801086e:	a904      	add	r1, sp, #16
 8010870:	4630      	mov	r0, r6
 8010872:	f7fd fdd1 	bl	800e418 <_printf_float>
 8010876:	4607      	mov	r7, r0
 8010878:	1c78      	adds	r0, r7, #1
 801087a:	d1d6      	bne.n	801082a <_vfiprintf_r+0x19a>
 801087c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801087e:	07d9      	lsls	r1, r3, #31
 8010880:	d405      	bmi.n	801088e <_vfiprintf_r+0x1fe>
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	059a      	lsls	r2, r3, #22
 8010886:	d402      	bmi.n	801088e <_vfiprintf_r+0x1fe>
 8010888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801088a:	f7fe fc05 	bl	800f098 <__retarget_lock_release_recursive>
 801088e:	89ab      	ldrh	r3, [r5, #12]
 8010890:	065b      	lsls	r3, r3, #25
 8010892:	f53f af1f 	bmi.w	80106d4 <_vfiprintf_r+0x44>
 8010896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010898:	e71e      	b.n	80106d8 <_vfiprintf_r+0x48>
 801089a:	ab03      	add	r3, sp, #12
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	462a      	mov	r2, r5
 80108a0:	4b05      	ldr	r3, [pc, #20]	@ (80108b8 <_vfiprintf_r+0x228>)
 80108a2:	a904      	add	r1, sp, #16
 80108a4:	4630      	mov	r0, r6
 80108a6:	f7fe f84f 	bl	800e948 <_printf_i>
 80108aa:	e7e4      	b.n	8010876 <_vfiprintf_r+0x1e6>
 80108ac:	08011168 	.word	0x08011168
 80108b0:	08011172 	.word	0x08011172
 80108b4:	0800e419 	.word	0x0800e419
 80108b8:	0801066b 	.word	0x0801066b
 80108bc:	0801116e 	.word	0x0801116e

080108c0 <__sflush_r>:
 80108c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	0716      	lsls	r6, r2, #28
 80108ca:	4605      	mov	r5, r0
 80108cc:	460c      	mov	r4, r1
 80108ce:	d454      	bmi.n	801097a <__sflush_r+0xba>
 80108d0:	684b      	ldr	r3, [r1, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	dc02      	bgt.n	80108dc <__sflush_r+0x1c>
 80108d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dd48      	ble.n	801096e <__sflush_r+0xae>
 80108dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80108de:	2e00      	cmp	r6, #0
 80108e0:	d045      	beq.n	801096e <__sflush_r+0xae>
 80108e2:	2300      	movs	r3, #0
 80108e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80108e8:	682f      	ldr	r7, [r5, #0]
 80108ea:	6a21      	ldr	r1, [r4, #32]
 80108ec:	602b      	str	r3, [r5, #0]
 80108ee:	d030      	beq.n	8010952 <__sflush_r+0x92>
 80108f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80108f2:	89a3      	ldrh	r3, [r4, #12]
 80108f4:	0759      	lsls	r1, r3, #29
 80108f6:	d505      	bpl.n	8010904 <__sflush_r+0x44>
 80108f8:	6863      	ldr	r3, [r4, #4]
 80108fa:	1ad2      	subs	r2, r2, r3
 80108fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80108fe:	b10b      	cbz	r3, 8010904 <__sflush_r+0x44>
 8010900:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010902:	1ad2      	subs	r2, r2, r3
 8010904:	2300      	movs	r3, #0
 8010906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010908:	6a21      	ldr	r1, [r4, #32]
 801090a:	4628      	mov	r0, r5
 801090c:	47b0      	blx	r6
 801090e:	1c43      	adds	r3, r0, #1
 8010910:	89a3      	ldrh	r3, [r4, #12]
 8010912:	d106      	bne.n	8010922 <__sflush_r+0x62>
 8010914:	6829      	ldr	r1, [r5, #0]
 8010916:	291d      	cmp	r1, #29
 8010918:	d82b      	bhi.n	8010972 <__sflush_r+0xb2>
 801091a:	4a2a      	ldr	r2, [pc, #168]	@ (80109c4 <__sflush_r+0x104>)
 801091c:	410a      	asrs	r2, r1
 801091e:	07d6      	lsls	r6, r2, #31
 8010920:	d427      	bmi.n	8010972 <__sflush_r+0xb2>
 8010922:	2200      	movs	r2, #0
 8010924:	6062      	str	r2, [r4, #4]
 8010926:	04d9      	lsls	r1, r3, #19
 8010928:	6922      	ldr	r2, [r4, #16]
 801092a:	6022      	str	r2, [r4, #0]
 801092c:	d504      	bpl.n	8010938 <__sflush_r+0x78>
 801092e:	1c42      	adds	r2, r0, #1
 8010930:	d101      	bne.n	8010936 <__sflush_r+0x76>
 8010932:	682b      	ldr	r3, [r5, #0]
 8010934:	b903      	cbnz	r3, 8010938 <__sflush_r+0x78>
 8010936:	6560      	str	r0, [r4, #84]	@ 0x54
 8010938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801093a:	602f      	str	r7, [r5, #0]
 801093c:	b1b9      	cbz	r1, 801096e <__sflush_r+0xae>
 801093e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010942:	4299      	cmp	r1, r3
 8010944:	d002      	beq.n	801094c <__sflush_r+0x8c>
 8010946:	4628      	mov	r0, r5
 8010948:	f7ff f9f6 	bl	800fd38 <_free_r>
 801094c:	2300      	movs	r3, #0
 801094e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010950:	e00d      	b.n	801096e <__sflush_r+0xae>
 8010952:	2301      	movs	r3, #1
 8010954:	4628      	mov	r0, r5
 8010956:	47b0      	blx	r6
 8010958:	4602      	mov	r2, r0
 801095a:	1c50      	adds	r0, r2, #1
 801095c:	d1c9      	bne.n	80108f2 <__sflush_r+0x32>
 801095e:	682b      	ldr	r3, [r5, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d0c6      	beq.n	80108f2 <__sflush_r+0x32>
 8010964:	2b1d      	cmp	r3, #29
 8010966:	d001      	beq.n	801096c <__sflush_r+0xac>
 8010968:	2b16      	cmp	r3, #22
 801096a:	d11e      	bne.n	80109aa <__sflush_r+0xea>
 801096c:	602f      	str	r7, [r5, #0]
 801096e:	2000      	movs	r0, #0
 8010970:	e022      	b.n	80109b8 <__sflush_r+0xf8>
 8010972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010976:	b21b      	sxth	r3, r3
 8010978:	e01b      	b.n	80109b2 <__sflush_r+0xf2>
 801097a:	690f      	ldr	r7, [r1, #16]
 801097c:	2f00      	cmp	r7, #0
 801097e:	d0f6      	beq.n	801096e <__sflush_r+0xae>
 8010980:	0793      	lsls	r3, r2, #30
 8010982:	680e      	ldr	r6, [r1, #0]
 8010984:	bf08      	it	eq
 8010986:	694b      	ldreq	r3, [r1, #20]
 8010988:	600f      	str	r7, [r1, #0]
 801098a:	bf18      	it	ne
 801098c:	2300      	movne	r3, #0
 801098e:	eba6 0807 	sub.w	r8, r6, r7
 8010992:	608b      	str	r3, [r1, #8]
 8010994:	f1b8 0f00 	cmp.w	r8, #0
 8010998:	dde9      	ble.n	801096e <__sflush_r+0xae>
 801099a:	6a21      	ldr	r1, [r4, #32]
 801099c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801099e:	4643      	mov	r3, r8
 80109a0:	463a      	mov	r2, r7
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b0      	blx	r6
 80109a6:	2800      	cmp	r0, #0
 80109a8:	dc08      	bgt.n	80109bc <__sflush_r+0xfc>
 80109aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109b2:	81a3      	strh	r3, [r4, #12]
 80109b4:	f04f 30ff 	mov.w	r0, #4294967295
 80109b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109bc:	4407      	add	r7, r0
 80109be:	eba8 0800 	sub.w	r8, r8, r0
 80109c2:	e7e7      	b.n	8010994 <__sflush_r+0xd4>
 80109c4:	dfbffffe 	.word	0xdfbffffe

080109c8 <_fflush_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	690b      	ldr	r3, [r1, #16]
 80109cc:	4605      	mov	r5, r0
 80109ce:	460c      	mov	r4, r1
 80109d0:	b913      	cbnz	r3, 80109d8 <_fflush_r+0x10>
 80109d2:	2500      	movs	r5, #0
 80109d4:	4628      	mov	r0, r5
 80109d6:	bd38      	pop	{r3, r4, r5, pc}
 80109d8:	b118      	cbz	r0, 80109e2 <_fflush_r+0x1a>
 80109da:	6a03      	ldr	r3, [r0, #32]
 80109dc:	b90b      	cbnz	r3, 80109e2 <_fflush_r+0x1a>
 80109de:	f7fe f95f 	bl	800eca0 <__sinit>
 80109e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d0f3      	beq.n	80109d2 <_fflush_r+0xa>
 80109ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80109ec:	07d0      	lsls	r0, r2, #31
 80109ee:	d404      	bmi.n	80109fa <_fflush_r+0x32>
 80109f0:	0599      	lsls	r1, r3, #22
 80109f2:	d402      	bmi.n	80109fa <_fflush_r+0x32>
 80109f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109f6:	f7fe fb4e 	bl	800f096 <__retarget_lock_acquire_recursive>
 80109fa:	4628      	mov	r0, r5
 80109fc:	4621      	mov	r1, r4
 80109fe:	f7ff ff5f 	bl	80108c0 <__sflush_r>
 8010a02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a04:	07da      	lsls	r2, r3, #31
 8010a06:	4605      	mov	r5, r0
 8010a08:	d4e4      	bmi.n	80109d4 <_fflush_r+0xc>
 8010a0a:	89a3      	ldrh	r3, [r4, #12]
 8010a0c:	059b      	lsls	r3, r3, #22
 8010a0e:	d4e1      	bmi.n	80109d4 <_fflush_r+0xc>
 8010a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a12:	f7fe fb41 	bl	800f098 <__retarget_lock_release_recursive>
 8010a16:	e7dd      	b.n	80109d4 <_fflush_r+0xc>

08010a18 <__swhatbuf_r>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a20:	2900      	cmp	r1, #0
 8010a22:	b096      	sub	sp, #88	@ 0x58
 8010a24:	4615      	mov	r5, r2
 8010a26:	461e      	mov	r6, r3
 8010a28:	da0d      	bge.n	8010a46 <__swhatbuf_r+0x2e>
 8010a2a:	89a3      	ldrh	r3, [r4, #12]
 8010a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010a30:	f04f 0100 	mov.w	r1, #0
 8010a34:	bf14      	ite	ne
 8010a36:	2340      	movne	r3, #64	@ 0x40
 8010a38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	6031      	str	r1, [r6, #0]
 8010a40:	602b      	str	r3, [r5, #0]
 8010a42:	b016      	add	sp, #88	@ 0x58
 8010a44:	bd70      	pop	{r4, r5, r6, pc}
 8010a46:	466a      	mov	r2, sp
 8010a48:	f000 f848 	bl	8010adc <_fstat_r>
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	dbec      	blt.n	8010a2a <__swhatbuf_r+0x12>
 8010a50:	9901      	ldr	r1, [sp, #4]
 8010a52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a5a:	4259      	negs	r1, r3
 8010a5c:	4159      	adcs	r1, r3
 8010a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a62:	e7eb      	b.n	8010a3c <__swhatbuf_r+0x24>

08010a64 <__smakebuf_r>:
 8010a64:	898b      	ldrh	r3, [r1, #12]
 8010a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a68:	079d      	lsls	r5, r3, #30
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	460c      	mov	r4, r1
 8010a6e:	d507      	bpl.n	8010a80 <__smakebuf_r+0x1c>
 8010a70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	6123      	str	r3, [r4, #16]
 8010a78:	2301      	movs	r3, #1
 8010a7a:	6163      	str	r3, [r4, #20]
 8010a7c:	b003      	add	sp, #12
 8010a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a80:	ab01      	add	r3, sp, #4
 8010a82:	466a      	mov	r2, sp
 8010a84:	f7ff ffc8 	bl	8010a18 <__swhatbuf_r>
 8010a88:	9f00      	ldr	r7, [sp, #0]
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff f9c6 	bl	800fe20 <_malloc_r>
 8010a94:	b948      	cbnz	r0, 8010aaa <__smakebuf_r+0x46>
 8010a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9a:	059a      	lsls	r2, r3, #22
 8010a9c:	d4ee      	bmi.n	8010a7c <__smakebuf_r+0x18>
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	f043 0302 	orr.w	r3, r3, #2
 8010aa6:	81a3      	strh	r3, [r4, #12]
 8010aa8:	e7e2      	b.n	8010a70 <__smakebuf_r+0xc>
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	6020      	str	r0, [r4, #0]
 8010aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ab2:	81a3      	strh	r3, [r4, #12]
 8010ab4:	9b01      	ldr	r3, [sp, #4]
 8010ab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010aba:	b15b      	cbz	r3, 8010ad4 <__smakebuf_r+0x70>
 8010abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	f000 f81d 	bl	8010b00 <_isatty_r>
 8010ac6:	b128      	cbz	r0, 8010ad4 <__smakebuf_r+0x70>
 8010ac8:	89a3      	ldrh	r3, [r4, #12]
 8010aca:	f023 0303 	bic.w	r3, r3, #3
 8010ace:	f043 0301 	orr.w	r3, r3, #1
 8010ad2:	81a3      	strh	r3, [r4, #12]
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	431d      	orrs	r5, r3
 8010ad8:	81a5      	strh	r5, [r4, #12]
 8010ada:	e7cf      	b.n	8010a7c <__smakebuf_r+0x18>

08010adc <_fstat_r>:
 8010adc:	b538      	push	{r3, r4, r5, lr}
 8010ade:	4d07      	ldr	r5, [pc, #28]	@ (8010afc <_fstat_r+0x20>)
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4608      	mov	r0, r1
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	602b      	str	r3, [r5, #0]
 8010aea:	f7f1 fb33 	bl	8002154 <_fstat>
 8010aee:	1c43      	adds	r3, r0, #1
 8010af0:	d102      	bne.n	8010af8 <_fstat_r+0x1c>
 8010af2:	682b      	ldr	r3, [r5, #0]
 8010af4:	b103      	cbz	r3, 8010af8 <_fstat_r+0x1c>
 8010af6:	6023      	str	r3, [r4, #0]
 8010af8:	bd38      	pop	{r3, r4, r5, pc}
 8010afa:	bf00      	nop
 8010afc:	200021f8 	.word	0x200021f8

08010b00 <_isatty_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4d06      	ldr	r5, [pc, #24]	@ (8010b1c <_isatty_r+0x1c>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4604      	mov	r4, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	602b      	str	r3, [r5, #0]
 8010b0c:	f7f1 fb32 	bl	8002174 <_isatty>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_isatty_r+0x1a>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_isatty_r+0x1a>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	200021f8 	.word	0x200021f8

08010b20 <_sbrk_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d06      	ldr	r5, [pc, #24]	@ (8010b3c <_sbrk_r+0x1c>)
 8010b24:	2300      	movs	r3, #0
 8010b26:	4604      	mov	r4, r0
 8010b28:	4608      	mov	r0, r1
 8010b2a:	602b      	str	r3, [r5, #0]
 8010b2c:	f7f1 fb3a 	bl	80021a4 <_sbrk>
 8010b30:	1c43      	adds	r3, r0, #1
 8010b32:	d102      	bne.n	8010b3a <_sbrk_r+0x1a>
 8010b34:	682b      	ldr	r3, [r5, #0]
 8010b36:	b103      	cbz	r3, 8010b3a <_sbrk_r+0x1a>
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	200021f8 	.word	0x200021f8

08010b40 <memcpy>:
 8010b40:	440a      	add	r2, r1
 8010b42:	4291      	cmp	r1, r2
 8010b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b48:	d100      	bne.n	8010b4c <memcpy+0xc>
 8010b4a:	4770      	bx	lr
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b56:	4291      	cmp	r1, r2
 8010b58:	d1f9      	bne.n	8010b4e <memcpy+0xe>
 8010b5a:	bd10      	pop	{r4, pc}

08010b5c <__assert_func>:
 8010b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b5e:	4614      	mov	r4, r2
 8010b60:	461a      	mov	r2, r3
 8010b62:	4b09      	ldr	r3, [pc, #36]	@ (8010b88 <__assert_func+0x2c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4605      	mov	r5, r0
 8010b68:	68d8      	ldr	r0, [r3, #12]
 8010b6a:	b954      	cbnz	r4, 8010b82 <__assert_func+0x26>
 8010b6c:	4b07      	ldr	r3, [pc, #28]	@ (8010b8c <__assert_func+0x30>)
 8010b6e:	461c      	mov	r4, r3
 8010b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b74:	9100      	str	r1, [sp, #0]
 8010b76:	462b      	mov	r3, r5
 8010b78:	4905      	ldr	r1, [pc, #20]	@ (8010b90 <__assert_func+0x34>)
 8010b7a:	f000 f841 	bl	8010c00 <fiprintf>
 8010b7e:	f000 f851 	bl	8010c24 <abort>
 8010b82:	4b04      	ldr	r3, [pc, #16]	@ (8010b94 <__assert_func+0x38>)
 8010b84:	e7f4      	b.n	8010b70 <__assert_func+0x14>
 8010b86:	bf00      	nop
 8010b88:	2000011c 	.word	0x2000011c
 8010b8c:	080111be 	.word	0x080111be
 8010b90:	08011190 	.word	0x08011190
 8010b94:	08011183 	.word	0x08011183

08010b98 <_calloc_r>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	fba1 5402 	umull	r5, r4, r1, r2
 8010b9e:	b93c      	cbnz	r4, 8010bb0 <_calloc_r+0x18>
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	f7ff f93d 	bl	800fe20 <_malloc_r>
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	b928      	cbnz	r0, 8010bb6 <_calloc_r+0x1e>
 8010baa:	2600      	movs	r6, #0
 8010bac:	4630      	mov	r0, r6
 8010bae:	bd70      	pop	{r4, r5, r6, pc}
 8010bb0:	220c      	movs	r2, #12
 8010bb2:	6002      	str	r2, [r0, #0]
 8010bb4:	e7f9      	b.n	8010baa <_calloc_r+0x12>
 8010bb6:	462a      	mov	r2, r5
 8010bb8:	4621      	mov	r1, r4
 8010bba:	f7fe f9ef 	bl	800ef9c <memset>
 8010bbe:	e7f5      	b.n	8010bac <_calloc_r+0x14>

08010bc0 <__ascii_mbtowc>:
 8010bc0:	b082      	sub	sp, #8
 8010bc2:	b901      	cbnz	r1, 8010bc6 <__ascii_mbtowc+0x6>
 8010bc4:	a901      	add	r1, sp, #4
 8010bc6:	b142      	cbz	r2, 8010bda <__ascii_mbtowc+0x1a>
 8010bc8:	b14b      	cbz	r3, 8010bde <__ascii_mbtowc+0x1e>
 8010bca:	7813      	ldrb	r3, [r2, #0]
 8010bcc:	600b      	str	r3, [r1, #0]
 8010bce:	7812      	ldrb	r2, [r2, #0]
 8010bd0:	1e10      	subs	r0, r2, #0
 8010bd2:	bf18      	it	ne
 8010bd4:	2001      	movne	r0, #1
 8010bd6:	b002      	add	sp, #8
 8010bd8:	4770      	bx	lr
 8010bda:	4610      	mov	r0, r2
 8010bdc:	e7fb      	b.n	8010bd6 <__ascii_mbtowc+0x16>
 8010bde:	f06f 0001 	mvn.w	r0, #1
 8010be2:	e7f8      	b.n	8010bd6 <__ascii_mbtowc+0x16>

08010be4 <__ascii_wctomb>:
 8010be4:	4603      	mov	r3, r0
 8010be6:	4608      	mov	r0, r1
 8010be8:	b141      	cbz	r1, 8010bfc <__ascii_wctomb+0x18>
 8010bea:	2aff      	cmp	r2, #255	@ 0xff
 8010bec:	d904      	bls.n	8010bf8 <__ascii_wctomb+0x14>
 8010bee:	228a      	movs	r2, #138	@ 0x8a
 8010bf0:	601a      	str	r2, [r3, #0]
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf6:	4770      	bx	lr
 8010bf8:	700a      	strb	r2, [r1, #0]
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	4770      	bx	lr
	...

08010c00 <fiprintf>:
 8010c00:	b40e      	push	{r1, r2, r3}
 8010c02:	b503      	push	{r0, r1, lr}
 8010c04:	4601      	mov	r1, r0
 8010c06:	ab03      	add	r3, sp, #12
 8010c08:	4805      	ldr	r0, [pc, #20]	@ (8010c20 <fiprintf+0x20>)
 8010c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c0e:	6800      	ldr	r0, [r0, #0]
 8010c10:	9301      	str	r3, [sp, #4]
 8010c12:	f7ff fd3d 	bl	8010690 <_vfiprintf_r>
 8010c16:	b002      	add	sp, #8
 8010c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c1c:	b003      	add	sp, #12
 8010c1e:	4770      	bx	lr
 8010c20:	2000011c 	.word	0x2000011c

08010c24 <abort>:
 8010c24:	b508      	push	{r3, lr}
 8010c26:	2006      	movs	r0, #6
 8010c28:	f000 f82c 	bl	8010c84 <raise>
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	f7f1 fa5d 	bl	80020ec <_exit>

08010c32 <_raise_r>:
 8010c32:	291f      	cmp	r1, #31
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	4605      	mov	r5, r0
 8010c38:	460c      	mov	r4, r1
 8010c3a:	d904      	bls.n	8010c46 <_raise_r+0x14>
 8010c3c:	2316      	movs	r3, #22
 8010c3e:	6003      	str	r3, [r0, #0]
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	bd38      	pop	{r3, r4, r5, pc}
 8010c46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c48:	b112      	cbz	r2, 8010c50 <_raise_r+0x1e>
 8010c4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c4e:	b94b      	cbnz	r3, 8010c64 <_raise_r+0x32>
 8010c50:	4628      	mov	r0, r5
 8010c52:	f000 f831 	bl	8010cb8 <_getpid_r>
 8010c56:	4622      	mov	r2, r4
 8010c58:	4601      	mov	r1, r0
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c60:	f000 b818 	b.w	8010c94 <_kill_r>
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d00a      	beq.n	8010c7e <_raise_r+0x4c>
 8010c68:	1c59      	adds	r1, r3, #1
 8010c6a:	d103      	bne.n	8010c74 <_raise_r+0x42>
 8010c6c:	2316      	movs	r3, #22
 8010c6e:	6003      	str	r3, [r0, #0]
 8010c70:	2001      	movs	r0, #1
 8010c72:	e7e7      	b.n	8010c44 <_raise_r+0x12>
 8010c74:	2100      	movs	r1, #0
 8010c76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	4798      	blx	r3
 8010c7e:	2000      	movs	r0, #0
 8010c80:	e7e0      	b.n	8010c44 <_raise_r+0x12>
	...

08010c84 <raise>:
 8010c84:	4b02      	ldr	r3, [pc, #8]	@ (8010c90 <raise+0xc>)
 8010c86:	4601      	mov	r1, r0
 8010c88:	6818      	ldr	r0, [r3, #0]
 8010c8a:	f7ff bfd2 	b.w	8010c32 <_raise_r>
 8010c8e:	bf00      	nop
 8010c90:	2000011c 	.word	0x2000011c

08010c94 <_kill_r>:
 8010c94:	b538      	push	{r3, r4, r5, lr}
 8010c96:	4d07      	ldr	r5, [pc, #28]	@ (8010cb4 <_kill_r+0x20>)
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	4608      	mov	r0, r1
 8010c9e:	4611      	mov	r1, r2
 8010ca0:	602b      	str	r3, [r5, #0]
 8010ca2:	f7f1 fa13 	bl	80020cc <_kill>
 8010ca6:	1c43      	adds	r3, r0, #1
 8010ca8:	d102      	bne.n	8010cb0 <_kill_r+0x1c>
 8010caa:	682b      	ldr	r3, [r5, #0]
 8010cac:	b103      	cbz	r3, 8010cb0 <_kill_r+0x1c>
 8010cae:	6023      	str	r3, [r4, #0]
 8010cb0:	bd38      	pop	{r3, r4, r5, pc}
 8010cb2:	bf00      	nop
 8010cb4:	200021f8 	.word	0x200021f8

08010cb8 <_getpid_r>:
 8010cb8:	f7f1 ba00 	b.w	80020bc <_getpid>

08010cbc <_init>:
 8010cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cbe:	bf00      	nop
 8010cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cc2:	bc08      	pop	{r3}
 8010cc4:	469e      	mov	lr, r3
 8010cc6:	4770      	bx	lr

08010cc8 <_fini>:
 8010cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cca:	bf00      	nop
 8010ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cce:	bc08      	pop	{r3}
 8010cd0:	469e      	mov	lr, r3
 8010cd2:	4770      	bx	lr
